# nnet3-info exp/nnet3/tdnn_lstm1c_sp/363.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/362.mdl exp/nnet3/tdnn_lstm1c_sp/363.mdl 
# Started at Thu Jul 30 12:24:57 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/363.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000130089, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03215, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.007 0.009,0.02,0.56,0.71,0.79 0.86,0.94,0.96,1.2), mean=0.466, stddev=0.305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.16 0.18,0.22,0.65,0.91,1.2 1.3,1.4,1.5,1.5), mean=0.634, stddev=0.368], bias-{mean,stddev}=-0.003926,0.06155, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0.191786, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,2e-05,3e-05,4e-05 6e-05,0.0002,0.05,0.09,0.11 0.12,0.15,0.17,0.19), mean=0.0482, stddev=0.0456], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.02,0.03 0.04,0.06,0.39,0.61,0.71 0.80,0.89,0.91,0.98), mean=0.357, stddev=0.266], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.01 0.02,0.03,0.33,0.45,0.54 0.63,0.77,0.84,1.5), mean=0.307, stddev=0.221], oderiv-count=1.15386e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32743.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,9e-06,1e-05,2e-05 5e-05,0.0002,0.04,0.09,0.11 0.12,0.15,0.17,0.19), mean=0.0459, stddev=0.0444], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.0001,0.0001,0.0002 0.0003,0.0007,0.08,0.11,0.13 0.14,0.15,0.15,0.17), mean=0.0645, stddev=0.0503]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000130089, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01166, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.38,0.40,0.45,0.50,0.54 0.58,0.63,0.64,0.76), mean=0.456, stddev=0.0667], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.005,0.01,0.28,0.33,0.37 0.39,0.43,0.49,0.73), mean=0.222, stddev=0.146], bias-{mean,stddev}=-0.03501,0.03979, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.21 0.22,0.23,0.26,0.30,0.32 0.33,0.36,0.38,0.47), mean=0.267, stddev=0.0422], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.36,0.37,0.38 0.40,0.41,0.44,0.47,0.49 0.50,0.52,0.53,0.56), mean=0.442, stddev=0.0362], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.04,0.05,0.06,0.06 0.07,0.07,0.08,0.10), mean=0.0496, stddev=0.00942], oderiv-count=1.06032e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32016.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.23,0.26,0.30,0.32 0.34,0.35,0.40,0.49), mean=0.268, stddev=0.044], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.42,0.44,0.48,0.54,0.57 0.60,0.63,0.64,0.69), mean=0.489, stddev=0.0591]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000130089, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01762, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,7e-07,2e-06,1e-05 0.0003,0.17,0.41,0.59,0.66 0.73,0.79,0.85,1.0), mean=0.385, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.37,0.42 0.50,0.70,0.81,0.90,0.96 1.0,1.1,1.2,1.3), mean=0.786, stddev=0.169], bias-{mean,stddev}=0.00273,0.02766, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000130089, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.08591, w_fc-rms=0.02665, w_oc-rms=0.04728, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063912, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.41,0.43 0.44,0.45,0.48,0.50,0.55 0.71,0.77,0.80,0.85), mean=0.495, stddev=0.0758], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.19 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0209] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063912, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.45,0.46,0.47 0.48,0.49,0.50,0.53,0.58 0.65,0.74,0.79,0.83), mean=0.519, stddev=0.0603], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0203] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0172622, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.88,-0.85,-0.45 -0.26,-0.13,0.0008,0.16,0.30 0.60,0.84,0.87,0.90), mean=0.0173, stddev=0.299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.21,0.26 0.38,0.45,0.58,0.74,1.0 1.0,1.0,1.0,1.0), mean=0.612, stddev=0.214] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063912, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.56,0.58,0.69), mean=0.462, stddev=0.0408], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0198] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0063912, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.73,-0.67,-0.31 -0.16,-0.08,0.0005,0.10,0.21 0.40,0.63,0.72,0.80), mean=0.0116, stddev=0.225], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.42,0.54 0.73,0.81,0.88,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.861, stddev=0.129] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=4.55038e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000124804, count-zeroing-boundaries=296466
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.201653
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000130089, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03986, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.42,0.45 0.50,0.56,0.86,1.1,1.2 1.3,1.3,1.4,1.4), mean=0.861, stddev=0.291], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0007,0.0009,0.002 0.008,0.34,0.55,0.72,0.91 1.2,1.4,1.5,1.8), mean=0.544, stddev=0.342], bias-{mean,stddev}=0.01346,0.2599, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000130089, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01287, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.22,0.25,0.26 0.28,0.30,0.35,0.40,0.43 0.47,0.50,0.53,0.57), mean=0.353, stddev=0.0651], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.17,0.28,0.38,0.40 0.43,0.44,0.45,0.48), mean=0.276, stddev=0.0986], bias-{mean,stddev}=0.001585,0.008743, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0.00211538, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.01,0.02,0.02 0.03,0.05,0.08,0.11,0.12 0.13,0.15,0.15,0.18), mean=0.0777, stddev=0.0325], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.12,0.14,0.17 0.23,0.34,0.47,0.58,0.63 0.67,0.71,0.72,0.82), mean=0.456, stddev=0.149], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.09,0.09,0.10 0.10,0.11,0.13,0.16,0.20 0.23,0.27,0.29,0.37), mean=0.139, stddev=0.0442], oderiv-count=1.02586e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29835.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.01,0.02,0.02 0.03,0.05,0.08,0.10,0.12 0.13,0.15,0.16,0.18), mean=0.0772, stddev=0.032], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.05,0.06,0.07 0.09,0.10,0.12,0.14,0.16 0.17,0.17,0.18,0.19), mean=0.123, stddev=0.0272]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000130089, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008424, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.27,0.28 0.29,0.30,0.32,0.36,0.39 0.40,0.42,0.43,0.47), mean=0.33, stddev=0.039], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.12,0.13,0.14 0.15,0.16,0.18,0.22,0.24 0.26,0.29,0.30,0.37), mean=0.188, stddev=0.0403], bias-{mean,stddev}=-0.02699,0.01918, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.23,0.25,0.28,0.29 0.31,0.32,0.33,0.37), mean=0.253, stddev=0.031], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.37,0.38 0.39,0.41,0.43,0.45,0.46 0.47,0.48,0.48,0.50), mean=0.427, stddev=0.028], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0367, stddev=0.0028], oderiv-count=1.0039e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27654.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.23,0.25,0.28,0.30 0.31,0.32,0.33,0.38), mean=0.255, stddev=0.0325], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.35,0.38,0.41 0.43,0.44,0.49,0.54,0.57 0.60,0.65,0.67,0.82), mean=0.493, stddev=0.0628]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000130089, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01446, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,6e-06,2e-05 6e-05,0.001,0.33,0.52,0.58 0.62,0.67,0.71,0.90), mean=0.285, stddev=0.233], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.29,0.35 0.44,0.60,0.66,0.73,0.77 0.81,0.88,0.94,1.3), mean=0.646, stddev=0.131], bias-{mean,stddev}=0.005769,0.03249, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000130089, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05386, w_fc-rms=0.01586, w_oc-rms=0.04106, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644477, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.46 0.46,0.48,0.50,0.51,0.56 0.60,0.66,0.69,0.78), mean=0.505, stddev=0.0472], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0163] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644477, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.46,0.48 0.49,0.50,0.50,0.53,0.56 0.60,0.65,0.67,0.73), mean=0.517, stddev=0.0406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0175] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644477, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.80,-0.75,-0.43 -0.24,-0.09,0.0009,0.12,0.32 0.54,0.67,0.71,0.78), mean=0.00947, stddev=0.257], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.36,0.40 0.47,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.719, stddev=0.219] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644477, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.46,0.47,0.50,0.50,0.51 0.53,0.56,0.58,0.69), mean=0.49, stddev=0.0282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0186] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644477, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.72,-0.60,-0.52,-0.31 -0.16,-0.07,0.0006,0.09,0.20 0.38,0.48,0.54,0.61), mean=0.00714, stddev=0.186], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.57,0.59,0.69 0.76,0.83,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.898, stddev=0.104] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.05937e-05, count-zeroing-boundaries=261492
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.201653
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000130089, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03817, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.50,0.54 0.56,0.61,0.84,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.84, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.002 0.004,0.01,0.56,0.81,0.93 1.1,1.3,1.4,1.5), mean=0.482, stddev=0.383], bias-{mean,stddev}=-0.0007733,0.2081, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000130089, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01221, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.24,0.26 0.27,0.29,0.32,0.38,0.42 0.46,0.49,0.50,0.55), mean=0.336, stddev=0.0599], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.17,0.19,0.25,0.36,0.39 0.40,0.42,0.42,0.47), mean=0.266, stddev=0.0834], bias-{mean,stddev}=0.0008505,0.006133, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.78e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.13,0.13,0.15), mean=0.0642, stddev=0.0292], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.14,0.17 0.21,0.29,0.46,0.57,0.62 0.65,0.67,0.70,0.72), mean=0.438, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.11,0.13,0.17,0.19 0.21,0.23,0.23,0.27), mean=0.141, stddev=0.0333], oderiv-count=1.08384e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25473.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.13,0.13,0.16), mean=0.0665, stddev=0.0289], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.07,0.09,0.11,0.13,0.14 0.15,0.16,0.16,0.18), mean=0.109, stddev=0.0251]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000130089, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008419, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.15,0.21 0.26,0.29,0.33,0.38,0.40 0.41,0.43,0.44,0.47), mean=0.327, stddev=0.0608], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.13 0.14,0.15,0.17,0.22,0.25 0.28,0.31,0.33,0.39), mean=0.187, stddev=0.0452], bias-{mean,stddev}=-0.01998,0.02372, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.42e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.15,0.19 0.21,0.24,0.27,0.30,0.31 0.33,0.34,0.35,0.40), mean=0.266, stddev=0.0433], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.34,0.36 0.37,0.39,0.42,0.45,0.46 0.47,0.48,0.49,0.53), mean=0.419, stddev=0.0338], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0304, stddev=0.00305], oderiv-count=997280
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23293, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.19 0.22,0.24,0.28,0.31,0.32 0.33,0.35,0.36,0.50), mean=0.273, stddev=0.0448], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.24,0.33 0.41,0.46,0.53,0.60,0.64 0.66,0.70,0.71,1.1), mean=0.527, stddev=0.1]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000130089, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02074, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.28,0.29 0.31,0.35,0.49,0.65,0.72 0.76,0.86,0.90,0.99), mean=0.506, stddev=0.155], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.61,0.62,0.72 0.78,0.81,0.88,1.0,1.1 1.3,1.4,1.5,1.9), mean=0.93, stddev=0.174], bias-{mean,stddev}=0.01256,0.01636, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000130089, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1084, w_fc-rms=0.04445, w_oc-rms=0.07465, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650941, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.59,0.60,0.63 0.65,0.68,0.72,0.76,0.79 0.82,0.84,0.85,0.89), mean=0.721, stddev=0.0556], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.14,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.22), mean=0.167, stddev=0.022] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650941, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.53,0.56,0.58 0.60,0.63,0.68,0.72,0.77 0.80,0.84,0.86,0.88), mean=0.679, stddev=0.0649], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.13 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.176, stddev=0.0234] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.029147, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.81,-0.73,-0.59 -0.44,-0.32,-0.005,0.28,0.42 0.59,0.79,0.83,0.92), mean=-0.00354, stddev=0.356], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.20,0.23 0.30,0.36,0.45,0.49,0.52 0.54,0.56,0.57,0.60), mean=0.426, stddev=0.0875] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650941, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.50,0.53 0.55,0.59,0.64,0.67,0.70 0.72,0.77,0.80,0.88), mean=0.634, stddev=0.0602], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.176, stddev=0.0178] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00650941, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.72,-0.65,-0.53 -0.38,-0.27,-0.005,0.24,0.37 0.55,0.70,0.76,0.83), mean=-0.00453, stddev=0.311], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.32,0.35,0.39 0.47,0.55,0.65,0.69,0.72 0.74,0.75,0.76,0.81), mean=0.619, stddev=0.0992] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.49692e-06, count-zeroing-boundaries=222374
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.201653
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000130089, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09005, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.1,1.1 1.2,1.3,1.7,2.6,2.7 2.8,2.8,2.9,3.1), mean=1.95, stddev=0.638], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.88,1.0,1.1 1.1,1.2,1.4,1.6,1.8 2.0,2.1,2.2,2.3), mean=1.43, stddev=0.277], bias-{mean,stddev}=-0.02257,0.6449, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000130089, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04302, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.58,0.60,0.61 0.62,0.64,0.68,0.72,0.75 0.79,0.84,0.90,2.1), mean=0.689, stddev=0.0815], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.1,1.1 1.2,1.2,1.7,2.5,2.6 2.7,2.7,2.8,2.9), mean=1.88, stddev=0.595], bias-{mean,stddev}=5.202e-09,0.02133, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0136], oderiv-count=569920
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/362.mdl exp/nnet3/tdnn_lstm1c_sp/363.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.50814 tdnn2.affine:3.3358 lstm1.W_all:2.5905 lstm1.lstm_nonlin:0.0507193 lstm1.W_rp:1.10059 tdnn3.affine:2.36197 tdnn4.affine:2.45816 lstm2.W_all:1.77397 lstm2.lstm_nonlin:0.0289942 lstm2.W_rp:0.756021 tdnn5.affine:1.95891 tdnn6.affine:2.08428 lstm3.W_all:2.063 lstm3.lstm_nonlin:0.0522064 lstm3.W_rp:0.790983 output.affine:2.09512 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.7761 tdnn2.affine:10.5738 lstm1.W_all:20.5235 lstm1.lstm_nonlin:2.3172 lstm1.W_rp:15.245 tdnn3.affine:8.19681 tdnn4.affine:7.62498 lstm2.W_all:16.8799 lstm2.lstm_nonlin:1.58618 lstm2.W_rp:14.4288 tdnn5.affine:7.77961 tdnn6.affine:7.61584 lstm3.W_all:24.1294 lstm3.lstm_nonlin:3.16869 lstm3.W_rp:34.7063 output.affine:31.835 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.274229 tdnn2.affine:0.315884 lstm1.W_all:0.126272 lstm1.lstm_nonlin:0.0218497 lstm1.W_rp:0.0721954 tdnn3.affine:0.288669 tdnn4.affine:0.322632 lstm2.W_all:0.105102 lstm2.lstm_nonlin:0.0182469 lstm2.W_rp:0.0523818 tdnn5.affine:0.252006 tdnn6.affine:0.274034 lstm3.W_all:0.0855843 lstm3.lstm_nonlin:0.0164873 lstm3.W_rp:0.0227735 output.affine:0.0657716 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:24:57 KST 2020, elapsed time 0 seconds
