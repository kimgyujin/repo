# nnet3-info exp/nnet3/tdnn_lstm1c_sp/44.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/43.mdl exp/nnet3/tdnn_lstm1c_sp/44.mdl 
# Started at Thu Jul 30 10:18:34 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/44.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000261754, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0313, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.01,0.02 0.05,0.42,0.54,0.64,0.69 0.76,0.87,0.93,1.2), mean=0.495, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.16 0.17,0.21,0.60,0.84,1.2 1.4,1.5,1.6,1.7), mean=0.605, stddev=0.378], bias-{mean,stddev}=-0.001754,0.06024, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0.133239, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,3e-06,5e-06,4e-05 0.0001,0.02,0.07,0.09,0.10 0.12,0.13,0.14,0.20), mean=0.0598, stddev=0.0367], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0005,0.003,0.009 0.04,0.17,0.48,0.61,0.70 0.79,0.84,0.87,0.96), mean=0.43, stddev=0.231], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.10,0.27,0.35,0.44,0.50 0.58,0.69,0.74,1.1), mean=0.346, stddev=0.151], oderiv-count=1.19629e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40451, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,1e-06,2e-06,8e-06 8e-05,0.02,0.06,0.09,0.10 0.12,0.13,0.14,0.20), mean=0.0577, stddev=0.0368], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,4e-05,7e-05,0.0002 0.0006,0.05,0.10,0.11,0.12 0.13,0.13,0.14,0.16), mean=0.0835, stddev=0.0424]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000261754, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0131, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.42 0.44,0.46,0.51,0.56,0.58 0.62,0.65,0.67,0.81), mean=0.514, stddev=0.0587], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.008,0.01 0.03,0.24,0.31,0.35,0.37 0.39,0.42,0.45,0.79), mean=0.275, stddev=0.117], bias-{mean,stddev}=-0.002129,0.02965, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.29,0.29,0.30 0.32,0.33,0.36,0.39,0.41 0.43,0.46,0.48,0.58), mean=0.361, stddev=0.0388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.41 0.42,0.43,0.46,0.49,0.50 0.51,0.51,0.52,0.54), mean=0.458, stddev=0.0305], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.0413, stddev=0.00857], oderiv-count=1.12198e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39611.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.28,0.29,0.30 0.31,0.33,0.36,0.40,0.42 0.44,0.47,0.49,0.65), mean=0.364, stddev=0.0455], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.51,0.53,0.54 0.56,0.58,0.64,0.69,0.72 0.76,0.81,0.83,0.96), mean=0.641, stddev=0.0689]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000261754, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01771, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.02,0.07 0.14,0.23,0.39,0.57,0.68 0.76,0.84,0.90,1.1), mean=0.403, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.39,0.44 0.51,0.70,0.83,0.91,0.95 0.99,1.0,1.1,1.4), mean=0.791, stddev=0.163], bias-{mean,stddev}=-0.001621,0.02147, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000261754, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02685, w_fc-rms=0.04228, w_oc-rms=0.05253, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0061332, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.44 0.45,0.46,0.49,0.53,0.56 0.63,0.67,0.69,0.73), mean=0.501, stddev=0.0557], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0145] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0061332, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.37,0.39 0.41,0.43,0.47,0.53,0.63 0.71,0.75,0.79,0.86), mean=0.494, stddev=0.0926], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.16,0.18 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0214] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00945673, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.82,-0.80,-0.60 -0.39,-0.23,0.004,0.25,0.36 0.63,0.75,0.79,0.83), mean=0.00116, stddev=0.333], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.27,0.32 0.39,0.46,0.57,0.69,0.80 0.93,0.99,0.99,1.0), mean=0.582, stddev=0.162] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0061332, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.41 0.42,0.44,0.47,0.51,0.53 0.56,0.58,0.60,0.69), mean=0.476, stddev=0.045], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0169] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.015315, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.88,-0.83,-0.59 -0.35,-0.21,0.01,0.20,0.33 0.59,0.75,0.83,0.90), mean=-0.00258, stddev=0.318], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.20,0.22,0.36 0.53,0.71,0.82,0.88,0.91 0.96,0.99,0.99,1.0), mean=0.773, stddev=0.17] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=297768
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000261754, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03235, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.33 0.36,0.39,0.63,0.97,1.0 1.1,1.1,1.2,1.2), mean=0.682, stddev=0.282], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.12 0.26,0.36,0.48,0.62,0.72 0.79,0.90,1.0,1.1), mean=0.486, stddev=0.189], bias-{mean,stddev}=-0.001542,0.04013, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000261754, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01352, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.27 0.29,0.31,0.36,0.43,0.47 0.51,0.54,0.56,0.61), mean=0.371, stddev=0.0722], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.14,0.16,0.26,0.41,0.45 0.48,0.51,0.52,0.57), mean=0.282, stddev=0.124], bias-{mean,stddev}=-0.003535,0.01863, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.06,0.07 0.09,0.11,0.15,0.18,0.21 0.22,0.24,0.25,0.26), mean=0.148, stddev=0.0447], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.23,0.26 0.31,0.38,0.50,0.59,0.63 0.65,0.69,0.71,0.76), mean=0.483, stddev=0.123], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.06,0.07,0.08,0.09 0.09,0.11,0.11,0.17), mean=0.0704, stddev=0.0146], oderiv-count=1.20755e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37092.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.06,0.07 0.09,0.11,0.15,0.20,0.22 0.24,0.25,0.26,0.29), mean=0.153, stddev=0.0501], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.15,0.16,0.18 0.20,0.22,0.25,0.28,0.30 0.32,0.34,0.35,0.38), mean=0.249, stddev=0.0426]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000261754, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009895, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.31,0.32,0.33 0.34,0.36,0.39,0.42,0.44 0.45,0.47,0.49,0.62), mean=0.389, stddev=0.0374], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.17 0.18,0.19,0.22,0.25,0.27 0.29,0.30,0.32,0.35), mean=0.223, stddev=0.0343], bias-{mean,stddev}=-0.00945,0.01635, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.99e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.26,0.28,0.31,0.34,0.36 0.38,0.40,0.40,0.47), mean=0.309, stddev=0.039], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.38,0.39 0.40,0.42,0.44,0.47,0.48 0.50,0.51,0.51,0.53), mean=0.443, stddev=0.0309], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.03, stddev=0.00266], oderiv-count=1.11277e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34573.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.25 0.26,0.28,0.31,0.35,0.37 0.40,0.42,0.43,0.48), mean=0.317, stddev=0.0439], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.49,0.51 0.53,0.55,0.60,0.66,0.69 0.73,0.77,0.78,0.89), mean=0.607, stddev=0.0675]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000261754, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01379, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.008,0.01 0.02,0.07,0.27,0.48,0.57 0.63,0.68,0.71,1.1), mean=0.288, stddev=0.202], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.28,0.31 0.37,0.55,0.65,0.71,0.74 0.78,0.83,0.86,0.97), mean=0.614, stddev=0.135], bias-{mean,stddev}=-0.002775,0.02228, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000261754, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01742, w_fc-rms=0.02225, w_oc-rms=0.02533, count=1.32e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00618378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.44,0.45 0.45,0.47,0.49,0.51,0.53 0.56,0.60,0.61,0.64), mean=0.494, stddev=0.0356], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0155] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00618378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.40,0.41 0.42,0.44,0.49,0.51,0.53 0.56,0.63,0.66,0.77), mean=0.484, stddev=0.0512], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.238, stddev=0.0132] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00618378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.67,-0.59,-0.44 -0.29,-0.17,0.006,0.18,0.33 0.47,0.57,0.68,0.76), mean=0.00576, stddev=0.255], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.43,0.47,0.50 0.53,0.56,0.65,0.88,0.98 0.99,1.0,1.0,1.0), mean=0.703, stddev=0.164] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00618378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.46,0.49,0.51,0.53 0.55,0.57,0.59,0.65), mean=0.485, stddev=0.0348], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0158] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00618378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.68,-0.55,-0.39 -0.27,-0.15,0.008,0.16,0.30 0.42,0.56,0.68,0.82), mean=0.00801, stddev=0.24], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.42,0.50,0.68 0.75,0.81,0.88,0.94,0.99 1.0,1.0,1.0,1.0), mean=0.863, stddev=0.108] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.61374e-06, count-zeroing-boundaries=262683
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000261754, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02903, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.43,0.44 0.46,0.49,0.60,0.80,0.86 0.90,0.93,0.95,1.0), mean=0.643, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.05,0.13,0.44,0.61,0.70 0.76,0.87,0.92,1.0), mean=0.402, stddev=0.241], bias-{mean,stddev}=0.001682,0.09195, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000261754, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0127, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.22,0.23 0.26,0.28,0.32,0.41,0.46 0.52,0.59,0.60,0.70), mean=0.344, stddev=0.0881], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.18 0.19,0.21,0.27,0.35,0.38 0.41,0.43,0.45,0.51), mean=0.28, stddev=0.0733], bias-{mean,stddev}=0.0006178,0.01952, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.62e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.05,0.07,0.10,0.13,0.15 0.16,0.18,0.19,0.24), mean=0.0993, stddev=0.038], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.19 0.23,0.30,0.42,0.54,0.59 0.62,0.64,0.67,0.72), mean=0.416, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.06,0.07,0.08,0.09,0.11 0.12,0.13,0.15,0.20), mean=0.0823, stddev=0.0198], oderiv-count=971904
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32054.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.04 0.05,0.07,0.10,0.14,0.16 0.18,0.19,0.20,0.23), mean=0.104, stddev=0.0409], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.13 0.14,0.16,0.19,0.21,0.23 0.25,0.27,0.27,0.36), mean=0.185, stddev=0.0385]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000261754, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009608, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.29,0.31 0.32,0.34,0.37,0.41,0.45 0.46,0.50,0.51,0.57), mean=0.376, stddev=0.0491], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.14,0.15 0.16,0.17,0.21,0.25,0.27 0.30,0.34,0.37,0.46), mean=0.214, stddev=0.0476], bias-{mean,stddev}=-0.01105,0.01505, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.24e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.23,0.24 0.26,0.28,0.31,0.34,0.36 0.38,0.40,0.40,0.56), mean=0.311, stddev=0.0423], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.37 0.38,0.39,0.42,0.45,0.46 0.48,0.49,0.50,0.52), mean=0.422, stddev=0.0318], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0257, stddev=0.00245], oderiv-count=958400
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29535.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.23,0.24 0.26,0.28,0.32,0.36,0.38 0.39,0.43,0.44,0.74), mean=0.323, stddev=0.052], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.48,0.51 0.53,0.56,0.62,0.70,0.74 0.78,0.85,0.87,1.1), mean=0.632, stddev=0.0897]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000261754, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01964, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.17,0.23 0.30,0.35,0.43,0.62,0.75 0.80,0.85,0.88,1.6), mean=0.471, stddev=0.169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.61,0.63 0.65,0.68,0.75,1.1,1.3 1.4,1.5,1.5,1.7), mean=0.86, stddev=0.249], bias-{mean,stddev}=0.008577,0.02866, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000261754, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03099, w_fc-rms=0.04176, w_oc-rms=0.05643, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0062448, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.46,0.47 0.49,0.51,0.57,0.63,0.65 0.67,0.69,0.70,0.76), mean=0.57, stddev=0.0611], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.19,0.20,0.21,0.22,0.22 0.22,0.23,0.23,0.23), mean=0.206, stddev=0.0113] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0062448, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.46,0.48 0.50,0.52,0.58,0.63,0.66 0.67,0.70,0.72,0.85), mean=0.582, stddev=0.0607], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.17,0.17,0.18 0.19,0.19,0.21,0.22,0.22 0.23,0.23,0.23,0.24), mean=0.206, stddev=0.0147] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00779428, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.76,-0.50 -0.31,-0.19,-0.005,0.21,0.33 0.47,0.66,0.75,0.86), mean=0.0026, stddev=0.287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.28,0.33 0.37,0.40,0.45,0.50,0.52 0.54,0.56,0.58,0.63), mean=0.448, stddev=0.063] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0062448, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.53,0.54,0.55 0.58,0.60,0.64,0.68,0.70 0.72,0.75,0.75,0.89), mean=0.638, stddev=0.05], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.15,0.16,0.17 0.17,0.18,0.19,0.20,0.20 0.21,0.21,0.21,0.21), mean=0.189, stddev=0.0128] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.016072, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.97,-0.85,-0.76,-0.51 -0.29,-0.18,0.002,0.18,0.29 0.48,0.68,0.77,0.91), mean=0.00463, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.22,0.31,0.41 0.50,0.58,0.65,0.70,0.71 0.73,0.74,0.75,0.77), mean=0.626, stddev=0.101] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223457
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000261754, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06747, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.5,1.7,1.8 1.9,1.9,1.9,2.1), mean=1.52, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.66,0.73,0.82 0.86,0.94,1.1,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.08, stddev=0.164], bias-{mean,stddev}=0.001937,0.09668, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000261754, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04095, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.51,0.53,0.55 0.57,0.59,0.64,0.70,0.74 0.78,0.83,0.88,2.3), mean=0.653, stddev=0.0995], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.6,1.6,1.9,2.1,2.2 2.2,2.3,2.4,2.6), mean=1.86, stddev=0.243], bias-{mean,stddev}=4.589e-09,0.03054, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=578560
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/43.mdl exp/nnet3/tdnn_lstm1c_sp/44.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.09641 tdnn2.affine:9.3766 lstm1.W_all:8.08117 lstm1.lstm_nonlin:0.165145 lstm1.W_rp:3.31352 tdnn3.affine:5.72563 tdnn4.affine:6.75405 lstm2.W_all:5.48339 lstm2.lstm_nonlin:0.0894258 lstm2.W_rp:2.30475 tdnn5.affine:4.84266 tdnn6.affine:5.86988 lstm3.W_all:7.27902 lstm3.lstm_nonlin:0.212517 lstm3.W_rp:2.9206 output.affine:6.17561 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.4375 tdnn2.affine:11.82 lstm1.W_all:20.6199 lstm1.lstm_nonlin:1.65503 lstm1.W_rp:11.9113 tdnn3.affine:8.61902 tdnn4.affine:8.92208 lstm2.W_all:16.0728 lstm2.lstm_nonlin:0.865377 lstm2.W_rp:10.7777 tdnn5.affine:8.10251 tdnn6.affine:8.66438 lstm3.W_all:22.8739 lstm3.lstm_nonlin:1.74989 lstm3.W_rp:24.8589 output.affine:30.3174 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.733585 tdnn2.affine:0.801604 lstm1.W_all:0.39309 lstm1.lstm_nonlin:0.0998004 lstm1.W_rp:0.279197 tdnn3.affine:0.686366 tdnn4.affine:0.784859 lstm2.W_all:0.343871 lstm2.lstm_nonlin:0.102988 lstm2.W_rp:0.215079 tdnn5.affine:0.61967 tdnn6.affine:0.700767 lstm3.W_all:0.320712 lstm3.lstm_nonlin:0.122204 lstm3.W_rp:0.11813 output.affine:0.20369 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:18:34 KST 2020, elapsed time 0 seconds
