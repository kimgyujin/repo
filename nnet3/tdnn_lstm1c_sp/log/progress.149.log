# nnet3-info exp/nnet3/tdnn_lstm1c_sp/149.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/148.mdl exp/nnet3/tdnn_lstm1c_sp/149.mdl 
# Started at Thu Jul 30 10:59:58 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/149.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000187614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02996, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.01 0.04,0.37,0.53,0.62,0.67 0.72,0.78,0.85,1.1), mean=0.47, stddev=0.22], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.17,0.20,0.59,0.80,1.1 1.4,1.4,1.5,1.7), mean=0.584, stddev=0.355], bias-{mean,stddev}=0.002631,0.05468, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0.131484, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,1e-05,2e-05,5e-05 0.0001,0.004,0.06,0.08,0.10 0.11,0.13,0.15,0.18), mean=0.0563, stddev=0.037], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.004,0.007,0.02 0.04,0.11,0.48,0.63,0.72 0.78,0.87,0.90,0.96), mean=0.433, stddev=0.241], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.07,0.28,0.37,0.48,0.56 0.64,0.74,0.81,1.5), mean=0.37, stddev=0.181], oderiv-count=1.13792e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33405.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-06,4e-06,1e-05 5e-05,0.003,0.05,0.08,0.10 0.11,0.12,0.15,0.17), mean=0.0527, stddev=0.0363], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,7e-05,0.0001,0.0002 0.0004,0.02,0.09,0.10,0.11 0.12,0.13,0.13,0.14), mean=0.0732, stddev=0.0397]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000187614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01214, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.38,0.40 0.41,0.43,0.47,0.52,0.54 0.57,0.60,0.64,0.75), mean=0.476, stddev=0.0557], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.009 0.02,0.21,0.29,0.32,0.35 0.37,0.40,0.41,0.72), mean=0.252, stddev=0.115], bias-{mean,stddev}=-0.00192,0.02895, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.29,0.30,0.33,0.36,0.38 0.40,0.43,0.45,0.52), mean=0.334, stddev=0.0391], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.44,0.46,0.48,0.50 0.51,0.52,0.53,0.54), mean=0.46, stddev=0.0272], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0455, stddev=0.00942], oderiv-count=1.10637e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32631.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.25,0.27 0.28,0.29,0.32,0.36,0.38 0.40,0.44,0.45,0.53), mean=0.33, stddev=0.0441], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.46,0.47 0.49,0.52,0.57,0.63,0.67 0.70,0.77,0.80,0.84), mean=0.576, stddev=0.0722]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000187614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01662, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0008,0.003,0.01 0.07,0.20,0.37,0.54,0.64 0.72,0.80,0.89,1.1), mean=0.37, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.36,0.38,0.44 0.49,0.65,0.77,0.85,0.90 0.94,1.0,1.0,1.3), mean=0.743, stddev=0.151], bias-{mean,stddev}=-0.002037,0.02382, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000187614, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02221, w_fc-rms=0.03477, w_oc-rms=0.04828, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619423, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.43,0.44 0.45,0.46,0.49,0.52,0.55 0.59,0.64,0.67,0.75), mean=0.498, stddev=0.0478], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.20,0.21 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0143] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619423, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.39,0.40 0.42,0.45,0.49,0.52,0.58 0.67,0.74,0.79,0.88), mean=0.496, stddev=0.077], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.18,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.019] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00885074, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.78,-0.72,-0.52 -0.33,-0.18,-0.004,0.17,0.31 0.53,0.71,0.79,0.85), mean=0.00227, stddev=0.286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.27,0.30,0.37 0.42,0.48,0.61,0.74,0.95 0.99,1.0,1.0,1.0), mean=0.625, stddev=0.18] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619423, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.42 0.43,0.44,0.47,0.51,0.53 0.54,0.57,0.58,0.64), mean=0.477, stddev=0.039], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.0169] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0163376, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.96,-0.82,-0.67,-0.48 -0.30,-0.17,-0.0008,0.17,0.28 0.47,0.71,0.82,0.90), mean=0.00256, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.19,0.29,0.47 0.62,0.74,0.83,0.90,0.98 1.0,1.0,1.0,1.0), mean=0.801, stddev=0.156] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.35173e-06, count-zeroing-boundaries=298353
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00385675
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000187614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03052, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.18 0.20,0.23,0.40,0.97,1.0 1.1,1.1,1.2,1.2), mean=0.595, stddev=0.361], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.02,0.05 0.12,0.32,0.45,0.59,0.66 0.79,0.95,0.97,1.1), mean=0.448, stddev=0.204], bias-{mean,stddev}=9.304e-05,0.04967, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000187614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01229, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.18,0.20,0.23 0.25,0.27,0.33,0.39,0.43 0.47,0.49,0.51,0.67), mean=0.335, stddev=0.0738], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.07,0.09,0.18,0.39,0.44 0.47,0.51,0.52,0.58), mean=0.236, stddev=0.151], bias-{mean,stddev}=-0.001089,0.03028, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.97e+05, self-repaired-proportion=0.0046875, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.02,0.03,0.05 0.06,0.09,0.12,0.15,0.16 0.18,0.19,0.21,0.24), mean=0.117, stddev=0.039], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.11,0.15,0.24 0.29,0.36,0.50,0.60,0.65 0.68,0.71,0.73,0.76), mean=0.484, stddev=0.137], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.07,0.07 0.08,0.08,0.09,0.10,0.11 0.13,0.15,0.17,0.30), mean=0.0936, stddev=0.0228], oderiv-count=1.23827e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30308.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.02,0.03,0.05 0.06,0.08,0.11,0.15,0.16 0.17,0.20,0.21,0.24), mean=0.112, stddev=0.0398], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.08,0.11,0.13 0.15,0.16,0.18,0.21,0.22 0.23,0.26,0.27,0.32), mean=0.182, stddev=0.0353]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000187614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009053, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.30 0.31,0.32,0.35,0.38,0.40 0.42,0.45,0.47,0.59), mean=0.356, stddev=0.0384], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.14,0.15,0.16 0.16,0.18,0.20,0.23,0.25 0.26,0.28,0.29,0.36), mean=0.204, stddev=0.0337], bias-{mean,stddev}=-0.01066,0.01748, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.89e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.24,0.25,0.28,0.31,0.33 0.34,0.36,0.39,0.47), mean=0.282, stddev=0.0377], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.49,0.50,0.51,0.53), mean=0.441, stddev=0.0317], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0341, stddev=0.00299], oderiv-count=1.04992e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27986.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.21,0.22 0.23,0.24,0.27,0.31,0.32 0.34,0.37,0.41,0.45), mean=0.278, stddev=0.0405], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.43,0.45 0.47,0.49,0.53,0.58,0.62 0.65,0.68,0.72,0.94), mean=0.538, stddev=0.0648]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000187614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01321, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,3e-06,5e-06,1e-05 5e-05,0.0009,0.28,0.47,0.55 0.60,0.64,0.67,1.1), mean=0.257, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.26,0.31 0.37,0.50,0.62,0.68,0.71 0.74,0.78,0.83,1.3), mean=0.588, stddev=0.129], bias-{mean,stddev}=-0.003354,0.02547, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000187614, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01203, w_fc-rms=0.01528, w_oc-rms=0.01994, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00624601, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.44,0.45 0.46,0.47,0.50,0.50,0.53 0.55,0.58,0.60,0.65), mean=0.495, stddev=0.0304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0151] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00624601, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.44,0.45,0.50,0.50,0.51 0.54,0.59,0.64,0.70), mean=0.485, stddev=0.0389], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.21,0.22 0.23,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0117] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00663533, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.63,-0.55,-0.33 -0.22,-0.11,0.0004,0.12,0.23 0.31,0.46,0.62,0.77), mean=0.00129, stddev=0.199], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.43,0.47,0.51 0.55,0.58,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.751, stddev=0.194] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00624601, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.42,0.44 0.45,0.46,0.50,0.50,0.52 0.55,0.57,0.57,0.62), mean=0.489, stddev=0.0311], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0157] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00624601, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.61,-0.52,-0.31 -0.21,-0.10,0.0003,0.12,0.22 0.29,0.42,0.59,0.79), mean=0.00253, stddev=0.193], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.47,0.59,0.71 0.78,0.83,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.891, stddev=0.109] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=263160
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00385675
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000187614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02792, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.31,0.34 0.35,0.38,0.51,0.83,0.88 0.92,0.94,0.97,0.99), mean=0.598, stddev=0.22], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0009,0.001,0.002 0.003,0.007,0.46,0.59,0.66 0.76,0.81,0.85,0.98), mean=0.357, stddev=0.275], bias-{mean,stddev}=-0.001442,0.09694, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000187614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01133, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.20 0.22,0.24,0.29,0.36,0.41 0.48,0.51,0.54,0.59), mean=0.306, stddev=0.0807], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.14,0.15,0.23,0.34,0.37 0.38,0.41,0.42,0.48), mean=0.242, stddev=0.0899], bias-{mean,stddev}=0.004088,0.01625, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.54e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.008,0.03 0.04,0.05,0.08,0.10,0.11 0.12,0.13,0.13,0.16), mean=0.0749, stddev=0.0287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.18 0.22,0.29,0.44,0.55,0.60 0.64,0.66,0.67,0.72), mean=0.422, stddev=0.142], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.09,0.10,0.12,0.15 0.15,0.17,0.19,0.21), mean=0.107, stddev=0.0249], oderiv-count=1.0327e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25664, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.03 0.04,0.05,0.07,0.10,0.11 0.12,0.14,0.14,0.18), mean=0.0753, stddev=0.0302], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.09 0.10,0.11,0.13,0.15,0.16 0.17,0.18,0.19,0.21), mean=0.131, stddev=0.0283]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000187614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008547, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.28,0.29,0.33,0.38,0.40 0.42,0.43,0.45,0.58), mean=0.334, stddev=0.0473], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.13 0.14,0.16,0.18,0.22,0.24 0.27,0.31,0.32,0.41), mean=0.19, stddev=0.0443], bias-{mean,stddev}=-0.01207,0.0164, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.46e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.23,0.24,0.28,0.30,0.32 0.33,0.36,0.38,0.53), mean=0.275, stddev=0.0393], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.35,0.37 0.38,0.39,0.42,0.45,0.46 0.48,0.50,0.50,0.52), mean=0.421, stddev=0.0337], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0283, stddev=0.00275], oderiv-count=982080
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23341.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.23,0.24,0.27,0.31,0.32 0.34,0.37,0.39,0.64), mean=0.276, stddev=0.0438], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.41,0.43 0.44,0.47,0.54,0.60,0.64 0.68,0.71,0.75,1.3), mean=0.543, stddev=0.0811]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000187614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01924, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.25 0.31,0.35,0.42,0.61,0.74 0.78,0.83,0.85,1.4), mean=0.463, stddev=0.161], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.57,0.59 0.61,0.64,0.71,1.0,1.4 1.4,1.5,1.5,1.6), mean=0.833, stddev=0.277], bias-{mean,stddev}=0.008849,0.02243, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000187614, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03371, w_fc-rms=0.04594, w_oc-rms=0.06569, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630848, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.47,0.49 0.52,0.53,0.60,0.65,0.67 0.69,0.72,0.72,0.82), mean=0.593, stddev=0.0635], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.18 0.19,0.20,0.20,0.21,0.21 0.22,0.22,0.22,0.22), mean=0.202, stddev=0.0105] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630848, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.48,0.49 0.50,0.54,0.59,0.63,0.69 0.72,0.74,0.77,0.88), mean=0.592, stddev=0.0681], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.17,0.18 0.19,0.19,0.20,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.202, stddev=0.0143] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00888209, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.84,-0.68,-0.51 -0.34,-0.21,-0.03,0.21,0.35 0.50,0.76,0.82,0.89), mean=-0.00583, stddev=0.301], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.27,0.30 0.35,0.39,0.44,0.47,0.49 0.50,0.51,0.52,0.55), mean=0.426, stddev=0.0582] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00974219, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.57,0.59 0.60,0.63,0.67,0.71,0.73 0.75,0.77,0.81,0.95), mean=0.669, stddev=0.0532], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.14,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.179, stddev=0.0165] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0273289, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.98,-0.90,-0.73,-0.50 -0.34,-0.21,-0.02,0.19,0.34 0.50,0.82,0.88,0.98), mean=-0.00647, stddev=0.309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.14,0.20,0.32 0.42,0.53,0.63,0.67,0.69 0.71,0.72,0.72,0.74), mean=0.59, stddev=0.121] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223806
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00385675
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000187614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07084, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.1,1.1 1.1,1.2,1.6,1.9,2.0 2.0,2.1,2.1,2.2), mean=1.58, stddev=0.354], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.57,0.79,0.90 0.95,1.0,1.1,1.3,1.3 1.4,1.4,1.4,1.6), mean=1.13, stddev=0.161], bias-{mean,stddev}=0.004588,0.1064, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000187614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03961, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.50,0.52,0.54 0.56,0.58,0.62,0.68,0.71 0.75,0.79,0.83,2.0), mean=0.633, stddev=0.0854], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.3,1.4,1.8,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.78, stddev=0.364], bias-{mean,stddev}=5.113e-09,0.0245, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=616960
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/148.mdl exp/nnet3/tdnn_lstm1c_sp/149.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.50585 tdnn2.affine:7.47573 lstm1.W_all:6.18448 lstm1.lstm_nonlin:0.107507 lstm1.W_rp:2.57099 tdnn3.affine:4.74856 tdnn4.affine:5.4066 lstm2.W_all:4.1768 lstm2.lstm_nonlin:0.0549966 lstm2.W_rp:1.72817 tdnn5.affine:3.81241 tdnn6.affine:4.47715 lstm3.W_all:5.68986 lstm3.lstm_nonlin:0.126325 lstm3.W_rp:2.25552 output.affine:4.91811 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.8996 tdnn2.affine:10.9546 lstm1.W_all:19.358 lstm1.lstm_nonlin:1.44812 lstm1.W_rp:11.2507 tdnn3.affine:7.85896 tdnn4.affine:8.16735 lstm2.W_all:15.405 lstm2.lstm_nonlin:0.635074 lstm2.W_rp:10.386 tdnn5.affine:7.22456 tdnn6.affine:7.71219 lstm3.W_all:22.4027 lstm3.lstm_nonlin:1.98294 lstm3.W_rp:26.1051 output.affine:29.3202 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.632871 tdnn2.affine:0.682294 lstm1.W_all:0.319311 lstm1.lstm_nonlin:0.0742308 lstm1.W_rp:0.229871 tdnn3.affine:0.608077 tdnn4.affine:0.667222 lstm2.W_all:0.271988 lstm2.lstm_nonlin:0.0863893 lstm2.W_rp:0.166897 tdnn5.affine:0.530667 tdnn6.affine:0.583912 lstm3.W_all:0.253602 lstm3.lstm_nonlin:0.0646549 lstm3.W_rp:0.0866071 output.affine:0.167809 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:59:58 KST 2020, elapsed time 0 seconds
