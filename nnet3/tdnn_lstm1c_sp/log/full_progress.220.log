# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/219.mdl exp/nnet3/tdnn_lstm1c_sp/220.mdl 
# Started at Thu Jul 30 11:28:00 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/219.mdl exp/nnet3/tdnn_lstm1c_sp/220.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000150261, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01509, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.005,0.009 0.02,0.07,0.27,0.32,0.34 0.36,0.39,0.42,0.49), mean=0.233, stddev=0.118], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.12,0.31,0.42,0.51 0.61,0.71,0.73,0.87), mean=0.301, stddev=0.167], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.05,0.18,0.43,0.61 0.74,0.86,0.93,1.0), mean=0.254, stddev=0.232], bias-{mean,stddev}=-0.0004262,0.01862, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2090.44, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.53,-0.46,-0.36 -0.26,-0.15,-0.0009,0.14,0.31 0.40,0.50,0.63,1.2), mean=0.00554, stddev=0.228], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.008,0.11 0.16,0.19,0.22,0.26), mean=0.0232, stddev=0.0535]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000150261, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006472, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.22,0.23,0.25,0.27,0.29 0.30,0.31,0.31,0.33), mean=0.255, stddev=0.0235], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.003,0.004 0.009,0.04,0.16,0.18,0.19 0.20,0.21,0.23,0.26), mean=0.132, stddev=0.0665], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.07,0.14,0.31,0.44 0.55,0.66,0.70,0.80), mean=0.198, stddev=0.161], bias-{mean,stddev}=-0.0004194,0.01016, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.07,0.08 0.09,0.10,0.11,0.14), mean=0.0352, stddev=0.0327], oderiv-count=80960
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2008.52, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-0.79,-0.68,-0.50 -0.33,-0.16,0.19,0.50,0.68 0.89,1.1,1.3,1.6), mean=0.184, stddev=0.418], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.33,0.86,1.0 1.1,1.2,1.3,1.5), mean=0.407, stddev=0.425]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000150261, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003917, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,2e-06,8e-06,5e-05 0.0007,0.03,0.08,0.13,0.16 0.19,0.21,0.22,0.27), mean=0.0824, stddev=0.0564], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.08,0.19,0.21,0.22 0.23,0.24,0.25,0.28), mean=0.168, stddev=0.0596], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,9e-08,1e-07,1e-07 2e-07,0.04,0.09,0.20,0.30 0.39,0.52,0.58,0.70), mean=0.128, stddev=0.125], bias-{mean,stddev}=-6.55e-06,0.001392, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000150261, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001396, w_fc-rms=0.001545, w_oc-rms=0.003304, count=2.21e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00140362, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.3,-3.3,-2.6,-1.8 -1.1,-0.37,0.48,1.4,2.2 3.0,3.5,4.0,6.4), mean=0.487, stddev=1.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.8,-1.4,-0.99 -0.59,-0.27,0.25,0.56,0.89 1.3,1.7,2.1,3.4), mean=0.176, stddev=0.667] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00140362, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.8,-2.6,-2.2,-1.8 -1.0,-0.41,0.48,1.3,2.2 2.7,4.0,4.6,5.6), mean=0.492, stddev=1.34], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-1.4,-1.1,-0.76 -0.43,-0.10,0.25,0.48,0.69 0.94,1.3,1.4,2.5), mean=0.18, stddev=0.523] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0636176, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-47,-24,-21,-15 -10,-5.9,0.03,5.6,11 14,19,23,33), mean=-0.0322, stddev=8.9], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-21,-19,-14,-12 -9.2,-5.6,0.67,4.1,6.7 9.2,14,17,22), mean=-0.53, stddev=6.5] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00140362, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.3,-3.4,-3.1,-2.5 -1.5,-0.63,0.44,1.4,2.3 3.2,4.1,4.9,6.3), mean=0.366, stddev=1.59], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-1.8,-1.5,-1.1 -0.73,-0.30,0.25,0.76,1.2 1.5,2.0,2.1,4.0), mean=0.216, stddev=0.794] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00140362, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-29,-16,-15,-11 -7.9,-4.7,0.004,3.6,7.5 10,12,14,18), mean=-0.182, stddev=6.14], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-13,-8.2,-7.1,-5.9 -4.1,-2.4,0.51,1.9,3.1 4.0,6.4,6.8,12), mean=-0.141, stddev=3.08] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=3.26e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=-0.000306373, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=-0.00609756, count-zeroing-boundaries=492
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.100275
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000150261, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0051, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.05,0.10,0.16,0.16 0.17,0.18,0.19,0.19), mean=0.105, stddev=0.0491], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0003,0.0005,0.0009 0.004,0.05,0.08,0.10,0.11 0.12,0.13,0.14,0.15), mean=0.0739, stddev=0.036], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,4e-08,5e-08 7e-08,1e-07,4e-07,0.01,0.23 0.31,0.37,0.40,0.46), mean=0.0474, stddev=0.106], bias-{mean,stddev}=-3.152e-05,0.007224, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000150261, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006054, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.12 0.13,0.14,0.16,0.19,0.21 0.22,0.23,0.23,0.26), mean=0.167, stddev=0.0281], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.11,0.19,0.20 0.21,0.22,0.22,0.24), mean=0.123, stddev=0.0631], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,4e-08,5e-08 8e-08,1e-07,1e-05,0.16,0.33 0.44,0.54,0.57,0.64), mean=0.078, stddev=0.15], bias-{mean,stddev}=-0.0001913,0.00648, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.07e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.34,-0.17,-0.14,-0.11 -0.07,-0.005,0.10,0.23,0.28 0.33,0.39,0.43,0.59), mean=0.109, stddev=0.135], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-0.90,-0.66,-0.37 -0.15,0.08,0.59,1.1,1.3 1.6,1.7,1.8,2.1), mean=0.583, stddev=0.584], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.17,0.22 0.26,0.34,0.40,0.78), mean=0.0835, stddev=0.105], oderiv-count=57600
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1762.76, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.68,-0.50,-0.46,-0.38 -0.27,-0.17,0.01,0.22,0.32 0.38,0.46,0.49,0.66), mean=0.0184, stddev=0.226], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.14,0.19 0.23,0.25,0.27,0.32), mean=0.0522, stddev=0.0832]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000150261, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004776, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.17 0.17,0.18,0.19,0.20,0.21 0.21,0.22,0.22,0.24), mean=0.188, stddev=0.0143], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.08 0.09,0.09,0.11,0.12,0.13 0.14,0.14,0.15,0.19), mean=0.108, stddev=0.0167], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.07,0.12,0.23,0.31 0.39,0.45,0.48,0.54), mean=0.157, stddev=0.104], bias-{mean,stddev}=0.0003166,0.005533, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1517, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.59,-0.52,-0.36 -0.27,-0.12,0.14,0.43,0.59 0.72,0.84,0.95,1.2), mean=0.156, stddev=0.334], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.33,0.78,0.94 1.0,1.2,1.2,1.7), mean=0.385, stddev=0.396]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000150261, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002736, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,8e-08,1e-07,3e-07 1e-06,3e-05,0.05,0.09,0.12 0.14,0.16,0.16,0.21), mean=0.0507, stddev=0.0479], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.10,0.13,0.14,0.15 0.16,0.17,0.17,0.20), mean=0.119, stddev=0.039], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,8e-08,9e-08,1e-07 4e-06,0.02,0.06,0.14,0.20 0.28,0.37,0.41,0.50), mean=0.0868, stddev=0.0896], bias-{mean,stddev}=-5.617e-06,0.003565, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000150261, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0007423, w_fc-rms=0.0007161, w_oc-rms=0.001282, count=1.57e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00182353, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.2,-4.5,-4.1,-3.0 -2.0,-0.91,0.50,1.2,3.0 4.2,5.6,6.4,8.1), mean=0.415, stddev=2.03], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.3,-1.1,-0.72 -0.41,0.002,0.25,0.60,1.0 1.4,1.7,1.9,2.7), mean=0.289, stddev=0.584] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00182353, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.3,-4.8,-3.8,-2.7 -1.9,-1.0,0.50,1.0,2.0 3.1,4.5,4.8,9.5), mean=0.233, stddev=1.75], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-0.97,-0.84,-0.38 -0.22,0.08,0.25,0.50,0.75 1.0,1.4,1.6,2.4), mean=0.285, stddev=0.447] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.188069, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-49,-30,-28,-20 -13,-6.4,0.009,6.9,16 21,27,32,41), mean=0.484, stddev=11.7], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-23,-18,-16,-11 -7.9,-3.0,1.0,3.7,8.2 12,16,19,26), mean=0.527, stddev=6.67] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00182353, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.8,-5.9,-5.1,-3.7 -2.4,-0.98,0.50,1.2,3.1 4.4,6.4,8.0,11), mean=0.352, stddev=2.43], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.0,-1.7,-1.4,-0.86 -0.47,-0.01,0.25,0.62,0.99 1.3,1.7,2.0,3.0), mean=0.271, stddev=0.65] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00182353, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-33,-20,-17,-14 -9.3,-4.0,0.007,5.3,9.5 13,18,19,27), mean=0.22, stddev=7.58], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-14,-8.4,-7.3,-5.4 -3.3,-1.3,1.0,2.1,3.8 5.8,7.8,8.7,12), mean=0.57, stddev=3.17] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2.5e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00806452, count-zeroing-boundaries=372
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.100275
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000150261, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003508, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.05,0.07,0.10,0.11 0.11,0.11,0.12,0.12), mean=0.0763, stddev=0.0242], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,8e-05,9e-05,0.0001 0.0002,0.0007,0.06,0.08,0.08 0.09,0.09,0.10,0.11), mean=0.0449, stddev=0.0344], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,1e-06,0.10,0.16 0.20,0.23,0.25,0.27), mean=0.0376, stddev=0.0706], bias-{mean,stddev}=6.237e-05,0.00506, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000150261, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004747, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.13,0.15,0.16 0.18,0.19,0.19,0.22), mean=0.131, stddev=0.0232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.07,0.10,0.14,0.15 0.15,0.16,0.16,0.18), mean=0.103, stddev=0.0346], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,6e-08 9e-08,2e-07,0.0008,0.14,0.25 0.33,0.41,0.45,0.52), mean=0.0676, stddev=0.114], bias-{mean,stddev}=0.0001747,0.004014, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1271.24, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.51,-0.40,-0.36,-0.24 -0.18,-0.12,0.05,0.21,0.29 0.35,0.42,0.50,0.70), mean=0.0527, stddev=0.19], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.12,0.17 0.20,0.23,0.27,0.32), mean=0.0486, stddev=0.0762]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000150261, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00384, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.14,0.15,0.16,0.17 0.18,0.18,0.18,0.21), mean=0.151, stddev=0.0156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.08,0.09,0.10,0.10 0.11,0.12,0.12,0.15), mean=0.0867, stddev=0.0127], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.05,0.09,0.18,0.25 0.31,0.38,0.40,0.44), mean=0.123, stddev=0.0883], bias-{mean,stddev}=0.0001222,0.004637, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.28e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-24,-14,-13,-9.7 -7.6,-4.8,-0.05,4.5,6.4 8.9,12,14,17), mean=-0.105, stddev=5.72], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-30,-24,-20,-16 -12,-8.4,-1.6,6.6,11 15,20,23,30), mean=-1.01, stddev=9.41], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.10,0.13 0.14,0.16,0.18,0.25), mean=0.0428, stddev=0.0542], oderiv-count=5760
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1025.48, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.83,-0.71,-0.52 -0.31,-0.16,0.20,0.60,0.80 0.96,1.1,1.1,1.5), mean=0.216, stddev=0.441], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.18,0.89,1.1 1.2,1.4,1.5,1.7), mean=0.4, stddev=0.46]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000150261, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003382, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.05,0.12,0.16 0.17,0.19,0.19,0.23), mean=0.0723, stddev=0.047], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.10,0.11,0.13,0.19,0.23 0.24,0.26,0.26,0.28), mean=0.146, stddev=0.0492], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,1e-06,2e-06,7e-05 0.02,0.02,0.06,0.15,0.27 0.38,0.47,0.52,0.58), mean=0.101, stddev=0.117], bias-{mean,stddev}=0.0001282,0.001118, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000150261, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001217, w_fc-rms=0.001705, w_oc-rms=0.002494, count=928, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00282672, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-23,-15,-14,-11 -9.2,-7.6,-3.8,-0.28,2.1 3.6,6.1,8.3,11), mean=-3.81, stddev=4.66], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.3,-3.6,-2.8,-1.9 -1.1,-0.25,1.1,2.3,2.9 3.7,4.4,4.6,6.0), mean=0.981, stddev=1.66] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00282672, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-23,-17,-15,-12 -8.9,-6.1,-1.4,3.1,5.5 8.9,14,15,19), mean=-1.45, stddev=6.18], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.8,-3.0,-2.4,-1.6 -1.0,-0.56,0.65,2.0,2.8 3.5,4.5,5.2,6.1), mean=0.758, stddev=1.62] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-2.88371, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-133,-112,-99,-76 -56,-37,-2.6,26,40 52,69,75,96), mean=-5.76, stddev=38.8], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-58,-39,-36,-25 -19,-12,1.1,15,22 28,35,39,50), mean=1.33, stddev=16.7] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00282672, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-24,-18,-16,-13 -11,-7.7,-2.3,3.3,6.5 8.1,11,12,23), mean=-2.32, stddev=6.77], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.5,-4.9,-3.5,-2.5 -1.7,-0.94,0.92,2.6,3.4 4.0,5.1,5.4,8.1), mean=0.831, stddev=2.07] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.209339, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-121,-93,-75,-61 -44,-29,-1.9,20,32 41,57,62,75), mean=-4.92, stddev=30.9], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-37,-24,-21,-15 -11,-6.3,2.4,11,17 20,24,28,35), mean=2.47, stddev=10.8] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00380228, count-zeroing-boundaries=263
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.100275
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000150261, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004122, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.05,0.07,0.12,0.13 0.13,0.14,0.14,0.14), mean=0.0872, stddev=0.0352], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.05,0.05,0.07,0.08,0.08 0.09,0.09,0.10,0.14), mean=0.0649, stddev=0.0142], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,4e-07,5e-07 1e-06,7e-06,0.01,0.12,0.17 0.22,0.26,0.28,0.31), mean=0.0558, stddev=0.0757], bias-{mean,stddev}=0.0007023,0.01341, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000150261, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00498, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.03,0.04 0.04,0.05,0.07,0.10,0.11 0.13,0.14,0.16,0.30), mean=0.0748, stddev=0.0291], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.14 0.15,0.15,0.20,0.29,0.29 0.30,0.31,0.33,0.35), mean=0.22, stddev=0.0622], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,4e-07,4e-07,5e-07 1e-06,5e-06,0.006,0.33,0.45 0.53,0.58,0.61,0.63), mean=0.127, stddev=0.19], bias-{mean,stddev}=2.678e-10,0.001392, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.03,0.03 0.04,0.05,0.05,0.46), mean=0.0152, stddev=0.0208], oderiv-count=51840

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.97388 tdnn2.affine:5.83339 lstm1.W_all:4.5554 lstm1.lstm_nonlin:0.0890701 lstm1.W_rp:1.87869 tdnn3.affine:3.85874 tdnn4.affine:4.30372 lstm2.W_all:3.18543 lstm2.lstm_nonlin:0.0375225 lstm2.W_rp:1.29262 tdnn5.affine:3.02448 tdnn6.affine:3.46057 lstm3.W_all:3.93331 lstm3.lstm_nonlin:0.0742732 lstm3.W_rp:1.5312 output.affine:3.6838 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.0379 tdnn2.affine:9.89399 lstm1.W_all:17.9406 lstm1.lstm_nonlin:1.14959 lstm1.W_rp:12.3367 tdnn3.affine:7.27986 tdnn4.affine:7.35738 lstm2.W_all:15.1747 lstm2.lstm_nonlin:0.509268 lstm2.W_rp:11.3938 tdnn5.affine:6.46779 tdnn6.affine:6.88019 lstm3.W_all:21.547 lstm3.lstm_nonlin:1.77701 lstm3.W_rp:28.5597 output.affine:28.0406 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.540741 tdnn2.affine:0.590086 lstm1.W_all:0.253995 lstm1.lstm_nonlin:0.0768377 lstm1.W_rp:0.152538 tdnn3.affine:0.533611 tdnn4.affine:0.588186 lstm2.W_all:0.210117 lstm2.lstm_nonlin:0.0742241 lstm2.W_rp:0.113644 tdnn5.affine:0.470765 tdnn6.affine:0.505208 lstm3.W_all:0.182392 lstm3.lstm_nonlin:0.0417432 lstm3.W_rp:0.053681 output.affine:0.131483 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:28:01 KST 2020, elapsed time 1 seconds
