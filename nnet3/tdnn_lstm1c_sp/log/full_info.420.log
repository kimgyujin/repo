# nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/420.mdl 
# Started at Thu Jul 30 12:47:35 KST 2020
#
nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/420.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=9.0618e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03245, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.006 0.009,0.02,0.58,0.73,0.81 0.86,0.95,0.98,1.3), mean=0.469, stddev=0.31], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.23,0.67,0.93,1.1 1.3,1.4,1.4,1.5), mean=0.646, stddev=0.362], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.06,0.28,0.96,1.4 1.6,1.9,1.9,2.3), mean=0.505, stddev=0.541], bias-{mean,stddev}=-0.006585,0.06079, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0.158266, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,2e-05,2e-05,3e-05 6e-05,0.0002,0.04,0.09,0.11 0.13,0.14,0.15,0.19), mean=0.0447, stddev=0.0447], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.02,0.04 0.05,0.07,0.36,0.59,0.72 0.80,0.88,0.92,0.98), mean=0.346, stddev=0.263], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.009,0.01 0.02,0.03,0.38,0.56,0.68 0.76,0.89,0.96,1.8), mean=0.368, stddev=0.263], oderiv-count=1.16333e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35097.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,9e-06,1e-05,3e-05 6e-05,0.0002,0.04,0.08,0.11 0.12,0.14,0.16,0.18), mean=0.043, stddev=0.0437], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,9e-05,0.0001,0.0002 0.0003,0.0008,0.07,0.11,0.12 0.13,0.14,0.15,0.16), mean=0.0604, stddev=0.0495]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.0618e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01154, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.34,0.36 0.37,0.40,0.44,0.50,0.54 0.58,0.62,0.65,0.73), mean=0.451, stddev=0.0674], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.003,0.003 0.004,0.009,0.28,0.33,0.37 0.39,0.43,0.47,0.77), mean=0.219, stddev=0.146], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.07,0.18,0.53,0.84 1.0,1.2,1.3,2.0), mean=0.317, stddev=0.327], bias-{mean,stddev}=-0.03502,0.03845, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.44e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.19 0.20,0.22,0.25,0.29,0.31 0.33,0.35,0.37,0.44), mean=0.253, stddev=0.042], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.35,0.37,0.39 0.40,0.41,0.44,0.47,0.49 0.51,0.52,0.52,0.58), mean=0.442, stddev=0.0374], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.05,0.05,0.06,0.07 0.08,0.09,0.09,0.11), mean=0.0552, stddev=0.0114], oderiv-count=1.13155e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34316.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.22,0.25,0.29,0.31 0.33,0.35,0.39,0.48), mean=0.255, stddev=0.0451], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.37 0.39,0.41,0.46,0.50,0.54 0.58,0.60,0.61,0.71), mean=0.462, stddev=0.0611]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.0618e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01748, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,5e-07,1e-06,9e-06 0.0002,0.17,0.40,0.58,0.66 0.72,0.79,0.87,1.1), mean=0.382, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.38,0.41 0.49,0.70,0.80,0.89,0.96 1.0,1.1,1.2,1.3), mean=0.779, stddev=0.17], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,4e-07,4e-07,5e-07 8e-07,0.15,0.33,0.83,1.4 1.8,2.3,2.5,4.1), mean=0.539, stddev=0.588], bias-{mean,stddev}=0.001406,0.02489, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.0618e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06229, w_fc-rms=0.0228, w_oc-rms=0.04207, count=1.51e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641594, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.48,0.50,0.53 0.67,0.74,0.76,0.81), mean=0.493, stddev=0.0693], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.21,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.226, stddev=0.0178] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641594, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.44,0.46 0.46,0.48,0.50,0.52,0.55 0.62,0.69,0.73,0.79), mean=0.507, stddev=0.0541], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.19,0.20 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0157] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00821865, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.85,-0.81,-0.45 -0.27,-0.13,0.0005,0.15,0.28 0.61,0.78,0.85,0.88), mean=0.0152, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.25,0.31 0.39,0.45,0.58,0.72,1.0 1.0,1.0,1.0,1.0), mean=0.612, stddev=0.208] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641594, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.56,0.58,0.63), mean=0.461, stddev=0.0417], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.019] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00641594, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.77,-0.73,-0.35 -0.20,-0.10,0.0003,0.11,0.22 0.45,0.65,0.78,0.86), mean=0.011, stddev=0.241], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.30,0.36,0.47 0.70,0.78,0.86,0.92,1.0 1.0,1.0,1.0,1.0), mean=0.836, stddev=0.144] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.01087e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.03475e-05, count-zeroing-boundaries=296565
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.107438
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.0618e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03901, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.44,0.46 0.51,0.57,0.85,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.847, stddev=0.273], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0006,0.0008,0.002 0.007,0.38,0.55,0.72,0.90 1.2,1.3,1.4,1.7), mean=0.541, stddev=0.322], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 4e-07,5e-07,1e-06,1.1,1.9 2.1,2.4,2.7,3.3), mean=0.413, stddev=0.788], bias-{mean,stddev}=0.01274,0.2643, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=9.0618e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01242, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.23,0.24,0.26 0.28,0.29,0.34,0.38,0.41 0.44,0.47,0.49,0.58), mean=0.342, stddev=0.0573], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.16,0.18,0.27,0.36,0.39 0.41,0.43,0.44,0.47), mean=0.269, stddev=0.0893], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,7e-08,8e-08,1e-07 1e-07,2e-07,3e-05,0.36,0.68 0.91,1.0,1.1,1.3), mean=0.175, stddev=0.3], bias-{mean,stddev}=0.0007897,0.00952, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.72e+05, self-repaired-proportion=0.000946276, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.12 0.14,0.15,0.16,0.19), mean=0.0788, stddev=0.035], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.13,0.16 0.22,0.30,0.45,0.56,0.61 0.66,0.70,0.71,0.82), mean=0.433, stddev=0.145], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.09,0.09 0.10,0.10,0.12,0.15,0.19 0.22,0.25,0.26,0.33), mean=0.133, stddev=0.0398], oderiv-count=1.08576e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31974.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.01,0.02,0.02 0.03,0.05,0.08,0.11,0.12 0.14,0.15,0.16,0.20), mean=0.0782, stddev=0.0345], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.06,0.07 0.09,0.11,0.13,0.15,0.17 0.18,0.19,0.19,0.22), mean=0.129, stddev=0.03]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.0618e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008152, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.26,0.27 0.28,0.29,0.32,0.35,0.37 0.39,0.41,0.41,0.44), mean=0.32, stddev=0.0362], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.12,0.13,0.14 0.14,0.15,0.18,0.21,0.23 0.25,0.27,0.30,0.38), mean=0.182, stddev=0.0358], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.07,0.09,0.16,0.39,0.59 0.72,0.81,0.87,0.97), mean=0.244, stddev=0.21], bias-{mean,stddev}=-0.02825,0.01737, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.8e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.20,0.22,0.24,0.27,0.28 0.30,0.31,0.33,0.34), mean=0.242, stddev=0.0308], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.35,0.36,0.38 0.39,0.40,0.42,0.45,0.46 0.47,0.48,0.48,0.49), mean=0.423, stddev=0.0284], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.04,0.04,0.05,0.05), mean=0.0381, stddev=0.00267], oderiv-count=1.02678e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29632.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.20 0.21,0.22,0.24,0.27,0.29 0.30,0.31,0.33,0.37), mean=0.246, stddev=0.0329], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.36,0.38,0.39 0.41,0.43,0.47,0.53,0.55 0.57,0.61,0.64,0.78), mean=0.48, stddev=0.0584]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.0618e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01425, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,6e-06,2e-05 6e-05,0.001,0.32,0.51,0.58 0.63,0.67,0.70,0.88), mean=0.281, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.34 0.41,0.59,0.65,0.72,0.76 0.80,0.88,0.90,1.3), mean=0.637, stddev=0.13], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,4e-07 0.0002,0.10,0.24,0.66,1.2 1.5,1.8,2.0,3.7), mean=0.425, stddev=0.491], bias-{mean,stddev}=0.00404,0.02919, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.0618e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03809, w_fc-rms=0.01421, w_oc-rms=0.03941, count=1.38e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646953, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.45,0.45 0.46,0.48,0.50,0.51,0.55 0.59,0.63,0.66,0.74), mean=0.502, stddev=0.0406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0143] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646953, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.46,0.46 0.47,0.49,0.50,0.52,0.54 0.57,0.61,0.62,0.68), mean=0.505, stddev=0.033], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.237, stddev=0.0135] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00646953, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.75,-0.69,-0.37 -0.22,-0.08,0.0001,0.11,0.27 0.45,0.59,0.65,0.73), mean=0.00684, stddev=0.234], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.37,0.41,0.45 0.48,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.722, stddev=0.213] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646953, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.45,0.47,0.50,0.50,0.51 0.52,0.56,0.56,0.70), mean=0.488, stddev=0.0297], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0179] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00646953, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.59,-0.56,-0.28 -0.18,-0.07,0.0002,0.10,0.21 0.35,0.48,0.54,0.62), mean=0.00601, stddev=0.191], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.54,0.58,0.67 0.75,0.80,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.884, stddev=0.113] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.14687e-05, count-zeroing-boundaries=261580
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.107438
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.0618e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03691, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.47,0.53 0.55,0.59,0.81,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.813, stddev=0.217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.003 0.004,0.01,0.57,0.78,0.88 0.99,1.2,1.2,1.4), mean=0.471, stddev=0.364], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,2e-07 3e-07,5e-07,2e-05,1.3,1.7 1.9,2.1,2.3,2.6), mean=0.439, stddev=0.718], bias-{mean,stddev}=-0.001951,0.204, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=9.0618e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01161, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.22,0.24 0.25,0.27,0.31,0.36,0.40 0.44,0.47,0.48,0.53), mean=0.319, stddev=0.0588], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.24,0.34,0.36 0.38,0.40,0.41,0.44), mean=0.253, stddev=0.0779], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,8e-08,9e-08,1e-07 2e-07,3e-07,0.004,0.34,0.67 0.83,0.92,0.97,1.1), mean=0.173, stddev=0.274], bias-{mean,stddev}=0.001096,0.007309, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.52e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.06,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.0637, stddev=0.0283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.16 0.21,0.29,0.43,0.53,0.58 0.61,0.63,0.66,0.68), mean=0.411, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.15,0.18 0.21,0.23,0.24,0.27), mean=0.134, stddev=0.0329], oderiv-count=1.08608e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27290.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.06,0.09,0.10 0.12,0.13,0.13,0.16), mean=0.0661, stddev=0.0285], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.09,0.11,0.14,0.15 0.16,0.16,0.17,0.19), mean=0.113, stddev=0.0266]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.0618e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008188, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.22 0.26,0.28,0.32,0.37,0.39 0.40,0.41,0.41,0.45), mean=0.318, stddev=0.0563], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.13 0.14,0.15,0.17,0.21,0.24 0.27,0.31,0.33,0.39), mean=0.182, stddev=0.0438], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.08,0.14,0.39,0.62 0.75,0.82,0.86,0.94), mean=0.237, stddev=0.22], bias-{mean,stddev}=-0.0227,0.0217, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.3e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.18 0.20,0.23,0.26,0.28,0.30 0.31,0.32,0.34,0.37), mean=0.254, stddev=0.0399], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.36 0.37,0.39,0.41,0.44,0.45 0.46,0.48,0.48,0.51), mean=0.413, stddev=0.0303], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0318, stddev=0.00321], oderiv-count=977600
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24948.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.15,0.18 0.21,0.23,0.26,0.29,0.31 0.32,0.34,0.36,0.44), mean=0.261, stddev=0.0419], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.27,0.35 0.39,0.45,0.51,0.58,0.61 0.63,0.67,0.69,0.94), mean=0.509, stddev=0.0905]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.0618e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0206, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.28 0.29,0.34,0.48,0.66,0.72 0.77,0.83,0.89,0.95), mean=0.5, stddev=0.16], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.56,0.59,0.68 0.75,0.78,0.85,1.1,1.2 1.3,1.4,1.5,1.9), mean=0.918, stddev=0.197], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,2e-06,2e-06,0.0001 0.08,0.13,0.30,0.94,1.8 2.2,2.5,2.7,6.7), mean=0.599, stddev=0.723], bias-{mean,stddev}=0.0143,0.01728, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.0618e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0999, w_fc-rms=0.04252, w_oc-rms=0.06936, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00653419, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.58,0.59,0.61 0.63,0.66,0.70,0.75,0.77 0.79,0.82,0.83,0.86), mean=0.703, stddev=0.0539], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.173, stddev=0.0183] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00653419, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.52,0.55,0.56 0.58,0.60,0.64,0.68,0.74 0.78,0.82,0.83,0.88), mean=0.649, stddev=0.0638], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.14 0.16,0.17,0.19,0.20,0.21 0.21,0.21,0.22,0.22), mean=0.187, stddev=0.0207] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0196585, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.81,-0.73,-0.57 -0.43,-0.29,-0.009,0.27,0.40 0.54,0.73,0.78,0.89), mean=-0.00973, stddev=0.337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.22,0.26 0.31,0.36,0.42,0.46,0.48 0.50,0.52,0.53,0.55), mean=0.407, stddev=0.0706] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00653419, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.51,0.53 0.56,0.59,0.63,0.67,0.69 0.72,0.77,0.79,0.88), mean=0.633, stddev=0.0568], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.19,0.20,0.20,0.20), mean=0.174, stddev=0.0163] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0124457, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.78,-0.70,-0.57 -0.42,-0.28,-0.008,0.24,0.36 0.56,0.72,0.78,0.88), mean=-0.0116, stddev=0.322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.24,0.26,0.32 0.40,0.48,0.58,0.64,0.66 0.67,0.69,0.70,0.74), mean=0.556, stddev=0.103] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.74227e-06, count-zeroing-boundaries=222477
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.107438
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.0618e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08796, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.1,1.1 1.2,1.2,1.7,2.6,2.6 2.7,2.8,2.9,3.1), mean=1.91, stddev=0.626], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.96,1.1,1.1 1.2,1.2,1.3,1.6,1.8 1.9,2.0,2.0,2.2), mean=1.4, stddev=0.236], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-07,1e-06,1e-06,1e-06 2e-06,1e-05,0.09,3.1,3.6 4.1,4.7,5.4,5.9), mean=1.17, stddev=1.63], bias-{mean,stddev}=-0.04225,0.515, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=9.0618e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04162, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.56,0.58,0.59 0.60,0.62,0.66,0.70,0.73 0.76,0.80,0.87,2.2), mean=0.666, stddev=0.0819], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.0,1.1 1.1,1.2,1.6,2.4,2.5 2.6,2.6,2.6,2.7), mean=1.82, stddev=0.589], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,1e-06,1e-06 2e-06,5e-06,0.04,2.9,3.7 4.1,4.4,4.6,6.1), mean=1.08, stddev=1.57], bias-{mean,stddev}=4.086e-09,0.02397, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0138], oderiv-count=568320
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:47:36 KST 2020, elapsed time 1 seconds
