# nnet3-info exp/nnet3/tdnn_lstm1c_sp/249.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/248.mdl exp/nnet3/tdnn_lstm1c_sp/249.mdl 
# Started at Thu Jul 30 11:39:30 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/249.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000268095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0351, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.03,0.14,0.61,0.74,0.84 0.94,1.0,1.0,1.3), mean=0.534, stddev=0.291], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.17 0.18,0.23,0.66,0.96,1.3 1.6,1.7,1.8,1.9), mean=0.676, stddev=0.429], bias-{mean,stddev}=-0.001561,0.0689, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.195167, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,7e-06,1e-05,5e-05 9e-05,0.0007,0.07,0.10,0.12 0.14,0.16,0.18,0.25), mean=0.0633, stddev=0.0479], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.001,0.004,0.01 0.03,0.06,0.44,0.61,0.70 0.81,0.86,0.90,0.99), mean=0.396, stddev=0.254], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.05,0.17,0.26,0.36,0.41 0.47,0.58,0.67,1.3), mean=0.265, stddev=0.145], oderiv-count=1.21626e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35900.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,5e-06,9e-06,2e-05 7e-05,0.0009,0.06,0.10,0.12 0.14,0.16,0.18,0.22), mean=0.0615, stddev=0.0477], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0001,0.0002,0.0003 0.0008,0.005,0.11,0.13,0.15 0.16,0.16,0.17,0.18), mean=0.0881, stddev=0.0542]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000268095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01328, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.41,0.43 0.45,0.46,0.51,0.57,0.61 0.66,0.69,0.71,0.79), mean=0.52, stddev=0.0684], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.008,0.01 0.02,0.08,0.31,0.37,0.40 0.43,0.47,0.48,0.83), mean=0.268, stddev=0.141], bias-{mean,stddev}=-0.01807,0.0408, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.28,0.30 0.32,0.33,0.36,0.40,0.43 0.46,0.48,0.52,0.59), mean=0.369, stddev=0.0483], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.39,0.40 0.41,0.43,0.45,0.48,0.49 0.51,0.52,0.53,0.54), mean=0.452, stddev=0.032], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.06), mean=0.0369, stddev=0.00704], oderiv-count=1.23002e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35119.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.29,0.30 0.31,0.33,0.37,0.41,0.44 0.47,0.51,0.54,0.59), mean=0.374, stddev=0.0523], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.54,0.55,0.56 0.58,0.61,0.66,0.73,0.77 0.82,0.86,0.87,0.97), mean=0.673, stddev=0.0761]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000268095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01806, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,6e-06,2e-05,0.0001 0.002,0.15,0.40,0.61,0.71 0.77,0.84,0.90,1.2), mean=0.39, stddev=0.244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.37,0.42 0.49,0.72,0.84,0.93,0.99 1.1,1.1,1.2,1.2), mean=0.804, stddev=0.179], bias-{mean,stddev}=-0.0002281,0.02688, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000268095, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04241, w_fc-rms=0.02774, w_oc-rms=0.03962, count=1.48e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629051, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.65,0.79,0.80,0.84), mean=0.491, stddev=0.0718], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0222] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629051, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.40,0.42,0.43 0.45,0.46,0.49,0.51,0.56 0.63,0.74,0.77,0.81), mean=0.5, stddev=0.0629], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.19 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0199] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0390167, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.90,-0.86,-0.52 -0.30,-0.16,0.002,0.19,0.32 0.50,0.83,0.88,0.91), mean=0.0126, stddev=0.299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.26 0.37,0.42,0.55,0.79,1.0 1.0,1.0,1.0,1.0), mean=0.594, stddev=0.223] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629051, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.40 0.41,0.42,0.45,0.50,0.50 0.50,0.53,0.56,0.62), mean=0.452, stddev=0.0386], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.218, stddev=0.0216] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00629051, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.78,-0.65,-0.37 -0.20,-0.10,0.001,0.13,0.22 0.33,0.65,0.77,0.82), mean=0.00962, stddev=0.231], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.31,0.35,0.54 0.72,0.80,0.87,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.848, stddev=0.139] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.5226e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.18782e-05, count-zeroing-boundaries=297099
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.149862
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000268095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03883, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.28,0.31 0.34,0.40,0.78,1.2,1.3 1.3,1.4,1.4,1.5), mean=0.798, stddev=0.384], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.002,0.003 0.01,0.28,0.52,0.72,0.84 1.2,1.5,1.7,2.0), mean=0.524, stddev=0.343], bias-{mean,stddev}=0.01324,0.275, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000268095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0137, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.20,0.22,0.23 0.27,0.29,0.37,0.44,0.49 0.53,0.56,0.58,0.77), mean=0.372, stddev=0.0892], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.14,0.28,0.42,0.45 0.47,0.50,0.52,0.55), mean=0.281, stddev=0.137], bias-{mean,stddev}=0.004275,0.01719, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.54e+05, self-repaired-proportion=0.00316022, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.04,0.04,0.06 0.08,0.09,0.12,0.15,0.17 0.18,0.20,0.22,0.25), mean=0.123, stddev=0.0366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.18,0.21,0.27 0.32,0.39,0.50,0.58,0.63 0.66,0.70,0.71,0.74), mean=0.484, stddev=0.121], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.07,0.07,0.09,0.10,0.11 0.12,0.14,0.16,0.26), mean=0.0891, stddev=0.0212], oderiv-count=1.11437e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32777.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.04,0.04,0.06 0.08,0.09,0.12,0.15,0.17 0.19,0.21,0.22,0.27), mean=0.123, stddev=0.0379], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.13,0.14,0.15 0.16,0.17,0.19,0.22,0.23 0.25,0.27,0.27,0.34), mean=0.196, stddev=0.0326]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000268095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009838, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.32 0.33,0.35,0.38,0.42,0.45 0.47,0.50,0.52,0.63), mean=0.386, stddev=0.0471], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.14,0.16 0.17,0.18,0.21,0.25,0.28 0.30,0.33,0.34,0.45), mean=0.219, stddev=0.0464], bias-{mean,stddev}=-0.02091,0.01924, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.22e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.28,0.29,0.32,0.36,0.38 0.39,0.41,0.42,0.51), mean=0.328, stddev=0.0403], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.39 0.40,0.41,0.44,0.46,0.47 0.48,0.49,0.50,0.51), mean=0.436, stddev=0.0285], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0301, stddev=0.00228], oderiv-count=1.07766e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30435.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.28,0.29,0.33,0.37,0.39 0.40,0.41,0.43,0.53), mean=0.332, stddev=0.0418], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.51,0.53,0.54 0.56,0.57,0.62,0.69,0.73 0.76,0.79,0.85,1.1), mean=0.634, stddev=0.0721]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000268095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01519, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,7e-07,1e-06,3e-06 1e-05,0.0002,0.33,0.55,0.63 0.67,0.73,0.76,1.2), mean=0.294, stddev=0.252], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.31,0.33,0.39 0.50,0.62,0.69,0.76,0.80 0.86,0.94,1.0,1.7), mean=0.678, stddev=0.14], bias-{mean,stddev}=-0.001817,0.05579, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000268095, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01859, w_fc-rms=0.01068, w_oc-rms=0.02446, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634498, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.43,0.45,0.50,0.51,0.57 0.62,0.68,0.70,0.81), mean=0.497, stddev=0.061], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0187] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634498, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.39,0.41 0.43,0.45,0.50,0.50,0.53 0.56,0.60,0.65,0.77), mean=0.487, stddev=0.0489], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0165] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0157105, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.82,-0.68,-0.48 -0.31,-0.16,0.0002,0.16,0.35 0.52,0.78,0.81,0.89), mean=0.00711, stddev=0.285], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.21,0.24,0.36 0.43,0.50,0.60,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.698, stddev=0.242] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634498, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.40 0.41,0.43,0.49,0.50,0.51 0.54,0.56,0.59,0.74), mean=0.475, stddev=0.0458], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0198] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00634498, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.56,-0.49,-0.30 -0.20,-0.11,0.0001,0.11,0.23 0.38,0.56,0.63,0.73), mean=0.00698, stddev=0.202], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.46,0.55,0.68 0.75,0.82,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.892, stddev=0.116] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.6334e-06, count-zeroing-boundaries=262006
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.149862
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000268095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0373, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.41,0.44,0.50 0.52,0.55,0.79,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.812, stddev=0.253], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0007,0.0009 0.002,0.005,0.55,0.79,0.91 1.0,1.2,1.3,1.5), mean=0.465, stddev=0.381], bias-{mean,stddev}=-0.000647,0.2022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000268095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01294, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.23,0.23,0.26 0.27,0.29,0.33,0.41,0.47 0.51,0.56,0.58,0.63), mean=0.353, stddev=0.0782], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.17,0.19,0.27,0.38,0.42 0.43,0.45,0.46,0.51), mean=0.279, stddev=0.0958], bias-{mean,stddev}=0.001698,0.009161, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.72e+05, self-repaired-proportion=0.00170163, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.03,0.03,0.04 0.05,0.06,0.09,0.12,0.13 0.14,0.15,0.16,0.21), mean=0.0922, stddev=0.0313], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.16,0.19,0.23 0.27,0.34,0.47,0.56,0.60 0.62,0.65,0.66,0.70), mean=0.451, stddev=0.122], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.09,0.11,0.12 0.14,0.16,0.16,0.20), mean=0.0972, stddev=0.0197], oderiv-count=1.08371e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28093.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.03,0.04 0.05,0.07,0.10,0.12,0.14 0.14,0.16,0.17,0.21), mean=0.0949, stddev=0.032], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.11 0.12,0.13,0.16,0.18,0.19 0.20,0.22,0.23,0.24), mean=0.158, stddev=0.0273]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000268095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009736, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.23,0.27 0.30,0.33,0.38,0.43,0.46 0.48,0.50,0.51,0.62), mean=0.379, stddev=0.0642], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.15 0.16,0.17,0.20,0.25,0.29 0.32,0.36,0.39,0.48), mean=0.216, stddev=0.0525], bias-{mean,stddev}=-0.02191,0.02471, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.6e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.24,0.25 0.27,0.30,0.34,0.37,0.38 0.39,0.41,0.44,0.52), mean=0.333, stddev=0.0448], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.37 0.38,0.39,0.42,0.44,0.45 0.46,0.47,0.48,0.52), mean=0.416, stddev=0.0293], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.025, stddev=0.00189], oderiv-count=971680
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25751, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.24,0.26 0.28,0.30,0.34,0.38,0.39 0.41,0.44,0.45,0.64), mean=0.341, stddev=0.0497], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.42,0.50 0.55,0.60,0.68,0.75,0.79 0.85,0.89,0.95,1.2), mean=0.675, stddev=0.108]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000268095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0215, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.28,0.30 0.32,0.36,0.49,0.70,0.79 0.83,0.87,0.89,1.4), mean=0.522, stddev=0.167], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.62,0.65,0.71 0.74,0.78,0.85,1.1,1.4 1.5,1.6,1.7,2.1), mean=0.947, stddev=0.254], bias-{mean,stddev}=0.02186,0.02432, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000268095, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06638, w_fc-rms=0.04816, w_oc-rms=0.04837, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641074, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.56,0.58,0.60 0.61,0.64,0.68,0.72,0.75 0.78,0.80,0.81,0.85), mean=0.685, stddev=0.0537], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.15 0.16,0.17,0.18,0.20,0.20 0.20,0.21,0.21,0.21), mean=0.182, stddev=0.0179] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641074, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.47,0.51,0.53 0.55,0.58,0.63,0.67,0.73 0.77,0.82,0.83,0.86), mean=0.633, stddev=0.0691], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.15 0.16,0.18,0.19,0.20,0.21 0.21,0.21,0.21,0.22), mean=0.188, stddev=0.0196] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.020465, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.78,-0.74,-0.54 -0.38,-0.24,-0.01,0.25,0.37 0.53,0.74,0.77,0.90), mean=-0.0036, stddev=0.314], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.21,0.24 0.31,0.36,0.42,0.46,0.48 0.50,0.51,0.52,0.54), mean=0.407, stddev=0.0724] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641074, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.51,0.53,0.55 0.57,0.59,0.62,0.66,0.68 0.70,0.74,0.75,0.84), mean=0.624, stddev=0.0466], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.16,0.17,0.19,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.183, stddev=0.0157] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00641074, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.72,-0.68,-0.51 -0.32,-0.21,-0.006,0.20,0.29 0.46,0.67,0.70,0.85), mean=-0.00437, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.30,0.34,0.39 0.48,0.55,0.65,0.69,0.70 0.72,0.74,0.75,0.75), mean=0.617, stddev=0.096] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.24432e-06, count-zeroing-boundaries=222784
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.149862
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000268095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08084, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.1,1.1,1.1 1.2,1.2,1.6,2.3,2.4 2.4,2.6,2.6,2.7), mean=1.77, stddev=0.525], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.80,0.98,1.0 1.1,1.1,1.2,1.4,1.6 1.7,1.8,1.9,2.0), mean=1.29, stddev=0.216], bias-{mean,stddev}=-0.03927,0.4506, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000268095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04281, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.58,0.60 0.61,0.63,0.67,0.72,0.76 0.79,0.85,0.90,2.3), mean=0.684, stddev=0.0906], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.4,2.5 2.6,2.6,2.7,2.8), mean=1.9, stddev=0.512], bias-{mean,stddev}=6.006e-09,0.02863, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0136], oderiv-count=638400
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/248.mdl exp/nnet3/tdnn_lstm1c_sp/249.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.69802 tdnn2.affine:5.56147 lstm1.W_all:4.66938 lstm1.lstm_nonlin:0.110557 lstm1.W_rp:1.83203 tdnn3.affine:3.62901 tdnn4.affine:4.1533 lstm2.W_all:3.3073 lstm2.lstm_nonlin:0.05495 lstm2.W_rp:1.35611 tdnn5.affine:2.96125 tdnn6.affine:3.46018 lstm3.W_all:4.14936 lstm3.lstm_nonlin:0.118426 lstm3.W_rp:1.75093 output.affine:3.99442 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.9512 tdnn2.affine:11.9997 lstm1.W_all:21.0361 lstm1.lstm_nonlin:1.46689 lstm1.W_rp:14.951 tdnn3.affine:8.73421 tdnn4.affine:8.88412 lstm2.W_all:17.8427 lstm2.lstm_nonlin:0.741597 lstm2.W_rp:14.0976 tdnn5.affine:8.24492 tdnn6.affine:8.80083 lstm3.W_all:25.0433 lstm3.lstm_nonlin:2.17113 lstm3.W_rp:30.6059 output.affine:31.6912 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.407385 tdnn2.affine:0.461645 lstm1.W_all:0.223641 lstm1.lstm_nonlin:0.075989 lstm1.W_rp:0.12332 tdnn3.affine:0.410819 tdnn4.affine:0.464435 lstm2.W_all:0.185907 lstm2.lstm_nonlin:0.0761162 lstm2.W_rp:0.096953 tdnn5.affine:0.356258 tdnn6.affine:0.390181 lstm3.W_all:0.166877 lstm3.lstm_nonlin:0.0557967 lstm3.W_rp:0.0573412 output.affine:0.126917 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:39:30 KST 2020, elapsed time 0 seconds
