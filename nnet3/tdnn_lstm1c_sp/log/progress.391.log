# nnet3-info exp/nnet3/tdnn_lstm1c_sp/391.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/390.mdl exp/nnet3/tdnn_lstm1c_sp/391.mdl 
# Started at Thu Jul 30 12:36:04 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/391.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000108919, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03242, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.006 0.009,0.02,0.58,0.73,0.81 0.87,0.95,0.98,1.2), mean=0.469, stddev=0.309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.18,0.23,0.67,0.92,1.2 1.3,1.4,1.4,1.5), mean=0.642, stddev=0.367], bias-{mean,stddev}=-0.006129,0.06128, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.99e+05, self-repaired-proportion=0.179425, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,2e-05,3e-05,4e-05 6e-05,0.0001,0.04,0.09,0.11 0.12,0.14,0.15,0.19), mean=0.046, stddev=0.0445], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.03 0.04,0.07,0.36,0.58,0.72 0.79,0.88,0.91,0.99), mean=0.349, stddev=0.261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.009,0.01 0.02,0.04,0.36,0.51,0.61 0.70,0.82,0.91,1.8), mean=0.341, stddev=0.245], oderiv-count=1.2256e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33636.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,1e-05,1e-05,2e-05 4e-05,0.0001,0.04,0.08,0.10 0.12,0.15,0.16,0.19), mean=0.0437, stddev=0.0439], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,9e-05,0.0001,0.0002 0.0003,0.0007,0.08,0.11,0.12 0.13,0.14,0.14,0.16), mean=0.0614, stddev=0.0492]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000108919, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01162, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.36 0.38,0.40,0.44,0.51,0.54 0.58,0.63,0.65,0.74), mean=0.454, stddev=0.0674], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.004 0.005,0.01,0.28,0.33,0.37 0.39,0.43,0.47,0.75), mean=0.221, stddev=0.147], bias-{mean,stddev}=-0.03553,0.03957, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.37e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.21,0.22,0.26,0.29,0.31 0.33,0.35,0.38,0.45), mean=0.259, stddev=0.0428], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.36,0.37,0.39 0.40,0.42,0.44,0.47,0.49 0.50,0.52,0.53,0.57), mean=0.443, stddev=0.0364], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.06,0.07 0.07,0.08,0.09,0.10), mean=0.0531, stddev=0.0103], oderiv-count=1.22461e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32914.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.21,0.22,0.26,0.30,0.32 0.33,0.36,0.40,0.49), mean=0.26, stddev=0.0468], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.36,0.38 0.40,0.43,0.47,0.52,0.55 0.57,0.62,0.63,0.70), mean=0.475, stddev=0.06]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000108919, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01758, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,6e-07,1e-06,1e-05 0.0002,0.17,0.41,0.59,0.66 0.73,0.79,0.86,1.1), mean=0.385, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.37,0.42 0.50,0.70,0.81,0.90,0.95 1.0,1.1,1.2,1.3), mean=0.784, stddev=0.169], bias-{mean,stddev}=0.002071,0.02643, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000108919, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.07489, w_fc-rms=0.02456, w_oc-rms=0.04493, count=1.51e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.48,0.50,0.54 0.69,0.77,0.78,0.83), mean=0.494, stddev=0.0729], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.17,0.19 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0195] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.44,0.45,0.46 0.47,0.48,0.50,0.52,0.56 0.64,0.72,0.77,0.81), mean=0.513, stddev=0.0569], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.18,0.19 0.21,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.018] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.012117, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.87,-0.84,-0.46 -0.26,-0.13,0.0007,0.15,0.29 0.62,0.81,0.87,0.89), mean=0.0155, stddev=0.294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.24,0.29 0.40,0.45,0.58,0.73,1.0 1.0,1.0,1.0,1.0), mean=0.612, stddev=0.21] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.42,0.46,0.50,0.50 0.52,0.57,0.58,0.65), mean=0.462, stddev=0.0413], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0195] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00639378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.75,-0.70,-0.33 -0.18,-0.09,0.0003,0.10,0.22 0.44,0.64,0.74,0.83), mean=0.0108, stddev=0.233], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.33,0.39,0.52 0.72,0.80,0.87,0.93,1.0 1.0,1.0,1.0,1.0), mean=0.849, stddev=0.136] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.00937e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.71376e-05, count-zeroing-boundaries=297003
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.155372
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000108919, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0395, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.44,0.46 0.51,0.56,0.86,1.1,1.2 1.3,1.3,1.3,1.4), mean=0.856, stddev=0.28], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0006,0.0009,0.002 0.007,0.35,0.55,0.73,0.92 1.2,1.4,1.5,1.7), mean=0.543, stddev=0.333], bias-{mean,stddev}=0.01245,0.2578, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000108919, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0126, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.23,0.24,0.26 0.27,0.30,0.34,0.39,0.42 0.46,0.49,0.51,0.56), mean=0.346, stddev=0.0613], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.15 0.16,0.18,0.27,0.36,0.39 0.41,0.43,0.45,0.47), mean=0.272, stddev=0.0929], bias-{mean,stddev}=0.001393,0.009389, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.91e+05, self-repaired-proportion=0.00259362, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.12 0.14,0.15,0.16,0.17), mean=0.0791, stddev=0.0339], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.13,0.16 0.22,0.33,0.46,0.58,0.63 0.66,0.70,0.71,0.83), mean=0.447, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.09,0.10 0.10,0.10,0.12,0.15,0.19 0.24,0.28,0.30,0.37), mean=0.137, stddev=0.0453], oderiv-count=1.12742e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30749.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.01,0.01,0.02 0.03,0.05,0.08,0.10,0.12 0.13,0.15,0.16,0.17), mean=0.0769, stddev=0.0332], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.05,0.06,0.07 0.09,0.11,0.12,0.15,0.16 0.17,0.18,0.19,0.23), mean=0.125, stddev=0.0293]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000108919, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00827, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.27,0.27 0.28,0.29,0.32,0.35,0.37 0.39,0.42,0.42,0.46), mean=0.324, stddev=0.0377], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.12,0.13,0.14 0.14,0.15,0.18,0.21,0.24 0.26,0.28,0.30,0.36), mean=0.185, stddev=0.0381], bias-{mean,stddev}=-0.02754,0.01793, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.29e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.22,0.25,0.27,0.29 0.30,0.32,0.32,0.37), mean=0.248, stddev=0.0309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.36,0.36,0.38 0.39,0.40,0.43,0.45,0.46 0.47,0.48,0.48,0.49), mean=0.425, stddev=0.0276], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0374, stddev=0.0027], oderiv-count=1.1049e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28584.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.22,0.24,0.27,0.29 0.30,0.32,0.33,0.36), mean=0.247, stddev=0.032], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.36,0.39,0.40 0.42,0.43,0.47,0.52,0.56 0.58,0.61,0.62,0.77), mean=0.483, stddev=0.0588]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000108919, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01436, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,6e-06,2e-05 6e-05,0.001,0.33,0.51,0.58 0.62,0.68,0.71,0.89), mean=0.283, stddev=0.232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.34 0.43,0.60,0.66,0.72,0.77 0.80,0.86,0.92,1.3), mean=0.642, stddev=0.13], bias-{mean,stddev}=0.004859,0.031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000108919, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0459, w_fc-rms=0.01449, w_oc-rms=0.04006, count=1.38e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644959, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.46 0.46,0.48,0.50,0.51,0.55 0.59,0.65,0.67,0.76), mean=0.503, stddev=0.0439], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0153] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644959, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.46,0.47 0.48,0.50,0.50,0.52,0.55 0.59,0.63,0.64,0.70), mean=0.511, stddev=0.036], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.20,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0153] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644959, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.80,-0.73,-0.40 -0.22,-0.09,0.0008,0.12,0.30 0.50,0.62,0.68,0.75), mean=0.00768, stddev=0.245], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.30,0.40,0.42 0.47,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.72, stddev=0.216] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644959, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.45,0.47,0.50,0.50,0.51 0.52,0.56,0.57,0.68), mean=0.489, stddev=0.0285], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0182] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644959, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.60,-0.55,-0.29 -0.17,-0.07,0.0002,0.09,0.21 0.35,0.47,0.55,0.62), mean=0.00663, stddev=0.188], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.56,0.58,0.68 0.75,0.82,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.891, stddev=0.108] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.71813e-05, count-zeroing-boundaries=261912
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.155372
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000108919, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0375, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.49,0.52 0.56,0.60,0.82,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.826, stddev=0.222], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.003 0.005,0.01,0.56,0.80,0.90 1.0,1.2,1.3,1.4), mean=0.476, stddev=0.373], bias-{mean,stddev}=-0.001088,0.2029, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000108919, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01185, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.25 0.26,0.28,0.31,0.37,0.41 0.45,0.48,0.48,0.54), mean=0.326, stddev=0.0589], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.24,0.35,0.37 0.39,0.40,0.41,0.44), mean=0.258, stddev=0.0803], bias-{mean,stddev}=0.0009314,0.006916, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.21e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.04,0.06,0.09,0.10 0.12,0.13,0.14,0.15), mean=0.0633, stddev=0.029], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.13,0.17 0.21,0.29,0.44,0.55,0.60 0.64,0.67,0.69,0.74), mean=0.424, stddev=0.142], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.11,0.13,0.16,0.18 0.21,0.23,0.23,0.25), mean=0.138, stddev=0.0326], oderiv-count=975552
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26419.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.06,0.09,0.10 0.12,0.13,0.14,0.16), mean=0.0646, stddev=0.0287], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.07 0.07,0.09,0.11,0.13,0.14 0.15,0.16,0.17,0.18), mean=0.108, stddev=0.0252]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000108919, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008263, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.15,0.22 0.26,0.28,0.32,0.37,0.39 0.40,0.41,0.42,0.46), mean=0.321, stddev=0.0588], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.14,0.15,0.17,0.22,0.24 0.27,0.30,0.33,0.39), mean=0.183, stddev=0.0445], bias-{mean,stddev}=-0.02148,0.02249, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.51e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.15,0.18 0.21,0.23,0.26,0.29,0.30 0.32,0.33,0.34,0.37), mean=0.258, stddev=0.0415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.36 0.37,0.39,0.41,0.44,0.45 0.46,0.48,0.49,0.51), mean=0.413, stddev=0.0321], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.0311, stddev=0.00313], oderiv-count=934880
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24254.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.19 0.21,0.23,0.26,0.29,0.31 0.32,0.34,0.36,0.46), mean=0.262, stddev=0.0428], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.24,0.33 0.41,0.46,0.52,0.58,0.61 0.64,0.68,0.72,0.96), mean=0.511, stddev=0.0939]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000108919, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02074, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.27,0.28 0.30,0.35,0.49,0.66,0.72 0.77,0.84,0.90,0.98), mean=0.505, stddev=0.157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.59,0.61,0.70 0.77,0.80,0.87,1.1,1.2 1.3,1.4,1.5,1.9), mean=0.927, stddev=0.186], bias-{mean,stddev}=0.01337,0.01683, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000108919, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1077, w_fc-rms=0.04383, w_oc-rms=0.0735, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651697, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.59,0.60,0.62 0.64,0.67,0.71,0.76,0.78 0.80,0.83,0.85,0.88), mean=0.714, stddev=0.0555], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.13 0.14,0.16,0.17,0.19,0.19 0.20,0.20,0.21,0.22), mean=0.17, stddev=0.0206] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651697, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.53,0.56,0.58 0.59,0.62,0.66,0.70,0.75 0.80,0.83,0.85,0.89), mean=0.667, stddev=0.0645], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.15,0.17,0.19,0.20,0.20 0.21,0.21,0.21,0.23), mean=0.181, stddev=0.0222] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0295197, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.74,-0.59 -0.45,-0.32,-0.01,0.28,0.42 0.55,0.75,0.83,0.91), mean=-0.00994, stddev=0.349], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.24 0.31,0.36,0.43,0.47,0.50 0.51,0.53,0.55,0.56), mean=0.415, stddev=0.0787] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651697, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.49,0.50,0.53 0.55,0.59,0.64,0.67,0.70 0.71,0.75,0.80,0.88), mean=0.633, stddev=0.058], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.14 0.15,0.16,0.18,0.19,0.19 0.19,0.20,0.20,0.21), mean=0.175, stddev=0.0172] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00681243, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.76,-0.66,-0.57 -0.42,-0.29,-0.01,0.25,0.38 0.52,0.72,0.77,0.87), mean=-0.00969, stddev=0.319], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.28,0.30,0.36 0.44,0.52,0.61,0.66,0.69 0.71,0.71,0.72,0.78), mean=0.586, stddev=0.101] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.35588e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.49065e-06, count-zeroing-boundaries=222685
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.155372
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000108919, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08906, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.1,1.1,1.1 1.2,1.3,1.7,2.6,2.7 2.7,2.8,2.9,3.1), mean=1.93, stddev=0.634], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.90,1.0,1.1 1.2,1.2,1.4,1.6,1.8 2.0,2.1,2.1,2.2), mean=1.41, stddev=0.258], bias-{mean,stddev}=-0.03492,0.5799, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000108919, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04232, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.58,0.60 0.61,0.63,0.67,0.71,0.74 0.77,0.81,0.88,2.1), mean=0.677, stddev=0.0811], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.0,1.1,1.1 1.1,1.2,1.6,2.5,2.5 2.6,2.7,2.7,2.8), mean=1.85, stddev=0.594], bias-{mean,stddev}=5.142e-09,0.02252, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.40), mean=0.017, stddev=0.0135], oderiv-count=633600
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/390.mdl exp/nnet3/tdnn_lstm1c_sp/391.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.32141 tdnn2.affine:3.08634 lstm1.W_all:2.33816 lstm1.lstm_nonlin:0.050278 lstm1.W_rp:1.02143 tdnn3.affine:2.14404 tdnn4.affine:2.22218 lstm2.W_all:1.59971 lstm2.lstm_nonlin:0.0272895 lstm2.W_rp:0.690195 tdnn5.affine:1.76847 tdnn6.affine:1.90593 lstm3.W_all:1.97081 lstm3.lstm_nonlin:0.0480438 lstm3.W_rp:0.736238 output.affine:1.85689 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.882 tdnn2.affine:10.5373 lstm1.W_all:20.4782 lstm1.lstm_nonlin:2.06877 lstm1.W_rp:15.1074 tdnn3.affine:8.02549 tdnn4.affine:7.48637 lstm2.W_all:16.7548 lstm2.lstm_nonlin:1.428 lstm2.W_rp:14.1715 tdnn5.affine:7.5495 tdnn6.affine:7.47587 lstm3.W_all:24.136 lstm3.lstm_nonlin:3.13758 lstm3.W_rp:34.0617 output.affine:31.315 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.257674 tdnn2.affine:0.292856 lstm1.W_all:0.11413 lstm1.lstm_nonlin:0.0241721 lstm1.W_rp:0.067586 tdnn3.affine:0.267304 tdnn4.affine:0.297104 lstm2.W_all:0.0954753 lstm2.lstm_nonlin:0.0190429 lstm2.W_rp:0.0486689 tdnn5.affine:0.234355 tdnn6.affine:0.25499 lstm3.W_all:0.0816524 lstm3.lstm_nonlin:0.0153053 lstm3.W_rp:0.0215999 output.affine:0.0592688 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:36:04 KST 2020, elapsed time 0 seconds
