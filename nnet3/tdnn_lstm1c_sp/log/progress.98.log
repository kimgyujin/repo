# nnet3-info exp/nnet3/tdnn_lstm1c_sp/98.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/97.mdl exp/nnet3/tdnn_lstm1c_sp/98.mdl 
# Started at Thu Jul 30 10:39:50 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/98.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000220553, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0302, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.009,0.01,0.02 0.05,0.41,0.53,0.61,0.67 0.71,0.82,0.89,1.1), mean=0.48, stddev=0.209], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.17,0.21,0.59,0.80,1.1 1.4,1.5,1.5,1.6), mean=0.584, stddev=0.365], bias-{mean,stddev}=0.005319,0.0547, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0.110389, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,3e-06,7e-06,4e-05 0.0002,0.03,0.06,0.09,0.10 0.11,0.12,0.13,0.19), mean=0.0591, stddev=0.0351], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.001,0.002,0.01 0.05,0.24,0.49,0.62,0.71 0.78,0.85,0.87,0.93), mean=0.444, stddev=0.229], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.04 0.10,0.27,0.36,0.45,0.51 0.55,0.63,0.69,1.0), mean=0.35, stddev=0.146], oderiv-count=1.14202e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=43036.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,1e-06,2e-06,1e-05 8e-05,0.02,0.06,0.08,0.10 0.11,0.13,0.14,0.21), mean=0.0564, stddev=0.0352], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,5e-05,7e-05,0.0002 0.0006,0.06,0.09,0.11,0.11 0.12,0.13,0.13,0.16), mean=0.0799, stddev=0.0393]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000220553, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01245, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.38,0.40 0.43,0.44,0.48,0.53,0.56 0.59,0.61,0.63,0.71), mean=0.489, stddev=0.0546], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.007,0.01 0.03,0.24,0.29,0.33,0.35 0.37,0.40,0.42,0.71), mean=0.262, stddev=0.109], bias-{mean,stddev}=-0.00153,0.02631, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.30 0.31,0.32,0.34,0.38,0.40 0.43,0.46,0.47,0.55), mean=0.352, stddev=0.0407], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.40,0.41 0.42,0.43,0.46,0.48,0.50 0.51,0.52,0.52,0.54), mean=0.458, stddev=0.0293], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.042, stddev=0.00825], oderiv-count=1.27418e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=42115, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.29 0.30,0.31,0.34,0.38,0.41 0.43,0.46,0.47,0.52), mean=0.346, stddev=0.0442], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.49,0.51 0.53,0.55,0.61,0.67,0.71 0.74,0.78,0.80,0.90), mean=0.615, stddev=0.072]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000220553, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01728, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.002,0.005,0.02 0.12,0.22,0.38,0.56,0.66 0.73,0.81,0.87,1.2), mean=0.39, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.37,0.41,0.44 0.50,0.70,0.80,0.89,0.93 0.97,1.0,1.1,1.2), mean=0.773, stddev=0.154], bias-{mean,stddev}=-0.001871,0.02062, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000220553, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02259, w_fc-rms=0.03564, w_oc-rms=0.04742, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621492, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.45,0.46,0.49,0.52,0.56 0.59,0.66,0.68,0.71), mean=0.497, stddev=0.0503], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0148] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621492, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.36,0.38,0.40 0.42,0.44,0.48,0.53,0.60 0.67,0.75,0.80,0.85), mean=0.497, stddev=0.0809], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.17,0.19 0.21,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0193] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00812604, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.80,-0.70,-0.55 -0.35,-0.19,-6e-05,0.20,0.33 0.58,0.71,0.77,0.83), mean=-0.00038, stddev=0.297], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.29,0.31,0.36 0.41,0.48,0.59,0.72,0.88 0.99,1.0,1.0,1.0), mean=0.609, stddev=0.17] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621492, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.42 0.43,0.44,0.47,0.50,0.52 0.54,0.58,0.59,0.63), mean=0.476, stddev=0.0402], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.22,0.23,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0171] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0201935, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.88,-0.69,-0.53 -0.31,-0.17,-0.005,0.17,0.32 0.52,0.69,0.81,0.90), mean=-0.00365, stddev=0.288], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.20,0.25,0.46 0.58,0.73,0.83,0.89,0.94 1.0,1.0,1.0,1.0), mean=0.791, stddev=0.158] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=295554
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000220553, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.21 0.23,0.27,0.45,0.99,1.1 1.1,1.1,1.2,1.3), mean=0.623, stddev=0.351], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.03,0.07 0.19,0.33,0.46,0.59,0.68 0.81,0.93,1.0,1.2), mean=0.465, stddev=0.199], bias-{mean,stddev}=-0.001937,0.04988, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000220553, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01257, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.22,0.23 0.25,0.28,0.34,0.40,0.44 0.47,0.51,0.52,0.73), mean=0.343, stddev=0.0741], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.09,0.10,0.18,0.40,0.44 0.47,0.51,0.52,0.54), mean=0.247, stddev=0.146], bias-{mean,stddev}=-0.002555,0.02813, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.61e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.07 0.08,0.10,0.13,0.16,0.18 0.20,0.21,0.23,0.25), mean=0.131, stddev=0.0386], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.21,0.22,0.27 0.33,0.38,0.50,0.59,0.64 0.68,0.72,0.73,0.78), mean=0.488, stddev=0.122], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.06,0.07,0.08,0.09,0.10 0.10,0.11,0.12,0.18), mean=0.0788, stddev=0.0145], oderiv-count=1.18656e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39350.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.06 0.08,0.09,0.12,0.16,0.18 0.19,0.21,0.22,0.24), mean=0.126, stddev=0.0387], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.13,0.14,0.16 0.17,0.18,0.20,0.23,0.25 0.27,0.28,0.30,0.35), mean=0.207, stddev=0.0341]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000220553, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009208, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.29,0.30 0.32,0.33,0.36,0.39,0.40 0.42,0.45,0.47,0.57), mean=0.362, stddev=0.0377], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.17,0.18,0.20,0.23,0.25 0.27,0.28,0.29,0.36), mean=0.207, stddev=0.0331], bias-{mean,stddev}=-0.01003,0.01522, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.23,0.24 0.25,0.26,0.30,0.33,0.34 0.36,0.37,0.38,0.46), mean=0.297, stddev=0.0371], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.39 0.40,0.42,0.44,0.47,0.48 0.49,0.50,0.51,0.53), mean=0.442, stddev=0.0308], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.031, stddev=0.00294], oderiv-count=1.03238e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36585.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.22,0.24 0.24,0.25,0.29,0.32,0.34 0.35,0.37,0.37,0.46), mean=0.291, stddev=0.0383], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.47,0.48 0.50,0.52,0.57,0.62,0.65 0.68,0.71,0.74,0.89), mean=0.571, stddev=0.0622]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000220553, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01348, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,6e-05,7e-05,0.0002 0.0005,0.007,0.28,0.47,0.56 0.61,0.66,0.68,1.0), mean=0.267, stddev=0.216], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.27,0.31 0.38,0.53,0.64,0.69,0.72 0.75,0.81,0.84,1.0), mean=0.601, stddev=0.13], bias-{mean,stddev}=-0.003477,0.02354, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000220553, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01358, w_fc-rms=0.01727, w_oc-rms=0.02257, count=1.33e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0062727, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.44,0.45 0.46,0.47,0.50,0.51,0.53 0.56,0.59,0.61,0.64), mean=0.495, stddev=0.0331], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0156] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0062727, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.45,0.50,0.50,0.52 0.55,0.59,0.65,0.69), mean=0.485, stddev=0.0417], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.20,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0125] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0062727, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.62,-0.55,-0.33 -0.21,-0.12,0.001,0.12,0.24 0.37,0.53,0.61,0.75), mean=0.00584, stddev=0.21], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.45,0.48,0.51 0.55,0.57,0.65,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.738, stddev=0.191] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0062727, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.45,0.46,0.50,0.50,0.52 0.54,0.57,0.59,0.64), mean=0.488, stddev=0.0337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0166] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0062727, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.61,-0.54,-0.32 -0.21,-0.10,0.001,0.12,0.23 0.35,0.52,0.56,0.79), mean=0.0065, stddev=0.204], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.44,0.59,0.69 0.76,0.82,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.885, stddev=0.11] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=260568
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000220553, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02815, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.35,0.36 0.38,0.41,0.56,0.82,0.86 0.89,0.93,0.96,1.0), mean=0.611, stddev=0.198], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.005 0.008,0.02,0.45,0.60,0.67 0.74,0.81,0.83,0.99), mean=0.368, stddev=0.265], bias-{mean,stddev}=-0.007601,0.09696, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000220553, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01152, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.21 0.23,0.25,0.29,0.37,0.42 0.49,0.53,0.54,0.65), mean=0.312, stddev=0.0803], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.15,0.17,0.24,0.33,0.37 0.39,0.41,0.42,0.46), mean=0.25, stddev=0.0821], bias-{mean,stddev}=0.002612,0.01864, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.75e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.04 0.05,0.06,0.08,0.11,0.12 0.13,0.14,0.15,0.16), mean=0.0846, stddev=0.0307], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.19 0.25,0.30,0.44,0.55,0.60 0.63,0.66,0.69,0.72), mean=0.428, stddev=0.135], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.07,0.08,0.08,0.10,0.12 0.13,0.14,0.15,0.20), mean=0.0906, stddev=0.0191], oderiv-count=990976
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33820.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.06,0.08,0.11,0.13 0.14,0.15,0.15,0.17), mean=0.083, stddev=0.0311], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.10 0.11,0.13,0.15,0.17,0.18 0.19,0.21,0.21,0.23), mean=0.146, stddev=0.0286]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000220553, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008764, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.27 0.29,0.30,0.34,0.39,0.42 0.43,0.44,0.45,0.50), mean=0.343, stddev=0.0484], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.12,0.14 0.15,0.16,0.19,0.22,0.25 0.28,0.32,0.34,0.42), mean=0.195, stddev=0.0444], bias-{mean,stddev}=-0.01136,0.01611, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.87e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.23 0.25,0.26,0.30,0.33,0.35 0.36,0.38,0.39,0.42), mean=0.296, stddev=0.0401], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.36 0.38,0.39,0.42,0.45,0.47 0.48,0.50,0.50,0.52), mean=0.421, stddev=0.0363], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.026, stddev=0.00264], oderiv-count=967360
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31055.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.22 0.24,0.26,0.29,0.33,0.35 0.36,0.38,0.40,0.45), mean=0.294, stddev=0.0421], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.47 0.49,0.52,0.58,0.65,0.70 0.72,0.76,0.78,0.83), mean=0.586, stddev=0.0775]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000220553, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01963, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.17,0.25 0.31,0.36,0.43,0.63,0.75 0.80,0.84,0.87,1.3), mean=0.472, stddev=0.165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.59,0.61 0.62,0.65,0.74,1.0,1.4 1.4,1.5,1.5,1.7), mean=0.851, stddev=0.278], bias-{mean,stddev}=0.008012,0.02274, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000220553, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03061, w_fc-rms=0.04279, w_oc-rms=0.05968, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634254, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.46,0.48 0.50,0.52,0.58,0.64,0.66 0.69,0.70,0.71,0.81), mean=0.579, stddev=0.0643], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.19,0.20,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.205, stddev=0.00992] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634254, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.48,0.49 0.51,0.54,0.59,0.64,0.67 0.70,0.73,0.75,0.88), mean=0.59, stddev=0.0637], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.17,0.18,0.18 0.19,0.19,0.20,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.203, stddev=0.0135] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00956218, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.81,-0.74,-0.53 -0.35,-0.21,0.0006,0.20,0.33 0.46,0.68,0.80,0.87), mean=-0.00562, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.24,0.28,0.33 0.36,0.39,0.44,0.48,0.49 0.51,0.53,0.53,0.62), mean=0.432, stddev=0.0577] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00761377, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.54,0.55,0.57 0.59,0.61,0.66,0.70,0.71 0.73,0.76,0.77,0.95), mean=0.655, stddev=0.0519], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.15,0.16,0.16 0.17,0.18,0.19,0.19,0.20 0.20,0.20,0.21,0.21), mean=0.184, stddev=0.014] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0216499, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.88,-0.79,-0.52 -0.32,-0.19,-0.006,0.19,0.31 0.48,0.72,0.87,0.97), mean=-0.00506, stddev=0.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.18,0.22,0.39 0.47,0.55,0.63,0.68,0.70 0.71,0.72,0.73,0.76), mean=0.605, stddev=0.112] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221479
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000220553, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06973, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.6,1.9,1.9 2.0,2.0,2.1,2.2), mean=1.56, stddev=0.314], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.66,0.78,0.88 0.93,1.0,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.11, stddev=0.15], bias-{mean,stddev}=0.002309,0.07842, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000220553, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04022, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.51,0.52,0.54 0.56,0.58,0.63,0.69,0.73 0.76,0.81,0.84,2.0), mean=0.642, stddev=0.0901], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.4,1.5,1.8,2.1,2.2 2.3,2.3,2.4,2.6), mean=1.82, stddev=0.325], bias-{mean,stddev}=4.866e-09,0.02396, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0166, stddev=0.014], oderiv-count=566400
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/97.mdl exp/nnet3/tdnn_lstm1c_sp/98.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.95726 tdnn2.affine:8.15308 lstm1.W_all:6.90474 lstm1.lstm_nonlin:0.140781 lstm1.W_rp:2.82157 tdnn3.affine:4.97266 tdnn4.affine:5.77973 lstm2.W_all:4.6127 lstm2.lstm_nonlin:0.059632 lstm2.W_rp:1.8893 tdnn5.affine:4.04091 tdnn6.affine:4.77947 lstm3.W_all:6.23881 lstm3.lstm_nonlin:0.158845 lstm3.W_rp:2.47884 output.affine:5.44532 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.995 tdnn2.affine:11.2263 lstm1.W_all:20.1096 lstm1.lstm_nonlin:1.44738 lstm1.W_rp:11.5534 tdnn3.affine:8.03202 tdnn4.affine:8.30338 lstm2.W_all:15.7129 lstm2.lstm_nonlin:0.718169 lstm2.W_rp:10.467 tdnn5.affine:7.35218 tdnn6.affine:7.90656 lstm3.W_all:22.8467 lstm3.lstm_nonlin:1.81413 lstm3.W_rp:25.6717 output.affine:29.7645 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.661339 tdnn2.affine:0.71934 lstm1.W_all:0.342461 lstm1.lstm_nonlin:0.0973345 lstm1.W_rp:0.24506 tdnn3.affine:0.612771 tdnn4.affine:0.689437 lstm2.W_all:0.292743 lstm2.lstm_nonlin:0.0824329 lstm2.W_rp:0.179814 tdnn5.affine:0.542683 tdnn6.affine:0.599219 lstm3.W_all:0.273047 lstm3.lstm_nonlin:0.0885688 lstm3.W_rp:0.0965399 output.affine:0.182883 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:39:51 KST 2020, elapsed time 1 seconds
