# nnet3-info exp/nnet3/tdnn_lstm1c_sp/307.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/306.mdl exp/nnet3/tdnn_lstm1c_sp/307.mdl 
# Started at Thu Jul 30 12:02:36 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/307.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000185571, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03124, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.01 0.01,0.03,0.55,0.68,0.76 0.84,0.92,0.95,1.1), mean=0.458, stddev=0.288], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.17,0.21,0.61,0.87,1.1 1.3,1.5,1.5,1.5), mean=0.61, stddev=0.367], bias-{mean,stddev}=-0.001109,0.05934, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.202275, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,2e-05,3e-05,5e-05 8e-05,0.0002,0.05,0.09,0.11 0.12,0.14,0.15,0.19), mean=0.0505, stddev=0.0437], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.009,0.02,0.02 0.04,0.07,0.41,0.60,0.71 0.82,0.89,0.94,1.0), mean=0.373, stddev=0.261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.01,0.02 0.02,0.06,0.27,0.37,0.42 0.52,0.63,0.69,1.5), mean=0.26, stddev=0.173], oderiv-count=1.10682e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40605.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,8e-06,1e-05,3e-05 7e-05,0.0002,0.05,0.09,0.11 0.12,0.14,0.16,0.19), mean=0.0509, stddev=0.0443], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0001,0.0002,0.0003 0.0005,0.001,0.09,0.12,0.13 0.14,0.15,0.15,0.17), mean=0.071, stddev=0.0511]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000185571, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01174, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.37 0.39,0.40,0.45,0.51,0.54 0.59,0.61,0.63,0.70), mean=0.459, stddev=0.0646], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.004,0.006 0.008,0.02,0.28,0.33,0.36 0.40,0.44,0.49,0.72), mean=0.227, stddev=0.141], bias-{mean,stddev}=-0.02906,0.03965, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.41e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.23 0.24,0.25,0.28,0.32,0.34 0.36,0.39,0.40,0.46), mean=0.285, stddev=0.0426], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.36,0.37,0.39 0.40,0.42,0.44,0.47,0.49 0.51,0.52,0.53,0.54), mean=0.445, stddev=0.0363], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.044, stddev=0.00755], oderiv-count=1.08461e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39757.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.21,0.23 0.24,0.25,0.28,0.32,0.34 0.36,0.39,0.41,0.47), mean=0.287, stddev=0.0418], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.42,0.43 0.45,0.47,0.52,0.57,0.59 0.62,0.65,0.66,0.71), mean=0.521, stddev=0.0552]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000185571, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01773, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,2e-06,4e-06,2e-05 0.0007,0.16,0.42,0.59,0.67 0.73,0.79,0.84,1.1), mean=0.388, stddev=0.232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.39,0.44 0.52,0.71,0.81,0.90,0.97 1.0,1.1,1.1,1.3), mean=0.792, stddev=0.163], bias-{mean,stddev}=0.003773,0.02903, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000185571, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.08112, w_fc-rms=0.03335, w_oc-rms=0.0466, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.44,0.45,0.48,0.50,0.54 0.72,0.79,0.82,0.86), mean=0.497, stddev=0.0799], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.0233] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.45,0.47,0.48 0.49,0.50,0.51,0.55,0.60 0.68,0.79,0.81,0.87), mean=0.531, stddev=0.0672], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.17 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0247] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0358015, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.89,-0.87,-0.51 -0.28,-0.12,0.0007,0.16,0.30 0.58,0.87,0.89,0.92), mean=0.0177, stddev=0.306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.20,0.23 0.37,0.44,0.58,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.609, stddev=0.22] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.41 0.42,0.43,0.46,0.50,0.50 0.51,0.55,0.58,0.74), mean=0.463, stddev=0.0399], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0204] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00638308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.66,-0.61,-0.31 -0.14,-0.07,0.0007,0.09,0.21 0.32,0.61,0.68,0.74), mean=0.0116, stddev=0.205], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.45,0.49,0.60 0.80,0.84,0.91,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.884, stddev=0.112] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.1665e-05, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000241928, count-zeroing-boundaries=295542
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.294215
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000185571, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04024, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.38,0.42 0.45,0.53,0.88,1.2,1.3 1.3,1.4,1.4,1.4), mean=0.859, stddev=0.322], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0009,0.001,0.003 0.01,0.34,0.54,0.73,0.93 1.2,1.5,1.6,1.9), mean=0.544, stddev=0.353], bias-{mean,stddev}=0.01255,0.2668, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000185571, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01352, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.22,0.24,0.26 0.28,0.30,0.37,0.43,0.47 0.49,0.53,0.54,0.60), mean=0.369, stddev=0.0782], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.14 0.15,0.17,0.29,0.40,0.43 0.45,0.47,0.48,0.52), mean=0.287, stddev=0.112], bias-{mean,stddev}=0.00218,0.009903, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.89e+05, self-repaired-proportion=0.00380893, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.02,0.03 0.04,0.06,0.08,0.10,0.12 0.13,0.14,0.15,0.18), mean=0.0796, stddev=0.03], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.17,0.21 0.27,0.38,0.52,0.62,0.66 0.69,0.72,0.74,0.86), mean=0.495, stddev=0.145], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.09,0.09,0.10 0.10,0.11,0.13,0.16,0.19 0.23,0.27,0.28,0.34), mean=0.139, stddev=0.0413], oderiv-count=1.07309e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37213.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.01,0.02,0.03 0.04,0.06,0.08,0.10,0.12 0.13,0.14,0.15,0.17), mean=0.0803, stddev=0.03], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.06,0.07,0.09 0.09,0.11,0.12,0.14,0.15 0.16,0.17,0.18,0.19), mean=0.122, stddev=0.0244]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000185571, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008784, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.27,0.29 0.30,0.31,0.34,0.38,0.40 0.43,0.46,0.47,0.52), mean=0.344, stddev=0.044], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.12,0.13,0.14 0.15,0.16,0.19,0.23,0.26 0.28,0.30,0.32,0.38), mean=0.195, stddev=0.0455], bias-{mean,stddev}=-0.02412,0.02078, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.44e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.22,0.24,0.26,0.29,0.31 0.32,0.33,0.35,0.40), mean=0.264, stddev=0.0317], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.37,0.38,0.39 0.40,0.41,0.44,0.46,0.47 0.48,0.49,0.50,0.52), mean=0.436, stddev=0.0287], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.036, stddev=0.00305], oderiv-count=1.01984e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34670.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.22 0.23,0.24,0.27,0.29,0.31 0.32,0.34,0.35,0.41), mean=0.268, stddev=0.032], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.40,0.41,0.43 0.44,0.46,0.50,0.55,0.59 0.63,0.67,0.69,0.85), mean=0.511, stddev=0.0643]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000185571, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01478, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-06,3e-06,9e-06 4e-05,0.0007,0.33,0.53,0.59 0.64,0.69,0.71,0.89), mean=0.291, stddev=0.24], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.31,0.33,0.38 0.47,0.60,0.67,0.74,0.78 0.84,0.97,1.0,1.4), mean=0.661, stddev=0.134], bias-{mean,stddev}=0.006597,0.03597, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000185571, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0521, w_fc-rms=0.01832, w_oc-rms=0.03802, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643761, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.46 0.46,0.47,0.50,0.52,0.58 0.61,0.70,0.73,0.82), mean=0.508, stddev=0.0537], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0184] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643761, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.46,0.48 0.49,0.50,0.50,0.55,0.59 0.64,0.69,0.70,0.77), mean=0.525, stddev=0.0491], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0214] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0103621, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.83,-0.77,-0.47 -0.28,-0.12,0.0008,0.15,0.33 0.57,0.74,0.76,0.84), mean=0.0126, stddev=0.281], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.26,0.28,0.39 0.45,0.52,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.713, stddev=0.228] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643761, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.50,0.50,0.52 0.54,0.56,0.58,0.63), mean=0.493, stddev=0.0275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0189] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00643761, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.68,-0.58,-0.45,-0.29 -0.16,-0.06,0.0002,0.08,0.19 0.37,0.46,0.53,0.60), mean=0.0084, stddev=0.177], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.60,0.63,0.74 0.78,0.86,0.93,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.913, stddev=0.0922] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=4.631e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=9.20683e-05, count-zeroing-boundaries=260676
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.294215
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000185571, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03913, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.46,0.50,0.53 0.57,0.61,0.87,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.858, stddev=0.245], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.004,0.01,0.56,0.82,0.96 1.1,1.3,1.5,1.7), mean=0.489, stddev=0.399], bias-{mean,stddev}=0.002398,0.2161, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000185571, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01297, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.27 0.29,0.30,0.35,0.40,0.45 0.49,0.52,0.53,0.61), mean=0.356, stddev=0.0654], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.16 0.17,0.20,0.27,0.38,0.41 0.43,0.45,0.46,0.50), mean=0.282, stddev=0.0909], bias-{mean,stddev}=0.0005177,0.005809, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.03e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.12,0.14), mean=0.0654, stddev=0.0268], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.15,0.19 0.24,0.33,0.51,0.60,0.64 0.68,0.70,0.71,0.78), mean=0.475, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.14,0.17,0.19 0.22,0.24,0.25,0.29), mean=0.149, stddev=0.0327], oderiv-count=1.02688e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32126.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.14), mean=0.0665, stddev=0.0266], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.09,0.10,0.12,0.13 0.13,0.15,0.15,0.18), mean=0.104, stddev=0.0199]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000185571, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008629, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.22 0.27,0.29,0.34,0.39,0.41 0.43,0.45,0.46,0.49), mean=0.335, stddev=0.0611], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.15,0.18,0.23,0.26 0.28,0.31,0.33,0.40), mean=0.191, stddev=0.0463], bias-{mean,stddev}=-0.01611,0.02596, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.07e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.17,0.20 0.23,0.25,0.28,0.31,0.32 0.33,0.34,0.35,0.43), mean=0.276, stddev=0.0419], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.36,0.37 0.39,0.40,0.43,0.46,0.47 0.48,0.49,0.50,0.53), mean=0.429, stddev=0.033], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0294, stddev=0.00275], oderiv-count=984000
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29583, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.17,0.20 0.23,0.25,0.29,0.31,0.33 0.34,0.35,0.37,0.43), mean=0.28, stddev=0.0422], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.29,0.35 0.43,0.48,0.54,0.60,0.63 0.66,0.69,0.71,0.82), mean=0.534, stddev=0.0873]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000185571, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02096, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.28,0.29,0.30 0.32,0.37,0.50,0.65,0.71 0.76,0.84,0.90,1.1), mean=0.513, stddev=0.148], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.67,0.69,0.75 0.78,0.82,0.89,1.1,1.2 1.2,1.4,1.5,1.9), mean=0.941, stddev=0.169], bias-{mean,stddev}=0.01398,0.01862, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000185571, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1001, w_fc-rms=0.04732, w_oc-rms=0.07379, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650342, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.58,0.61,0.64 0.65,0.68,0.73,0.78,0.81 0.83,0.85,0.87,0.89), mean=0.73, stddev=0.0608], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.22), mean=0.164, stddev=0.025] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650342, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.50,0.58,0.60 0.62,0.65,0.70,0.75,0.80 0.83,0.86,0.88,0.89), mean=0.704, stddev=0.0694], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.23), mean=0.167, stddev=0.0251] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0341407, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.88,-0.79,-0.62 -0.46,-0.33,0.0004,0.32,0.47 0.61,0.81,0.85,0.92), mean=-0.00779, stddev=0.371], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.19,0.22 0.28,0.36,0.47,0.52,0.55 0.57,0.59,0.60,0.67), mean=0.442, stddev=0.102] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650342, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.51,0.53 0.56,0.60,0.64,0.68,0.71 0.74,0.76,0.81,0.88), mean=0.641, stddev=0.062], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0187] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00650342, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.71,-0.63,-0.49 -0.36,-0.25,0.004,0.24,0.36 0.48,0.65,0.67,0.75), mean=-0.00747, stddev=0.292], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.48 0.54,0.62,0.71,0.76,0.78 0.80,0.81,0.82,0.87), mean=0.686, stddev=0.0925] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221696
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.294215
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000185571, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.8,2.6,2.7 2.8,2.9,3.0,3.1), mean=1.99, stddev=0.629], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.93,0.98,1.1 1.1,1.2,1.4,1.6,1.9 2.1,2.2,2.3,2.4), mean=1.44, stddev=0.302], bias-{mean,stddev}=0.0008838,0.7111, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000185571, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04437, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.61,0.63 0.64,0.66,0.70,0.75,0.78 0.82,0.87,0.94,2.1), mean=0.71, stddev=0.0848], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.2 1.3,1.3,1.7,2.6,2.6 2.7,2.8,2.8,2.9), mean=1.95, stddev=0.584], bias-{mean,stddev}=4.717e-09,0.02368, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=616320
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/306.mdl exp/nnet3/tdnn_lstm1c_sp/307.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.03589 tdnn2.affine:3.98415 lstm1.W_all:3.12861 lstm1.lstm_nonlin:0.0649942 lstm1.W_rp:1.268 tdnn3.affine:2.91439 tdnn4.affine:3.07269 lstm2.W_all:2.25763 lstm2.lstm_nonlin:0.0398671 lstm2.W_rp:0.907623 tdnn5.affine:2.45799 tdnn6.affine:2.55332 lstm3.W_all:2.28378 lstm3.lstm_nonlin:0.056239 lstm3.W_rp:0.938112 output.affine:2.57958 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.4141 tdnn2.affine:10.6362 lstm1.W_all:20.6546 lstm1.lstm_nonlin:2.26474 lstm1.W_rp:15.4108 tdnn3.affine:8.61266 tdnn4.affine:7.94431 lstm2.W_all:17.2708 lstm2.lstm_nonlin:1.52897 lstm2.W_rp:14.8055 tdnn5.affine:8.26365 tdnn6.affine:7.80278 lstm3.W_all:24.391 lstm3.lstm_nonlin:3.03414 lstm3.W_rp:35.4876 output.affine:32.8333 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.323738 tdnn2.affine:0.372542 lstm1.W_all:0.151212 lstm1.lstm_nonlin:0.0288934 lstm1.W_rp:0.0822182 tdnn3.affine:0.336878 tdnn4.affine:0.385388 lstm2.W_all:0.13053 lstm2.lstm_nonlin:0.0263 lstm2.W_rp:0.0612799 tdnn5.affine:0.296247 tdnn6.affine:0.326246 lstm3.W_all:0.0934779 lstm3.lstm_nonlin:0.0185258 lstm3.W_rp:0.0264401 output.affine:0.0785114 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:02:36 KST 2020, elapsed time 0 seconds
