# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/319.mdl exp/nnet3/tdnn_lstm1c_sp/320.mdl 
# Started at Thu Jul 30 12:07:45 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/319.mdl exp/nnet3/tdnn_lstm1c_sp/320.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00017197, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.004,0.005 0.007,0.02,0.18,0.21,0.24 0.27,0.30,0.31,0.34), mean=0.148, stddev=0.0893], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.07,0.08,0.21,0.27,0.33 0.41,0.47,0.48,0.56), mean=0.2, stddev=0.11], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.02,0.03,0.11,0.29,0.40 0.48,0.58,0.63,0.68), mean=0.167, stddev=0.155], bias-{mean,stddev}=-0.0001335,0.01351, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.02,0.28,0.45,0.55 0.67,0.84,1.0,1.9), mean=0.277, stddev=0.24], oderiv-count=143104
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=8421.64, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,-0.03,-0.02,-0.008 -0.001,5e-05,0.04,0.10,0.12 0.15,0.19,0.21,0.27), mean=0.0497, stddev=0.0557], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.07,0.12,0.13 0.15,0.17,0.17,0.21), mean=0.0609, stddev=0.0554]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00017197, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004232, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.14 0.15,0.15,0.17,0.18,0.18 0.19,0.20,0.20,0.22), mean=0.167, stddev=0.0143], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.004,0.008,0.10,0.12,0.13 0.14,0.15,0.16,0.18), mean=0.0829, stddev=0.0493], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.04,0.09,0.21,0.29 0.36,0.42,0.45,0.52), mean=0.129, stddev=0.106], bias-{mean,stddev}=0.0004962,0.007425, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.58e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.16,0.19 0.20,0.23,0.28,0.34,0.39 0.43,0.48,0.50,0.68), mean=0.292, stddev=0.0756], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.29,0.31,0.34 0.36,0.39,0.45,0.50,0.53 0.56,0.58,0.59,0.62), mean=0.444, stddev=0.0657], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.08,0.12,0.13 0.15,0.16,0.17,0.24), mean=0.0741, stddev=0.0514], oderiv-count=15232
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=8288.93, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.14,0.17 0.19,0.22,0.28,0.36,0.41 0.47,0.55,0.61,0.79), mean=0.293, stddev=0.0949], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.12,0.28 0.34,0.41,0.52,0.64,0.70 0.75,0.85,0.88,1.0), mean=0.517, stddev=0.156]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00017197, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002586, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-09,1e-07,2e-07,2e-06 5e-05,0.02,0.05,0.09,0.10 0.12,0.13,0.14,0.19), mean=0.0546, stddev=0.037], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.05,0.12,0.14,0.14 0.15,0.16,0.17,0.19), mean=0.11, stddev=0.0418], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,8e-08,1e-07 2e-07,0.03,0.06,0.13,0.20 0.26,0.34,0.37,0.43), mean=0.085, stddev=0.0817], bias-{mean,stddev}=6.684e-06,0.0008571, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00017197, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001319, w_fc-rms=0.0009658, w_oc-rms=0.002593, count=5e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000777586, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.69,-0.53,-0.33 -0.08,0.19,0.49,0.77,1.0 1.2,1.4,1.5,2.7), mean=0.469, stddev=0.451], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.56,-0.47,-0.39,-0.24 -0.07,0.06,0.25,0.34,0.43 0.58,0.72,0.78,1.1), mean=0.204, stddev=0.229] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000777586, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.39,-0.29,-0.04 0.12,0.34,0.50,0.80,1.0 1.2,1.4,1.6,2.3), mean=0.553, stddev=0.372], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.34,-0.26,-0.12 -0.01,0.10,0.24,0.30,0.38 0.44,0.53,0.59,0.74), mean=0.202, stddev=0.171] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=2.24406, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.0,-5.8,-5.1,-4.2 -2.8,-1.4,0.005,2.0,3.1 3.9,4.8,5.4,8.6), mean=0.13, stddev=2.31], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.0,-4.7,-4.0,-2.9 -1.9,-1.0,0.77,1.6,2.9 3.9,5.3,5.9,8.8), mean=0.519, stddev=2.02] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000777586, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.98,-0.76,-0.44 -0.20,0.09,0.46,0.67,0.91 1.2,1.4,1.7,2.3), mean=0.392, stddev=0.486], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.40,-0.27,-0.15 -0.05,0.07,0.25,0.36,0.50 0.62,0.71,0.86,1.2), mean=0.229, stddev=0.23] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000777586, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.5,-3.4,-2.8,-2.0 -1.5,-0.79,0.0008,0.90,1.5 2.2,2.8,3.2,3.6), mean=0.0258, stddev=1.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.9,-0.68,-0.54,-0.13 0.18,0.50,1.0,1.4,1.7 2.1,2.5,2.7,3.6), mean=0.947, stddev=0.648] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=8.77e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0.000912409, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.0122044, count-zeroing-boundaries=1311
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.27438
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00017197, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003391, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.05,0.07,0.10,0.11 0.11,0.11,0.12,0.13), mean=0.0727, stddev=0.0265], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0001,0.0001,0.0003 0.001,0.04,0.05,0.07,0.07 0.08,0.08,0.09,0.13), mean=0.0489, stddev=0.0245], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.09,0.16 0.20,0.23,0.24,0.31), mean=0.0343, stddev=0.0693], bias-{mean,stddev}=0.00018,0.002876, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00017197, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00433, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.08,0.09,0.09 0.10,0.10,0.12,0.13,0.14 0.15,0.16,0.17,0.20), mean=0.119, stddev=0.0207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.09,0.13,0.14 0.14,0.15,0.16,0.17), mean=0.0921, stddev=0.0355], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-09,3e-08,4e-08,5e-08 6e-08,1e-07,1e-05,0.15,0.24 0.30,0.35,0.38,0.43), mean=0.0617, stddev=0.104], bias-{mean,stddev}=4.712e-05,0.002224, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7890.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.01,-0.005,0.0007,0.01 0.03,0.04,0.08,0.11,0.13 0.15,0.17,0.18,0.23), mean=0.0784, stddev=0.0423], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.02 0.06,0.09,0.12,0.14,0.16 0.17,0.18,0.19,0.22), mean=0.112, stddev=0.0413]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00017197, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003234, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.11,0.11 0.12,0.12,0.13,0.14,0.14 0.14,0.15,0.15,0.17), mean=0.127, stddev=0.00964], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.05,0.06 0.06,0.06,0.07,0.08,0.09 0.09,0.10,0.10,0.11), mean=0.0729, stddev=0.0115], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.05,0.09,0.16,0.21 0.25,0.29,0.31,0.34), mean=0.108, stddev=0.0681], bias-{mean,stddev}=5.691e-05,0.003448, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2.27e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.21,0.21 0.22,0.24,0.27,0.30,0.32 0.34,0.36,0.37,0.39), mean=0.27, stddev=0.0377], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.36,0.37 0.38,0.40,0.44,0.47,0.49 0.51,0.52,0.53,0.54), mean=0.437, stddev=0.0407], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.07,0.11,0.13 0.15,0.16,0.19,0.23), mean=0.0621, stddev=0.0535], oderiv-count=6976
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7492.67, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.16,0.18,0.18 0.20,0.22,0.26,0.30,0.33 0.35,0.37,0.39,0.48), mean=0.261, stddev=0.0496], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.27,0.29,0.34 0.38,0.42,0.50,0.57,0.62 0.67,0.71,0.74,0.86), mean=0.499, stddev=0.0991]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00017197, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001814, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-07,5e-07,1e-06 5e-06,0.0001,0.03,0.06,0.08 0.09,0.10,0.10,0.12), mean=0.0343, stddev=0.031], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.04,0.09,0.10,0.10 0.11,0.11,0.11,0.13), mean=0.0778, stddev=0.0282], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,6e-08,7e-08,9e-08 2e-05,0.02,0.04,0.09,0.14 0.19,0.25,0.26,0.31), mean=0.0583, stddev=0.0587], bias-{mean,stddev}=1.703e-05,0.0008407, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00017197, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0007397, w_fc-rms=0.0006731, w_oc-rms=0.001219, count=3.81e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000941049, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.31,-0.23,-0.05 0.19,0.36,0.50,0.72,0.93 1.2,1.4,1.5,1.8), mean=0.533, stddev=0.342], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.46,-0.27,-0.25,-0.14 -0.05,0.07,0.25,0.27,0.37 0.50,0.57,0.64,0.86), mean=0.202, stddev=0.18] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000941049, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.43,-0.14,0.02,0.13 0.26,0.43,0.50,0.75,0.98 1.3,1.5,1.6,2.0), mean=0.583, stddev=0.323], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.44,-0.34,-0.22,-0.09 0.009,0.13,0.25,0.26,0.33 0.42,0.50,0.55,1.0), mean=0.208, stddev=0.153] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.240466, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.1,-5.9,-4.5,-3.5 -2.3,-1.4,0.0008,1.3,2.4 3.3,4.6,5.0,8.2), mean=0.00988, stddev=2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.3,-3.5,-3.3,-2.3 -1.4,-0.63,0.94,1.0,1.9 3.0,3.8,4.6,7.5), mean=0.493, stddev=1.55] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000941049, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.54,-0.40,-0.32,-0.12 0.10,0.34,0.50,0.72,0.95 1.2,1.4,1.5,2.1), mean=0.522, stddev=0.356], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.59,-0.32,-0.25,-0.09 -0.008,0.11,0.25,0.30,0.39 0.47,0.58,0.62,0.77), mean=0.216, stddev=0.169] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000941049, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.7,-3.1,-2.9,-2.1 -1.4,-0.60,-0.0002,0.65,1.3 1.8,2.2,2.5,4.7), mean=-0.0236, stddev=1.11], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.21,-0.19,0.08 0.37,0.63,1.0,1.2,1.5 1.8,2.2,2.5,4.2), mean=0.959, stddev=0.525] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=7.23e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=-0.000138274, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=-0.00275103, count-zeroing-boundaries=1090
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.27438
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00017197, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002349, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.05,0.07,0.07 0.07,0.08,0.08,0.08), mean=0.0514, stddev=0.015], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0001,0.0001,0.0002 0.0003,0.001,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0306, stddev=0.0223], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,9e-07,0.07,0.11 0.13,0.15,0.16,0.18), mean=0.0267, stddev=0.0464], bias-{mean,stddev}=0.0002686,0.002382, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00017197, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003653, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.09,0.10,0.11,0.12 0.13,0.14,0.14,0.15), mean=0.101, stddev=0.0144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.08,0.10,0.11 0.12,0.12,0.12,0.13), mean=0.0798, stddev=0.0237], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,4e-08,6e-08 7e-08,1e-07,0.001,0.13,0.19 0.24,0.29,0.31,0.37), mean=0.0569, stddev=0.0847], bias-{mean,stddev}=-7.295e-05,0.001577, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=3.94e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.15,-0.10,-0.08,-0.04 -0.007,0.02,0.08,0.14,0.20 0.23,0.28,0.30,0.36), mean=0.0837, stddev=0.0824], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.59,-0.39,-0.30,-0.15 0.003,0.19,0.53,0.80,1.0 1.2,1.3,1.4,1.6), mean=0.511, stddev=0.381], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.17,0.29,0.36 0.43,0.51,0.58,0.63), mean=0.166, stddev=0.146], oderiv-count=27776
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7094.54, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.009,0.001,0.006,0.01 0.02,0.04,0.07,0.10,0.12 0.14,0.15,0.16,0.20), mean=0.0705, stddev=0.0375], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.03 0.06,0.08,0.11,0.14,0.15 0.16,0.18,0.19,0.21), mean=0.106, stddev=0.0388]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00017197, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002693, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.10,0.11,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.106, stddev=0.0122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.05,0.06,0.07,0.07 0.07,0.08,0.08,0.09), mean=0.061, stddev=0.00744], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.04,0.07,0.13,0.18 0.22,0.25,0.26,0.30), mean=0.0888, stddev=0.0586], bias-{mean,stddev}=-0.0002247,0.002908, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=5.12e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.06,0.0009,0.04,0.10 0.16,0.22,0.30,0.40,0.46 0.48,0.51,0.55,0.62), mean=0.304, stddev=0.114], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.005,0.10,0.14,0.21 0.27,0.33,0.43,0.55,0.61 0.64,0.68,0.72,0.93), mean=0.433, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.01,0.01,0.02 0.02,0.03,0.03,0.04,0.04 0.04,0.05,0.05,0.07), mean=0.0312, stddev=0.00838], oderiv-count=102720
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=6696.41, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.0009,0.11,0.13,0.18 0.20,0.23,0.29,0.35,0.39 0.42,0.44,0.46,0.65), mean=0.295, stddev=0.0759], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.17,0.28 0.38,0.44,0.56,0.69,0.79 0.84,0.94,0.98,1.6), mean=0.567, stddev=0.176]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00017197, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0019, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.01 0.02,0.02,0.03,0.07,0.09 0.10,0.10,0.11,0.13), mean=0.04, stddev=0.0273], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.07,0.08,0.10,0.11 0.12,0.13,0.13,0.14), mean=0.0844, stddev=0.0195], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,1e-05 0.01,0.02,0.04,0.09,0.15 0.20,0.26,0.28,0.31), mean=0.0592, stddev=0.0633], bias-{mean,stddev}=6.958e-05,0.0005563, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00017197, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0009351, w_fc-rms=0.0008836, w_oc-rms=0.001922, count=2.62e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00125209, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.4,-1.4,-0.81,-0.26 0.04,0.34,0.91,1.4,1.7 2.0,2.4,2.8,5.1), mean=0.87, stddev=0.9], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.59,-0.47,-0.33 -0.22,-0.12,0.08,0.30,0.40 0.53,0.66,0.79,3.1), mean=0.0977, stddev=0.325] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00125209, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-0.50,-0.36,-0.07 0.20,0.65,1.2,1.8,2.1 2.5,2.8,3.0,3.4), mean=1.2, stddev=0.771], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.70,-0.59,-0.47 -0.36,-0.25,-0.007,0.22,0.35 0.49,0.63,0.75,2.2), mean=8.98e-06, stddev=0.315] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=1.06539, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-34,-13,-11,-9.3 -6.8,-4.1,0.19,5.1,7.4 9.7,12,14,21), mean=0.341, stddev=5.81], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.7,-6.7,-6.1,-4.9 -3.7,-2.5,0.04,2.6,3.9 5.0,6.5,7.1,34), mean=0.149, stddev=3.37] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00125209, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.6,-1.9,-1.5,-0.95 -0.49,-0.03,0.80,1.6,2.1 2.7,3.1,3.5,5.1), mean=0.797, stddev=1.15], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.68,-0.62,-0.41 -0.32,-0.15,0.14,0.42,0.57 0.78,0.94,0.99,3.3), mean=0.146, stddev=0.403] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00125209, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-26,-9.0,-7.5,-5.9 -4.5,-3.0,0.19,3.3,5.3 6.6,8.5,9.7,14), mean=0.227, stddev=4.02], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.6,-2.4,-2.0,-1.3 -0.83,-0.16,1.1,2.3,2.9 3.6,4.2,4.8,22), mean=1.12, stddev=1.78] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=5.7e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000582072, count-zeroing-boundaries=859
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.27438
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00017197, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002324, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.07,0.07 0.08,0.08,0.08,0.08), mean=0.0491, stddev=0.0199], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.05,0.09), mean=0.0367, stddev=0.0076], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,2e-07 3e-07,8e-07,0.005,0.07,0.10 0.12,0.14,0.16,0.19), mean=0.0307, stddev=0.0432], bias-{mean,stddev}=-0.0006081,0.01746, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00017197, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003356, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.05,0.06,0.07 0.08,0.09,0.10,0.20), mean=0.051, stddev=0.0182], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.12,0.20,0.21 0.21,0.22,0.22,0.23), mean=0.145, stddev=0.0514], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,3e-07 4e-07,9e-07,0.003,0.22,0.30 0.35,0.39,0.40,0.46), mean=0.0857, stddev=0.128], bias-{mean,stddev}=1.051e-11,0.0007782, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.008,0.02,0.02,0.03 0.03,0.04,0.04,0.38), mean=0.0162, stddev=0.0151], oderiv-count=106880

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.96201 tdnn2.affine:3.8151 lstm1.W_all:3.00719 lstm1.lstm_nonlin:0.0698886 lstm1.W_rp:1.2478 tdnn3.affine:2.75792 tdnn4.affine:2.91408 lstm2.W_all:2.10989 lstm2.lstm_nonlin:0.0359489 lstm2.W_rp:0.864599 tdnn5.affine:2.32644 tdnn6.affine:2.42656 lstm3.W_all:2.20995 lstm3.lstm_nonlin:0.0527481 lstm3.W_rp:0.899733 output.affine:2.48218 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.5859 tdnn2.affine:10.6373 lstm1.W_all:20.575 lstm1.lstm_nonlin:2.40843 lstm1.W_rp:15.3998 tdnn3.affine:8.48527 tdnn4.affine:7.8349 lstm2.W_all:17.1041 lstm2.lstm_nonlin:1.64066 lstm2.W_rp:14.7438 tdnn5.affine:8.123 tdnn6.affine:7.74992 lstm3.W_all:24.1427 lstm3.lstm_nonlin:3.04637 lstm3.W_rp:35.4904 output.affine:32.6562 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.313674 tdnn2.affine:0.356364 lstm1.W_all:0.146006 lstm1.lstm_nonlin:0.0291422 lstm1.W_rp:0.0809756 tdnn3.affine:0.323064 tdnn4.affine:0.370127 lstm2.W_all:0.123199 lstm2.lstm_nonlin:0.022009 lstm2.W_rp:0.0585698 tdnn5.affine:0.285145 tdnn6.affine:0.311705 lstm3.W_all:0.0914811 lstm3.lstm_nonlin:0.0172852 lstm3.W_rp:0.0253579 output.affine:0.0759659 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:07:46 KST 2020, elapsed time 1 seconds
