# nnet3-info exp/nnet3/tdnn_lstm1c_sp/379.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/378.mdl exp/nnet3/tdnn_lstm1c_sp/379.mdl 
# Started at Thu Jul 30 12:31:16 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/379.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000117534, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03256, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.006 0.008,0.02,0.57,0.73,0.81 0.88,0.96,1.0,1.2), mean=0.471, stddev=0.311], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.22,0.67,0.93,1.2 1.3,1.4,1.5,1.6), mean=0.644, stddev=0.369], bias-{mean,stddev}=-0.003698,0.06139, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.29e+06, self-repaired-proportion=0.160781, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,8e-06,2e-05,4e-05 6e-05,0.0001,0.05,0.09,0.11 0.13,0.14,0.15,0.18), mean=0.0478, stddev=0.0454], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.01,0.02,0.03 0.05,0.07,0.39,0.59,0.70 0.80,0.87,0.90,0.99), mean=0.357, stddev=0.261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.007,0.009,0.01 0.02,0.03,0.34,0.48,0.57 0.71,0.81,0.89,1.7), mean=0.324, stddev=0.234], oderiv-count=1.13056e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36628, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,7e-06,9e-06,2e-05 5e-05,0.0001,0.04,0.09,0.10 0.12,0.15,0.16,0.19), mean=0.0461, stddev=0.0447], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,9e-05,0.0001,0.0002 0.0003,0.0007,0.08,0.11,0.12 0.14,0.15,0.15,0.17), mean=0.0643, stddev=0.0509]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000117534, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01175, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.36 0.38,0.40,0.45,0.51,0.55 0.58,0.63,0.65,0.73), mean=0.459, stddev=0.0679], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.004 0.005,0.01,0.28,0.34,0.37 0.40,0.43,0.49,0.74), mean=0.224, stddev=0.148], bias-{mean,stddev}=-0.03314,0.04072, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.77e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.23,0.26,0.30,0.32 0.34,0.36,0.39,0.48), mean=0.267, stddev=0.0449], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.36,0.37,0.39 0.40,0.42,0.44,0.47,0.49 0.51,0.53,0.54,0.56), mean=0.444, stddev=0.0387], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.06,0.06 0.07,0.08,0.08,0.10), mean=0.051, stddev=0.0101], oderiv-count=1.20563e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35847.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.23,0.27,0.31,0.33 0.35,0.36,0.40,0.50), mean=0.269, stddev=0.0466], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.41,0.43,0.48,0.53,0.56 0.60,0.63,0.65,0.70), mean=0.485, stddev=0.061]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000117534, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01763, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,6e-07,2e-06,1e-05 0.0003,0.17,0.41,0.59,0.66 0.73,0.79,0.86,1.1), mean=0.385, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.37,0.42 0.50,0.70,0.81,0.90,0.96 1.0,1.1,1.1,1.3), mean=0.786, stddev=0.169], bias-{mean,stddev}=0.00233,0.02709, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000117534, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.07997, w_fc-rms=0.02534, w_oc-rms=0.04631, count=1.51e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636706, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.42,0.43 0.44,0.45,0.48,0.50,0.54 0.71,0.77,0.79,0.84), mean=0.495, stddev=0.0748], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0204] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636706, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.44,0.46,0.47 0.48,0.49,0.50,0.53,0.57 0.65,0.73,0.78,0.82), mean=0.516, stddev=0.0588], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.19 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0191] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0214413, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.87,-0.86,-0.48 -0.27,-0.13,0.0005,0.15,0.30 0.63,0.82,0.87,0.90), mean=0.0155, stddev=0.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.22,0.27 0.38,0.45,0.57,0.74,1.0 1.0,1.0,1.0,1.0), mean=0.609, stddev=0.214] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636706, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.57,0.58,0.67), mean=0.461, stddev=0.0413], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0196] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00636706, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.75,-0.70,-0.32 -0.18,-0.09,0.0003,0.10,0.22 0.43,0.64,0.74,0.82), mean=0.0105, stddev=0.232], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.40,0.52 0.73,0.81,0.88,0.93,1.0 1.0,1.0,1.0,1.0), mean=0.853, stddev=0.135] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.2572e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.70988e-05, count-zeroing-boundaries=298068
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.175207
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000117534, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03972, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.42,0.46 0.50,0.56,0.86,1.1,1.2 1.3,1.3,1.3,1.4), mean=0.86, stddev=0.285], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0006,0.0009,0.002 0.007,0.35,0.55,0.73,0.93 1.2,1.4,1.5,1.8), mean=0.544, stddev=0.337], bias-{mean,stddev}=0.01269,0.2603, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000117534, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01278, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.22,0.24,0.26 0.28,0.30,0.35,0.40,0.43 0.47,0.50,0.52,0.56), mean=0.351, stddev=0.0643], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.16,0.18,0.28,0.37,0.40 0.42,0.44,0.45,0.47), mean=0.275, stddev=0.0957], bias-{mean,stddev}=0.001475,0.009634, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.39e+05, self-repaired-proportion=0.00338514, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.12 0.14,0.15,0.16,0.17), mean=0.0791, stddev=0.0335], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.10,0.12,0.16 0.22,0.33,0.47,0.59,0.63 0.67,0.72,0.74,0.84), mean=0.451, stddev=0.151], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.09,0.10 0.10,0.11,0.12,0.15,0.19 0.24,0.27,0.29,0.35), mean=0.136, stddev=0.0428], oderiv-count=1.05562e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33505.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.01,0.01,0.02 0.03,0.05,0.08,0.10,0.12 0.13,0.15,0.16,0.18), mean=0.0782, stddev=0.0331], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.05,0.06,0.07 0.09,0.11,0.13,0.15,0.16 0.17,0.18,0.18,0.20), mean=0.125, stddev=0.0278]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000117534, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00835, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.27 0.28,0.30,0.32,0.36,0.38 0.40,0.42,0.43,0.46), mean=0.328, stddev=0.0386], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.12,0.13,0.14 0.15,0.16,0.18,0.21,0.24 0.26,0.29,0.30,0.37), mean=0.186, stddev=0.0387], bias-{mean,stddev}=-0.02739,0.01892, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.72e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.20 0.21,0.22,0.25,0.28,0.29 0.30,0.32,0.33,0.36), mean=0.25, stddev=0.0311], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.36,0.37,0.37 0.39,0.40,0.42,0.45,0.46 0.46,0.48,0.48,0.51), mean=0.423, stddev=0.0287], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.037, stddev=0.00259], oderiv-count=1.05462e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31163.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.21,0.22,0.25,0.28,0.29 0.31,0.32,0.33,0.37), mean=0.251, stddev=0.0325], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.39,0.41 0.42,0.44,0.48,0.53,0.55 0.59,0.62,0.64,0.85), mean=0.487, stddev=0.058]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000117534, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01441, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,6e-06,2e-05 6e-05,0.001,0.33,0.51,0.58 0.62,0.68,0.71,0.91), mean=0.285, stddev=0.233], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.35 0.43,0.60,0.66,0.73,0.77 0.80,0.87,0.92,1.3), mean=0.644, stddev=0.131], bias-{mean,stddev}=0.005253,0.03166, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000117534, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04936, w_fc-rms=0.015, w_oc-rms=0.04055, count=1.38e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642226, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.46 0.47,0.48,0.50,0.51,0.55 0.60,0.65,0.68,0.77), mean=0.504, stddev=0.0453], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0158] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642226, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.46,0.47 0.48,0.50,0.50,0.53,0.56 0.59,0.64,0.65,0.71), mean=0.514, stddev=0.0381], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0163] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00642844, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.79,-0.74,-0.43 -0.23,-0.10,0.0001,0.12,0.31 0.49,0.65,0.71,0.77), mean=0.00812, stddev=0.251], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.30,0.38,0.41 0.47,0.53,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.719, stddev=0.218] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642226, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.46,0.47,0.50,0.50,0.51 0.52,0.55,0.57,0.68), mean=0.489, stddev=0.0282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0184] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00642226, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.59,-0.54,-0.29 -0.16,-0.07,8e-05,0.09,0.21 0.36,0.48,0.55,0.62), mean=0.00665, stddev=0.187], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.55,0.58,0.67 0.76,0.83,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.893, stddev=0.107] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.1481e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.47274e-05, count-zeroing-boundaries=262866
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.175207
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000117534, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03781, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.49,0.53 0.56,0.60,0.83,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.832, stddev=0.225], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.002 0.004,0.01,0.56,0.80,0.92 1.0,1.2,1.3,1.5), mean=0.479, stddev=0.377], bias-{mean,stddev}=-0.0006762,0.2059, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000117534, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01201, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.25 0.27,0.29,0.32,0.37,0.42 0.45,0.48,0.50,0.55), mean=0.33, stddev=0.0591], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.25,0.35,0.38 0.40,0.41,0.42,0.46), mean=0.261, stddev=0.0815], bias-{mean,stddev}=0.0008118,0.007077, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.8e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.13,0.14,0.15), mean=0.0648, stddev=0.0293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.14,0.17 0.21,0.29,0.45,0.56,0.60 0.64,0.69,0.70,0.73), mean=0.431, stddev=0.146], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.11,0.13,0.16,0.18 0.21,0.23,0.24,0.25), mean=0.137, stddev=0.0321], oderiv-count=1.01459e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28821, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.13,0.14,0.15), mean=0.0658, stddev=0.0292], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.09,0.11,0.13,0.14 0.15,0.15,0.16,0.18), mean=0.109, stddev=0.0241]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000117534, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00837, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.22 0.26,0.28,0.33,0.38,0.40 0.41,0.42,0.43,0.48), mean=0.325, stddev=0.059], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.15,0.17,0.22,0.24 0.28,0.31,0.33,0.40), mean=0.186, stddev=0.0448], bias-{mean,stddev}=-0.02081,0.02347, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.85e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.17,0.19 0.21,0.24,0.27,0.30,0.31 0.32,0.34,0.35,0.40), mean=0.265, stddev=0.0404], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.37,0.39,0.42,0.44,0.46 0.46,0.48,0.49,0.51), mean=0.415, stddev=0.0328], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0305, stddev=0.00305], oderiv-count=942560
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26478.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.20 0.21,0.24,0.27,0.30,0.31 0.33,0.34,0.38,0.45), mean=0.269, stddev=0.0415], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.27,0.36 0.42,0.46,0.52,0.59,0.62 0.65,0.69,0.74,1.0), mean=0.522, stddev=0.0917]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000117534, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02076, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.27,0.29 0.31,0.35,0.49,0.66,0.72 0.76,0.85,0.91,0.99), mean=0.506, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.60,0.63,0.71 0.77,0.81,0.88,1.1,1.2 1.3,1.4,1.5,1.9), mean=0.929, stddev=0.181], bias-{mean,stddev}=0.01305,0.01662, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000117534, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.109, w_fc-rms=0.04402, w_oc-rms=0.07466, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00648891, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.59,0.60,0.62 0.65,0.67,0.72,0.76,0.78 0.81,0.83,0.85,0.89), mean=0.717, stddev=0.0555], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.13 0.14,0.15,0.17,0.18,0.19 0.20,0.20,0.20,0.22), mean=0.168, stddev=0.0212] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00648891, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.53,0.56,0.58 0.59,0.62,0.67,0.71,0.76 0.80,0.84,0.86,0.89), mean=0.672, stddev=0.0646], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.13 0.15,0.17,0.18,0.20,0.20 0.21,0.21,0.21,0.23), mean=0.179, stddev=0.0229] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0286994, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.84,-0.72,-0.59 -0.44,-0.31,-0.02,0.29,0.44 0.57,0.78,0.84,0.92), mean=-0.00494, stddev=0.351], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.20,0.22 0.31,0.36,0.44,0.48,0.50 0.52,0.55,0.55,0.64), mean=0.419, stddev=0.0838] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00648891, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.49,0.53 0.55,0.60,0.64,0.67,0.70 0.72,0.77,0.80,0.88), mean=0.635, stddev=0.0594], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.19,0.20,0.20,0.21), mean=0.175, stddev=0.0171] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00648891, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.74,-0.65,-0.55 -0.38,-0.28,-0.01,0.25,0.37 0.54,0.70,0.76,0.86), mean=-0.00572, stddev=0.316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.29,0.32,0.37 0.46,0.54,0.63,0.68,0.70 0.72,0.73,0.73,0.79), mean=0.6, stddev=0.1] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=6.68678e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.71078e-06, count-zeroing-boundaries=223521
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.175207
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000117534, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08937, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.1,1.1 1.2,1.3,1.7,2.6,2.7 2.7,2.8,2.9,3.1), mean=1.94, stddev=0.636], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.90,1.0,1.1 1.1,1.2,1.4,1.6,1.8 2.0,2.1,2.1,2.3), mean=1.42, stddev=0.266], bias-{mean,stddev}=-0.03042,0.6079, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000117534, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04258, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.59,0.60 0.62,0.64,0.67,0.72,0.75 0.78,0.83,0.90,2.1), mean=0.682, stddev=0.0808], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.1,1.1 1.2,1.2,1.6,2.5,2.6 2.6,2.7,2.8,2.9), mean=1.86, stddev=0.594], bias-{mean,stddev}=4.876e-09,0.02187, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=616320
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/378.mdl exp/nnet3/tdnn_lstm1c_sp/379.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.48413 tdnn2.affine:3.23708 lstm1.W_all:2.46793 lstm1.lstm_nonlin:0.0472717 lstm1.W_rp:1.08597 tdnn3.affine:2.22884 tdnn4.affine:2.3155 lstm2.W_all:1.68535 lstm2.lstm_nonlin:0.0284954 lstm2.W_rp:0.738594 tdnn5.affine:1.87354 tdnn6.affine:2.01457 lstm3.W_all:2.04242 lstm3.lstm_nonlin:0.0459084 lstm3.W_rp:0.781405 output.affine:1.96709 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.9355 tdnn2.affine:10.6533 lstm1.W_all:20.5331 lstm1.lstm_nonlin:2.18515 lstm1.W_rp:15.1971 tdnn3.affine:8.13946 tdnn4.affine:7.55895 lstm2.W_all:16.8246 lstm2.lstm_nonlin:1.4964 lstm2.W_rp:14.2945 tdnn5.affine:7.64748 tdnn6.affine:7.57267 lstm3.W_all:24.158 lstm3.lstm_nonlin:3.17586 lstm3.W_rp:34.2963 output.affine:31.5087 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.270394 tdnn2.affine:0.304548 lstm1.W_all:0.120195 lstm1.lstm_nonlin:0.0215546 lstm1.W_rp:0.0714098 tdnn3.affine:0.273299 tdnn4.affine:0.306215 lstm2.W_all:0.100104 lstm2.lstm_nonlin:0.018965 lstm2.W_rp:0.051638 tdnn5.affine:0.24407 tdnn6.affine:0.265515 lstm3.W_all:0.0845691 lstm3.lstm_nonlin:0.0144531 lstm3.W_rp:0.0227601 output.affine:0.0623681 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:31:16 KST 2020, elapsed time 0 seconds
