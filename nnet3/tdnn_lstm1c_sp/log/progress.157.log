# nnet3-info exp/nnet3/tdnn_lstm1c_sp/157.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/156.mdl exp/nnet3/tdnn_lstm1c_sp/157.mdl 
# Started at Thu Jul 30 11:03:08 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/157.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000182913, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02946, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.01,0.02 0.04,0.33,0.51,0.61,0.66 0.71,0.79,0.86,1.4), mean=0.461, stddev=0.22], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.15 0.17,0.20,0.58,0.79,1.1 1.3,1.4,1.5,1.6), mean=0.574, stddev=0.349], bias-{mean,stddev}=0.007102,0.05466, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.09e+06, self-repaired-proportion=0.12745, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,4e-06,1e-05,4e-05 0.0001,0.006,0.06,0.09,0.10 0.11,0.13,0.14,0.19), mean=0.0577, stddev=0.037], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.002,0.004,0.02 0.04,0.14,0.49,0.64,0.73 0.80,0.86,0.89,0.98), mean=0.443, stddev=0.241], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.07,0.27,0.36,0.45,0.50 0.58,0.66,0.79,1.5), mean=0.351, stddev=0.168], oderiv-count=1.25811e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32473.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-06,3e-06,1e-05 5e-05,0.003,0.06,0.08,0.10 0.11,0.13,0.14,0.21), mean=0.0545, stddev=0.037], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,6e-05,9e-05,0.0002 0.0005,0.02,0.09,0.10,0.11 0.12,0.13,0.13,0.14), mean=0.0746, stddev=0.0401]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000182913, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.38,0.39 0.41,0.43,0.46,0.50,0.53 0.56,0.59,0.61,0.78), mean=0.468, stddev=0.0538], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.01 0.02,0.18,0.28,0.32,0.34 0.37,0.40,0.41,0.74), mean=0.247, stddev=0.114], bias-{mean,stddev}=-0.003006,0.02776, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.27 0.28,0.30,0.32,0.35,0.37 0.39,0.41,0.44,0.57), mean=0.328, stddev=0.0385], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.41,0.42 0.43,0.44,0.46,0.48,0.50 0.50,0.51,0.52,0.54), mean=0.459, stddev=0.0269], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0455, stddev=0.00915], oderiv-count=1.14688e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31751.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.26 0.28,0.29,0.32,0.35,0.37 0.39,0.44,0.47,0.58), mean=0.324, stddev=0.0425], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.45,0.47 0.50,0.52,0.56,0.63,0.65 0.68,0.73,0.74,0.90), mean=0.57, stddev=0.0656]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000182913, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01638, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0006,0.002,0.01 0.05,0.19,0.37,0.54,0.63 0.69,0.79,0.84,1.0), mean=0.365, stddev=0.203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.36,0.37,0.42 0.48,0.64,0.76,0.84,0.88 0.93,1.0,1.0,1.4), mean=0.732, stddev=0.151], bias-{mean,stddev}=-0.001148,0.02469, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000182913, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02208, w_fc-rms=0.0341, w_oc-rms=0.04272, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622272, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.43,0.43,0.44 0.45,0.46,0.49,0.52,0.55 0.59,0.65,0.69,0.76), mean=0.498, stddev=0.0489], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0144] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622272, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.40 0.42,0.44,0.49,0.53,0.59 0.66,0.75,0.78,0.86), mean=0.495, stddev=0.0766], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.18,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0184] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00766882, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.80,-0.76,-0.53 -0.36,-0.19,0.002,0.18,0.32 0.53,0.69,0.79,0.85), mean=-0.0016, stddev=0.293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.26,0.29,0.37 0.42,0.47,0.60,0.74,0.97 1.0,1.0,1.0,1.0), mean=0.624, stddev=0.182] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622272, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.43,0.44,0.47,0.50,0.52 0.55,0.57,0.59,0.64), mean=0.477, stddev=0.0389], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.011186, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.81,-0.72,-0.48 -0.31,-0.17,0.003,0.17,0.29 0.50,0.64,0.81,0.90), mean=-0.000695, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.22,0.29,0.50 0.61,0.73,0.83,0.90,0.98 1.0,1.0,1.0,1.0), mean=0.805, stddev=0.154] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=297291
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.014876
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000182913, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03099, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.19 0.20,0.24,0.43,0.99,1.1 1.1,1.2,1.2,1.2), mean=0.605, stddev=0.366], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.02,0.05 0.10,0.32,0.46,0.61,0.67 0.79,0.93,1.1,1.2), mean=0.453, stddev=0.21], bias-{mean,stddev}=-0.0004404,0.09834, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000182913, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01222, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.20,0.21,0.23 0.24,0.27,0.33,0.39,0.43 0.47,0.51,0.54,0.62), mean=0.333, stddev=0.0742], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.07,0.09,0.18,0.39,0.43 0.47,0.50,0.52,0.59), mean=0.236, stddev=0.149], bias-{mean,stddev}=0.003497,0.02824, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0.00249542, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.04,0.05 0.07,0.08,0.12,0.15,0.16 0.18,0.19,0.20,0.23), mean=0.115, stddev=0.0386], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.15,0.18,0.22 0.29,0.36,0.50,0.61,0.65 0.69,0.72,0.74,0.77), mean=0.486, stddev=0.141], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.07,0.07 0.08,0.08,0.09,0.11,0.12 0.13,0.15,0.17,0.28), mean=0.0944, stddev=0.0219], oderiv-count=1.09606e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29586.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.03,0.04,0.05 0.06,0.08,0.11,0.14,0.16 0.17,0.19,0.20,0.23), mean=0.111, stddev=0.0387], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.10,0.11,0.13 0.14,0.16,0.18,0.21,0.22 0.23,0.25,0.25,0.28), mean=0.18, stddev=0.0317]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000182913, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008889, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.31,0.32,0.35,0.37,0.39 0.41,0.42,0.45,0.58), mean=0.349, stddev=0.037], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.14,0.14,0.15 0.16,0.17,0.20,0.23,0.24 0.26,0.28,0.30,0.40), mean=0.2, stddev=0.0346], bias-{mean,stddev}=-0.009965,0.01655, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.23e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.22 0.23,0.25,0.28,0.31,0.32 0.33,0.35,0.36,0.43), mean=0.276, stddev=0.0342], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.39 0.40,0.42,0.44,0.47,0.48 0.50,0.51,0.52,0.54), mean=0.443, stddev=0.0322], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0346, stddev=0.00289], oderiv-count=1.02643e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27421.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.21,0.22 0.22,0.24,0.27,0.30,0.32 0.33,0.35,0.36,0.43), mean=0.271, stddev=0.0364], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.43,0.44 0.46,0.48,0.52,0.57,0.60 0.63,0.67,0.70,0.87), mean=0.527, stddev=0.0588]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000182913, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0131, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,2e-06,4e-06,9e-06 3e-05,0.0007,0.28,0.46,0.55 0.60,0.64,0.67,1.0), mean=0.254, stddev=0.217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.26,0.30 0.36,0.51,0.62,0.67,0.70 0.73,0.77,0.80,1.3), mean=0.583, stddev=0.13], bias-{mean,stddev}=-0.001577,0.02656, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000182913, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0111, w_fc-rms=0.01343, w_oc-rms=0.01805, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627529, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.46 0.46,0.47,0.50,0.51,0.53 0.56,0.58,0.61,0.65), mean=0.498, stddev=0.0303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0148] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627529, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.41,0.43 0.44,0.45,0.50,0.50,0.51 0.54,0.58,0.61,0.69), mean=0.486, stddev=0.0362], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.21,0.22 0.23,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0113] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00627529, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.61,-0.50,-0.32 -0.21,-0.10,9e-05,0.12,0.22 0.30,0.45,0.59,0.75), mean=0.00234, stddev=0.193], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.43,0.46,0.52 0.56,0.59,0.67,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.755, stddev=0.193] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627529, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.44 0.45,0.47,0.50,0.50,0.52 0.55,0.57,0.59,0.61), mean=0.491, stddev=0.0301], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0155] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00627529, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.58,-0.45,-0.29 -0.19,-0.09,1e-05,0.11,0.20 0.29,0.42,0.58,0.75), mean=0.00297, stddev=0.182], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.54,0.61,0.73 0.78,0.83,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.895, stddev=0.103] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=262200
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.014876
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000182913, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02806, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.30,0.31,0.34 0.35,0.38,0.52,0.83,0.88 0.92,0.96,0.97,1.0), mean=0.601, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0008,0.001,0.001 0.002,0.006,0.45,0.60,0.67 0.77,0.83,0.86,0.93), mean=0.357, stddev=0.278], bias-{mean,stddev}=0.002692,0.1074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000182913, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01113, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.19,0.20 0.22,0.24,0.28,0.36,0.41 0.46,0.50,0.52,0.56), mean=0.301, stddev=0.0767], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.12 0.14,0.15,0.22,0.33,0.36 0.38,0.40,0.42,0.47), mean=0.238, stddev=0.0891], bias-{mean,stddev}=0.007316,0.01439, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.98e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.02,0.03 0.04,0.05,0.08,0.10,0.11 0.12,0.13,0.13,0.14), mean=0.0753, stddev=0.0274], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.13,0.18 0.24,0.31,0.45,0.56,0.61 0.64,0.66,0.67,0.71), mean=0.437, stddev=0.137], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.08,0.09,0.10,0.13,0.15 0.17,0.18,0.20,0.24), mean=0.11, stddev=0.0268], oderiv-count=1.01069e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25256.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.03 0.04,0.05,0.07,0.10,0.11 0.12,0.13,0.13,0.16), mean=0.0742, stddev=0.028], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.05,0.08 0.10,0.11,0.13,0.15,0.16 0.17,0.18,0.18,0.23), mean=0.127, stddev=0.0266]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000182913, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008351, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.26 0.27,0.28,0.32,0.37,0.39 0.41,0.42,0.43,0.54), mean=0.327, stddev=0.0465], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.12,0.13 0.14,0.15,0.18,0.21,0.24 0.26,0.30,0.33,0.40), mean=0.186, stddev=0.043], bias-{mean,stddev}=-0.01207,0.0194, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.79e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.23,0.24,0.27,0.30,0.32 0.33,0.35,0.36,0.50), mean=0.273, stddev=0.0366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.36,0.38 0.38,0.40,0.42,0.45,0.46 0.47,0.49,0.49,0.53), mean=0.421, stddev=0.0298], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0282, stddev=0.00257], oderiv-count=967360
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23091.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.20,0.21 0.22,0.24,0.27,0.30,0.32 0.33,0.35,0.37,0.54), mean=0.27, stddev=0.0399], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.40,0.41,0.43 0.45,0.47,0.53,0.60,0.63 0.67,0.71,0.73,0.92), mean=0.537, stddev=0.0752]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000182913, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01911, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.17,0.25 0.31,0.35,0.42,0.60,0.73 0.77,0.81,0.84,1.5), mean=0.46, stddev=0.159], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.58,0.60 0.61,0.64,0.71,1.0,1.3 1.4,1.4,1.5,1.6), mean=0.828, stddev=0.271], bias-{mean,stddev}=0.01578,0.02267, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000182913, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03654, w_fc-rms=0.0468, w_oc-rms=0.06055, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633872, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.48,0.49,0.51 0.53,0.55,0.61,0.66,0.68 0.70,0.71,0.72,0.79), mean=0.609, stddev=0.057], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.17,0.18 0.19,0.20,0.20,0.21,0.21 0.21,0.22,0.22,0.22), mean=0.201, stddev=0.0101] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633872, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.47,0.49 0.51,0.54,0.58,0.62,0.68 0.71,0.74,0.74,0.86), mean=0.583, stddev=0.0648], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.17,0.17,0.18 0.19,0.20,0.20,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.204, stddev=0.0125] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00983914, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.79,-0.67,-0.47 -0.34,-0.21,-0.02,0.18,0.32 0.47,0.71,0.76,0.86), mean=-0.0107, stddev=0.285], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.25,0.27,0.31 0.37,0.40,0.44,0.47,0.49 0.50,0.51,0.52,0.54), mean=0.43, stddev=0.0546] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633872, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.55,0.56,0.58 0.59,0.61,0.66,0.69,0.72 0.74,0.76,0.78,0.92), mean=0.658, stddev=0.0504], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.13,0.15,0.16 0.17,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.182, stddev=0.0144] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0131098, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.83,-0.72,-0.48 -0.33,-0.19,-0.01,0.17,0.32 0.47,0.76,0.81,0.95), mean=-0.00974, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.22,0.27,0.34 0.43,0.54,0.63,0.67,0.69 0.71,0.72,0.73,0.74), mean=0.594, stddev=0.11] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222973
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.014876
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000182913, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07156, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.1,1.1 1.1,1.2,1.5,2.0,2.0 2.1,2.1,2.2,2.2), mean=1.59, stddev=0.371], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.47,0.78,0.92 0.98,1.0,1.1,1.3,1.3 1.4,1.4,1.5,1.6), mean=1.14, stddev=0.162], bias-{mean,stddev}=0.00837,0.2147, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000182913, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03937, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.50,0.51,0.53 0.55,0.57,0.62,0.67,0.71 0.74,0.79,0.83,2.2), mean=0.628, stddev=0.0926], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.3,1.4,1.8,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.77, stddev=0.373], bias-{mean,stddev}=4.632e-09,0.03434, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=554880
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/156.mdl exp/nnet3/tdnn_lstm1c_sp/157.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.21687 tdnn2.affine:7.26287 lstm1.W_all:5.92173 lstm1.lstm_nonlin:0.110241 lstm1.W_rp:2.42631 tdnn3.affine:4.63093 tdnn4.affine:5.21465 lstm2.W_all:3.99726 lstm2.lstm_nonlin:0.0479902 lstm2.W_rp:1.64638 tdnn5.affine:3.66504 tdnn6.affine:4.24344 lstm3.W_all:5.36178 lstm3.lstm_nonlin:0.132149 lstm3.W_rp:2.13309 output.affine:4.62745 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.7031 tdnn2.affine:10.7701 lstm1.W_all:19.0814 lstm1.lstm_nonlin:1.34445 lstm1.W_rp:11.5047 tdnn3.affine:7.80899 tdnn4.affine:8.0185 lstm2.W_all:15.2859 lstm2.lstm_nonlin:0.572196 lstm2.W_rp:10.4633 tdnn5.affine:7.09982 tdnn6.affine:7.53943 lstm3.W_all:22.2525 lstm3.lstm_nonlin:1.93391 lstm3.W_rp:26.5399 output.affine:29.1629 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.620287 tdnn2.affine:0.680379 lstm1.W_all:0.31026 lstm1.lstm_nonlin:0.0811766 lstm1.W_rp:0.210965 tdnn3.affine:0.596751 tdnn4.affine:0.652991 lstm2.W_all:0.261779 lstm2.lstm_nonlin:0.0825151 lstm2.W_rp:0.157911 tdnn5.affine:0.520212 tdnn6.affine:0.565481 lstm3.W_all:0.241391 lstm3.lstm_nonlin:0.0674277 lstm3.W_rp:0.0805532 output.affine:0.158539 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:03:08 KST 2020, elapsed time 0 seconds
