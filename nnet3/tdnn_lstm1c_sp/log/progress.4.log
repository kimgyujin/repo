# nnet3-info exp/nnet3/tdnn_lstm1c_sp/4.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/3.mdl exp/nnet3/tdnn_lstm1c_sp/4.mdl 
# Started at Thu Jul 30 10:02:46 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/4.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000297159, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02836, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.08 0.09,0.09,0.49,0.63,0.71 0.79,0.86,0.91,1.1), mean=0.421, stddev=0.253], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.16,0.17 0.18,0.20,0.52,0.75,0.95 1.4,1.5,1.5,1.6), mean=0.547, stddev=0.345], bias-{mean,stddev}=0.005801,0.1118, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.66e+05, self-repaired-proportion=0.40744, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,2e-07,0.08,0.15,0.18 0.23,0.28,0.30,0.39), mean=0.0844, stddev=0.0803], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,2e-05,0.50,0.82,0.90 0.95,0.97,0.99,1.0), mean=0.442, stddev=0.366], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.10 0.11,0.11,0.25,0.36,0.43 0.54,0.63,0.74,1.2), mean=0.263, stddev=0.15], oderiv-count=1.18643e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36033.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,3e-08,0.08,0.13,0.17 0.19,0.22,0.24,0.31), mean=0.0755, stddev=0.0682], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,1e-05,0.11,0.13,0.14 0.15,0.16,0.16,0.20), mean=0.0798, stddev=0.0597]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000297159, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01258, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.44,0.46,0.49,0.53,0.55 0.57,0.60,0.61,0.65), mean=0.495, stddev=0.0427], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.05,0.05,0.30,0.37,0.41 0.43,0.46,0.49,0.59), mean=0.247, stddev=0.145], bias-{mean,stddev}=-0.0008905,0.1137, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.11e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.18,0.20,0.23 0.26,0.29,0.35,0.40,0.44 0.47,0.49,0.50,0.56), mean=0.35, stddev=0.0702], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.31,0.32,0.34 0.37,0.41,0.48,0.55,0.58 0.61,0.63,0.64,0.69), mean=0.477, stddev=0.0784], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.05,0.07), mean=0.0386, stddev=0.00549], oderiv-count=1.0967e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35259.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.21,0.24 0.26,0.29,0.34,0.39,0.42 0.44,0.47,0.47,0.55), mean=0.342, stddev=0.0605], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.44,0.45,0.47 0.49,0.52,0.57,0.62,0.65 0.67,0.69,0.72,0.81), mean=0.567, stddev=0.061]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000297159, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02661, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.59,0.60 0.61,0.62,0.65,0.72,0.78 0.83,0.88,0.91,1.0), mean=0.675, stddev=0.0714], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.2,1.2,1.3,1.3 1.3,1.3,1.3,1.4), mean=1.21, stddev=0.0552], bias-{mean,stddev}=0.002505,0.607, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000297159, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.6325, w_fc-rms=0.6107, w_oc-rms=0.5997, count=1.43e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0080512, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.20,0.23,0.26 0.31,0.37,0.51,0.64,0.72 0.76,0.81,0.83,0.96), mean=0.511, stddev=0.153], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.11,0.13,0.15 0.17,0.18,0.21,0.22,0.23 0.23,0.23,0.23,0.24), mean=0.201, stddev=0.0271] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00806116, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.17,0.24 0.28,0.35,0.47,0.62,0.71 0.78,0.84,0.87,0.92), mean=0.488, stddev=0.161], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.10,0.13 0.16,0.18,0.21,0.23,0.23 0.23,0.23,0.23,0.24), mean=0.202, stddev=0.0324] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0177582, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.86,-0.82,-0.72 -0.60,-0.42,0.01,0.48,0.65 0.76,0.80,0.81,0.92), mean=0.0204, stddev=0.454], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.20,0.24,0.28 0.33,0.40,0.51,0.62,0.68 0.71,0.76,0.77,0.80), mean=0.509, stddev=0.131] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613993, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.18,0.22,0.25 0.31,0.37,0.49,0.61,0.68 0.75,0.80,0.82,0.90), mean=0.493, stddev=0.145], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.13,0.14 0.16,0.18,0.21,0.22,0.22 0.23,0.23,0.23,0.23), mean=0.2, stddev=0.0251] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0178121, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.85,-0.81,-0.62 -0.45,-0.29,0.01,0.35,0.50 0.63,0.74,0.81,0.91), mean=0.0147, stddev=0.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.20,0.23,0.33 0.49,0.62,0.78,0.88,0.92 0.94,0.96,0.97,0.98), mean=0.733, stddev=0.175] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=294669
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000297159, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03701, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.73,0.74,0.75 0.76,0.79,0.84,0.89,0.92 0.94,0.95,0.99,1.0), mean=0.842, stddev=0.0589], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.43,0.46 0.48,0.51,0.58,0.66,0.72 0.76,0.82,0.85,0.94), mean=0.59, stddev=0.0915], bias-{mean,stddev}=0.06046,0.6224, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000297159, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01611, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.13 0.27,0.35,0.43,0.53,0.59 0.64,0.71,0.74,0.82), mean=0.43, stddev=0.134], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.29 0.31,0.33,0.36,0.40,0.43 0.45,0.47,0.48,0.52), mean=0.364, stddev=0.0464], bias-{mean,stddev}=0.0006061,0.09052, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.64e+05, self-repaired-proportion=0.115363, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,3e-08,2e-06,0.0001 0.01,0.11,0.27,0.42,0.47 0.52,0.57,0.59,0.61), mean=0.265, stddev=0.162], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,7e-06,0.0002,0.003 0.05,0.23,0.46,0.73,0.80 0.84,0.87,0.88,0.91), mean=0.457, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.06,0.08 0.12,0.15,0.20,0.28), mean=0.0522, stddev=0.033], oderiv-count=1.14368e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32936.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,4e-08,6e-07,1e-05 0.03,0.11,0.25,0.39,0.45 0.48,0.51,0.54,0.59), mean=0.249, stddev=0.146], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-05,8e-05,0.0007 0.11,0.29,0.38,0.44,0.48 0.51,0.54,0.56,0.61), mean=0.348, stddev=0.137]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000297159, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01064, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.29,0.32 0.36,0.39,0.42,0.46,0.48 0.49,0.51,0.51,0.55), mean=0.417, stddev=0.0497], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.08 0.14,0.18,0.24,0.28,0.32 0.35,0.38,0.40,0.45), mean=0.231, stddev=0.0734], bias-{mean,stddev}=-0.01189,0.09954, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.07e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.19,0.22 0.25,0.28,0.34,0.40,0.43 0.46,0.49,0.50,0.55), mean=0.34, stddev=0.0724], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.28,0.31 0.35,0.38,0.44,0.50,0.54 0.56,0.60,0.61,0.63), mean=0.442, stddev=0.0748], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0267, stddev=0.0046], oderiv-count=1.02368e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30614.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.21,0.24 0.26,0.29,0.34,0.39,0.42 0.43,0.46,0.47,0.52), mean=0.34, stddev=0.0609], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.47,0.51 0.53,0.55,0.60,0.64,0.67 0.69,0.72,0.74,0.80), mean=0.6, stddev=0.057]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000297159, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02566, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.59,0.60 0.60,0.61,0.64,0.68,0.73 0.76,0.79,0.81,0.88), mean=0.652, stddev=0.0501], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.1,1.1,1.2,1.2,1.2 1.2,1.2,1.3,1.3), mean=1.17, stddev=0.0404], bias-{mean,stddev}=0.01969,0.6098, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000297159, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.6517, w_fc-rms=0.6246, w_oc-rms=0.6276, count=1.3e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00818413, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.24,0.28 0.31,0.38,0.51,0.66,0.72 0.78,0.83,0.87,0.94), mean=0.52, stddev=0.155], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.10,0.11,0.14 0.16,0.18,0.21,0.22,0.23 0.23,0.23,0.23,0.23), mean=0.2, stddev=0.0286] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0138364, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.22,0.28 0.33,0.37,0.48,0.63,0.72 0.81,0.88,0.90,0.97), mean=0.504, stddev=0.158], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.09,0.12 0.16,0.19,0.21,0.22,0.23 0.23,0.23,0.23,0.24), mean=0.202, stddev=0.0345] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0223187, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.94,-0.88,-0.81,-0.74 -0.60,-0.44,0.02,0.45,0.64 0.75,0.81,0.85,0.92), mean=0.0083, stddev=0.454], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.21,0.28 0.34,0.40,0.52,0.63,0.69 0.72,0.76,0.78,0.82), mean=0.516, stddev=0.132] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00810287, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.18,0.20,0.24 0.28,0.36,0.50,0.65,0.72 0.77,0.84,0.88,0.96), mean=0.505, stddev=0.163], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.08,0.11,0.14 0.16,0.18,0.21,0.22,0.22 0.23,0.23,0.23,0.24), mean=0.197, stddev=0.0305] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.033707, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.88,-0.84,-0.62 -0.48,-0.31,0.01,0.33,0.50 0.66,0.79,0.84,0.99), mean=0.00723, stddev=0.379], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.11,0.17,0.29 0.49,0.60,0.76,0.87,0.91 0.94,0.95,0.96,0.98), mean=0.722, stddev=0.186] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=259914
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000297159, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03549, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.68,0.70,0.71,0.73 0.74,0.76,0.80,0.85,0.87 0.90,0.92,0.94,0.96), mean=0.808, stddev=0.0517], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.43,0.45 0.46,0.49,0.55,0.64,0.70 0.74,0.79,0.83,0.93), mean=0.565, stddev=0.0918], bias-{mean,stddev}=-0.02267,0.6075, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000297159, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01474, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.15,0.27,0.41,0.50,0.55 0.60,0.64,0.67,0.78), mean=0.386, stddev=0.143], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.26 0.27,0.29,0.33,0.37,0.40 0.42,0.45,0.47,0.56), mean=0.333, stddev=0.0487], bias-{mean,stddev}=0.002371,0.08832, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.72e+05, self-repaired-proportion=0.170419, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,4e-07,8e-06 0.0004,0.07,0.29,0.45,0.52 0.56,0.59,0.62,0.69), mean=0.276, stddev=0.184], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,5e-05,0.0006 0.006,0.15,0.44,0.66,0.72 0.77,0.80,0.83,0.87), mean=0.414, stddev=0.248], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.07,0.10 0.15,0.20,0.22,0.30), mean=0.0531, stddev=0.042], oderiv-count=980864
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28291.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,3e-07,1e-06 4e-05,0.09,0.28,0.40,0.46 0.52,0.55,0.56,0.65), mean=0.258, stddev=0.164], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,4e-05,0.0002 0.001,0.25,0.44,0.50,0.53 0.56,0.59,0.62,0.69), mean=0.374, stddev=0.176]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000297159, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01056, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.29,0.32 0.36,0.39,0.42,0.45,0.47 0.48,0.50,0.52,0.58), mean=0.414, stddev=0.0461], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.09,0.16,0.23,0.29,0.33 0.36,0.40,0.42,0.70), mean=0.225, stddev=0.0868], bias-{mean,stddev}=0.004131,0.1044, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.19e+05, self-repaired-proportion=0.000324675, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.14,0.16,0.20 0.24,0.29,0.36,0.42,0.46 0.49,0.51,0.54,0.64), mean=0.354, stddev=0.0853], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.22,0.24,0.29 0.32,0.36,0.44,0.50,0.53 0.57,0.60,0.61,0.65), mean=0.432, stddev=0.0841], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.13), mean=0.0255, stddev=0.00559], oderiv-count=921600
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25969.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.17,0.20,0.22 0.26,0.29,0.36,0.41,0.44 0.46,0.49,0.51,0.57), mean=0.352, stddev=0.0727], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.42,0.45,0.51 0.55,0.58,0.63,0.67,0.70 0.72,0.74,0.76,0.91), mean=0.624, stddev=0.0669]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000297159, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02701, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.59,0.60 0.61,0.63,0.67,0.73,0.79 0.83,0.89,0.92,1.0), mean=0.685, stddev=0.072], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.2,1.2,1.3,1.3 1.3,1.4,1.4,1.5), mean=1.23, stddev=0.0523], bias-{mean,stddev}=-0.001015,0.6082, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000297159, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.5788, w_fc-rms=0.5972, w_oc-rms=0.6239, count=1.18e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625417, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.23,0.27,0.33 0.38,0.44,0.56,0.67,0.73 0.76,0.81,0.84,0.88), mean=0.553, stddev=0.134], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.12,0.14 0.16,0.17,0.19,0.21,0.21 0.22,0.23,0.23,0.23), mean=0.186, stddev=0.0238] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625417, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.22,0.24,0.29 0.34,0.42,0.55,0.67,0.74 0.80,0.88,0.88,0.91), mean=0.547, stddev=0.151], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.13 0.15,0.17,0.20,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.189, stddev=0.0293] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0191093, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.97,-0.88,-0.81,-0.73 -0.57,-0.34,0.03,0.33,0.54 0.69,0.79,0.83,0.86), mean=-0.00357, stddev=0.406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.21,0.23,0.27 0.31,0.36,0.46,0.54,0.59 0.62,0.66,0.68,0.73), mean=0.454, stddev=0.107] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625417, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.22,0.24,0.32 0.38,0.45,0.59,0.71,0.77 0.81,0.85,0.86,0.92), mean=0.579, stddev=0.148], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.13 0.14,0.16,0.18,0.19,0.20 0.21,0.21,0.22,0.22), mean=0.174, stddev=0.0248] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.019279, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.84,-0.80,-0.64 -0.44,-0.27,0.005,0.26,0.42 0.58,0.75,0.80,0.93), mean=-0.0034, stddev=0.343], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.20,0.23,0.32 0.44,0.54,0.67,0.77,0.85 0.88,0.91,0.93,0.95), mean=0.65, stddev=0.158] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221052
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000297159, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06035, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.2,1.3,1.4,1.5,1.5 1.5,1.6,1.7,1.7), mean=1.37, stddev=0.103], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.48,0.55 0.64,0.76,0.95,1.2,1.2 1.3,1.4,1.4,1.8), mean=0.947, stddev=0.223], bias-{mean,stddev}=0.05642,0.57, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000297159, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03904, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.44,0.46,0.49 0.51,0.54,0.61,0.69,0.74 0.80,0.88,0.96,2.0), mean=0.619, stddev=0.115], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.6,1.6,1.8,1.9,2.0 2.1,2.1,2.2,2.3), mean=1.78, stddev=0.172], bias-{mean,stddev}=1.077e-09,0.005576, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=593920
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/3.mdl exp/nnet3/tdnn_lstm1c_sp/4.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.95518 tdnn2.affine:9.70179 lstm1.W_all:9.52896 lstm1.lstm_nonlin:3.10127 lstm1.W_rp:4.81619 tdnn3.affine:7.5075 tdnn4.affine:7.87718 lstm2.W_all:7.73263 lstm2.lstm_nonlin:3.18329 lstm2.W_rp:3.79821 tdnn5.affine:6.23098 tdnn6.affine:7.33302 lstm3.W_all:8.59632 lstm3.lstm_nonlin:3.04369 lstm3.W_rp:3.64389 output.affine:7.65937 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.4874 tdnn2.affine:11.6202 lstm1.W_all:41.515 lstm1.lstm_nonlin:24.2687 lstm1.W_rp:16.9362 tdnn3.affine:10.4632 tdnn4.affine:9.85169 lstm2.W_all:40.7981 lstm2.lstm_nonlin:25.0714 lstm2.W_rp:16.3219 tdnn5.affine:9.60168 tdnn6.affine:9.80118 lstm3.W_all:41.8987 lstm3.lstm_nonlin:23.7065 lstm3.W_rp:24.036 output.affine:28.8774 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.755702 tdnn2.affine:0.789868 lstm1.W_all:0.207874 lstm1.lstm_nonlin:0.113343 lstm1.W_rp:0.267592 tdnn3.affine:0.65027 tdnn4.affine:0.739853 lstm2.W_all:0.170393 lstm2.lstm_nonlin:0.112683 lstm2.W_rp:0.217967 tdnn5.affine:0.593098 tdnn6.affine:0.696951 lstm3.W_all:0.186553 lstm3.lstm_nonlin:0.11386 lstm3.W_rp:0.150072 output.affine:0.277765 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:02:46 KST 2020, elapsed time 0 seconds
