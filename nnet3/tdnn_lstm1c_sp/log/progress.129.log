# nnet3-info exp/nnet3/tdnn_lstm1c_sp/129.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/128.mdl exp/nnet3/tdnn_lstm1c_sp/129.mdl 
# Started at Thu Jul 30 10:52:05 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/129.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.0001999, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02987, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.01,0.02 0.04,0.40,0.52,0.60,0.68 0.72,0.77,0.86,1.2), mean=0.472, stddev=0.213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.17,0.21,0.57,0.80,1.1 1.3,1.5,1.6,1.7), mean=0.579, stddev=0.359], bias-{mean,stddev}=0.004004,0.0588, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0.125885, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,2e-06,4e-06,3e-05 0.0002,0.009,0.06,0.09,0.10 0.12,0.14,0.15,0.23), mean=0.0591, stddev=0.0385], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.003,0.01 0.04,0.17,0.48,0.62,0.72 0.80,0.87,0.90,0.97), mean=0.44, stddev=0.238], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.08,0.27,0.36,0.46,0.51 0.58,0.67,0.73,1.5), mean=0.355, stddev=0.162], oderiv-count=1.16211e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=44624.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,9e-07,3e-06,1e-05 7e-05,0.01,0.06,0.09,0.11 0.12,0.14,0.15,0.19), mean=0.0588, stddev=0.0391], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,3e-05,7e-05,0.0002 0.0007,0.04,0.09,0.11,0.12 0.13,0.14,0.14,0.16), mean=0.0808, stddev=0.0424]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.0001999, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01217, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.40 0.42,0.44,0.47,0.51,0.55 0.57,0.60,0.63,0.71), mean=0.478, stddev=0.053], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.007,0.01 0.02,0.22,0.29,0.32,0.34 0.36,0.39,0.41,0.77), mean=0.254, stddev=0.111], bias-{mean,stddev}=-0.002816,0.02754, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.86e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.29,0.31,0.34,0.37,0.39 0.42,0.44,0.47,0.55), mean=0.341, stddev=0.0415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.41 0.42,0.43,0.46,0.49,0.50 0.51,0.52,0.52,0.55), mean=0.46, stddev=0.0295], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.06 0.06,0.06,0.07,0.08), mean=0.0435, stddev=0.00874], oderiv-count=1.17882e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=43703.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.28 0.29,0.30,0.34,0.37,0.39 0.41,0.44,0.46,0.52), mean=0.339, stddev=0.042], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.47,0.49 0.51,0.54,0.59,0.65,0.68 0.71,0.75,0.77,0.80), mean=0.594, stddev=0.0665]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.0001999, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01693, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.001,0.003,0.02 0.08,0.20,0.37,0.55,0.65 0.73,0.82,0.88,1.1), mean=0.378, stddev=0.208], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.37,0.41,0.45 0.51,0.66,0.79,0.86,0.91 0.95,1.0,1.1,1.2), mean=0.757, stddev=0.149], bias-{mean,stddev}=-0.002057,0.02185, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.0001999, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02134, w_fc-rms=0.03326, w_oc-rms=0.04837, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627583, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.42,0.43,0.44 0.45,0.46,0.49,0.52,0.56 0.59,0.65,0.67,0.72), mean=0.496, stddev=0.0486], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.20,0.21 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0147] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627583, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.38,0.40 0.42,0.44,0.48,0.52,0.58 0.66,0.74,0.81,0.86), mean=0.496, stddev=0.0792], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.18,0.20 0.21,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0194] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00885322, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.76,-0.71,-0.53 -0.36,-0.18,-0.01,0.18,0.31 0.56,0.73,0.78,0.83), mean=-0.0027, stddev=0.291], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.29,0.31,0.36 0.41,0.47,0.59,0.72,0.93 0.99,1.0,1.0,1.0), mean=0.616, stddev=0.177] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627583, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.44,0.47,0.51,0.52 0.55,0.58,0.59,0.63), mean=0.476, stddev=0.0408], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0172] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.018063, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.81,-0.68,-0.48 -0.32,-0.17,-0.01,0.15,0.28 0.52,0.74,0.84,0.89), mean=-0.00165, stddev=0.28], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.20,0.27,0.46 0.62,0.72,0.83,0.89,0.97 1.0,1.0,1.0,1.0), mean=0.796, stddev=0.156] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=294477
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.0001999, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0307, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.19 0.21,0.24,0.42,0.97,1.0 1.1,1.1,1.2,1.2), mean=0.601, stddev=0.359], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.03,0.06 0.15,0.31,0.46,0.59,0.67 0.78,0.92,0.98,1.2), mean=0.451, stddev=0.203], bias-{mean,stddev}=-0.001702,0.04282, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.0001999, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01243, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.18,0.21,0.23 0.25,0.27,0.33,0.41,0.43 0.48,0.50,0.52,0.76), mean=0.338, stddev=0.0792], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.09,0.18,0.40,0.44 0.47,0.51,0.53,0.60), mean=0.24, stddev=0.151], bias-{mean,stddev}=-0.003458,0.02914, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.37e+05, self-repaired-proportion=0.00625553, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.02,0.04,0.06 0.07,0.09,0.13,0.16,0.17 0.19,0.21,0.22,0.25), mean=0.124, stddev=0.0404], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.13,0.18,0.25 0.30,0.37,0.51,0.60,0.64 0.66,0.69,0.71,0.75), mean=0.486, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.07,0.07,0.08,0.10,0.11 0.12,0.13,0.14,0.26), mean=0.0859, stddev=0.0197], oderiv-count=1.13216e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40938.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.02,0.04,0.06 0.07,0.09,0.13,0.16,0.17 0.19,0.21,0.23,0.26), mean=0.124, stddev=0.0414], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.07,0.13,0.15 0.16,0.17,0.20,0.23,0.25 0.27,0.28,0.29,0.38), mean=0.199, stddev=0.0394]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.0001999, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009036, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.29,0.30 0.31,0.32,0.35,0.38,0.40 0.42,0.43,0.45,0.63), mean=0.355, stddev=0.0394], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.14,0.14,0.15 0.16,0.17,0.20,0.23,0.25 0.26,0.28,0.29,0.38), mean=0.203, stddev=0.0359], bias-{mean,stddev}=-0.009878,0.01744, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.22,0.23 0.24,0.25,0.28,0.32,0.34 0.36,0.38,0.39,0.46), mean=0.289, stddev=0.04], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.50,0.51,0.51,0.54), mean=0.442, stddev=0.0313], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0315, stddev=0.00268], oderiv-count=1.02618e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38173.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.23 0.24,0.25,0.28,0.32,0.34 0.36,0.37,0.39,0.47), mean=0.287, stddev=0.0412], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.44,0.46 0.48,0.50,0.54,0.60,0.64 0.66,0.71,0.76,0.94), mean=0.552, stddev=0.0666]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.0001999, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01334, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,7e-06,1e-05,3e-05 0.0001,0.002,0.28,0.47,0.56 0.61,0.65,0.68,1.1), mean=0.261, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.27,0.31 0.37,0.51,0.62,0.68,0.72 0.75,0.79,0.81,1.2), mean=0.594, stddev=0.13], bias-{mean,stddev}=-0.003649,0.02455, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.0001999, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01298, w_fc-rms=0.01679, w_oc-rms=0.02105, count=1.33e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633082, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.50,0.50,0.53 0.55,0.59,0.60,0.63), mean=0.495, stddev=0.0315], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0155] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633082, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.42 0.44,0.45,0.50,0.50,0.51 0.54,0.60,0.64,0.70), mean=0.485, stddev=0.0403], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0121] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00666922, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.63,-0.52,-0.33 -0.22,-0.10,0.0004,0.11,0.24 0.35,0.46,0.59,0.72), mean=0.00443, stddev=0.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.44,0.46,0.52 0.55,0.58,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.745, stddev=0.194] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633082, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.44 0.45,0.46,0.50,0.50,0.52 0.54,0.57,0.58,0.62), mean=0.488, stddev=0.0319], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0162] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00633082, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.64,-0.51,-0.32 -0.21,-0.10,0.0005,0.10,0.24 0.31,0.45,0.58,0.75), mean=0.00493, stddev=0.197], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.45,0.57,0.72 0.77,0.82,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.888, stddev=0.109] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=259719
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.0001999, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02809, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.33,0.35 0.36,0.39,0.53,0.83,0.88 0.92,0.95,0.96,0.97), mean=0.604, stddev=0.213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.002 0.004,0.01,0.45,0.60,0.66 0.75,0.82,0.87,0.98), mean=0.362, stddev=0.273], bias-{mean,stddev}=-0.006652,0.1024, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.0001999, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0114, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.17,0.21 0.22,0.24,0.29,0.36,0.42 0.48,0.52,0.53,0.62), mean=0.308, stddev=0.0808], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.14,0.16,0.23,0.34,0.37 0.38,0.41,0.43,0.50), mean=0.244, stddev=0.088], bias-{mean,stddev}=0.001565,0.01677, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.27e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.03 0.04,0.05,0.08,0.10,0.11 0.12,0.14,0.14,0.17), mean=0.0766, stddev=0.0295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.14,0.17 0.23,0.29,0.42,0.54,0.58 0.62,0.65,0.66,0.75), mean=0.416, stddev=0.134], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.08,0.09,0.11,0.13 0.14,0.16,0.17,0.23), mean=0.0992, stddev=0.0214], oderiv-count=1.0263e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35408.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.02,0.03 0.04,0.05,0.08,0.10,0.11 0.12,0.14,0.15,0.16), mean=0.0767, stddev=0.0293], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.10 0.11,0.12,0.14,0.16,0.17 0.18,0.20,0.20,0.22), mean=0.138, stddev=0.0287]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.0001999, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008597, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.28,0.29,0.33,0.38,0.40 0.42,0.43,0.44,0.52), mean=0.336, stddev=0.0473], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.13 0.14,0.16,0.19,0.22,0.24 0.27,0.31,0.33,0.39), mean=0.191, stddev=0.0435], bias-{mean,stddev}=-0.01093,0.01563, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.55e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.22 0.24,0.26,0.29,0.32,0.33 0.34,0.36,0.37,0.44), mean=0.284, stddev=0.0382], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.35,0.36 0.38,0.39,0.42,0.45,0.47 0.48,0.49,0.51,0.53), mean=0.42, stddev=0.0357], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0269, stddev=0.0028], oderiv-count=845440
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32643.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.23,0.25,0.29,0.31,0.33 0.34,0.37,0.39,0.46), mean=0.284, stddev=0.0399], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.44,0.46 0.48,0.50,0.56,0.62,0.67 0.71,0.75,0.80,0.88), mean=0.565, stddev=0.0763]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.0001999, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01948, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.24 0.31,0.36,0.43,0.63,0.75 0.79,0.84,0.86,1.4), mean=0.469, stddev=0.165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.58,0.60 0.62,0.64,0.72,1.0,1.4 1.4,1.5,1.5,1.6), mean=0.843, stddev=0.281], bias-{mean,stddev}=0.007195,0.02203, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.0001999, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0318, w_fc-rms=0.04485, w_oc-rms=0.06321, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639721, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.46,0.49 0.51,0.52,0.59,0.65,0.67 0.69,0.71,0.72,0.80), mean=0.586, stddev=0.0657], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.18 0.19,0.20,0.20,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.204, stddev=0.0103] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639721, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.49 0.50,0.54,0.59,0.64,0.68 0.71,0.74,0.77,0.88), mean=0.595, stddev=0.0684], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.16,0.17,0.18 0.19,0.19,0.20,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.202, stddev=0.0143] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0103728, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.83,-0.73,-0.51 -0.35,-0.22,-0.02,0.23,0.34 0.49,0.75,0.82,0.89), mean=-0.00884, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.25,0.27,0.31 0.35,0.38,0.43,0.47,0.49 0.50,0.52,0.52,0.55), mean=0.423, stddev=0.0577] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00830799, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.55,0.57 0.60,0.62,0.67,0.71,0.73 0.75,0.77,0.78,0.95), mean=0.666, stddev=0.0549], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.15,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.181, stddev=0.0159] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.031539, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.90,-0.78,-0.53 -0.35,-0.22,-0.01,0.21,0.34 0.49,0.78,0.89,0.99), mean=-0.00861, stddev=0.311], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.14,0.19,0.31 0.44,0.53,0.63,0.67,0.69 0.70,0.71,0.72,0.73), mean=0.59, stddev=0.119] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=220867
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.0001999, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07039, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.6,1.9,2.0 2.0,2.1,2.1,2.2), mean=1.57, stddev=0.341], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.54,0.79,0.89 0.95,1.0,1.1,1.2,1.3 1.4,1.4,1.4,1.6), mean=1.12, stddev=0.156], bias-{mean,stddev}=0.003694,0.08255, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.0001999, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03976, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.51,0.52,0.54 0.55,0.58,0.62,0.68,0.72 0.75,0.80,0.84,2.0), mean=0.635, stddev=0.0859], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.3 1.4,1.4,1.8,2.1,2.2 2.3,2.3,2.3,2.5), mean=1.79, stddev=0.348], bias-{mean,stddev}=6.105e-09,0.02232, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0138], oderiv-count=570880
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/128.mdl exp/nnet3/tdnn_lstm1c_sp/129.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.60104 tdnn2.affine:7.72203 lstm1.W_all:6.36084 lstm1.lstm_nonlin:0.119308 lstm1.W_rp:2.58017 tdnn3.affine:4.80267 tdnn4.affine:5.4541 lstm2.W_all:4.25235 lstm2.lstm_nonlin:0.0571663 lstm2.W_rp:1.75075 tdnn5.affine:3.85065 tdnn6.affine:4.51188 lstm3.W_all:5.84832 lstm3.lstm_nonlin:0.133609 lstm3.W_rp:2.30247 output.affine:5.08588 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.8722 tdnn2.affine:10.9832 lstm1.W_all:19.7092 lstm1.lstm_nonlin:1.42427 lstm1.W_rp:11.3081 tdnn3.affine:7.94451 tdnn4.affine:8.15096 lstm2.W_all:15.5499 lstm2.lstm_nonlin:0.681741 lstm2.W_rp:10.4588 tdnn5.affine:7.2673 tdnn6.affine:7.75553 lstm3.W_all:22.6769 lstm3.lstm_nonlin:1.91035 lstm3.W_rp:25.9162 output.affine:29.422 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.630797 tdnn2.affine:0.695657 lstm1.W_all:0.321773 lstm1.lstm_nonlin:0.0835975 lstm1.W_rp:0.228241 tdnn3.affine:0.601238 tdnn4.affine:0.662442 lstm2.W_all:0.27261 lstm2.lstm_nonlin:0.0830798 lstm2.W_rp:0.167098 tdnn5.affine:0.525944 tdnn6.affine:0.577258 lstm3.W_all:0.256828 lstm3.lstm_nonlin:0.070093 lstm3.W_rp:0.0886789 output.affine:0.172631 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:52:05 KST 2020, elapsed time 0 seconds
