# nnet3-info exp/nnet3/tdnn_lstm1c_sp/282.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/281.mdl exp/nnet3/tdnn_lstm1c_sp/282.mdl 
# Started at Thu Jul 30 11:52:41 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/282.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00021746, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03303, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.01 0.02,0.04,0.58,0.72,0.79 0.90,0.96,1.0,1.2), mean=0.487, stddev=0.3], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.22,0.64,0.91,1.3 1.4,1.6,1.6,1.7), mean=0.642, stddev=0.394], bias-{mean,stddev}=0.001391,0.06121, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.13e+06, self-repaired-proportion=0.226101, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,6e-06,2e-05,5e-05 8e-05,0.0003,0.06,0.10,0.12 0.13,0.14,0.17,0.22), mean=0.056, stddev=0.0464], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.004,0.007,0.02 0.03,0.06,0.42,0.61,0.71 0.81,0.86,0.92,0.99), mean=0.38, stddev=0.263], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.03,0.07,0.26,0.36,0.41 0.49,0.62,0.68,1.3), mean=0.255, stddev=0.16], oderiv-count=1.23942e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37048.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,6e-06,9e-06,2e-05 6e-05,0.0003,0.06,0.10,0.12 0.13,0.15,0.17,0.23), mean=0.0558, stddev=0.0465], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.0001,0.0001,0.0003 0.0006,0.002,0.10,0.12,0.14 0.15,0.15,0.15,0.17), mean=0.0777, stddev=0.0536]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00021746, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01233, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.37,0.39 0.40,0.43,0.47,0.54,0.57 0.61,0.65,0.65,0.75), mean=0.482, stddev=0.0675], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.008 0.01,0.03,0.29,0.35,0.38 0.41,0.45,0.54,0.77), mean=0.241, stddev=0.145], bias-{mean,stddev}=-0.02394,0.04026, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.25 0.26,0.28,0.31,0.34,0.37 0.40,0.42,0.46,0.52), mean=0.315, stddev=0.0453], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.37,0.39 0.40,0.42,0.45,0.47,0.49 0.51,0.52,0.53,0.55), mean=0.447, stddev=0.0352], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0408, stddev=0.00732], oderiv-count=1.11286e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36267.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.26 0.27,0.28,0.32,0.35,0.38 0.41,0.44,0.48,0.54), mean=0.321, stddev=0.0475], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.46,0.49 0.50,0.52,0.57,0.63,0.66 0.70,0.73,0.74,0.82), mean=0.578, stddev=0.0643]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00021746, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01835, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,7e-06,4e-05 0.001,0.17,0.43,0.62,0.70 0.76,0.82,0.88,1.1), mean=0.4, stddev=0.242], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.42,0.46 0.55,0.73,0.84,0.93,1.0 1.1,1.1,1.2,1.3), mean=0.82, stddev=0.167], bias-{mean,stddev}=0.002526,0.02783, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00021746, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06222, w_fc-rms=0.03102, w_oc-rms=0.04471, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629479, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.70,0.79,0.80,0.85), mean=0.494, stddev=0.0785], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0234] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629479, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.44,0.45,0.46 0.47,0.49,0.50,0.53,0.58 0.65,0.76,0.79,0.85), mean=0.519, stddev=0.0641], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0224] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0301937, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.89,-0.85,-0.53 -0.28,-0.13,0.0007,0.16,0.32 0.54,0.85,0.88,0.91), mean=0.0152, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.20,0.24 0.36,0.43,0.56,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.596, stddev=0.222] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629479, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.42,0.45,0.50,0.50 0.50,0.54,0.57,0.72), mean=0.457, stddev=0.0407], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.218, stddev=0.0213] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00629479, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.71,-0.64,-0.33 -0.17,-0.07,0.0005,0.10,0.22 0.34,0.65,0.71,0.76), mean=0.0109, stddev=0.215], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.41,0.44,0.56 0.76,0.83,0.89,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.869, stddev=0.122] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=4.76892e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000105494, count-zeroing-boundaries=298594
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.240771
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00021746, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04075, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.36,0.37 0.42,0.48,0.88,1.2,1.3 1.4,1.4,1.4,1.5), mean=0.858, stddev=0.358], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.001,0.003 0.01,0.32,0.54,0.75,0.91 1.2,1.6,1.7,2.0), mean=0.552, stddev=0.357], bias-{mean,stddev}=0.01286,0.2762, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00021746, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01352, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.21,0.22,0.25 0.27,0.30,0.36,0.44,0.47 0.51,0.54,0.58,0.65), mean=0.368, stddev=0.083], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.14,0.16,0.29,0.41,0.43 0.45,0.47,0.49,0.52), mean=0.283, stddev=0.121], bias-{mean,stddev}=0.002837,0.01238, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.2e+05, self-repaired-proportion=0.00669331, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.03,0.04 0.05,0.07,0.10,0.12,0.14 0.15,0.17,0.18,0.22), mean=0.0972, stddev=0.0336], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.13,0.18,0.22 0.29,0.39,0.51,0.61,0.65 0.68,0.71,0.72,0.81), mean=0.492, stddev=0.136], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.08,0.08 0.09,0.09,0.11,0.13,0.14 0.17,0.21,0.23,0.28), mean=0.113, stddev=0.0301], oderiv-count=1.05075e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33925.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.03,0.04 0.06,0.07,0.10,0.12,0.14 0.15,0.18,0.18,0.22), mean=0.0979, stddev=0.0337], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.09,0.10,0.11 0.12,0.13,0.15,0.17,0.19 0.20,0.21,0.22,0.27), mean=0.153, stddev=0.0283]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00021746, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009199, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.30 0.31,0.32,0.35,0.39,0.43 0.45,0.48,0.49,0.56), mean=0.36, stddev=0.0461], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.13,0.13,0.14 0.15,0.17,0.20,0.24,0.26 0.29,0.31,0.33,0.39), mean=0.205, stddev=0.046], bias-{mean,stddev}=-0.0227,0.01943, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.96e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.24,0.26,0.29,0.32,0.33 0.35,0.36,0.37,0.46), mean=0.287, stddev=0.0358], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.38,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.49,0.52), mean=0.434, stddev=0.0281], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0338, stddev=0.00289], oderiv-count=1.09923e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31583.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.23,0.24 0.25,0.26,0.29,0.32,0.34 0.36,0.37,0.38,0.47), mean=0.294, stddev=0.0368], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.45,0.46,0.48 0.49,0.51,0.55,0.61,0.64 0.68,0.73,0.80,1.0), mean=0.562, stddev=0.0689]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00021746, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0152, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,1e-06,2e-06,5e-06 2e-05,0.0005,0.35,0.55,0.61 0.66,0.71,0.74,0.93), mean=0.298, stddev=0.248], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.35,0.39 0.49,0.62,0.69,0.76,0.80 0.87,0.96,1.0,1.4), mean=0.68, stddev=0.133], bias-{mean,stddev}=0.004658,0.03698, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00021746, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03629, w_fc-rms=0.01539, w_oc-rms=0.03601, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634696, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.45 0.46,0.47,0.50,0.52,0.57 0.61,0.68,0.72,0.80), mean=0.505, stddev=0.0531], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0183] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634696, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.46 0.47,0.49,0.50,0.53,0.56 0.60,0.65,0.67,0.74), mean=0.513, stddev=0.0429], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.18,0.19 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0189] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00658681, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.81,-0.71,-0.50 -0.28,-0.13,0.0009,0.16,0.32 0.56,0.72,0.77,0.86), mean=0.0116, stddev=0.277], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.28,0.39 0.46,0.51,0.62,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.707, stddev=0.232] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634696, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.44 0.45,0.46,0.50,0.50,0.52 0.54,0.57,0.58,0.66), mean=0.489, stddev=0.0312], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0196] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00634696, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.70,-0.57,-0.44,-0.31 -0.17,-0.08,0.0005,0.09,0.22 0.37,0.48,0.54,0.62), mean=0.00887, stddev=0.184], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.56,0.61,0.72 0.77,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.905, stddev=0.0986] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.75e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.86445e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.27793e-05, count-zeroing-boundaries=263397
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.240771
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00021746, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03959, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.45,0.49,0.54 0.57,0.60,0.88,1.1,1.2 1.2,1.3,1.3,1.4), mean=0.866, stddev=0.256], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0008,0.001,0.001 0.003,0.009,0.58,0.83,0.97 1.1,1.3,1.5,1.6), mean=0.495, stddev=0.403], bias-{mean,stddev}=0.001877,0.2209, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00021746, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01299, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.26 0.28,0.30,0.35,0.41,0.45 0.49,0.54,0.55,0.62), mean=0.356, stddev=0.0699], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.38,0.41 0.43,0.45,0.46,0.51), mean=0.281, stddev=0.0933], bias-{mean,stddev}=0.0009117,0.006533, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.48e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.05,0.08,0.11,0.12 0.13,0.14,0.15,0.17), mean=0.0802, stddev=0.0308], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.16,0.22 0.26,0.34,0.50,0.60,0.64 0.66,0.70,0.71,0.75), mean=0.475, stddev=0.14], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.09 0.10,0.10,0.11,0.14,0.16 0.17,0.19,0.19,0.21), mean=0.119, stddev=0.0244], oderiv-count=992128
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29241.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.08,0.11,0.12 0.13,0.14,0.16,0.19), mean=0.0824, stddev=0.0314], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.10,0.11,0.13,0.15,0.16 0.17,0.18,0.18,0.20), mean=0.13, stddev=0.0236]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00021746, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009066, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.20,0.25 0.28,0.31,0.35,0.41,0.43 0.45,0.47,0.48,0.53), mean=0.353, stddev=0.0612], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.14 0.15,0.16,0.19,0.24,0.27 0.30,0.33,0.35,0.43), mean=0.201, stddev=0.0488], bias-{mean,stddev}=-0.01947,0.02487, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.81e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.19,0.22 0.24,0.27,0.30,0.33,0.35 0.36,0.38,0.39,0.47), mean=0.299, stddev=0.0437], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.36,0.38 0.39,0.40,0.43,0.45,0.46 0.47,0.49,0.49,0.54), mean=0.424, stddev=0.0297], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0277, stddev=0.00234], oderiv-count=929120
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26899.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.19,0.23 0.25,0.27,0.31,0.34,0.35 0.37,0.39,0.41,0.49), mean=0.306, stddev=0.0453], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.30,0.35,0.41 0.48,0.53,0.60,0.66,0.69 0.74,0.79,0.81,0.99), mean=0.594, stddev=0.095]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00021746, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02175, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.30,0.32 0.34,0.38,0.52,0.67,0.76 0.80,0.85,0.89,1.2), mean=0.533, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.67,0.69,0.75 0.78,0.82,0.89,1.1,1.3 1.4,1.6,1.8,2.0), mean=0.968, stddev=0.218], bias-{mean,stddev}=0.01751,0.02267, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00021746, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1025, w_fc-rms=0.04908, w_oc-rms=0.06935, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640989, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.57,0.60 0.63,0.66,0.72,0.76,0.79 0.81,0.84,0.85,0.88), mean=0.713, stddev=0.0625], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.14,0.15,0.17,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.17, stddev=0.0229] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640989, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.51,0.55,0.58 0.60,0.63,0.69,0.74,0.78 0.81,0.85,0.86,0.88), mean=0.689, stddev=0.071], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.172, stddev=0.0233] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0359224, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.87,-0.81,-0.61 -0.45,-0.32,-0.009,0.32,0.44 0.58,0.73,0.84,0.92), mean=-0.00859, stddev=0.362], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.19,0.23 0.29,0.36,0.44,0.50,0.52 0.53,0.55,0.57,0.59), mean=0.423, stddev=0.0889] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640989, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.50,0.54 0.57,0.59,0.64,0.68,0.70 0.73,0.76,0.78,0.86), mean=0.635, stddev=0.0581], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.15,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.178, stddev=0.0176] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00640989, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.73,-0.69,-0.50 -0.38,-0.26,-0.007,0.25,0.34 0.45,0.62,0.70,0.79), mean=-0.00829, stddev=0.297], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.39,0.44 0.51,0.60,0.68,0.72,0.75 0.77,0.79,0.79,0.82), mean=0.654, stddev=0.0941] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.23167e-06, count-zeroing-boundaries=224047
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.240771
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00021746, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08842, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.5,2.6 2.7,2.8,2.9,3.0), mean=1.93, stddev=0.598], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.99,1.0,1.1 1.1,1.2,1.3,1.6,1.8 2.0,2.1,2.2,2.3), mean=1.4, stddev=0.27], bias-{mean,stddev}=-0.0174,0.5908, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00021746, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04422, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.60,0.61,0.62 0.64,0.66,0.70,0.74,0.78 0.81,0.86,0.91,2.2), mean=0.708, stddev=0.0859], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.7,2.8,2.8,2.9), mean=1.95, stddev=0.565], bias-{mean,stddev}=6.813e-09,0.0279, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0135], oderiv-count=595520
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/281.mdl exp/nnet3/tdnn_lstm1c_sp/282.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.6517 tdnn2.affine:4.59242 lstm1.W_all:3.6682 lstm1.lstm_nonlin:0.0833273 lstm1.W_rp:1.47509 tdnn3.affine:3.2195 tdnn4.affine:3.53416 lstm2.W_all:2.6476 lstm2.lstm_nonlin:0.0443524 lstm2.W_rp:1.043 tdnn5.affine:2.69943 tdnn6.affine:2.93476 lstm3.W_all:2.90212 lstm3.lstm_nonlin:0.0767543 lstm3.W_rp:1.22535 output.affine:3.08096 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.1213 tdnn2.affine:11.1607 lstm1.W_all:21.3733 lstm1.lstm_nonlin:1.88494 lstm1.W_rp:15.6316 tdnn3.affine:8.61331 tdnn4.affine:8.31349 lstm2.W_all:17.7498 lstm2.lstm_nonlin:1.21742 lstm2.W_rp:14.9875 tdnn5.affine:8.27509 tdnn6.affine:8.19689 lstm3.W_all:25.3199 lstm3.lstm_nonlin:3.03564 lstm3.W_rp:33.8793 output.affine:32.7336 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.352447 tdnn2.affine:0.410737 lstm1.W_all:0.171388 lstm1.lstm_nonlin:0.0443782 lstm1.W_rp:0.0944548 tdnn3.affine:0.375826 tdnn4.affine:0.42559 lstm2.W_all:0.149018 lstm2.lstm_nonlin:0.0368644 lstm2.W_rp:0.0695421 tdnn5.affine:0.326531 tdnn6.affine:0.35787 lstm3.W_all:0.114395 lstm3.lstm_nonlin:0.0253236 lstm3.W_rp:0.0362708 output.affine:0.0941384 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:52:42 KST 2020, elapsed time 1 seconds
