# nnet3-info exp/nnet3/tdnn_lstm1c_sp/272.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/271.mdl exp/nnet3/tdnn_lstm1c_sp/272.mdl 
# Started at Thu Jul 30 11:48:40 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/272.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000231701, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03389, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.01 0.02,0.06,0.59,0.74,0.81 0.92,0.99,1.0,1.3), mean=0.503, stddev=0.302], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.18,0.22,0.64,0.94,1.3 1.5,1.6,1.7,1.7), mean=0.657, stddev=0.407], bias-{mean,stddev}=0.000239,0.06381, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.14e+06, self-repaired-proportion=0.208282, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,5e-06,8e-06,4e-05 8e-05,0.0004,0.06,0.10,0.12 0.13,0.15,0.17,0.24), mean=0.0588, stddev=0.0475], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.003,0.005,0.01 0.02,0.06,0.44,0.61,0.71 0.81,0.87,0.90,0.99), mean=0.383, stddev=0.26], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.02,0.02 0.03,0.10,0.27,0.35,0.41 0.51,0.62,0.64,1.3), mean=0.258, stddev=0.157], oderiv-count=1.1264e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40287.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,6e-06,1e-05 7e-05,0.0004,0.06,0.10,0.12 0.13,0.16,0.17,0.23), mean=0.0581, stddev=0.0475], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,9e-05,0.0001,0.0002 0.0006,0.003,0.10,0.13,0.14 0.15,0.16,0.17,0.18), mean=0.0815, stddev=0.0547]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000231701, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0127, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.39,0.40 0.42,0.44,0.49,0.55,0.59 0.63,0.67,0.70,0.75), mean=0.497, stddev=0.0684], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.007,0.009 0.01,0.04,0.30,0.36,0.39 0.42,0.46,0.50,0.77), mean=0.25, stddev=0.146], bias-{mean,stddev}=-0.02298,0.03988, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.27 0.28,0.29,0.32,0.36,0.39 0.41,0.44,0.46,0.52), mean=0.331, stddev=0.0453], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.36,0.38,0.39 0.41,0.42,0.45,0.48,0.49 0.51,0.52,0.53,0.54), mean=0.448, stddev=0.0342], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0396, stddev=0.00709], oderiv-count=1.12298e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39439.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.27 0.28,0.30,0.33,0.37,0.39 0.43,0.45,0.47,0.52), mean=0.336, stddev=0.0464], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.47,0.49,0.51 0.52,0.55,0.60,0.66,0.69 0.73,0.76,0.78,0.83), mean=0.604, stddev=0.0664]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000231701, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01857, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,9e-06,5e-05 0.001,0.17,0.42,0.63,0.72 0.78,0.83,0.88,1.1), mean=0.405, stddev=0.246], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.40,0.42,0.47 0.56,0.74,0.85,0.94,1.0 1.1,1.1,1.2,1.3), mean=0.83, stddev=0.169], bias-{mean,stddev}=0.001796,0.02761, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000231701, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05662, w_fc-rms=0.02942, w_oc-rms=0.04331, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631305, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.41,0.43 0.44,0.45,0.47,0.50,0.54 0.68,0.79,0.81,0.85), mean=0.492, stddev=0.0781], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.18 0.19,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0234] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631305, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.43,0.44,0.45 0.47,0.48,0.50,0.53,0.58 0.64,0.77,0.78,0.84), mean=0.513, stddev=0.0636], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.15,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0216] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.038955, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.90,-0.85,-0.53 -0.28,-0.14,0.0006,0.17,0.32 0.55,0.85,0.88,0.91), mean=0.0147, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.19,0.25 0.36,0.42,0.55,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.592, stddev=0.223] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631305, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.41,0.42,0.45,0.50,0.50 0.50,0.54,0.57,0.68), mean=0.454, stddev=0.0411], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.217, stddev=0.0218] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00631305, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.73,-0.66,-0.36 -0.17,-0.08,0.0006,0.11,0.21 0.36,0.67,0.73,0.78), mean=0.0108, stddev=0.222], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.40,0.55 0.75,0.82,0.89,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.862, stddev=0.128] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.52652e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.72202e-05, count-zeroing-boundaries=297529
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.213223
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000231701, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0409, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.33,0.37 0.40,0.47,0.88,1.2,1.3 1.4,1.4,1.5,1.5), mean=0.856, stddev=0.371], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.002,0.004 0.01,0.31,0.55,0.75,0.90 1.2,1.5,1.7,2.0), mean=0.554, stddev=0.358], bias-{mean,stddev}=0.01284,0.2785, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000231701, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0136, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.21,0.22,0.24 0.27,0.30,0.37,0.44,0.49 0.52,0.55,0.57,0.69), mean=0.37, stddev=0.086], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.13,0.15,0.30,0.41,0.44 0.46,0.48,0.50,0.53), mean=0.284, stddev=0.126], bias-{mean,stddev}=0.00341,0.01288, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.36e+05, self-repaired-proportion=0.00384615, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.04,0.05 0.06,0.08,0.11,0.13,0.15 0.17,0.19,0.19,0.23), mean=0.108, stddev=0.0355], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.13,0.19,0.23 0.30,0.38,0.50,0.60,0.64 0.68,0.70,0.72,0.81), mean=0.489, stddev=0.134], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.07,0.08 0.08,0.08,0.09,0.11,0.13 0.15,0.17,0.19,0.26), mean=0.102, stddev=0.026], oderiv-count=1.06138e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36895.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.04,0.05 0.06,0.08,0.11,0.13,0.15 0.17,0.18,0.19,0.24), mean=0.108, stddev=0.0354], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.10,0.11,0.13 0.14,0.15,0.17,0.19,0.21 0.22,0.23,0.24,0.28), mean=0.169, stddev=0.0306]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000231701, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009434, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.31 0.32,0.33,0.36,0.40,0.43 0.46,0.49,0.49,0.58), mean=0.37, stddev=0.0472], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.13,0.14,0.15 0.16,0.17,0.20,0.25,0.27 0.29,0.32,0.34,0.39), mean=0.21, stddev=0.0463], bias-{mean,stddev}=-0.02306,0.01994, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.83e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.25,0.27,0.30,0.33,0.35 0.36,0.38,0.39,0.50), mean=0.301, stddev=0.0375], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.37,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.49,0.51), mean=0.434, stddev=0.0286], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0323, stddev=0.00265], oderiv-count=1.06186e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34352.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.25 0.26,0.28,0.31,0.34,0.36 0.37,0.39,0.40,0.54), mean=0.31, stddev=0.0393], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.49,0.50 0.51,0.53,0.58,0.64,0.68 0.72,0.75,0.80,1.1), mean=0.591, stddev=0.0719]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000231701, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01534, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,1e-06,2e-06,4e-06 2e-05,0.0004,0.35,0.55,0.62 0.67,0.71,0.75,0.95), mean=0.3, stddev=0.251], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.33,0.35,0.40 0.50,0.63,0.70,0.77,0.81 0.88,0.95,1.0,1.4), mean=0.686, stddev=0.134], bias-{mean,stddev}=0.003419,0.03936, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000231701, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03112, w_fc-rms=0.01434, w_oc-rms=0.03378, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636614, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.43,0.44 0.45,0.46,0.50,0.52,0.57 0.61,0.67,0.71,0.80), mean=0.503, stddev=0.0543], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0184] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636614, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.43,0.45 0.46,0.48,0.50,0.52,0.55 0.59,0.63,0.65,0.74), mean=0.505, stddev=0.0424], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0181] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00756802, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.81,-0.70,-0.47 -0.29,-0.13,9e-05,0.15,0.32 0.54,0.73,0.78,0.87), mean=0.0114, stddev=0.277], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.29,0.38 0.45,0.51,0.61,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.704, stddev=0.234] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636614, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.50,0.50,0.52 0.54,0.56,0.58,0.69), mean=0.486, stddev=0.0346], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.02] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00636614, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.72,-0.57,-0.43,-0.32 -0.18,-0.08,0.0002,0.10,0.21 0.39,0.50,0.55,0.65), mean=0.00949, stddev=0.188], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.55,0.59,0.70 0.76,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.9, stddev=0.103] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=8.62466e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.47676e-05, count-zeroing-boundaries=262440
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.213223
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000231701, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03963, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.45,0.48,0.53 0.56,0.59,0.87,1.1,1.2 1.2,1.3,1.3,1.4), mean=0.866, stddev=0.259], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0007,0.0009,0.001 0.002,0.008,0.58,0.83,0.98 1.1,1.3,1.5,1.6), mean=0.495, stddev=0.404], bias-{mean,stddev}=0.0009986,0.219, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000231701, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0131, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.24,0.26 0.28,0.30,0.34,0.41,0.46 0.50,0.54,0.56,0.61), mean=0.359, stddev=0.0723], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.39,0.42 0.44,0.45,0.46,0.53), mean=0.283, stddev=0.0955], bias-{mean,stddev}=0.001082,0.006684, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.05,0.06,0.09,0.11,0.12 0.13,0.15,0.16,0.19), mean=0.0865, stddev=0.0312], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.18,0.23 0.27,0.34,0.49,0.58,0.62 0.65,0.68,0.69,0.71), mean=0.467, stddev=0.131], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.12,0.13 0.15,0.17,0.17,0.20), mean=0.108, stddev=0.0209], oderiv-count=1.00672e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31808.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.05,0.06,0.09,0.12,0.13 0.14,0.15,0.16,0.19), mean=0.0897, stddev=0.0318], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.10 0.11,0.12,0.15,0.17,0.18 0.19,0.20,0.20,0.22), mean=0.145, stddev=0.026]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000231701, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00934, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.21,0.26 0.29,0.31,0.36,0.42,0.44 0.46,0.48,0.50,0.53), mean=0.364, stddev=0.0616], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.16,0.17,0.20,0.24,0.28 0.31,0.34,0.36,0.46), mean=0.207, stddev=0.0504], bias-{mean,stddev}=-0.02042,0.02486, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.91e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.21,0.24 0.26,0.28,0.31,0.34,0.36 0.38,0.39,0.41,0.50), mean=0.312, stddev=0.043], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.36,0.38 0.38,0.40,0.42,0.44,0.46 0.47,0.48,0.49,0.53), mean=0.422, stddev=0.0286], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0267, stddev=0.00214], oderiv-count=983040
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29264.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.22,0.24 0.26,0.29,0.32,0.36,0.37 0.39,0.41,0.42,0.54), mean=0.322, stddev=0.0457], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.35,0.39,0.46 0.51,0.56,0.64,0.70,0.74 0.78,0.82,0.83,1.0), mean=0.629, stddev=0.0963]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000231701, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02205, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.30,0.32 0.34,0.39,0.52,0.69,0.78 0.82,0.86,0.89,1.3), mean=0.54, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.66,0.69,0.75 0.78,0.82,0.89,1.1,1.3 1.4,1.7,1.8,2.2), mean=0.977, stddev=0.236], bias-{mean,stddev}=0.01891,0.02415, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000231701, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.09716, w_fc-rms=0.05019, w_oc-rms=0.0648, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064302, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.56,0.56,0.60 0.62,0.65,0.70,0.75,0.78 0.80,0.82,0.83,0.87), mean=0.702, stddev=0.0618], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.15,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.21), mean=0.173, stddev=0.0217] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064302, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.53,0.56 0.59,0.62,0.67,0.72,0.77 0.80,0.84,0.85,0.88), mean=0.674, stddev=0.0705], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.13 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.176, stddev=0.0223] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.026301, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.84,-0.78,-0.64 -0.43,-0.30,-0.004,0.30,0.41 0.55,0.71,0.83,0.89), mean=-0.00801, stddev=0.351], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.20,0.24 0.29,0.36,0.43,0.48,0.50 0.52,0.54,0.55,0.59), mean=0.415, stddev=0.0816] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064302, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.49,0.51,0.54 0.57,0.59,0.63,0.67,0.69 0.72,0.74,0.77,0.83), mean=0.627, stddev=0.0532], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.15,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.18, stddev=0.0166] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0064302, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.72,-0.68,-0.52 -0.36,-0.25,-0.008,0.24,0.33 0.47,0.62,0.72,0.81), mean=-0.0085, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.38,0.42 0.50,0.59,0.66,0.71,0.73 0.76,0.77,0.78,0.80), mean=0.642, stddev=0.0936] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223218
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.213223
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000231701, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08642, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.3,1.7,2.5,2.6 2.6,2.7,2.8,2.9), mean=1.88, stddev=0.579], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.97,1.0,1.1 1.1,1.2,1.3,1.5,1.8 1.9,2.0,2.1,2.2), mean=1.37, stddev=0.255], bias-{mean,stddev}=-0.0263,0.5357, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000231701, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04415, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.59,0.60,0.62 0.64,0.66,0.70,0.74,0.78 0.81,0.87,0.91,2.3), mean=0.706, stddev=0.088], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.7,2.7,2.8,2.9), mean=1.95, stddev=0.555], bias-{mean,stddev}=7.621e-09,0.02936, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=631360
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/271.mdl exp/nnet3/tdnn_lstm1c_sp/272.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.95112 tdnn2.affine:4.89735 lstm1.W_all:3.89699 lstm1.lstm_nonlin:0.092941 lstm1.W_rp:1.57247 tdnn3.affine:3.32801 tdnn4.affine:3.69025 lstm2.W_all:2.78861 lstm2.lstm_nonlin:0.0483302 lstm2.W_rp:1.12832 tdnn5.affine:2.7747 tdnn6.affine:3.09914 lstm3.W_all:3.22335 lstm3.lstm_nonlin:0.0851426 lstm3.W_rp:1.38727 output.affine:3.31858 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.4637 tdnn2.affine:11.4891 lstm1.W_all:21.6304 lstm1.lstm_nonlin:1.75843 lstm1.W_rp:15.6945 tdnn3.affine:8.66724 tdnn4.affine:8.52556 lstm2.W_all:17.9237 lstm2.lstm_nonlin:1.09726 lstm2.W_rp:14.9942 tdnn5.affine:8.34359 tdnn6.affine:8.44397 lstm3.W_all:25.6718 lstm3.lstm_nonlin:2.89855 lstm3.W_rp:32.9305 output.affine:32.6831 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.367712 tdnn2.affine:0.425709 lstm1.W_all:0.180119 lstm1.lstm_nonlin:0.0534147 lstm1.W_rp:0.100297 tdnn3.affine:0.38507 tdnn4.affine:0.432583 lstm2.W_all:0.155612 lstm2.lstm_nonlin:0.0447417 lstm2.W_rp:0.0753614 tdnn5.affine:0.331977 tdnn6.affine:0.367364 lstm3.W_all:0.125471 lstm3.lstm_nonlin:0.0295189 lstm3.W_rp:0.0422246 output.affine:0.101547 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:48:40 KST 2020, elapsed time 0 seconds
