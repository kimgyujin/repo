# nnet3-info exp/nnet3/tdnn_lstm1c_sp/322.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/321.mdl exp/nnet3/tdnn_lstm1c_sp/322.mdl 
# Started at Thu Jul 30 12:08:36 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/322.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000168728, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0317, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.01 0.01,0.03,0.55,0.70,0.78 0.86,0.92,1.0,1.1), mean=0.463, stddev=0.295], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.16 0.17,0.21,0.63,0.89,1.2 1.3,1.5,1.5,1.6), mean=0.621, stddev=0.37], bias-{mean,stddev}=-0.00123,0.06231, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.17e+06, self-repaired-proportion=0.186266, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,1e-05,3e-05,5e-05 8e-05,0.0002,0.05,0.09,0.11 0.13,0.14,0.17,0.20), mean=0.051, stddev=0.0459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.01,0.01,0.03 0.04,0.07,0.41,0.61,0.71 0.82,0.89,0.92,1.0), mean=0.37, stddev=0.265], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.009,0.01,0.02 0.02,0.04,0.28,0.39,0.46 0.58,0.65,0.70,1.6), mean=0.272, stddev=0.187], oderiv-count=1.20768e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33637.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,6e-06,1e-05,3e-05 8e-05,0.0002,0.05,0.09,0.11 0.13,0.14,0.17,0.20), mean=0.0489, stddev=0.0448], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.0001,0.0001,0.0003 0.0005,0.001,0.08,0.11,0.13 0.14,0.15,0.15,0.16), mean=0.068, stddev=0.0503]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000168728, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01177, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.37 0.39,0.41,0.45,0.51,0.55 0.59,0.63,0.64,0.72), mean=0.46, stddev=0.0651], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.006 0.008,0.01,0.28,0.34,0.37 0.40,0.44,0.48,0.73), mean=0.227, stddev=0.143], bias-{mean,stddev}=-0.03102,0.04, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.14e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.22 0.23,0.25,0.28,0.31,0.33 0.35,0.38,0.40,0.48), mean=0.28, stddev=0.0433], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.36,0.37,0.39 0.40,0.42,0.44,0.47,0.49 0.50,0.52,0.53,0.55), mean=0.444, stddev=0.0363], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0453, stddev=0.00819], oderiv-count=1.0815e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32916.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.21,0.22 0.23,0.25,0.28,0.32,0.34 0.36,0.40,0.42,0.49), mean=0.284, stddev=0.0462], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.43 0.44,0.47,0.51,0.56,0.59 0.62,0.66,0.69,0.73), mean=0.515, stddev=0.0608]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000168728, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01766, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,1e-06,3e-06,2e-05 0.0005,0.16,0.42,0.59,0.67 0.73,0.79,0.84,1.0), mean=0.386, stddev=0.232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.38,0.42 0.52,0.70,0.81,0.90,0.96 1.0,1.1,1.2,1.3), mean=0.788, stddev=0.165], bias-{mean,stddev}=0.003743,0.02897, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000168728, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.08901, w_fc-rms=0.03167, w_oc-rms=0.04864, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635347, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.48,0.50,0.55 0.72,0.79,0.82,0.86), mean=0.497, stddev=0.0798], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0231] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635347, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.45,0.47,0.48 0.49,0.50,0.51,0.55,0.60 0.69,0.79,0.82,0.87), mean=0.53, stddev=0.0663], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.17 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0242] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0313999, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.89,-0.87,-0.52 -0.26,-0.13,0.0005,0.16,0.31 0.56,0.88,0.89,0.92), mean=0.0183, stddev=0.305], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.20,0.23 0.37,0.45,0.59,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.611, stddev=0.219] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635347, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.40 0.42,0.43,0.46,0.50,0.50 0.51,0.56,0.59,0.74), mean=0.463, stddev=0.0408], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0203] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00635347, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.69,-0.64,-0.31 -0.15,-0.07,0.0004,0.09,0.21 0.34,0.63,0.69,0.76), mean=0.0118, stddev=0.212], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.47,0.57 0.78,0.84,0.90,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.878, stddev=0.119] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.23627e-05, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000205353, count-zeroing-boundaries=297049
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.269421
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000168728, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0402, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.36,0.40,0.43 0.47,0.55,0.86,1.2,1.2 1.3,1.3,1.4,1.4), mean=0.862, stddev=0.311], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0008,0.001,0.002 0.009,0.34,0.53,0.72,0.93 1.3,1.5,1.6,1.9), mean=0.544, stddev=0.352], bias-{mean,stddev}=0.01208,0.2639, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000168728, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01328, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.21,0.24,0.26 0.28,0.30,0.36,0.42,0.46 0.49,0.52,0.54,0.58), mean=0.363, stddev=0.0748], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.17,0.29,0.39,0.42 0.44,0.46,0.47,0.50), mean=0.283, stddev=0.107], bias-{mean,stddev}=0.001957,0.009114, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0.00245598, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.01,0.02,0.03 0.03,0.05,0.08,0.10,0.12 0.13,0.14,0.15,0.18), mean=0.0786, stddev=0.0306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.11,0.15,0.20 0.25,0.37,0.51,0.62,0.66 0.69,0.73,0.75,0.85), mean=0.487, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.09,0.10,0.10 0.10,0.11,0.13,0.16,0.20 0.23,0.26,0.29,0.34), mean=0.14, stddev=0.0418], oderiv-count=1.06874e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30751, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.01,0.02,0.02 0.04,0.05,0.08,0.10,0.12 0.13,0.14,0.15,0.19), mean=0.0783, stddev=0.0304], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.06,0.07,0.08 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.17,0.19), mean=0.119, stddev=0.0248]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000168728, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008654, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.27,0.29 0.29,0.30,0.33,0.37,0.40 0.42,0.45,0.46,0.51), mean=0.339, stddev=0.0431], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.12,0.13,0.14 0.15,0.16,0.18,0.22,0.25 0.27,0.30,0.32,0.38), mean=0.192, stddev=0.0442], bias-{mean,stddev}=-0.0247,0.02025, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.4e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.21 0.22,0.23,0.26,0.28,0.30 0.31,0.32,0.34,0.37), mean=0.259, stddev=0.0303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.38,0.39 0.40,0.41,0.44,0.46,0.47 0.48,0.49,0.50,0.51), mean=0.434, stddev=0.0271], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0362, stddev=0.00299], oderiv-count=1.1159e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28585.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.23,0.26,0.29,0.30 0.32,0.33,0.34,0.38), mean=0.262, stddev=0.0326], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.38,0.40,0.41 0.43,0.45,0.49,0.54,0.58 0.61,0.65,0.66,0.82), mean=0.501, stddev=0.0635]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000168728, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01463, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-06,4e-06,1e-05 4e-05,0.0009,0.33,0.52,0.59 0.63,0.68,0.70,0.93), mean=0.288, stddev=0.237], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.30,0.31,0.37 0.47,0.60,0.66,0.73,0.78 0.83,0.94,1.0,1.3), mean=0.654, stddev=0.134], bias-{mean,stddev}=0.006692,0.03497, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000168728, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05767, w_fc-rms=0.01793, w_oc-rms=0.03982, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640847, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.45,0.46 0.46,0.48,0.50,0.51,0.57 0.61,0.69,0.72,0.80), mean=0.507, stddev=0.0521], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0179] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640847, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.47,0.48 0.49,0.50,0.50,0.55,0.59 0.63,0.68,0.69,0.76), mean=0.525, stddev=0.048], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0208] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00856138, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.83,-0.77,-0.44 -0.27,-0.11,0.0003,0.14,0.33 0.58,0.72,0.77,0.83), mean=0.0127, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.27,0.30,0.39 0.46,0.53,0.65,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.716, stddev=0.225] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640847, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.45 0.46,0.47,0.50,0.50,0.51 0.54,0.57,0.58,0.66), mean=0.492, stddev=0.0272], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0188] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00640847, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.69,-0.60,-0.47,-0.29 -0.16,-0.07,0.0002,0.09,0.20 0.36,0.46,0.53,0.61), mean=0.00842, stddev=0.18], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.58,0.61,0.72 0.78,0.85,0.92,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.909, stddev=0.0965] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.30415e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.06207e-05, count-zeroing-boundaries=261963
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.269421
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000168728, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03893, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.50,0.53 0.57,0.61,0.86,1.1,1.1 1.2,1.2,1.3,1.3), mean=0.855, stddev=0.24], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.004,0.01,0.55,0.82,0.96 1.1,1.3,1.5,1.7), mean=0.487, stddev=0.396], bias-{mean,stddev}=0.001794,0.2128, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000168728, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01272, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.26 0.28,0.30,0.34,0.40,0.44 0.48,0.52,0.53,0.58), mean=0.349, stddev=0.064], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.16 0.17,0.19,0.26,0.37,0.40 0.42,0.44,0.44,0.48), mean=0.276, stddev=0.0881], bias-{mean,stddev}=0.0005836,0.005744, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.3e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.12,0.15), mean=0.0649, stddev=0.0269], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.16,0.19 0.24,0.33,0.50,0.59,0.64 0.67,0.70,0.72,0.76), mean=0.469, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.12,0.14,0.17,0.19 0.21,0.24,0.25,0.30), mean=0.147, stddev=0.0328], oderiv-count=1.0313e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26420.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.0667, stddev=0.0269], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.09,0.11,0.12,0.13 0.14,0.15,0.15,0.17), mean=0.106, stddev=0.0219]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000168728, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008546, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.16,0.21 0.26,0.29,0.33,0.39,0.41 0.42,0.45,0.46,0.49), mean=0.332, stddev=0.0624], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.13 0.14,0.15,0.18,0.22,0.25 0.28,0.31,0.33,0.40), mean=0.189, stddev=0.0459], bias-{mean,stddev}=-0.01707,0.02537, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.25e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.19 0.22,0.24,0.28,0.31,0.32 0.33,0.34,0.36,0.42), mean=0.273, stddev=0.0436], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.37 0.39,0.40,0.43,0.46,0.47 0.48,0.49,0.50,0.52), mean=0.428, stddev=0.0335], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.03, stddev=0.00287], oderiv-count=1.0176e+06
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24255.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.16,0.19 0.22,0.25,0.28,0.31,0.33 0.34,0.36,0.38,0.49), mean=0.279, stddev=0.0462], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.25,0.34 0.42,0.46,0.54,0.61,0.65 0.67,0.73,0.75,1.1), mean=0.533, stddev=0.102]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000168728, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02073, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.28,0.30 0.31,0.36,0.50,0.65,0.71 0.76,0.85,0.90,1.0), mean=0.507, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.65,0.67,0.75 0.78,0.82,0.89,1.1,1.1 1.2,1.4,1.4,1.7), mean=0.932, stddev=0.158], bias-{mean,stddev}=0.01268,0.01705, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000168728, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1007, w_fc-rms=0.04557, w_oc-rms=0.07506, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647488, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.61,0.64 0.65,0.68,0.73,0.78,0.81 0.83,0.85,0.86,0.89), mean=0.729, stddev=0.0578], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.15,0.17,0.18,0.19 0.20,0.20,0.21,0.21), mean=0.165, stddev=0.0239] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647488, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.53,0.57,0.60 0.62,0.64,0.69,0.74,0.79 0.82,0.85,0.87,0.89), mean=0.695, stddev=0.0666], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.12 0.13,0.15,0.17,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.17, stddev=0.0246] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0277066, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.85,-0.81,-0.63 -0.45,-0.32,0.0007,0.32,0.45 0.63,0.82,0.84,0.91), mean=-0.00204, stddev=0.371], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.20,0.23 0.28,0.36,0.46,0.52,0.54 0.56,0.58,0.59,0.62), mean=0.438, stddev=0.0974] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647488, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.47,0.50,0.53 0.56,0.59,0.64,0.68,0.70 0.73,0.77,0.81,0.88), mean=0.635, stddev=0.0614], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0185] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00647488, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.72,-0.66,-0.51 -0.36,-0.25,-0.004,0.25,0.37 0.55,0.66,0.70,0.73), mean=-0.00374, stddev=0.301], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.42,0.46 0.52,0.61,0.69,0.74,0.76 0.78,0.80,0.80,0.83), mean=0.668, stddev=0.0936] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222731
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.269421
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000168728, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09114, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.8,2.6,2.7 2.8,2.9,2.9,3.1), mean=1.98, stddev=0.635], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.93,0.99,1.1 1.1,1.2,1.4,1.6,1.9 2.1,2.2,2.2,2.3), mean=1.44, stddev=0.303], bias-{mean,stddev}=-0.000215,0.7172, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000168728, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04408, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.61,0.62 0.64,0.66,0.70,0.74,0.78 0.81,0.86,0.93,2.1), mean=0.706, stddev=0.0835], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.5,2.6 2.7,2.8,2.8,2.8), mean=1.93, stddev=0.589], bias-{mean,stddev}=4.441e-09,0.02172, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=592960
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/321.mdl exp/nnet3/tdnn_lstm1c_sp/322.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.97253 tdnn2.affine:3.84166 lstm1.W_all:3.01546 lstm1.lstm_nonlin:0.0619351 lstm1.W_rp:1.24804 tdnn3.affine:2.75583 tdnn4.affine:2.91424 lstm2.W_all:2.11766 lstm2.lstm_nonlin:0.0344837 lstm2.W_rp:0.860721 tdnn5.affine:2.32473 tdnn6.affine:2.43258 lstm3.W_all:2.23233 lstm3.lstm_nonlin:0.0539739 lstm3.W_rp:0.89068 output.affine:2.45447 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.6007 tdnn2.affine:10.6615 lstm1.W_all:20.5778 lstm1.lstm_nonlin:2.42325 lstm1.W_rp:15.3826 tdnn3.affine:8.45977 tdnn4.affine:7.82832 lstm2.W_all:17.0846 lstm2.lstm_nonlin:1.64959 lstm2.W_rp:14.7191 tdnn5.affine:8.10303 tdnn6.affine:7.72876 lstm3.W_all:24.1225 lstm3.lstm_nonlin:3.04738 lstm3.W_rp:35.4503 output.affine:32.6161 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.315306 tdnn2.affine:0.360095 lstm1.W_all:0.14656 lstm1.lstm_nonlin:0.0256414 lstm1.W_rp:0.0810942 tdnn3.affine:0.325266 tdnn4.affine:0.372241 lstm2.W_all:0.123937 lstm2.lstm_nonlin:0.0209684 lstm2.W_rp:0.0584197 tdnn5.affine:0.286744 tdnn6.affine:0.31419 lstm3.W_all:0.0925328 lstm3.lstm_nonlin:0.0176837 lstm3.W_rp:0.0251137 output.affine:0.0752111 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:08:36 KST 2020, elapsed time 0 seconds
