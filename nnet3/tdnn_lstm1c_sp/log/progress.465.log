# nnet3-info exp/nnet3/tdnn_lstm1c_sp/465.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/464.mdl exp/nnet3/tdnn_lstm1c_sp/465.mdl 
# Started at Thu Jul 30 13:05:34 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/465.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=6.81158e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03226, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.005,0.007 0.009,0.02,0.57,0.72,0.79 0.86,0.93,0.96,1.3), mean=0.468, stddev=0.306], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.19,0.23,0.68,0.93,1.1 1.3,1.4,1.4,1.4), mean=0.645, stddev=0.353], bias-{mean,stddev}=-0.007956,0.05881, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0.167638, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,2e-05,2e-05,3e-05 7e-05,0.0002,0.04,0.08,0.10 0.12,0.13,0.15,0.18), mean=0.0424, stddev=0.0431], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.05,0.07,0.35,0.60,0.69 0.78,0.86,0.88,0.97), mean=0.34, stddev=0.261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.01 0.02,0.05,0.44,0.65,0.78 0.89,0.98,1.1,1.8), mean=0.425, stddev=0.291], oderiv-count=1.10483e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=42652.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,1e-05,2e-05,3e-05 7e-05,0.0002,0.04,0.08,0.10 0.12,0.14,0.15,0.18), mean=0.0421, stddev=0.0429], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0001,0.0001,0.0002 0.0004,0.001,0.07,0.11,0.12 0.13,0.14,0.15,0.17), mean=0.0591, stddev=0.0492]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.81158e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01137, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.33,0.35 0.37,0.39,0.43,0.50,0.54 0.57,0.61,0.63,0.71), mean=0.444, stddev=0.0679], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.004,0.01,0.27,0.33,0.36 0.39,0.43,0.49,0.77), mean=0.216, stddev=0.143], bias-{mean,stddev}=-0.03537,0.03747, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.09e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.17,0.18 0.19,0.21,0.24,0.28,0.29 0.31,0.33,0.35,0.42), mean=0.244, stddev=0.041], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.35,0.36,0.38 0.40,0.42,0.44,0.47,0.49 0.51,0.52,0.53,0.58), mean=0.442, stddev=0.0378], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.05,0.06,0.07,0.08 0.09,0.10,0.10,0.12), mean=0.0598, stddev=0.013], oderiv-count=1.20003e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=41771.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.17,0.18 0.19,0.21,0.24,0.28,0.30 0.32,0.34,0.36,0.44), mean=0.247, stddev=0.043], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.31,0.33,0.35 0.37,0.40,0.44,0.49,0.53 0.55,0.57,0.59,0.65), mean=0.445, stddev=0.0596]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.81158e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01731, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,5e-07,1e-06,8e-06 0.0002,0.18,0.40,0.58,0.65 0.72,0.79,0.87,1.1), mean=0.378, stddev=0.227], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.38,0.41 0.47,0.68,0.80,0.89,0.95 1.0,1.1,1.2,1.3), mean=0.77, stddev=0.172], bias-{mean,stddev}=0.0003678,0.02198, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.81158e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.045, w_fc-rms=0.02164, w_oc-rms=0.03901, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651662, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.43 0.44,0.45,0.48,0.50,0.54 0.64,0.72,0.73,0.77), mean=0.49, stddev=0.0623], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.015] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651662, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.43,0.44 0.45,0.47,0.50,0.51,0.55 0.61,0.66,0.70,0.76), mean=0.499, stddev=0.0513], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.013] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00652289, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.82,-0.77,-0.44 -0.27,-0.12,0.0004,0.15,0.28 0.59,0.75,0.80,0.86), mean=0.0135, stddev=0.282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.28,0.31,0.34 0.41,0.46,0.57,0.71,1.0 1.0,1.0,1.0,1.0), mean=0.616, stddev=0.201] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651662, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.40 0.41,0.43,0.46,0.50,0.50 0.53,0.56,0.59,0.65), mean=0.461, stddev=0.0422], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0183] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00978264, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.80,-0.76,-0.38 -0.22,-0.11,0.0004,0.13,0.23 0.46,0.67,0.79,0.90), mean=0.011, stddev=0.254], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.27,0.33,0.46 0.66,0.75,0.84,0.91,1.0 1.0,1.0,1.0,1.0), mean=0.815, stddev=0.153] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.95e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.55766e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=8.53161e-06, count-zeroing-boundaries=293028
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0330578
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.81158e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03812, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.44,0.45 0.50,0.55,0.83,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.829, stddev=0.262], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0005,0.0008,0.002 0.006,0.39,0.56,0.71,0.86 1.0,1.2,1.3,1.6), mean=0.534, stddev=0.304], bias-{mean,stddev}=0.01118,0.2408, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=6.81158e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01219, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.23,0.24,0.26 0.27,0.29,0.33,0.38,0.41 0.44,0.47,0.48,0.54), mean=0.336, stddev=0.0551], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.16,0.18,0.26,0.35,0.38 0.40,0.43,0.44,0.47), mean=0.264, stddev=0.0867], bias-{mean,stddev}=0.00143,0.01027, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.000711788, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.009,0.01,0.02 0.03,0.05,0.08,0.12,0.14 0.15,0.16,0.16,0.19), mean=0.0819, stddev=0.0384], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.11,0.15 0.21,0.27,0.43,0.55,0.61 0.64,0.66,0.68,0.83), mean=0.413, stddev=0.149], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.10,0.12,0.15,0.18 0.21,0.25,0.25,0.29), mean=0.127, stddev=0.0396], oderiv-count=1.10522e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39129.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.02,0.02 0.03,0.05,0.08,0.12,0.13 0.15,0.16,0.16,0.19), mean=0.0824, stddev=0.0381], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.09,0.11,0.14,0.17,0.18 0.19,0.20,0.21,0.22), mean=0.138, stddev=0.0346]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.81158e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008056, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.27 0.28,0.29,0.31,0.34,0.36 0.38,0.40,0.40,0.43), mean=0.316, stddev=0.0344], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.13,0.14 0.15,0.15,0.17,0.20,0.22 0.25,0.27,0.29,0.37), mean=0.181, stddev=0.0337], bias-{mean,stddev}=-0.02927,0.01666, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.57e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.20,0.21,0.24,0.26,0.28 0.30,0.31,0.32,0.35), mean=0.237, stddev=0.0334], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.35,0.36,0.37 0.38,0.39,0.42,0.44,0.46 0.47,0.48,0.48,0.51), mean=0.419, stddev=0.0295], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.039, stddev=0.00289], oderiv-count=1.04125e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36487.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.21,0.24,0.27,0.29 0.30,0.32,0.33,0.37), mean=0.24, stddev=0.0337], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.37,0.38,0.40 0.41,0.43,0.47,0.52,0.54 0.56,0.61,0.63,0.79), mean=0.473, stddev=0.0555]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.81158e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01412, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,5e-06,1e-05 5e-05,0.0009,0.32,0.50,0.58 0.63,0.68,0.70,0.84), mean=0.278, stddev=0.228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.30,0.33 0.39,0.58,0.65,0.72,0.76 0.79,0.86,0.89,1.3), mean=0.63, stddev=0.133], bias-{mean,stddev}=0.002447,0.02603, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.81158e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02849, w_fc-rms=0.01397, w_oc-rms=0.03586, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00657277, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.46 0.46,0.48,0.50,0.51,0.54 0.57,0.61,0.64,0.71), mean=0.5, stddev=0.0364], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0132] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00657277, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.45,0.46 0.46,0.48,0.50,0.51,0.53 0.55,0.59,0.61,0.67), mean=0.498, stddev=0.0311], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0113] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00657277, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.73,-0.65,-0.36 -0.21,-0.08,0.0001,0.10,0.25 0.41,0.55,0.60,0.73), mean=0.00476, stddev=0.223], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.37,0.41,0.45 0.49,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.724, stddev=0.212] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00657277, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.45,0.46,0.50,0.50,0.51 0.52,0.55,0.56,0.73), mean=0.486, stddev=0.0307], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0174] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00657277, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.61,-0.57,-0.30 -0.18,-0.08,8e-05,0.10,0.23 0.38,0.48,0.53,0.72), mean=0.00454, stddev=0.199], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.52,0.56,0.64 0.71,0.78,0.87,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.87, stddev=0.122] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.71e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.93477e-06, count-zeroing-boundaries=258429
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0330578
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.81158e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.036, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.45,0.52 0.54,0.59,0.79,1.0,1.1 1.1,1.1,1.1,1.3), mean=0.794, stddev=0.207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.004,0.01,0.58,0.77,0.85 0.96,1.1,1.1,1.3), mean=0.462, stddev=0.351], bias-{mean,stddev}=-0.003558,0.1923, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=6.81158e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01136, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.21,0.23 0.25,0.26,0.30,0.36,0.39 0.43,0.45,0.47,0.49), mean=0.312, stddev=0.0582], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.23,0.33,0.35 0.38,0.40,0.42,0.44), mean=0.248, stddev=0.075], bias-{mean,stddev}=0.001471,0.007564, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.5e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.03,0.04,0.06,0.09,0.10 0.12,0.13,0.14,0.16), mean=0.064, stddev=0.0294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.12,0.14 0.19,0.27,0.39,0.50,0.54 0.58,0.60,0.63,0.68), mean=0.383, stddev=0.128], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.09 0.10,0.10,0.12,0.14,0.17 0.20,0.23,0.24,0.29), mean=0.126, stddev=0.0336], oderiv-count=1.02944e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33845.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.03,0.04,0.06,0.09,0.10 0.12,0.13,0.14,0.17), mean=0.0653, stddev=0.0292], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.09,0.12,0.14,0.15 0.16,0.17,0.18,0.19), mean=0.117, stddev=0.0283]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.81158e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008095, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.17,0.23 0.26,0.28,0.32,0.36,0.38 0.40,0.40,0.41,0.44), mean=0.315, stddev=0.0532], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.13 0.14,0.15,0.17,0.20,0.23 0.26,0.31,0.33,0.39), mean=0.18, stddev=0.0423], bias-{mean,stddev}=-0.02449,0.02061, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.21e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.18 0.20,0.22,0.25,0.28,0.29 0.31,0.32,0.33,0.35), mean=0.247, stddev=0.0396], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.35,0.36 0.37,0.39,0.41,0.44,0.45 0.46,0.47,0.48,0.50), mean=0.412, stddev=0.0298], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0323, stddev=0.00365], oderiv-count=939040
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31203.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.18 0.20,0.22,0.25,0.28,0.30 0.31,0.33,0.34,0.37), mean=0.25, stddev=0.0399], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.25,0.33 0.39,0.43,0.50,0.55,0.59 0.61,0.64,0.65,0.74), mean=0.491, stddev=0.0837]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.81158e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02024, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.25 0.27,0.32,0.46,0.67,0.73 0.78,0.82,0.85,0.93), mean=0.488, stddev=0.168], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.49,0.55,0.66 0.72,0.75,0.83,1.1,1.2 1.3,1.4,1.5,1.8), mean=0.898, stddev=0.214], bias-{mean,stddev}=0.01434,0.01699, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.81158e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0768, w_fc-rms=0.03966, w_oc-rms=0.05735, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00664055, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.55,0.57,0.58 0.61,0.64,0.68,0.72,0.74 0.76,0.79,0.80,0.82), mean=0.679, stddev=0.053], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.21,0.21), mean=0.182, stddev=0.0143] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00664055, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.52,0.53 0.55,0.57,0.61,0.65,0.72 0.76,0.79,0.80,0.84), mean=0.617, stddev=0.0628], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.17,0.19,0.20,0.21,0.21 0.22,0.22,0.22,0.22), mean=0.197, stddev=0.0172] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0100255, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.80,-0.70,-0.54 -0.41,-0.29,-0.02,0.26,0.41 0.54,0.66,0.74,0.86), mean=-0.00811, stddev=0.322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.25,0.29 0.31,0.35,0.40,0.44,0.46 0.47,0.50,0.51,0.53), mean=0.393, stddev=0.0573] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00664055, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.51,0.52,0.54 0.56,0.59,0.63,0.67,0.69 0.72,0.75,0.79,0.91), mean=0.633, stddev=0.054], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.13,0.13,0.14 0.15,0.16,0.18,0.18,0.19 0.19,0.19,0.19,0.20), mean=0.174, stddev=0.0147] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0263326, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.84,-0.73,-0.59 -0.40,-0.27,-0.01,0.25,0.37 0.55,0.70,0.76,0.89), mean=-0.0111, stddev=0.325], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.21,0.29 0.36,0.44,0.54,0.60,0.62 0.63,0.65,0.65,0.70), mean=0.515, stddev=0.104] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.47e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=219759
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0330578
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.81158e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08559, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.0,1.1,1.1 1.1,1.2,1.7,2.5,2.6 2.6,2.7,2.8,3.0), mean=1.86, stddev=0.605], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,1.0,1.1,1.1 1.2,1.2,1.3,1.5,1.7 1.8,1.9,1.9,2.0), mean=1.36, stddev=0.205], bias-{mean,stddev}=-0.0392,0.4039, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=6.81158e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04052, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.55,0.55,0.57 0.59,0.60,0.64,0.68,0.71 0.74,0.78,0.84,2.2), mean=0.648, stddev=0.0829], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.97,1.0,1.0 1.1,1.2,1.6,2.4,2.4 2.5,2.6,2.6,2.6), mean=1.77, stddev=0.576], bias-{mean,stddev}=3.088e-09,0.02569, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0135], oderiv-count=581760
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/464.mdl exp/nnet3/tdnn_lstm1c_sp/465.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.62907 tdnn2.affine:2.42759 lstm1.W_all:1.7909 lstm1.lstm_nonlin:0.0348417 lstm1.W_rp:0.832576 tdnn3.affine:1.66824 tdnn4.affine:1.70777 lstm2.W_all:1.22988 lstm2.lstm_nonlin:0.0188859 lstm2.W_rp:0.564932 tdnn5.affine:1.39929 tdnn6.affine:1.53227 lstm3.W_all:1.76289 lstm3.lstm_nonlin:0.0431383 lstm3.W_rp:0.614777 output.affine:1.31052 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8123 tdnn2.affine:10.3084 lstm1.W_all:20.1493 lstm1.lstm_nonlin:1.44491 lstm1.W_rp:14.5469 tdnn3.affine:7.769 tdnn4.affine:7.29649 lstm2.W_all:16.4656 lstm2.lstm_nonlin:1.09198 lstm2.W_rp:13.5956 tdnn5.affine:7.23739 tdnn6.affine:7.32697 lstm3.W_all:23.5616 lstm3.lstm_nonlin:2.36553 lstm3.W_rp:32.1452 output.affine:29.9893 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.205146 tdnn2.affine:0.235619 lstm1.W_all:0.0888545 lstm1.lstm_nonlin:0.0240094 lstm1.W_rp:0.0572008 tdnn3.affine:0.214663 tdnn4.affine:0.234147 lstm2.W_all:0.0746942 lstm2.lstm_nonlin:0.0172074 lstm2.W_rp:0.0415269 tdnn5.affine:0.193535 tdnn6.affine:0.20939 lstm3.W_all:0.0747821 lstm3.lstm_nonlin:0.0181079 lstm3.W_rp:0.019101 output.affine:0.0436654 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 13:05:34 KST 2020, elapsed time 0 seconds
