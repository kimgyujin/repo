# nnet3-info exp/nnet3/tdnn_lstm1c_sp/340.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/339.mdl exp/nnet3/tdnn_lstm1c_sp/340.mdl 
# Started at Thu Jul 30 12:15:42 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/340.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000150522, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03231, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.008 0.01,0.02,0.57,0.72,0.79 0.88,0.93,0.98,1.2), mean=0.469, stddev=0.305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.22,0.65,0.90,1.2 1.4,1.5,1.5,1.5), mean=0.635, stddev=0.374], bias-{mean,stddev}=-0.003126,0.06198, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.53e+05, self-repaired-proportion=0.179443, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,2e-05,3e-05,4e-05 7e-05,0.0002,0.05,0.09,0.11 0.13,0.14,0.17,0.20), mean=0.0498, stddev=0.0459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.03 0.04,0.07,0.39,0.60,0.71 0.80,0.87,0.90,0.99), mean=0.362, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.01 0.02,0.04,0.30,0.42,0.49 0.61,0.70,0.77,1.6), mean=0.286, stddev=0.201], oderiv-count=1.15936e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36041.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,1e-05,2e-05,3e-05 6e-05,0.0002,0.04,0.09,0.11 0.12,0.15,0.17,0.21), mean=0.0475, stddev=0.0448], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.0001,0.0002,0.0002 0.0004,0.001,0.08,0.11,0.13 0.14,0.15,0.15,0.17), mean=0.0669, stddev=0.0506]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000150522, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01183, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.37 0.39,0.41,0.45,0.51,0.55 0.59,0.63,0.66,0.74), mean=0.462, stddev=0.067], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.004 0.006,0.01,0.28,0.34,0.37 0.40,0.44,0.48,0.74), mean=0.226, stddev=0.147], bias-{mean,stddev}=-0.03308,0.0398, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.53e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.21,0.21 0.23,0.24,0.28,0.31,0.33 0.35,0.38,0.41,0.47), mean=0.28, stddev=0.0442], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.37,0.38 0.40,0.41,0.44,0.47,0.49 0.50,0.51,0.53,0.57), mean=0.442, stddev=0.0371], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0466, stddev=0.00863], oderiv-count=1.20554e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35261, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.21 0.22,0.24,0.27,0.31,0.33 0.35,0.39,0.41,0.48), mean=0.279, stddev=0.0457], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.42 0.44,0.46,0.51,0.56,0.59 0.62,0.65,0.67,0.73), mean=0.511, stddev=0.0604]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000150522, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0177, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,9e-07,2e-06,1e-05 0.0005,0.17,0.42,0.59,0.67 0.73,0.79,0.84,1.0), mean=0.387, stddev=0.232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.37,0.42 0.51,0.70,0.81,0.90,0.97 1.0,1.1,1.2,1.3), mean=0.79, stddev=0.168], bias-{mean,stddev}=0.003271,0.02849, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000150522, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0908, w_fc-rms=0.02889, w_oc-rms=0.0487, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638922, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.55 0.71,0.78,0.81,0.86), mean=0.496, stddev=0.0783], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0224] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638922, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.46,0.47,0.48 0.49,0.49,0.50,0.54,0.59 0.68,0.77,0.80,0.85), mean=0.525, stddev=0.0633], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0225] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.024393, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.88,-0.85,-0.48 -0.27,-0.12,0.001,0.16,0.31 0.57,0.85,0.88,0.90), mean=0.0185, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.21,0.25 0.38,0.44,0.58,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.609, stddev=0.218] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638922, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.39,0.40 0.42,0.43,0.46,0.50,0.50 0.52,0.56,0.59,0.73), mean=0.463, stddev=0.0411], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0201] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00638922, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.71,-0.65,-0.30 -0.16,-0.08,0.001,0.09,0.20 0.37,0.63,0.70,0.77), mean=0.0119, stddev=0.217], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.45,0.55 0.76,0.83,0.89,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.87, stddev=0.123] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=8.35724e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000165575, count-zeroing-boundaries=295938
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.239669
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000150522, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04029, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.41,0.45 0.49,0.55,0.87,1.2,1.3 1.3,1.3,1.4,1.4), mean=0.867, stddev=0.304], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0008,0.001,0.002 0.009,0.34,0.54,0.73,0.93 1.2,1.5,1.6,1.9), mean=0.548, stddev=0.35], bias-{mean,stddev}=0.01285,0.2617, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000150522, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0132, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.21,0.24,0.26 0.28,0.31,0.36,0.42,0.45 0.48,0.52,0.53,0.57), mean=0.362, stddev=0.071], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.18,0.28,0.39,0.42 0.44,0.46,0.48,0.50), mean=0.282, stddev=0.104], bias-{mean,stddev}=0.001538,0.008491, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.95e+05, self-repaired-proportion=0.00202031, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.02,0.02,0.03 0.03,0.06,0.08,0.11,0.12 0.13,0.14,0.15,0.17), mean=0.0812, stddev=0.0311], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.12,0.15,0.19 0.23,0.36,0.51,0.60,0.64 0.68,0.71,0.73,0.81), mean=0.477, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.09,0.09,0.10 0.10,0.11,0.12,0.15,0.19 0.22,0.26,0.26,0.32), mean=0.133, stddev=0.0397], oderiv-count=1.17344e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32918.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.01,0.02,0.03 0.03,0.06,0.08,0.10,0.12 0.13,0.14,0.15,0.17), mean=0.0792, stddev=0.0302], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.06,0.07,0.08 0.09,0.11,0.13,0.14,0.15 0.17,0.18,0.18,0.20), mean=0.124, stddev=0.0261]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000150522, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008622, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.29,0.30,0.33,0.37,0.40 0.42,0.44,0.45,0.49), mean=0.338, stddev=0.0412], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.12,0.13,0.14 0.15,0.16,0.18,0.22,0.25 0.27,0.30,0.31,0.38), mean=0.192, stddev=0.043], bias-{mean,stddev}=-0.0254,0.01973, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.22,0.24,0.26,0.29,0.30 0.32,0.33,0.34,0.37), mean=0.264, stddev=0.0308], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.37,0.38 0.39,0.41,0.43,0.45,0.46 0.47,0.49,0.49,0.50), mean=0.429, stddev=0.0278], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0352, stddev=0.00295], oderiv-count=973728
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30576.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.22,0.24,0.26,0.29,0.31 0.32,0.33,0.36,0.38), mean=0.265, stddev=0.0334], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.39,0.41 0.44,0.46,0.50,0.56,0.59 0.62,0.67,0.70,0.87), mean=0.509, stddev=0.0668]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000150522, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01457, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,5e-06,1e-05 5e-05,0.001,0.33,0.52,0.59 0.63,0.68,0.70,0.92), mean=0.287, stddev=0.236], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.31,0.36 0.45,0.60,0.66,0.73,0.78 0.82,0.91,0.99,1.3), mean=0.651, stddev=0.133], bias-{mean,stddev}=0.006311,0.03387, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000150522, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05832, w_fc-rms=0.01722, w_oc-rms=0.04087, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644606, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.46 0.47,0.48,0.50,0.51,0.56 0.60,0.68,0.70,0.80), mean=0.506, stddev=0.0501], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0173] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644606, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.47,0.48 0.49,0.50,0.50,0.54,0.58 0.62,0.67,0.68,0.75), mean=0.522, stddev=0.045], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0195] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00645226, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.80,-0.75,-0.44 -0.25,-0.10,0.0004,0.13,0.33 0.53,0.69,0.74,0.81), mean=0.0107, stddev=0.265], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.33,0.40 0.46,0.53,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.717, stddev=0.222] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644606, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.45 0.46,0.47,0.50,0.50,0.51 0.53,0.56,0.58,0.67), mean=0.491, stddev=0.0272], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0188] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644606, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.71,-0.59,-0.49,-0.29 -0.16,-0.07,0.0007,0.09,0.20 0.36,0.47,0.53,0.61), mean=0.00777, stddev=0.183], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.58,0.60,0.71 0.78,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.904, stddev=0.0999] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.44563e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.02368e-05, count-zeroing-boundaries=260955
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.239669
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000150522, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03874, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.51,0.53 0.57,0.61,0.86,1.1,1.1 1.2,1.2,1.3,1.3), mean=0.851, stddev=0.235], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.002,0.002 0.004,0.01,0.56,0.81,0.95 1.1,1.3,1.4,1.6), mean=0.486, stddev=0.392], bias-{mean,stddev}=0.001086,0.212, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000150522, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01257, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.26 0.28,0.29,0.34,0.39,0.43 0.47,0.49,0.51,0.57), mean=0.346, stddev=0.0614], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.16 0.17,0.19,0.26,0.37,0.40 0.41,0.43,0.44,0.47), mean=0.273, stddev=0.0863], bias-{mean,stddev}=0.0005889,0.005917, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.96e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.14,0.16), mean=0.0674, stddev=0.0283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.15,0.20 0.23,0.32,0.49,0.58,0.63 0.65,0.68,0.69,0.75), mean=0.459, stddev=0.145], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.11,0.11,0.13,0.16,0.18 0.20,0.22,0.23,0.28), mean=0.137, stddev=0.0309], oderiv-count=1.0128e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28234.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.12,0.13,0.13,0.16), mean=0.069, stddev=0.0284], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.09,0.11,0.13,0.14 0.15,0.16,0.16,0.18), mean=0.11, stddev=0.0239]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000150522, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008576, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.16,0.21 0.27,0.29,0.33,0.39,0.41 0.42,0.44,0.45,0.48), mean=0.333, stddev=0.0617], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.14,0.15,0.18,0.23,0.25 0.28,0.31,0.33,0.40), mean=0.19, stddev=0.0461], bias-{mean,stddev}=-0.01775,0.02496, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.18e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.16,0.19 0.23,0.25,0.29,0.32,0.33 0.34,0.36,0.36,0.44), mean=0.281, stddev=0.0434], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.36 0.38,0.39,0.43,0.45,0.46 0.48,0.49,0.49,0.52), mean=0.423, stddev=0.0332], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0287, stddev=0.00302], oderiv-count=1.00864e+06
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25892.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.17,0.19 0.23,0.25,0.29,0.32,0.34 0.35,0.36,0.37,0.51), mean=0.287, stddev=0.0465], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.27,0.34 0.43,0.48,0.55,0.62,0.66 0.71,0.74,0.75,1.1), mean=0.548, stddev=0.103]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000150522, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02073, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.28,0.29 0.31,0.35,0.49,0.65,0.71 0.76,0.86,0.89,0.99), mean=0.506, stddev=0.153], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.62,0.65,0.73 0.78,0.82,0.89,1.0,1.1 1.2,1.4,1.4,1.6), mean=0.931, stddev=0.161], bias-{mean,stddev}=0.01219,0.01658, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000150522, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1037, w_fc-rms=0.04484, w_oc-rms=0.0744, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651472, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.61,0.63 0.65,0.68,0.72,0.77,0.80 0.82,0.84,0.85,0.88), mean=0.723, stddev=0.0559], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.22), mean=0.166, stddev=0.0229] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651472, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.53,0.56,0.59 0.61,0.64,0.68,0.72,0.77 0.81,0.84,0.85,0.88), mean=0.684, stddev=0.0646], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.173, stddev=0.0237] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0266838, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.81,-0.76,-0.62 -0.44,-0.32,-0.01,0.29,0.42 0.60,0.81,0.86,0.91), mean=-0.00452, stddev=0.36], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.19,0.20,0.24 0.29,0.35,0.45,0.51,0.54 0.55,0.57,0.57,0.63), mean=0.432, stddev=0.0936] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651472, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.49,0.52 0.55,0.59,0.63,0.67,0.70 0.72,0.76,0.79,0.89), mean=0.63, stddev=0.0612], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0184] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00651472, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.69,-0.65,-0.53 -0.37,-0.27,-0.009,0.24,0.35 0.53,0.69,0.72,0.75), mean=-0.00545, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.43 0.50,0.58,0.67,0.72,0.75 0.76,0.78,0.79,0.83), mean=0.648, stddev=0.0956] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.76114e-06, count-zeroing-boundaries=221856
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.239669
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000150522, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09081, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.6,2.7 2.8,2.9,3.0,3.1), mean=1.97, stddev=0.639], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.93,1.0,1.1 1.1,1.2,1.4,1.6,1.9 2.1,2.2,2.2,2.3), mean=1.43, stddev=0.294], bias-{mean,stddev}=-0.0108,0.6887, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000150522, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04364, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.60,0.62 0.63,0.65,0.69,0.73,0.77 0.80,0.85,0.93,2.1), mean=0.699, stddev=0.083], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.5,2.6 2.7,2.8,2.8,2.8), mean=1.91, stddev=0.593], bias-{mean,stddev}=4.345e-09,0.02119, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.42), mean=0.0168, stddev=0.0137], oderiv-count=561280
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/339.mdl exp/nnet3/tdnn_lstm1c_sp/340.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.76871 tdnn2.affine:3.61265 lstm1.W_all:2.83248 lstm1.lstm_nonlin:0.0658412 lstm1.W_rp:1.23819 tdnn3.affine:2.60159 tdnn4.affine:2.67249 lstm2.W_all:1.97501 lstm2.lstm_nonlin:0.0356907 lstm2.W_rp:0.844222 tdnn5.affine:2.1252 tdnn6.affine:2.24104 lstm3.W_all:2.16065 lstm3.lstm_nonlin:0.0527173 lstm3.W_rp:0.872333 output.affine:2.3221 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8378 tdnn2.affine:10.7184 lstm1.W_all:20.628 lstm1.lstm_nonlin:2.44014 lstm1.W_rp:15.406 tdnn3.affine:8.40613 tdnn4.affine:7.79987 lstm2.W_all:17.0172 lstm2.lstm_nonlin:1.6707 lstm2.W_rp:14.6473 tdnn5.affine:8.00544 tdnn6.affine:7.75525 lstm3.W_all:24.1177 lstm3.lstm_nonlin:3.08456 lstm3.W_rp:35.1875 output.affine:32.2882 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.29295 tdnn2.affine:0.336791 lstm1.W_all:0.137369 lstm1.lstm_nonlin:0.0270449 lstm1.W_rp:0.0803802 tdnn3.affine:0.30671 tdnn4.affine:0.340948 lstm2.W_all:0.116076 lstm2.lstm_nonlin:0.0213182 lstm2.W_rp:0.0576262 tdnn5.affine:0.263207 tdnn6.affine:0.287384 lstm3.W_all:0.0895779 lstm3.lstm_nonlin:0.0170932 lstm3.W_rp:0.0247674 output.affine:0.0718265 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:15:42 KST 2020, elapsed time 0 seconds
