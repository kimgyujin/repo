# nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/380.mdl 
# Started at Thu Jul 30 12:31:40 KST 2020
#
nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/380.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00011679, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03252, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.007 0.008,0.02,0.57,0.73,0.81 0.88,0.95,0.99,1.2), mean=0.47, stddev=0.31], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.16 0.18,0.22,0.67,0.92,1.2 1.3,1.4,1.5,1.5), mean=0.643, stddev=0.369], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.04,0.06,0.27,0.96,1.4 1.7,1.9,2.0,2.4), mean=0.503, stddev=0.545], bias-{mean,stddev}=-0.003548,0.06157, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0.199355, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,2e-05,2e-05,4e-05 6e-05,0.0001,0.04,0.09,0.11 0.13,0.14,0.15,0.18), mean=0.0473, stddev=0.0454], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.008,0.02,0.03 0.04,0.07,0.38,0.59,0.71 0.79,0.88,0.91,0.99), mean=0.354, stddev=0.264], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.01 0.02,0.03,0.34,0.49,0.57 0.71,0.79,0.88,1.7), mean=0.325, stddev=0.236], oderiv-count=1.19693e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37903.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,8e-06,1e-05,3e-05 6e-05,0.0002,0.04,0.09,0.11 0.13,0.15,0.16,0.18), mean=0.0452, stddev=0.0445], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.0001,0.0001,0.0002 0.0003,0.0009,0.08,0.11,0.12 0.14,0.14,0.15,0.16), mean=0.0632, stddev=0.05]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00011679, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01172, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.35,0.36 0.38,0.40,0.45,0.51,0.55 0.59,0.63,0.66,0.73), mean=0.458, stddev=0.0679], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.004 0.005,0.01,0.28,0.34,0.37 0.40,0.43,0.48,0.73), mean=0.223, stddev=0.148], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.06,0.08,0.18,0.53,0.86 1.1,1.2,1.3,2.0), mean=0.322, stddev=0.332], bias-{mean,stddev}=-0.03331,0.04041, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.33e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.20 0.21,0.23,0.26,0.30,0.32 0.34,0.36,0.40,0.47), mean=0.265, stddev=0.0453], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.36,0.38,0.39 0.40,0.41,0.44,0.47,0.49 0.51,0.53,0.54,0.56), mean=0.444, stddev=0.0384], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.06,0.06 0.07,0.08,0.08,0.10), mean=0.051, stddev=0.01], oderiv-count=1.22371e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37082.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.23,0.26,0.31,0.33 0.35,0.38,0.41,0.51), mean=0.268, stddev=0.049], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.37,0.38 0.41,0.43,0.48,0.54,0.57 0.60,0.63,0.66,0.74), mean=0.485, stddev=0.0646]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00011679, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01762, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,6e-07,2e-06,1e-05 0.0003,0.17,0.41,0.59,0.66 0.73,0.79,0.85,1.1), mean=0.385, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.37,0.42 0.50,0.70,0.81,0.90,0.96 1.0,1.1,1.1,1.3), mean=0.786, stddev=0.169], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,4e-07,5e-07 8e-07,0.14,0.33,0.82,1.4 1.9,2.3,2.5,4.5), mean=0.537, stddev=0.598], bias-{mean,stddev}=0.002302,0.02696, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00011679, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0795, w_fc-rms=0.02522, w_oc-rms=0.04606, count=1.51e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636419, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.48,0.50,0.54 0.70,0.77,0.79,0.84), mean=0.494, stddev=0.0743], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.19 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0202] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636419, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.44,0.46,0.47 0.48,0.48,0.50,0.53,0.57 0.65,0.73,0.78,0.81), mean=0.515, stddev=0.0582], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.19 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0189] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0155188, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.87,-0.85,-0.47 -0.27,-0.13,0.0009,0.15,0.28 0.63,0.81,0.87,0.89), mean=0.0153, stddev=0.298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.23,0.28 0.39,0.45,0.58,0.74,1.0 1.0,1.0,1.0,1.0), mean=0.611, stddev=0.212] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636419, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.57,0.58,0.67), mean=0.462, stddev=0.0412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0196] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00636419, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.74,-0.70,-0.32 -0.18,-0.09,0.0003,0.10,0.21 0.43,0.64,0.74,0.82), mean=0.0103, stddev=0.231], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.40,0.52 0.72,0.80,0.88,0.93,1.0 1.0,1.0,1.0,1.0), mean=0.853, stddev=0.134] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.01052e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.37127e-05, count-zeroing-boundaries=298213
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.173554
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00011679, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03967, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.42,0.45 0.50,0.56,0.86,1.1,1.2 1.3,1.3,1.4,1.4), mean=0.859, stddev=0.284], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0006,0.0009,0.002 0.007,0.35,0.55,0.72,0.93 1.2,1.4,1.5,1.8), mean=0.544, stddev=0.337], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 3e-07,5e-07,1e-06,1.1,1.9 2.2,2.4,2.7,3.2), mean=0.415, stddev=0.804], bias-{mean,stddev}=0.01264,0.259, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00011679, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01271, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.22,0.24,0.26 0.27,0.30,0.35,0.40,0.43 0.46,0.51,0.52,0.56), mean=0.349, stddev=0.0641], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.16,0.18,0.28,0.37,0.40 0.42,0.43,0.45,0.48), mean=0.274, stddev=0.095], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,7e-08,8e-08,9e-08 1e-07,2e-07,3e-05,0.38,0.70 0.91,1.1,1.1,1.3), mean=0.179, stddev=0.307], bias-{mean,stddev}=0.001417,0.009598, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.15e+06, self-repaired-proportion=0.00347092, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.009,0.01,0.02 0.03,0.05,0.08,0.11,0.12 0.14,0.15,0.16,0.17), mean=0.0788, stddev=0.0339], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.10,0.13,0.16 0.22,0.33,0.46,0.58,0.63 0.68,0.72,0.74,0.83), mean=0.45, stddev=0.152], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.09,0.09,0.10 0.10,0.11,0.12,0.15,0.19 0.23,0.27,0.30,0.39), mean=0.136, stddev=0.044], oderiv-count=1.10003e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34617.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.12 0.13,0.15,0.16,0.18), mean=0.0778, stddev=0.0333], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.04,0.06,0.07 0.09,0.11,0.13,0.15,0.16 0.17,0.18,0.18,0.20), mean=0.125, stddev=0.0282]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00011679, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008317, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.26,0.27 0.28,0.29,0.32,0.36,0.38 0.40,0.42,0.43,0.46), mean=0.326, stddev=0.0382], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.12,0.13,0.14 0.15,0.16,0.18,0.21,0.24 0.26,0.29,0.30,0.36), mean=0.186, stddev=0.0384], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.07,0.09,0.16,0.39,0.62 0.75,0.84,0.88,1.0), mean=0.249, stddev=0.215], bias-{mean,stddev}=-0.02727,0.01889, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.89e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.21,0.22,0.25,0.27,0.29 0.31,0.32,0.33,0.36), mean=0.249, stddev=0.0314], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.36,0.37,0.38 0.39,0.40,0.43,0.45,0.46 0.46,0.48,0.49,0.51), mean=0.426, stddev=0.0279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0371, stddev=0.00266], oderiv-count=1.11402e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32152.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.25,0.28,0.29 0.31,0.33,0.33,0.36), mean=0.251, stddev=0.0329], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.37,0.39,0.40 0.42,0.44,0.48,0.52,0.56 0.59,0.63,0.64,0.77), mean=0.484, stddev=0.0585]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00011679, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0144, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,6e-06,2e-05 6e-05,0.001,0.33,0.51,0.58 0.62,0.68,0.71,0.91), mean=0.284, stddev=0.232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.35 0.43,0.60,0.66,0.72,0.77 0.80,0.87,0.92,1.3), mean=0.644, stddev=0.13], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,4e-07 0.0002,0.10,0.24,0.63,1.2 1.5,1.8,2.0,4.3), mean=0.424, stddev=0.502], bias-{mean,stddev}=0.005236,0.0316, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00011679, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04905, w_fc-rms=0.01492, w_oc-rms=0.04049, count=1.38e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642061, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.46 0.47,0.48,0.50,0.51,0.55 0.60,0.65,0.68,0.77), mean=0.504, stddev=0.0452], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0157] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642061, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.46,0.47 0.48,0.50,0.50,0.53,0.56 0.59,0.64,0.65,0.71), mean=0.513, stddev=0.0378], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0161] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00642061, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.79,-0.73,-0.42 -0.23,-0.10,0.0003,0.12,0.31 0.49,0.64,0.70,0.77), mean=0.00813, stddev=0.25], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.30,0.38,0.41 0.46,0.53,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.719, stddev=0.218] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642061, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.45,0.47,0.50,0.50,0.51 0.52,0.55,0.57,0.68), mean=0.489, stddev=0.0282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0183] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00642061, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.60,-0.54,-0.29 -0.16,-0.07,0.0001,0.09,0.21 0.36,0.48,0.55,0.62), mean=0.00667, stddev=0.187], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.55,0.58,0.68 0.76,0.82,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.893, stddev=0.107] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=5.73847e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.7113e-05, count-zeroing-boundaries=262957
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.173554
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00011679, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03777, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.49,0.53 0.56,0.60,0.83,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.831, stddev=0.225], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.002 0.004,0.01,0.56,0.80,0.92 1.0,1.2,1.3,1.5), mean=0.478, stddev=0.377], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-07,2e-07,2e-07 3e-07,5e-07,1e-05,1.3,1.7 1.9,2.1,2.3,2.7), mean=0.446, stddev=0.737], bias-{mean,stddev}=-0.0007392,0.2054, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00011679, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01195, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.25 0.26,0.28,0.32,0.37,0.41 0.45,0.48,0.49,0.54), mean=0.329, stddev=0.0587], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.24,0.35,0.38 0.39,0.41,0.42,0.45), mean=0.26, stddev=0.0814], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,8e-08,9e-08,1e-07 1e-07,3e-07,0.004,0.36,0.69 0.84,0.93,0.97,1.1), mean=0.179, stddev=0.282], bias-{mean,stddev}=0.0008795,0.007148, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.5e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.13,0.14,0.15), mean=0.0639, stddev=0.0287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.18 0.21,0.29,0.45,0.56,0.60 0.63,0.68,0.70,0.73), mean=0.431, stddev=0.144], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.11,0.13,0.16,0.19 0.21,0.23,0.24,0.26), mean=0.137, stddev=0.0325], oderiv-count=951424
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29687.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.13,0.14,0.16), mean=0.0662, stddev=0.0289], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.09,0.11,0.13,0.14 0.15,0.16,0.16,0.18), mean=0.11, stddev=0.0251]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00011679, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008331, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.16,0.21 0.26,0.28,0.33,0.38,0.40 0.41,0.42,0.43,0.48), mean=0.324, stddev=0.0587], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.15,0.17,0.22,0.24 0.28,0.30,0.33,0.40), mean=0.185, stddev=0.0445], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.08,0.14,0.39,0.64 0.76,0.85,0.88,0.98), mean=0.24, stddev=0.225], bias-{mean,stddev}=-0.02069,0.02334, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.04e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.16,0.19 0.21,0.23,0.27,0.29,0.31 0.32,0.34,0.36,0.40), mean=0.263, stddev=0.0406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.36 0.37,0.39,0.42,0.44,0.46 0.46,0.48,0.49,0.52), mean=0.416, stddev=0.032], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0305, stddev=0.00298], oderiv-count=980960
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27222.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.19 0.22,0.24,0.27,0.30,0.32 0.33,0.35,0.37,0.50), mean=0.27, stddev=0.0429], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.27,0.35 0.41,0.46,0.53,0.60,0.64 0.66,0.71,0.76,1.1), mean=0.527, stddev=0.0988]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00011679, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02075, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.27,0.29 0.31,0.35,0.49,0.66,0.72 0.76,0.85,0.91,0.99), mean=0.506, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.60,0.63,0.71 0.78,0.81,0.88,1.1,1.2 1.3,1.4,1.5,1.9), mean=0.929, stddev=0.181], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,2e-06,0.0001 0.08,0.12,0.29,0.92,1.8 2.2,2.6,2.7,6.9), mean=0.594, stddev=0.737], bias-{mean,stddev}=0.01308,0.01669, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00011679, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.109, w_fc-rms=0.04413, w_oc-rms=0.0746, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00648875, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.59,0.60,0.62 0.64,0.67,0.72,0.76,0.78 0.81,0.83,0.85,0.89), mean=0.717, stddev=0.0557], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.13 0.14,0.15,0.17,0.19,0.19 0.20,0.20,0.20,0.22), mean=0.169, stddev=0.0212] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00648875, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.53,0.56,0.58 0.60,0.62,0.67,0.71,0.76 0.80,0.84,0.85,0.89), mean=0.672, stddev=0.0644], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.13 0.15,0.17,0.18,0.20,0.20 0.21,0.21,0.21,0.23), mean=0.179, stddev=0.0228] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0289611, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.84,-0.71,-0.60 -0.44,-0.31,-0.01,0.29,0.44 0.56,0.78,0.84,0.92), mean=-0.00538, stddev=0.35], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.20,0.23 0.31,0.36,0.44,0.48,0.51 0.52,0.54,0.55,0.64), mean=0.421, stddev=0.0827] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00648875, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.50,0.53 0.55,0.59,0.64,0.67,0.70 0.72,0.77,0.80,0.88), mean=0.634, stddev=0.0591], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.17,0.18,0.19,0.19 0.19,0.20,0.20,0.21), mean=0.175, stddev=0.0173] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00648875, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.74,-0.65,-0.55 -0.39,-0.28,-0.01,0.25,0.37 0.53,0.70,0.76,0.87), mean=-0.00633, stddev=0.315], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.30,0.32,0.37 0.46,0.54,0.63,0.68,0.70 0.72,0.73,0.74,0.80), mean=0.6, stddev=0.1] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.47311e-06, count-zeroing-boundaries=223558
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.173554
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00011679, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08939, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.1,1.1 1.2,1.3,1.7,2.6,2.7 2.7,2.8,2.9,3.1), mean=1.94, stddev=0.636], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.89,1.0,1.1 1.1,1.2,1.4,1.6,1.8 2.0,2.1,2.1,2.3), mean=1.42, stddev=0.265], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-07,1e-06,1e-06,1e-06 2e-06,1e-05,0.08,3.1,3.7 4.2,4.8,5.5,6.0), mean=1.19, stddev=1.66], bias-{mean,stddev}=-0.03086,0.6057, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00011679, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04257, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.59,0.60 0.62,0.64,0.67,0.72,0.75 0.78,0.83,0.89,2.1), mean=0.682, stddev=0.0815], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.1,1.1 1.2,1.2,1.6,2.5,2.6 2.6,2.7,2.8,2.9), mean=1.86, stddev=0.595], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,1e-06,1e-06 2e-06,6e-06,0.03,2.9,3.9 4.2,4.6,4.7,6.2), mean=1.1, stddev=1.61], bias-{mean,stddev}=5.117e-09,0.02197, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=584000
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:31:40 KST 2020, elapsed time 0 seconds
