# nnet3-info exp/nnet3/tdnn_lstm1c_sp/284.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/283.mdl exp/nnet3/tdnn_lstm1c_sp/284.mdl 
# Started at Thu Jul 30 11:53:29 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/284.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000214719, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03282, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.009,0.01,0.01 0.02,0.04,0.57,0.71,0.80 0.89,0.96,1.0,1.2), mean=0.484, stddev=0.298], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.15 0.18,0.22,0.64,0.92,1.3 1.4,1.5,1.6,1.6), mean=0.638, stddev=0.39], bias-{mean,stddev}=0.0004768,0.06153, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.62e+05, self-repaired-proportion=0.219012, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,1e-05,2e-05,6e-05 0.0001,0.0003,0.06,0.10,0.11 0.13,0.15,0.16,0.23), mean=0.0553, stddev=0.0461], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.005,0.009,0.02 0.04,0.06,0.42,0.60,0.71 0.80,0.87,0.89,1.0), mean=0.381, stddev=0.261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.03,0.06,0.27,0.36,0.42 0.50,0.64,0.69,1.4), mean=0.26, stddev=0.167], oderiv-count=1.19738e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35995, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,8e-06,1e-05,3e-05 7e-05,0.0003,0.06,0.09,0.11 0.13,0.15,0.17,0.24), mean=0.0531, stddev=0.0455], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0001,0.0002,0.0003 0.0006,0.002,0.09,0.12,0.13 0.14,0.15,0.15,0.17), mean=0.0745, stddev=0.0514]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000214719, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01227, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.37,0.39 0.40,0.42,0.47,0.53,0.57 0.60,0.65,0.66,0.75), mean=0.48, stddev=0.0669], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.009 0.01,0.02,0.29,0.35,0.38 0.41,0.45,0.52,0.76), mean=0.24, stddev=0.145], bias-{mean,stddev}=-0.02464,0.03963, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.24,0.25 0.26,0.27,0.31,0.34,0.37 0.39,0.42,0.45,0.50), mean=0.31, stddev=0.045], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.37,0.38,0.40 0.41,0.42,0.45,0.47,0.49 0.51,0.52,0.53,0.55), mean=0.449, stddev=0.0337], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0421, stddev=0.00751], oderiv-count=1.07158e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35214.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.25 0.26,0.28,0.31,0.35,0.38 0.40,0.43,0.45,0.52), mean=0.315, stddev=0.0469], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.45,0.47 0.49,0.51,0.56,0.62,0.65 0.69,0.72,0.73,0.79), mean=0.567, stddev=0.0642]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000214719, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01827, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,3e-06,6e-06,4e-05 0.001,0.16,0.43,0.61,0.70 0.76,0.83,0.87,1.1), mean=0.399, stddev=0.24], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.42,0.46 0.54,0.73,0.84,0.93,1.0 1.1,1.1,1.2,1.3), mean=0.817, stddev=0.166], bias-{mean,stddev}=0.00269,0.02799, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000214719, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06343, w_fc-rms=0.03127, w_oc-rms=0.04478, count=1.48e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638673, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.70,0.79,0.81,0.86), mean=0.494, stddev=0.0792], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.17 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0234] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638673, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.44,0.45,0.47 0.48,0.49,0.50,0.54,0.58 0.65,0.76,0.79,0.85), mean=0.521, stddev=0.0647], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0227] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0374513, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.89,-0.85,-0.54 -0.27,-0.13,0.001,0.16,0.33 0.54,0.86,0.89,0.91), mean=0.0156, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.19,0.24 0.37,0.43,0.56,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.598, stddev=0.222] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638673, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.42,0.45,0.50,0.50 0.51,0.54,0.57,0.73), mean=0.458, stddev=0.0408], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.219, stddev=0.0212] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00638673, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.70,-0.64,-0.34 -0.16,-0.08,0.0005,0.10,0.22 0.34,0.64,0.71,0.75), mean=0.011, stddev=0.215], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.41,0.44,0.55 0.77,0.83,0.89,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.871, stddev=0.122] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=4.33009e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000132546, count-zeroing-boundaries=294238
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.246281
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000214719, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04062, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.36,0.38 0.42,0.49,0.88,1.2,1.3 1.4,1.4,1.4,1.5), mean=0.856, stddev=0.354], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.001,0.003 0.01,0.32,0.55,0.75,0.90 1.2,1.6,1.7,2.0), mean=0.55, stddev=0.356], bias-{mean,stddev}=0.01276,0.2759, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000214719, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01348, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.21,0.23,0.24 0.27,0.30,0.36,0.43,0.48 0.51,0.54,0.56,0.63), mean=0.367, stddev=0.0829], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.14,0.16,0.29,0.41,0.43 0.45,0.47,0.48,0.52), mean=0.283, stddev=0.12], bias-{mean,stddev}=0.002813,0.01187, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.25e+05, self-repaired-proportion=0.00426471, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.02,0.03,0.04 0.05,0.07,0.10,0.12,0.14 0.15,0.17,0.18,0.20), mean=0.0959, stddev=0.0334], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.13,0.17,0.23 0.29,0.38,0.52,0.62,0.65 0.68,0.71,0.72,0.84), mean=0.497, stddev=0.139], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.08,0.08,0.08 0.09,0.09,0.11,0.13,0.15 0.18,0.22,0.24,0.29), mean=0.116, stddev=0.032], oderiv-count=1.05203e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32872.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.03,0.04 0.05,0.07,0.10,0.12,0.13 0.15,0.16,0.18,0.22), mean=0.0949, stddev=0.0334], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.07,0.09,0.11 0.12,0.13,0.14,0.17,0.18 0.19,0.20,0.21,0.24), mean=0.146, stddev=0.0271]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000214719, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009145, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.30 0.31,0.32,0.35,0.39,0.42 0.45,0.47,0.48,0.55), mean=0.358, stddev=0.0458], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.12,0.13,0.14 0.15,0.17,0.20,0.24,0.26 0.29,0.31,0.34,0.39), mean=0.203, stddev=0.0461], bias-{mean,stddev}=-0.02289,0.01969, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.92e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.23 0.24,0.26,0.28,0.32,0.33 0.35,0.36,0.37,0.48), mean=0.287, stddev=0.0355], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.49,0.52), mean=0.435, stddev=0.0266], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0339, stddev=0.00282], oderiv-count=1.06992e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30530.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.25,0.26,0.29,0.32,0.34 0.35,0.37,0.37,0.49), mean=0.29, stddev=0.0368], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.46,0.47 0.48,0.50,0.54,0.61,0.64 0.68,0.71,0.73,0.99), mean=0.556, stddev=0.0677]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000214719, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01515, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,1e-06,2e-06,6e-06 3e-05,0.0005,0.35,0.55,0.61 0.66,0.71,0.73,0.91), mean=0.297, stddev=0.247], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.31,0.35,0.40 0.49,0.62,0.69,0.76,0.80 0.87,0.96,1.0,1.4), mean=0.678, stddev=0.133], bias-{mean,stddev}=0.004895,0.03664, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000214719, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03748, w_fc-rms=0.01567, w_oc-rms=0.03625, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064424, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.50,0.52,0.57 0.61,0.68,0.72,0.80), mean=0.505, stddev=0.0529], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0182] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064424, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.45,0.46 0.48,0.49,0.50,0.53,0.57 0.60,0.65,0.67,0.75), mean=0.514, stddev=0.0431], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.18,0.19 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0191] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00708339, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.81,-0.69,-0.50 -0.27,-0.13,0.001,0.16,0.32 0.56,0.72,0.77,0.85), mean=0.0117, stddev=0.277], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.27,0.39 0.45,0.51,0.62,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.707, stddev=0.231] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064424, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.44 0.45,0.46,0.50,0.50,0.52 0.54,0.57,0.58,0.65), mean=0.49, stddev=0.0307], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0195] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0064424, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.70,-0.58,-0.44,-0.31 -0.17,-0.08,0.0003,0.09,0.21 0.37,0.48,0.54,0.62), mean=0.0087, stddev=0.183], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.57,0.60,0.72 0.78,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.905, stddev=0.0977] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=8.7232e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.04657e-05, count-zeroing-boundaries=259479
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.246281
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000214719, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03948, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.45,0.49,0.54 0.56,0.60,0.87,1.1,1.2 1.2,1.3,1.3,1.4), mean=0.863, stddev=0.255], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0009,0.001,0.002 0.003,0.009,0.58,0.84,0.97 1.1,1.3,1.5,1.6), mean=0.494, stddev=0.402], bias-{mean,stddev}=0.002295,0.2202, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000214719, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01295, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.26 0.28,0.30,0.34,0.40,0.45 0.49,0.54,0.55,0.61), mean=0.355, stddev=0.0692], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.38,0.41 0.43,0.45,0.46,0.51), mean=0.28, stddev=0.0931], bias-{mean,stddev}=0.000673,0.006527, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.28e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.08,0.11,0.12 0.13,0.14,0.14,0.18), mean=0.0784, stddev=0.03], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.17,0.21 0.26,0.34,0.50,0.60,0.64 0.66,0.70,0.71,0.74), mean=0.475, stddev=0.14], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.11,0.14,0.16 0.18,0.20,0.21,0.23), mean=0.122, stddev=0.0254], oderiv-count=1.02835e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28188, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.08,0.10,0.12 0.13,0.14,0.15,0.18), mean=0.0798, stddev=0.0302], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.09 0.10,0.11,0.13,0.15,0.16 0.17,0.17,0.17,0.20), mean=0.127, stddev=0.023]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000214719, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008991, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.21,0.24 0.28,0.31,0.35,0.40,0.42 0.45,0.46,0.48,0.52), mean=0.35, stddev=0.0609], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.16,0.19,0.23,0.27 0.30,0.33,0.35,0.42), mean=0.199, stddev=0.0484], bias-{mean,stddev}=-0.01928,0.02488, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.42e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.19,0.22 0.24,0.26,0.30,0.33,0.35 0.36,0.38,0.38,0.48), mean=0.297, stddev=0.0431], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.36,0.37 0.38,0.40,0.42,0.45,0.46 0.47,0.49,0.49,0.53), mean=0.423, stddev=0.0313], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0277, stddev=0.00235], oderiv-count=913760
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25846, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.20,0.22 0.25,0.27,0.31,0.34,0.35 0.36,0.38,0.40,0.56), mean=0.301, stddev=0.0451], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.31,0.33,0.41 0.47,0.52,0.59,0.67,0.70 0.75,0.79,0.81,1.2), mean=0.59, stddev=0.102]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000214719, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02166, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.30,0.32 0.34,0.38,0.52,0.67,0.75 0.80,0.85,0.88,1.2), mean=0.531, stddev=0.151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.67,0.69,0.75 0.78,0.82,0.89,1.1,1.3 1.4,1.6,1.7,2.0), mean=0.964, stddev=0.213], bias-{mean,stddev}=0.01716,0.02237, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000214719, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1028, w_fc-rms=0.04887, w_oc-rms=0.0698, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650962, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.58,0.61 0.63,0.66,0.72,0.77,0.79 0.82,0.84,0.86,0.88), mean=0.715, stddev=0.0623], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.14,0.15,0.17,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.169, stddev=0.0232] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650962, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.50,0.55,0.58 0.60,0.64,0.69,0.74,0.78 0.82,0.85,0.86,0.88), mean=0.691, stddev=0.071], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.14,0.16,0.18,0.19,0.20 0.20,0.20,0.21,0.22), mean=0.171, stddev=0.0235] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0384044, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.87,-0.83,-0.60 -0.46,-0.34,-0.009,0.31,0.44 0.58,0.71,0.83,0.92), mean=-0.00895, stddev=0.362], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.17,0.20,0.23 0.29,0.36,0.44,0.50,0.52 0.54,0.56,0.57,0.60), mean=0.424, stddev=0.0898] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650962, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.50,0.54 0.57,0.60,0.64,0.68,0.70 0.73,0.76,0.78,0.87), mean=0.637, stddev=0.0588], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.15,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.178, stddev=0.0177] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00650962, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.72,-0.69,-0.49 -0.38,-0.26,-0.002,0.25,0.35 0.46,0.62,0.69,0.79), mean=-0.00852, stddev=0.297], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.39,0.44 0.51,0.60,0.68,0.73,0.75 0.77,0.79,0.79,0.83), mean=0.657, stddev=0.0939] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=220621
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.246281
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000214719, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08868, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.6,2.6 2.7,2.8,2.9,3.0), mean=1.93, stddev=0.599], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.98,1.0,1.1 1.1,1.2,1.3,1.6,1.8 2.0,2.1,2.2,2.3), mean=1.4, stddev=0.273], bias-{mean,stddev}=-0.01511,0.6026, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000214719, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04424, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.60,0.61,0.62 0.64,0.66,0.70,0.74,0.78 0.81,0.86,0.93,2.2), mean=0.708, stddev=0.0855], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.7,2.8,2.8,2.9), mean=1.95, stddev=0.567], bias-{mean,stddev}=6.742e-09,0.02749, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=586560
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/283.mdl exp/nnet3/tdnn_lstm1c_sp/284.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.6571 tdnn2.affine:4.56326 lstm1.W_all:3.60785 lstm1.lstm_nonlin:0.0837693 lstm1.W_rp:1.43532 tdnn3.affine:3.20395 tdnn4.affine:3.47245 lstm2.W_all:2.58508 lstm2.lstm_nonlin:0.0459809 lstm2.W_rp:1.03232 tdnn5.affine:2.67122 tdnn6.affine:2.88757 lstm3.W_all:2.81134 lstm3.lstm_nonlin:0.0725067 lstm3.W_rp:1.1763 output.affine:3.02785 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.0372 tdnn2.affine:11.1058 lstm1.W_all:21.2826 lstm1.lstm_nonlin:1.90879 lstm1.W_rp:15.5872 tdnn3.affine:8.58723 tdnn4.affine:8.26498 lstm2.W_all:17.6909 lstm2.lstm_nonlin:1.24159 lstm2.W_rp:14.9452 tdnn5.affine:8.25059 tdnn6.affine:8.12997 lstm3.W_all:25.2145 lstm3.lstm_nonlin:3.04523 lstm3.W_rp:34.0249 output.affine:32.7462 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.356121 tdnn2.affine:0.40973 lstm1.W_all:0.1692 lstm1.lstm_nonlin:0.0441163 lstm1.W_rp:0.0920285 tdnn3.affine:0.373616 tdnn4.affine:0.418164 lstm2.W_all:0.145866 lstm2.lstm_nonlin:0.0374269 lstm2.W_rp:0.0689816 tdnn5.affine:0.322971 tdnn6.affine:0.353498 lstm3.W_all:0.111288 lstm3.lstm_nonlin:0.0238338 lstm3.W_rp:0.0346686 output.affine:0.0925587 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:53:29 KST 2020, elapsed time 0 seconds
