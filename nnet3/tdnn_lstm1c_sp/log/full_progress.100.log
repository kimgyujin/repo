# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/99.mdl exp/nnet3/tdnn_lstm1c_sp/100.mdl 
# Started at Thu Jul 30 10:40:37 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/99.mdl exp/nnet3/tdnn_lstm1c_sp/100.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000219854, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0206, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.01,0.02 0.05,0.29,0.37,0.42,0.45 0.47,0.51,0.55,0.68), mean=0.331, stddev=0.133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.12 0.13,0.16,0.43,0.57,0.68 0.85,1.0,1.0,1.2), mean=0.409, stddev=0.23], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.08,0.26,0.60,0.83 0.99,1.2,1.3,1.4), mean=0.351, stddev=0.312], bias-{mean,stddev}=0.0002652,0.02509, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-817.047, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000219854, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009249, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.30,0.31 0.32,0.33,0.36,0.39,0.41 0.42,0.43,0.44,0.45), mean=0.364, stddev=0.0345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.005,0.01 0.04,0.18,0.22,0.25,0.27 0.28,0.30,0.31,0.36), mean=0.196, stddev=0.0773], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.07,0.10,0.21,0.45,0.62 0.78,0.91,0.97,1.1), mean=0.288, stddev=0.225], bias-{mean,stddev}=0.000912,0.01444, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-817.047, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000219854, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0004,0.001,0.007 0.03,0.07,0.12,0.20,0.24 0.28,0.32,0.33,0.54), mean=0.132, stddev=0.0794], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.10 0.11,0.17,0.29,0.32,0.33 0.35,0.36,0.37,0.41), mean=0.264, stddev=0.0795], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,4e-06,4e-06,5e-06 2e-05,0.06,0.15,0.31,0.45 0.58,0.78,0.87,1.1), mean=0.201, stddev=0.189], bias-{mean,stddev}=0.0001323,0.002594, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000219854, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001911, w_fc-rms=0.002711, w_oc-rms=0.004412, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000375336, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-1.8,-1.4,-0.72 -0.38,-0.07,0.50,1.0,1.4 1.6,2.1,2.3,3.0), mean=0.478, stddev=0.745], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.62,-0.46,-0.29 -0.12,0.02,0.25,0.43,0.58 0.73,0.84,0.95,1.5), mean=0.229, stddev=0.301] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000375336, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-1.3,-1.0,-0.51 -0.26,0.10,0.51,1.0,1.4 1.7,2.1,2.3,2.9), mean=0.547, stddev=0.69], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.46,-0.38,-0.21 -0.05,0.08,0.25,0.41,0.52 0.65,0.84,0.89,1.2), mean=0.244, stddev=0.252] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00367733, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-13,-11,-10,-7.8 -5.7,-3.7,-0.01,3.3,5.4 7.3,9.4,11,18), mean=-0.15, stddev=4.49], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.9,-7.1,-6.0,-4.9 -3.6,-2.0,0.94,2.6,4.0 5.3,6.8,7.7,10), mean=0.465, stddev=3.02] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000375336, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.7,-1.8,-1.5,-0.97 -0.54,-0.06,0.50,1.1,1.5 1.8,2.1,2.4,2.9), mean=0.501, stddev=0.832], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.74,-0.57,-0.34 -0.19,0.008,0.26,0.57,0.79 0.94,1.2,1.3,2.1), mean=0.286, stddev=0.392] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.447846, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-9.4,-8.3,-5.7 -4.8,-2.8,-0.09,2.6,4.2 5.6,7.3,8.6,16), mean=-0.127, stddev=3.6], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.0,-4.2,-3.9,-2.5 -1.6,-0.69,0.82,1.9,2.8 3.8,4.6,5.6,12), mean=0.713, stddev=1.94] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-8.45e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1269
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000219854, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00784, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.07,0.08,0.14,0.24,0.26 0.27,0.28,0.29,0.30), mean=0.162, stddev=0.0764], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.005,0.007,0.02 0.05,0.09,0.12,0.15,0.17 0.18,0.20,0.20,0.22), mean=0.118, stddev=0.0456], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,9e-07,1e-06,1e-06 2e-06,4e-06,4e-05,0.03,0.34 0.48,0.59,0.68,0.79), mean=0.0703, stddev=0.164], bias-{mean,stddev}=-3.766e-05,0.005647, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000219854, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00807, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.18,0.19,0.22,0.25,0.27 0.29,0.31,0.32,0.36), mean=0.222, stddev=0.0377], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.07,0.12,0.25,0.27 0.29,0.30,0.31,0.32), mean=0.162, stddev=0.0877], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,2e-06,2e-06 4e-06,8e-06,0.0004,0.13,0.41 0.60,0.76,0.86,1.0), mean=0.0965, stddev=0.204], bias-{mean,stddev}=0.002652,0.01722, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.18e+05, self-repaired-proportion=-0.025, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.17,-0.12,-0.07,-0.03 0.009,0.05,0.13,0.21,0.27 0.31,0.35,0.38,0.45), mean=0.135, stddev=0.102], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.35,-0.24,-0.13,0.01 0.11,0.27,0.49,0.72,0.86 0.95,1.1,1.1,1.3), mean=0.489, stddev=0.288]
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-817.047, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000219854, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006639, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.22,0.23 0.24,0.24,0.26,0.28,0.29 0.30,0.31,0.32,0.34), mean=0.261, stddev=0.0207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.15,0.17,0.18 0.19,0.20,0.21,0.25), mean=0.15, stddev=0.0215], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.08,0.10,0.17,0.32,0.43 0.53,0.64,0.68,0.79), mean=0.218, stddev=0.146], bias-{mean,stddev}=0.000952,0.008303, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=3.81e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.63,-0.35,-0.30,-0.14 -0.01,0.13,0.39,0.61,0.75 0.87,1.0,1.1,1.4), mean=0.385, stddev=0.307], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.70,-0.54,-0.45,-0.33 -0.11,0.02,0.38,0.72,0.89 1.0,1.2,1.3,1.7), mean=0.386, stddev=0.405], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.01 0.02,0.02,0.03,0.04,0.04 0.04,0.04,0.05,0.05), mean=0.0276, stddev=0.00906], oderiv-count=189760
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-817.047, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000219854, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,5e-06,9e-06,2e-05 7e-05,0.001,0.07,0.13,0.18 0.20,0.23,0.24,0.45), mean=0.076, stddev=0.068], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.09,0.19,0.21,0.22 0.23,0.24,0.26,0.29), mean=0.173, stddev=0.0568], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,4e-06,4e-06,4e-06 5e-05,0.03,0.09,0.20,0.29 0.40,0.55,0.60,0.73), mean=0.128, stddev=0.13], bias-{mean,stddev}=0.0001856,0.002562, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000219854, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001114, w_fc-rms=0.001302, w_oc-rms=0.00192, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000426616, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-0.96,-0.79,-0.45 -0.18,0.14,0.50,0.78,1.1 1.3,1.7,1.9,3.6), mean=0.469, stddev=0.547], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.44,-0.32,-0.13 -0.03,0.13,0.25,0.35,0.50 0.67,0.80,0.92,1.2), mean=0.247, stddev=0.241] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000426616, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.89,-0.65,-0.40 -0.12,0.10,0.50,0.68,0.99 1.3,1.6,1.7,2.3), mean=0.455, stddev=0.489], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.20,-0.17,-0.04 0.07,0.16,0.25,0.32,0.42 0.51,0.64,0.76,1.6), mean=0.245, stddev=0.175] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00473879, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-14,-9.8,-8.2,-6.1 -4.4,-2.2,0.01,2.2,4.7 6.6,9.2,11,13), mean=0.101, stddev=3.71], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.6,-6.0,-4.9,-3.6 -2.3,-0.79,1.0,2.0,3.4 4.8,6.0,6.4,8.7), mean=0.721, stddev=2.36] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000426616, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.1,-1.1,-0.94,-0.55 -0.30,0.07,0.50,0.81,1.2 1.5,2.0,2.3,3.8), mean=0.48, stddev=0.636], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.43,-0.31,-0.18 -0.009,0.13,0.25,0.40,0.53 0.70,0.82,0.86,1.4), mean=0.262, stddev=0.249] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000426616, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-7.4,-6.9,-5.2 -3.8,-1.8,0.03,1.8,3.6 5.3,7.3,8.3,12), mean=0.0565, stddev=2.97], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.6,-3.6,-3.0,-1.9 -1.1,0.02,1.0,1.5,2.2 3.0,3.5,4.3,5.0), mean=0.768, stddev=1.4] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-6.91e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1041
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000219854, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005261, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.08,0.08,0.11,0.15,0.16 0.17,0.17,0.18,0.18), mean=0.115, stddev=0.0334], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0006,0.0007,0.001 0.002,0.005,0.09,0.11,0.13 0.13,0.14,0.15,0.22), mean=0.069, stddev=0.0494], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,1e-06,1e-06 2e-06,2e-06,7e-05,0.10,0.24 0.31,0.36,0.40,0.47), mean=0.0539, stddev=0.107], bias-{mean,stddev}=0.000606,0.011, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000219854, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006614, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.14,0.15,0.18,0.21,0.23 0.24,0.27,0.28,0.30), mean=0.182, stddev=0.0334], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.09,0.10,0.14,0.19,0.20 0.21,0.23,0.24,0.26), mean=0.144, stddev=0.0457], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,7e-07,8e-07,1e-06 2e-06,8e-06,0.002,0.16,0.33 0.48,0.61,0.65,0.87), mean=0.087, stddev=0.163], bias-{mean,stddev}=-0.0004152,0.009856, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=4.48e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.7,-3.7,-3.3,-2.3 -1.4,-0.74,0.51,1.8,2.4 2.9,3.6,4.2,5.3), mean=0.459, stddev=1.62], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-22,-15,-14,-10 -7.3,-4.6,1.1,6.2,9.0 12,13,15,18), mean=0.936, stddev=6.54], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.14,0.20 0.26,0.31,0.34,0.44), mean=0.0643, stddev=0.0911], oderiv-count=40320
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-817.047, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000219854, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005491, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.17,0.18 0.19,0.20,0.21,0.24,0.25 0.26,0.26,0.27,0.29), mean=0.216, stddev=0.0238], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.06,0.09 0.10,0.11,0.12,0.14,0.15 0.16,0.18,0.19,0.22), mean=0.123, stddev=0.0243], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.06,0.07,0.13,0.26,0.36 0.46,0.55,0.61,0.68), mean=0.174, stddev=0.13], bias-{mean,stddev}=0.0003302,0.006777, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-817.047, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000219854, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005402, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.05 0.06,0.08,0.10,0.19,0.23 0.25,0.26,0.27,0.38), mean=0.123, stddev=0.0625], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.16,0.17,0.21,0.30,0.36 0.38,0.39,0.41,0.42), mean=0.235, stddev=0.0731], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.0001,0.0002,0.001 0.03,0.05,0.10,0.25,0.43 0.60,0.74,0.78,0.94), mean=0.167, stddev=0.181], bias-{mean,stddev}=7.294e-05,0.002367, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000219854, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.002641, w_fc-rms=0.004057, w_oc-rms=0.004716, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000509483, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.5,-4.4,-3.6,-2.7 -1.6,-0.78,0.85,2.4,3.1 3.6,4.8,5.2,6.4), mean=0.769, stddev=1.94], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.93,-0.70,-0.52 -0.40,-0.20,0.19,0.56,0.74 0.92,1.1,1.3,1.6), mean=0.181, stddev=0.449] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000509483, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.6,-3.9,-3.5,-2.8 -1.9,-0.88,0.65,2.5,3.5 4.2,4.7,5.4,8.3), mean=0.762, stddev=2.1], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-1.2,-1.1,-0.70 -0.39,-0.11,0.36,0.74,0.95 1.1,1.2,1.3,2.2), mean=0.303, stddev=0.55] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.15046, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-28,-24,-20,-17 -13,-7.6,-0.57,7.0,11 15,17,20,27), mean=-0.715, stddev=9.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-17,-9.6,-8.1,-5.3 -4.2,-2.2,1.2,4.3,5.6 6.9,8.4,9.4,12), mean=0.998, stddev=3.96] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.128677, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.1,-4.0,-3.6,-2.5 -1.6,-0.75,0.85,2.4,3.3 3.8,4.6,5.0,7.4), mean=0.816, stddev=1.98], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-1.4,-1.2,-0.86 -0.60,-0.37,0.08,0.53,0.85 1.0,1.3,1.4,2.2), mean=0.08, stddev=0.587] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.816166, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-25,-17,-15,-12 -9.9,-6.5,-0.57,5.4,8.9 12,15,17,26), mean=-0.394, stddev=7.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-14,-8.4,-6.8,-4.9 -3.8,-2.0,0.68,3.5,4.6 5.7,6.5,6.7,9.8), mean=0.586, stddev=3.35] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-5.38e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-804
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000219854, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006824, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.13,0.20,0.20 0.21,0.22,0.22,0.24), mean=0.148, stddev=0.0484], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.08,0.09,0.11,0.13,0.13 0.14,0.15,0.15,0.17), mean=0.107, stddev=0.0245], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,3e-05,4e-05,6e-05 0.0001,0.0003,0.04,0.20,0.29 0.35,0.42,0.44,0.49), mean=0.0966, stddev=0.122], bias-{mean,stddev}=-5.331e-05,0.007126, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000219854, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007368, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.06 0.07,0.08,0.11,0.14,0.16 0.18,0.21,0.23,0.40), mean=0.111, stddev=0.0411], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.24 0.25,0.26,0.33,0.40,0.42 0.43,0.44,0.46,0.48), mean=0.331, stddev=0.0684], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,4e-05,4e-05,6e-05 0.0001,0.0003,0.02,0.48,0.67 0.79,0.86,0.90,0.94), mean=0.19, stddev=0.28], bias-{mean,stddev}=-5.544e-11,0.001991, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.03,0.03 0.04,0.05,0.05,0.39), mean=0.0167, stddev=0.017], oderiv-count=65920

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.15718 tdnn2.affine:8.33663 lstm1.W_all:7.03175 lstm1.lstm_nonlin:0.125863 lstm1.W_rp:2.88403 tdnn3.affine:5.15501 tdnn4.affine:5.98219 lstm2.W_all:4.65203 lstm2.lstm_nonlin:0.0586917 lstm2.W_rp:1.94273 tdnn5.affine:4.2183 tdnn6.affine:4.94838 lstm3.W_all:6.28179 lstm3.lstm_nonlin:0.154107 lstm3.W_rp:2.51196 output.affine:5.45026 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.0117 tdnn2.affine:11.259 lstm1.W_all:20.0483 lstm1.lstm_nonlin:1.43589 lstm1.W_rp:11.524 tdnn3.affine:8.09314 tdnn4.affine:8.40784 lstm2.W_all:15.7105 lstm2.lstm_nonlin:0.725587 lstm2.W_rp:10.4751 tdnn5.affine:7.45059 tdnn6.affine:7.98927 lstm3.W_all:22.7986 lstm3.lstm_nonlin:1.84306 lstm3.W_rp:25.6572 output.affine:29.7522 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.686439 tdnn2.affine:0.745867 lstm1.W_all:0.350617 lstm1.lstm_nonlin:0.0872398 lstm1.W_rp:0.249987 tdnn3.affine:0.643079 tdnn4.affine:0.720693 lstm2.W_all:0.29558 lstm2.lstm_nonlin:0.0816181 lstm2.W_rp:0.185167 tdnn5.affine:0.569544 tdnn6.affine:0.624153 lstm3.W_all:0.274509 lstm3.lstm_nonlin:0.0852696 lstm3.W_rp:0.0977798 output.affine:0.183156 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:40:38 KST 2020, elapsed time 1 seconds
