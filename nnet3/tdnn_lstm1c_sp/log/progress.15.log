# nnet3-info exp/nnet3/tdnn_lstm1c_sp/15.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/14.mdl exp/nnet3/tdnn_lstm1c_sp/15.mdl 
# Started at Thu Jul 30 10:07:03 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/15.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000286971, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03083, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.009,0.01 0.02,0.07,0.56,0.68,0.74 0.79,0.86,0.89,1.1), mean=0.46, stddev=0.271], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.17,0.21,0.59,0.82,1.2 1.4,1.6,1.6,1.8), mean=0.593, stddev=0.377], bias-{mean,stddev}=-0.003706,0.06141, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.14e+06, self-repaired-proportion=0.207526, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,2e-06,4e-06,1e-05 4e-05,0.0003,0.06,0.09,0.11 0.12,0.14,0.14,0.18), mean=0.0544, stddev=0.0427], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0006,0.002,0.005 0.01,0.05,0.43,0.59,0.69 0.73,0.83,0.86,0.91), mean=0.373, stddev=0.254], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.03 0.04,0.12,0.33,0.43,0.47 0.56,0.69,0.73,0.88), mean=0.311, stddev=0.167], oderiv-count=1.20077e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34136.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,4e-07,7e-07,2e-06 1e-05,0.0001,0.06,0.08,0.10 0.12,0.14,0.15,0.20), mean=0.051, stddev=0.0417], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,3e-05,4e-05,7e-05 0.0002,0.0009,0.10,0.11,0.12 0.13,0.14,0.15,0.16), mean=0.0738, stddev=0.0502]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000286971, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01279, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.41,0.42 0.44,0.46,0.50,0.54,0.57 0.59,0.61,0.63,0.67), mean=0.503, stddev=0.0498], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.006,0.01 0.02,0.04,0.32,0.37,0.39 0.41,0.43,0.44,0.59), mean=0.254, stddev=0.144], bias-{mean,stddev}=-0.001237,0.02989, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.72e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.29 0.30,0.32,0.34,0.37,0.38 0.40,0.42,0.43,0.45), mean=0.342, stddev=0.0337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.41 0.43,0.44,0.46,0.49,0.50 0.51,0.53,0.53,0.55), mean=0.463, stddev=0.0299], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.07,0.08), mean=0.0409, stddev=0.00761], oderiv-count=1.19098e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33414.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.27 0.29,0.30,0.33,0.36,0.38 0.40,0.42,0.44,0.48), mean=0.335, stddev=0.0379], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.48,0.48,0.50 0.51,0.54,0.58,0.64,0.66 0.69,0.72,0.75,0.88), mean=0.588, stddev=0.0605]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000286971, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01777, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.22,0.26,0.39,0.57,0.67 0.75,0.83,0.87,1.1), mean=0.419, stddev=0.172], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.44,0.47 0.51,0.72,0.84,0.90,0.94 0.97,1.0,1.0,1.1), mean=0.796, stddev=0.154], bias-{mean,stddev}=-0.000507,0.1689, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000286971, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1753, w_fc-rms=0.1756, w_oc-rms=0.1692, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00606072, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.39,0.41 0.43,0.45,0.50,0.55,0.57 0.61,0.65,0.68,0.74), mean=0.503, stddev=0.0609], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.24 0.24,0.25,0.25,0.25), mean=0.228, stddev=0.0133] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00606072, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.33,0.35 0.38,0.41,0.47,0.55,0.61 0.67,0.73,0.78,0.84), mean=0.486, stddev=0.0945], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.17,0.19 0.20,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0196] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00794879, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.78,-0.73,-0.61 -0.47,-0.28,0.005,0.33,0.46 0.57,0.69,0.74,0.82), mean=0.00689, stddev=0.351], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.28,0.31,0.37 0.41,0.46,0.58,0.69,0.76 0.83,0.89,0.90,0.95), mean=0.582, stddev=0.137] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00606072, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.43,0.48,0.52,0.54 0.58,0.62,0.64,0.70), mean=0.481, stddev=0.0553], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.22,0.24,0.24 0.24,0.24,0.25,0.25), mean=0.222, stddev=0.0151] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0142045, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.83,-0.71,-0.56 -0.38,-0.22,-0.0007,0.25,0.39 0.51,0.64,0.75,0.87), mean=0.00402, stddev=0.309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.22,0.28,0.46 0.60,0.70,0.81,0.88,0.91 0.94,0.96,0.97,0.98), mean=0.778, stddev=0.143] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=298653
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000286971, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03092, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.47,0.49,0.49 0.52,0.56,0.69,0.82,0.88 0.91,0.94,0.98,1.0), mean=0.692, stddev=0.134], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.22 0.28,0.35,0.48,0.59,0.67 0.74,0.83,0.85,1.1), mean=0.475, stddev=0.153], bias-{mean,stddev}=0.0186,0.17, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000286971, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01336, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.23 0.26,0.29,0.36,0.43,0.48 0.53,0.56,0.57,0.66), mean=0.363, stddev=0.0865], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.22,0.23,0.29,0.36,0.39 0.41,0.43,0.44,0.50), mean=0.298, stddev=0.0657], bias-{mean,stddev}=0.0003371,0.0132, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.07,0.08 0.10,0.12,0.16,0.20,0.22 0.24,0.25,0.26,0.31), mean=0.158, stddev=0.0476], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.18,0.23,0.27 0.32,0.38,0.49,0.59,0.64 0.69,0.73,0.75,0.83), mean=0.487, stddev=0.126], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.06,0.07,0.08 0.09,0.10,0.11,0.13), mean=0.0629, stddev=0.0142], oderiv-count=1.02182e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31249.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.07 0.09,0.11,0.15,0.19,0.21 0.23,0.26,0.27,0.35), mean=0.151, stddev=0.0485], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.17,0.18 0.19,0.21,0.23,0.27,0.29 0.30,0.33,0.34,0.38), mean=0.237, stddev=0.0389]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000286971, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009749, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.28,0.30 0.32,0.35,0.38,0.42,0.44 0.45,0.48,0.49,0.52), mean=0.382, stddev=0.0464], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.15 0.16,0.18,0.22,0.25,0.28 0.30,0.32,0.33,0.37), mean=0.218, stddev=0.0436], bias-{mean,stddev}=-0.007957,0.01662, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.34e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.26 0.27,0.28,0.31,0.35,0.37 0.39,0.41,0.42,0.46), mean=0.317, stddev=0.0394], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.40 0.41,0.42,0.44,0.46,0.47 0.48,0.49,0.50,0.52), mean=0.442, stddev=0.0261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0272, stddev=0.0031], oderiv-count=1.01555e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29084.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.25 0.26,0.28,0.31,0.34,0.36 0.39,0.41,0.42,0.46), mean=0.309, stddev=0.0418], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.43,0.45,0.47 0.49,0.52,0.57,0.63,0.66 0.69,0.72,0.74,0.83), mean=0.577, stddev=0.0671]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000286971, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0145, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.17,0.17 0.18,0.21,0.30,0.47,0.56 0.63,0.67,0.70,1.0), mean=0.34, stddev=0.145], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.41 0.43,0.52,0.68,0.75,0.78 0.81,0.85,0.87,0.94), mean=0.649, stddev=0.124], bias-{mean,stddev}=0.004071,0.1679, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000286971, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1812, w_fc-rms=0.1765, w_oc-rms=0.1757, count=1.32e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00611494, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.42 0.43,0.45,0.50,0.55,0.58 0.61,0.63,0.64,0.67), mean=0.501, stddev=0.0562], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0143] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00611494, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.37,0.39 0.41,0.43,0.48,0.54,0.58 0.64,0.70,0.75,0.80), mean=0.49, stddev=0.0771], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0161] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00611494, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.73,-0.66,-0.48 -0.38,-0.26,-0.008,0.26,0.40 0.53,0.62,0.67,0.79), mean=0.00354, stddev=0.304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.39,0.43,0.47 0.51,0.55,0.64,0.77,0.86 0.90,0.93,0.94,0.96), mean=0.66, stddev=0.132] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00611494, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.39,0.41 0.42,0.44,0.48,0.53,0.56 0.60,0.63,0.64,0.66), mean=0.49, stddev=0.0572], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.22,0.23,0.24,0.24 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0134] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00800271, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.77,-0.66,-0.41 -0.31,-0.18,-0.009,0.21,0.33 0.49,0.65,0.73,0.89), mean=0.00675, stddev=0.273], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.29,0.38,0.56 0.71,0.77,0.85,0.91,0.94 0.97,0.98,0.98,0.99), mean=0.825, stddev=0.127] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.75e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=263343
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000286971, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02844, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.46,0.49,0.50 0.52,0.55,0.64,0.73,0.77 0.80,0.86,0.87,0.90), mean=0.641, stddev=0.0965], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.18 0.21,0.26,0.41,0.57,0.66 0.73,0.84,0.91,1.1), mean=0.424, stddev=0.176], bias-{mean,stddev}=-0.003635,0.166, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000286971, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01261, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.15,0.17,0.21 0.23,0.25,0.32,0.41,0.47 0.53,0.60,0.65,0.75), mean=0.337, stddev=0.104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.23,0.28,0.33,0.36 0.38,0.40,0.41,0.44), mean=0.283, stddev=0.0541], bias-{mean,stddev}=-6.088e-05,0.01152, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.98e+05, self-repaired-proportion=0.00909307, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.006,0.03,0.05 0.07,0.08,0.12,0.17,0.19 0.22,0.24,0.24,0.26), mean=0.128, stddev=0.0509], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.06,0.14,0.19 0.25,0.31,0.42,0.56,0.61 0.64,0.67,0.69,0.76), mean=0.425, stddev=0.137], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.06,0.07,0.09 0.11,0.13,0.14,0.19), mean=0.0657, stddev=0.0204], oderiv-count=1.05306e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26919.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.009,0.03,0.05 0.06,0.08,0.12,0.16,0.18 0.21,0.23,0.24,0.26), mean=0.123, stddev=0.0488], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.04,0.09,0.13 0.16,0.17,0.21,0.25,0.27 0.28,0.31,0.32,0.38), mean=0.211, stddev=0.0499]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000286971, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009727, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.28,0.31 0.33,0.35,0.38,0.42,0.44 0.46,0.50,0.52,0.63), mean=0.381, stddev=0.0486], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.11,0.13 0.15,0.16,0.21,0.26,0.29 0.32,0.35,0.40,0.52), mean=0.213, stddev=0.0607], bias-{mean,stddev}=-0.0108,0.02028, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.26 0.27,0.29,0.32,0.36,0.37 0.39,0.41,0.43,0.58), mean=0.323, stddev=0.0412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.36,0.37 0.38,0.40,0.42,0.44,0.46 0.47,0.48,0.49,0.52), mean=0.42, stddev=0.0295], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0244, stddev=0.0031], oderiv-count=948480
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24754.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.25 0.26,0.28,0.31,0.35,0.38 0.40,0.42,0.44,0.71), mean=0.319, stddev=0.0507], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.48,0.50 0.52,0.55,0.60,0.66,0.69 0.73,0.77,0.80,1.0), mean=0.607, stddev=0.0732]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000286971, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01888, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.22 0.26,0.32,0.43,0.57,0.71 0.78,0.82,0.86,1.1), mean=0.454, stddev=0.159], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.62,0.62,0.66 0.69,0.72,0.78,0.98,1.2 1.2,1.3,1.4,1.5), mean=0.843, stddev=0.176], bias-{mean,stddev}=0.006497,0.1706, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000286971, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1639, w_fc-rms=0.1751, w_oc-rms=0.1815, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00618044, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.43,0.43,0.47 0.49,0.51,0.56,0.62,0.65 0.67,0.69,0.69,0.70), mean=0.565, stddev=0.0612], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.17,0.18 0.18,0.19,0.21,0.22,0.23 0.23,0.24,0.24,0.25), mean=0.207, stddev=0.0166] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00618044, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.42,0.44 0.46,0.50,0.57,0.64,0.67 0.70,0.74,0.76,0.84), mean=0.572, stddev=0.0804], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.17 0.18,0.19,0.21,0.23,0.23 0.24,0.24,0.24,0.25), mean=0.208, stddev=0.0211] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0066645, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.70,-0.66,-0.49 -0.37,-0.22,0.007,0.21,0.34 0.47,0.58,0.62,0.72), mean=-0.00617, stddev=0.281], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.30,0.32,0.34 0.39,0.43,0.48,0.55,0.61 0.65,0.73,0.77,0.83), mean=0.491, stddev=0.0914] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00618044, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.46,0.49 0.51,0.55,0.62,0.68,0.71 0.73,0.74,0.74,0.78), mean=0.616, stddev=0.0736], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.16 0.17,0.18,0.19,0.20,0.22 0.22,0.23,0.23,0.24), mean=0.191, stddev=0.0184] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00618044, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.74,-0.66,-0.50 -0.34,-0.21,-0.003,0.20,0.32 0.46,0.55,0.65,0.74), mean=-0.00592, stddev=0.271], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.33,0.37,0.47 0.53,0.59,0.67,0.73,0.77 0.80,0.85,0.87,0.90), mean=0.657, stddev=0.102] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223870
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000286971, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06298, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.3,1.3,1.4,1.5,1.6 1.7,1.7,1.8,1.9), mean=1.43, stddev=0.142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.46,0.59 0.67,0.81,1.0,1.2,1.3 1.3,1.4,1.4,1.8), mean=0.99, stddev=0.227], bias-{mean,stddev}=0.01579,0.1877, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000286971, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04136, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.50,0.52,0.54 0.56,0.59,0.64,0.71,0.75 0.81,0.87,0.93,2.5), mean=0.657, stddev=0.114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.7,1.7,1.9,2.0,2.1 2.2,2.3,2.3,2.4), mean=1.89, stddev=0.174], bias-{mean,stddev}=4.745e-09,0.02187, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0138], oderiv-count=597120
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/14.mdl exp/nnet3/tdnn_lstm1c_sp/15.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.33396 tdnn2.affine:9.50463 lstm1.W_all:8.35237 lstm1.lstm_nonlin:0.828348 lstm1.W_rp:3.55087 tdnn3.affine:5.81303 tdnn4.affine:6.87718 lstm2.W_all:5.63029 lstm2.lstm_nonlin:0.847534 lstm2.W_rp:2.45195 tdnn5.affine:4.87783 tdnn6.affine:6.13327 lstm3.W_all:7.03903 lstm3.lstm_nonlin:0.798234 lstm3.W_rp:2.89664 output.affine:6.54931 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.2592 tdnn2.affine:11.537 lstm1.W_all:22.0551 lstm1.lstm_nonlin:6.84738 lstm1.W_rp:11.6984 tdnn3.affine:8.51442 tdnn4.affine:8.79098 lstm2.W_all:18.5137 lstm2.lstm_nonlin:7.02241 lstm2.W_rp:10.7964 tdnn5.affine:8.03822 tdnn6.affine:8.7768 lstm3.W_all:23.296 lstm3.lstm_nonlin:6.85928 lstm3.W_rp:23.3567 output.affine:30.6099 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.758434 tdnn2.affine:0.816474 lstm1.W_all:0.369554 lstm1.lstm_nonlin:0.108323 lstm1.W_rp:0.298736 tdnn3.affine:0.671153 tdnn4.affine:0.771921 lstm2.W_all:0.292261 lstm2.lstm_nonlin:0.107848 lstm2.W_rp:0.222238 tdnn5.affine:0.600681 tdnn6.affine:0.692486 lstm3.W_all:0.295386 lstm3.lstm_nonlin:0.104872 lstm3.W_rp:0.124368 output.affine:0.21421 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:07:04 KST 2020, elapsed time 1 seconds
