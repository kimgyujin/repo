# nnet3-info exp/nnet3/tdnn_lstm1c_sp/274.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/273.mdl exp/nnet3/tdnn_lstm1c_sp/274.mdl 
# Started at Thu Jul 30 11:49:27 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/274.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00022878, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03378, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.01 0.02,0.05,0.58,0.73,0.83 0.91,1.0,1.0,1.2), mean=0.501, stddev=0.303], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.18,0.22,0.66,0.92,1.3 1.5,1.6,1.6,1.7), mean=0.657, stddev=0.402], bias-{mean,stddev}=-0.0003544,0.06325, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0.22238, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,6e-06,1e-05,3e-05 7e-05,0.0003,0.06,0.10,0.12 0.13,0.16,0.17,0.22), mean=0.0577, stddev=0.0472], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.001,0.004,0.01 0.03,0.05,0.43,0.60,0.72 0.80,0.87,0.89,0.99), mean=0.383, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.02,0.02,0.02 0.04,0.09,0.27,0.36,0.42 0.53,0.65,0.71,1.4), mean=0.265, stddev=0.165], oderiv-count=1.09542e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33705.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,3e-06,6e-06,2e-05 7e-05,0.0005,0.06,0.09,0.11 0.14,0.17,0.18,0.22), mean=0.0553, stddev=0.047], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0001,0.0002 0.0006,0.002,0.10,0.12,0.14 0.15,0.16,0.16,0.17), mean=0.0786, stddev=0.0534]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00022878, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01265, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.39,0.40 0.42,0.44,0.48,0.55,0.59 0.62,0.67,0.70,0.75), mean=0.495, stddev=0.0693], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.007,0.009 0.01,0.03,0.30,0.36,0.39 0.42,0.46,0.50,0.75), mean=0.249, stddev=0.146], bias-{mean,stddev}=-0.02329,0.04004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.7e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.26 0.27,0.29,0.32,0.36,0.38 0.41,0.44,0.46,0.50), mean=0.326, stddev=0.0457], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.38,0.39 0.41,0.42,0.45,0.48,0.49 0.51,0.52,0.52,0.55), mean=0.449, stddev=0.0339], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0409, stddev=0.0073], oderiv-count=1.08272e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32957.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.26 0.27,0.29,0.32,0.37,0.40 0.43,0.48,0.51,0.58), mean=0.333, stddev=0.0536], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.46,0.47,0.50 0.51,0.53,0.59,0.65,0.70 0.75,0.78,0.80,0.91), mean=0.599, stddev=0.0756]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00022878, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01852, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,9e-06,5e-05 0.001,0.17,0.42,0.62,0.72 0.78,0.83,0.88,1.1), mean=0.404, stddev=0.245], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.39,0.42,0.47 0.56,0.73,0.85,0.94,1.0 1.1,1.1,1.2,1.3), mean=0.828, stddev=0.169], bias-{mean,stddev}=0.001926,0.02783, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00022878, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05788, w_fc-rms=0.03002, w_oc-rms=0.04342, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632617, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.69,0.79,0.80,0.85), mean=0.493, stddev=0.0781], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0233] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632617, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.43,0.44,0.46 0.47,0.48,0.50,0.53,0.58 0.64,0.77,0.78,0.85), mean=0.514, stddev=0.0637], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0217] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0355877, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.89,-0.85,-0.54 -0.27,-0.14,0.0005,0.17,0.32 0.55,0.85,0.88,0.91), mean=0.0145, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.19,0.25 0.35,0.42,0.55,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.592, stddev=0.223] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632617, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.38,0.40 0.41,0.42,0.45,0.50,0.50 0.50,0.53,0.56,0.69), mean=0.455, stddev=0.041], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.218, stddev=0.0217] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00632617, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.73,-0.65,-0.36 -0.17,-0.08,0.0005,0.11,0.20 0.35,0.67,0.72,0.78), mean=0.0107, stddev=0.22], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.41,0.55 0.75,0.82,0.89,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.863, stddev=0.127] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.03256e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.58687e-05, count-zeroing-boundaries=296565
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.218733
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00022878, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04081, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.33,0.37 0.40,0.47,0.88,1.2,1.3 1.4,1.4,1.4,1.5), mean=0.855, stddev=0.367], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.002,0.003 0.01,0.32,0.55,0.75,0.91 1.2,1.5,1.7,2.0), mean=0.552, stddev=0.357], bias-{mean,stddev}=0.01303,0.2797, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00022878, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01352, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.21,0.23,0.24 0.26,0.30,0.36,0.44,0.48 0.51,0.54,0.57,0.71), mean=0.368, stddev=0.085], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.13,0.15,0.29,0.41,0.44 0.46,0.47,0.50,0.53), mean=0.282, stddev=0.124], bias-{mean,stddev}=0.003124,0.0128, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0.005111, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.03,0.04 0.06,0.08,0.11,0.13,0.15 0.16,0.18,0.18,0.24), mean=0.105, stddev=0.0349], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.14,0.18,0.23 0.29,0.38,0.51,0.60,0.64 0.67,0.69,0.72,0.83), mean=0.491, stddev=0.134], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.08,0.08 0.08,0.09,0.10,0.12,0.14 0.16,0.19,0.22,0.27), mean=0.107, stddev=0.0287], oderiv-count=1.07949e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30713.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.02,0.03,0.04 0.06,0.08,0.10,0.13,0.15 0.16,0.18,0.18,0.25), mean=0.104, stddev=0.0347], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.09,0.11,0.12 0.13,0.14,0.16,0.19,0.21 0.22,0.23,0.23,0.28), mean=0.164, stddev=0.0309]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00022878, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009371, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.31 0.32,0.33,0.36,0.40,0.43 0.46,0.49,0.50,0.57), mean=0.367, stddev=0.047], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.13,0.14,0.15 0.16,0.17,0.20,0.24,0.27 0.29,0.32,0.34,0.40), mean=0.209, stddev=0.0461], bias-{mean,stddev}=-0.0239,0.01973, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.71e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.23,0.24 0.25,0.27,0.29,0.33,0.35 0.36,0.38,0.38,0.51), mean=0.297, stddev=0.0375], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.49,0.50), mean=0.434, stddev=0.0277], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.04), mean=0.0333, stddev=0.00267], oderiv-count=1.04106e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28469.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.25 0.25,0.27,0.30,0.33,0.36 0.37,0.39,0.40,0.52), mean=0.303, stddev=0.0397], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.47,0.48,0.49 0.50,0.52,0.57,0.64,0.67 0.71,0.76,0.81,1.1), mean=0.581, stddev=0.0724]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00022878, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0153, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,1e-06,2e-06,4e-06 2e-05,0.0004,0.35,0.55,0.62 0.66,0.71,0.75,0.91), mean=0.299, stddev=0.25], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.33,0.35,0.40 0.50,0.62,0.70,0.77,0.81 0.88,0.95,1.0,1.4), mean=0.685, stddev=0.133], bias-{mean,stddev}=0.00372,0.03889, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00022878, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03214, w_fc-rms=0.01458, w_oc-rms=0.0341, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.006381, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.44 0.45,0.46,0.50,0.52,0.57 0.61,0.68,0.71,0.80), mean=0.503, stddev=0.0536], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0184] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.006381, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.44,0.45 0.46,0.48,0.50,0.52,0.55 0.59,0.64,0.66,0.74), mean=0.507, stddev=0.0421], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0182] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00662089, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.70,-0.46 -0.28,-0.13,0.0004,0.16,0.32 0.54,0.73,0.77,0.86), mean=0.0112, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.29,0.39 0.44,0.51,0.61,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.705, stddev=0.234] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.006381, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.44,0.46,0.50,0.50,0.52 0.54,0.56,0.58,0.69), mean=0.487, stddev=0.0336], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0198] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.006381, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.72,-0.58,-0.44,-0.32 -0.18,-0.08,0.0002,0.10,0.22 0.38,0.49,0.55,0.64), mean=0.00932, stddev=0.187], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.55,0.60,0.71 0.76,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.901, stddev=0.102] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.73095e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.67653e-05, count-zeroing-boundaries=261532
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.218733
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00022878, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03955, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.44,0.49,0.53 0.57,0.59,0.86,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.864, stddev=0.258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0008,0.001,0.001 0.003,0.008,0.59,0.84,0.97 1.1,1.3,1.5,1.6), mean=0.494, stddev=0.403], bias-{mean,stddev}=0.001371,0.2195, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00022878, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01302, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.26 0.28,0.30,0.34,0.41,0.46 0.50,0.55,0.57,0.62), mean=0.356, stddev=0.0714], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.39,0.42 0.43,0.45,0.46,0.52), mean=0.281, stddev=0.095], bias-{mean,stddev}=0.0008654,0.006717, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.43e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.06,0.08,0.11,0.12 0.13,0.14,0.16,0.18), mean=0.0836, stddev=0.0306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.18,0.22 0.28,0.34,0.48,0.58,0.62 0.66,0.68,0.69,0.71), mean=0.465, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.09,0.10,0.11,0.13,0.14 0.16,0.18,0.18,0.20), mean=0.113, stddev=0.0221], oderiv-count=1.07238e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26225.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.05,0.06,0.09,0.12,0.13 0.14,0.15,0.16,0.21), mean=0.0878, stddev=0.0314], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.09,0.10 0.11,0.12,0.14,0.16,0.17 0.18,0.19,0.19,0.21), mean=0.142, stddev=0.0248]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00022878, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009232, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.21,0.26 0.29,0.31,0.36,0.41,0.43 0.46,0.48,0.50,0.54), mean=0.36, stddev=0.0606], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.15,0.16,0.19,0.24,0.27 0.31,0.34,0.36,0.45), mean=0.205, stddev=0.0497], bias-{mean,stddev}=-0.02003,0.02423, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.42e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.21,0.23 0.25,0.28,0.31,0.34,0.35 0.36,0.39,0.40,0.49), mean=0.306, stddev=0.0424], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.37 0.39,0.40,0.42,0.45,0.46 0.47,0.48,0.49,0.53), mean=0.422, stddev=0.0291], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0274, stddev=0.00211], oderiv-count=966720
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23982.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.22,0.25 0.27,0.28,0.32,0.36,0.37 0.39,0.40,0.44,0.58), mean=0.32, stddev=0.0454], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.35,0.41,0.46 0.50,0.55,0.62,0.69,0.73 0.77,0.83,0.86,1.2), mean=0.621, stddev=0.0987]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00022878, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02199, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.30,0.32 0.34,0.39,0.52,0.69,0.77 0.82,0.86,0.89,1.3), mean=0.539, stddev=0.154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.66,0.69,0.74 0.78,0.82,0.89,1.1,1.3 1.4,1.6,1.8,2.2), mean=0.975, stddev=0.233], bias-{mean,stddev}=0.01874,0.02392, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00022878, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.09832, w_fc-rms=0.04999, w_oc-rms=0.06639, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064472, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.57,0.60 0.62,0.65,0.71,0.75,0.79 0.81,0.83,0.84,0.87), mean=0.704, stddev=0.0621], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.173, stddev=0.022] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064472, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.53,0.57 0.59,0.62,0.68,0.72,0.77 0.81,0.84,0.85,0.88), mean=0.677, stddev=0.0707], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.13 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.176, stddev=0.0225] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0285565, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.83,-0.80,-0.60 -0.45,-0.30,-0.01,0.30,0.42 0.56,0.70,0.82,0.89), mean=-0.00702, stddev=0.352], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.24 0.28,0.36,0.44,0.49,0.51 0.53,0.54,0.55,0.60), mean=0.418, stddev=0.0839] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064472, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.49,0.51,0.54 0.57,0.59,0.63,0.67,0.69 0.72,0.75,0.78,0.82), mean=0.629, stddev=0.0541], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.15,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.179, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0064472, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.72,-0.66,-0.52 -0.37,-0.25,-0.007,0.24,0.34 0.49,0.62,0.70,0.81), mean=-0.00782, stddev=0.296], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.35,0.38,0.43 0.51,0.58,0.67,0.72,0.74 0.76,0.78,0.78,0.80), mean=0.644, stddev=0.0942] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.24856e-06, count-zeroing-boundaries=222365
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.218733
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00022878, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08691, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.5,2.6 2.6,2.7,2.8,2.9), mean=1.89, stddev=0.583], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.98,1.0,1.1 1.1,1.2,1.3,1.5,1.8 1.9,2.1,2.1,2.2), mean=1.38, stddev=0.259], bias-{mean,stddev}=-0.02468,0.5463, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00022878, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04418, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.61,0.62 0.64,0.66,0.70,0.74,0.77 0.81,0.86,0.92,2.3), mean=0.707, stddev=0.087], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.7,2.7,2.8,2.9), mean=1.95, stddev=0.557], bias-{mean,stddev}=7.21e-09,0.02907, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.41), mean=0.0169, stddev=0.0137], oderiv-count=590400
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/273.mdl exp/nnet3/tdnn_lstm1c_sp/274.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.06996 tdnn2.affine:4.95131 lstm1.W_all:3.9576 lstm1.lstm_nonlin:0.0912237 lstm1.W_rp:1.58138 tdnn3.affine:3.34979 tdnn4.affine:3.72929 lstm2.W_all:2.81963 lstm2.lstm_nonlin:0.0494971 lstm2.W_rp:1.13507 tdnn5.affine:2.80861 tdnn6.affine:3.14189 lstm3.W_all:3.20791 lstm3.lstm_nonlin:0.101096 lstm3.W_rp:1.355 output.affine:3.23921 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.4179 tdnn2.affine:11.4394 lstm1.W_all:21.5724 lstm1.lstm_nonlin:1.78623 lstm1.W_rp:15.6698 tdnn3.affine:8.61416 tdnn4.affine:8.46962 lstm2.W_all:17.8742 lstm2.lstm_nonlin:1.11903 lstm2.W_rp:14.968 tdnn5.affine:8.29201 tdnn6.affine:8.34557 lstm3.W_all:25.6021 lstm3.lstm_nonlin:2.93565 lstm3.W_rp:33.1509 output.affine:32.7001 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.379651 tdnn2.affine:0.435 lstm1.W_all:0.18343 lstm1.lstm_nonlin:0.0518234 lstm1.W_rp:0.100876 tdnn3.affine:0.390602 tdnn4.affine:0.441697 lstm2.W_all:0.157699 lstm2.lstm_nonlin:0.044609 lstm2.W_rp:0.0757974 tdnn5.affine:0.339789 tdnn6.affine:0.376284 lstm3.W_all:0.125131 lstm3.lstm_nonlin:0.034699 lstm3.W_rp:0.0409902 output.affine:0.0989791 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:49:27 KST 2020, elapsed time 0 seconds
