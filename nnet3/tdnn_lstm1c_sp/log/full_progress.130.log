# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/129.mdl exp/nnet3/tdnn_lstm1c_sp/130.mdl 
# Started at Thu Jul 30 10:52:28 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/129.mdl exp/nnet3/tdnn_lstm1c_sp/130.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.0001999, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01907, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.01 0.03,0.27,0.34,0.39,0.41 0.45,0.48,0.54,0.72), mean=0.303, stddev=0.131], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.15,0.39,0.53,0.64 0.84,0.94,0.96,1.1), mean=0.378, stddev=0.215], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.07,0.24,0.55,0.75 0.92,1.1,1.2,1.3), mean=0.325, stddev=0.29], bias-{mean,stddev}=0.0003323,0.02541, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.34,0.66,0.81 0.98,1.2,1.4,2.0), mean=0.36, stddev=0.363], oderiv-count=98688
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7707.48, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.22,-0.10,-0.08,-0.04 -0.02,-0.0002,0.05,0.14,0.17 0.21,0.26,0.30,0.44), mean=0.0645, stddev=0.0844], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.12,0.15 0.17,0.18,0.19,0.21), mean=0.0636, stddev=0.0619]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.0001999, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008493, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.27,0.29 0.29,0.31,0.33,0.36,0.37 0.38,0.39,0.40,0.42), mean=0.334, stddev=0.0307], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.004,0.008 0.02,0.16,0.20,0.23,0.24 0.26,0.27,0.28,0.35), mean=0.178, stddev=0.0759], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.09,0.19,0.41,0.57 0.71,0.84,0.91,1.1), mean=0.263, stddev=0.208], bias-{mean,stddev}=-0.0004093,0.01297, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.07,0.08 0.09,0.11,0.11,0.19), mean=0.0367, stddev=0.0344], oderiv-count=60544
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7560.02, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.19,0.07,0.09,0.11 0.15,0.21,0.35,0.45,0.50 0.55,0.61,0.63,0.82), mean=0.336, stddev=0.135], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.26,0.59,0.78,0.86 0.95,1.1,1.1,1.4), mean=0.529, stddev=0.3]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.0001999, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005511, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.0002,0.0008,0.004 0.02,0.06,0.11,0.18,0.22 0.26,0.29,0.31,0.41), mean=0.119, stddev=0.0744], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.10,0.15,0.27,0.29,0.30 0.32,0.32,0.34,0.36), mean=0.241, stddev=0.073], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,4e-07,5e-07 3e-06,0.06,0.13,0.29,0.41 0.54,0.72,0.80,0.91), mean=0.183, stddev=0.173], bias-{mean,stddev}=-6.663e-06,0.00229, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.0001999, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001814, w_fc-rms=0.002217, w_oc-rms=0.004313, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000254803, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.47,-0.34,-0.15 -0.008,0.18,0.50,0.82,1.0 1.2,1.5,1.6,4.3), mean=0.511, stddev=0.436], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.25,-0.10,-0.07,0.03 0.08,0.15,0.25,0.32,0.40 0.48,0.56,0.61,0.72), mean=0.243, stddev=0.134] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000254803, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.40,-0.30,-0.14 0.007,0.19,0.49,0.72,0.94 1.2,1.4,1.5,1.9), mean=0.479, stddev=0.385], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.37,-0.18,-0.11,0.04 0.10,0.16,0.25,0.30,0.36 0.40,0.50,0.56,0.73), mean=0.234, stddev=0.122] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0583441, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.6,-5.8,-5.2,-4.3 -3.0,-1.6,0.004,1.7,2.9 4.1,5.1,5.4,8.4), mean=-0.0156, stddev=2.33], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.4,-3.1,-2.4,-2.0 -1.3,-0.31,0.97,1.9,2.5 3.0,3.7,4.7,6.2), mean=0.819, stddev=1.53] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000254803, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.59,-0.46,-0.27 -0.05,0.17,0.50,0.85,1.1 1.2,1.5,1.6,3.0), mean=0.513, stddev=0.458], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.56,-0.20,-0.15,-0.03 0.04,0.12,0.25,0.36,0.46 0.54,0.62,0.68,0.85), mean=0.244, stddev=0.173] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.216616, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.1,-4.6,-4.1,-3.3 -2.3,-1.3,0.08,1.3,2.4 3.2,4.0,4.7,8.6), mean=0.0333, stddev=1.88], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.2,-1.7,-1.3,-0.79 -0.30,0.20,0.98,1.6,2.0 2.6,3.0,3.4,4.5), mean=0.922, stddev=0.984] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.42e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2130
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.0001999, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007065, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.07,0.12,0.22,0.23 0.24,0.25,0.27,0.29), mean=0.144, stddev=0.073], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.003,0.005,0.01 0.03,0.08,0.11,0.14,0.16 0.17,0.18,0.20,0.20), mean=0.105, stddev=0.044], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-07,1e-07,1e-07 2e-07,4e-07,6e-06,0.02,0.31 0.45,0.53,0.59,0.68), mean=0.0633, stddev=0.148], bias-{mean,stddev}=-5.933e-05,0.005117, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.0001999, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007492, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.14,0.15,0.15 0.17,0.18,0.20,0.23,0.25 0.27,0.29,0.30,0.35), mean=0.206, stddev=0.0372], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.06,0.11,0.24,0.25 0.27,0.29,0.29,0.31), mean=0.147, stddev=0.0864], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-07,2e-07,3e-07 4e-07,1e-06,0.0001,0.12,0.39 0.55,0.71,0.78,0.89), mean=0.0897, stddev=0.189], bias-{mean,stddev}=0.0006762,0.01564, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.17e+05, self-repaired-proportion=0.0090812, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.18,-0.15,-0.11,-0.05 -0.003,0.03,0.12,0.21,0.26 0.32,0.36,0.37,0.51), mean=0.126, stddev=0.108], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.59,-0.29,-0.17,-0.04 0.06,0.20,0.48,0.75,0.91 1.0,1.1,1.2,1.4), mean=0.475, stddev=0.324], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.09,0.14,0.17 0.19,0.23,0.27,0.47), mean=0.0879, stddev=0.0683], oderiv-count=84992
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7117.66, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.21,-0.11,-0.08,-0.04 0.001,0.04,0.13,0.22,0.27 0.30,0.36,0.39,0.47), mean=0.134, stddev=0.106], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.08,0.20,0.27,0.30 0.33,0.38,0.40,0.52), mean=0.181, stddev=0.107]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.0001999, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006081, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.20,0.21 0.22,0.22,0.24,0.25,0.26 0.27,0.28,0.29,0.32), mean=0.239, stddev=0.0185], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.10,0.10,0.11 0.11,0.12,0.14,0.15,0.17 0.18,0.18,0.19,0.22), mean=0.137, stddev=0.0225], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.07,0.09,0.15,0.29,0.39 0.49,0.58,0.63,0.72), mean=0.199, stddev=0.135], bias-{mean,stddev}=-0.0007879,0.007633, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.42e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.23,-0.03,0.005,0.07 0.12,0.20,0.31,0.42,0.50 0.55,0.62,0.70,0.89), mean=0.311, stddev=0.148], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.03,0.04,0.10,0.16 0.23,0.31,0.44,0.58,0.68 0.75,0.82,0.86,1.0), mean=0.45, stddev=0.175]
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=6675.29, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.06,0.09,0.13 0.17,0.21,0.29,0.38,0.42 0.46,0.49,0.51,0.68), mean=0.291, stddev=0.1], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.24,0.38,0.56,0.69,0.76 0.83,0.89,0.94,1.2), mean=0.528, stddev=0.213]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.0001999, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003671, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,9e-07,2e-06,4e-06 1e-05,0.0003,0.07,0.12,0.16 0.19,0.21,0.22,0.28), mean=0.0689, stddev=0.0633], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.09,0.18,0.19,0.20 0.21,0.22,0.23,0.29), mean=0.159, stddev=0.0519], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,3e-07 2e-05,0.03,0.08,0.19,0.27 0.37,0.50,0.56,0.68), mean=0.117, stddev=0.119], bias-{mean,stddev}=-0.0001195,0.002417, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.0001999, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001096, w_fc-rms=0.001225, w_oc-rms=0.00172, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000250027, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.28,-0.20,0.03 0.17,0.36,0.50,0.65,0.84 0.96,1.1,1.1,1.4), mean=0.496, stddev=0.269], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.19,-0.04,0.0001,0.07 0.12,0.19,0.25,0.28,0.34 0.41,0.47,0.52,0.74), mean=0.241, stddev=0.101] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000250027, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.26,-0.16,0.005 0.15,0.31,0.50,0.59,0.70 0.82,0.95,1.0,1.4), mean=0.455, stddev=0.241], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.18,0.03,0.06,0.11 0.16,0.21,0.25,0.27,0.31 0.35,0.39,0.41,0.51), mean=0.241, stddev=0.0708] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.138801, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.8,-4.0,-3.6,-2.8 -2.1,-0.99,0.006,0.91,1.7 2.5,2.9,3.3,4.3), mean=-0.0528, stddev=1.46], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.0,-2.1,-1.6,-1.0 -0.33,0.29,1.0,1.4,2.0 2.6,2.9,3.3,4.3), mean=0.894, stddev=0.996] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000250027, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.41,-0.32,-0.08 0.08,0.35,0.50,0.68,0.86 0.99,1.1,1.2,2.0), mean=0.492, stddev=0.311], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.14,-0.08,-0.05,0.02 0.10,0.17,0.25,0.29,0.36 0.44,0.49,0.51,0.70), mean=0.236, stddev=0.112] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000250027, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.5,-3.0,-2.8,-2.1 -1.5,-0.82,0.01,0.78,1.4 2.2,2.6,3.1,4.1), mean=0.0117, stddev=1.19], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-0.73,-0.50,-0.21 0.19,0.63,1.0,1.3,1.7 2.0,2.3,2.5,3.7), mean=0.965, stddev=0.611] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.27e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1914
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.0001999, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004872, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.07,0.07,0.10,0.14,0.15 0.16,0.16,0.16,0.17), mean=0.106, stddev=0.0336], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0003,0.0003,0.0005 0.0009,0.002,0.08,0.11,0.12 0.12,0.14,0.14,0.16), mean=0.063, stddev=0.047], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-08,1e-07,1e-07,1e-07 2e-07,2e-07,2e-05,0.09,0.22 0.29,0.34,0.35,0.40), mean=0.0498, stddev=0.0993], bias-{mean,stddev}=-9.712e-05,0.005617, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.0001999, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006036, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.12 0.13,0.14,0.16,0.19,0.21 0.22,0.25,0.26,0.30), mean=0.165, stddev=0.0338], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.08,0.09,0.12,0.18,0.19 0.20,0.21,0.22,0.23), mean=0.13, stddev=0.0444], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,1e-07,1e-07,2e-07 3e-07,1e-06,0.001,0.15,0.31 0.44,0.55,0.60,0.69), mean=0.0804, stddev=0.148], bias-{mean,stddev}=-0.0001413,0.007813, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2.66e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.55,-0.46,-0.35 -0.22,-0.12,0.08,0.29,0.42 0.52,0.64,0.69,0.88), mean=0.0808, stddev=0.259], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-2.3,-1.8,-1.3 -0.94,-0.45,0.50,1.4,1.9 2.5,2.8,3.2,3.5), mean=0.511, stddev=1.13], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.11,0.45,0.61 0.77,0.92,0.99,1.6), mean=0.223, stddev=0.276], oderiv-count=4480
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=6232.92, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.15,-0.07,-0.06,-0.04 -0.01,0.02,0.07,0.13,0.17 0.20,0.23,0.26,0.33), mean=0.0738, stddev=0.0724], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.01,0.12,0.17,0.20 0.21,0.24,0.25,0.31), mean=0.111, stddev=0.0722]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.0001999, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005055, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.16 0.17,0.18,0.20,0.22,0.23 0.24,0.25,0.25,0.27), mean=0.198, stddev=0.0225], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.08 0.09,0.10,0.11,0.13,0.14 0.15,0.16,0.17,0.20), mean=0.113, stddev=0.0222], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.07,0.12,0.24,0.33 0.43,0.51,0.55,0.65), mean=0.16, stddev=0.12], bias-{mean,stddev}=0.0003215,0.00585, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2.94e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.55,-0.41,-0.27 -0.16,-0.04,0.24,0.54,0.70 0.79,0.91,1.0,1.2), mean=0.251, stddev=0.334], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.97,-0.71,-0.48,-0.34 -0.19,0.03,0.44,0.79,1.0 1.2,1.4,1.5,2.2), mean=0.428, stddev=0.469]
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=5790.55, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.15,0.01,0.04,0.09 0.13,0.19,0.27,0.35,0.40 0.44,0.49,0.52,0.57), mean=0.268, stddev=0.106], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.30,0.52,0.68,0.77 0.84,0.91,0.99,1.2), mean=0.487, stddev=0.245]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.0001999, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005055, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.06,0.07,0.09,0.18,0.22 0.23,0.25,0.26,0.42), mean=0.114, stddev=0.0595], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.15,0.16,0.20,0.27,0.34 0.36,0.38,0.38,0.41), mean=0.219, stddev=0.0711], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,3e-05,5e-05,0.0007 0.03,0.04,0.09,0.24,0.41 0.56,0.69,0.74,0.84), mean=0.156, stddev=0.17], bias-{mean,stddev}=0.0001156,0.001738, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.0001999, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.002371, w_fc-rms=0.003964, w_oc-rms=0.004262, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000244448, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.1,-1.5,-1.4,-1.1 -0.65,-0.26,0.49,1.2,1.5 1.7,2.0,2.4,3.3), mean=0.438, stddev=0.841], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.32,-0.16,-0.13,-0.07 -0.008,0.07,0.21,0.35,0.42 0.49,0.56,0.58,0.78), mean=0.212, stddev=0.169] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000244448, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-1.5,-1.2,-0.84 -0.60,-0.22,0.63,1.4,1.9 2.3,2.6,2.8,4.8), mean=0.639, stddev=0.964], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.36,-0.27,-0.19 -0.07,0.04,0.20,0.33,0.41 0.49,0.60,0.62,0.76), mean=0.185, stddev=0.202] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.174083, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-12,-11,-9.1,-6.9 -4.9,-3.1,0.21,3.3,5.3 6.6,8.9,9.7,16), mean=0.2, stddev=4.13], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.9,-2.8,-2.4,-1.9 -1.3,-0.69,0.57,1.9,2.7 3.2,3.8,4.0,5.7), mean=0.616, stddev=1.54] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0371617, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.5,-1.1,-0.76 -0.48,-0.09,0.62,1.3,1.6 1.8,2.2,2.4,3.3), mean=0.581, stddev=0.807], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.58,-0.34,-0.23,-0.16 -0.08,0.01,0.22,0.40,0.49 0.55,0.63,0.73,1.0), mean=0.213, stddev=0.224] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0201829, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.7,-8.1,-7.2,-5.2 -4.0,-2.3,0.29,2.5,4.1 5.9,7.0,8.0,14), mean=0.166, stddev=3.26], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.4,-2.6,-2.4,-1.6 -1.1,-0.45,0.72,1.8,2.3 2.9,3.7,3.9,5.1), mean=0.687, stddev=1.39] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.11e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1658
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.0001999, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006269, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.08,0.09,0.12,0.18,0.19 0.20,0.20,0.21,0.22), mean=0.135, stddev=0.0465], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.07,0.09,0.10,0.11,0.12 0.13,0.14,0.14,0.18), mean=0.0986, stddev=0.0224], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,7e-06,1e-05,2e-05 3e-05,0.0001,0.03,0.18,0.27 0.33,0.38,0.42,0.44), mean=0.0883, stddev=0.112], bias-{mean,stddev}=0.0001124,0.003647, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.0001999, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006832, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.04,0.05 0.06,0.07,0.10,0.13,0.15 0.17,0.20,0.22,0.40), mean=0.103, stddev=0.0382], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.22 0.22,0.24,0.30,0.37,0.39 0.40,0.41,0.42,0.44), mean=0.306, stddev=0.0673], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,8e-06,1e-05,2e-05 3e-05,0.0001,0.02,0.45,0.62 0.72,0.78,0.82,0.87), mean=0.177, stddev=0.259], bias-{mean,stddev}=1.144e-10,0.001421, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.55521 tdnn2.affine:7.6554 lstm1.W_all:6.40866 lstm1.lstm_nonlin:0.118067 lstm1.W_rp:2.59919 tdnn3.affine:4.7849 tdnn4.affine:5.47994 lstm2.W_all:4.26947 lstm2.lstm_nonlin:0.0542492 lstm2.W_rp:1.79374 tdnn5.affine:3.84845 tdnn6.affine:4.55498 lstm3.W_all:5.87827 lstm3.lstm_nonlin:0.143327 lstm3.W_rp:2.30597 output.affine:5.05358 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.8667 tdnn2.affine:10.9804 lstm1.W_all:19.7033 lstm1.lstm_nonlin:1.43751 lstm1.W_rp:11.3468 tdnn3.affine:7.92648 tdnn4.affine:8.1448 lstm2.W_all:15.4985 lstm2.lstm_nonlin:0.676282 lstm2.W_rp:10.4481 tdnn5.affine:7.30492 tdnn6.affine:7.79479 lstm3.W_all:22.6956 lstm3.lstm_nonlin:1.90252 lstm3.W_rp:25.9532 output.affine:29.444 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.636376 tdnn2.affine:0.697007 lstm1.W_all:0.325161 lstm1.lstm_nonlin:0.0828967 lstm1.W_rp:0.229851 tdnn3.affine:0.602291 tdnn4.affine:0.672306 lstm2.W_all:0.274566 lstm2.lstm_nonlin:0.0795744 lstm2.W_rp:0.171505 tdnn5.affine:0.529557 tdnn6.affine:0.58732 lstm3.W_all:0.259218 lstm3.lstm_nonlin:0.0750264 lstm3.W_rp:0.0889779 output.affine:0.171762 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:52:29 KST 2020, elapsed time 1 seconds
