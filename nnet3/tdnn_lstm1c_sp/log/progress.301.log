# nnet3-info exp/nnet3/tdnn_lstm1c_sp/301.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/300.mdl exp/nnet3/tdnn_lstm1c_sp/301.mdl 
# Started at Thu Jul 30 12:00:14 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/301.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000192769, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03168, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.01 0.01,0.03,0.55,0.69,0.78 0.85,0.93,0.96,1.1), mean=0.466, stddev=0.29], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.15 0.17,0.21,0.62,0.88,1.2 1.3,1.5,1.5,1.6), mean=0.618, stddev=0.374], bias-{mean,stddev}=-0.001811,0.05973, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.09e+06, self-repaired-proportion=0.183143, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,2e-05,3e-05,4e-05 8e-05,0.0003,0.05,0.09,0.11 0.12,0.14,0.16,0.18), mean=0.0513, stddev=0.0435], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.01,0.02 0.04,0.07,0.42,0.58,0.71 0.80,0.87,0.93,0.99), mean=0.373, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.02,0.05,0.28,0.36,0.41 0.50,0.65,0.69,1.5), mean=0.26, stddev=0.171], oderiv-count=1.20051e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36058, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,7e-06,2e-05,4e-05 0.0001,0.0003,0.05,0.08,0.11 0.12,0.15,0.16,0.19), mean=0.0487, stddev=0.043], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0001,0.0002,0.0003 0.0005,0.002,0.09,0.11,0.12 0.14,0.15,0.15,0.16), mean=0.0698, stddev=0.0493]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000192769, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01185, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.38 0.39,0.41,0.45,0.51,0.55 0.59,0.62,0.64,0.71), mean=0.463, stddev=0.0648], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.006 0.009,0.02,0.28,0.33,0.37 0.39,0.44,0.51,0.71), mean=0.23, stddev=0.141], bias-{mean,stddev}=-0.02744,0.04022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.22,0.23 0.24,0.26,0.29,0.32,0.34 0.37,0.38,0.42,0.49), mean=0.29, stddev=0.0432], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.37,0.37,0.39 0.40,0.42,0.44,0.47,0.49 0.51,0.53,0.53,0.56), mean=0.445, stddev=0.0367], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.05 0.06,0.06,0.07,0.07), mean=0.0428, stddev=0.00733], oderiv-count=1.23792e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35283.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.23 0.24,0.25,0.29,0.32,0.35 0.37,0.41,0.44,0.51), mean=0.292, stddev=0.0461], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.43,0.44 0.46,0.48,0.52,0.58,0.61 0.63,0.68,0.68,0.72), mean=0.529, stddev=0.0601]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000192769, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01786, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-08,2e-06,4e-06,2e-05 0.0007,0.16,0.42,0.60,0.68 0.74,0.80,0.84,1.0), mean=0.391, stddev=0.234], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.36,0.39,0.45 0.52,0.71,0.82,0.91,0.97 1.0,1.1,1.2,1.3), mean=0.798, stddev=0.163], bias-{mean,stddev}=0.003658,0.02891, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000192769, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.07587, w_fc-rms=0.03287, w_oc-rms=0.04672, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636557, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.71,0.80,0.82,0.86), mean=0.496, stddev=0.0801], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.0234] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636557, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.45,0.46,0.48 0.49,0.50,0.51,0.55,0.59 0.68,0.78,0.81,0.87), mean=0.529, stddev=0.0665], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.17 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0242] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0385717, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.89,-0.87,-0.51 -0.28,-0.12,0.001,0.16,0.31 0.58,0.87,0.89,0.93), mean=0.0187, stddev=0.307], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.16,0.19,0.23 0.37,0.44,0.58,0.75,1.0 1.0,1.0,1.0,1.0), mean=0.607, stddev=0.221] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636557, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.39,0.39,0.40 0.42,0.43,0.46,0.50,0.50 0.51,0.55,0.58,0.74), mean=0.462, stddev=0.0402], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0204] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00636557, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.66,-0.61,-0.32 -0.14,-0.07,0.0005,0.09,0.21 0.33,0.61,0.68,0.73), mean=0.012, stddev=0.205], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.45,0.49,0.59 0.79,0.84,0.91,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.884, stddev=0.112] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.16552e-05, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000233272, count-zeroing-boundaries=295792
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.293113
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000192769, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04034, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.37,0.41 0.44,0.52,0.88,1.2,1.3 1.3,1.4,1.4,1.4), mean=0.859, stddev=0.329], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0009,0.001,0.003 0.01,0.33,0.54,0.73,0.92 1.2,1.6,1.7,1.9), mean=0.546, stddev=0.354], bias-{mean,stddev}=0.01282,0.2687, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000192769, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01356, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.22,0.23,0.26 0.28,0.30,0.37,0.43,0.47 0.50,0.53,0.57,0.62), mean=0.37, stddev=0.0797], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.13 0.15,0.17,0.29,0.40,0.43 0.45,0.47,0.49,0.52), mean=0.287, stddev=0.114], bias-{mean,stddev}=0.002147,0.01024, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.99e+05, self-repaired-proportion=0.00195826, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.01,0.02,0.03 0.04,0.06,0.08,0.11,0.12 0.13,0.15,0.15,0.18), mean=0.0819, stddev=0.0308], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.11,0.17,0.22 0.26,0.38,0.52,0.62,0.67 0.70,0.73,0.74,0.85), mean=0.498, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.09,0.09,0.10 0.10,0.11,0.13,0.15,0.18 0.22,0.26,0.28,0.32), mean=0.136, stddev=0.0395], oderiv-count=1.15142e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32961.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.02,0.02,0.03 0.04,0.06,0.08,0.11,0.12 0.13,0.15,0.15,0.19), mean=0.0813, stddev=0.0306], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.07,0.07,0.08 0.10,0.11,0.12,0.14,0.15 0.16,0.17,0.18,0.20), mean=0.124, stddev=0.0243]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000192769, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008852, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.29 0.30,0.31,0.34,0.38,0.41 0.44,0.46,0.47,0.54), mean=0.347, stddev=0.0445], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.12,0.13,0.14 0.15,0.16,0.19,0.23,0.26 0.28,0.31,0.32,0.39), mean=0.197, stddev=0.0457], bias-{mean,stddev}=-0.02333,0.02054, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.89e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.23,0.24,0.26,0.29,0.31 0.32,0.33,0.34,0.43), mean=0.266, stddev=0.0328], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.38,0.39 0.40,0.41,0.44,0.46,0.47 0.48,0.49,0.49,0.52), mean=0.435, stddev=0.0281], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0357, stddev=0.0031], oderiv-count=1.05955e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30639, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.22 0.23,0.24,0.27,0.30,0.31 0.33,0.34,0.36,0.41), mean=0.27, stddev=0.0341], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.40,0.41,0.43 0.44,0.46,0.51,0.57,0.61 0.64,0.70,0.71,0.94), mean=0.518, stddev=0.0697]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000192769, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01487, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-06,3e-06,8e-06 3e-05,0.0007,0.34,0.53,0.60 0.64,0.69,0.71,0.90), mean=0.292, stddev=0.241], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.31,0.34,0.39 0.48,0.61,0.67,0.74,0.79 0.86,0.96,1.0,1.4), mean=0.665, stddev=0.133], bias-{mean,stddev}=0.006251,0.036, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000192769, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04825, w_fc-rms=0.01777, w_oc-rms=0.03777, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642271, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.50,0.52,0.58 0.60,0.69,0.73,0.81), mean=0.507, stddev=0.0534], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0183] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642271, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.46,0.48 0.49,0.50,0.50,0.55,0.59 0.63,0.68,0.69,0.77), mean=0.523, stddev=0.0478], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0209] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00857609, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.84,-0.76,-0.48 -0.28,-0.12,0.0009,0.15,0.34 0.55,0.74,0.77,0.85), mean=0.0121, stddev=0.282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.28,0.39 0.45,0.52,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.712, stddev=0.228] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642271, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.50,0.50,0.52 0.54,0.57,0.59,0.61), mean=0.493, stddev=0.028], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0189] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00642271, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.67,-0.57,-0.44,-0.29 -0.16,-0.06,0.0003,0.08,0.20 0.37,0.46,0.53,0.59), mean=0.0083, stddev=0.176], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.60,0.64,0.75 0.78,0.86,0.92,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.913, stddev=0.0913] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.02501e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=9.58538e-05, count-zeroing-boundaries=260814
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.293113
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000192769, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03921, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.50,0.53 0.57,0.61,0.87,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.859, stddev=0.247], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.001,0.002 0.003,0.01,0.56,0.82,0.96 1.1,1.3,1.5,1.7), mean=0.49, stddev=0.4], bias-{mean,stddev}=0.002585,0.2175, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000192769, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01298, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.27 0.28,0.30,0.35,0.41,0.45 0.49,0.52,0.54,0.61), mean=0.356, stddev=0.0667], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.16 0.17,0.19,0.27,0.38,0.41 0.43,0.45,0.46,0.50), mean=0.282, stddev=0.091], bias-{mean,stddev}=0.0004956,0.005903, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.62e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.0675, stddev=0.027], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.20 0.25,0.34,0.51,0.61,0.66 0.68,0.71,0.72,0.75), mean=0.483, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.14,0.17,0.19 0.21,0.23,0.24,0.28), mean=0.146, stddev=0.0311], oderiv-count=1.01626e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28316.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.17), mean=0.0688, stddev=0.0275], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.09,0.11,0.13,0.14 0.14,0.15,0.16,0.18), mean=0.109, stddev=0.0219]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000192769, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008691, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.17,0.22 0.27,0.30,0.34,0.39,0.41 0.43,0.45,0.46,0.51), mean=0.338, stddev=0.0617], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.15,0.18,0.23,0.26 0.29,0.31,0.34,0.41), mean=0.193, stddev=0.0466], bias-{mean,stddev}=-0.01688,0.02538, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.14e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.17,0.20 0.23,0.25,0.28,0.31,0.32 0.33,0.35,0.36,0.43), mean=0.277, stddev=0.0412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.36,0.37 0.39,0.40,0.43,0.46,0.47 0.48,0.49,0.50,0.54), mean=0.429, stddev=0.0336], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0294, stddev=0.00253], oderiv-count=869600
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25994.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.17,0.20 0.23,0.25,0.29,0.32,0.33 0.35,0.36,0.38,0.51), mean=0.283, stddev=0.0452], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.28,0.38 0.43,0.48,0.55,0.62,0.68 0.72,0.77,0.80,1.1), mean=0.551, stddev=0.107]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000192769, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02113, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.28,0.29,0.31 0.33,0.37,0.51,0.65,0.72 0.77,0.84,0.89,1.1), mean=0.518, stddev=0.148], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.75 0.79,0.82,0.89,1.1,1.2 1.3,1.4,1.5,1.9), mean=0.947, stddev=0.179], bias-{mean,stddev}=0.01479,0.01958, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000192769, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1016, w_fc-rms=0.04786, w_oc-rms=0.07342, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00649175, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.57,0.61,0.63 0.65,0.67,0.73,0.78,0.81 0.83,0.85,0.86,0.89), mean=0.728, stddev=0.0615], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.15,0.17,0.19,0.20 0.20,0.20,0.21,0.21), mean=0.165, stddev=0.0247] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00649175, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.50,0.57,0.60 0.62,0.65,0.70,0.75,0.79 0.83,0.86,0.88,0.89), mean=0.704, stddev=0.0702], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.12 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.23), mean=0.167, stddev=0.0248] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0336755, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.85,-0.79,-0.63 -0.44,-0.34,0.002,0.32,0.47 0.58,0.80,0.85,0.92), mean=-0.00732, stddev=0.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.18,0.23 0.30,0.36,0.46,0.52,0.55 0.57,0.59,0.61,0.65), mean=0.442, stddev=0.101] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00649175, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.51,0.53 0.56,0.60,0.65,0.68,0.72 0.74,0.76,0.81,0.88), mean=0.643, stddev=0.0618], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0184] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00649175, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.71,-0.62,-0.48 -0.36,-0.26,0.006,0.24,0.36 0.49,0.65,0.67,0.75), mean=-0.00711, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.43,0.48 0.55,0.63,0.71,0.76,0.78 0.80,0.81,0.83,0.84), mean=0.687, stddev=0.0916] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.25519e-06, count-zeroing-boundaries=221710
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.293113
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000192769, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09084, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.8,2.6,2.7 2.8,2.8,2.9,3.1), mean=1.98, stddev=0.622], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.91,0.98,1.1 1.1,1.2,1.4,1.6,1.9 2.1,2.2,2.3,2.4), mean=1.43, stddev=0.296], bias-{mean,stddev}=-0.0008607,0.6905, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000192769, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04435, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.61,0.63 0.64,0.66,0.70,0.75,0.78 0.82,0.87,0.94,2.1), mean=0.71, stddev=0.0845], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.2 1.3,1.3,1.7,2.5,2.6 2.7,2.8,2.8,2.9), mean=1.95, stddev=0.58], bias-{mean,stddev}=5.51e-09,0.0246, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.41), mean=0.0169, stddev=0.0137], oderiv-count=652480
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/300.mdl exp/nnet3/tdnn_lstm1c_sp/301.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.22491 tdnn2.affine:4.14628 lstm1.W_all:3.24185 lstm1.lstm_nonlin:0.0708856 lstm1.W_rp:1.31194 tdnn3.affine:3.02127 tdnn4.affine:3.19934 lstm2.W_all:2.33473 lstm2.lstm_nonlin:0.042064 lstm2.W_rp:0.933255 tdnn5.affine:2.56284 tdnn6.affine:2.65649 lstm3.W_all:2.37755 lstm3.lstm_nonlin:0.0633861 lstm3.W_rp:0.988577 output.affine:2.69672 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.5877 tdnn2.affine:10.7267 lstm1.W_all:20.8061 lstm1.lstm_nonlin:2.16559 lstm1.W_rp:15.4546 tdnn3.affine:8.6405 tdnn4.affine:8.00389 lstm2.W_all:17.3698 lstm2.lstm_nonlin:1.45482 lstm2.W_rp:14.8394 tdnn5.affine:8.26569 tdnn6.affine:7.85831 lstm3.W_all:24.5911 lstm3.lstm_nonlin:3.05929 lstm3.W_rp:35.2081 output.affine:32.8224 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.334841 tdnn2.affine:0.385538 lstm1.W_all:0.155573 lstm1.lstm_nonlin:0.0331255 lstm1.W_rp:0.0848313 tdnn3.affine:0.349475 tdnn4.affine:0.398667 lstm2.W_all:0.13422 lstm2.lstm_nonlin:0.0291693 lstm2.W_rp:0.062808 tdnn5.affine:0.309833 tdnn6.affine:0.337436 lstm3.W_all:0.0965053 lstm3.lstm_nonlin:0.0206628 lstm3.W_rp:0.0281425 output.affine:0.0821979 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:00:15 KST 2020, elapsed time 1 seconds
