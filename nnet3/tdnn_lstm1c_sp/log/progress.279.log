# nnet3-info exp/nnet3/tdnn_lstm1c_sp/279.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/278.mdl exp/nnet3/tdnn_lstm1c_sp/279.mdl 
# Started at Thu Jul 30 11:51:26 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/279.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000221638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03336, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.01 0.02,0.05,0.58,0.73,0.81 0.90,0.97,1.0,1.2), mean=0.493, stddev=0.302], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.16 0.18,0.22,0.65,0.92,1.3 1.5,1.6,1.6,1.7), mean=0.648, stddev=0.398], bias-{mean,stddev}=0.0004692,0.06286, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.66e+05, self-repaired-proportion=0.213502, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,5e-06,9e-06,4e-05 8e-05,0.0003,0.06,0.10,0.12 0.13,0.15,0.17,0.19), mean=0.0571, stddev=0.0467], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.003,0.004,0.01 0.03,0.06,0.43,0.62,0.71 0.79,0.87,0.92,0.99), mean=0.383, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.02,0.02 0.04,0.08,0.27,0.36,0.40 0.50,0.63,0.68,1.5), mean=0.256, stddev=0.161], oderiv-count=1.20896e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32358.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,4e-06,6e-06,2e-05 7e-05,0.0002,0.05,0.09,0.11 0.14,0.16,0.17,0.20), mean=0.0538, stddev=0.046], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0001,0.0003 0.0006,0.002,0.09,0.12,0.13 0.14,0.15,0.16,0.17), mean=0.0757, stddev=0.052]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000221638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01247, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.38,0.39 0.41,0.43,0.48,0.54,0.58 0.62,0.65,0.69,0.75), mean=0.488, stddev=0.0681], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.006,0.009 0.01,0.03,0.30,0.35,0.39 0.41,0.46,0.51,0.77), mean=0.244, stddev=0.146], bias-{mean,stddev}=-0.02409,0.03996, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.25e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.24,0.26 0.27,0.28,0.32,0.35,0.39 0.40,0.45,0.46,0.52), mean=0.322, stddev=0.0465], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.38,0.39 0.41,0.42,0.45,0.47,0.50 0.51,0.52,0.53,0.55), mean=0.448, stddev=0.0348], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0403, stddev=0.00735], oderiv-count=1.19901e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31636.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.26 0.27,0.28,0.32,0.36,0.39 0.42,0.46,0.49,0.53), mean=0.324, stddev=0.05], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.46,0.49 0.50,0.53,0.58,0.64,0.68 0.71,0.74,0.75,0.79), mean=0.586, stddev=0.0678]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000221638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01844, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,7e-06,4e-05 0.001,0.17,0.42,0.62,0.71 0.77,0.83,0.88,1.1), mean=0.402, stddev=0.243], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.39,0.43,0.47 0.55,0.73,0.85,0.94,1.0 1.1,1.1,1.2,1.3), mean=0.824, stddev=0.168], bias-{mean,stddev}=0.002344,0.02783, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000221638, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06084, w_fc-rms=0.03077, w_oc-rms=0.04429, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063416, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.69,0.79,0.81,0.85), mean=0.493, stddev=0.0783], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.18 0.19,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0236] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063416, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.43,0.44,0.46 0.47,0.48,0.50,0.53,0.58 0.65,0.77,0.79,0.85), mean=0.517, stddev=0.0639], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0222] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0344943, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.89,-0.85,-0.52 -0.27,-0.13,0.0009,0.16,0.32 0.55,0.87,0.88,0.91), mean=0.0156, stddev=0.301], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.20,0.24 0.36,0.42,0.55,0.75,1.0 1.0,1.0,1.0,1.0), mean=0.594, stddev=0.223] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063416, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.42,0.45,0.50,0.50 0.50,0.53,0.56,0.70), mean=0.456, stddev=0.0406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.218, stddev=0.0216] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0063416, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.71,-0.65,-0.35 -0.17,-0.08,0.0005,0.10,0.22 0.34,0.66,0.71,0.76), mean=0.0112, stddev=0.217], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.40,0.43,0.55 0.76,0.82,0.89,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.867, stddev=0.124] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.02534e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=8.10718e-05, count-zeroing-boundaries=296034
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.232507
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000221638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04083, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.35,0.38 0.41,0.48,0.89,1.2,1.3 1.4,1.4,1.4,1.5), mean=0.858, stddev=0.361], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.002,0.003 0.01,0.32,0.55,0.76,0.91 1.2,1.6,1.7,2.0), mean=0.553, stddev=0.357], bias-{mean,stddev}=0.01286,0.2774, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000221638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01348, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.21,0.23,0.25 0.26,0.30,0.36,0.43,0.48 0.51,0.54,0.57,0.66), mean=0.367, stddev=0.0835], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.13,0.16,0.29,0.41,0.43 0.46,0.47,0.48,0.52), mean=0.282, stddev=0.121], bias-{mean,stddev}=0.003036,0.01237, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0.00668208, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.03,0.04 0.06,0.08,0.10,0.12,0.14 0.15,0.17,0.18,0.21), mean=0.0998, stddev=0.0333], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.12,0.18,0.23 0.29,0.39,0.51,0.61,0.63 0.67,0.69,0.71,0.80), mean=0.491, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.08,0.08 0.09,0.09,0.10,0.12,0.14 0.17,0.20,0.22,0.27), mean=0.11, stddev=0.0289], oderiv-count=1.06573e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29471.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.02,0.03,0.04 0.05,0.07,0.10,0.12,0.14 0.15,0.17,0.18,0.21), mean=0.0978, stddev=0.0331], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.08,0.10,0.11 0.12,0.13,0.15,0.17,0.19 0.20,0.21,0.22,0.27), mean=0.153, stddev=0.0289]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000221638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009244, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.29,0.30 0.31,0.32,0.35,0.39,0.43 0.45,0.48,0.49,0.57), mean=0.362, stddev=0.046], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.13,0.13,0.15 0.16,0.17,0.20,0.24,0.27 0.29,0.31,0.34,0.39), mean=0.206, stddev=0.0456], bias-{mean,stddev}=-0.02271,0.01976, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.02e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.25,0.26,0.29,0.32,0.34 0.36,0.37,0.38,0.50), mean=0.294, stddev=0.0374], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.50,0.50,0.51), mean=0.435, stddev=0.0283], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.04), mean=0.0329, stddev=0.00273], oderiv-count=1.0913e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27306.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.24 0.25,0.26,0.29,0.33,0.35 0.36,0.37,0.38,0.52), mean=0.296, stddev=0.039], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.47 0.49,0.51,0.55,0.62,0.66 0.70,0.73,0.76,1.1), mean=0.567, stddev=0.0732]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000221638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01525, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,1e-06,2e-06,5e-06 2e-05,0.0005,0.35,0.55,0.62 0.66,0.71,0.74,0.95), mean=0.299, stddev=0.249], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.35,0.40 0.50,0.62,0.69,0.77,0.81 0.87,0.95,1.0,1.4), mean=0.683, stddev=0.134], bias-{mean,stddev}=0.004321,0.03753, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000221638, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03466, w_fc-rms=0.01504, w_oc-rms=0.03516, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639719, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.44 0.46,0.47,0.50,0.52,0.57 0.61,0.68,0.72,0.80), mean=0.504, stddev=0.053], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0184] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639719, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.46 0.47,0.49,0.50,0.53,0.56 0.60,0.64,0.66,0.74), mean=0.51, stddev=0.0424], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0187] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00732763, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.70,-0.48 -0.27,-0.13,0.0006,0.16,0.32 0.55,0.73,0.77,0.86), mean=0.0115, stddev=0.276], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.27,0.39 0.45,0.51,0.62,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.706, stddev=0.233] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639719, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.45,0.46,0.50,0.50,0.52 0.54,0.57,0.58,0.66), mean=0.488, stddev=0.0319], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0198] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00639719, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.70,-0.58,-0.44,-0.31 -0.17,-0.08,0.0004,0.10,0.21 0.38,0.47,0.55,0.63), mean=0.00917, stddev=0.185], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.56,0.60,0.72 0.77,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.903, stddev=0.0998] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.4451e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.83065e-05, count-zeroing-boundaries=261052
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.232507
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000221638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03961, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.45,0.49,0.54 0.57,0.60,0.88,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.866, stddev=0.257], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0008,0.001,0.001 0.003,0.008,0.58,0.83,0.98 1.1,1.3,1.5,1.6), mean=0.495, stddev=0.404], bias-{mean,stddev}=0.002051,0.2198, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000221638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01297, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.26 0.28,0.30,0.34,0.41,0.46 0.49,0.54,0.55,0.62), mean=0.355, stddev=0.0705], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.16 0.17,0.19,0.27,0.38,0.41 0.43,0.45,0.46,0.52), mean=0.281, stddev=0.0935], bias-{mean,stddev}=0.0008511,0.006538, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.22e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.05,0.08,0.11,0.12 0.13,0.15,0.15,0.17), mean=0.0812, stddev=0.0306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.17,0.21 0.27,0.34,0.50,0.59,0.64 0.66,0.68,0.71,0.73), mean=0.47, stddev=0.136], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.10,0.11,0.13,0.15 0.17,0.18,0.19,0.21), mean=0.115, stddev=0.0237], oderiv-count=1.01184e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25141.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.06,0.08,0.11,0.12 0.13,0.15,0.16,0.17), mean=0.0835, stddev=0.0309], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.09 0.10,0.11,0.13,0.15,0.17 0.18,0.18,0.19,0.21), mean=0.134, stddev=0.0249]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000221638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009103, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.20,0.25 0.28,0.31,0.35,0.41,0.43 0.45,0.47,0.49,0.52), mean=0.354, stddev=0.0612], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.14 0.15,0.16,0.19,0.24,0.27 0.30,0.33,0.36,0.43), mean=0.202, stddev=0.0491], bias-{mean,stddev}=-0.01962,0.02438, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.79e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.20,0.23 0.25,0.27,0.31,0.34,0.35 0.37,0.39,0.40,0.50), mean=0.304, stddev=0.0426], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.36,0.38 0.39,0.40,0.43,0.45,0.46 0.47,0.48,0.49,0.53), mean=0.425, stddev=0.0294], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0272, stddev=0.00222], oderiv-count=955040
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=22976.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.23 0.25,0.28,0.31,0.34,0.36 0.38,0.40,0.44,0.58), mean=0.311, stddev=0.0475], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.31,0.33,0.41 0.48,0.53,0.61,0.68,0.74 0.79,0.83,0.85,1.1), mean=0.607, stddev=0.109]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000221638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02185, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.30,0.32 0.34,0.39,0.52,0.68,0.76 0.81,0.86,0.89,1.2), mean=0.536, stddev=0.153], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.66,0.69,0.75 0.78,0.82,0.89,1.1,1.3 1.4,1.6,1.8,2.1), mean=0.971, stddev=0.224], bias-{mean,stddev}=0.01796,0.02323, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000221638, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1013, w_fc-rms=0.04952, w_oc-rms=0.06856, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646432, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.57,0.60 0.62,0.66,0.71,0.76,0.79 0.81,0.83,0.84,0.87), mean=0.709, stddev=0.0623], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.14,0.15,0.17,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.171, stddev=0.0224] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646432, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.54,0.57 0.60,0.63,0.69,0.73,0.78 0.81,0.84,0.86,0.88), mean=0.684, stddev=0.0709], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.174, stddev=0.0229] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0310121, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.85,-0.80,-0.61 -0.45,-0.33,-0.01,0.32,0.43 0.57,0.73,0.83,0.91), mean=-0.00784, stddev=0.359], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.20,0.23 0.29,0.36,0.44,0.49,0.52 0.53,0.55,0.56,0.62), mean=0.42, stddev=0.0866] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646432, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.48,0.50,0.53 0.57,0.59,0.63,0.67,0.69 0.72,0.75,0.79,0.84), mean=0.631, stddev=0.0564], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.15,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.179, stddev=0.0172] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00646432, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.71,-0.69,-0.52 -0.38,-0.26,-0.01,0.24,0.34 0.48,0.63,0.70,0.78), mean=-0.00835, stddev=0.297], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.39,0.44 0.51,0.59,0.67,0.72,0.75 0.76,0.78,0.79,0.85), mean=0.651, stddev=0.0939] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.25277e-06, count-zeroing-boundaries=221948
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.232507
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000221638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08769, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.5,2.6 2.7,2.8,2.8,3.0), mean=1.91, stddev=0.591], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.99,1.0,1.1 1.1,1.2,1.3,1.5,1.8 2.0,2.1,2.1,2.3), mean=1.39, stddev=0.266], bias-{mean,stddev}=-0.02028,0.5732, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000221638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04414, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.61,0.62 0.64,0.66,0.70,0.74,0.78 0.81,0.86,0.93,2.2), mean=0.706, stddev=0.0865], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.7,2.7,2.8,2.9), mean=1.95, stddev=0.561], bias-{mean,stddev}=7.295e-09,0.02857, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0167, stddev=0.0139], oderiv-count=594560
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/278.mdl exp/nnet3/tdnn_lstm1c_sp/279.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.75413 tdnn2.affine:4.64963 lstm1.W_all:3.7128 lstm1.lstm_nonlin:0.0908483 lstm1.W_rp:1.48221 tdnn3.affine:3.23262 tdnn4.affine:3.54231 lstm2.W_all:2.65843 lstm2.lstm_nonlin:0.0437158 lstm2.W_rp:1.06481 tdnn5.affine:2.69946 tdnn6.affine:2.95219 lstm3.W_all:2.96732 lstm3.lstm_nonlin:0.0851428 lstm3.W_rp:1.26737 output.affine:3.13706 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.2539 tdnn2.affine:11.2837 lstm1.W_all:21.4821 lstm1.lstm_nonlin:1.85391 lstm1.W_rp:15.6669 tdnn3.affine:8.59087 tdnn4.affine:8.35361 lstm2.W_all:17.817 lstm2.lstm_nonlin:1.17693 lstm2.W_rp:14.9908 tdnn5.affine:8.26142 tdnn6.affine:8.23003 lstm3.W_all:25.4412 lstm3.lstm_nonlin:3.00967 lstm3.W_rp:33.544 output.affine:32.6739 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.356934 tdnn2.affine:0.410251 lstm1.W_all:0.172516 lstm1.lstm_nonlin:0.049356 lstm1.W_rp:0.0944446 tdnn3.affine:0.374201 tdnn4.affine:0.421185 lstm2.W_all:0.148813 lstm2.lstm_nonlin:0.037482 lstm2.W_rp:0.0708949 tdnn5.affine:0.325424 tdnn6.affine:0.355239 lstm3.W_all:0.116341 lstm3.lstm_nonlin:0.0284385 lstm3.W_rp:0.0378398 output.affine:0.0958738 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:51:26 KST 2020, elapsed time 0 seconds
