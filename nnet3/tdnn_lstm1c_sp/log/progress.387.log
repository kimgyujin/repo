# nnet3-info exp/nnet3/tdnn_lstm1c_sp/387.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/386.mdl exp/nnet3/tdnn_lstm1c_sp/387.mdl 
# Started at Thu Jul 30 12:34:29 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/387.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000111718, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03248, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.006 0.008,0.02,0.57,0.73,0.80 0.86,0.94,0.98,1.2), mean=0.47, stddev=0.309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.16 0.18,0.23,0.68,0.93,1.2 1.3,1.4,1.4,1.5), mean=0.644, stddev=0.367], bias-{mean,stddev}=-0.005658,0.06152, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.77e+05, self-repaired-proportion=0.184066, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,2e-05,2e-05,3e-05 5e-05,0.0001,0.04,0.09,0.11 0.12,0.14,0.15,0.20), mean=0.0463, stddev=0.0451], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.03 0.04,0.06,0.37,0.59,0.70 0.80,0.88,0.92,0.99), mean=0.348, stddev=0.265], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.008,0.01 0.02,0.03,0.35,0.50,0.61 0.69,0.81,0.94,1.7), mean=0.336, stddev=0.241], oderiv-count=1.12621e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33096.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,9e-06,2e-05,2e-05 4e-05,0.0001,0.04,0.08,0.10 0.13,0.15,0.17,0.19), mean=0.0449, stddev=0.0444], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0001,0.0001,0.0002 0.0003,0.0006,0.08,0.11,0.12 0.13,0.15,0.15,0.16), mean=0.0632, stddev=0.0503]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000111718, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01167, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.38,0.40,0.45,0.51,0.54 0.58,0.63,0.64,0.75), mean=0.456, stddev=0.0676], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.004 0.005,0.01,0.28,0.34,0.37 0.40,0.43,0.47,0.76), mean=0.222, stddev=0.147], bias-{mean,stddev}=-0.03483,0.03963, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.20 0.21,0.23,0.26,0.29,0.31 0.33,0.35,0.38,0.45), mean=0.261, stddev=0.0429], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.35,0.37,0.39 0.40,0.41,0.44,0.47,0.49 0.50,0.52,0.53,0.57), mean=0.442, stddev=0.0372], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.10), mean=0.0521, stddev=0.0104], oderiv-count=1.16256e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32375, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.19,0.20 0.21,0.22,0.26,0.30,0.32 0.33,0.36,0.38,0.48), mean=0.263, stddev=0.0449], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.37,0.39 0.41,0.43,0.47,0.53,0.55 0.59,0.62,0.64,0.70), mean=0.479, stddev=0.0598]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000111718, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01761, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,6e-07,1e-06,1e-05 0.0002,0.17,0.41,0.59,0.66 0.72,0.79,0.85,1.1), mean=0.385, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.37,0.42 0.50,0.70,0.81,0.90,0.96 1.0,1.1,1.1,1.3), mean=0.785, stddev=0.169], bias-{mean,stddev}=0.002119,0.02665, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000111718, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.07674, w_fc-rms=0.0249, w_oc-rms=0.0455, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.48,0.50,0.55 0.70,0.76,0.78,0.84), mean=0.494, stddev=0.0731], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.17,0.19 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0197] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.44,0.45,0.46 0.47,0.48,0.50,0.53,0.57 0.64,0.72,0.77,0.81), mean=0.514, stddev=0.0573], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.18,0.19 0.21,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0183] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0118288, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.87,-0.84,-0.46 -0.26,-0.13,0.0008,0.15,0.30 0.62,0.80,0.87,0.89), mean=0.0153, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.23,0.29 0.39,0.45,0.58,0.74,1.0 1.0,1.0,1.0,1.0), mean=0.612, stddev=0.211] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.57,0.58,0.65), mean=0.462, stddev=0.0413], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0195] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.74,-0.70,-0.32 -0.18,-0.09,0.0005,0.10,0.22 0.45,0.64,0.74,0.82), mean=0.0105, stddev=0.231], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.39,0.53 0.72,0.80,0.87,0.93,1.0 1.0,1.0,1.0,1.0), mean=0.851, stddev=0.135] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.05355e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=5.43245e-05, count-zeroing-boundaries=294526
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.161983
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000111718, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03957, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.43,0.46 0.51,0.56,0.86,1.1,1.2 1.3,1.3,1.3,1.4), mean=0.857, stddev=0.282], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0006,0.0008,0.002 0.007,0.35,0.55,0.73,0.92 1.2,1.4,1.5,1.8), mean=0.543, stddev=0.334], bias-{mean,stddev}=0.01287,0.2584, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000111718, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01266, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.23,0.24,0.26 0.28,0.30,0.35,0.39,0.42 0.45,0.50,0.52,0.54), mean=0.348, stddev=0.0614], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.15 0.16,0.18,0.28,0.37,0.39 0.41,0.43,0.44,0.47), mean=0.273, stddev=0.0937], bias-{mean,stddev}=0.001491,0.009439, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.73e+05, self-repaired-proportion=0.00220798, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.12 0.14,0.15,0.16,0.18), mean=0.0791, stddev=0.0341], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.12,0.12,0.17 0.21,0.33,0.47,0.58,0.63 0.67,0.71,0.72,0.83), mean=0.449, stddev=0.15], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.09,0.10 0.10,0.11,0.12,0.16,0.19 0.23,0.28,0.30,0.35), mean=0.137, stddev=0.0445], oderiv-count=1.10445e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30209.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.12 0.13,0.15,0.16,0.18), mean=0.0786, stddev=0.0334], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.05,0.06,0.07 0.09,0.11,0.13,0.15,0.16 0.17,0.18,0.19,0.20), mean=0.126, stddev=0.0284]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000111718, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008296, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.27 0.28,0.29,0.32,0.36,0.38 0.40,0.42,0.42,0.46), mean=0.325, stddev=0.0381], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.12,0.13,0.14 0.15,0.16,0.18,0.21,0.24 0.25,0.28,0.30,0.36), mean=0.185, stddev=0.0378], bias-{mean,stddev}=-0.02745,0.01822, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.58e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.21,0.22,0.25,0.27,0.29 0.30,0.31,0.32,0.35), mean=0.248, stddev=0.0309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.35,0.36,0.38 0.39,0.40,0.43,0.45,0.46 0.47,0.48,0.48,0.50), mean=0.425, stddev=0.028], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0374, stddev=0.00269], oderiv-count=1.00032e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28044.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.20 0.21,0.22,0.25,0.28,0.29 0.30,0.32,0.33,0.36), mean=0.25, stddev=0.0314], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.40,0.41 0.42,0.44,0.48,0.53,0.56 0.59,0.62,0.65,0.78), mean=0.487, stddev=0.0577]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000111718, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01437, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,6e-06,2e-05 6e-05,0.001,0.33,0.51,0.58 0.62,0.68,0.70,0.90), mean=0.284, stddev=0.232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.35 0.43,0.60,0.66,0.72,0.77 0.80,0.86,0.92,1.3), mean=0.642, stddev=0.13], bias-{mean,stddev}=0.00496,0.03119, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000111718, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04698, w_fc-rms=0.01457, w_oc-rms=0.04023, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0065015, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.46 0.47,0.48,0.50,0.51,0.55 0.59,0.65,0.67,0.77), mean=0.503, stddev=0.0443], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0153] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0065015, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.45,0.46,0.47 0.48,0.50,0.50,0.53,0.55 0.59,0.63,0.64,0.71), mean=0.512, stddev=0.0367], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0155] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0065015, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.80,-0.73,-0.41 -0.22,-0.09,0.0003,0.11,0.31 0.50,0.64,0.68,0.76), mean=0.00775, stddev=0.247], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.30,0.40,0.42 0.47,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.721, stddev=0.216] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0065015, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.45,0.47,0.50,0.50,0.51 0.52,0.56,0.57,0.68), mean=0.489, stddev=0.0283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0181] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0065015, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.60,-0.54,-0.29 -0.17,-0.07,0.0002,0.09,0.21 0.36,0.47,0.55,0.62), mean=0.0065, stddev=0.188], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.55,0.58,0.67 0.75,0.82,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.892, stddev=0.108] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.53983e-05, count-zeroing-boundaries=259768
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.161983
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000111718, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0376, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.49,0.53 0.56,0.60,0.83,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.828, stddev=0.223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.003 0.005,0.01,0.56,0.79,0.91 1.0,1.2,1.3,1.4), mean=0.477, stddev=0.374], bias-{mean,stddev}=-0.0009142,0.2037, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000111718, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01189, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.23,0.25 0.26,0.28,0.31,0.37,0.41 0.44,0.48,0.49,0.56), mean=0.327, stddev=0.0592], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.24,0.35,0.37 0.39,0.41,0.42,0.45), mean=0.259, stddev=0.0808], bias-{mean,stddev}=0.0009308,0.006773, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.83e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.13,0.14,0.15), mean=0.0631, stddev=0.0286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.14,0.17 0.21,0.29,0.45,0.55,0.60 0.63,0.68,0.69,0.72), mean=0.427, stddev=0.143], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.11,0.13,0.16,0.19 0.22,0.23,0.24,0.27), mean=0.139, stddev=0.0334], oderiv-count=998656
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25879.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.03,0.04,0.06,0.09,0.10 0.11,0.13,0.14,0.16), mean=0.0646, stddev=0.0286], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.07,0.09,0.11,0.13,0.14 0.15,0.16,0.16,0.17), mean=0.109, stddev=0.0245]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000111718, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008294, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.15,0.22 0.26,0.28,0.32,0.37,0.39 0.41,0.42,0.43,0.46), mean=0.322, stddev=0.0596], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.14,0.15,0.17,0.22,0.24 0.27,0.30,0.33,0.40), mean=0.184, stddev=0.0445], bias-{mean,stddev}=-0.02132,0.02268, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.66e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.15,0.18 0.21,0.23,0.26,0.29,0.30 0.32,0.33,0.34,0.39), mean=0.26, stddev=0.0412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.35,0.36 0.37,0.39,0.42,0.44,0.45 0.47,0.48,0.49,0.52), mean=0.416, stddev=0.0323], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.031, stddev=0.00309], oderiv-count=908160
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23714.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.16,0.19 0.21,0.24,0.27,0.30,0.31 0.32,0.33,0.34,0.44), mean=0.265, stddev=0.0409], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.26,0.34 0.41,0.46,0.52,0.59,0.62 0.65,0.68,0.69,0.98), mean=0.518, stddev=0.0927]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000111718, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02075, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.27,0.28 0.30,0.35,0.49,0.66,0.72 0.77,0.85,0.91,0.98), mean=0.505, stddev=0.157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.62,0.71 0.77,0.80,0.88,1.1,1.2 1.3,1.4,1.5,1.9), mean=0.928, stddev=0.184], bias-{mean,stddev}=0.01329,0.01675, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000111718, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1083, w_fc-rms=0.04388, w_oc-rms=0.07413, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00656773, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.59,0.59,0.62 0.64,0.67,0.71,0.76,0.78 0.81,0.83,0.85,0.88), mean=0.714, stddev=0.0559], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.13 0.14,0.15,0.17,0.19,0.19 0.20,0.20,0.20,0.23), mean=0.169, stddev=0.0208] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00656773, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.53,0.56,0.58 0.59,0.62,0.66,0.70,0.76 0.80,0.83,0.85,0.89), mean=0.669, stddev=0.0643], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.15,0.17,0.19,0.20,0.20 0.21,0.21,0.21,0.23), mean=0.18, stddev=0.0225] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0282693, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.81,-0.72,-0.59 -0.44,-0.32,-0.02,0.28,0.42 0.56,0.75,0.84,0.92), mean=-0.00704, stddev=0.348], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.20,0.24 0.31,0.36,0.44,0.48,0.50 0.52,0.54,0.55,0.59), mean=0.419, stddev=0.0806] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00656773, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.49,0.50,0.53 0.55,0.59,0.64,0.67,0.70 0.72,0.76,0.80,0.88), mean=0.634, stddev=0.0585], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.14 0.15,0.16,0.18,0.19,0.19 0.19,0.20,0.20,0.21), mean=0.175, stddev=0.0173] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00656773, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.75,-0.64,-0.55 -0.40,-0.28,-0.01,0.25,0.37 0.51,0.70,0.77,0.87), mean=-0.00759, stddev=0.317], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.28,0.30,0.36 0.45,0.52,0.62,0.67,0.70 0.71,0.72,0.73,0.77), mean=0.592, stddev=0.101] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.26341e-06, count-zeroing-boundaries=220906
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.161983
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000111718, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08913, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.1,1.1,1.1 1.2,1.3,1.7,2.6,2.7 2.7,2.8,2.9,3.1), mean=1.93, stddev=0.635], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.91,1.0,1.1 1.2,1.2,1.4,1.6,1.8 2.0,2.1,2.1,2.2), mean=1.41, stddev=0.26], bias-{mean,stddev}=-0.03366,0.5892, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000111718, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04238, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.59,0.60 0.62,0.63,0.67,0.71,0.74 0.78,0.82,0.89,2.1), mean=0.679, stddev=0.0814], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.1,1.1 1.1,1.2,1.6,2.5,2.6 2.6,2.7,2.7,2.8), mean=1.85, stddev=0.594], bias-{mean,stddev}=4.639e-09,0.02232, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0168, stddev=0.0137], oderiv-count=610560
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/386.mdl exp/nnet3/tdnn_lstm1c_sp/387.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.36326 tdnn2.affine:3.12543 lstm1.W_all:2.38339 lstm1.lstm_nonlin:0.0493342 lstm1.W_rp:1.0292 tdnn3.affine:2.19675 tdnn4.affine:2.24993 lstm2.W_all:1.61287 lstm2.lstm_nonlin:0.0282376 lstm2.W_rp:0.701729 tdnn5.affine:1.80771 tdnn6.affine:1.92558 lstm3.W_all:1.98691 lstm3.lstm_nonlin:0.0482513 lstm3.W_rp:0.7609 output.affine:1.89219 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.9048 tdnn2.affine:10.5824 lstm1.W_all:20.5141 lstm1.lstm_nonlin:2.11215 lstm1.W_rp:15.1349 tdnn3.affine:8.06556 tdnn4.affine:7.50983 lstm2.W_all:16.7693 lstm2.lstm_nonlin:1.44902 lstm2.W_rp:14.2107 tdnn5.affine:7.57634 tdnn6.affine:7.50418 lstm3.W_all:24.1456 lstm3.lstm_nonlin:3.15607 lstm3.W_rp:34.1252 output.affine:31.3645 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.260717 tdnn2.affine:0.295393 lstm1.W_all:0.116209 lstm1.lstm_nonlin:0.0232476 lstm1.W_rp:0.0679838 tdnn3.affine:0.272499 tdnn4.affine:0.299893 lstm2.W_all:0.0961544 lstm2.lstm_nonlin:0.019441 lstm2.W_rp:0.0493783 tdnn5.affine:0.238862 tdnn6.affine:0.256947 lstm3.W_all:0.0822718 lstm3.lstm_nonlin:0.0152744 lstm3.W_rp:0.0222701 output.affine:0.0602694 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:34:30 KST 2020, elapsed time 1 seconds
