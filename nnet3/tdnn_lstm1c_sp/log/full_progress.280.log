# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/279.mdl exp/nnet3/tdnn_lstm1c_sp/280.mdl 
# Started at Thu Jul 30 11:51:50 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/279.mdl exp/nnet3/tdnn_lstm1c_sp/280.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000221638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01222, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.008 0.01,0.03,0.22,0.26,0.28 0.31,0.34,0.36,0.40), mean=0.184, stddev=0.104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.08,0.10,0.26,0.34,0.39 0.50,0.55,0.58,0.70), mean=0.245, stddev=0.133], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.03,0.04,0.14,0.36,0.49 0.60,0.69,0.73,0.91), mean=0.205, stddev=0.188], bias-{mean,stddev}=0.0005878,0.01657, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.12,0.43,0.55 0.66,0.81,0.85,2.0), mean=0.216, stddev=0.261], oderiv-count=64960
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-8449.82, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000221638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00523, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.18 0.18,0.19,0.21,0.22,0.23 0.24,0.24,0.25,0.27), mean=0.206, stddev=0.0174], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.006,0.02,0.13,0.15,0.16 0.17,0.18,0.19,0.22), mean=0.104, stddev=0.0584], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.05,0.12,0.25,0.35 0.44,0.52,0.56,0.64), mean=0.161, stddev=0.13], bias-{mean,stddev}=-0.0004068,0.008483, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.04,0.05 0.06,0.07,0.08,0.09), mean=0.0242, stddev=0.0223], oderiv-count=78880
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-8331.85, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000221638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00322, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,3e-07,6e-07,4e-06 0.0001,0.02,0.07,0.11,0.13 0.15,0.16,0.17,0.21), mean=0.068, stddev=0.046], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.07,0.16,0.17,0.18 0.19,0.20,0.20,0.23), mean=0.139, stddev=0.0487], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,9e-08,9e-08,1e-07 2e-07,0.03,0.08,0.16,0.24 0.32,0.42,0.45,0.53), mean=0.107, stddev=0.101], bias-{mean,stddev}=-7.554e-05,0.001028, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000221638, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001459, w_fc-rms=0.001461, w_oc-rms=0.002692, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-8.59332e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.66,-0.10,-0.01,0.11 0.27,0.38,0.50,0.67,0.79 0.89,1.0,1.2,1.4), mean=0.513, stddev=0.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.23,-0.02,0.02,0.06 0.12,0.17,0.25,0.29,0.34 0.40,0.47,0.54,0.77), mean=0.238, stddev=0.102] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-8.59332e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.20,0.16,0.25,0.38 0.42,0.49,0.54,0.72,0.84 1.0,1.2,1.3,1.7), mean=0.602, stddev=0.206], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.20,-0.01,0.02,0.07 0.13,0.19,0.25,0.28,0.30 0.34,0.37,0.40,0.49), mean=0.232, stddev=0.0776] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.133435, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.7,-2.9,-2.5,-1.7 -1.3,-0.73,0.002,0.85,1.5 1.8,2.5,3.1,4.4), mean=0.062, stddev=1.13], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-1.2,-0.98,-0.67 -0.26,0.24,0.98,1.3,1.7 2.0,2.4,2.6,3.5), mean=0.802, stddev=0.779] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-8.59332e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.42,-0.22,-0.06,0.06 0.19,0.30,0.50,0.64,0.78 0.90,1.1,1.2,1.5), mean=0.486, stddev=0.251], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.20,-0.05,-0.002,0.06 0.11,0.17,0.25,0.31,0.38 0.45,0.52,0.53,0.66), mean=0.243, stddev=0.112] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-8.59332e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.6,-1.5,-1.3,-1.0 -0.71,-0.44,0.004,0.46,0.74 1.0,1.3,1.5,2.9), mean=0.0231, stddev=0.612], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.25,0.36,0.51 0.66,0.79,1.0,1.2,1.3 1.4,1.6,1.7,2.2), mean=0.997, stddev=0.277] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.75e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2619
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.232507
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000221638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004067, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.05,0.08,0.12,0.13 0.13,0.14,0.14,0.15), mean=0.0862, stddev=0.0341], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0002,0.0002,0.0004 0.002,0.04,0.07,0.08,0.09 0.09,0.10,0.11,0.12), mean=0.0589, stddev=0.0288], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.04,0.19 0.24,0.28,0.32,0.34), mean=0.0401, stddev=0.0836], bias-{mean,stddev}=-0.0002146,0.003088, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000221638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005173, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.10,0.11,0.11 0.12,0.12,0.14,0.16,0.17 0.18,0.20,0.20,0.21), mean=0.143, stddev=0.0232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.11,0.16,0.17 0.17,0.18,0.19,0.20), mean=0.108, stddev=0.0467], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,4e-08,4e-08,5e-08 7e-08,1e-07,1e-05,0.16,0.28 0.37,0.43,0.46,0.52), mean=0.0713, stddev=0.126], bias-{mean,stddev}=6.304e-05,0.003351, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=4.77e+04, self-repaired-proportion=0.0445055, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.25,-0.13,-0.10,-0.06 -0.02,0.02,0.13,0.23,0.31 0.35,0.40,0.41,0.48), mean=0.134, stddev=0.124], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.52,-0.39,-0.17 -0.01,0.15,0.49,0.84,1.0 1.2,1.3,1.4,1.7), mean=0.504, stddev=0.415]
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-7977.96, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000221638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003978, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.13,0.14 0.14,0.15,0.16,0.17,0.17 0.18,0.18,0.19,0.21), mean=0.157, stddev=0.012], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.06,0.07,0.07 0.07,0.08,0.09,0.10,0.11 0.11,0.12,0.12,0.14), mean=0.0897, stddev=0.0137], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.11,0.19,0.26 0.31,0.36,0.38,0.42), mean=0.133, stddev=0.0834], bias-{mean,stddev}=0.0005306,0.004299, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.01,0.02,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0215, stddev=0.0126], oderiv-count=114272
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-7624.06, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000221638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002331, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,2e-07,3e-07,7e-07 3e-06,6e-05,0.04,0.08,0.10 0.12,0.13,0.13,0.15), mean=0.0439, stddev=0.04], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.06,0.11,0.12,0.13 0.13,0.14,0.15,0.17), mean=0.101, stddev=0.0342], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,6e-08,7e-08,1e-07 1e-05,0.02,0.05,0.12,0.17 0.24,0.31,0.35,0.39), mean=0.0754, stddev=0.0749], bias-{mean,stddev}=-9.855e-05,0.001094, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000221638, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0009355, w_fc-rms=0.0009069, w_oc-rms=0.001412, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-8.97288e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.19,0.18,0.24,0.32 0.37,0.44,0.50,0.61,0.75 0.88,1.0,1.1,1.2), mean=0.533, stddev=0.164], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.08,0.10,0.13 0.17,0.20,0.25,0.27,0.31 0.35,0.38,0.40,0.50), mean=0.242, stddev=0.0608] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-8.97288e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.31,0.34,0.39 0.49,0.50,0.52,0.71,0.82 0.92,1.0,1.0,1.3), mean=0.597, stddev=0.158], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.06,0.02,0.06,0.11 0.17,0.20,0.25,0.26,0.29 0.32,0.36,0.38,0.43), mean=0.236, stddev=0.0587] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0936549, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-2.0,-1.6,-1.3 -0.88,-0.52,0.0003,0.52,0.99 1.4,2.0,2.1,3.7), mean=0.0329, stddev=0.787], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-0.77,-0.51,-0.26 0.07,0.47,1.0,1.1,1.4 1.8,2.1,2.2,3.4), mean=0.849, stddev=0.585] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-8.97288e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.14,0.20,0.28 0.36,0.48,0.50,0.65,0.76 0.86,1.0,1.1,1.3), mean=0.545, stddev=0.17], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.03,0.08,0.10,0.13 0.15,0.20,0.25,0.28,0.32 0.36,0.40,0.41,0.55), mean=0.247, stddev=0.0664] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-8.97288e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-1.1,-0.96,-0.73 -0.54,-0.25,8e-05,0.27,0.55 0.80,0.99,1.1,1.5), mean=0.0165, stddev=0.43], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.02,0.39,0.50,0.63 0.77,0.89,1.0,1.1,1.2 1.3,1.5,1.6,1.9), mean=0.993, stddev=0.204] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.52e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2287
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.232507
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000221638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002922, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.04,0.06,0.08,0.09 0.09,0.10,0.10,0.10), mean=0.0639, stddev=0.0188], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,9e-05,0.0001,0.0002 0.0003,0.0009,0.05,0.06,0.07 0.07,0.08,0.08,0.09), mean=0.0378, stddev=0.0281], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,1e-06,0.09,0.13 0.16,0.18,0.20,0.22), mean=0.0327, stddev=0.0581], bias-{mean,stddev}=7.185e-05,0.002739, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000221638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004295, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.12,0.13,0.15 0.15,0.16,0.17,0.19), mean=0.119, stddev=0.0186], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.06,0.09,0.12,0.13 0.14,0.14,0.14,0.16), mean=0.0936, stddev=0.0289], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 8e-08,1e-07,0.001,0.14,0.22 0.29,0.35,0.38,0.43), mean=0.0653, stddev=0.101], bias-{mean,stddev}=7.541e-05,0.001963, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.25,0.38 0.45,0.57,0.65,1.0), mean=0.104, stddev=0.17], oderiv-count=7808
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-7270.17, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000221638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003321, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.11 0.12,0.12,0.13,0.14,0.15 0.15,0.16,0.16,0.17), mean=0.131, stddev=0.0128], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.06,0.07,0.07,0.08,0.09 0.09,0.10,0.10,0.11), mean=0.0751, stddev=0.00987], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.05,0.09,0.16,0.22 0.27,0.31,0.33,0.38), mean=0.109, stddev=0.0722], bias-{mean,stddev}=-0.000477,0.003835, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2.88e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.28,-0.07,-0.006,0.06 0.12,0.19,0.36,0.53,0.62 0.70,0.78,0.86,1.1), mean=0.364, stddev=0.201], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.19,-0.11,-0.06,0.05 0.14,0.25,0.45,0.64,0.74 0.83,0.90,0.97,1.1), mean=0.447, stddev=0.233], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.03,0.04 0.05,0.05,0.06,0.08), mean=0.0119, stddev=0.0174], oderiv-count=24160
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-6916.27, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000221638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002557, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.03,0.04,0.09,0.12 0.13,0.14,0.14,0.19), mean=0.0551, stddev=0.0349], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.08 0.08,0.09,0.11,0.14,0.16 0.16,0.17,0.17,0.18), mean=0.114, stddev=0.0265], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,4e-07,6e-07,2e-05 0.02,0.02,0.05,0.12,0.20 0.28,0.34,0.38,0.42), mean=0.0804, stddev=0.0845], bias-{mean,stddev}=0.0001803,0.0008982, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000221638, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001584, w_fc-rms=0.001237, w_oc-rms=0.003268, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-9.46399e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.41,-0.07,0.17,0.48 0.60,0.75,0.98,1.2,1.3 1.5,1.6,1.7,2.1), mean=0.968, stddev=0.321], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.43,-0.20,-0.16,-0.10 -0.06,-0.006,0.08,0.18,0.23 0.28,0.34,0.38,0.68), mean=0.0847, stddev=0.119] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-9.46399e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.24,0.16,0.32,0.49 0.59,0.74,1.0,1.3,1.4 1.5,1.6,1.7,2.1), mean=0.998, stddev=0.317], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.33,-0.21,-0.19,-0.12 -0.07,-0.02,0.08,0.16,0.21 0.25,0.29,0.31,0.42), mean=0.0712, stddev=0.114] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0137819, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.7,-5.8,-4.9,-3.8 -3.0,-1.8,-0.07,1.4,2.6 3.5,4.2,4.6,17), mean=-0.129, stddev=2.28], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.6,-1.8,-1.5,-1.2 -0.81,-0.36,0.52,1.4,1.8 2.2,2.5,2.7,4.4), mean=0.505, stddev=1.02] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-9.46399e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.31,-0.16,0.07 0.22,0.43,0.78,1.2,1.4 1.6,1.8,1.9,2.9), mean=0.807, stddev=0.472], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.22,-0.16,-0.08 -0.01,0.03,0.14,0.24,0.29 0.33,0.39,0.41,0.66), mean=0.134, stddev=0.139] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-9.46399e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.9,-4.2,-3.3,-2.6 -2.0,-1.2,-0.05,1.1,1.7 2.3,2.9,3.4,13), mean=-0.0716, stddev=1.61], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.43,-0.35,-0.10 0.09,0.29,0.74,1.2,1.5 1.7,1.9,2.0,3.1), mean=0.753, stddev=0.549] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.29e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1928
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.232507
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000221638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003314, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.04,0.04,0.06,0.10,0.10 0.11,0.11,0.11,0.12), mean=0.0705, stddev=0.0273], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.06,0.07 0.07,0.07,0.07,0.14), mean=0.0524, stddev=0.0104], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 4e-07,2e-06,0.009,0.10,0.14 0.17,0.21,0.22,0.24), mean=0.0447, stddev=0.0609], bias-{mean,stddev}=-0.0017,0.02058, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000221638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004243, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.05,0.06,0.08,0.09 0.11,0.12,0.13,0.26), mean=0.0646, stddev=0.0225], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.11 0.11,0.12,0.16,0.25,0.26 0.27,0.27,0.28,0.28), mean=0.184, stddev=0.0623], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,4e-07 5e-07,2e-06,0.005,0.28,0.37 0.44,0.48,0.52,0.56), mean=0.109, stddev=0.161], bias-{mean,stddev}=1.775e-10,0.00116, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.03,0.04 0.05,0.05,0.06,0.55), mean=0.0162, stddev=0.0243], oderiv-count=22720

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.84055 tdnn2.affine:4.71437 lstm1.W_all:3.74486 lstm1.lstm_nonlin:0.0773547 lstm1.W_rp:1.49628 tdnn3.affine:3.29529 tdnn4.affine:3.58386 lstm2.W_all:2.71075 lstm2.lstm_nonlin:0.043805 lstm2.W_rp:1.07519 tdnn5.affine:2.7359 tdnn6.affine:2.99231 lstm3.W_all:2.97369 lstm3.lstm_nonlin:0.0874947 lstm3.W_rp:1.26339 output.affine:3.13852 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.2385 tdnn2.affine:11.2908 lstm1.W_all:21.4622 lstm1.lstm_nonlin:1.86603 lstm1.W_rp:15.643 tdnn3.affine:8.62905 tdnn4.affine:8.35017 lstm2.W_all:17.7951 lstm2.lstm_nonlin:1.18737 lstm2.W_rp:14.9951 tdnn5.affine:8.29677 tdnn6.affine:8.24733 lstm3.W_all:25.4046 lstm3.lstm_nonlin:3.02166 lstm3.W_rp:33.638 output.affine:32.6877 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.365218 tdnn2.affine:0.417804 lstm1.W_all:0.174325 lstm1.lstm_nonlin:0.0417252 lstm1.W_rp:0.0955061 tdnn3.affine:0.38358 tdnn4.affine:0.42902 lstm2.W_all:0.152144 lstm2.lstm_nonlin:0.0372198 lstm2.W_rp:0.071723 tdnn5.affine:0.331166 tdnn6.affine:0.363584 lstm3.W_all:0.116885 lstm3.lstm_nonlin:0.0290712 lstm3.W_rp:0.0376636 output.affine:0.0960557 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:51:51 KST 2020, elapsed time 1 seconds
