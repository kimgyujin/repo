# nnet3-info exp/nnet3/tdnn_lstm1c_sp/74.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/73.mdl exp/nnet3/tdnn_lstm1c_sp/74.mdl 
# Started at Thu Jul 30 10:30:23 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/74.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000237996, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03058, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.009,0.01,0.02 0.05,0.43,0.53,0.62,0.68 0.73,0.80,0.88,1.1), mean=0.487, stddev=0.208], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.17,0.21,0.59,0.81,1.1 1.4,1.5,1.6,1.7), mean=0.59, stddev=0.372], bias-{mean,stddev}=0.003946,0.05523, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0.12441, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,4e-06,6e-06,4e-05 0.0001,0.03,0.06,0.09,0.10 0.12,0.13,0.14,0.19), mean=0.0604, stddev=0.036], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.001,0.003,0.009 0.04,0.27,0.48,0.62,0.71 0.80,0.86,0.90,0.93), mean=0.447, stddev=0.23], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.10,0.27,0.34,0.43,0.49 0.55,0.63,0.69,1.1), mean=0.341, stddev=0.142], oderiv-count=970240
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33043.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,6e-07,3e-06,9e-06 7e-05,0.02,0.06,0.08,0.10 0.12,0.13,0.15,0.18), mean=0.0547, stddev=0.035], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,5e-05,9e-05,0.0002 0.0007,0.06,0.09,0.10,0.11 0.12,0.12,0.13,0.13), mean=0.0779, stddev=0.0371]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000237996, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01265, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.39,0.41 0.43,0.45,0.49,0.54,0.57 0.59,0.63,0.64,0.78), mean=0.497, stddev=0.0559], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.007,0.01 0.03,0.24,0.30,0.34,0.36 0.37,0.40,0.43,0.70), mean=0.267, stddev=0.109], bias-{mean,stddev}=0.0001394,0.02671, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.51e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.29,0.30 0.32,0.33,0.36,0.39,0.41 0.44,0.47,0.50,0.57), mean=0.363, stddev=0.0421], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.40,0.40,0.41 0.42,0.43,0.46,0.48,0.50 0.51,0.52,0.52,0.55), mean=0.458, stddev=0.0291], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.07,0.07), mean=0.0406, stddev=0.00808], oderiv-count=1.22982e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32321.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.29 0.30,0.31,0.35,0.38,0.41 0.44,0.47,0.50,0.60), mean=0.353, stddev=0.0488], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.49,0.51,0.52 0.54,0.56,0.62,0.67,0.72 0.75,0.79,0.83,0.97), mean=0.624, stddev=0.0733]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000237996, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01755, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.003,0.007,0.03 0.12,0.23,0.39,0.57,0.68 0.75,0.82,0.90,1.1), mean=0.397, stddev=0.207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.36,0.41,0.45 0.52,0.69,0.82,0.90,0.94 0.99,1.0,1.1,1.3), mean=0.785, stddev=0.156], bias-{mean,stddev}=-0.00177,0.01997, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000237996, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02488, w_fc-rms=0.04019, w_oc-rms=0.05511, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619526, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.43,0.43,0.44 0.45,0.46,0.49,0.52,0.56 0.61,0.66,0.68,0.70), mean=0.499, stddev=0.0512], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.20,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0145] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619526, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.39,0.40 0.42,0.44,0.48,0.53,0.60 0.70,0.75,0.79,0.85), mean=0.496, stddev=0.084], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.17,0.19 0.21,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.02] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00810642, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.82,-0.75,-0.55 -0.35,-0.20,-0.006,0.21,0.35 0.51,0.71,0.77,0.82), mean=-8.48e-05, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.28,0.30,0.35 0.41,0.47,0.59,0.71,0.84 0.98,1.0,1.0,1.0), mean=0.601, stddev=0.168] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619526, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.40,0.42 0.43,0.44,0.47,0.51,0.53 0.56,0.58,0.59,0.67), mean=0.477, stddev=0.0428], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.18,0.19 0.20,0.21,0.22,0.23,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0171] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0183885, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.86,-0.79,-0.51 -0.32,-0.18,-0.002,0.17,0.33 0.48,0.72,0.81,0.88), mean=-0.00361, stddev=0.294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.20,0.24,0.42 0.57,0.71,0.83,0.89,0.93 0.99,1.0,1.0,1.0), mean=0.786, stddev=0.163] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=295353
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000237996, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03185, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.21,0.23,0.25 0.27,0.30,0.46,0.99,1.1 1.1,1.2,1.2,1.3), mean=0.645, stddev=0.334], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.04,0.08 0.21,0.34,0.48,0.60,0.68 0.81,0.92,0.98,1.1), mean=0.475, stddev=0.196], bias-{mean,stddev}=-0.002359,0.04028, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000237996, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01267, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.21,0.22,0.24 0.26,0.28,0.34,0.40,0.44 0.47,0.52,0.54,0.70), mean=0.346, stddev=0.0725], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.11,0.21,0.40,0.44 0.48,0.51,0.52,0.54), mean=0.254, stddev=0.138], bias-{mean,stddev}=-0.003847,0.02639, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.66e+05, self-repaired-proportion=0.00164103, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.04,0.06,0.07 0.08,0.10,0.14,0.17,0.19 0.21,0.22,0.23,0.29), mean=0.138, stddev=0.0412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.18,0.21,0.27 0.31,0.37,0.50,0.60,0.64 0.66,0.69,0.70,0.72), mean=0.486, stddev=0.124], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.06,0.06,0.07,0.08,0.09 0.10,0.11,0.12,0.17), mean=0.0736, stddev=0.0138], oderiv-count=1.05101e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30156.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.04,0.05,0.06 0.07,0.09,0.13,0.16,0.18 0.20,0.22,0.23,0.27), mean=0.128, stddev=0.0408], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.13,0.14,0.16 0.17,0.18,0.21,0.24,0.25 0.27,0.28,0.32,0.37), mean=0.21, stddev=0.0367]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000237996, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009363, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.30,0.31 0.33,0.34,0.37,0.39,0.41 0.43,0.44,0.46,0.63), mean=0.368, stddev=0.0369], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.15,0.16,0.16 0.17,0.18,0.21,0.24,0.26 0.27,0.29,0.30,0.36), mean=0.211, stddev=0.0334], bias-{mean,stddev}=-0.009449,0.01642, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.36e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.25,0.27,0.30,0.33,0.35 0.37,0.39,0.40,0.49), mean=0.302, stddev=0.0388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.37,0.39 0.40,0.41,0.44,0.47,0.48 0.49,0.50,0.51,0.53), mean=0.441, stddev=0.0318], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0299, stddev=0.00261], oderiv-count=1.1127e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27991.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.24,0.26,0.29,0.33,0.35 0.37,0.39,0.40,0.51), mean=0.296, stddev=0.0438], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.46,0.48 0.49,0.52,0.56,0.62,0.65 0.68,0.73,0.74,0.98), mean=0.57, stddev=0.0671]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000237996, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01362, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0004,0.0005,0.0009 0.003,0.02,0.29,0.48,0.56 0.62,0.66,0.69,1.1), mean=0.275, stddev=0.212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.28,0.32 0.37,0.54,0.64,0.70,0.73 0.77,0.81,0.84,0.94), mean=0.607, stddev=0.132], bias-{mean,stddev}=-0.003,0.02143, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000237996, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01401, w_fc-rms=0.01871, w_oc-rms=0.02294, count=1.32e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00624873, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.44,0.45 0.46,0.47,0.50,0.51,0.53 0.56,0.59,0.60,0.65), mean=0.495, stddev=0.0331], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0156] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00624873, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.41,0.42 0.43,0.45,0.49,0.50,0.52 0.56,0.60,0.62,0.73), mean=0.484, stddev=0.044], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0125] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0100709, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.65,-0.59,-0.38 -0.22,-0.12,0.004,0.14,0.27 0.39,0.54,0.63,0.76), mean=0.0122, stddev=0.224], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.44,0.47,0.51 0.54,0.57,0.65,0.99,1.0 1.0,1.0,1.0,1.0), mean=0.727, stddev=0.184] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00624873, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.42,0.43 0.44,0.46,0.49,0.50,0.52 0.54,0.57,0.59,0.65), mean=0.487, stddev=0.0339], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0164] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00624873, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.63,-0.57,-0.36 -0.22,-0.11,0.006,0.14,0.27 0.37,0.50,0.60,0.85), mean=0.0117, stddev=0.217], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.48,0.56,0.68 0.74,0.82,0.88,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.878, stddev=0.11] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=260481
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000237996, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02862, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.38,0.39 0.41,0.44,0.61,0.82,0.87 0.90,0.92,0.94,1.1), mean=0.626, stddev=0.184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.008,0.01 0.02,0.05,0.44,0.61,0.68 0.74,0.83,0.86,1.1), mean=0.382, stddev=0.258], bias-{mean,stddev}=-0.004188,0.09844, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000237996, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01182, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.21 0.23,0.25,0.30,0.38,0.43 0.49,0.56,0.58,0.65), mean=0.319, stddev=0.0866], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.16,0.18,0.24,0.34,0.37 0.39,0.41,0.43,0.50), mean=0.258, stddev=0.0789], bias-{mean,stddev}=0.001284,0.01726, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.98e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.05,0.06,0.09,0.12,0.13 0.14,0.16,0.17,0.22), mean=0.0889, stddev=0.0337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.18 0.24,0.29,0.43,0.55,0.59 0.64,0.67,0.68,0.73), mean=0.421, stddev=0.136], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.07,0.08,0.10,0.11 0.12,0.14,0.15,0.18), mean=0.0856, stddev=0.0191], oderiv-count=1.06048e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25826.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.03 0.04,0.05,0.08,0.11,0.13 0.14,0.16,0.17,0.22), mean=0.0839, stddev=0.0343], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.10 0.12,0.13,0.15,0.18,0.19 0.20,0.22,0.23,0.28), mean=0.15, stddev=0.034]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000237996, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008971, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.28 0.29,0.31,0.34,0.39,0.42 0.44,0.46,0.46,0.51), mean=0.351, stddev=0.0489], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.12,0.14 0.15,0.16,0.19,0.23,0.25 0.28,0.33,0.35,0.44), mean=0.199, stddev=0.0459], bias-{mean,stddev}=-0.0107,0.01451, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.77e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.22,0.23 0.25,0.27,0.30,0.33,0.35 0.37,0.39,0.40,0.46), mean=0.303, stddev=0.041], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.36 0.37,0.39,0.42,0.45,0.46 0.48,0.49,0.50,0.53), mean=0.419, stddev=0.0348], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0249, stddev=0.00256], oderiv-count=941760
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23661.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.21,0.22 0.24,0.26,0.30,0.33,0.35 0.37,0.40,0.40,0.51), mean=0.296, stddev=0.0447], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.46 0.49,0.52,0.58,0.64,0.69 0.73,0.78,0.81,0.92), mean=0.584, stddev=0.0809]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000237996, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01973, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.25 0.31,0.36,0.43,0.63,0.75 0.80,0.84,0.87,1.3), mean=0.475, stddev=0.165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.59,0.62 0.63,0.66,0.75,1.1,1.4 1.4,1.5,1.5,1.7), mean=0.858, stddev=0.272], bias-{mean,stddev}=0.007701,0.02465, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000237996, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02941, w_fc-rms=0.04052, w_oc-rms=0.05624, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631329, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.45,0.46,0.48 0.49,0.51,0.57,0.63,0.65 0.67,0.70,0.70,0.80), mean=0.572, stddev=0.0641], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.19,0.20,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.206, stddev=0.0099] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631329, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.48 0.50,0.54,0.59,0.63,0.66 0.69,0.72,0.75,0.88), mean=0.588, stddev=0.0632], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.17,0.18,0.18 0.19,0.19,0.21,0.22,0.22 0.22,0.23,0.23,0.23), mean=0.204, stddev=0.0133] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00984479, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.81,-0.77,-0.52 -0.31,-0.20,0.001,0.19,0.33 0.48,0.66,0.81,0.86), mean=-0.00145, stddev=0.289], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.25,0.29,0.32 0.36,0.39,0.45,0.49,0.50 0.52,0.53,0.54,0.65), mean=0.438, stddev=0.06] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00692911, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.53,0.54,0.56 0.58,0.61,0.65,0.68,0.70 0.72,0.74,0.77,0.94), mean=0.646, stddev=0.0498], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.15,0.16,0.17 0.17,0.18,0.19,0.20,0.20 0.20,0.21,0.21,0.21), mean=0.187, stddev=0.0132] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0206939, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.86,-0.81,-0.50 -0.31,-0.17,-0.0008,0.18,0.31 0.49,0.71,0.86,0.94), mean=4.56e-05, stddev=0.292], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.20,0.23,0.37 0.48,0.56,0.64,0.69,0.71 0.72,0.74,0.74,0.77), mean=0.614, stddev=0.111] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221500
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000237996, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06901, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.2,1.2,1.6,1.8,1.9 2.0,2.0,2.0,2.2), mean=1.55, stddev=0.285], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.67,0.75,0.87 0.92,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.1, stddev=0.153], bias-{mean,stddev}=-4.933e-06,0.08977, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000237996, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0405, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.52,0.54 0.56,0.59,0.64,0.69,0.73 0.78,0.83,0.86,2.1), mean=0.646, stddev=0.0952], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.4 1.5,1.5,1.9,2.1,2.2 2.3,2.3,2.4,2.7), mean=1.83, stddev=0.298], bias-{mean,stddev}=4.164e-09,0.0271, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=616320
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/73.mdl exp/nnet3/tdnn_lstm1c_sp/74.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.52929 tdnn2.affine:8.6509 lstm1.W_all:7.37048 lstm1.lstm_nonlin:0.143514 lstm1.W_rp:2.95442 tdnn3.affine:5.24754 tdnn4.affine:6.10299 lstm2.W_all:4.83193 lstm2.lstm_nonlin:0.0639187 lstm2.W_rp:2.03124 tdnn5.affine:4.28004 tdnn6.affine:5.09135 lstm3.W_all:6.49445 lstm3.lstm_nonlin:0.143553 lstm3.W_rp:2.6478 output.affine:5.79129 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.1446 tdnn2.affine:11.4122 lstm1.W_all:20.4245 lstm1.lstm_nonlin:1.65558 lstm1.W_rp:11.7278 tdnn3.affine:8.09262 tdnn4.affine:8.44442 lstm2.W_all:15.8629 lstm2.lstm_nonlin:0.746764 lstm2.W_rp:10.6411 tdnn5.affine:7.53855 tdnn6.affine:8.09043 lstm3.W_all:22.9684 lstm3.lstm_nonlin:1.71714 lstm3.W_rp:25.417 output.affine:29.9799 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.69806 tdnn2.affine:0.752488 lstm1.W_all:0.360472 lstm1.lstm_nonlin:0.0859572 lstm1.W_rp:0.250974 tdnn3.affine:0.63566 tdnn4.affine:0.71241 lstm2.W_all:0.3039 lstm2.lstm_nonlin:0.0842694 lstm2.W_rp:0.190476 tdnn5.affine:0.55728 tdnn6.affine:0.618037 lstm3.W_all:0.281992 lstm3.lstm_nonlin:0.0821539 lstm3.W_rp:0.104275 output.affine:0.192945 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:30:24 KST 2020, elapsed time 1 seconds
