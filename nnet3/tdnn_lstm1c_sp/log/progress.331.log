# nnet3-info exp/nnet3/tdnn_lstm1c_sp/331.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/330.mdl exp/nnet3/tdnn_lstm1c_sp/331.mdl 
# Started at Thu Jul 30 12:12:09 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/331.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000159365, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03184, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.008 0.01,0.02,0.55,0.70,0.78 0.85,0.91,0.97,1.1), mean=0.464, stddev=0.298], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.15,0.16 0.18,0.22,0.63,0.91,1.2 1.3,1.5,1.5,1.5), mean=0.625, stddev=0.369], bias-{mean,stddev}=-0.001549,0.06143, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.86e+05, self-repaired-proportion=0.202012, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,1e-05,3e-05,4e-05 7e-05,0.0002,0.05,0.09,0.11 0.12,0.15,0.16,0.22), mean=0.0507, stddev=0.0459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.01,0.03 0.04,0.06,0.42,0.60,0.71 0.82,0.88,0.92,0.99), mean=0.369, stddev=0.266], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.009,0.01,0.01 0.02,0.04,0.29,0.40,0.48 0.56,0.68,0.74,1.6), mean=0.278, stddev=0.194], oderiv-count=1.23674e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34274.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,8e-06,1e-05,3e-05 6e-05,0.0002,0.05,0.09,0.11 0.13,0.14,0.16,0.21), mean=0.0485, stddev=0.0447], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0001,0.0002 0.0004,0.0009,0.09,0.11,0.12 0.14,0.15,0.15,0.16), mean=0.0673, stddev=0.0501]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000159365, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01174, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.35,0.36 0.38,0.40,0.45,0.51,0.55 0.59,0.62,0.64,0.73), mean=0.459, stddev=0.0672], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.005 0.006,0.01,0.28,0.34,0.37 0.40,0.44,0.48,0.71), mean=0.225, stddev=0.145], bias-{mean,stddev}=-0.03283,0.04, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.8e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.22,0.24,0.27,0.31,0.33 0.35,0.38,0.41,0.48), mean=0.276, stddev=0.0427], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.36,0.38 0.40,0.42,0.44,0.47,0.49 0.50,0.52,0.53,0.56), mean=0.443, stddev=0.0361], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0466, stddev=0.00839], oderiv-count=1.13965e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33526.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.21 0.23,0.24,0.28,0.31,0.33 0.36,0.39,0.42,0.49), mean=0.28, stddev=0.0455], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.40,0.42 0.44,0.46,0.50,0.55,0.58 0.61,0.67,0.68,0.70), mean=0.508, stddev=0.0595]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000159365, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01764, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,1e-06,2e-06,1e-05 0.0005,0.16,0.41,0.59,0.67 0.73,0.79,0.84,1.0), mean=0.386, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.37,0.42 0.51,0.70,0.81,0.90,0.96 1.0,1.1,1.2,1.3), mean=0.787, stddev=0.167], bias-{mean,stddev}=0.003524,0.0288, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000159365, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.09058, w_fc-rms=0.03042, w_oc-rms=0.04831, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640438, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.55 0.71,0.78,0.81,0.87), mean=0.497, stddev=0.0791], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0226] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640438, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.46,0.46,0.48 0.49,0.50,0.50,0.54,0.59 0.68,0.78,0.81,0.86), mean=0.528, stddev=0.0649], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0233] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0234259, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.89,-0.86,-0.51 -0.27,-0.12,0.0008,0.16,0.30 0.59,0.87,0.88,0.91), mean=0.0189, stddev=0.305], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.20,0.24 0.38,0.45,0.58,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.611, stddev=0.218] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640438, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.41 0.41,0.43,0.46,0.50,0.50 0.51,0.56,0.59,0.74), mean=0.463, stddev=0.0408], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0202] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00640438, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.70,-0.64,-0.30 -0.15,-0.07,0.001,0.09,0.22 0.36,0.63,0.70,0.77), mean=0.0123, stddev=0.215], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.46,0.55 0.77,0.83,0.90,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.874, stddev=0.121] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=4.57057e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000199894, count-zeroing-boundaries=295156
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.254545
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000159365, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04011, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.40,0.44 0.48,0.55,0.87,1.2,1.2 1.3,1.3,1.4,1.4), mean=0.862, stddev=0.305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0008,0.001,0.002 0.009,0.33,0.54,0.73,0.92 1.3,1.5,1.6,1.9), mean=0.544, stddev=0.35], bias-{mean,stddev}=0.0126,0.2638, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000159365, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01318, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.21,0.24,0.26 0.28,0.30,0.36,0.42,0.45 0.48,0.52,0.53,0.59), mean=0.361, stddev=0.0728], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.18,0.29,0.39,0.41 0.43,0.46,0.47,0.49), mean=0.282, stddev=0.105], bias-{mean,stddev}=0.001871,0.008972, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0.00226024, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.01,0.02,0.02 0.04,0.05,0.08,0.10,0.12 0.13,0.14,0.15,0.18), mean=0.0784, stddev=0.031], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.09,0.14,0.19 0.25,0.36,0.50,0.60,0.64 0.68,0.72,0.74,0.84), mean=0.479, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.09,0.09,0.10 0.10,0.11,0.13,0.16,0.19 0.23,0.27,0.29,0.33), mean=0.14, stddev=0.0427], oderiv-count=1.23027e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31283, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.01,0.02,0.02 0.04,0.05,0.08,0.10,0.12 0.13,0.15,0.15,0.19), mean=0.0777, stddev=0.0309], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.05,0.06,0.08 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.18,0.19), mean=0.12, stddev=0.025]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000159365, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008604, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.29,0.30,0.33,0.37,0.39 0.42,0.44,0.45,0.50), mean=0.337, stddev=0.0418], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.12,0.13,0.14 0.15,0.16,0.18,0.22,0.25 0.27,0.30,0.31,0.38), mean=0.191, stddev=0.0437], bias-{mean,stddev}=-0.02572,0.01988, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.14e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.23,0.25,0.28,0.30 0.31,0.32,0.34,0.37), mean=0.257, stddev=0.0311], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.36,0.38,0.39 0.40,0.41,0.43,0.45,0.46 0.47,0.49,0.49,0.50), mean=0.431, stddev=0.0268], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0362, stddev=0.00285], oderiv-count=1.02464e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29039.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.23,0.26,0.29,0.30 0.31,0.33,0.34,0.38), mean=0.259, stddev=0.0318], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.39,0.40,0.42 0.43,0.45,0.50,0.54,0.57 0.61,0.65,0.66,0.82), mean=0.5, stddev=0.0607]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000159365, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01457, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,4e-06,1e-05 5e-05,0.001,0.33,0.52,0.59 0.63,0.67,0.69,0.93), mean=0.287, stddev=0.236], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.31,0.36 0.46,0.60,0.66,0.73,0.78 0.82,0.92,0.99,1.3), mean=0.651, stddev=0.133], bias-{mean,stddev}=0.00652,0.03445, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000159365, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05872, w_fc-rms=0.01752, w_oc-rms=0.04041, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645771, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.44,0.46 0.46,0.48,0.50,0.51,0.57 0.61,0.69,0.72,0.80), mean=0.507, stddev=0.0515], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0176] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645771, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.47,0.48 0.49,0.50,0.50,0.54,0.58 0.62,0.68,0.69,0.76), mean=0.523, stddev=0.0464], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.02] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00672357, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.82,-0.76,-0.43 -0.26,-0.10,7e-05,0.13,0.33 0.56,0.69,0.76,0.82), mean=0.0116, stddev=0.272], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.30,0.40 0.46,0.52,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.717, stddev=0.223] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645771, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.43,0.45 0.46,0.47,0.50,0.50,0.51 0.53,0.57,0.57,0.68), mean=0.491, stddev=0.0276], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0188] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00645771, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.69,-0.60,-0.49,-0.28 -0.16,-0.07,0.0003,0.09,0.20 0.36,0.46,0.54,0.61), mean=0.00807, stddev=0.182], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.58,0.60,0.72 0.77,0.85,0.92,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.906, stddev=0.0986] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.60827e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.91408e-05, count-zeroing-boundaries=260338
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.254545
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000159365, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03867, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.51,0.53 0.56,0.61,0.86,1.1,1.1 1.2,1.2,1.3,1.3), mean=0.85, stddev=0.236], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.004,0.01,0.55,0.82,0.96 1.1,1.3,1.5,1.7), mean=0.485, stddev=0.393], bias-{mean,stddev}=0.001205,0.2126, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000159365, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01262, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.26 0.28,0.29,0.34,0.39,0.44 0.48,0.50,0.53,0.57), mean=0.347, stddev=0.0637], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.16 0.17,0.19,0.26,0.37,0.40 0.42,0.44,0.44,0.49), mean=0.274, stddev=0.087], bias-{mean,stddev}=0.0008749,0.005914, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.14e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.12,0.12,0.16), mean=0.0643, stddev=0.0277], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.14,0.18 0.22,0.32,0.49,0.59,0.63 0.67,0.69,0.71,0.76), mean=0.46, stddev=0.15], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.14,0.17,0.20 0.22,0.24,0.25,0.28), mean=0.147, stddev=0.0344], oderiv-count=972224
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26795.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.12,0.18), mean=0.066, stddev=0.0278], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.09,0.11,0.12,0.13 0.14,0.15,0.15,0.16), mean=0.106, stddev=0.0222]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000159365, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008505, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.16,0.21 0.26,0.29,0.33,0.38,0.41 0.42,0.44,0.45,0.48), mean=0.33, stddev=0.0619], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.15,0.18,0.22,0.25 0.28,0.31,0.33,0.38), mean=0.188, stddev=0.0459], bias-{mean,stddev}=-0.01794,0.02545, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.86e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.14,0.19 0.22,0.24,0.28,0.30,0.32 0.33,0.34,0.36,0.39), mean=0.269, stddev=0.0434], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.35,0.37 0.38,0.40,0.43,0.45,0.46 0.47,0.49,0.49,0.53), mean=0.423, stddev=0.0334], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0299, stddev=0.00297], oderiv-count=926240
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24551.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.19 0.22,0.24,0.28,0.31,0.32 0.34,0.35,0.36,0.47), mean=0.273, stddev=0.0453], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.25,0.33 0.42,0.47,0.53,0.61,0.64 0.67,0.71,0.73,1.0), mean=0.53, stddev=0.1]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000159365, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02069, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.28,0.30 0.31,0.35,0.49,0.64,0.71 0.76,0.85,0.90,0.99), mean=0.506, stddev=0.151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.64,0.66,0.74 0.78,0.81,0.89,1.0,1.1 1.2,1.4,1.4,1.6), mean=0.93, stddev=0.158], bias-{mean,stddev}=0.01239,0.01661, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000159365, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1019, w_fc-rms=0.0452, w_oc-rms=0.07448, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652205, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.61,0.64 0.65,0.68,0.73,0.77,0.80 0.83,0.84,0.85,0.89), mean=0.726, stddev=0.0565], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.21), mean=0.165, stddev=0.0233] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652205, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.53,0.57,0.59 0.61,0.64,0.69,0.73,0.78 0.81,0.84,0.86,0.88), mean=0.688, stddev=0.0653], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.172, stddev=0.0241] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0314607, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.82,-0.78,-0.63 -0.46,-0.32,-0.009,0.30,0.45 0.62,0.82,0.86,0.91), mean=-0.00189, stddev=0.365], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.20,0.24 0.29,0.36,0.46,0.52,0.54 0.56,0.58,0.58,0.62), mean=0.437, stddev=0.0958] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652205, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.49,0.52 0.55,0.59,0.63,0.67,0.70 0.72,0.77,0.82,0.87), mean=0.632, stddev=0.0618], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0184] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00652205, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.69,-0.66,-0.53 -0.37,-0.25,0.0001,0.25,0.36 0.55,0.68,0.72,0.74), mean=-0.00371, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.40,0.45 0.51,0.59,0.68,0.73,0.76 0.77,0.79,0.80,0.82), mean=0.659, stddev=0.0947] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.37509e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221421
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.254545
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000159365, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09099, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.6,2.7 2.8,2.9,2.9,3.1), mean=1.97, stddev=0.637], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.93,1.0,1.1 1.1,1.2,1.4,1.6,1.9 2.1,2.2,2.2,2.3), mean=1.44, stddev=0.3], bias-{mean,stddev}=-0.005495,0.7042, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000159365, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04392, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.61,0.62 0.63,0.65,0.69,0.74,0.77 0.80,0.87,0.92,2.1), mean=0.703, stddev=0.0832], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.5,2.6 2.7,2.7,2.8,2.8), mean=1.93, stddev=0.592], bias-{mean,stddev}=4.71e-09,0.02126, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.40), mean=0.0171, stddev=0.0134], oderiv-count=603200
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/330.mdl exp/nnet3/tdnn_lstm1c_sp/331.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.90165 tdnn2.affine:3.71903 lstm1.W_all:2.88677 lstm1.lstm_nonlin:0.0564553 lstm1.W_rp:1.18767 tdnn3.affine:2.65309 tdnn4.affine:2.79926 lstm2.W_all:2.03467 lstm2.lstm_nonlin:0.0341532 lstm2.W_rp:0.846935 tdnn5.affine:2.24487 tdnn6.affine:2.35735 lstm3.W_all:2.18633 lstm3.lstm_nonlin:0.0569042 lstm3.W_rp:0.868053 output.affine:2.3742 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.652 tdnn2.affine:10.6419 lstm1.W_all:20.5507 lstm1.lstm_nonlin:2.44155 lstm1.W_rp:15.3518 tdnn3.affine:8.39949 tdnn4.affine:7.78471 lstm2.W_all:17.0117 lstm2.lstm_nonlin:1.67396 lstm2.W_rp:14.6279 tdnn5.affine:8.03711 tdnn6.affine:7.69315 lstm3.W_all:24.0811 lstm3.lstm_nonlin:3.0565 lstm3.W_rp:35.3302 output.affine:32.5006 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.308168 tdnn2.affine:0.349302 lstm1.W_all:0.140452 lstm1.lstm_nonlin:0.0230736 lstm1.W_rp:0.0773774 tdnn3.affine:0.315092 tdnn4.affine:0.359098 lstm2.W_all:0.119544 lstm2.lstm_nonlin:0.0203815 lstm2.W_rp:0.0578584 tdnn5.affine:0.279228 tdnn6.affine:0.306469 lstm3.W_all:0.0907762 lstm3.lstm_nonlin:0.0186428 lstm3.W_rp:0.024568 output.affine:0.0730345 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:12:09 KST 2020, elapsed time 0 seconds
