# nnet3-info exp/nnet3/tdnn_lstm1c_sp/10.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/9.mdl exp/nnet3/tdnn_lstm1c_sp/10.mdl 
# Started at Thu Jul 30 10:05:06 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/10.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000291558, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03011, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.004 0.007,0.02,0.55,0.67,0.73 0.76,0.85,0.88,1.1), mean=0.434, stddev=0.289], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.17,0.20,0.57,0.81,1.1 1.4,1.5,1.6,1.7), mean=0.579, stddev=0.369], bias-{mean,stddev}=0.003727,0.05856, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0.177785, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,6e-07,1e-06,1e-05 3e-05,0.0001,0.07,0.10,0.11 0.12,0.14,0.14,0.19), mean=0.0561, stddev=0.0459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.0009,0.002,0.009 0.04,0.06,0.44,0.62,0.70 0.75,0.82,0.86,0.88), mean=0.376, stddev=0.26], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.005 0.01,0.04,0.32,0.43,0.49 0.56,0.66,0.73,0.95), mean=0.285, stddev=0.186], oderiv-count=1.24198e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40215, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,1e-07,5e-07,2e-06 6e-06,6e-05,0.06,0.09,0.11 0.12,0.14,0.15,0.19), mean=0.0523, stddev=0.044], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,9e-06,2e-05,4e-05 9e-05,0.0004,0.10,0.12,0.13 0.14,0.15,0.15,0.17), mean=0.0742, stddev=0.054]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000291558, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01273, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.43 0.44,0.46,0.50,0.54,0.56 0.58,0.60,0.61,0.65), mean=0.501, stddev=0.0453], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.003 0.004,0.02,0.32,0.37,0.40 0.42,0.44,0.46,0.53), mean=0.243, stddev=0.158], bias-{mean,stddev}=-0.001936,0.03471, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.24e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.28 0.30,0.31,0.34,0.36,0.38 0.40,0.42,0.43,0.47), mean=0.338, stddev=0.035], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.40,0.41 0.43,0.44,0.46,0.49,0.51 0.52,0.53,0.54,0.55), mean=0.465, stddev=0.0313], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.08), mean=0.041, stddev=0.00732], oderiv-count=1.03802e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39375.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.25,0.27 0.28,0.30,0.33,0.36,0.38 0.39,0.41,0.43,0.48), mean=0.331, stddev=0.0384], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.45,0.46,0.48 0.50,0.52,0.57,0.63,0.66 0.68,0.72,0.72,0.77), mean=0.577, stddev=0.062]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000291558, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01937, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.30,0.31 0.33,0.35,0.44,0.59,0.68 0.75,0.81,0.85,1.1), mean=0.474, stddev=0.138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.60,0.63 0.65,0.79,0.91,0.96,0.99 1.0,1.0,1.1,1.1), mean=0.875, stddev=0.122], bias-{mean,stddev}=0.0004408,0.299, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000291558, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.3117, w_fc-rms=0.3041, w_oc-rms=0.2954, count=1.43e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613799, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.33,0.34,0.36 0.39,0.43,0.50,0.58,0.61 0.64,0.69,0.70,0.83), mean=0.504, stddev=0.0858], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.18,0.18,0.19 0.20,0.21,0.23,0.23,0.24 0.24,0.24,0.24,0.25), mean=0.223, stddev=0.0146] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613799, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.29,0.31 0.36,0.39,0.47,0.57,0.64 0.70,0.76,0.78,0.83), mean=0.484, stddev=0.111], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.16,0.18 0.19,0.21,0.23,0.24,0.24 0.24,0.24,0.24,0.25), mean=0.223, stddev=0.0206] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00744399, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.77,-0.73,-0.62 -0.51,-0.32,0.01,0.37,0.51 0.63,0.71,0.73,0.82), mean=0.0109, stddev=0.375], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.31,0.33,0.36 0.41,0.45,0.56,0.68,0.74 0.79,0.85,0.87,0.90), mean=0.567, stddev=0.129] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613799, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.33,0.36 0.38,0.42,0.48,0.54,0.58 0.62,0.68,0.69,0.75), mean=0.483, stddev=0.0789], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.22,0.23,0.23 0.24,0.24,0.24,0.24), mean=0.219, stddev=0.0146] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00616162, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.78,-0.71,-0.54 -0.41,-0.24,-0.001,0.28,0.41 0.54,0.68,0.74,0.86), mean=0.00665, stddev=0.321], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.32,0.45 0.58,0.69,0.80,0.88,0.91 0.94,0.95,0.97,0.98), mean=0.769, stddev=0.144] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=294969
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000291558, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03209, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.54,0.55,0.56 0.59,0.63,0.72,0.82,0.86 0.90,0.92,0.94,0.96), mean=0.724, stddev=0.103], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.30 0.33,0.38,0.49,0.61,0.69 0.73,0.79,0.85,1.1), mean=0.5, stddev=0.134], bias-{mean,stddev}=0.03136,0.3055, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000291558, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0139, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.18,0.19,0.21 0.25,0.30,0.37,0.45,0.50 0.57,0.62,0.63,0.71), mean=0.374, stddev=0.102], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.23 0.24,0.26,0.31,0.36,0.39 0.41,0.42,0.44,0.48), mean=0.312, stddev=0.0554], bias-{mean,stddev}=-1.238e-05,0.008068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.09e+06, self-repaired-proportion=0.00411058, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.06,0.08 0.10,0.13,0.18,0.24,0.26 0.28,0.29,0.31,0.34), mean=0.181, stddev=0.061], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.16,0.18,0.22 0.28,0.36,0.49,0.62,0.67 0.72,0.78,0.81,0.86), mean=0.487, stddev=0.151], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.06,0.07,0.08 0.09,0.11,0.11,0.21), mean=0.0571, stddev=0.0184], oderiv-count=1.08608e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36856.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.05,0.05,0.07 0.10,0.12,0.17,0.22,0.26 0.27,0.29,0.30,0.37), mean=0.172, stddev=0.0607], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.15,0.17,0.19 0.21,0.23,0.26,0.31,0.33 0.34,0.37,0.39,0.42), mean=0.265, stddev=0.0485]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000291558, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01005, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.27,0.30 0.33,0.36,0.40,0.43,0.45 0.46,0.48,0.49,0.52), mean=0.394, stddev=0.0482], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.11,0.13 0.14,0.18,0.22,0.26,0.29 0.32,0.34,0.35,0.40), mean=0.223, stddev=0.0544], bias-{mean,stddev}=-0.009467,0.02013, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.02e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.27 0.28,0.29,0.32,0.35,0.37 0.39,0.41,0.42,0.46), mean=0.324, stddev=0.0355], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.40 0.41,0.42,0.44,0.46,0.47 0.49,0.50,0.50,0.51), mean=0.442, stddev=0.0262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.0267, stddev=0.00374], oderiv-count=1.01946e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34337.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.24,0.26 0.27,0.29,0.31,0.35,0.37 0.39,0.41,0.41,0.47), mean=0.316, stddev=0.0386], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.44,0.46,0.48 0.50,0.53,0.58,0.63,0.66 0.68,0.73,0.73,0.79), mean=0.579, stddev=0.0629]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000291558, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01693, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.30 0.31,0.32,0.38,0.51,0.58 0.65,0.70,0.74,0.92), mean=0.417, stddev=0.111], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.58,0.59 0.61,0.66,0.79,0.84,0.87 0.90,0.92,0.94,1.0), mean=0.766, stddev=0.0954], bias-{mean,stddev}=0.008834,0.2993, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000291558, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.3218, w_fc-rms=0.3094, w_oc-rms=0.3099, count=1.31e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619317, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.35,0.37 0.39,0.43,0.50,0.58,0.62 0.65,0.68,0.70,0.76), mean=0.507, stddev=0.0862], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.20 0.20,0.21,0.23,0.24,0.24 0.24,0.24,0.24,0.25), mean=0.224, stddev=0.015] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619317, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.32,0.33,0.36 0.38,0.41,0.47,0.57,0.62 0.69,0.76,0.78,0.86), mean=0.493, stddev=0.102], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.17,0.19 0.20,0.22,0.23,0.24,0.24 0.24,0.24,0.25,0.25), mean=0.227, stddev=0.0199] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00619317, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.74,-0.67,-0.56 -0.47,-0.32,-0.01,0.33,0.48 0.58,0.67,0.73,0.82), mean=0.00487, stddev=0.351], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.32,0.39,0.44 0.47,0.52,0.61,0.72,0.80 0.84,0.88,0.89,0.92), mean=0.619, stddev=0.123] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619317, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.31,0.33,0.35 0.38,0.42,0.49,0.57,0.60 0.65,0.69,0.72,0.79), mean=0.493, stddev=0.0887], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.20,0.21,0.23,0.24,0.24 0.24,0.24,0.24,0.25), mean=0.223, stddev=0.0142] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0157114, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.79,-0.74,-0.50 -0.37,-0.22,-0.0006,0.26,0.38 0.53,0.67,0.75,0.92), mean=0.00577, stddev=0.309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.22,0.33,0.46 0.64,0.72,0.82,0.89,0.93 0.95,0.96,0.97,0.97), mean=0.792, stddev=0.145] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=260094
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000291558, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03042, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.54,0.56,0.57 0.59,0.61,0.68,0.76,0.79 0.84,0.87,0.88,0.91), mean=0.689, stddev=0.0809], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.26 0.29,0.33,0.44,0.59,0.67 0.75,0.84,0.90,1.0), mean=0.466, stddev=0.153], bias-{mean,stddev}=-0.009567,0.2976, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000291558, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01311, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.08,0.14,0.17 0.20,0.25,0.34,0.44,0.51 0.54,0.59,0.66,0.76), mean=0.347, stddev=0.117], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.22 0.23,0.25,0.29,0.34,0.36 0.38,0.40,0.41,0.46), mean=0.295, stddev=0.0504], bias-{mean,stddev}=-0.001018,0.006348, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.66e+05, self-repaired-proportion=0.0247436, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,0.0006,0.003,0.05 0.07,0.09,0.16,0.22,0.26 0.28,0.30,0.32,0.35), mean=0.159, stddev=0.0716], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.01,0.03,0.17 0.22,0.29,0.42,0.54,0.62 0.65,0.69,0.72,0.85), mean=0.415, stddev=0.152], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.04,0.05,0.06,0.08 0.10,0.12,0.14,0.25), mean=0.0553, stddev=0.0236], oderiv-count=968960
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31818.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,7e-05,0.004,0.05 0.07,0.09,0.15,0.21,0.24 0.26,0.30,0.31,0.33), mean=0.15, stddev=0.0674], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.002,0.02,0.13 0.17,0.21,0.26,0.31,0.34 0.36,0.37,0.38,0.43), mean=0.254, stddev=0.0715]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000291558, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01006, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.28,0.31 0.34,0.36,0.39,0.43,0.45 0.47,0.52,0.53,0.60), mean=0.394, stddev=0.0484], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.09,0.11 0.13,0.16,0.22,0.28,0.31 0.33,0.37,0.39,0.60), mean=0.218, stddev=0.0715], bias-{mean,stddev}=-0.005558,0.02461, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.88e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.28,0.30,0.33,0.36,0.38 0.40,0.42,0.43,0.57), mean=0.332, stddev=0.04], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.37,0.38 0.39,0.40,0.42,0.45,0.46 0.48,0.49,0.50,0.51), mean=0.425, stddev=0.0294], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0241, stddev=0.00307], oderiv-count=976320
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29299.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.26 0.27,0.29,0.32,0.36,0.38 0.40,0.43,0.45,0.67), mean=0.328, stddev=0.045], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.48,0.49,0.51 0.53,0.56,0.61,0.67,0.70 0.73,0.77,0.81,1.0), mean=0.613, stddev=0.0702]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000291558, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02019, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.32 0.34,0.38,0.47,0.60,0.71 0.77,0.82,0.86,1.1), mean=0.497, stddev=0.135], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.67,0.70,0.71,0.76 0.79,0.82,0.87,1.0,1.1 1.2,1.3,1.3,1.4), mean=0.911, stddev=0.132], bias-{mean,stddev}=0.003343,0.2997, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000291558, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.2864, w_fc-rms=0.2995, w_oc-rms=0.3103, count=1.18e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625983, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.39,0.40,0.43 0.46,0.49,0.56,0.62,0.66 0.69,0.70,0.71,0.77), mean=0.559, stddev=0.0772], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.18 0.18,0.19,0.20,0.22,0.23 0.23,0.23,0.24,0.24), mean=0.204, stddev=0.0172] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625983, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.36,0.39 0.43,0.48,0.57,0.64,0.68 0.72,0.78,0.80,0.85), mean=0.562, stddev=0.0987], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.17 0.18,0.19,0.21,0.22,0.23 0.24,0.24,0.24,0.24), mean=0.205, stddev=0.0223] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00817086, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.73,-0.68,-0.55 -0.42,-0.23,0.003,0.24,0.39 0.52,0.62,0.66,0.75), mean=-0.00328, stddev=0.307], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.28,0.29,0.35 0.38,0.43,0.49,0.56,0.63 0.68,0.74,0.75,0.83), mean=0.496, stddev=0.0967] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625983, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.37,0.41,0.44 0.47,0.52,0.61,0.68,0.72 0.74,0.77,0.78,0.83), mean=0.6, stddev=0.0946], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.16 0.16,0.17,0.19,0.21,0.21 0.22,0.23,0.23,0.24), mean=0.19, stddev=0.0187] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00880791, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.73,-0.68,-0.55 -0.36,-0.22,-0.0005,0.22,0.34 0.48,0.64,0.70,0.82), mean=-0.00449, stddev=0.287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.31,0.35,0.45 0.51,0.59,0.67,0.75,0.80 0.84,0.88,0.90,0.94), mean=0.664, stddev=0.117] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221123
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000291558, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06152, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.2,1.3,1.4,1.5,1.5 1.6,1.6,1.7,1.7), mean=1.4, stddev=0.124], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.41,0.51 0.63,0.77,0.98,1.2,1.2 1.3,1.4,1.4,1.7), mean=0.963, stddev=0.238], bias-{mean,stddev}=0.02739,0.2905, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000291558, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04138, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.49,0.51,0.54 0.56,0.59,0.64,0.72,0.76 0.81,0.89,0.94,2.3), mean=0.658, stddev=0.11], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.6,1.6 1.7,1.7,1.9,2.0,2.1 2.2,2.3,2.3,2.3), mean=1.89, stddev=0.169], bias-{mean,stddev}=3.215e-09,0.01322, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0138], oderiv-count=634240
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/9.mdl exp/nnet3/tdnn_lstm1c_sp/10.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.06482 tdnn2.affine:9.45135 lstm1.W_all:8.481 lstm1.lstm_nonlin:1.48274 lstm1.W_rp:3.74651 tdnn3.affine:6.04763 tdnn4.affine:7.03366 lstm2.W_all:6.02585 lstm2.lstm_nonlin:1.52871 lstm2.W_rp:2.66343 tdnn5.affine:4.94207 tdnn6.affine:6.35386 lstm3.W_all:7.11431 lstm3.lstm_nonlin:1.44339 lstm3.W_rp:2.89389 output.affine:6.6107 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.9657 tdnn2.affine:11.4884 lstm1.W_all:26.3332 lstm1.lstm_nonlin:11.9985 lstm1.W_rp:12.7947 tdnn3.affine:8.85218 tdnn4.affine:9.06711 lstm2.W_all:23.9538 lstm2.lstm_nonlin:12.393 lstm2.W_rp:12.1735 tdnn5.affine:8.35279 tdnn6.affine:9.08039 lstm3.W_all:27.1683 lstm3.lstm_nonlin:11.805 lstm3.W_rp:23.1063 output.affine:30.6093 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.759165 tdnn2.affine:0.814766 lstm1.W_all:0.304165 lstm1.lstm_nonlin:0.110112 lstm1.W_rp:0.282799 tdnn3.affine:0.666245 tdnn4.affine:0.762005 lstm2.W_all:0.23386 lstm2.lstm_nonlin:0.109864 lstm2.W_rp:0.211139 tdnn5.affine:0.582073 tdnn6.affine:0.689018 lstm3.W_all:0.248303 lstm3.lstm_nonlin:0.109164 lstm3.W_rp:0.124982 output.affine:0.216027 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:05:06 KST 2020, elapsed time 0 seconds
