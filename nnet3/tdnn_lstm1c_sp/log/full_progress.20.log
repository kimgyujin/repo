# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/19.mdl exp/nnet3/tdnn_lstm1c_sp/20.mdl 
# Started at Thu Jul 30 10:09:01 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/19.mdl exp/nnet3/tdnn_lstm1c_sp/20.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000283353, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0236, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.01,0.02 0.02,0.12,0.43,0.50,0.54 0.56,0.59,0.62,0.80), mean=0.365, stddev=0.183], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.15,0.18,0.49,0.65,0.78 0.99,1.1,1.2,1.5), mean=0.468, stddev=0.265], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.08,0.29,0.69,0.93 1.2,1.3,1.4,1.7), mean=0.4, stddev=0.36], bias-{mean,stddev}=-0.0008874,0.03245, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=4.74e+03, self-repaired-proportion=-0.285989, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.1,-5.6,-5.0,-3.9 -2.5,-1.3,0.04,2.0,3.0 4.1,5.4,5.8,7.3), mean=0.255, stddev=2.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-54,-36,-30,-22 -16,-9.7,0.05,10,15 22,28,32,60), mean=0.189, stddev=13.4], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.80,1.2 1.5,1.8,2.1,3.1), mean=0.377, stddev=0.544], oderiv-count=34688
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-3521.62, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000283353, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01074, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.34,0.35 0.37,0.39,0.42,0.46,0.47 0.49,0.51,0.52,0.53), mean=0.422, stddev=0.0413], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.008 0.01,0.08,0.26,0.30,0.32 0.33,0.35,0.36,0.42), mean=0.219, stddev=0.109], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.09,0.12,0.25,0.53,0.72 0.89,1.1,1.1,1.3), mean=0.335, stddev=0.26], bias-{mean,stddev}=9.372e-05,0.01748, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.009,0.03,0.05,0.05 0.05,0.06,0.07,0.08), mean=0.0292, stddev=0.0182], oderiv-count=183872
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-3456.08, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000283353, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007183, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.05,0.08,0.14,0.23,0.29 0.34,0.40,0.43,0.47), mean=0.158, stddev=0.0924], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.13,0.19,0.35,0.38,0.40 0.41,0.42,0.43,0.46), mean=0.313, stddev=0.0976], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.08,0.18,0.38,0.53 0.70,0.91,1.0,1.2), mean=0.244, stddev=0.219], bias-{mean,stddev}=9.364e-05,0.01138, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000283353, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01201, w_fc-rms=0.01138, w_oc-rms=0.01257, count=1e+04, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00130869, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.1,-1.1,-0.95,-0.65 -0.44,-0.17,0.56,1.3,1.6 2.0,2.4,2.7,3.5), mean=0.573, stddev=0.83], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.44,-0.38,-0.29,-0.16 -0.04,0.07,0.22,0.38,0.49 0.62,0.75,0.84,0.99), mean=0.224, stddev=0.223] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00130869, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.6,-1.3,-1.1,-0.80 -0.46,-0.11,0.50,0.99,1.3 1.6,2.0,2.1,2.8), mean=0.449, stddev=0.738], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.68,-0.40,-0.28,-0.08 0.008,0.09,0.22,0.33,0.42 0.54,0.71,0.76,1.7), mean=0.215, stddev=0.206] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.362795, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-12,-9.7,-8.9,-6.9 -5.1,-3.3,-0.03,2.7,4.5 6.4,8.1,9.0,11), mean=-0.2, stddev=3.88], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.7,-4.8,-4.5,-2.9 -2.1,-1.1,0.65,2.3,3.7 4.5,5.0,5.4,7.3), mean=0.668, stddev=2.21] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00130869, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-1.1,-1.0,-0.68 -0.39,-0.06,0.61,1.3,1.7 2.1,2.7,2.9,3.5), mean=0.644, stddev=0.843], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.38,-0.34,-0.22 -0.11,0.03,0.20,0.40,0.52 0.59,0.68,0.79,1.2), mean=0.204, stddev=0.257] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.143199, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-8.0,-6.8,-5.4 -4.0,-2.6,-0.04,2.3,3.9 4.9,6.4,7.4,10), mean=-0.107, stddev=3.15], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.4,-2.9,-2.3,-1.5 -0.85,-0.28,0.98,2.1,2.9 3.6,5.0,5.2,6.8), mean=0.971, stddev=1.6] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.3e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=1947
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000283353, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.009457, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.16,0.17,0.21,0.25,0.26 0.28,0.29,0.29,0.30), mean=0.212, stddev=0.0387], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.07,0.10,0.15,0.19,0.21 0.22,0.24,0.25,0.30), mean=0.144, stddev=0.051], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.006 0.007,0.01,0.03,0.13,0.41 0.57,0.69,0.74,0.84), mean=0.111, stddev=0.185], bias-{mean,stddev}=0.0003399,0.01341, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000283353, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009191, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.25,0.29,0.31 0.34,0.36,0.38,0.46), mean=0.253, stddev=0.0439], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.16,0.20,0.25,0.27 0.29,0.30,0.31,0.32), mean=0.204, stddev=0.0488], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.004,0.007,0.02,0.19,0.47 0.68,0.83,0.92,1.1), mean=0.128, stddev=0.223], bias-{mean,stddev}=-0.0005523,0.01015, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.11,0.16 0.19,0.23,0.28,0.44), mean=0.0461, stddev=0.074], oderiv-count=24960
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-3259.47, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000283353, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007651, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.24,0.26 0.27,0.28,0.30,0.32,0.34 0.35,0.35,0.36,0.38), mean=0.301, stddev=0.0269], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.13 0.14,0.15,0.17,0.19,0.21 0.22,0.23,0.24,0.26), mean=0.173, stddev=0.0259], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.09,0.12,0.20,0.37,0.50 0.61,0.72,0.77,0.94), mean=0.252, stddev=0.166], bias-{mean,stddev}=0.000671,0.009073, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-3062.86, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000283353, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00473, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.03,0.08,0.16,0.20 0.24,0.27,0.28,0.44), mean=0.0982, stddev=0.0699], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.12,0.23,0.25,0.26 0.27,0.29,0.30,0.33), mean=0.205, stddev=0.0674], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.05,0.11,0.24,0.35 0.47,0.63,0.70,0.83), mean=0.157, stddev=0.148], bias-{mean,stddev}=0.0004909,0.01121, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000283353, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0122, w_fc-rms=0.01163, w_oc-rms=0.0119, count=8.26e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00146678, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-0.80,-0.67,-0.45 -0.26,0.007,0.52,1.1,1.4 1.7,2.1,2.5,3.2), mean=0.575, stddev=0.695], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.53,-0.35,-0.23,-0.13 -0.006,0.09,0.19,0.28,0.36 0.45,0.58,0.68,1.1), mean=0.185, stddev=0.176] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00146678, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.82,-0.59,-0.40 -0.19,0.09,0.59,1.1,1.4 1.7,1.9,2.0,2.3), mean=0.586, stddev=0.602], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.55,-0.39,-0.27,-0.12 0.007,0.10,0.20,0.24,0.30 0.37,0.46,0.52,0.76), mean=0.17, stddev=0.15] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00146678, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.5,-6.7,-5.8,-4.4 -3.2,-1.9,0.10,2.0,3.5 4.3,5.5,7.4,13), mean=0.0631, stddev=2.7], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.1,-4.9,-4.3,-3.3 -2.3,-1.2,0.14,1.5,2.4 3.4,4.8,5.4,10), mean=0.142, stddev=2.02] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00146678, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-0.91,-0.73,-0.53 -0.36,-0.10,0.46,1.1,1.5 1.8,2.2,2.4,3.5), mean=0.533, stddev=0.752], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.65,-0.26,-0.24,-0.10 -0.01,0.07,0.18,0.29,0.39 0.49,0.60,0.69,1.3), mean=0.184, stddev=0.186] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00146678, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.4,-5.7,-5.1,-3.8 -2.6,-1.6,-0.06,1.8,3.0 3.7,5.1,5.8,8.5), mean=0.0556, stddev=2.26], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.2,-2.8,-2.4,-1.7 -1.0,-0.38,0.63,1.4,2.0 2.6,3.5,4.4,6.0), mean=0.567, stddev=1.32] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.07e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=1620
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000283353, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006419, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.11 0.12,0.13,0.14,0.16,0.17 0.18,0.19,0.19,0.21), mean=0.145, stddev=0.0218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.05,0.09,0.14,0.15 0.16,0.18,0.18,0.23), mean=0.0938, stddev=0.0438], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.005,0.005 0.006,0.008,0.02,0.11,0.29 0.38,0.44,0.47,0.54), mean=0.0766, stddev=0.125], bias-{mean,stddev}=-0.00056,0.01192, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000283353, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007529, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.12,0.14,0.15 0.16,0.17,0.20,0.24,0.27 0.28,0.31,0.33,0.38), mean=0.206, stddev=0.0431], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.14,0.16,0.20,0.21 0.22,0.24,0.25,0.27), mean=0.169, stddev=0.0311], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.002,0.002 0.003,0.004,0.02,0.18,0.38 0.55,0.70,0.77,0.88), mean=0.106, stddev=0.182], bias-{mean,stddev}=-0.0002025,0.008742, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2.02e+05, self-repaired-proportion=0.0717949, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.06,-0.03,-0.007,0.009 0.03,0.07,0.13,0.19,0.22 0.25,0.29,0.31,0.40), mean=0.13, stddev=0.0731], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.18,-0.07,-0.04,0.10 0.15,0.24,0.43,0.59,0.66 0.74,0.79,0.83,0.98), mean=0.417, stddev=0.198], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.09,0.14 0.21,0.28,0.39,0.90), mean=0.0434, stddev=0.0869], oderiv-count=30720
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-2866.26, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000283353, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006647, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.23,0.24,0.26,0.28,0.29 0.31,0.33,0.33,0.35), mean=0.261, stddev=0.0262], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.10,0.11 0.12,0.13,0.15,0.17,0.18 0.20,0.22,0.23,0.29), mean=0.149, stddev=0.029], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.07,0.09,0.16,0.32,0.43 0.55,0.65,0.70,0.82), mean=0.213, stddev=0.153], bias-{mean,stddev}=0.001641,0.007982, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.47e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.003,0.08,0.13,0.18 0.22,0.27,0.38,0.51,0.58 0.63,0.70,0.72,0.89), mean=0.391, stddev=0.14], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.06,0.09,0.11,0.18 0.25,0.32,0.42,0.53,0.59 0.64,0.67,0.69,0.90), mean=0.416, stddev=0.135], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.008,0.02,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0179, stddev=0.00991], oderiv-count=122880
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-2669.65, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000283353, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005978, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.06,0.08,0.12,0.19,0.25 0.28,0.31,0.32,0.45), mean=0.134, stddev=0.0722], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.20,0.22,0.25,0.32,0.36 0.38,0.41,0.42,0.44), mean=0.266, stddev=0.0589], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.04,0.06,0.12,0.28,0.45 0.65,0.83,0.90,1.1), mean=0.192, stddev=0.194], bias-{mean,stddev}=-4.68e-05,0.01129, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000283353, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01112, w_fc-rms=0.01151, w_oc-rms=0.01273, count=6.48e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00171214, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-3.5,-2.9,-2.3 -1.5,-0.94,0.12,1.2,1.9 2.5,3.2,3.4,4.6), mean=0.152, stddev=1.4], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.71,-0.58,-0.31 -0.16,0.003,0.29,0.56,0.71 0.88,1.0,1.1,1.7), mean=0.284, stddev=0.362] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00171214, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.5,-2.5,-2.3,-1.7 -1.2,-0.54,0.61,1.9,2.7 3.2,4.0,4.3,5.4), mean=0.685, stddev=1.49], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.92,-0.87,-0.61 -0.43,-0.17,0.18,0.41,0.53 0.69,0.82,0.89,1.1), mean=0.117, stddev=0.385] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.231607, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-19,-14,-12,-10 -7.9,-5.0,-0.20,4.0,6.8 9.2,12,14,22), mean=-0.381, stddev=5.76], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.9,-7.2,-5.6,-4.1 -3.2,-1.9,0.32,2.7,4.0 5.4,6.4,6.8,9.7), mean=0.422, stddev=2.9] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00171214, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.8,-3.1,-2.7,-2.0 -1.6,-0.95,0.27,1.4,2.1 2.7,3.1,3.6,6.6), mean=0.285, stddev=1.47], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.77,-0.59,-0.34 -0.18,0.04,0.37,0.73,0.93 1.1,1.3,1.4,1.9), mean=0.377, stddev=0.439] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.019371, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-17,-12,-9.4,-7.9 -5.6,-3.9,-0.23,3.6,5.6 7.1,9.3,11,16), mean=-0.196, stddev=4.62], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.6,-5.1,-4.2,-2.8 -1.8,-0.89,1.0,2.7,3.8 4.6,5.6,6.2,8.8), mean=0.964, stddev=2.28] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=8.38e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=-0.000802568, count-zeroing-boundaries=1246
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000283353, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007836, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.13,0.14,0.16,0.21,0.22 0.23,0.23,0.24,0.26), mean=0.175, stddev=0.0351], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.08,0.10,0.13,0.15,0.16 0.17,0.18,0.18,0.19), mean=0.123, stddev=0.0306], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.007,0.008 0.01,0.01,0.05,0.23,0.33 0.40,0.47,0.50,0.62), mean=0.118, stddev=0.134], bias-{mean,stddev}=0.0006779,0.01234, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000283353, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.008799, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.06,0.07 0.08,0.09,0.12,0.17,0.19 0.22,0.26,0.28,0.50), mean=0.133, stddev=0.0488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.31,0.33 0.34,0.36,0.40,0.44,0.47 0.48,0.50,0.52,0.54), mean=0.401, stddev=0.0487], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.01 0.01,0.02,0.04,0.50,0.82 1.0,1.1,1.2,1.3), mean=0.225, stddev=0.335], bias-{mean,stddev}=-2.302e-10,0.003106, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.34888 tdnn2.affine:9.68363 lstm1.W_all:8.3681 lstm1.lstm_nonlin:0.473751 lstm1.W_rp:3.48412 tdnn3.affine:5.85787 tdnn4.affine:6.89389 lstm2.W_all:5.52368 lstm2.lstm_nonlin:0.470534 lstm2.W_rp:2.36824 tdnn5.affine:4.79929 tdnn6.affine:5.9892 lstm3.W_all:6.97039 lstm3.lstm_nonlin:0.466279 lstm3.W_rp:2.88799 output.affine:6.50961 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.4155 tdnn2.affine:11.7553 lstm1.W_all:20.8659 lstm1.lstm_nonlin:4.11814 lstm1.W_rp:11.6202 tdnn3.affine:8.66922 tdnn4.affine:8.84967 lstm2.W_all:16.703 lstm2.lstm_nonlin:4.08372 lstm2.W_rp:10.5571 tdnn5.affine:7.97827 tdnn6.affine:8.66642 lstm3.W_all:22.4282 lstm3.lstm_nonlin:4.1767 lstm3.W_rp:23.6492 output.affine:30.5282 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.759522 tdnn2.affine:0.834889 lstm1.W_all:0.398418 lstm1.lstm_nonlin:0.104461 lstm1.W_rp:0.298943 tdnn3.affine:0.690563 tdnn4.affine:0.790979 lstm2.W_all:0.325868 lstm2.lstm_nonlin:0.103677 lstm2.W_rp:0.222271 tdnn5.affine:0.601694 tdnn6.affine:0.694763 lstm3.W_all:0.308357 lstm3.lstm_nonlin:0.10187 lstm3.W_rp:0.122224 output.affine:0.213417 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:09:01 KST 2020, elapsed time 0 seconds
