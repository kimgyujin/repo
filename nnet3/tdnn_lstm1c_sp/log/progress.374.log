# nnet3-info exp/nnet3/tdnn_lstm1c_sp/374.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/373.mdl exp/nnet3/tdnn_lstm1c_sp/374.mdl 
# Started at Thu Jul 30 12:29:17 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/374.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000121321, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03229, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.006 0.008,0.02,0.56,0.72,0.81 0.87,0.96,0.99,1.2), mean=0.467, stddev=0.308], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.23,0.66,0.91,1.2 1.3,1.4,1.5,1.5), mean=0.638, stddev=0.368], bias-{mean,stddev}=-0.005208,0.06361, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.11e+06, self-repaired-proportion=0.197084, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,2e-05,2e-05,4e-05 6e-05,0.0001,0.04,0.09,0.11 0.13,0.15,0.16,0.20), mean=0.0476, stddev=0.0459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.03 0.05,0.06,0.37,0.59,0.70 0.82,0.88,0.92,0.99), mean=0.353, stddev=0.266], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.009,0.01 0.02,0.03,0.34,0.48,0.57 0.66,0.79,0.85,1.5), mean=0.319, stddev=0.229], oderiv-count=1.16288e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34369.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,1e-05,1e-05,3e-05 5e-05,0.0001,0.04,0.08,0.10 0.12,0.15,0.17,0.21), mean=0.0445, stddev=0.0445], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.0001,0.0001,0.0002 0.0003,0.0007,0.08,0.11,0.12 0.13,0.14,0.14,0.16), mean=0.0623, stddev=0.0489]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000121321, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01167, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.36 0.38,0.40,0.45,0.50,0.54 0.58,0.63,0.65,0.74), mean=0.456, stddev=0.0674], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.005,0.009,0.28,0.33,0.37 0.40,0.43,0.49,0.74), mean=0.222, stddev=0.147], bias-{mean,stddev}=-0.03434,0.03975, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.23,0.26,0.30,0.32 0.33,0.36,0.38,0.46), mean=0.266, stddev=0.0426], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.36,0.37,0.39 0.40,0.42,0.44,0.47,0.49 0.51,0.52,0.53,0.56), mean=0.442, stddev=0.0368], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.04,0.05,0.06,0.06 0.07,0.08,0.08,0.10), mean=0.0505, stddev=0.00988], oderiv-count=1.18739e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33595.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.23,0.26,0.31,0.32 0.34,0.37,0.40,0.48), mean=0.266, stddev=0.0467], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.38,0.39 0.41,0.43,0.48,0.53,0.56 0.60,0.63,0.65,0.71), mean=0.484, stddev=0.0623]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000121321, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01762, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,6e-07,2e-06,1e-05 0.0003,0.17,0.41,0.59,0.66 0.73,0.78,0.86,1.0), mean=0.385, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.37,0.42 0.50,0.70,0.81,0.90,0.96 1.0,1.1,1.2,1.3), mean=0.786, stddev=0.169], bias-{mean,stddev}=0.002472,0.02722, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000121321, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.08206, w_fc-rms=0.02581, w_oc-rms=0.04639, count=1.51e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638476, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.45,0.48,0.50,0.55 0.70,0.77,0.79,0.84), mean=0.495, stddev=0.0743], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.19 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0204] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638476, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.45,0.46,0.47 0.48,0.49,0.50,0.53,0.57 0.65,0.73,0.78,0.82), mean=0.517, stddev=0.0587], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.19 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0193] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0143524, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.87,-0.85,-0.45 -0.26,-0.13,0.001,0.15,0.29 0.62,0.82,0.87,0.89), mean=0.0165, stddev=0.296], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.23,0.27 0.39,0.45,0.57,0.74,1.0 1.0,1.0,1.0,1.0), mean=0.611, stddev=0.212] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638476, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.57,0.58,0.68), mean=0.462, stddev=0.0406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0197] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00638476, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.74,-0.68,-0.30 -0.18,-0.09,0.0007,0.10,0.21 0.41,0.63,0.73,0.81), mean=0.0111, stddev=0.228], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.41,0.53 0.74,0.81,0.88,0.93,1.0 1.0,1.0,1.0,1.0), mean=0.856, stddev=0.132] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=4.03682e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=9.25772e-05, count-zeroing-boundaries=297049
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.183471
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000121321, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03979, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.42,0.46 0.50,0.56,0.86,1.1,1.2 1.3,1.3,1.3,1.4), mean=0.861, stddev=0.287], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0007,0.0009,0.002 0.007,0.35,0.55,0.73,0.92 1.2,1.4,1.5,1.8), mean=0.545, stddev=0.338], bias-{mean,stddev}=0.01294,0.2596, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000121321, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0128, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.22,0.24,0.26 0.28,0.30,0.35,0.40,0.43 0.46,0.51,0.52,0.58), mean=0.352, stddev=0.064], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.15 0.16,0.18,0.28,0.37,0.40 0.42,0.44,0.45,0.47), mean=0.276, stddev=0.0958], bias-{mean,stddev}=0.001805,0.009338, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.58e+05, self-repaired-proportion=0.00179487, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.009,0.01,0.02 0.03,0.05,0.08,0.11,0.12 0.13,0.15,0.15,0.17), mean=0.0782, stddev=0.0328], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.12,0.17 0.23,0.33,0.47,0.59,0.62 0.67,0.70,0.73,0.83), mean=0.453, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.09,0.09,0.10 0.10,0.11,0.12,0.16,0.19 0.24,0.27,0.28,0.38), mean=0.138, stddev=0.0448], oderiv-count=1.05856e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31272.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.01,0.02,0.02 0.03,0.05,0.08,0.10,0.12 0.13,0.15,0.15,0.18), mean=0.0772, stddev=0.0323], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.05,0.06,0.07 0.09,0.11,0.13,0.14,0.16 0.17,0.18,0.18,0.20), mean=0.124, stddev=0.0273]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000121321, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008356, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.26,0.27 0.28,0.29,0.32,0.36,0.38 0.40,0.42,0.43,0.48), mean=0.328, stddev=0.0386], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.12,0.13,0.14 0.15,0.16,0.18,0.21,0.24 0.26,0.29,0.30,0.38), mean=0.186, stddev=0.0392], bias-{mean,stddev}=-0.02727,0.01904, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.25,0.28,0.29 0.31,0.32,0.33,0.36), mean=0.252, stddev=0.0318], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.35,0.37,0.38 0.39,0.40,0.43,0.45,0.46 0.47,0.48,0.48,0.50), mean=0.426, stddev=0.028], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0368, stddev=0.00277], oderiv-count=1.01782e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28950.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.23,0.25,0.28,0.30 0.31,0.33,0.34,0.37), mean=0.254, stddev=0.0333], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.39,0.41 0.42,0.44,0.49,0.54,0.57 0.60,0.63,0.68,0.85), mean=0.492, stddev=0.0623]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000121321, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01442, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,6e-06,2e-05 6e-05,0.001,0.33,0.51,0.58 0.62,0.68,0.71,0.90), mean=0.285, stddev=0.233], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.29,0.35 0.43,0.60,0.66,0.73,0.77 0.80,0.87,0.93,1.3), mean=0.645, stddev=0.131], bias-{mean,stddev}=0.005427,0.03181, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000121321, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05082, w_fc-rms=0.01536, w_oc-rms=0.0408, count=1.38e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644009, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.46 0.47,0.48,0.50,0.51,0.55 0.60,0.65,0.68,0.78), mean=0.504, stddev=0.0459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0159] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644009, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.46,0.47 0.49,0.50,0.50,0.53,0.56 0.59,0.65,0.67,0.72), mean=0.515, stddev=0.039], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0166] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644009, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.79,-0.75,-0.41 -0.22,-0.10,0.0003,0.12,0.31 0.50,0.63,0.70,0.77), mean=0.00792, stddev=0.251], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.29,0.38,0.42 0.47,0.53,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.719, stddev=0.218] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644009, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.45,0.47,0.50,0.50,0.51 0.53,0.55,0.57,0.69), mean=0.489, stddev=0.0283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0185] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644009, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.60,-0.53,-0.30 -0.16,-0.07,0.0002,0.08,0.20 0.36,0.47,0.55,0.62), mean=0.0063, stddev=0.186], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.55,0.59,0.68 0.76,0.83,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.895, stddev=0.106] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=8.64055e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.48128e-05, count-zeroing-boundaries=261961
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.183471
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000121321, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03795, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.49,0.53 0.56,0.60,0.83,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.835, stddev=0.227], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.002 0.004,0.01,0.56,0.80,0.93 1.1,1.3,1.3,1.5), mean=0.48, stddev=0.379], bias-{mean,stddev}=-0.0005912,0.2059, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000121321, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01208, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.24,0.25 0.27,0.29,0.32,0.37,0.42 0.45,0.48,0.49,0.56), mean=0.332, stddev=0.0591], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.25,0.35,0.38 0.40,0.41,0.42,0.45), mean=0.263, stddev=0.0825], bias-{mean,stddev}=0.0009738,0.006268, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.86e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.13,0.14,0.16), mean=0.0636, stddev=0.0285], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.14,0.18 0.21,0.29,0.45,0.56,0.60 0.64,0.68,0.70,0.73), mean=0.433, stddev=0.144], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.11,0.13,0.16,0.19 0.21,0.23,0.23,0.25), mean=0.139, stddev=0.0326], oderiv-count=1.00454e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26627.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.13,0.14,0.15), mean=0.0665, stddev=0.0285], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.06 0.07,0.09,0.11,0.13,0.14 0.15,0.16,0.17,0.19), mean=0.11, stddev=0.0259]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000121321, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008358, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.15,0.21 0.26,0.28,0.33,0.38,0.40 0.41,0.42,0.43,0.46), mean=0.325, stddev=0.0602], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.14,0.15,0.17,0.22,0.25 0.28,0.31,0.33,0.40), mean=0.185, stddev=0.0449], bias-{mean,stddev}=-0.02044,0.02316, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.98e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.19 0.21,0.23,0.27,0.29,0.31 0.32,0.34,0.34,0.39), mean=0.264, stddev=0.042], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.36 0.37,0.39,0.42,0.45,0.46 0.47,0.48,0.49,0.52), mean=0.419, stddev=0.0333], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0306, stddev=0.00307], oderiv-count=988800
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24305.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.16,0.19 0.22,0.24,0.28,0.30,0.32 0.33,0.35,0.35,0.49), mean=0.271, stddev=0.0438], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.26,0.35 0.41,0.46,0.53,0.60,0.65 0.67,0.70,0.74,1.1), mean=0.526, stddev=0.102]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000121321, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02074, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.27,0.29 0.31,0.35,0.49,0.66,0.72 0.76,0.85,0.90,0.99), mean=0.505, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.60,0.63,0.71 0.78,0.81,0.88,1.1,1.2 1.3,1.4,1.5,1.9), mean=0.929, stddev=0.179], bias-{mean,stddev}=0.01282,0.01638, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000121321, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1092, w_fc-rms=0.04411, w_oc-rms=0.07492, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650689, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.60,0.60,0.63 0.65,0.67,0.72,0.76,0.79 0.82,0.83,0.85,0.89), mean=0.719, stddev=0.0556], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.14,0.15,0.17,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.168, stddev=0.0215] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650689, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.53,0.56,0.58 0.60,0.62,0.67,0.71,0.76 0.80,0.84,0.86,0.89), mean=0.675, stddev=0.0651], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.13 0.14,0.16,0.18,0.20,0.20 0.20,0.21,0.21,0.23), mean=0.178, stddev=0.0231] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0281587, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.83,-0.72,-0.59 -0.45,-0.31,-0.02,0.29,0.43 0.58,0.76,0.81,0.92), mean=-0.00386, stddev=0.351], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.23 0.31,0.36,0.44,0.48,0.51 0.53,0.55,0.55,0.61), mean=0.422, stddev=0.082] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650689, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.49,0.50,0.53 0.55,0.59,0.64,0.67,0.70 0.72,0.76,0.80,0.88), mean=0.634, stddev=0.0593], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.176, stddev=0.0174] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00650689, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.72,-0.64,-0.54 -0.40,-0.28,-0.01,0.25,0.37 0.54,0.69,0.75,0.86), mean=-0.00508, stddev=0.313], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.31,0.33,0.37 0.46,0.54,0.63,0.68,0.71 0.72,0.73,0.74,0.80), mean=0.606, stddev=0.0989] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.35516e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.48964e-06, count-zeroing-boundaries=222735
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.183471
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000121321, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08951, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.1,1.1 1.2,1.3,1.7,2.6,2.7 2.7,2.8,2.9,3.1), mean=1.94, stddev=0.637], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.94,1.0,1.1 1.1,1.2,1.4,1.6,1.8 2.0,2.1,2.1,2.3), mean=1.42, stddev=0.269], bias-{mean,stddev}=-0.02787,0.6204, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000121321, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0427, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.59,0.60 0.62,0.64,0.67,0.72,0.75 0.78,0.82,0.90,2.1), mean=0.684, stddev=0.0809], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.1,1.1 1.2,1.2,1.7,2.5,2.6 2.7,2.7,2.7,2.9), mean=1.87, stddev=0.594], bias-{mean,stddev}=5.414e-09,0.02159, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0137], oderiv-count=587840
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/373.mdl exp/nnet3/tdnn_lstm1c_sp/374.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.43098 tdnn2.affine:3.22995 lstm1.W_all:2.48541 lstm1.lstm_nonlin:0.0498417 lstm1.W_rp:1.0731 tdnn3.affine:2.27179 tdnn4.affine:2.3458 lstm2.W_all:1.71675 lstm2.lstm_nonlin:0.0283606 lstm2.W_rp:0.734534 tdnn5.affine:1.90138 tdnn6.affine:2.01271 lstm3.W_all:2.03533 lstm3.lstm_nonlin:0.0521994 lstm3.W_rp:0.766772 output.affine:2.01237 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8353 tdnn2.affine:10.5803 lstm1.W_all:20.5256 lstm1.lstm_nonlin:2.22865 lstm1.W_rp:15.2176 tdnn3.affine:8.15521 tdnn4.affine:7.56408 lstm2.W_all:16.8342 lstm2.lstm_nonlin:1.52679 lstm2.W_rp:14.3435 tdnn5.affine:7.69199 tdnn6.affine:7.5603 lstm3.W_all:24.1363 lstm3.lstm_nonlin:3.18241 lstm3.W_rp:34.4017 output.affine:31.5969 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.268094 tdnn2.affine:0.305195 lstm1.W_all:0.1211 lstm1.lstm_nonlin:0.0222882 lstm1.W_rp:0.0705134 tdnn3.affine:0.278192 tdnn4.affine:0.310042 lstm2.W_all:0.101957 lstm2.lstm_nonlin:0.0184914 lstm2.W_rp:0.0511559 tdnn5.affine:0.246621 tdnn6.affine:0.266177 lstm3.W_all:0.0843351 lstm3.lstm_nonlin:0.0164012 lstm3.W_rp:0.0222571 output.affine:0.0636263 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:29:17 KST 2020, elapsed time 0 seconds
