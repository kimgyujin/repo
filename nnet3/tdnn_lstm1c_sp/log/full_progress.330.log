# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/329.mdl exp/nnet3/tdnn_lstm1c_sp/330.mdl 
# Started at Thu Jul 30 12:11:45 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/329.mdl exp/nnet3/tdnn_lstm1c_sp/330.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.0001614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009853, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.003,0.003,0.004 0.006,0.01,0.18,0.22,0.23 0.26,0.28,0.30,0.37), mean=0.146, stddev=0.0887], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.07,0.08,0.21,0.27,0.31 0.40,0.45,0.48,0.58), mean=0.197, stddev=0.108], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.01,0.01 0.02,0.03,0.11,0.29,0.40 0.48,0.57,0.62,0.70), mean=0.164, stddev=0.153], bias-{mean,stddev}=-0.0002484,0.01211, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.28e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.06,-0.04,-0.02,-0.01 -0.004,-0.0004,0.03,0.10,0.13 0.16,0.19,0.21,0.27), mean=0.0469, stddev=0.0592], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.61,-0.45,-0.26 -0.16,-0.01,0.35,0.67,0.83 0.95,1.0,1.1,1.3), mean=0.336, stddev=0.384], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.18,0.38,0.52 0.63,0.76,0.87,2.0), mean=0.222, stddev=0.232], oderiv-count=141376
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=49.9387, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-20,-12,-11,-8.5 -5.3,-2.6,0.02,3.3,6.9 9.2,11,13,22), mean=0.338, stddev=4.96], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0,0.59,0.77,1.2), mean=0.021, stddev=0.13]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.0001614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004157, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.14 0.15,0.15,0.16,0.18,0.18 0.19,0.19,0.20,0.20), mean=0.164, stddev=0.0138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.001,0.001,0.002 0.003,0.008,0.10,0.12,0.13 0.14,0.15,0.16,0.18), mean=0.0813, stddev=0.0488], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.04,0.09,0.20,0.28 0.36,0.41,0.44,0.49), mean=0.127, stddev=0.104], bias-{mean,stddev}=-8.007e-05,0.00691, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.06,0.07 0.08,0.09,0.10,0.12), mean=0.0265, stddev=0.031], oderiv-count=33824
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=56.4923, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-38,-23,-18,-14 -9.9,-5.9,0.12,6.1,10 14,17,19,25), mean=0.0584, stddev=8.22], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,1.3 2.4,3.3,3.6,5.3), mean=0.301, stddev=0.858]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.0001614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002531, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-09,8e-08,2e-07,1e-06 4e-05,0.02,0.05,0.09,0.10 0.11,0.13,0.14,0.15), mean=0.0536, stddev=0.036], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.05,0.12,0.13,0.14 0.15,0.16,0.17,0.20), mean=0.108, stddev=0.0409], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,8e-08,1e-07 2e-07,0.03,0.06,0.13,0.19 0.26,0.32,0.35,0.40), mean=0.0835, stddev=0.0798], bias-{mean,stddev}=3.453e-05,0.0007996, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.0001614, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0009255, w_fc-rms=0.0009416, w_oc-rms=0.002144, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000111739, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.02,0.17,0.21,0.31 0.34,0.40,0.50,0.57,0.66 0.75,0.86,0.91,1.1), mean=0.497, stddev=0.14], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.08,0.09,0.13 0.16,0.19,0.25,0.27,0.31 0.34,0.37,0.40,0.56), mean=0.237, stddev=0.0624] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000111739, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.29,0.31,0.35 0.39,0.45,0.50,0.56,0.62 0.66,0.76,0.82,1.1), mean=0.505, stddev=0.0989], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.005,0.10,0.12,0.15 0.18,0.21,0.25,0.26,0.28 0.30,0.32,0.34,0.42), mean=0.238, stddev=0.044] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.179401, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.6,-1.6,-1.3,-1.1 -0.87,-0.48,0.003,0.61,0.92 1.2,1.6,1.8,2.3), mean=0.0467, stddev=0.697], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.44,-0.33,-0.16 0.02,0.23,0.74,1.0,1.2 1.5,1.7,1.8,2.2), mean=0.694, stddev=0.492] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000111739, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,0.13,0.15,0.22 0.29,0.37,0.49,0.54,0.61 0.68,0.73,0.77,0.86), mean=0.463, stddev=0.129], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.12,-0.01,0.04,0.08 0.13,0.17,0.24,0.26,0.29 0.32,0.35,0.38,0.44), mean=0.221, stddev=0.0718] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000111739, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.95,-0.87,-0.70 -0.51,-0.27,0.003,0.34,0.54 0.68,0.85,0.95,1.4), mean=0.0253, stddev=0.401], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.25,0.24,0.31,0.43 0.63,0.74,0.90,1.0,1.1 1.1,1.2,1.2,1.4), mean=0.868, stddev=0.203] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-2.33e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-3492
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.257851
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.0001614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003327, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.05,0.07,0.10,0.10 0.11,0.11,0.12,0.12), mean=0.0714, stddev=0.0257], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,8e-05,0.0001,0.0003 0.001,0.04,0.05,0.07,0.07 0.08,0.08,0.09,0.09), mean=0.0482, stddev=0.0237], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.08,0.15 0.19,0.22,0.24,0.29), mean=0.0338, stddev=0.0679], bias-{mean,stddev}=-7.217e-05,0.002656, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.0001614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004221, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.08,0.08,0.09 0.09,0.10,0.11,0.13,0.14 0.15,0.16,0.17,0.18), mean=0.116, stddev=0.0201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.09,0.12,0.13 0.14,0.15,0.15,0.16), mean=0.0902, stddev=0.0337], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-09,3e-08,4e-08,5e-08 6e-08,9e-08,1e-05,0.14,0.23 0.29,0.34,0.37,0.42), mean=0.0603, stddev=0.101], bias-{mean,stddev}=-4.452e-05,0.00203, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=76.1531, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.6,-7.0,-6.4,-4.9 -3.8,-2.3,0.04,2.1,3.2 4.0,5.6,6.1,8.5), mean=-0.098, stddev=2.76], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0.46,0.65,0.76,0.86), mean=0.043, stddev=0.152]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.0001614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003132, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.11 0.11,0.12,0.12,0.13,0.13 0.14,0.14,0.15,0.15), mean=0.123, stddev=0.00887], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.05,0.06 0.06,0.06,0.07,0.08,0.08 0.09,0.09,0.10,0.10), mean=0.0706, stddev=0.0111], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.05,0.08,0.15,0.20 0.24,0.28,0.30,0.33), mean=0.105, stddev=0.0661], bias-{mean,stddev}=7.101e-05,0.003626, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=4.96e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.04,0.03,0.04,0.08 0.12,0.17,0.26,0.35,0.39 0.43,0.45,0.49,0.68), mean=0.259, stddev=0.105], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.12,0.04,0.09,0.17 0.23,0.29,0.42,0.53,0.59 0.64,0.69,0.72,0.86), mean=0.411, stddev=0.143]
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=95.8139, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.4,-5.8,-5.4,-4.5 -3.4,-2.4,-0.02,2.3,3.6 4.3,5.3,6.2,13), mean=0.0372, stddev=2.76], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.60,1.6 2.0,2.3,2.7,3.5), mean=0.339, stddev=0.715]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.0001614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001765, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-07,5e-07,1e-06 5e-06,0.0001,0.03,0.06,0.08 0.09,0.10,0.10,0.12), mean=0.0334, stddev=0.0301], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.04,0.08,0.09,0.10 0.10,0.11,0.11,0.13), mean=0.0757, stddev=0.0274], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,6e-08,6e-08,9e-08 2e-05,0.02,0.04,0.09,0.13 0.18,0.24,0.26,0.30), mean=0.0567, stddev=0.0572], bias-{mean,stddev}=5.063e-05,0.0008194, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.0001614, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0006861, w_fc-rms=0.0006136, w_oc-rms=0.001178, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000113627, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.28,0.31,0.36 0.40,0.44,0.50,0.54,0.60 0.67,0.74,0.77,0.97), mean=0.501, stddev=0.0881], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.13,0.16 0.18,0.21,0.25,0.25,0.27 0.29,0.31,0.32,0.35), mean=0.236, stddev=0.0394] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000113627, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.29,0.33,0.38 0.42,0.47,0.50,0.54,0.58 0.64,0.68,0.70,0.94), mean=0.503, stddev=0.0743], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.11,0.14,0.17 0.20,0.22,0.25,0.26,0.28 0.31,0.33,0.35,0.42), mean=0.243, stddev=0.0397] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0880474, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.2,-1.1,-0.90 -0.64,-0.33,0.002,0.37,0.67 0.93,1.3,1.4,2.1), mean=0.0226, stddev=0.526], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.61,-0.38,-0.24,0.04 0.24,0.49,1.0,1.0,1.2 1.4,1.6,1.7,1.9), mean=0.811, stddev=0.398] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000113627, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.18,0.20,0.27 0.33,0.40,0.50,0.51,0.57 0.62,0.69,0.73,1.2), mean=0.473, stddev=0.106], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.10,0.14 0.17,0.20,0.25,0.25,0.27 0.29,0.32,0.33,0.35), mean=0.231, stddev=0.0474] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000113627, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.78,-0.73,-0.53 -0.37,-0.19,0.001,0.25,0.42 0.55,0.69,0.79,1.2), mean=0.0175, stddev=0.31], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.39,0.43,0.61 0.72,0.81,0.99,1.0,1.0 1.1,1.1,1.2,1.2), mean=0.918, stddev=0.154] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-2.02e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-3054
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.257851
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.0001614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002278, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.07,0.07,0.08), mean=0.0501, stddev=0.0137], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0001,0.0002 0.0003,0.001,0.04,0.05,0.05 0.05,0.06,0.06,0.08), mean=0.0298, stddev=0.0215], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,9e-07,0.07,0.10 0.13,0.14,0.16,0.17), mean=0.0261, stddev=0.0449], bias-{mean,stddev}=0.0001034,0.002232, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.0001614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003544, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.09,0.10,0.11,0.12 0.12,0.13,0.14,0.15), mean=0.0979, stddev=0.0142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.05,0.08,0.10,0.11 0.11,0.12,0.12,0.13), mean=0.0775, stddev=0.0229], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,4e-08,5e-08 7e-08,1e-07,0.001,0.12,0.19 0.24,0.29,0.30,0.34), mean=0.0553, stddev=0.0821], bias-{mean,stddev}=8.138e-05,0.001602, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=115.475, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.0,-3.6,-3.3,-2.5 -1.9,-1.3,-0.16,0.94,1.7 2.3,2.9,3.4,4.0), mean=-0.152, stddev=1.44], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0.32,0.42,0.47,0.64), mean=0.0307, stddev=0.104]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.0001614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002627, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.08 0.09,0.10,0.10,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.103, stddev=0.012], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.05,0.05,0.06,0.07,0.07 0.07,0.08,0.08,0.09), mean=0.0594, stddev=0.00745], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.04,0.07,0.13,0.17 0.21,0.24,0.26,0.29), mean=0.0864, stddev=0.0574], bias-{mean,stddev}=0.0001297,0.002872, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=135.135, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.5,-5.7,-5.2,-4.5 -3.1,-1.6,0.37,2.0,3.0 4.0,4.6,5.0,5.9), mean=0.186, stddev=2.36], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,1.3,1.9 2.3,2.5,2.8,3.9), mean=0.526, stddev=0.823]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.0001614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001875, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.02,0.02,0.03,0.07,0.09 0.10,0.10,0.11,0.12), mean=0.0395, stddev=0.0269], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.06,0.07,0.08,0.10,0.11 0.12,0.13,0.13,0.14), mean=0.0831, stddev=0.0203], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,1e-05 0.01,0.01,0.03,0.09,0.15 0.20,0.26,0.28,0.33), mean=0.0581, stddev=0.0628], bias-{mean,stddev}=4.483e-05,0.0005361, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.0001614, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0008065, w_fc-rms=0.0008056, w_oc-rms=0.002007, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00011613, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.09,0.29,0.35,0.41 0.46,0.53,0.63,0.72,0.78 0.83,0.90,0.92,1.4), mean=0.625, stddev=0.135], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.18,0.10,0.11,0.16 0.17,0.19,0.23,0.27,0.29 0.31,0.33,0.34,0.54), mean=0.231, stddev=0.0511] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00011613, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.32,0.36,0.40 0.46,0.52,0.63,0.74,0.81 0.86,0.91,0.95,1.1), mean=0.632, stddev=0.138], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.04,0.07,0.09,0.12 0.16,0.18,0.23,0.26,0.29 0.30,0.32,0.33,0.45), mean=0.223, stddev=0.0552] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.137042, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-2.5,-2.1,-1.7 -1.3,-0.89,0.02,0.87,1.2 1.7,2.0,2.3,2.9), mean=0.00357, stddev=1.02], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-0.74,-0.55,-0.29 -0.06,0.24,0.72,1.2,1.4 1.6,1.8,2.0,2.8), mean=0.694, stddev=0.576] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00011613, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.31,0.15,0.22,0.29 0.36,0.43,0.59,0.76,0.85 0.91,0.98,1.0,1.4), mean=0.595, stddev=0.202], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.27,0.03,0.07,0.10 0.12,0.16,0.21,0.26,0.29 0.31,0.34,0.36,0.54), mean=0.21, stddev=0.0687] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00011613, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.8,-1.5,-1.3 -0.96,-0.64,-0.002,0.62,0.88 1.2,1.5,1.7,2.1), mean=-0.00524, stddev=0.734], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.72,-0.04,0.08,0.26 0.38,0.54,0.77,1.0,1.1 1.2,1.3,1.3,2.2), mean=0.757, stddev=0.295] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.72e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2562
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.257851
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.0001614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002263, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.07,0.07 0.07,0.08,0.08,0.08), mean=0.0476, stddev=0.0199], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.05,0.08), mean=0.0357, stddev=0.00749], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,2e-07 3e-07,7e-07,0.005,0.07,0.09 0.12,0.14,0.15,0.17), mean=0.0299, stddev=0.0421], bias-{mean,stddev}=0.001034,0.01385, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.0001614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00323, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.03,0.05,0.06,0.07 0.08,0.09,0.10,0.20), mean=0.049, stddev=0.0175], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.08,0.09,0.11,0.19,0.20 0.21,0.21,0.22,0.23), mean=0.139, stddev=0.0501], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,3e-07 4e-07,8e-07,0.003,0.21,0.29 0.34,0.37,0.39,0.43), mean=0.0824, stddev=0.123], bias-{mean,stddev}=-1.279e-10,0.0007246, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.007,0.02,0.02,0.03 0.03,0.04,0.04,0.42), mean=0.0159, stddev=0.0154], oderiv-count=109760

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.90142 tdnn2.affine:3.74776 lstm1.W_all:2.94324 lstm1.lstm_nonlin:0.0574218 lstm1.W_rp:1.22415 tdnn3.affine:2.68839 tdnn4.affine:2.82231 lstm2.W_all:2.05299 lstm2.lstm_nonlin:0.0340983 lstm2.W_rp:0.838556 tdnn5.affine:2.2572 tdnn6.affine:2.36653 lstm3.W_all:2.18037 lstm3.lstm_nonlin:0.0526295 lstm3.W_rp:0.861762 output.affine:2.38885 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.6608 tdnn2.affine:10.647 lstm1.W_all:20.5535 lstm1.lstm_nonlin:2.44675 lstm1.W_rp:15.349 tdnn3.affine:8.42006 tdnn4.affine:7.79527 lstm2.W_all:17.0202 lstm2.lstm_nonlin:1.6757 lstm2.W_rp:14.6381 tdnn5.affine:8.03957 tdnn6.affine:7.69198 lstm3.W_all:24.0849 lstm3.lstm_nonlin:3.05235 lstm3.W_rp:35.3327 output.affine:32.508 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.309256 tdnn2.affine:0.353765 lstm1.W_all:0.143228 lstm1.lstm_nonlin:0.0234317 lstm1.W_rp:0.0797206 tdnn3.affine:0.319738 tdnn4.affine:0.362199 lstm2.W_all:0.120596 lstm2.lstm_nonlin:0.0204096 lstm2.W_rp:0.0572706 tdnn5.affine:0.281264 tdnn6.affine:0.30783 lstm3.W_all:0.0904999 lstm3.lstm_nonlin:0.0172448 lstm3.W_rp:0.0243538 output.affine:0.0734169 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:11:46 KST 2020, elapsed time 1 seconds
