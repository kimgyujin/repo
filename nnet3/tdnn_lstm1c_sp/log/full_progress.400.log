# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/399.mdl exp/nnet3/tdnn_lstm1c_sp/400.mdl 
# Started at Thu Jul 30 12:39:37 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/399.mdl exp/nnet3/tdnn_lstm1c_sp/400.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00010353, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008245, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.002,0.003 0.004,0.007,0.15,0.18,0.19 0.21,0.23,0.25,0.33), mean=0.121, stddev=0.0763], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.17,0.23,0.27 0.34,0.39,0.41,0.52), mean=0.163, stddev=0.093], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.008,0.01 0.01,0.02,0.09,0.23,0.33 0.40,0.49,0.53,0.62), mean=0.135, stddev=0.131], bias-{mean,stddev}=0.0001227,0.01114, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.33,0.67,0.87 1.0,1.4,1.5,1.9), mean=0.372, stddev=0.377], oderiv-count=70656
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=350.566, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-1.4,-1.4,-0.88 -0.53,-0.09,0.02,0.61,0.90 1.2,1.5,1.7,2.4), mean=0.155, stddev=0.604], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0.15 0.28,0.38,0.44,0.63), mean=0.0326, stddev=0.0974]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00010353, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003307, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.11 0.12,0.12,0.13,0.14,0.14 0.15,0.15,0.16,0.18), mean=0.13, stddev=0.0112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0007,0.001,0.001 0.002,0.004,0.08,0.10,0.10 0.11,0.12,0.12,0.15), mean=0.0638, stddev=0.0403], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.03,0.07,0.16,0.23 0.29,0.34,0.37,0.43), mean=0.0984, stddev=0.0859], bias-{mean,stddev}=-0.0001629,0.005621, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.08,0.12,0.14 0.15,0.17,0.19,0.25), mean=0.0756, stddev=0.0527], oderiv-count=22304
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=350.566, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.1,-2.7,-2.3,-1.5 -0.84,-0.30,0.57,1.3,1.9 2.2,2.8,3.1,4.9), mean=0.52, stddev=1.13], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.92,1.2 1.4,1.7,1.9,2.7), mean=0.376, stddev=0.551]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00010353, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001953, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-09,5e-08,1e-07,7e-07 2e-05,0.02,0.04,0.07,0.08 0.09,0.10,0.11,0.19), mean=0.0414, stddev=0.0277], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.04,0.09,0.11,0.11 0.12,0.13,0.14,0.15), mean=0.0834, stddev=0.0312], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,7e-08,9e-08 2e-07,0.02,0.04,0.10,0.15 0.20,0.26,0.28,0.37), mean=0.0632, stddev=0.0628], bias-{mean,stddev}=2.56e-05,0.0006828, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00010353, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0008953, w_fc-rms=0.0007258, w_oc-rms=0.001762, count=6.93e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000275829, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.48,0.02,0.08,0.15 0.28,0.37,0.50,0.69,0.84 0.98,1.1,1.2,1.4), mean=0.539, stddev=0.236], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.28,-0.11,-0.05,-0.002 0.06,0.14,0.25,0.31,0.41 0.48,0.56,0.67,0.95), mean=0.235, stddev=0.149] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000275829, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.18,0.05,0.15,0.30 0.42,0.50,0.58,0.79,0.92 1.0,1.1,1.2,1.7), mean=0.626, stddev=0.222], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.28,-0.04,0.005,0.06 0.11,0.17,0.25,0.28,0.34 0.38,0.47,0.54,0.63), mean=0.233, stddev=0.1] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00233036, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.5,-3.6,-3.3,-2.6 -1.9,-1.0,0.0004,1.1,2.0 2.6,3.2,3.7,4.4), mean=0.0322, stddev=1.49], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.2,-2.5,-2.0,-1.5 -0.94,-0.45,0.75,1.3,2.0 2.6,3.6,4.3,7.9), mean=0.607, stddev=1.32] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000275829, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.28,-0.15,-0.05,0.07 0.21,0.38,0.50,0.74,0.92 1.0,1.2,1.3,1.5), mean=0.548, stddev=0.277], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.45,-0.30,-0.21,-0.08 -0.007,0.10,0.25,0.31,0.42 0.51,0.59,0.67,1.2), mean=0.22, stddev=0.182] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000275829, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-2.4,-2.3,-1.7 -1.2,-0.64,0.001,0.79,1.3 1.6,2.1,2.6,5.1), mean=0.0518, stddev=0.991], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.31,-0.08,0.19 0.34,0.59,1.0,1.3,1.5 1.8,2.0,2.4,3.2), mean=0.962, stddev=0.507] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=9.66e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0.000155215, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00517598, count-zeroing-boundaries=1449
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.142149
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00010353, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002771, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.06,0.08,0.08 0.09,0.09,0.10,0.10), mean=0.0601, stddev=0.0196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,6e-05,7e-05,0.0001 0.0006,0.03,0.04,0.05,0.06 0.07,0.07,0.07,0.10), mean=0.0399, stddev=0.0201], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.07,0.12 0.16,0.19,0.21,0.28), mean=0.0285, stddev=0.0564], bias-{mean,stddev}=-4.811e-05,0.003209, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00010353, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003265, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.06,0.06,0.07 0.07,0.08,0.09,0.10,0.11 0.12,0.12,0.13,0.15), mean=0.0899, stddev=0.0152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.05,0.07,0.10,0.10 0.11,0.11,0.11,0.12), mean=0.0705, stddev=0.024], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-09,3e-08,3e-08,4e-08 5e-08,8e-08,1e-05,0.10,0.17 0.22,0.27,0.29,0.35), mean=0.0468, stddev=0.0782], bias-{mean,stddev}=-0.00017,0.002249, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.55e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.02,0.001,0.005,0.02 0.03,0.04,0.08,0.11,0.13 0.15,0.16,0.17,0.22), mean=0.0787, stddev=0.0398], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,0.05,0.08,0.12 0.21,0.30,0.46,0.60,0.67 0.72,0.76,0.78,0.87), mean=0.448, stddev=0.174]
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=350.566, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.3,-1.1,-0.84 -0.66,-0.40,0.08,0.53,0.72 0.97,1.2,1.3,1.9), mean=0.0613, stddev=0.563], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.15,0.24 0.31,0.35,0.38,0.63), mean=0.059, stddev=0.11]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00010353, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00236, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.08 0.08,0.09,0.09,0.10,0.10 0.11,0.11,0.11,0.11), mean=0.0929, stddev=0.00718], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.04,0.04,0.04 0.04,0.05,0.05,0.06,0.06 0.07,0.07,0.07,0.08), mean=0.0533, stddev=0.00748], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.06,0.11,0.15 0.19,0.23,0.24,0.29), mean=0.0769, stddev=0.0527], bias-{mean,stddev}=2.098e-05,0.002521, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.84e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.17,0.18,0.18 0.20,0.21,0.24,0.28,0.30 0.31,0.34,0.35,0.40), mean=0.247, stddev=0.0404], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.31,0.32,0.34 0.36,0.38,0.42,0.46,0.48 0.50,0.52,0.53,0.56), mean=0.422, stddev=0.0487], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.01 0.02,0.03,0.04,0.05,0.06 0.06,0.06,0.07,0.07), mean=0.0404, stddev=0.0144], oderiv-count=68352
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=350.566, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.6,-1.9,-1.7,-1.3 -0.93,-0.49,0.25,0.89,1.2 1.5,1.8,2.2,3.6), mean=0.206, stddev=0.861], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.38,1.0,1.3 1.4,1.5,1.6,1.7), mean=0.496, stddev=0.523]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00010353, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001326, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,2e-07,4e-07,1e-06 5e-06,9e-05,0.03,0.04,0.06 0.07,0.07,0.08,0.10), mean=0.0252, stddev=0.0225], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.03,0.06,0.07,0.08 0.08,0.08,0.09,0.09), mean=0.0569, stddev=0.0204], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,6e-08,8e-08 2e-05,0.01,0.03,0.06,0.10 0.14,0.18,0.21,0.24), mean=0.0415, stddev=0.044], bias-{mean,stddev}=4.308e-05,0.000659, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00010353, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0004948, w_fc-rms=0.0004524, w_oc-rms=0.0008634, count=6.73e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000261861, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.14,0.19,0.27 0.34,0.42,0.50,0.61,0.72 0.81,0.91,0.98,1.2), mean=0.516, stddev=0.154], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.19,-0.005,0.01,0.06 0.11,0.17,0.25,0.25,0.31 0.34,0.40,0.41,0.64), mean=0.224, stddev=0.0856] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000261861, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.07,0.23,0.27,0.32 0.41,0.49,0.50,0.63,0.72 0.80,0.89,0.97,1.3), mean=0.542, stddev=0.139], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.07,0.006,0.03,0.08 0.13,0.18,0.25,0.25,0.29 0.32,0.36,0.38,0.44), mean=0.226, stddev=0.0717] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000261861, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.4,-2.7,-2.1,-1.6 -1.3,-0.57,0.007,0.75,1.4 1.8,2.4,2.5,3.1), mean=0.0737, stddev=0.992], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.0,-1.7,-1.2,-0.68 -0.33,0.13,0.99,1.1,1.6 2.0,2.5,2.8,4.3), mean=0.764, stddev=0.838] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000261861, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.13,0.09,0.13,0.22 0.30,0.42,0.50,0.63,0.72 0.81,0.92,1.0,1.2), mean=0.516, stddev=0.175], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.24,-0.06,-0.04,0.03 0.11,0.17,0.25,0.28,0.33 0.38,0.43,0.46,0.61), mean=0.23, stddev=0.0998] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000261861, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-1.6,-1.5,-1.2 -0.89,-0.38,0.002,0.47,0.91 1.3,1.7,1.9,2.7), mean=0.0414, stddev=0.707], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.20,0.02,0.08,0.28 0.51,0.77,1.0,1.2,1.4 1.6,1.8,1.9,2.5), mean=0.983, stddev=0.371] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=8.9e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=-0.000168615, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=1339
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.142149
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00010353, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001849, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.06,0.06), mean=0.0406, stddev=0.0112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0001,0.0002 0.0003,0.001,0.03,0.04,0.04 0.04,0.05,0.05,0.06), mean=0.0242, stddev=0.0174], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,1e-06,0.05,0.08 0.10,0.12,0.13,0.14), mean=0.0213, stddev=0.0364], bias-{mean,stddev}=2.611e-05,0.002215, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00010353, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002698, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.06,0.07,0.08,0.09 0.10,0.10,0.11,0.12), mean=0.0744, stddev=0.0122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.06,0.08,0.08 0.08,0.09,0.09,0.10), mean=0.0591, stddev=0.0171], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,3e-08,4e-08 6e-08,1e-07,0.001,0.08,0.14 0.19,0.22,0.24,0.28), mean=0.0412, stddev=0.0631], bias-{mean,stddev}=-6.401e-06,0.001312, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=350.566, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-1.1,-0.99,-0.77 -0.55,-0.36,0.03,0.37,0.56 0.72,0.97,1.0,1.2), mean=0.0118, stddev=0.451], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.09,0.22 0.25,0.30,0.31,0.41), mean=0.0445, stddev=0.0895]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00010353, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002037, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.07,0.07,0.08,0.09,0.09 0.09,0.10,0.10,0.11), mean=0.08, stddev=0.00889], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.04,0.05,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0461, stddev=0.00601], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.03,0.05,0.10,0.13 0.17,0.20,0.21,0.25), mean=0.0651, stddev=0.0473], bias-{mean,stddev}=-0.0001999,0.002117, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.008 0.02,0.02,0.04,0.05,0.05 0.05,0.06,0.06,0.08), mean=0.0347, stddev=0.0135], oderiv-count=56480
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=350.566, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-2.0,-1.8,-1.4 -0.96,-0.52,0.27,0.92,1.3 1.5,1.8,1.9,2.2), mean=0.182, stddev=0.872], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.56,1.3,1.5 1.7,2.0,2.2,3.0), mean=0.637, stddev=0.648]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00010353, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001663, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.009,0.01 0.01,0.02,0.03,0.06,0.08 0.09,0.09,0.10,0.11), mean=0.035, stddev=0.0239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.05,0.06,0.09,0.11 0.12,0.13,0.13,0.14), mean=0.0719, stddev=0.0242], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,8e-06 0.008,0.01,0.03,0.07,0.13 0.19,0.24,0.25,0.30), mean=0.0493, stddev=0.0576], bias-{mean,stddev}=-4.543e-05,0.0004573, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00010353, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0006714, w_fc-rms=0.0007985, w_oc-rms=0.001533, count=6.53e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000247075, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,0.11,0.20,0.41 0.52,0.74,0.94,1.2,1.3 1.5,1.6,1.7,2.2), mean=0.94, stddev=0.328], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.22,-0.14,-0.12,-0.04 -0.009,0.03,0.12,0.22,0.27 0.32,0.40,0.45,1.1), mean=0.13, stddev=0.124] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000247075, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.40,-0.05,0.09,0.20 0.34,0.49,0.77,1.1,1.3 1.4,1.5,1.6,1.9), mean=0.794, stddev=0.367], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.26,-0.18,-0.16,-0.12 -0.06,-0.002,0.11,0.20,0.26 0.30,0.35,0.36,0.46), mean=0.104, stddev=0.123] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.081365, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-6.8,-6.1,-4.3 -3.2,-1.9,0.10,2.1,3.4 4.1,5.7,6.4,11), mean=0.0724, stddev=2.66], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.8,-3.1,-2.4,-1.6 -1.1,-0.49,0.49,1.4,2.1 2.6,3.2,3.7,5.4), mean=0.496, stddev=1.31] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000247075, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.37,-0.24,-0.07 0.15,0.37,0.77,1.2,1.4 1.6,1.9,2.0,2.4), mean=0.783, stddev=0.51], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.44,-0.21,-0.15,-0.09 -0.04,0.03,0.15,0.29,0.35 0.40,0.49,0.57,1.2), mean=0.152, stddev=0.163] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.149335, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.6,-5.7,-4.7,-3.4 -2.4,-1.5,0.10,1.6,2.6 3.3,4.2,5.0,8.8), mean=0.0617, stddev=2.06], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.5,-1.1,-0.72 -0.31,0.05,0.64,1.3,1.6 2.0,2.1,2.4,5.3), mean=0.647, stddev=0.798] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=8.13e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=-6.15157e-05, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=1216
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.142149
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00010353, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001952, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.06,0.06 0.06,0.07,0.07,0.07), mean=0.0403, stddev=0.0189], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.03,0.04,0.04 0.04,0.04,0.05,0.07), mean=0.0306, stddev=0.00719], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-07,2e-07,2e-07 3e-07,6e-07,0.005,0.05,0.08 0.11,0.12,0.13,0.16), mean=0.0257, stddev=0.0364], bias-{mean,stddev}=0.0004523,0.007851, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00010353, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002398, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.01,0.02 0.02,0.02,0.03,0.05,0.05 0.06,0.07,0.08,0.16), mean=0.036, stddev=0.014], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.06,0.06,0.08,0.14,0.15 0.15,0.16,0.16,0.16), mean=0.103, stddev=0.0381], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,3e-07,3e-07 3e-07,6e-07,0.002,0.16,0.22 0.25,0.27,0.28,0.31), mean=0.0617, stddev=0.091], bias-{mean,stddev}=-7.945e-11,0.0005949, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.26645 tdnn2.affine:2.98162 lstm1.W_all:2.27163 lstm1.lstm_nonlin:0.0480099 lstm1.W_rp:1.02016 tdnn3.affine:2.07977 tdnn4.affine:2.12632 lstm2.W_all:1.54268 lstm2.lstm_nonlin:0.0249278 lstm2.W_rp:0.680769 tdnn5.affine:1.71878 tdnn6.affine:1.83548 lstm3.W_all:1.93329 lstm3.lstm_nonlin:0.0422887 lstm3.W_rp:0.728907 output.affine:1.77365 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.927 tdnn2.affine:10.5538 lstm1.W_all:20.4632 lstm1.lstm_nonlin:1.98835 lstm1.W_rp:15.0626 tdnn3.affine:8.00467 tdnn4.affine:7.45741 lstm2.W_all:16.7241 lstm2.lstm_nonlin:1.3819 lstm2.W_rp:14.1292 tdnn5.affine:7.52957 tdnn6.affine:7.46909 lstm3.W_all:24.1106 lstm3.lstm_nonlin:3.09767 lstm3.W_rp:33.8399 output.affine:31.127 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.252446 tdnn2.affine:0.281934 lstm1.W_all:0.110999 lstm1.lstm_nonlin:0.0240196 lstm1.W_rp:0.0676903 tdnn3.affine:0.258955 tdnn4.affine:0.284438 lstm2.W_all:0.0922161 lstm2.lstm_nonlin:0.0179704 lstm2.W_rp:0.0481742 tdnn5.affine:0.227558 tdnn6.affine:0.245167 lstm3.W_all:0.0801588 lstm3.lstm_nonlin:0.0136229 lstm3.W_rp:0.0215132 output.affine:0.0569144 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:39:38 KST 2020, elapsed time 1 seconds
