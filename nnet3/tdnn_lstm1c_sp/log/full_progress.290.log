# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/289.mdl exp/nnet3/tdnn_lstm1c_sp/290.mdl 
# Started at Thu Jul 30 11:55:50 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/289.mdl exp/nnet3/tdnn_lstm1c_sp/290.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000208016, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01118, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.007 0.009,0.02,0.20,0.24,0.26 0.29,0.32,0.33,0.40), mean=0.167, stddev=0.0974], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.08,0.09,0.24,0.32,0.37 0.46,0.50,0.54,0.66), mean=0.225, stddev=0.12], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.04,0.13,0.33,0.45 0.54,0.64,0.67,0.78), mean=0.189, stddev=0.171], bias-{mean,stddev}=0.0002394,0.01457, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=8418.64, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.12,-0.03,-0.02,-0.006 -0.001,-2e-05,0.05,0.11,0.15 0.18,0.21,0.23,0.30), mean=0.0597, stddev=0.0649], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.08,0.13,0.14 0.16,0.18,0.18,0.20), mean=0.069, stddev=0.0596]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000208016, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004862, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.16,0.17 0.17,0.18,0.19,0.21,0.21 0.22,0.23,0.23,0.24), mean=0.191, stddev=0.0169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.004 0.005,0.01,0.12,0.14,0.15 0.16,0.17,0.18,0.21), mean=0.096, stddev=0.0555], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.05,0.11,0.24,0.33 0.41,0.49,0.52,0.56), mean=0.149, stddev=0.121], bias-{mean,stddev}=-0.0004823,0.008406, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.07,0.08 0.08,0.09,0.10,0.12), mean=0.0375, stddev=0.0303], oderiv-count=39072
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=8300.67, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.16,0.18,0.20 0.23,0.26,0.32,0.38,0.42 0.45,0.49,0.52,0.61), mean=0.322, stddev=0.0763], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.14,0.19,0.30 0.38,0.44,0.56,0.67,0.74 0.79,0.86,0.89,1.0), mean=0.556, stddev=0.15]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000208016, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002992, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,2e-07,4e-07,3e-06 9e-05,0.02,0.06,0.10,0.12 0.13,0.15,0.16,0.18), mean=0.0632, stddev=0.0427], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.06,0.15,0.16,0.17 0.18,0.18,0.19,0.22), mean=0.128, stddev=0.0467], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,8e-08,9e-08,1e-07 2e-07,0.03,0.07,0.15,0.23 0.30,0.39,0.42,0.48), mean=0.0989, stddev=0.094], bias-{mean,stddev}=-8.558e-05,0.0009458, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000208016, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001436, w_fc-rms=0.001273, w_oc-rms=0.002877, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.20474e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.22,-0.09,-0.04,0.07 0.18,0.32,0.50,0.69,0.84 0.93,1.1,1.2,1.5), mean=0.509, stddev=0.258], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.23,-0.07,-0.02,0.03 0.09,0.16,0.25,0.29,0.36 0.40,0.45,0.49,0.70), mean=0.231, stddev=0.109] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.20474e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,0.08,0.19,0.30 0.38,0.46,0.54,0.72,0.84 0.93,1.2,1.3,1.8), mean=0.589, stddev=0.217], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.24,-0.02,0.03,0.09 0.13,0.18,0.25,0.29,0.32 0.35,0.42,0.44,0.54), mean=0.233, stddev=0.0852] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.635746, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.8,-3.0,-2.8,-2.0 -1.6,-0.97,0.01,0.99,1.8 2.3,2.9,3.3,4.5), mean=0.0941, stddev=1.28], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-1.6,-1.3,-0.80 -0.47,-0.06,0.81,1.2,1.7 2.1,2.4,2.6,4.1), mean=0.665, stddev=0.878] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.20474e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.35,-0.29,-0.15,0.03 0.13,0.28,0.50,0.64,0.78 0.90,1.1,1.3,1.6), mean=0.48, stddev=0.272], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.25,-0.08,-0.05,0.01 0.07,0.14,0.25,0.30,0.38 0.44,0.48,0.51,0.72), mean=0.23, stddev=0.12] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-2.20474e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.9,-1.4,-1.3,-1.1 -0.81,-0.42,0.002,0.51,0.85 1.1,1.5,1.6,2.2), mean=0.0448, stddev=0.642], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,0.12,0.31,0.54 0.62,0.79,1.0,1.2,1.3 1.5,1.6,1.7,2.0), mean=0.986, stddev=0.292] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.2e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1795
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.260055
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000208016, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003847, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.05,0.08,0.11,0.12 0.12,0.13,0.13,0.15), mean=0.0819, stddev=0.0315], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0002,0.0004 0.002,0.04,0.06,0.08,0.08 0.09,0.09,0.10,0.11), mean=0.0557, stddev=0.0272], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.06,0.18 0.23,0.26,0.28,0.33), mean=0.0382, stddev=0.079], bias-{mean,stddev}=-0.000215,0.00414, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000208016, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004878, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.10,0.10,0.10 0.11,0.12,0.13,0.15,0.16 0.17,0.18,0.19,0.23), mean=0.134, stddev=0.0229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.06,0.10,0.15,0.16 0.16,0.17,0.17,0.19), mean=0.103, stddev=0.0425], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,3e-08,4e-08,5e-08 7e-08,1e-07,1e-05,0.16,0.27 0.34,0.40,0.43,0.50), mean=0.0681, stddev=0.118], bias-{mean,stddev}=0.0006199,0.002569, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.88e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.10,-0.04,-0.03,-0.005 0.02,0.05,0.10,0.16,0.20 0.23,0.27,0.29,0.31), mean=0.105, stddev=0.069], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.53,-0.23,-0.12,0.07 0.17,0.30,0.51,0.70,0.81 0.89,0.97,1.0,1.4), mean=0.495, stddev=0.258], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.09,0.14,0.18 0.23,0.28,0.33,0.47), mean=0.0874, stddev=0.0787], oderiv-count=87104
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7946.78, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.03,-0.002,0.003,0.02 0.04,0.06,0.10,0.14,0.17 0.18,0.20,0.20,0.24), mean=0.104, stddev=0.0484], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.07 0.09,0.12,0.15,0.18,0.19 0.21,0.23,0.23,0.25), mean=0.147, stddev=0.044]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000208016, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003724, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.13 0.13,0.14,0.15,0.15,0.16 0.17,0.17,0.17,0.19), mean=0.147, stddev=0.0106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.06,0.06,0.07 0.07,0.07,0.08,0.09,0.10 0.11,0.11,0.12,0.13), mean=0.0839, stddev=0.0135], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.10,0.18,0.24 0.29,0.33,0.36,0.40), mean=0.125, stddev=0.0779], bias-{mean,stddev}=0.0005353,0.00399, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.63e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.15,0.18 0.21,0.24,0.31,0.37,0.41 0.44,0.48,0.52,0.56), mean=0.307, stddev=0.0796], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.15,0.19,0.26 0.29,0.34,0.43,0.51,0.56 0.60,0.65,0.67,0.73), mean=0.428, stddev=0.106], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.04,0.05 0.05,0.06,0.06,0.06), mean=0.0225, stddev=0.0187], oderiv-count=54752
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7592.88, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.23,0.25,0.30,0.34,0.37 0.40,0.43,0.45,0.51), mean=0.298, stddev=0.0571], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.34,0.35,0.39 0.43,0.47,0.54,0.63,0.68 0.73,0.80,0.87,0.95), mean=0.555, stddev=0.107]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000208016, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002143, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,2e-07,3e-07,9e-07 3e-06,7e-05,0.04,0.07,0.09 0.11,0.12,0.12,0.14), mean=0.0405, stddev=0.0367], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.06,0.10,0.11,0.12 0.13,0.13,0.14,0.15), mean=0.0924, stddev=0.0319], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,6e-08,7e-08,1e-07 1e-05,0.02,0.05,0.11,0.16 0.22,0.28,0.31,0.36), mean=0.0695, stddev=0.0687], bias-{mean,stddev}=-9.198e-05,0.001002, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000208016, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001011, w_fc-rms=0.0008035, w_oc-rms=0.001369, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.20544e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.10,0.14,0.19,0.27 0.34,0.45,0.50,0.63,0.73 0.83,0.93,1.0,1.2), mean=0.528, stddev=0.164], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.12,0.03,0.05,0.09 0.15,0.20,0.25,0.28,0.32 0.36,0.39,0.42,0.58), mean=0.243, stddev=0.0742] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.20544e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.23,0.29,0.37 0.43,0.50,0.50,0.67,0.80 0.91,1.1,1.1,1.3), mean=0.571, stddev=0.169], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.02,0.01,0.06,0.10 0.15,0.20,0.25,0.25,0.28 0.30,0.34,0.37,0.44), mean=0.23, stddev=0.0602] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0915353, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.5,-2.5,-2.1,-1.3 -0.99,-0.47,0.007,0.71,1.2 1.6,2.2,2.4,4.4), mean=0.0894, stddev=0.917], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.2,-0.99,-0.52 -0.26,0.21,0.99,1.0,1.4 1.7,2.0,2.1,3.4), mean=0.723, stddev=0.67] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.20544e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.51,-0.06,0.09,0.22 0.30,0.40,0.50,0.60,0.68 0.79,0.86,0.95,1.2), mean=0.498, stddev=0.173], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.12,0.02,0.05,0.10 0.14,0.19,0.25,0.27,0.33 0.36,0.41,0.45,0.62), mean=0.24, stddev=0.0783] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-2.20544e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.1,-0.97,-0.77 -0.53,-0.21,0.001,0.32,0.60 0.87,1.1,1.2,2.1), mean=0.0378, stddev=0.468], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.13,0.28,0.42,0.57 0.68,0.84,1.0,1.1,1.2 1.3,1.4,1.4,1.8), mean=0.963, stddev=0.217] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.04e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1575
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.260055
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000208016, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002713, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.06,0.08,0.08 0.08,0.09,0.09,0.09), mean=0.0593, stddev=0.0176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,9e-05,0.0001,0.0002 0.0003,0.0009,0.05,0.06,0.06 0.07,0.07,0.07,0.08), mean=0.0352, stddev=0.026], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,1e-06,0.08,0.12 0.15,0.17,0.18,0.21), mean=0.0306, stddev=0.0538], bias-{mean,stddev}=0.0002043,0.002794, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000208016, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.10,0.11,0.13,0.14 0.15,0.15,0.16,0.18), mean=0.113, stddev=0.0164], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.06,0.09,0.12,0.12 0.13,0.14,0.14,0.15), mean=0.0895, stddev=0.0274], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 8e-08,1e-07,0.001,0.14,0.22 0.28,0.32,0.35,0.41), mean=0.0633, stddev=0.0956], bias-{mean,stddev}=2.407e-05,0.001754, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7238.99, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.02,0.004,0.01,0.02 0.03,0.04,0.07,0.11,0.12 0.14,0.16,0.17,0.25), mean=0.0753, stddev=0.0399], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.02 0.06,0.09,0.12,0.14,0.16 0.17,0.19,0.19,0.26), mean=0.113, stddev=0.0412]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000208016, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003109, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.11,0.11,0.12,0.13,0.14 0.14,0.15,0.15,0.16), mean=0.122, stddev=0.0128], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.06,0.07,0.08,0.08 0.09,0.09,0.09,0.11), mean=0.0703, stddev=0.00903], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.05,0.08,0.15,0.20 0.25,0.29,0.30,0.34), mean=0.103, stddev=0.0667], bias-{mean,stddev}=-9.581e-05,0.003425, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.86e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.35,-0.26,-0.18,-0.04 0.09,0.19,0.42,0.67,0.80 0.93,1.1,1.2,1.4), mean=0.436, stddev=0.294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.37,-0.33,-0.11 -0.007,0.13,0.42,0.68,0.83 0.96,1.1,1.1,1.3), mean=0.416, stddev=0.333]
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=6885.09, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,0.07,0.12,0.17 0.20,0.24,0.30,0.35,0.37 0.39,0.41,0.44,0.52), mean=0.292, stddev=0.0695], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.28 0.37,0.46,0.58,0.68,0.75 0.79,0.87,0.92,1.0), mean=0.563, stddev=0.164]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000208016, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002302, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.02,0.04,0.08,0.11 0.12,0.12,0.13,0.16), mean=0.0493, stddev=0.0319], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.08,0.10,0.13,0.14 0.15,0.15,0.16,0.17), mean=0.102, stddev=0.0233], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,4e-07,2e-05 0.01,0.02,0.04,0.11,0.18 0.25,0.31,0.34,0.38), mean=0.0724, stddev=0.076], bias-{mean,stddev}=0.0001983,0.0007045, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000208016, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.00132, w_fc-rms=0.001141, w_oc-rms=0.002796, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.19772e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.34,0.02,0.15,0.26 0.39,0.53,0.75,0.95,1.1 1.2,1.3,1.5,3.1), mean=0.75, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.17,-0.07,-0.01 0.04,0.08,0.17,0.25,0.29 0.33,0.36,0.37,0.47), mean=0.163, stddev=0.113] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.19772e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.49,0.11,0.14,0.33 0.42,0.57,0.77,1.0,1.1 1.2,1.3,1.4,1.6), mean=0.779, stddev=0.281], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.37,-0.13,-0.04,-0.01 0.03,0.09,0.17,0.26,0.30 0.34,0.37,0.40,0.62), mean=0.171, stddev=0.108] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.544381, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.4,-5.5,-5.0,-3.5 -2.7,-1.7,-0.05,1.8,2.7 3.5,4.3,5.6,19), mean=0.0629, stddev=2.32], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.5,-1.4,-0.82 -0.56,-0.21,0.66,1.5,1.9 2.3,2.8,3.0,4.0), mean=0.65, stddev=0.98] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.19772e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.33,-0.20,-0.03 0.10,0.30,0.64,0.92,1.1 1.3,1.6,1.7,3.1), mean=0.64, stddev=0.428], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.17,-0.13,-0.04 0.03,0.10,0.20,0.28,0.34 0.38,0.42,0.45,0.92), mean=0.189, stddev=0.138] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-2.19772e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.7,-3.9,-3.5,-2.4 -1.8,-1.1,0.04,1.2,1.9 2.3,3.2,3.4,13), mean=0.0414, stddev=1.59], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-0.28,-0.04,0.20 0.36,0.58,0.99,1.4,1.6 1.8,2.0,2.1,2.4), mean=0.983, stddev=0.505] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-8.9e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1323
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.260055
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000208016, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002956, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.05,0.09,0.09 0.09,0.10,0.10,0.10), mean=0.0626, stddev=0.025], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.12), mean=0.0468, stddev=0.00917], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 4e-07,1e-06,0.007,0.09,0.13 0.16,0.18,0.19,0.22), mean=0.0396, stddev=0.0545], bias-{mean,stddev}=-0.0008525,0.01911, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000208016, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003938, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.04,0.06,0.08,0.09 0.10,0.11,0.12,0.19), mean=0.0599, stddev=0.021], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.10 0.10,0.11,0.14,0.23,0.24 0.25,0.25,0.26,0.27), mean=0.171, stddev=0.0585], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,4e-07 5e-07,1e-06,0.005,0.26,0.35 0.41,0.45,0.47,0.53), mean=0.101, stddev=0.15], bias-{mean,stddev}=1.169e-10,0.0009078, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.04,0.05 0.06,0.08,0.09,0.30), mean=0.0222, stddev=0.025], oderiv-count=13120

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.42821 tdnn2.affine:4.38321 lstm1.W_all:3.47949 lstm1.lstm_nonlin:0.0788515 lstm1.W_rp:1.416 tdnn3.affine:3.10709 tdnn4.affine:3.35554 lstm2.W_all:2.49278 lstm2.lstm_nonlin:0.042922 lstm2.W_rp:0.998641 tdnn5.affine:2.61503 tdnn6.affine:2.80106 lstm3.W_all:2.67685 lstm3.lstm_nonlin:0.0751516 lstm3.W_rp:1.13001 output.affine:2.91309 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8635 tdnn2.affine:10.987 lstm1.W_all:21.1385 lstm1.lstm_nonlin:2.00257 lstm1.W_rp:15.5531 tdnn3.affine:8.58191 tdnn4.affine:8.16511 lstm2.W_all:17.5913 lstm2.lstm_nonlin:1.31002 lstm2.W_rp:14.9344 tdnn5.affine:8.30776 tdnn6.affine:8.07401 lstm3.W_all:25.001 lstm3.lstm_nonlin:3.08853 lstm3.W_rp:34.4265 output.affine:32.7371 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.342959 tdnn2.affine:0.39732 lstm1.W_all:0.164299 lstm1.lstm_nonlin:0.0396232 lstm1.W_rp:0.0909338 tdnn3.affine:0.361386 tdnn4.affine:0.409605 lstm2.W_all:0.141416 lstm2.lstm_nonlin:0.0329669 lstm2.W_rp:0.0668488 tdnn5.affine:0.315291 tdnn6.affine:0.346787 lstm3.W_all:0.106881 lstm3.lstm_nonlin:0.0243949 lstm3.W_rp:0.0328957 output.affine:0.0890509 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:55:51 KST 2020, elapsed time 1 seconds
