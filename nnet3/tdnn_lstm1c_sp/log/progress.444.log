# nnet3-info exp/nnet3/tdnn_lstm1c_sp/444.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/443.mdl exp/nnet3/tdnn_lstm1c_sp/444.mdl 
# Started at Thu Jul 30 12:57:11 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/444.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=7.78214e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03252, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.007 0.009,0.02,0.57,0.73,0.80 0.87,0.95,0.99,1.3), mean=0.471, stddev=0.31], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.19,0.24,0.69,0.93,1.1 1.3,1.4,1.4,1.4), mean=0.649, stddev=0.358], bias-{mean,stddev}=-0.007913,0.06116, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0.166628, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,2e-05,3e-05,4e-05 6e-05,0.0002,0.04,0.09,0.11 0.12,0.13,0.15,0.18), mean=0.0433, stddev=0.0439], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.02,0.03 0.05,0.07,0.36,0.60,0.71 0.79,0.87,0.90,0.98), mean=0.343, stddev=0.265], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.009,0.01 0.02,0.05,0.42,0.60,0.74 0.87,0.95,1.0,1.8), mean=0.402, stddev=0.283], oderiv-count=1.26368e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33080.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,2e-05,2e-05,4e-05 6e-05,0.0002,0.03,0.08,0.10 0.12,0.14,0.15,0.18), mean=0.0416, stddev=0.0429], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.0001,0.0002,0.0002 0.0003,0.0009,0.07,0.11,0.12 0.13,0.14,0.14,0.16), mean=0.0582, stddev=0.0482]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.78214e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01145, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.34,0.35 0.37,0.39,0.44,0.50,0.54 0.58,0.62,0.64,0.72), mean=0.447, stddev=0.0687], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.004 0.005,0.01,0.27,0.33,0.37 0.39,0.42,0.48,0.76), mean=0.217, stddev=0.145], bias-{mean,stddev}=-0.03536,0.0387, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.36e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.18 0.19,0.21,0.25,0.28,0.30 0.32,0.34,0.35,0.44), mean=0.248, stddev=0.0434], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.35,0.37,0.39 0.40,0.41,0.44,0.47,0.49 0.51,0.52,0.53,0.56), mean=0.443, stddev=0.0375], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.05,0.07,0.07 0.08,0.09,0.10,0.12), mean=0.058, stddev=0.0123], oderiv-count=1.07392e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32332.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.19 0.20,0.21,0.25,0.29,0.31 0.32,0.35,0.36,0.47), mean=0.25, stddev=0.0452], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.33,0.35,0.36 0.38,0.40,0.45,0.50,0.53 0.56,0.58,0.60,0.69), mean=0.451, stddev=0.0603]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.78214e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01741, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,5e-07,1e-06,8e-06 0.0002,0.18,0.40,0.58,0.66 0.72,0.81,0.88,1.1), mean=0.38, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.38,0.41 0.48,0.69,0.80,0.89,0.96 1.0,1.1,1.2,1.3), mean=0.775, stddev=0.171], bias-{mean,stddev}=0.0008495,0.02325, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.78214e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05246, w_fc-rms=0.02158, w_oc-rms=0.04019, count=1.52e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639526, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.42,0.43 0.44,0.45,0.48,0.50,0.54 0.65,0.73,0.75,0.79), mean=0.491, stddev=0.0652], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.227, stddev=0.0163] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639526, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.43,0.45 0.46,0.47,0.50,0.51,0.55 0.62,0.67,0.71,0.78), mean=0.502, stddev=0.0519], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0141] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00639526, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.83,-0.79,-0.44 -0.27,-0.13,0.0007,0.15,0.27 0.60,0.76,0.83,0.87), mean=0.0149, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.29,0.34 0.41,0.45,0.57,0.72,1.0 1.0,1.0,1.0,1.0), mean=0.614, stddev=0.204] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639526, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.56,0.58,0.64), mean=0.461, stddev=0.0415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0188] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00822411, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.79,-0.75,-0.37 -0.21,-0.11,0.0004,0.12,0.23 0.44,0.65,0.80,0.89), mean=0.0113, stddev=0.247], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.29,0.34,0.48 0.68,0.76,0.85,0.91,1.0 1.0,1.0,1.0,1.0), mean=0.825, stddev=0.148] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.01431e-05, count-zeroing-boundaries=297868
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0677686
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.78214e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03854, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.44,0.46 0.51,0.56,0.84,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.838, stddev=0.266], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0005,0.0008,0.002 0.006,0.39,0.55,0.72,0.87 1.1,1.3,1.4,1.6), mean=0.537, stddev=0.312], bias-{mean,stddev}=0.01197,0.2594, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=7.78214e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01219, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.23,0.25,0.26 0.27,0.29,0.33,0.37,0.41 0.44,0.47,0.48,0.54), mean=0.336, stddev=0.0547], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.16,0.18,0.26,0.35,0.38 0.40,0.42,0.43,0.47), mean=0.264, stddev=0.0864], bias-{mean,stddev}=0.0009753,0.009724, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.9e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.01,0.02 0.03,0.04,0.08,0.11,0.13 0.14,0.15,0.16,0.18), mean=0.0802, stddev=0.0364], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.11,0.15 0.21,0.29,0.44,0.55,0.60 0.65,0.69,0.70,0.81), mean=0.423, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.12,0.15,0.19 0.22,0.25,0.27,0.37), mean=0.131, stddev=0.0416], oderiv-count=1.08902e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30088.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.12 0.14,0.16,0.16,0.18), mean=0.0795, stddev=0.0356], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.06,0.07 0.09,0.11,0.13,0.16,0.17 0.18,0.20,0.20,0.22), mean=0.132, stddev=0.0324]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.78214e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00805, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.26,0.27 0.27,0.29,0.31,0.34,0.36 0.38,0.40,0.41,0.43), mean=0.316, stddev=0.035], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.13,0.14 0.15,0.15,0.17,0.20,0.22 0.24,0.27,0.29,0.38), mean=0.18, stddev=0.0342], bias-{mean,stddev}=-0.02831,0.01729, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.24,0.27,0.28 0.30,0.32,0.32,0.35), mean=0.239, stddev=0.0332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.35,0.37,0.38 0.38,0.40,0.42,0.45,0.46 0.47,0.48,0.49,0.50), mean=0.421, stddev=0.0292], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04,0.04 0.04,0.04,0.05,0.05), mean=0.0383, stddev=0.00275], oderiv-count=988000
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27844.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.21,0.24,0.27,0.29 0.30,0.32,0.33,0.37), mean=0.242, stddev=0.0346], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.36,0.37,0.39 0.41,0.42,0.47,0.52,0.55 0.57,0.61,0.65,0.75), mean=0.473, stddev=0.059]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.78214e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01416, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,5e-06,2e-05 5e-05,0.001,0.32,0.50,0.58 0.63,0.67,0.70,0.86), mean=0.279, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.33 0.40,0.59,0.65,0.72,0.76 0.79,0.86,0.89,1.3), mean=0.633, stddev=0.131], bias-{mean,stddev}=0.003157,0.02747, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.78214e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03257, w_fc-rms=0.01405, w_oc-rms=0.03758, count=1.39e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.45 0.47,0.48,0.50,0.51,0.54 0.58,0.62,0.65,0.72), mean=0.501, stddev=0.0384], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0136] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.45,0.46 0.47,0.48,0.50,0.51,0.53 0.57,0.60,0.61,0.68), mean=0.501, stddev=0.0316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.238, stddev=0.0122] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.73,-0.66,-0.37 -0.21,-0.08,0.0001,0.11,0.26 0.44,0.57,0.63,0.73), mean=0.0058, stddev=0.228], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.38,0.42,0.45 0.49,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.723, stddev=0.212] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.45,0.46,0.50,0.50,0.51 0.52,0.56,0.56,0.72), mean=0.487, stddev=0.0305], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0176] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.61,-0.57,-0.28 -0.18,-0.07,4e-05,0.10,0.21 0.36,0.47,0.53,0.67), mean=0.00553, stddev=0.194], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.52,0.58,0.65 0.73,0.79,0.88,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.877, stddev=0.117] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.80617e-06, count-zeroing-boundaries=262731
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0677686
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.78214e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03646, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.46,0.52 0.54,0.59,0.79,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.804, stddev=0.212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.004,0.01,0.58,0.78,0.87 0.98,1.1,1.2,1.3), mean=0.467, stddev=0.357], bias-{mean,stddev}=-0.003054,0.2042, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=7.78214e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01148, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.21,0.21,0.23 0.25,0.27,0.31,0.36,0.40 0.43,0.46,0.47,0.51), mean=0.315, stddev=0.0587], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.24,0.33,0.36 0.38,0.40,0.41,0.44), mean=0.25, stddev=0.0764], bias-{mean,stddev}=0.0008662,0.007157, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.87e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.02,0.04,0.06,0.09,0.10 0.12,0.13,0.14,0.16), mean=0.0636, stddev=0.0296], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.16 0.20,0.28,0.41,0.51,0.57 0.60,0.62,0.64,0.67), mean=0.395, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.09 0.10,0.10,0.12,0.15,0.18 0.20,0.23,0.24,0.26), mean=0.13, stddev=0.0336], oderiv-count=963328
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25601.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.02,0.02 0.03,0.04,0.06,0.09,0.11 0.12,0.13,0.14,0.16), mean=0.0655, stddev=0.0295], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.08,0.09,0.11,0.14,0.15 0.16,0.17,0.18,0.21), mean=0.116, stddev=0.0291]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.78214e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.17,0.23 0.26,0.28,0.32,0.36,0.38 0.40,0.40,0.41,0.44), mean=0.317, stddev=0.0546], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.14,0.15,0.17,0.21,0.24 0.26,0.30,0.33,0.38), mean=0.18, stddev=0.043], bias-{mean,stddev}=-0.02405,0.02126, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.05e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.18 0.20,0.22,0.25,0.28,0.30 0.31,0.33,0.34,0.37), mean=0.251, stddev=0.0404], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.37,0.39,0.41,0.44,0.45 0.46,0.47,0.48,0.50), mean=0.411, stddev=0.0296], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0317, stddev=0.00343], oderiv-count=960000
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23357.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.16,0.18 0.20,0.22,0.26,0.28,0.30 0.31,0.33,0.36,0.40), mean=0.254, stddev=0.041], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.25,0.34 0.39,0.44,0.50,0.56,0.60 0.63,0.67,0.70,0.83), mean=0.498, stddev=0.0894]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.78214e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.27 0.28,0.33,0.47,0.67,0.73 0.78,0.83,0.87,0.94), mean=0.495, stddev=0.164], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.52,0.57,0.67 0.73,0.77,0.84,1.1,1.2 1.3,1.4,1.5,1.8), mean=0.91, stddev=0.207], bias-{mean,stddev}=0.01461,0.01733, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.78214e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0887, w_fc-rms=0.04138, w_oc-rms=0.06353, count=1.26e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651299, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.56,0.58,0.60 0.62,0.65,0.69,0.73,0.76 0.78,0.80,0.82,0.83), mean=0.691, stddev=0.0537], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.16,0.17,0.18,0.19,0.19 0.20,0.20,0.20,0.23), mean=0.177, stddev=0.0165] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651299, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.51,0.54,0.55 0.56,0.59,0.62,0.67,0.72 0.77,0.80,0.82,0.86), mean=0.633, stddev=0.0629], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.20,0.21,0.21 0.21,0.22,0.22,0.22), mean=0.192, stddev=0.0189] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0103117, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.73,-0.52 -0.43,-0.29,-0.002,0.27,0.40 0.53,0.70,0.76,0.87), mean=-0.00772, stddev=0.329], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.23,0.27 0.31,0.36,0.41,0.45,0.47 0.49,0.51,0.52,0.60), mean=0.399, stddev=0.0632] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651299, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.51,0.54 0.56,0.59,0.64,0.67,0.69 0.71,0.76,0.78,0.89), mean=0.633, stddev=0.0548], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.13,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.19,0.19,0.20,0.20), mean=0.174, stddev=0.0156] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.013547, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.84,-0.73,-0.57 -0.41,-0.28,0.002,0.25,0.37 0.55,0.72,0.77,0.88), mean=-0.0106, stddev=0.323], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.31 0.38,0.46,0.56,0.61,0.64 0.66,0.67,0.67,0.74), mean=0.533, stddev=0.104] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.23778e-06, count-zeroing-boundaries=223436
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0677686
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.78214e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08682, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.1,1.1 1.1,1.2,1.7,2.5,2.6 2.7,2.7,2.8,3.0), mean=1.88, stddev=0.617], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,1.0,1.1,1.1 1.2,1.2,1.3,1.5,1.7 1.8,1.9,2.0,2.1), mean=1.38, stddev=0.219], bias-{mean,stddev}=-0.04173,0.4575, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=7.78214e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04102, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.56,0.58 0.59,0.61,0.65,0.69,0.72 0.75,0.78,0.86,2.2), mean=0.656, stddev=0.0824], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.98,1.0,1.1 1.1,1.2,1.6,2.4,2.5 2.5,2.6,2.6,2.6), mean=1.79, stddev=0.582], bias-{mean,stddev}=3.477e-09,0.02506, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=592640
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/443.mdl exp/nnet3/tdnn_lstm1c_sp/444.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.87418 tdnn2.affine:2.61747 lstm1.W_all:1.96041 lstm1.lstm_nonlin:0.0379291 lstm1.W_rp:0.872968 tdnn3.affine:1.78255 tdnn4.affine:1.83082 lstm2.W_all:1.31371 lstm2.lstm_nonlin:0.0212117 lstm2.W_rp:0.600384 tdnn5.affine:1.4959 tdnn6.affine:1.6179 lstm3.W_all:1.80621 lstm3.lstm_nonlin:0.0420694 lstm3.W_rp:0.651966 output.affine:1.45405 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.9212 tdnn2.affine:10.3828 lstm1.W_all:20.2693 lstm1.lstm_nonlin:1.58533 lstm1.W_rp:14.7777 tdnn3.affine:7.76876 tdnn4.affine:7.28985 lstm2.W_all:16.5178 lstm2.lstm_nonlin:1.17852 lstm2.W_rp:13.8055 tdnn5.affine:7.31265 tdnn6.affine:7.36274 lstm3.W_all:23.819 lstm3.lstm_nonlin:2.66093 lstm3.W_rp:32.7728 output.affine:30.3574 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.222809 tdnn2.affine:0.252439 lstm1.W_all:0.0967464 lstm1.lstm_nonlin:0.0237879 lstm1.W_rp:0.0590049 tdnn3.affine:0.228833 tdnn4.affine:0.250989 lstm2.W_all:0.0795002 lstm2.lstm_nonlin:0.0179101 lstm2.W_rp:0.0434752 tdnn5.affine:0.204879 tdnn6.affine:0.219808 lstm3.W_all:0.0757869 lstm3.lstm_nonlin:0.0157306 lstm3.W_rp:0.0198807 output.affine:0.0478819 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:57:11 KST 2020, elapsed time 0 seconds
