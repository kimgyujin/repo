# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/159.mdl exp/nnet3/tdnn_lstm1c_sp/160.mdl 
# Started at Thu Jul 30 11:04:18 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/159.mdl exp/nnet3/tdnn_lstm1c_sp/160.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000181757, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01797, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.01 0.02,0.24,0.32,0.37,0.40 0.43,0.46,0.47,0.72), mean=0.283, stddev=0.129], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.11,0.13,0.38,0.50,0.59 0.77,0.85,0.90,1.0), mean=0.356, stddev=0.202], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.06,0.22,0.52,0.71 0.86,1.0,1.1,1.3), mean=0.304, stddev=0.275], bias-{mean,stddev}=0.001986,0.02462, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.12e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.42,-0.24,-0.21,-0.15 -0.08,-0.02,0.04,0.17,0.23 0.28,0.35,0.38,0.54), mean=0.061, stddev=0.129], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-1.7,-1.2,-0.77 -0.44,-0.11,0.54,1.1,1.5 1.7,2.2,2.4,3.5), mean=0.511, stddev=0.811], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.58,2.6,3.5 4.4,5.5,6.6,8.1), mean=1.28, stddev=1.59], oderiv-count=3840
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-2274.56, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000181757, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00792, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.27 0.27,0.29,0.31,0.34,0.35 0.36,0.37,0.38,0.42), mean=0.311, stddev=0.0298], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.004,0.006 0.01,0.14,0.19,0.22,0.23 0.24,0.26,0.27,0.32), mean=0.165, stddev=0.0745], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.06,0.08,0.18,0.38,0.54 0.66,0.79,0.84,0.97), mean=0.244, stddev=0.196], bias-{mean,stddev}=-0.0005872,0.01235, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.73e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.22,-0.20,-0.16,-0.05 0.01,0.12,0.29,0.46,0.55 0.68,0.78,0.86,1.1), mean=0.291, stddev=0.219], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.21,-0.03,0.009,0.13 0.21,0.30,0.47,0.67,0.75 0.83,0.94,1.0,1.2), mean=0.482, stddev=0.218]
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-2274.56, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000181757, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004951, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.0001,0.0004,0.002 0.01,0.05,0.10,0.16,0.20 0.24,0.26,0.28,0.43), mean=0.106, stddev=0.068], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.09,0.13,0.24,0.26,0.27 0.28,0.30,0.31,0.34), mean=0.215, stddev=0.0676], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-07,2e-07,2e-07 5e-07,0.05,0.12,0.25,0.37 0.49,0.65,0.72,0.90), mean=0.163, stddev=0.156], bias-{mean,stddev}=-0.0001384,0.001801, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000181757, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001594, w_fc-rms=0.002048, w_oc-rms=0.003956, count=3.15e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000675352, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.9,-3.5,-2.8,-2.0 -1.1,-0.46,0.50,1.4,2.2 2.7,3.4,3.8,5.8), mean=0.47, stddev=1.4], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.2,-1.8,-1.2,-0.69 -0.46,-0.15,0.25,0.55,0.86 1.2,1.5,1.7,2.4), mean=0.198, stddev=0.611] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000675352, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.1,-2.8,-2.4,-1.6 -0.98,-0.35,0.50,1.4,2.1 2.7,3.4,3.9,4.3), mean=0.529, stddev=1.26], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-1.0,-0.81,-0.61 -0.36,-0.03,0.24,0.43,0.70 0.91,1.1,1.4,2.0), mean=0.204, stddev=0.439] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.050044, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-27,-18,-17,-13 -9.6,-6.2,-0.09,6.1,10 14,17,19,24), mean=0.0961, stddev=7.9], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-17,-15,-13,-11 -8.7,-5.4,-0.09,3.7,6.2 9.2,12,13,20), mean=-0.652, stddev=5.82] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000675352, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.9,-3.4,-2.8,-2.0 -1.4,-0.70,0.50,1.5,2.3 3.0,3.6,4.4,6.2), mean=0.432, stddev=1.52], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-1.7,-1.4,-1.1 -0.82,-0.40,0.25,0.63,0.99 1.3,1.8,2.0,2.4), mean=0.139, stddev=0.721] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.97673, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-21,-15,-13,-10 -7.6,-4.7,-0.16,5.4,8.9 11,15,15,19), mean=0.206, stddev=6.39], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-14,-10,-8.5,-6.0 -4.5,-2.5,0.71,2.6,4.4 5.8,7.1,7.6,10.0), mean=0.142, stddev=3.5] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=4.48e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0.000446429, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.0044843, count-zeroing-boundaries=669
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0176309
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000181757, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006358, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.06,0.12,0.20,0.21 0.22,0.23,0.23,0.25), mean=0.129, stddev=0.0654], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.002,0.004,0.008 0.02,0.07,0.10,0.13,0.14 0.15,0.17,0.18,0.19), mean=0.0941, stddev=0.0406], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,5e-08,6e-08,7e-08 9e-08,1e-07,1e-06,0.02,0.28 0.40,0.49,0.53,0.61), mean=0.0569, stddev=0.133], bias-{mean,stddev}=0.001308,0.01095, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000181757, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007167, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.16,0.17,0.19,0.22,0.24 0.26,0.28,0.29,0.34), mean=0.197, stddev=0.0343], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.06,0.11,0.23,0.24 0.26,0.27,0.28,0.32), mean=0.141, stddev=0.0832], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,7e-08,7e-08,1e-07 1e-07,3e-07,5e-05,0.13,0.38 0.53,0.67,0.74,0.82), mean=0.0869, stddev=0.18], bias-{mean,stddev}=-0.001117,0.01189, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2e+04, self-repaired-proportion=-0.012574, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.9,-1.4,-1.2,-0.84 -0.66,-0.39,0.10,0.56,0.81 1.1,1.3,1.4,1.8), mean=0.0931, stddev=0.593], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.2,-4.3,-3.5,-3.1 -2.1,-1.2,0.48,1.9,2.9 3.7,4.8,5.0,8.7), mean=0.427, stddev=1.99], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,0.26,0.34 0.39,0.49,0.60,0.77), mean=0.123, stddev=0.149], oderiv-count=17920
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-2274.56, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000181757, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005729, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.20,0.21,0.22,0.24,0.25 0.26,0.26,0.27,0.29), mean=0.226, stddev=0.0176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.10,0.10 0.11,0.11,0.13,0.15,0.15 0.16,0.17,0.18,0.20), mean=0.129, stddev=0.0194], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.07,0.09,0.15,0.28,0.37 0.46,0.55,0.59,0.65), mean=0.188, stddev=0.126], bias-{mean,stddev}=-0.0003234,0.006886, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.58e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.14,0.16 0.19,0.21,0.28,0.34,0.37 0.40,0.42,0.47,0.56), mean=0.278, stddev=0.0735], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.18,0.23,0.27 0.31,0.36,0.44,0.53,0.57 0.62,0.68,0.69,0.77), mean=0.441, stddev=0.106], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.02,0.05,0.07,0.08 0.09,0.09,0.10,0.13), mean=0.0474, stddev=0.0269], oderiv-count=40320
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-2274.56, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000181757, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003396, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,3e-07,5e-07,1e-06 5e-06,0.0001,0.06,0.11,0.15 0.17,0.19,0.20,0.30), mean=0.0634, stddev=0.059], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.06,0.10,0.16,0.18,0.19 0.19,0.21,0.21,0.25), mean=0.147, stddev=0.048], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,9e-08,1e-07,1e-07 6e-06,0.03,0.07,0.17,0.25 0.34,0.46,0.52,0.60), mean=0.108, stddev=0.111], bias-{mean,stddev}=-0.0001495,0.002619, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000181757, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0009006, w_fc-rms=0.001125, w_oc-rms=0.001605, count=3.64e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000539362, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.4,-2.6,-1.9,-1.2 -0.74,-0.18,0.50,1.0,1.5 1.9,2.3,2.6,3.5), mean=0.42, stddev=0.917], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.57,-0.49,-0.35 -0.15,0.07,0.25,0.36,0.54 0.71,0.87,0.96,1.5), mean=0.224, stddev=0.295] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000539362, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.9,-1.8,-1.4,-0.79 -0.29,0.19,0.50,0.95,1.5 2.0,2.7,3.0,4.5), mean=0.572, stddev=0.821], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.49,-0.34,-0.13 -0.01,0.11,0.25,0.30,0.43 0.56,0.72,0.77,1.2), mean=0.225, stddev=0.217] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.705754, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-21,-15,-12,-9.4 -6.3,-2.8,-0.006,2.2,5.3 8.7,11,11,24), mean=-0.282, stddev=4.98], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-16,-9.0,-7.6,-5.5 -3.5,-1.7,1.0,1.8,3.8 5.3,7.6,9.1,11), mean=0.386, stddev=3.21] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000539362, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.9,-2.4,-2.1,-1.4 -0.97,-0.35,0.50,0.94,1.5 2.0,2.6,2.7,3.5), mean=0.379, stddev=0.967], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.92,-0.77,-0.39 -0.20,0.02,0.25,0.34,0.56 0.78,0.96,1.1,1.7), mean=0.199, stddev=0.348] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000539362, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-19,-11,-11,-7.7 -5.4,-2.4,-0.003,2.2,4.4 6.4,8.7,9.4,17), mean=-0.205, stddev=4.05], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.1,-5.4,-3.9,-3.0 -1.8,-0.55,1.0,1.3,2.3 3.6,4.4,4.7,7.8), mean=0.556, stddev=1.83] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=4.48e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0.000669643, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00147493, count-zeroing-boundaries=678
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0176309
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000181757, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004373, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.06,0.09,0.13,0.13 0.14,0.15,0.15,0.16), mean=0.0948, stddev=0.0309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.0001,0.0002,0.0003 0.0004,0.001,0.07,0.10,0.11 0.11,0.12,0.12,0.15), mean=0.056, stddev=0.0429], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,5e-08,6e-08 8e-08,1e-07,6e-06,0.10,0.21 0.26,0.29,0.31,0.36), mean=0.0454, stddev=0.0888], bias-{mean,stddev}=0.0004935,0.005537, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000181757, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005703, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.12,0.13,0.15,0.18,0.19 0.22,0.23,0.24,0.27), mean=0.156, stddev=0.0297], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.08,0.11,0.17,0.18 0.19,0.20,0.21,0.23), mean=0.122, stddev=0.044], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,6e-08,7e-08,8e-08 1e-07,4e-07,0.001,0.15,0.29 0.41,0.51,0.56,0.66), mean=0.0773, stddev=0.139], bias-{mean,stddev}=-6.653e-05,0.007072, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.13,0.21,0.26 0.31,0.35,0.40,0.60), mean=0.132, stddev=0.103], oderiv-count=47360
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-2274.56, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000181757, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004646, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.15 0.16,0.17,0.18,0.20,0.21 0.22,0.22,0.22,0.24), mean=0.182, stddev=0.0195], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.08 0.08,0.09,0.10,0.12,0.13 0.14,0.15,0.16,0.18), mean=0.104, stddev=0.0188], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.11,0.22,0.30 0.39,0.46,0.51,0.58), mean=0.147, stddev=0.11], bias-{mean,stddev}=-0.0001889,0.005585, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=3.65e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.50,-0.33,-0.30,-0.17 -0.08,0.04,0.24,0.44,0.58 0.71,0.83,0.93,1.1), mean=0.246, stddev=0.262], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.96,-0.44,-0.36,-0.21 -0.02,0.17,0.42,0.71,0.84 1.0,1.2,1.3,1.8), mean=0.425, stddev=0.365], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.02,0.02,0.04,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.0351, stddev=0.015], oderiv-count=78720
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-2274.56, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000181757, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004495, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.05,0.06,0.08,0.16,0.20 0.21,0.23,0.24,0.29), mean=0.101, stddev=0.0545], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.13,0.14,0.17,0.24,0.31 0.33,0.34,0.34,0.38), mean=0.194, stddev=0.0654], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,9e-06,2e-05,0.0004 0.03,0.04,0.08,0.20,0.36 0.50,0.62,0.67,0.78), mean=0.137, stddev=0.153], bias-{mean,stddev}=-0.0006318,0.001793, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000181757, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001871, w_fc-rms=0.003034, w_oc-rms=0.003657, count=4.12e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000435857, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.1,-4.9,-3.8,-3.2 -2.2,-1.4,0.08,1.3,2.1 2.7,3.3,3.7,5.9), mean=-0.02, stddev=1.76], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.81,-0.72,-0.61 -0.37,-0.18,0.18,0.56,0.72 0.86,1.0,1.2,1.8), mean=0.183, stddev=0.446] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000435857, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.9,-3.7,-3.3,-2.4 -1.7,-0.80,0.84,2.7,3.6 4.5,5.3,5.6,7.1), mean=0.972, stddev=2.04], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.9,-1.3,-0.94,-0.70 -0.52,-0.26,0.18,0.55,0.74 0.86,1.1,1.1,1.5), mean=0.14, stddev=0.493] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00148822, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-33,-23,-19,-15 -12,-7.5,-0.24,6.6,10 14,18,22,36), mean=-0.474, stddev=8.89], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-13,-8.5,-7.4,-5.9 -4.7,-3.0,0.36,3.6,5.4 6.9,8.2,8.9,12), mean=0.354, stddev=3.93] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000435857, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.1,-3.1,-2.9,-2.0 -1.3,-0.50,1.1,2.4,3.3 4.0,4.9,5.5,7.0), mean=1.02, stddev=1.84], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-1.2,-0.95,-0.72 -0.53,-0.27,0.17,0.62,0.82 1.0,1.2,1.3,2.0), mean=0.159, stddev=0.539] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0653661, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-27,-18,-15,-12 -8.9,-6.1,-0.36,5.1,8.3 10,13,17,27), mean=-0.381, stddev=7.1], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.6,-6.5,-5.6,-4.8 -3.7,-2.1,0.78,3.2,4.6 5.8,6.7,7.4,10), mean=0.609, stddev=3.15] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=4.48e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0.000892857, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00149477, count-zeroing-boundaries=669
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0176309
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000181757, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005627, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.07,0.07,0.10,0.17,0.17 0.18,0.18,0.19,0.19), mean=0.12, stddev=0.0443], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.07,0.09,0.10,0.11 0.12,0.12,0.13,0.15), mean=0.0887, stddev=0.0189], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,2e-06,2e-06,4e-06 9e-06,5e-05,0.02,0.16,0.24 0.30,0.35,0.37,0.40), mean=0.0782, stddev=0.102], bias-{mean,stddev}=-0.0006089,0.0107, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000181757, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006232, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.04,0.05 0.06,0.07,0.09,0.12,0.14 0.16,0.19,0.20,0.35), mean=0.0941, stddev=0.0353], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.28,0.35,0.36 0.37,0.38,0.39,0.40), mean=0.278, stddev=0.0664], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,2e-06,3e-06,4e-06 8e-06,4e-05,0.01,0.41,0.56 0.65,0.71,0.75,0.81), mean=0.161, stddev=0.236], bias-{mean,stddev}=3.984e-11,0.001562, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.11849 tdnn2.affine:7.1389 lstm1.W_all:5.75777 lstm1.lstm_nonlin:0.107888 lstm1.W_rp:2.34468 tdnn3.affine:4.5727 tdnn4.affine:5.16223 lstm2.W_all:3.95043 lstm2.lstm_nonlin:0.0491795 lstm2.W_rp:1.61057 tdnn5.affine:3.63585 tdnn6.affine:4.18638 lstm3.W_all:5.22727 lstm3.lstm_nonlin:0.116456 lstm3.W_rp:2.07626 output.affine:4.60993 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.7467 tdnn2.affine:10.771 lstm1.W_all:19.0019 lstm1.lstm_nonlin:1.30814 lstm1.W_rp:11.6178 tdnn3.affine:7.83515 tdnn4.affine:8.00159 lstm2.W_all:15.2914 lstm2.lstm_nonlin:0.548361 lstm2.W_rp:10.4769 tdnn5.affine:7.0516 tdnn6.affine:7.48614 lstm3.W_all:22.1971 lstm3.lstm_nonlin:1.91321 lstm3.W_rp:26.6418 output.affine:29.0182 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.605326 tdnn2.affine:0.663037 lstm1.W_all:0.302567 lstm1.lstm_nonlin:0.081463 lstm1.W_rp:0.202578 tdnn3.affine:0.583246 tdnn4.affine:0.641692 lstm2.W_all:0.258159 lstm2.lstm_nonlin:0.0883241 lstm2.W_rp:0.153646 tdnn5.affine:0.511159 tdnn6.affine:0.55542 lstm3.W_all:0.235349 lstm3.lstm_nonlin:0.0599413 lstm3.W_rp:0.0779732 output.affine:0.158582 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:04:19 KST 2020, elapsed time 1 seconds
