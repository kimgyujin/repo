# nnet3-info exp/nnet3/tdnn_lstm1c_sp/341.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/340.mdl exp/nnet3/tdnn_lstm1c_sp/341.mdl 
# Started at Thu Jul 30 12:16:10 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/341.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00014957, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03212, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.008 0.01,0.02,0.56,0.71,0.79 0.88,0.92,0.99,1.2), mean=0.467, stddev=0.303], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.15 0.18,0.22,0.64,0.90,1.2 1.3,1.5,1.5,1.5), mean=0.631, stddev=0.371], bias-{mean,stddev}=-0.004022,0.06198, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.54e+05, self-repaired-proportion=0.191865, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,1e-05,3e-05,4e-05 6e-05,0.0002,0.05,0.09,0.11 0.12,0.14,0.17,0.21), mean=0.0492, stddev=0.0455], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.008,0.01,0.02 0.04,0.06,0.39,0.60,0.70 0.80,0.87,0.91,0.99), mean=0.36, stddev=0.263], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.009,0.01,0.01 0.02,0.04,0.30,0.42,0.49 0.59,0.68,0.74,1.4), mean=0.284, stddev=0.199], oderiv-count=1.20467e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40330.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,7e-06,1e-05,3e-05 7e-05,0.0002,0.05,0.09,0.11 0.12,0.14,0.16,0.21), mean=0.0482, stddev=0.0451], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0001,0.0002 0.0004,0.001,0.09,0.11,0.13 0.14,0.14,0.15,0.18), mean=0.0675, stddev=0.0513]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00014957, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01174, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.35,0.36 0.38,0.40,0.45,0.50,0.54 0.59,0.62,0.65,0.74), mean=0.459, stddev=0.0667], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.006,0.01,0.28,0.34,0.37 0.39,0.43,0.49,0.71), mean=0.225, stddev=0.145], bias-{mean,stddev}=-0.03261,0.03896, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.12e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.24,0.27,0.31,0.33 0.35,0.38,0.39,0.48), mean=0.277, stddev=0.0431], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.36,0.37,0.39 0.40,0.41,0.44,0.47,0.49 0.50,0.51,0.52,0.57), mean=0.442, stddev=0.0365], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0462, stddev=0.00843], oderiv-count=1.1552e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39490.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.21,0.22 0.23,0.24,0.28,0.31,0.33 0.35,0.37,0.39,0.49), mean=0.278, stddev=0.0436], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.46,0.50,0.55,0.58 0.61,0.64,0.66,0.70), mean=0.507, stddev=0.0574]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00014957, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01768, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,9e-07,2e-06,1e-05 0.0004,0.17,0.42,0.59,0.67 0.73,0.79,0.85,1.0), mean=0.387, stddev=0.232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.37,0.42 0.51,0.70,0.81,0.90,0.96 1.0,1.1,1.2,1.3), mean=0.789, stddev=0.168], bias-{mean,stddev}=0.003234,0.02844, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00014957, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.09077, w_fc-rms=0.02865, w_oc-rms=0.04876, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063684, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.42,0.43 0.44,0.45,0.48,0.50,0.55 0.70,0.79,0.81,0.86), mean=0.496, stddev=0.0783], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0223] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063684, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.46,0.47,0.48 0.49,0.49,0.50,0.54,0.59 0.68,0.77,0.80,0.85), mean=0.525, stddev=0.0633], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0224] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0243007, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.89,-0.85,-0.46 -0.27,-0.12,0.001,0.16,0.30 0.59,0.85,0.88,0.91), mean=0.018, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.21,0.25 0.38,0.45,0.58,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.61, stddev=0.217] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063684, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.51,0.57,0.59,0.72), mean=0.463, stddev=0.0412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0202] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0063684, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.71,-0.65,-0.31 -0.16,-0.08,0.001,0.10,0.20 0.37,0.63,0.70,0.78), mean=0.0119, stddev=0.218], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.45,0.55 0.76,0.83,0.89,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.87, stddev=0.124] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=4.79449e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000141413, count-zeroing-boundaries=297003
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.238017
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00014957, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04026, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.41,0.44 0.49,0.55,0.87,1.2,1.3 1.3,1.3,1.4,1.4), mean=0.867, stddev=0.303], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0008,0.001,0.002 0.009,0.34,0.54,0.73,0.93 1.2,1.5,1.6,1.9), mean=0.547, stddev=0.35], bias-{mean,stddev}=0.01278,0.2616, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00014957, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0131, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.21,0.24,0.26 0.28,0.30,0.36,0.41,0.45 0.47,0.52,0.53,0.58), mean=0.359, stddev=0.0705], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.18,0.28,0.39,0.41 0.43,0.46,0.47,0.50), mean=0.28, stddev=0.103], bias-{mean,stddev}=0.0016,0.008612, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.52e+05, self-repaired-proportion=0.00558498, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.01,0.02,0.02 0.03,0.05,0.08,0.10,0.11 0.13,0.14,0.15,0.17), mean=0.0784, stddev=0.0309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.11,0.15,0.19 0.23,0.35,0.50,0.60,0.63 0.67,0.71,0.71,0.82), mean=0.471, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.09,0.09,0.10 0.10,0.11,0.12,0.15,0.19 0.24,0.26,0.27,0.33), mean=0.136, stddev=0.0411], oderiv-count=1.18387e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36971.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.01,0.02,0.02 0.03,0.05,0.08,0.10,0.12 0.13,0.14,0.14,0.16), mean=0.0782, stddev=0.0306], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.05,0.07,0.08 0.09,0.11,0.12,0.14,0.15 0.16,0.17,0.18,0.20), mean=0.122, stddev=0.0261]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00014957, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008561, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.27,0.28 0.29,0.30,0.33,0.37,0.39 0.41,0.44,0.45,0.49), mean=0.336, stddev=0.0412], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.12,0.13,0.14 0.15,0.16,0.18,0.22,0.25 0.27,0.30,0.32,0.38), mean=0.191, stddev=0.0426], bias-{mean,stddev}=-0.02582,0.01948, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.85e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.23,0.26,0.29,0.30 0.31,0.33,0.33,0.37), mean=0.259, stddev=0.031], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.36,0.37,0.38 0.39,0.41,0.43,0.45,0.46 0.47,0.48,0.49,0.50), mean=0.428, stddev=0.0282], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0354, stddev=0.00283], oderiv-count=1.0257e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34452.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.21 0.22,0.23,0.26,0.29,0.30 0.31,0.33,0.34,0.38), mean=0.26, stddev=0.0313], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.38,0.40,0.42 0.43,0.45,0.50,0.54,0.57 0.61,0.64,0.67,0.82), mean=0.501, stddev=0.0602]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00014957, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01456, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,5e-06,1e-05 5e-05,0.001,0.33,0.52,0.59 0.63,0.68,0.70,0.93), mean=0.287, stddev=0.235], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.31,0.36 0.45,0.60,0.66,0.73,0.78 0.82,0.91,0.99,1.3), mean=0.651, stddev=0.133], bias-{mean,stddev}=0.006268,0.03384, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00014957, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05814, w_fc-rms=0.01714, w_oc-rms=0.04087, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642453, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.46 0.47,0.48,0.50,0.51,0.56 0.60,0.68,0.70,0.80), mean=0.506, stddev=0.05], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0172] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642453, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.47,0.48 0.49,0.50,0.50,0.54,0.58 0.62,0.67,0.68,0.75), mean=0.522, stddev=0.0449], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0194] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0066786, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.81,-0.77,-0.45 -0.25,-0.10,0.0003,0.13,0.33 0.53,0.69,0.74,0.81), mean=0.0102, stddev=0.266], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.33,0.40 0.46,0.53,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.717, stddev=0.222] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642453, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.45 0.46,0.47,0.50,0.50,0.51 0.53,0.56,0.59,0.67), mean=0.491, stddev=0.0273], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0189] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00642453, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.71,-0.59,-0.50,-0.29 -0.16,-0.07,0.0005,0.09,0.20 0.36,0.47,0.53,0.62), mean=0.0074, stddev=0.183], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.58,0.60,0.70 0.78,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.903, stddev=0.1] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.44036e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.77265e-05, count-zeroing-boundaries=261909
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.238017
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00014957, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03869, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.51,0.53 0.57,0.61,0.86,1.1,1.1 1.2,1.2,1.3,1.3), mean=0.85, stddev=0.235], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.002,0.002 0.004,0.01,0.56,0.82,0.95 1.1,1.3,1.4,1.6), mean=0.486, stddev=0.391], bias-{mean,stddev}=0.0008602,0.2121, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00014957, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01247, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.26 0.28,0.29,0.33,0.39,0.43 0.46,0.49,0.51,0.57), mean=0.343, stddev=0.0611], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.16 0.17,0.19,0.26,0.36,0.39 0.41,0.43,0.44,0.48), mean=0.271, stddev=0.0859], bias-{mean,stddev}=0.0007047,0.006065, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.97e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.16), mean=0.0653, stddev=0.0282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.14,0.18 0.22,0.31,0.49,0.58,0.63 0.65,0.68,0.70,0.75), mean=0.454, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.12,0.13,0.16,0.19 0.21,0.24,0.24,0.27), mean=0.14, stddev=0.0328], oderiv-count=1.0624e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31933.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.16), mean=0.066, stddev=0.0279], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.09,0.11,0.12,0.13 0.14,0.15,0.15,0.17), mean=0.106, stddev=0.022]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00014957, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008512, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.16,0.21 0.27,0.29,0.33,0.39,0.41 0.42,0.43,0.45,0.48), mean=0.331, stddev=0.0616], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.15,0.18,0.22,0.25 0.28,0.31,0.33,0.41), mean=0.189, stddev=0.046], bias-{mean,stddev}=-0.01805,0.02481, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.85e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.19 0.22,0.25,0.28,0.31,0.32 0.34,0.35,0.36,0.42), mean=0.276, stddev=0.0438], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.38,0.40,0.42,0.45,0.46 0.48,0.49,0.50,0.52), mean=0.423, stddev=0.033], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0289, stddev=0.00299], oderiv-count=981280
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29414.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.19 0.22,0.25,0.28,0.31,0.32 0.34,0.36,0.36,0.44), mean=0.277, stddev=0.0441], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.26,0.35 0.43,0.48,0.54,0.60,0.64 0.67,0.70,0.73,0.99), mean=0.536, stddev=0.0959]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00014957, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02072, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.28,0.29 0.31,0.35,0.49,0.65,0.72 0.76,0.86,0.90,0.98), mean=0.506, stddev=0.153], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.61,0.65,0.72 0.78,0.82,0.89,1.1,1.1 1.2,1.4,1.5,1.6), mean=0.931, stddev=0.162], bias-{mean,stddev}=0.0122,0.01652, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00014957, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.104, w_fc-rms=0.04481, w_oc-rms=0.07435, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00649232, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.59,0.61,0.63 0.65,0.68,0.72,0.77,0.80 0.82,0.84,0.85,0.88), mean=0.724, stddev=0.0557], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.22), mean=0.166, stddev=0.0229] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00649232, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.53,0.56,0.59 0.61,0.64,0.68,0.73,0.77 0.81,0.84,0.85,0.89), mean=0.685, stddev=0.0647], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.173, stddev=0.0238] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0334762, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.82,-0.76,-0.61 -0.45,-0.32,-0.007,0.29,0.42 0.61,0.81,0.87,0.91), mean=-0.00466, stddev=0.361], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.19,0.20,0.24 0.30,0.35,0.45,0.51,0.53 0.55,0.56,0.58,0.62), mean=0.431, stddev=0.0926] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00649232, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.49,0.52 0.55,0.59,0.63,0.67,0.70 0.72,0.76,0.79,0.89), mean=0.631, stddev=0.0613], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0183] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00649232, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.70,-0.65,-0.53 -0.38,-0.26,-0.006,0.25,0.36 0.54,0.69,0.73,0.75), mean=-0.00543, stddev=0.304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.43 0.49,0.58,0.67,0.72,0.74 0.76,0.78,0.79,0.83), mean=0.646, stddev=0.0955] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.73576e-06, count-zeroing-boundaries=222692
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.238017
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00014957, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09077, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.6,2.7 2.8,2.9,3.0,3.1), mean=1.97, stddev=0.639], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.92,1.0,1.1 1.1,1.2,1.4,1.6,1.9 2.1,2.1,2.2,2.3), mean=1.43, stddev=0.293], bias-{mean,stddev}=-0.01088,0.6859, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00014957, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0436, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.59,0.60,0.62 0.63,0.65,0.69,0.74,0.76 0.80,0.85,0.91,2.1), mean=0.698, stddev=0.0831], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.5,2.6 2.7,2.8,2.8,2.8), mean=1.91, stddev=0.594], bias-{mean,stddev}=4.908e-09,0.02115, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0138], oderiv-count=616960
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/340.mdl exp/nnet3/tdnn_lstm1c_sp/341.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.78303 tdnn2.affine:3.55456 lstm1.W_all:2.77852 lstm1.lstm_nonlin:0.0584565 lstm1.W_rp:1.17556 tdnn3.affine:2.5403 tdnn4.affine:2.63615 lstm2.W_all:1.92539 lstm2.lstm_nonlin:0.0329705 lstm2.W_rp:0.800999 tdnn5.affine:2.11723 tdnn6.affine:2.21876 lstm3.W_all:2.1302 lstm3.lstm_nonlin:0.0546499 lstm3.W_rp:0.846494 output.affine:2.28953 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.7654 tdnn2.affine:10.6381 lstm1.W_all:20.6034 lstm1.lstm_nonlin:2.43863 lstm1.W_rp:15.3946 tdnn3.affine:8.34524 tdnn4.affine:7.7459 lstm2.W_all:17.0016 lstm2.lstm_nonlin:1.66708 lstm2.W_rp:14.63 tdnn5.affine:7.94514 tdnn6.affine:7.69835 lstm3.W_all:24.115 lstm3.lstm_nonlin:3.08887 lstm3.W_rp:35.1608 output.affine:32.2649 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.294679 tdnn2.affine:0.331632 lstm1.W_all:0.134697 lstm1.lstm_nonlin:0.0239562 lstm1.W_rp:0.0763053 tdnn3.affine:0.302197 tdnn4.affine:0.337973 lstm2.W_all:0.113144 lstm2.lstm_nonlin:0.0197345 lstm2.W_rp:0.0546858 tdnn5.affine:0.264474 tdnn6.affine:0.286097 lstm3.W_all:0.0883254 lstm3.lstm_nonlin:0.0177173 lstm3.W_rp:0.0240567 output.affine:0.070909 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:16:10 KST 2020, elapsed time 0 seconds
