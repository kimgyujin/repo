# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/309.mdl exp/nnet3/tdnn_lstm1c_sp/310.mdl 
# Started at Thu Jul 30 12:03:47 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/309.mdl exp/nnet3/tdnn_lstm1c_sp/310.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000183231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01024, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.006 0.009,0.02,0.18,0.22,0.24 0.26,0.29,0.30,0.34), mean=0.154, stddev=0.0883], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.07,0.08,0.22,0.29,0.34 0.42,0.46,0.47,0.58), mean=0.206, stddev=0.11], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.02,0.04,0.12,0.30,0.41 0.51,0.58,0.62,0.69), mean=0.172, stddev=0.157], bias-{mean,stddev}=-3.817e-06,0.01264, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.96e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.31,-0.16,-0.13,-0.08 -0.03,-0.007,0.01,0.12,0.17 0.23,0.27,0.29,0.69), mean=0.0469, stddev=0.0963], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.6,-1.8,-1.2,-0.77 -0.46,-0.18,0.40,0.90,1.1 1.3,1.6,1.7,2.7), mean=0.36, stddev=0.695], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.42,1.1,1.4 1.8,2.2,2.3,4.3), mean=0.59, stddev=0.647], oderiv-count=12416
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3434.13, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.18,-0.13,-0.08,-0.03 -0.01,-0.001,0.04,0.15,0.20 0.23,0.32,0.34,0.55), mean=0.0697, stddev=0.0974], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.14,0.16 0.19,0.22,0.22,0.24), mean=0.0694, stddev=0.0706]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000183231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004409, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.15 0.16,0.16,0.17,0.19,0.19 0.20,0.21,0.21,0.22), mean=0.173, stddev=0.0149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.005,0.01,0.11,0.13,0.14 0.15,0.16,0.17,0.19), mean=0.0872, stddev=0.05], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.05,0.10,0.21,0.30 0.38,0.44,0.47,0.55), mean=0.135, stddev=0.11], bias-{mean,stddev}=-0.0004068,0.007347, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.28e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.09,0.11,0.14 0.17,0.20,0.26,0.32,0.35 0.37,0.42,0.44,0.51), mean=0.258, stddev=0.071], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.28,0.32 0.35,0.38,0.45,0.51,0.55 0.59,0.61,0.63,0.66), mean=0.45, stddev=0.0791]
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3375.15, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.23,0.01,0.05,0.09 0.14,0.20,0.31,0.44,0.53 0.60,0.74,0.83,1.2), mean=0.327, stddev=0.167], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.33,0.57,0.74,0.84 0.94,1.1,1.2,1.3), mean=0.533, stddev=0.273]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000183231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00269, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-09,1e-07,2e-07,2e-06 6e-05,0.02,0.06,0.09,0.11 0.12,0.14,0.14,0.22), mean=0.0567, stddev=0.0386], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.05,0.13,0.14,0.15 0.16,0.17,0.17,0.22), mean=0.115, stddev=0.0436], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,7e-08,8e-08,1e-07 2e-07,0.03,0.06,0.14,0.20 0.27,0.34,0.38,0.45), mean=0.0884, stddev=0.085], bias-{mean,stddev}=-3.927e-05,0.0008809, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000183231, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001418, w_fc-rms=0.001011, w_oc-rms=0.002652, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-8.72021e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.67,-0.20,-0.08,0.10 0.21,0.34,0.49,0.59,0.75 0.91,1.0,1.1,1.3), mean=0.477, stddev=0.232], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.24,-0.13,-0.06,0.008 0.07,0.13,0.23,0.26,0.29 0.33,0.36,0.39,0.46), mean=0.204, stddev=0.0959] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-8.72021e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.22,0.24,0.31 0.37,0.44,0.50,0.61,0.71 0.83,0.99,1.1,1.4), mean=0.537, stddev=0.159], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.18,-0.05,-0.0004,0.05 0.12,0.18,0.24,0.25,0.28 0.31,0.33,0.34,0.46), mean=0.218, stddev=0.0742] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.562845, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-2.7,-2.1,-1.4 -1.0,-0.68,0.005,0.82,1.2 1.7,2.2,2.7,3.2), mean=0.0779, stddev=0.977], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.8,-1.5,-1.4,-0.92 -0.42,-0.07,0.63,1.0,1.3 1.6,1.9,2.0,2.7), mean=0.509, stddev=0.791] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-8.72021e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.54,-0.23,-0.20,0.02 0.13,0.25,0.45,0.53,0.63 0.73,0.85,0.92,1.4), mean=0.407, stddev=0.223], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.41,-0.06,-0.05,0.04 0.09,0.14,0.23,0.26,0.30 0.35,0.40,0.46,0.57), mean=0.21, stddev=0.1] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-8.72021e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.9,-1.4,-1.3,-0.99 -0.71,-0.38,0.002,0.44,0.83 1.1,1.4,1.6,2.2), mean=0.0394, stddev=0.6], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.56,-0.26,-0.16,0.13 0.43,0.62,0.88,1.0,1.1 1.2,1.2,1.3,1.5), mean=0.806, stddev=0.309] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.75e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2619
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.290909
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000183231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003491, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.05,0.08,0.10,0.11 0.12,0.12,0.12,0.14), mean=0.0747, stddev=0.0274], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0001,0.0001,0.0003 0.001,0.04,0.06,0.07,0.07 0.08,0.09,0.09,0.12), mean=0.0504, stddev=0.025], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.08,0.16 0.20,0.24,0.25,0.32), mean=0.0351, stddev=0.0714], bias-{mean,stddev}=-0.0001003,0.003106, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000183231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004552, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.09,0.09,0.10 0.10,0.11,0.12,0.14,0.15 0.16,0.17,0.17,0.19), mean=0.125, stddev=0.0215], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.06,0.10,0.13,0.14 0.15,0.16,0.17,0.18), mean=0.0965, stddev=0.0383], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-09,3e-08,4e-08,5e-08 6e-08,1e-07,1e-05,0.15,0.25 0.31,0.37,0.40,0.51), mean=0.0642, stddev=0.11], bias-{mean,stddev}=4.792e-05,0.002599, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.34,0.62,0.87,1.1 1.3,1.5,1.6,3.2), mean=0.622, stddev=0.391], oderiv-count=4800
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3198.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.09,-0.06,-0.04,-0.01 0.006,0.04,0.12,0.19,0.22 0.27,0.31,0.32,0.40), mean=0.117, stddev=0.0854], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.03,0.09,0.15,0.19,0.21 0.23,0.26,0.30,0.37), mean=0.14, stddev=0.0669]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000183231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00337, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.12 0.12,0.12,0.13,0.14,0.15 0.15,0.16,0.16,0.17), mean=0.133, stddev=0.0101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.05,0.06,0.06 0.06,0.07,0.08,0.08,0.09 0.09,0.10,0.10,0.12), mean=0.0759, stddev=0.012], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.05,0.09,0.16,0.22 0.26,0.31,0.33,0.41), mean=0.113, stddev=0.0711], bias-{mean,stddev}=9.991e-05,0.003602, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=3.09e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.46,-0.36,-0.28,-0.20 -0.14,-0.05,0.15,0.32,0.41 0.47,0.53,0.60,0.71), mean=0.139, stddev=0.209], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.54,-0.18,-0.07,0.04 0.13,0.27,0.47,0.68,0.78 0.90,1.1,1.1,1.4), mean=0.473, stddev=0.266], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.02,0.03,0.03 0.04,0.04,0.05,0.06,0.06 0.07,0.07,0.08,0.09), mean=0.0509, stddev=0.0107], oderiv-count=89376
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3021.26, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.04,0.08,0.10,0.13 0.19,0.23,0.33,0.44,0.52 0.57,0.64,0.68,0.75), mean=0.34, stddev=0.13], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.11 0.30,0.43,0.62,0.78,0.87 0.94,1.1,1.2,1.4), mean=0.599, stddev=0.243]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000183231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001935, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-07,5e-07,1e-06 5e-06,0.0001,0.04,0.07,0.08 0.10,0.11,0.11,0.15), mean=0.0365, stddev=0.0332], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.05,0.09,0.10,0.11 0.11,0.12,0.12,0.14), mean=0.0831, stddev=0.0298], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,6e-08,6e-08,9e-08 2e-05,0.02,0.04,0.09,0.14 0.20,0.26,0.29,0.39), mean=0.0619, stddev=0.0629], bias-{mean,stddev}=-2.758e-05,0.0009519, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000183231, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0009425, w_fc-rms=0.0006906, w_oc-rms=0.001301, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-8.93253e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.004,0.11,0.19,0.28 0.35,0.43,0.50,0.56,0.65 0.79,0.87,0.90,1.1), mean=0.501, stddev=0.14], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.38,0.03,0.04,0.08 0.13,0.17,0.25,0.25,0.27 0.29,0.31,0.33,0.42), mean=0.217, stddev=0.0691] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-8.93253e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.28,0.32,0.38 0.43,0.47,0.50,0.58,0.68 0.76,0.87,0.93,1.1), mean=0.529, stddev=0.118], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.21,-0.02,0.03,0.08 0.14,0.18,0.25,0.25,0.26 0.29,0.31,0.33,0.38), mean=0.22, stddev=0.0673] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0936837, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.9,-2.3,-1.9,-1.3 -0.89,-0.41,0.004,0.55,0.97 1.4,1.9,2.2,3.0), mean=0.044, stddev=0.799], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.1,-1.5,-1.3,-0.83 -0.43,-0.05,0.76,1.0,1.0 1.3,1.6,1.9,2.4), mean=0.525, stddev=0.687] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-8.93253e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.22,-0.01,0.04,0.18 0.29,0.38,0.50,0.53,0.62 0.69,0.78,0.88,1.1), mean=0.468, stddev=0.153], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.47,-0.03,0.02,0.05 0.12,0.17,0.25,0.25,0.28 0.31,0.33,0.38,0.51), mean=0.216, stddev=0.0798] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-8.93253e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.2,-1.1,-0.84 -0.52,-0.17,0.003,0.32,0.57 0.85,1.0,1.1,2.0), mean=0.0286, stddev=0.456], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,0.03,0.10,0.25 0.37,0.64,0.91,1.0,1.0 1.0,1.1,1.1,1.3), mean=0.805, stddev=0.267] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.52e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2292
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.290909
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000183231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002536, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.05,0.07,0.08 0.08,0.08,0.08,0.09), mean=0.0555, stddev=0.0164], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0001,0.0002 0.0004,0.001,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.033, stddev=0.0241], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,9e-07,0.07,0.11 0.14,0.16,0.17,0.24), mean=0.0286, stddev=0.0503], bias-{mean,stddev}=-7.941e-05,0.002376, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000183231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003898, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.13,0.14,0.15,0.16), mean=0.108, stddev=0.0148], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.05,0.06,0.08,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.0851, stddev=0.0256], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,4e-08,6e-08 8e-08,1e-07,0.001,0.13,0.20 0.26,0.31,0.33,0.41), mean=0.0605, stddev=0.0905], bias-{mean,stddev}=-0.0001471,0.001829, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2844.31, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.10,-0.07,-0.06,-0.03 -0.01,0.009,0.07,0.12,0.15 0.18,0.21,0.23,0.31), mean=0.0673, stddev=0.0651], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.09,0.14,0.16 0.17,0.19,0.20,0.23), mean=0.0796, stddev=0.0633]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000183231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002863, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.10,0.11,0.12,0.13 0.13,0.14,0.14,0.15), mean=0.112, stddev=0.0122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.06,0.06,0.07,0.08 0.08,0.08,0.08,0.09), mean=0.0648, stddev=0.00796], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.04,0.07,0.14,0.18 0.23,0.27,0.28,0.44), mean=0.0938, stddev=0.0631], bias-{mean,stddev}=-0.0002371,0.00316, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2667.36, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.39,-0.13,-0.004,0.05 0.11,0.19,0.30,0.41,0.47 0.55,0.59,0.63,0.80), mean=0.294, stddev=0.15], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.50,0.71,0.79 0.88,0.99,1.0,1.3), mean=0.448, stddev=0.301]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000183231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00199, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.03,0.07,0.09 0.10,0.11,0.11,0.14), mean=0.042, stddev=0.0284], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.07,0.09,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.0888, stddev=0.0185], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,4e-07,1e-05 0.01,0.02,0.04,0.10,0.16 0.21,0.27,0.29,0.33), mean=0.0623, stddev=0.066], bias-{mean,stddev}=9.952e-05,0.0006153, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000183231, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001021, w_fc-rms=0.0008418, w_oc-rms=0.002005, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-9.1724e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,0.23,0.27,0.41 0.50,0.60,0.77,0.90,0.96 1.0,1.1,1.2,1.5), mean=0.749, stddev=0.209], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.24,-0.08,-0.04,0.04 0.09,0.12,0.17,0.23,0.25 0.28,0.31,0.33,0.71), mean=0.168, stddev=0.0793] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-9.1724e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,0.17,0.27,0.36 0.43,0.52,0.68,0.84,0.91 0.98,1.1,1.1,1.6), mean=0.677, stddev=0.197], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.17,0.003,0.03,0.06 0.09,0.12,0.18,0.23,0.26 0.29,0.33,0.34,0.55), mean=0.176, stddev=0.0733] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.28594, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.0,-4.2,-3.3,-2.6 -2.0,-1.3,-0.003,1.5,2.2 2.9,3.6,4.1,20), mean=0.12, stddev=1.97], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.2,-1.8,-1.6,-1.2 -0.67,-0.35,0.36,1.0,1.4 1.7,2.0,2.5,5.8), mean=0.332, stddev=0.936] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-9.1724e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.71,-0.20,-0.13,0.06 0.21,0.37,0.61,0.84,0.95 1.1,1.2,1.4,1.8), mean=0.604, stddev=0.316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.36,-0.08,-0.06,0.02 0.06,0.10,0.17,0.24,0.28 0.32,0.37,0.41,0.89), mean=0.173, stddev=0.102] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-9.1724e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.3,-2.7,-2.4,-1.8 -1.3,-0.91,-0.007,1.1,1.5 2.0,2.4,2.7,15), mean=0.0679, stddev=1.36], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-0.60,-0.34,-0.12 0.05,0.22,0.53,0.83,0.99 1.2,1.4,1.5,4.3), mean=0.529, stddev=0.453] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.29e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1918
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.290909
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000183231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002467, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.07,0.08 0.08,0.08,0.08,0.09), mean=0.0521, stddev=0.0212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.12), mean=0.039, stddev=0.00803], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,2e-07 3e-07,1e-06,0.006,0.07,0.10 0.13,0.15,0.17,0.22), mean=0.0326, stddev=0.0459], bias-{mean,stddev}=0.0003997,0.01898, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000183231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003492, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.05,0.07,0.08 0.09,0.10,0.11,0.22), mean=0.0531, stddev=0.0186], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.10,0.13,0.21,0.21 0.22,0.23,0.23,0.24), mean=0.151, stddev=0.0529], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,3e-07 4e-07,1e-06,0.003,0.23,0.31 0.37,0.40,0.42,0.47), mean=0.0894, stddev=0.133], bias-{mean,stddev}=2.966e-11,0.0007661, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.05403 tdnn2.affine:3.97438 lstm1.W_all:3.12762 lstm1.lstm_nonlin:0.0723493 lstm1.W_rp:1.28443 tdnn3.affine:2.89961 tdnn4.affine:3.0364 lstm2.W_all:2.25038 lstm2.lstm_nonlin:0.0398832 lstm2.W_rp:0.933348 tdnn5.affine:2.48295 tdnn6.affine:2.57965 lstm3.W_all:2.31349 lstm3.lstm_nonlin:0.0547765 lstm3.W_rp:0.957485 output.affine:2.58312 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.4895 tdnn2.affine:10.6574 lstm1.W_all:20.6508 lstm1.lstm_nonlin:2.31035 lstm1.W_rp:15.4372 tdnn3.affine:8.62185 tdnn4.affine:7.95073 lstm2.W_all:17.2539 lstm2.lstm_nonlin:1.5656 lstm2.W_rp:14.8174 tdnn5.affine:8.26323 tdnn6.affine:7.82314 lstm3.W_all:24.313 lstm3.lstm_nonlin:3.03971 lstm3.W_rp:35.5424 output.affine:32.7845 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.323348 tdnn2.affine:0.371109 lstm1.W_all:0.151336 lstm1.lstm_nonlin:0.0314794 lstm1.W_rp:0.0831976 tdnn3.affine:0.333228 tdnn4.affine:0.379414 lstm2.W_all:0.130335 lstm2.lstm_nonlin:0.0256534 lstm2.W_rp:0.0630221 tdnn5.affine:0.298346 tdnn6.affine:0.32813 lstm3.W_all:0.095067 lstm3.lstm_nonlin:0.0180081 lstm3.W_rp:0.0269573 output.affine:0.0787525 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:03:48 KST 2020, elapsed time 1 seconds
