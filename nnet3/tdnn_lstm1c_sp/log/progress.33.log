# nnet3-info exp/nnet3/tdnn_lstm1c_sp/33.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/32.mdl exp/nnet3/tdnn_lstm1c_sp/33.mdl 
# Started at Thu Jul 30 10:14:11 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/33.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000271047, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03096, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.009,0.01,0.02 0.05,0.27,0.54,0.64,0.70 0.74,0.87,0.89,1.1), mean=0.486, stddev=0.227], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.16 0.18,0.21,0.60,0.82,1.1 1.5,1.5,1.6,1.7), mean=0.597, stddev=0.376], bias-{mean,stddev}=0.00226,0.05457, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0.142335, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,6e-06,2e-05 0.0001,0.004,0.07,0.09,0.10 0.12,0.14,0.14,0.18), mean=0.0594, stddev=0.0384], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.002,0.01 0.03,0.15,0.47,0.59,0.68 0.78,0.85,0.87,0.92), mean=0.417, stddev=0.233], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.09,0.25,0.34,0.43,0.48 0.54,0.60,0.65,1.1), mean=0.328, stddev=0.145], oderiv-count=1.11962e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=41790.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,1e-06,2e-06,1e-05 0.0001,0.007,0.06,0.08,0.10 0.12,0.13,0.14,0.18), mean=0.0552, stddev=0.0373], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,6e-05,8e-05,0.0002 0.001,0.03,0.09,0.11,0.12 0.13,0.13,0.14,0.16), mean=0.08, stddev=0.0424]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000271047, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01287, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.42 0.44,0.46,0.50,0.55,0.57 0.59,0.63,0.65,0.71), mean=0.505, stddev=0.0541], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.008,0.01 0.03,0.18,0.31,0.35,0.37 0.40,0.43,0.45,0.68), mean=0.268, stddev=0.12], bias-{mean,stddev}=-0.0008912,0.02701, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.30 0.31,0.32,0.35,0.39,0.41 0.43,0.44,0.46,0.58), mean=0.358, stddev=0.0395], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.41 0.43,0.44,0.46,0.49,0.50 0.51,0.53,0.53,0.55), mean=0.462, stddev=0.0304], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0398, stddev=0.00769], oderiv-count=1.20749e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40869.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.29 0.30,0.31,0.35,0.39,0.41 0.43,0.46,0.48,0.60), mean=0.352, stddev=0.0467], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.49,0.51,0.52 0.54,0.56,0.61,0.67,0.71 0.74,0.80,0.81,0.86), mean=0.619, stddev=0.0679]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000271047, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01765, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.09 0.15,0.22,0.38,0.57,0.68 0.76,0.85,0.92,1.1), mean=0.402, stddev=0.203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.39,0.44 0.49,0.70,0.83,0.91,0.95 0.99,1.0,1.1,1.4), mean=0.788, stddev=0.166], bias-{mean,stddev}=-0.001633,0.03125, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000271047, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03433, w_fc-rms=0.04823, w_oc-rms=0.05376, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00611247, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.44 0.45,0.46,0.49,0.53,0.58 0.63,0.66,0.67,0.73), mean=0.501, stddev=0.0553], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0149] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00611247, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.36,0.39 0.41,0.43,0.47,0.54,0.62 0.69,0.76,0.81,0.88), mean=0.491, stddev=0.0927], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.17,0.19 0.21,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0214] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00635766, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.80,-0.77,-0.65 -0.43,-0.24,0.02,0.27,0.38 0.63,0.73,0.78,0.85), mean=0.0089, stddev=0.339], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.30,0.34 0.39,0.45,0.57,0.69,0.79 0.89,0.95,0.96,1.0), mean=0.58, stddev=0.155] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00611247, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.41 0.42,0.44,0.47,0.51,0.53 0.55,0.59,0.61,0.68), mean=0.475, stddev=0.0459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.22,0.24,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0173] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0174517, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.96,-0.84,-0.80,-0.64 -0.34,-0.19,0.0006,0.22,0.33 0.61,0.74,0.78,0.90), mean=0.0037, stddev=0.317], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.21,0.26,0.39 0.53,0.71,0.82,0.88,0.91 0.94,0.97,0.98,1.0), mean=0.774, stddev=0.164] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=297198
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000271047, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03192, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.37,0.38 0.40,0.44,0.63,0.94,1.0 1.0,1.1,1.1,1.2), mean=0.687, stddev=0.239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.08,0.15 0.26,0.35,0.48,0.61,0.71 0.78,0.91,0.96,1.2), mean=0.481, stddev=0.183], bias-{mean,stddev}=0.001374,0.05112, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000271047, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01311, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.26 0.27,0.30,0.35,0.42,0.46 0.49,0.53,0.55,0.61), mean=0.359, stddev=0.0708], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.26,0.39,0.42 0.44,0.48,0.50,0.51), mean=0.28, stddev=0.104], bias-{mean,stddev}=-0.003754,0.01441, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.08 0.09,0.11,0.16,0.19,0.22 0.24,0.25,0.27,0.33), mean=0.155, stddev=0.0484], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.20,0.21,0.27 0.32,0.38,0.49,0.59,0.62 0.66,0.70,0.71,0.73), mean=0.482, stddev=0.12], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.06,0.06,0.07,0.08 0.09,0.10,0.11,0.14), mean=0.0651, stddev=0.0123], oderiv-count=1.1296e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38104.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.07 0.08,0.10,0.15,0.19,0.21 0.23,0.25,0.27,0.31), mean=0.147, stddev=0.0501], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.14,0.16,0.18 0.19,0.20,0.23,0.27,0.29 0.31,0.33,0.34,0.44), mean=0.236, stddev=0.0413]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000271047, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009585, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.31,0.32 0.33,0.34,0.37,0.41,0.42 0.44,0.46,0.48,0.53), mean=0.377, stddev=0.0387], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.16,0.17 0.18,0.19,0.21,0.24,0.26 0.27,0.30,0.31,0.36), mean=0.216, stddev=0.0333], bias-{mean,stddev}=-0.008307,0.0157, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.08e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.25 0.27,0.28,0.31,0.35,0.37 0.38,0.41,0.42,0.45), mean=0.316, stddev=0.0402], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.40,0.42,0.44,0.48,0.49 0.50,0.51,0.51,0.53), mean=0.445, stddev=0.0326], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.0284, stddev=0.0026], oderiv-count=1.10547e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35339.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.23,0.25 0.26,0.27,0.30,0.34,0.37 0.38,0.42,0.45,0.50), mean=0.31, stddev=0.0452], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.47,0.49 0.51,0.53,0.58,0.63,0.68 0.71,0.77,0.78,0.94), mean=0.586, stddev=0.0699]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000271047, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01368, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.05,0.09,0.27,0.47,0.57 0.62,0.68,0.72,1.1), mean=0.291, stddev=0.192], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.27,0.31 0.36,0.53,0.64,0.71,0.75 0.78,0.84,0.86,0.93), mean=0.608, stddev=0.139], bias-{mean,stddev}=-0.001924,0.03142, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000271047, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03006, w_fc-rms=0.03428, w_oc-rms=0.03424, count=1.32e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616924, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.42,0.43,0.45 0.46,0.47,0.49,0.52,0.54 0.57,0.61,0.62,0.64), mean=0.495, stddev=0.0384], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0153] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616924, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.39,0.41 0.42,0.44,0.49,0.51,0.54 0.60,0.66,0.68,0.76), mean=0.484, stddev=0.0578], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.238, stddev=0.0139] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0081876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.72,-0.64,-0.48 -0.34,-0.18,0.01,0.21,0.34 0.51,0.60,0.67,0.76), mean=0.00676, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.43,0.45,0.49 0.53,0.57,0.65,0.85,0.95 0.98,0.99,0.99,1.0), mean=0.691, stddev=0.154] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616924, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.42,0.43 0.44,0.46,0.48,0.51,0.53 0.55,0.59,0.60,0.63), mean=0.485, stddev=0.0367], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0158] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00616924, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.72,-0.62,-0.42 -0.30,-0.15,0.01,0.18,0.32 0.47,0.61,0.70,0.83), mean=0.00934, stddev=0.257], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.40,0.44,0.63 0.75,0.80,0.87,0.93,0.97 0.99,0.99,1.0,1.0), mean=0.852, stddev=0.114] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=261996
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000271047, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02876, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.45 0.48,0.50,0.60,0.78,0.83 0.88,0.94,0.95,0.99), mean=0.64, stddev=0.141], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.06 0.09,0.17,0.41,0.60,0.69 0.78,0.88,0.94,1.1), mean=0.405, stddev=0.226], bias-{mean,stddev}=0.001036,0.08634, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000271047, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01246, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.20,0.21,0.23 0.24,0.27,0.32,0.40,0.45 0.51,0.59,0.61,0.71), mean=0.336, stddev=0.0903], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.17,0.18 0.20,0.21,0.27,0.34,0.37 0.40,0.42,0.43,0.47), mean=0.276, stddev=0.067], bias-{mean,stddev}=-0.0008206,0.01883, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.13e+05, self-repaired-proportion=0.00210623, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.02,0.03,0.05 0.06,0.07,0.11,0.14,0.16 0.17,0.18,0.20,0.23), mean=0.109, stddev=0.0393], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.13,0.15,0.19 0.25,0.31,0.43,0.54,0.59 0.61,0.65,0.67,0.72), mean=0.422, stddev=0.129], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.06 0.06,0.06,0.07,0.08,0.10 0.11,0.13,0.13,0.18), mean=0.0736, stddev=0.0183], oderiv-count=956672
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32574.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.03,0.04 0.05,0.07,0.10,0.14,0.16 0.18,0.20,0.20,0.23), mean=0.106, stddev=0.0411], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.07,0.08,0.13 0.14,0.16,0.18,0.22,0.24 0.26,0.28,0.29,0.36), mean=0.188, stddev=0.0427]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000271047, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009446, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.29,0.29,0.30 0.32,0.33,0.36,0.41,0.43 0.46,0.49,0.52,0.58), mean=0.37, stddev=0.0486], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.11,0.13,0.15 0.16,0.17,0.20,0.24,0.27 0.29,0.34,0.37,0.45), mean=0.21, stddev=0.0492], bias-{mean,stddev}=-0.01006,0.01495, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.05e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.24,0.25 0.27,0.29,0.32,0.35,0.37 0.39,0.42,0.43,0.63), mean=0.322, stddev=0.0445], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.36,0.37 0.38,0.40,0.42,0.45,0.47 0.48,0.49,0.50,0.52), mean=0.426, stddev=0.0326], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0244, stddev=0.00254], oderiv-count=972160
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29810, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.22,0.24 0.26,0.28,0.32,0.36,0.37 0.40,0.42,0.45,0.67), mean=0.319, stddev=0.0506], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.47,0.49 0.51,0.54,0.60,0.68,0.73 0.80,0.83,0.86,1.3), mean=0.617, stddev=0.0951]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000271047, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01931, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.22 0.27,0.34,0.43,0.60,0.74 0.79,0.84,0.87,1.6), mean=0.462, stddev=0.169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.61,0.62,0.64 0.66,0.68,0.75,1.1,1.3 1.3,1.4,1.5,1.6), mean=0.85, stddev=0.231], bias-{mean,stddev}=0.008383,0.03905, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000271047, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0393, w_fc-rms=0.05012, w_oc-rms=0.06064, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623787, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.46 0.48,0.51,0.57,0.62,0.64 0.66,0.68,0.69,0.74), mean=0.565, stddev=0.0626], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.18,0.18 0.19,0.20,0.21,0.22,0.22 0.23,0.23,0.23,0.24), mean=0.206, stddev=0.0132] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623787, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.47 0.50,0.52,0.59,0.64,0.66 0.68,0.71,0.73,0.82), mean=0.582, stddev=0.0648], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.18 0.18,0.19,0.21,0.22,0.23 0.23,0.23,0.24,0.24), mean=0.206, stddev=0.017] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00936291, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.80,-0.70,-0.48 -0.34,-0.22,-0.007,0.20,0.36 0.53,0.65,0.72,0.86), mean=-0.000692, stddev=0.293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.25,0.26,0.31 0.36,0.40,0.46,0.51,0.53 0.56,0.59,0.62,0.66), mean=0.452, stddev=0.073] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623787, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.52,0.53,0.54 0.56,0.59,0.63,0.68,0.70 0.72,0.74,0.75,0.81), mean=0.634, stddev=0.0528], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.16,0.17 0.17,0.18,0.19,0.20,0.21 0.21,0.21,0.22,0.23), mean=0.19, stddev=0.0132] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0127855, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.82,-0.73,-0.51 -0.31,-0.18,-0.01,0.19,0.34 0.51,0.66,0.70,0.89), mean=0.00145, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.27,0.34,0.44 0.52,0.58,0.66,0.70,0.72 0.74,0.75,0.76,0.81), mean=0.632, stddev=0.0965] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222670
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000271047, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06607, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.5,1.7,1.7 1.8,1.9,1.9,2.0), mean=1.49, stddev=0.201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.59,0.66,0.77 0.82,0.90,1.1,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.05, stddev=0.177], bias-{mean,stddev}=0.002904,0.1074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000271047, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04108, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.52,0.55 0.57,0.59,0.64,0.71,0.75 0.78,0.83,0.86,2.3), mean=0.655, stddev=0.101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.6,1.7,1.9,2.0,2.1 2.2,2.3,2.4,2.6), mean=1.87, stddev=0.216], bias-{mean,stddev}=5.992e-09,0.0315, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0166, stddev=0.014], oderiv-count=597760
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/32.mdl exp/nnet3/tdnn_lstm1c_sp/33.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.07279 tdnn2.affine:9.2668 lstm1.W_all:8.04983 lstm1.lstm_nonlin:0.188267 lstm1.W_rp:3.32683 tdnn3.affine:5.59561 tdnn4.affine:6.61018 lstm2.W_all:5.3478 lstm2.lstm_nonlin:0.136211 lstm2.W_rp:2.24824 tdnn5.affine:4.59134 tdnn6.affine:5.66056 lstm3.W_all:6.93294 lstm3.lstm_nonlin:0.19383 lstm3.W_rp:2.83069 output.affine:6.31815 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.2904 tdnn2.affine:11.6076 lstm1.W_all:20.5698 lstm1.lstm_nonlin:1.82353 lstm1.W_rp:11.7641 tdnn3.affine:8.3588 tdnn4.affine:8.64247 lstm2.W_all:15.97 lstm2.lstm_nonlin:1.30018 lstm2.W_rp:10.6661 tdnn5.affine:7.94923 tdnn6.affine:8.51805 lstm3.W_all:22.5223 lstm3.lstm_nonlin:2.00546 lstm3.W_rp:24.3564 output.affine:30.4162 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.736328 tdnn2.affine:0.79676 lstm1.W_all:0.390678 lstm1.lstm_nonlin:0.100377 lstm1.W_rp:0.283583 tdnn3.affine:0.663419 tdnn4.affine:0.758852 lstm2.W_all:0.333946 lstm2.lstm_nonlin:0.0979498 lstm2.W_rp:0.212618 tdnn5.affine:0.577702 tdnn6.affine:0.662716 lstm3.W_all:0.307965 lstm3.lstm_nonlin:0.0948744 lstm3.W_rp:0.116263 output.affine:0.207709 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:14:11 KST 2020, elapsed time 0 seconds
