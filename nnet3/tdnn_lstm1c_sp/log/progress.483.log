# nnet3-info exp/nnet3/tdnn_lstm1c_sp/483.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/482.mdl exp/nnet3/tdnn_lstm1c_sp/483.mdl 
# Started at Thu Jul 30 13:12:45 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/483.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=6.0766e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0322, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.007 0.01,0.03,0.56,0.72,0.79 0.84,0.92,0.97,1.3), mean=0.469, stddev=0.302], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.17 0.19,0.23,0.69,0.93,1.1 1.3,1.3,1.4,1.4), mean=0.645, stddev=0.35], bias-{mean,stddev}=-0.008771,0.05878, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.61e+05, self-repaired-proportion=0.158424, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,2e-05,3e-05,4e-05 7e-05,0.0002,0.03,0.08,0.10 0.12,0.13,0.14,0.20), mean=0.0413, stddev=0.0428], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.05,0.07,0.34,0.59,0.71 0.79,0.86,0.90,0.98), mean=0.339, stddev=0.263], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.01 0.02,0.06,0.47,0.69,0.81 0.90,1.0,1.1,1.7), mean=0.447, stddev=0.298], oderiv-count=1.11411e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37474.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,2e-05,2e-05,5e-05 7e-05,0.0002,0.03,0.08,0.10 0.12,0.14,0.14,0.20), mean=0.0402, stddev=0.0421], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0001,0.0002,0.0002 0.0004,0.001,0.07,0.10,0.12 0.13,0.14,0.14,0.15), mean=0.0565, stddev=0.047]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.0766e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01128, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.33,0.34 0.36,0.39,0.43,0.49,0.53 0.57,0.61,0.63,0.70), mean=0.44, stddev=0.0686], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.005,0.01,0.27,0.32,0.36 0.38,0.42,0.48,0.76), mean=0.215, stddev=0.141], bias-{mean,stddev}=-0.0352,0.03672, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.27e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.17,0.18 0.19,0.20,0.24,0.27,0.30 0.31,0.32,0.33,0.42), mean=0.24, stddev=0.0407], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.35,0.37,0.39 0.40,0.41,0.44,0.47,0.49 0.51,0.53,0.53,0.55), mean=0.442, stddev=0.039], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.06,0.07,0.08 0.08,0.10,0.10,0.13), mean=0.0592, stddev=0.0126], oderiv-count=1.12138e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36667.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.18 0.19,0.20,0.24,0.27,0.30 0.31,0.33,0.35,0.43), mean=0.242, stddev=0.043], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.32,0.34 0.36,0.39,0.44,0.49,0.52 0.55,0.57,0.58,0.64), mean=0.437, stddev=0.0603]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.0766e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01719, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,5e-07,1e-06,8e-06 0.0002,0.19,0.39,0.58,0.65 0.71,0.80,0.90,1.1), mean=0.375, stddev=0.226], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.38,0.41 0.46,0.67,0.79,0.88,0.95 1.0,1.1,1.1,1.3), mean=0.764, stddev=0.174], bias-{mean,stddev}=-0.0001374,0.02043, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.0766e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03926, w_fc-rms=0.02174, w_oc-rms=0.03722, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00648275, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.43 0.44,0.45,0.48,0.50,0.55 0.63,0.70,0.71,0.75), mean=0.489, stddev=0.0592], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.014] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00648275, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.45,0.46,0.50,0.51,0.55 0.61,0.65,0.70,0.75), mean=0.499, stddev=0.0506], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0123] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00649522, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.81,-0.76,-0.43 -0.27,-0.13,0.0003,0.15,0.26 0.56,0.73,0.78,0.85), mean=0.0131, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.30,0.32,0.37 0.42,0.46,0.58,0.71,1.0 1.0,1.0,1.0,1.0), mean=0.619, stddev=0.198] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00648275, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.53,0.55,0.59,0.65), mean=0.462, stddev=0.0423], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0179] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0104464, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.84,-0.77,-0.40 -0.22,-0.11,0.0005,0.14,0.24 0.48,0.68,0.80,0.92), mean=0.0106, stddev=0.258], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.25,0.30,0.44 0.64,0.73,0.83,0.90,1.0 1.0,1.0,1.0,1.0), mean=0.807, stddev=0.157] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.54541e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.0189e-05, count-zeroing-boundaries=294435
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00330579
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.0766e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03761, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.44,0.45 0.50,0.55,0.81,1.1,1.1 1.2,1.2,1.3,1.3), mean=0.818, stddev=0.257], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0005,0.0008,0.002 0.006,0.40,0.55,0.71,0.84 0.98,1.2,1.3,1.5), mean=0.53, stddev=0.295], bias-{mean,stddev}=0.009732,0.2119, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=6.0766e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01219, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.25,0.26 0.27,0.29,0.33,0.38,0.41 0.44,0.46,0.47,0.54), mean=0.336, stddev=0.0543], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.16,0.18,0.26,0.34,0.38 0.41,0.43,0.44,0.46), mean=0.264, stddev=0.0859], bias-{mean,stddev}=0.0009472,0.01049, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.59e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.02 0.03,0.04,0.09,0.12,0.14 0.15,0.17,0.17,0.19), mean=0.0842, stddev=0.0398], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.12,0.14 0.20,0.28,0.41,0.53,0.59 0.63,0.66,0.70,0.84), mean=0.406, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.11,0.14,0.17 0.20,0.23,0.26,0.30), mean=0.12, stddev=0.0387], oderiv-count=1.04934e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34246.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.02 0.03,0.05,0.08,0.12,0.13 0.15,0.16,0.17,0.19), mean=0.0832, stddev=0.0385], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.08 0.09,0.11,0.14,0.17,0.18 0.20,0.21,0.22,0.25), mean=0.142, stddev=0.0366]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.0766e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008064, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.27 0.28,0.29,0.31,0.35,0.36 0.38,0.40,0.40,0.43), mean=0.317, stddev=0.0345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.14,0.15,0.18,0.20,0.22 0.24,0.27,0.29,0.37), mean=0.181, stddev=0.0332], bias-{mean,stddev}=-0.02853,0.01614, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.27e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.24,0.27,0.29 0.30,0.32,0.32,0.38), mean=0.237, stddev=0.0348], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.34,0.35,0.37 0.38,0.39,0.42,0.44,0.46 0.47,0.48,0.49,0.51), mean=0.418, stddev=0.0308], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.04,0.04,0.05,0.05), mean=0.0379, stddev=0.00282], oderiv-count=1.05456e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31825.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.19 0.20,0.21,0.24,0.27,0.28 0.30,0.32,0.33,0.39), mean=0.239, stddev=0.0351], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.37,0.39 0.41,0.43,0.47,0.52,0.54 0.57,0.60,0.62,0.76), mean=0.473, stddev=0.0576]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.0766e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01405, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-06,4e-06,1e-05 5e-05,0.0008,0.31,0.50,0.58 0.63,0.68,0.71,0.81), mean=0.277, stddev=0.228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.29,0.33 0.39,0.57,0.65,0.72,0.76 0.79,0.85,0.88,1.3), mean=0.626, stddev=0.136], bias-{mean,stddev}=0.001837,0.02441, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.0766e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02542, w_fc-rms=0.01398, w_oc-rms=0.03419, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00654097, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.45,0.46 0.47,0.48,0.50,0.51,0.54 0.57,0.60,0.63,0.69), mean=0.499, stddev=0.0343], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0127] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00654097, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.45,0.45 0.46,0.47,0.50,0.50,0.53 0.55,0.58,0.61,0.67), mean=0.497, stddev=0.0305], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0106] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00654097, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.71,-0.62,-0.35 -0.20,-0.08,-7e-05,0.10,0.26 0.39,0.52,0.59,0.72), mean=0.0045, stddev=0.216], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.39,0.41,0.46 0.50,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.725, stddev=0.21] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00654097, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.45,0.47,0.50,0.50,0.51 0.52,0.55,0.56,0.74), mean=0.487, stddev=0.0301], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.017] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00654097, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.62,-0.58,-0.31 -0.18,-0.09,-5e-06,0.11,0.23 0.36,0.48,0.54,0.74), mean=0.0047, stddev=0.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.49,0.57,0.64 0.71,0.77,0.86,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.865, stddev=0.125] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.85178e-06, count-zeroing-boundaries=259620
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00330579
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.0766e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03545, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.51 0.53,0.58,0.77,0.98,1.0 1.1,1.1,1.1,1.3), mean=0.783, stddev=0.202], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.004,0.01,0.58,0.76,0.84 0.93,1.0,1.1,1.2), mean=0.456, stddev=0.344], bias-{mean,stddev}=-0.003599,0.1715, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=6.0766e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0114, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.22,0.23 0.25,0.26,0.30,0.36,0.40 0.42,0.46,0.48,0.52), mean=0.313, stddev=0.0594], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.23,0.33,0.36 0.38,0.41,0.42,0.45), mean=0.249, stddev=0.0756], bias-{mean,stddev}=0.00212,0.007446, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.89e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.03,0.04,0.06,0.09,0.11 0.12,0.14,0.15,0.16), mean=0.0653, stddev=0.0309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.14 0.19,0.26,0.39,0.49,0.54 0.57,0.61,0.62,0.65), mean=0.375, stddev=0.128], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.08 0.09,0.09,0.11,0.13,0.16 0.19,0.21,0.22,0.26), mean=0.119, stddev=0.0318], oderiv-count=1.02541e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29405.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.06,0.09,0.11 0.12,0.14,0.15,0.16), mean=0.0673, stddev=0.0303], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.10,0.12,0.15,0.17 0.17,0.18,0.19,0.20), mean=0.122, stddev=0.0311]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.0766e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008079, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.18,0.23 0.26,0.28,0.31,0.36,0.38 0.40,0.40,0.41,0.44), mean=0.315, stddev=0.0519], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.12,0.13 0.14,0.15,0.17,0.20,0.23 0.26,0.31,0.34,0.40), mean=0.179, stddev=0.0416], bias-{mean,stddev}=-0.02435,0.02024, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.42e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.18 0.19,0.21,0.24,0.28,0.29 0.30,0.32,0.33,0.37), mean=0.245, stddev=0.0402], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.35,0.36 0.38,0.39,0.41,0.44,0.45 0.47,0.48,0.49,0.50), mean=0.413, stddev=0.0302], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0313, stddev=0.00386], oderiv-count=909920
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26984.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.18 0.19,0.22,0.25,0.28,0.30 0.31,0.33,0.34,0.40), mean=0.248, stddev=0.0413], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.24,0.34 0.38,0.42,0.49,0.55,0.59 0.62,0.66,0.68,0.83), mean=0.486, stddev=0.0888]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.0766e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01995, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.24 0.26,0.31,0.45,0.66,0.73 0.78,0.81,0.84,0.91), mean=0.479, stddev=0.171], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.53,0.64 0.70,0.73,0.81,1.1,1.2 1.3,1.4,1.5,1.7), mean=0.884, stddev=0.217], bias-{mean,stddev}=0.01306,0.01615, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.0766e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06557, w_fc-rms=0.03745, w_oc-rms=0.0507, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00661131, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.54,0.55,0.56 0.59,0.62,0.66,0.71,0.73 0.75,0.76,0.76,0.81), mean=0.661, stddev=0.0526], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.17,0.18,0.19,0.20,0.20 0.20,0.21,0.21,0.22), mean=0.189, stddev=0.0121] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00661131, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.50,0.51,0.53 0.54,0.57,0.60,0.64,0.70 0.74,0.77,0.77,0.82), mean=0.61, stddev=0.0595], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.18,0.19,0.20,0.21,0.22 0.22,0.22,0.22,0.22), mean=0.2, stddev=0.0149] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00675124, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.76,-0.68,-0.53 -0.41,-0.27,-0.02,0.24,0.38 0.52,0.65,0.74,0.84), mean=-0.00804, stddev=0.311], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.27,0.30 0.32,0.35,0.40,0.44,0.46 0.48,0.51,0.51,0.54), mean=0.394, stddev=0.0553] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00661131, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.51,0.52,0.55 0.56,0.59,0.63,0.67,0.69 0.72,0.75,0.77,0.91), mean=0.633, stddev=0.0534], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.14,0.14,0.15 0.16,0.16,0.18,0.18,0.19 0.19,0.19,0.19,0.20), mean=0.173, stddev=0.0137] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0275401, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.83,-0.73,-0.60 -0.40,-0.26,-0.02,0.23,0.36 0.54,0.69,0.78,0.90), mean=-0.0118, stddev=0.321], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.20,0.28 0.35,0.43,0.53,0.58,0.61 0.63,0.64,0.65,0.68), mean=0.504, stddev=0.104] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=220703
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00330579
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.0766e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0841, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,1.0,1.0,1.1 1.1,1.2,1.7,2.4,2.5 2.6,2.7,2.7,2.9), mean=1.82, stddev=0.591], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.99,1.0,1.1 1.1,1.2,1.3,1.5,1.6 1.7,1.8,1.8,1.9), mean=1.34, stddev=0.192], bias-{mean,stddev}=-0.03432,0.3478, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=6.0766e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04004, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.54,0.55,0.56 0.58,0.60,0.63,0.67,0.70 0.73,0.77,0.81,2.2), mean=0.64, stddev=0.0826], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.96,1.0,1.0 1.1,1.1,1.5,2.3,2.4 2.5,2.5,2.5,2.6), mean=1.75, stddev=0.568], bias-{mean,stddev}=2.847e-09,0.02538, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0169, stddev=0.0137], oderiv-count=592320
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/482.mdl exp/nnet3/tdnn_lstm1c_sp/483.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.51627 tdnn2.affine:2.27492 lstm1.W_all:1.69315 lstm1.lstm_nonlin:0.0306102 lstm1.W_rp:0.778992 tdnn3.affine:1.57234 tdnn4.affine:1.60634 lstm2.W_all:1.14689 lstm2.lstm_nonlin:0.016712 lstm2.W_rp:0.535391 tdnn5.affine:1.32266 tdnn6.affine:1.45113 lstm3.W_all:1.70362 lstm3.lstm_nonlin:0.0377774 lstm3.W_rp:0.575919 output.affine:1.2097 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.7893 tdnn2.affine:10.2275 lstm1.W_all:20.0066 lstm1.lstm_nonlin:1.32941 lstm1.W_rp:14.2464 tdnn3.affine:7.76475 tdnn4.affine:7.3015 lstm2.W_all:16.3789 lstm2.lstm_nonlin:1.0225 lstm2.W_rp:13.3246 tdnn5.affine:7.26305 tdnn6.affine:7.3123 lstm3.W_all:23.219 lstm3.lstm_nonlin:2.0741 lstm3.W_rp:31.4339 output.affine:29.634 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.19677 tdnn2.affine:0.222303 lstm1.W_all:0.0845927 lstm1.lstm_nonlin:0.0229411 lstm1.W_rp:0.0545938 tdnn3.affine:0.202338 tdnn4.affine:0.219951 lstm2.W_all:0.0699959 lstm2.lstm_nonlin:0.0162879 lstm2.W_rp:0.04013 tdnn5.affine:0.182123 tdnn6.affine:0.198331 lstm3.W_all:0.0732969 lstm3.lstm_nonlin:0.0180498 lstm3.W_rp:0.0182927 output.affine:0.0407866 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 13:12:46 KST 2020, elapsed time 1 seconds
