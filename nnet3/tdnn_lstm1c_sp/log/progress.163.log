# nnet3-info exp/nnet3/tdnn_lstm1c_sp/163.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/162.mdl exp/nnet3/tdnn_lstm1c_sp/163.mdl 
# Started at Thu Jul 30 11:05:33 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/163.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000179465, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02955, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.02 0.03,0.36,0.52,0.61,0.67 0.73,0.81,0.88,1.2), mean=0.461, stddev=0.223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.17,0.20,0.58,0.81,1.1 1.3,1.4,1.5,1.7), mean=0.574, stddev=0.352], bias-{mean,stddev}=0.005503,0.05408, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0.125107, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-05,2e-05,4e-05 0.0001,0.005,0.06,0.09,0.10 0.11,0.12,0.13,0.17), mean=0.0559, stddev=0.0364], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.002,0.006,0.02 0.05,0.14,0.48,0.63,0.73 0.79,0.84,0.87,0.98), mean=0.439, stddev=0.24], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.06,0.26,0.36,0.46,0.51 0.59,0.66,0.74,1.7), mean=0.349, stddev=0.174], oderiv-count=1.12192e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33120.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,5e-06,9e-06,2e-05 8e-05,0.003,0.06,0.08,0.10 0.11,0.12,0.14,0.19), mean=0.0546, stddev=0.0368], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,9e-05,0.0001,0.0003 0.0006,0.01,0.09,0.11,0.11 0.12,0.13,0.13,0.14), mean=0.0758, stddev=0.0407]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000179465, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01198, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.39 0.41,0.43,0.47,0.51,0.53 0.56,0.59,0.61,0.78), mean=0.47, stddev=0.0534], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.007,0.01 0.02,0.19,0.28,0.32,0.35 0.36,0.39,0.42,0.75), mean=0.247, stddev=0.116], bias-{mean,stddev}=-0.001105,0.02831, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.27 0.28,0.29,0.32,0.35,0.37 0.39,0.40,0.44,0.56), mean=0.324, stddev=0.0379], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.40,0.42 0.43,0.44,0.46,0.49,0.50 0.51,0.52,0.53,0.55), mean=0.461, stddev=0.0291], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0453, stddev=0.00889], oderiv-count=1.1817e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32398.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.27 0.28,0.29,0.32,0.35,0.37 0.39,0.42,0.45,0.54), mean=0.323, stddev=0.04], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.47,0.48 0.50,0.52,0.57,0.62,0.64 0.67,0.73,0.75,0.85), mean=0.572, stddev=0.062]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000179465, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01629, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,0.0005,0.002,0.01 0.05,0.19,0.36,0.54,0.62 0.69,0.79,0.84,1.1), mean=0.362, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.34,0.36,0.41 0.47,0.63,0.76,0.83,0.88 0.93,1.0,1.0,1.4), mean=0.727, stddev=0.154], bias-{mean,stddev}=-0.0004686,0.02431, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000179465, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02243, w_fc-rms=0.03314, w_oc-rms=0.03857, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622214, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.43,0.43,0.45 0.46,0.47,0.49,0.52,0.56 0.59,0.66,0.69,0.76), mean=0.499, stddev=0.0495], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0147] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622214, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.38,0.40 0.42,0.45,0.49,0.52,0.59 0.64,0.75,0.78,0.84), mean=0.495, stddev=0.0751], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.18,0.20 0.22,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0178] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00813325, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.80,-0.76,-0.54 -0.37,-0.21,0.003,0.21,0.34 0.50,0.69,0.81,0.86), mean=-0.00228, stddev=0.298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.29,0.36 0.42,0.48,0.59,0.74,0.97 1.0,1.0,1.0,1.0), mean=0.624, stddev=0.182] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622214, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.43,0.45,0.47,0.50,0.53 0.55,0.57,0.58,0.61), mean=0.477, stddev=0.0379], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.0168] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.013085, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.94,-0.77,-0.73,-0.48 -0.31,-0.18,0.002,0.18,0.28 0.45,0.62,0.81,0.91), mean=-0.00155, stddev=0.274], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.23,0.28,0.48 0.62,0.74,0.84,0.90,0.99 1.0,1.0,1.0,1.0), mean=0.807, stddev=0.151] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=297483
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0231405
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000179465, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0312, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.21,0.24,0.42,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.609, stddev=0.367], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.02,0.04 0.08,0.31,0.46,0.60,0.69 0.79,0.93,1.1,1.2), mean=0.453, stddev=0.218], bias-{mean,stddev}=-0.002257,0.1443, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000179465, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01225, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.23 0.24,0.27,0.33,0.39,0.42 0.46,0.50,0.52,0.69), mean=0.334, stddev=0.0737], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.09,0.18,0.39,0.43 0.46,0.49,0.52,0.57), mean=0.237, stddev=0.148], bias-{mean,stddev}=0.005463,0.0262, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.96e+05, self-repaired-proportion=0.00190122, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.03,0.04,0.05 0.06,0.08,0.11,0.14,0.16 0.18,0.19,0.20,0.22), mean=0.114, stddev=0.037], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.15,0.19,0.25 0.29,0.37,0.50,0.61,0.65 0.69,0.72,0.73,0.79), mean=0.488, stddev=0.136], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.08,0.09,0.11,0.12 0.13,0.16,0.19,0.37), mean=0.0966, stddev=0.0245], oderiv-count=1.0857e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30233.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.03,0.04,0.05 0.06,0.08,0.11,0.14,0.16 0.17,0.18,0.19,0.22), mean=0.109, stddev=0.0363], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.10,0.12,0.14 0.14,0.16,0.18,0.20,0.21 0.23,0.25,0.25,0.29), mean=0.178, stddev=0.0307]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000179465, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008862, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.28,0.29 0.31,0.32,0.35,0.37,0.39 0.40,0.42,0.43,0.58), mean=0.348, stddev=0.0362], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.16,0.17,0.20,0.23,0.24 0.26,0.27,0.29,0.36), mean=0.199, stddev=0.034], bias-{mean,stddev}=-0.01065,0.01579, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.23,0.24,0.27,0.30,0.32 0.33,0.36,0.37,0.41), mean=0.273, stddev=0.0354], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.37,0.39 0.40,0.41,0.44,0.47,0.49 0.50,0.51,0.52,0.54), mean=0.44, stddev=0.0335], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0351, stddev=0.00281], oderiv-count=977536
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28068.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.21 0.22,0.24,0.27,0.30,0.32 0.33,0.36,0.37,0.41), mean=0.271, stddev=0.0362], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.42,0.43,0.45 0.47,0.48,0.52,0.57,0.59 0.62,0.67,0.69,0.80), mean=0.527, stddev=0.0574]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000179465, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01313, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,2e-06,3e-06,7e-06 3e-05,0.0006,0.28,0.47,0.55 0.60,0.65,0.67,1.1), mean=0.254, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.26,0.30 0.36,0.51,0.62,0.67,0.70 0.73,0.77,0.82,1.3), mean=0.585, stddev=0.129], bias-{mean,stddev}=-0.001339,0.02862, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000179465, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01024, w_fc-rms=0.01197, w_oc-rms=0.01708, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627414, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.46 0.46,0.48,0.50,0.51,0.53 0.56,0.59,0.61,0.64), mean=0.499, stddev=0.0302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0146] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627414, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.43 0.44,0.46,0.50,0.50,0.51 0.53,0.57,0.58,0.67), mean=0.484, stddev=0.034], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.21,0.21,0.22 0.23,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0109] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00740757, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.62,-0.47,-0.33 -0.22,-0.08,0.0002,0.11,0.21 0.29,0.45,0.57,0.76), mean=0.00218, stddev=0.188], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.44,0.47,0.52 0.56,0.59,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.757, stddev=0.192] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627414, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.43,0.45 0.45,0.47,0.50,0.50,0.52 0.55,0.58,0.58,0.62), mean=0.491, stddev=0.0295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0154] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00627414, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.59,-0.44,-0.29 -0.19,-0.08,0.0002,0.09,0.19 0.26,0.39,0.54,0.70), mean=0.00315, stddev=0.172], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.59,0.62,0.72 0.79,0.83,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.899, stddev=0.0984] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=262392
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0231405
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000179465, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02821, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.30,0.31,0.34 0.35,0.38,0.51,0.84,0.89 0.93,0.95,0.97,1.0), mean=0.604, stddev=0.222], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0008,0.0009,0.001 0.002,0.006,0.46,0.61,0.68 0.76,0.83,0.89,0.93), mean=0.359, stddev=0.28], bias-{mean,stddev}=0.004669,0.1197, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000179465, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01095, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.21 0.22,0.24,0.28,0.35,0.40 0.44,0.50,0.51,0.55), mean=0.297, stddev=0.0731], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.13 0.13,0.15,0.22,0.32,0.35 0.37,0.40,0.41,0.46), mean=0.234, stddev=0.0875], bias-{mean,stddev}=0.007451,0.01393, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.02,0.03 0.04,0.05,0.07,0.10,0.11 0.12,0.13,0.13,0.14), mean=0.074, stddev=0.026], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.21 0.25,0.33,0.46,0.57,0.62 0.64,0.66,0.68,0.75), mean=0.448, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.08 0.09,0.09,0.11,0.13,0.15 0.17,0.19,0.20,0.23), mean=0.113, stddev=0.0262], oderiv-count=991872
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25903.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.02,0.03 0.04,0.05,0.07,0.10,0.11 0.12,0.12,0.13,0.16), mean=0.0742, stddev=0.0267], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.07,0.09 0.10,0.11,0.13,0.14,0.15 0.16,0.17,0.18,0.20), mean=0.124, stddev=0.023]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000179465, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008245, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.27,0.28,0.31,0.37,0.39 0.40,0.42,0.43,0.51), mean=0.322, stddev=0.0468], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.13 0.14,0.15,0.18,0.21,0.24 0.26,0.30,0.32,0.40), mean=0.183, stddev=0.0413], bias-{mean,stddev}=-0.01143,0.01939, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.29e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.22 0.23,0.25,0.27,0.30,0.32 0.33,0.34,0.36,0.53), mean=0.273, stddev=0.0363], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.36,0.37 0.38,0.39,0.42,0.44,0.46 0.48,0.49,0.49,0.51), mean=0.419, stddev=0.0293], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0277, stddev=0.00271], oderiv-count=915200
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23738.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.23,0.24,0.27,0.30,0.32 0.33,0.35,0.37,0.55), mean=0.272, stddev=0.0375], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.41,0.42,0.43 0.45,0.48,0.53,0.59,0.62 0.66,0.69,0.72,0.95), mean=0.536, stddev=0.0707]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000179465, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01903, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.18,0.25 0.30,0.35,0.42,0.60,0.72 0.77,0.80,0.83,1.3), mean=0.46, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.58,0.58,0.60 0.62,0.64,0.71,1.0,1.3 1.4,1.4,1.5,1.6), mean=0.826, stddev=0.267], bias-{mean,stddev}=0.01959,0.02399, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000179465, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03852, w_fc-rms=0.04668, w_oc-rms=0.05638, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633688, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.50,0.52,0.53 0.55,0.57,0.62,0.67,0.69 0.71,0.72,0.73,0.76), mean=0.62, stddev=0.0539], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.17,0.18 0.19,0.19,0.20,0.21,0.21 0.21,0.22,0.22,0.23), mean=0.2, stddev=0.0105] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633688, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.47,0.49 0.50,0.54,0.57,0.62,0.68 0.72,0.75,0.76,0.85), mean=0.583, stddev=0.0661], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.17,0.18 0.19,0.20,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.203, stddev=0.0133] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00824777, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.78,-0.66,-0.47 -0.32,-0.21,-0.02,0.19,0.32 0.47,0.70,0.74,0.83), mean=-0.0116, stddev=0.283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.28,0.29,0.32 0.36,0.39,0.44,0.48,0.49 0.50,0.51,0.52,0.54), mean=0.431, stddev=0.0535] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633688, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.56,0.56,0.58 0.59,0.62,0.66,0.69,0.71 0.73,0.76,0.78,0.90), mean=0.655, stddev=0.0486], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.14,0.15,0.16 0.17,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.182, stddev=0.0137] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0112838, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.82,-0.70,-0.49 -0.33,-0.20,-0.02,0.17,0.31 0.47,0.73,0.78,0.92), mean=-0.0112, stddev=0.285], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.24,0.28,0.35 0.43,0.53,0.63,0.67,0.69 0.70,0.71,0.72,0.73), mean=0.592, stddev=0.107] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223165
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0231405
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000179465, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.072, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.0,1.1,1.1 1.1,1.2,1.6,2.0,2.0 2.1,2.2,2.2,2.2), mean=1.6, stddev=0.379], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.46,0.77,0.94 0.98,1.1,1.2,1.3,1.3 1.4,1.4,1.5,1.6), mean=1.15, stddev=0.158], bias-{mean,stddev}=0.01161,0.2539, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000179465, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0391, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.52,0.53 0.55,0.57,0.61,0.67,0.70 0.74,0.78,0.82,2.3), mean=0.624, stddev=0.0919], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.3,1.7,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.75, stddev=0.378], bias-{mean,stddev}=5.411e-09,0.03408, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0137], oderiv-count=607360
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/162.mdl exp/nnet3/tdnn_lstm1c_sp/163.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.11338 tdnn2.affine:7.12715 lstm1.W_all:5.72301 lstm1.lstm_nonlin:0.105418 lstm1.W_rp:2.34446 tdnn3.affine:4.53855 tdnn4.affine:5.14794 lstm2.W_all:3.92456 lstm2.lstm_nonlin:0.0439926 lstm2.W_rp:1.6054 tdnn5.affine:3.58418 tdnn6.affine:4.12557 lstm3.W_all:5.19425 lstm3.lstm_nonlin:0.114937 lstm3.W_rp:2.03906 output.affine:4.53066 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.7361 tdnn2.affine:10.8067 lstm1.W_all:18.9776 lstm1.lstm_nonlin:1.26744 lstm1.W_rp:11.7047 tdnn3.affine:7.82426 tdnn4.affine:7.99308 lstm2.W_all:15.3199 lstm2.lstm_nonlin:0.52981 lstm2.W_rp:10.5501 tdnn5.affine:6.98542 tdnn6.affine:7.44392 lstm3.W_all:22.174 lstm3.lstm_nonlin:1.88616 lstm3.W_rp:26.7903 output.affine:28.9609 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.607547 tdnn2.affine:0.661857 lstm1.W_all:0.301569 lstm1.lstm_nonlin:0.082198 lstm1.W_rp:0.200527 tdnn3.affine:0.58172 tdnn4.affine:0.644164 lstm2.W_all:0.256299 lstm2.lstm_nonlin:0.0823807 lstm2.W_rp:0.152426 tdnn5.affine:0.50936 tdnn6.affine:0.551 lstm3.W_all:0.23424 lstm3.lstm_nonlin:0.0602005 lstm3.W_rp:0.0761938 output.affine:0.156262 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:05:33 KST 2020, elapsed time 0 seconds
