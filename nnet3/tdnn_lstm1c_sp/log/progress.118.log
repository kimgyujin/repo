# nnet3-info exp/nnet3/tdnn_lstm1c_sp/118.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/117.mdl exp/nnet3/tdnn_lstm1c_sp/118.mdl 
# Started at Thu Jul 30 10:47:44 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/118.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000206997, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03031, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.04,0.43,0.52,0.61,0.67 0.72,0.82,0.88,1.1), mean=0.483, stddev=0.207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.17,0.21,0.58,0.84,1.2 1.4,1.5,1.5,1.6), mean=0.588, stddev=0.363], bias-{mean,stddev}=0.0002979,0.06146, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.6e+05, self-repaired-proportion=0.103103, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,5e-06,1e-05,7e-05 0.0002,0.02,0.06,0.08,0.10 0.11,0.13,0.14,0.18), mean=0.0576, stddev=0.0355], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.004,0.02 0.05,0.22,0.48,0.63,0.73 0.80,0.85,0.88,0.96), mean=0.445, stddev=0.232], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.09,0.29,0.37,0.46,0.51 0.56,0.70,0.77,1.5), mean=0.363, stddev=0.16], oderiv-count=1.22944e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35178.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,3e-06,4e-06,1e-05 0.0001,0.02,0.05,0.08,0.10 0.12,0.13,0.14,0.21), mean=0.0532, stddev=0.0361], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,7e-05,0.0001,0.0003 0.001,0.05,0.09,0.10,0.11 0.12,0.12,0.13,0.13), mean=0.0758, stddev=0.0371]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000206997, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0124, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.40 0.42,0.44,0.48,0.53,0.56 0.58,0.60,0.65,0.74), mean=0.487, stddev=0.055], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.008,0.01 0.03,0.24,0.29,0.33,0.35 0.37,0.40,0.41,0.76), mean=0.262, stddev=0.107], bias-{mean,stddev}=-0.001187,0.02662, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.14e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.29 0.30,0.32,0.34,0.38,0.40 0.42,0.45,0.48,0.55), mean=0.348, stddev=0.042], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.40,0.41 0.42,0.43,0.46,0.48,0.50 0.50,0.51,0.52,0.54), mean=0.459, stddev=0.028], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.0427, stddev=0.00837], oderiv-count=1.15546e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34404.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.29,0.30,0.34,0.37,0.40 0.42,0.45,0.48,0.55), mean=0.34, stddev=0.0467], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.47,0.48,0.49 0.51,0.54,0.60,0.66,0.70 0.73,0.77,0.78,0.86), mean=0.604, stddev=0.0705]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000206997, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01718, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.001,0.003,0.02 0.09,0.21,0.38,0.56,0.66 0.73,0.82,0.88,1.2), mean=0.385, stddev=0.209], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.38,0.40,0.45 0.50,0.68,0.80,0.88,0.94 0.96,1.0,1.1,1.2), mean=0.768, stddev=0.155], bias-{mean,stddev}=-0.002379,0.02196, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000206997, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02229, w_fc-rms=0.03421, w_oc-rms=0.04902, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626712, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.43,0.44 0.45,0.46,0.49,0.52,0.56 0.61,0.66,0.68,0.72), mean=0.497, stddev=0.0513], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.015] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626712, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.37,0.40 0.42,0.44,0.48,0.53,0.58 0.67,0.76,0.80,0.86), mean=0.496, stddev=0.0814], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.17,0.19 0.21,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.02] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0101012, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.79,-0.71,-0.54 -0.37,-0.20,-0.01,0.18,0.36 0.59,0.75,0.79,0.83), mean=-0.0029, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.29,0.31,0.35 0.41,0.47,0.59,0.72,0.92 0.99,1.0,1.0,1.0), mean=0.61, stddev=0.177] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626712, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.40,0.41 0.43,0.44,0.47,0.51,0.52 0.55,0.58,0.60,0.64), mean=0.476, stddev=0.0423], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0175] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0204938, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.94,-0.83,-0.67,-0.53 -0.34,-0.18,-0.007,0.16,0.31 0.56,0.75,0.83,0.91), mean=-0.00249, stddev=0.289], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.19,0.26,0.45 0.60,0.73,0.83,0.89,0.96 1.0,1.0,1.0,1.0), mean=0.791, stddev=0.16] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=293808
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000206997, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03103, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.18,0.20 0.21,0.25,0.45,0.99,1.1 1.1,1.1,1.2,1.2), mean=0.611, stddev=0.358], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.03,0.06 0.16,0.31,0.46,0.59,0.70 0.81,0.89,1.0,1.2), mean=0.457, stddev=0.204], bias-{mean,stddev}=-0.001621,0.04269, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000206997, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0126, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.21,0.22,0.24 0.25,0.28,0.34,0.40,0.44 0.47,0.50,0.53,0.73), mean=0.344, stddev=0.0744], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.09,0.19,0.41,0.44 0.48,0.51,0.53,0.59), mean=0.245, stddev=0.151], bias-{mean,stddev}=-0.003498,0.03045, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0.00192308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.04,0.05,0.06 0.07,0.09,0.13,0.16,0.17 0.19,0.20,0.21,0.28), mean=0.127, stddev=0.0392], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.19,0.21,0.26 0.31,0.38,0.50,0.61,0.65 0.68,0.71,0.73,0.76), mean=0.493, stddev=0.129], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.07,0.07,0.08,0.09,0.10 0.12,0.13,0.13,0.20), mean=0.0825, stddev=0.0159], oderiv-count=1.04909e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32081.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.04,0.05,0.05 0.07,0.09,0.12,0.15,0.17 0.19,0.20,0.22,0.27), mean=0.121, stddev=0.0412], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.12,0.13,0.15 0.16,0.17,0.20,0.22,0.24 0.25,0.29,0.31,0.35), mean=0.198, stddev=0.036]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000206997, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009206, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.29,0.30 0.31,0.33,0.36,0.39,0.41 0.42,0.44,0.45,0.60), mean=0.361, stddev=0.0395], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.14,0.15,0.16 0.17,0.18,0.20,0.24,0.25 0.27,0.28,0.30,0.39), mean=0.207, stddev=0.0348], bias-{mean,stddev}=-0.01017,0.01747, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.72e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.24,0.26,0.29,0.33,0.34 0.36,0.37,0.39,0.47), mean=0.292, stddev=0.0399], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.37,0.39 0.40,0.41,0.44,0.47,0.48 0.49,0.50,0.51,0.54), mean=0.441, stddev=0.0323], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0317, stddev=0.00286], oderiv-count=969088
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29759.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.24,0.25,0.28,0.32,0.34 0.37,0.38,0.40,0.52), mean=0.288, stddev=0.0445], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.44,0.46 0.48,0.51,0.55,0.61,0.64 0.69,0.74,0.79,1.0), mean=0.562, stddev=0.0727]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000206997, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01347, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,1e-05,2e-05,5e-05 0.0002,0.003,0.28,0.47,0.56 0.61,0.65,0.68,1.1), mean=0.264, stddev=0.219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.27,0.32 0.37,0.53,0.63,0.69,0.72 0.76,0.80,0.85,1.2), mean=0.6, stddev=0.13], bias-{mean,stddev}=-0.003473,0.02437, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000206997, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01361, w_fc-rms=0.01751, w_oc-rms=0.02249, count=1.32e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632427, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.45,0.47,0.50,0.51,0.53 0.56,0.59,0.61,0.66), mean=0.495, stddev=0.0335], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0156] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632427, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.43,0.45,0.50,0.50,0.51 0.55,0.60,0.64,0.71), mean=0.485, stddev=0.0425], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.21,0.22 0.23,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0122] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00849937, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.67,-0.51,-0.36 -0.22,-0.11,0.0002,0.11,0.25 0.40,0.53,0.60,0.78), mean=0.00637, stddev=0.213], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.43,0.45,0.50 0.55,0.58,0.65,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.741, stddev=0.195] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632427, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.46,0.50,0.50,0.52 0.54,0.57,0.59,0.63), mean=0.488, stddev=0.0339], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0164] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00632427, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.69,-0.53,-0.33 -0.21,-0.11,0.0008,0.11,0.23 0.34,0.54,0.60,0.82), mean=0.00694, stddev=0.207], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.45,0.54,0.66 0.77,0.82,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.885, stddev=0.115] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.1581e-05, count-zeroing-boundaries=259044
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000206997, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02836, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.32,0.34,0.36 0.37,0.40,0.54,0.84,0.87 0.92,0.94,0.97,1.0), mean=0.612, stddev=0.209], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.002,0.002,0.003 0.005,0.01,0.45,0.60,0.68 0.75,0.84,0.87,0.93), mean=0.367, stddev=0.273], bias-{mean,stddev}=-0.008727,0.1046, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000206997, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01169, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.22 0.23,0.25,0.31,0.37,0.43 0.48,0.53,0.55,0.63), mean=0.317, stddev=0.0796], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.15,0.16,0.24,0.34,0.37 0.40,0.41,0.43,0.49), mean=0.252, stddev=0.0875], bias-{mean,stddev}=0.002138,0.01758, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.14e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.06,0.08,0.11,0.12 0.13,0.14,0.15,0.16), mean=0.0824, stddev=0.0298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.18 0.23,0.29,0.44,0.55,0.58 0.61,0.65,0.67,0.72), mean=0.423, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.07,0.08,0.09,0.11,0.12 0.13,0.15,0.16,0.19), mean=0.0942, stddev=0.02], oderiv-count=987008
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27437, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.05,0.08,0.11,0.12 0.13,0.14,0.15,0.17), mean=0.0807, stddev=0.0305], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.09 0.11,0.12,0.14,0.17,0.18 0.19,0.21,0.22,0.23), mean=0.143, stddev=0.0298]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000206997, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008826, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.29,0.30,0.34,0.39,0.41 0.42,0.44,0.46,0.52), mean=0.345, stddev=0.0473], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.14 0.15,0.16,0.19,0.23,0.25 0.28,0.32,0.34,0.41), mean=0.196, stddev=0.0444], bias-{mean,stddev}=-0.011,0.01453, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.17e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.24,0.26,0.29,0.32,0.34 0.35,0.37,0.40,0.45), mean=0.293, stddev=0.0393], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.37,0.38,0.42,0.45,0.46 0.48,0.50,0.50,0.53), mean=0.418, stddev=0.0364], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0266, stddev=0.0028], oderiv-count=899840
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25114.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.22 0.24,0.26,0.29,0.33,0.35 0.36,0.38,0.41,0.49), mean=0.294, stddev=0.0441], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.42,0.43,0.46 0.48,0.51,0.57,0.64,0.70 0.73,0.78,0.80,0.94), mean=0.58, stddev=0.0845]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000206997, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01957, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.17,0.24 0.31,0.36,0.43,0.63,0.75 0.80,0.84,0.86,1.4), mean=0.471, stddev=0.165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.58,0.59,0.60 0.62,0.65,0.73,1.1,1.4 1.4,1.5,1.5,1.7), mean=0.849, stddev=0.277], bias-{mean,stddev}=0.007306,0.02358, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000206997, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03199, w_fc-rms=0.04499, w_oc-rms=0.06421, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639333, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.47,0.49 0.50,0.53,0.58,0.64,0.66 0.69,0.70,0.71,0.81), mean=0.585, stddev=0.0632], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.19,0.20,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.204, stddev=0.0101] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639333, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.47,0.48,0.49 0.51,0.54,0.59,0.64,0.67 0.72,0.74,0.76,0.89), mean=0.592, stddev=0.0658], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.17,0.18 0.19,0.19,0.21,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.203, stddev=0.0141] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0101656, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.83,-0.76,-0.56 -0.35,-0.21,-0.01,0.21,0.33 0.47,0.71,0.81,0.89), mean=-0.00868, stddev=0.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.26,0.28,0.31 0.35,0.39,0.44,0.48,0.49 0.51,0.53,0.53,0.56), mean=0.431, stddev=0.0581] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00830411, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.54,0.56,0.58 0.59,0.62,0.66,0.70,0.72 0.74,0.77,0.78,0.95), mean=0.659, stddev=0.0529], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.15,0.16 0.16,0.17,0.19,0.19,0.20 0.20,0.20,0.21,0.21), mean=0.182, stddev=0.0157] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0269833, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.90,-0.80,-0.55 -0.34,-0.19,-0.01,0.19,0.32 0.48,0.75,0.87,0.98), mean=-0.00861, stddev=0.306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.16,0.21,0.35 0.45,0.54,0.63,0.68,0.70 0.71,0.72,0.73,0.75), mean=0.598, stddev=0.117] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.47e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=220191
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000206997, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07032, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.6,1.9,2.0 2.0,2.1,2.1,2.2), mean=1.57, stddev=0.333], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.60,0.79,0.88 0.95,1.0,1.1,1.2,1.3 1.4,1.4,1.4,1.6), mean=1.12, stddev=0.154], bias-{mean,stddev}=0.004162,0.08931, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000206997, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04001, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.51,0.52,0.54 0.56,0.58,0.63,0.69,0.72 0.76,0.80,0.84,2.0), mean=0.639, stddev=0.0875], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.3 1.4,1.4,1.8,2.1,2.2 2.3,2.3,2.4,2.6), mean=1.8, stddev=0.342], bias-{mean,stddev}=5.021e-09,0.02326, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.42), mean=0.0168, stddev=0.0138], oderiv-count=565760
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/117.mdl exp/nnet3/tdnn_lstm1c_sp/118.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.95853 tdnn2.affine:7.97657 lstm1.W_all:6.72346 lstm1.lstm_nonlin:0.129332 lstm1.W_rp:2.76066 tdnn3.affine:4.9041 tdnn4.affine:5.65247 lstm2.W_all:4.42788 lstm2.lstm_nonlin:0.0609098 lstm2.W_rp:1.85501 tdnn5.affine:3.9789 tdnn6.affine:4.70572 lstm3.W_all:6.11223 lstm3.lstm_nonlin:0.13443 lstm3.W_rp:2.38457 output.affine:5.21429 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.0532 tdnn2.affine:11.1877 lstm1.W_all:19.997 lstm1.lstm_nonlin:1.45471 lstm1.W_rp:11.4309 tdnn3.affine:8.05333 tdnn4.affine:8.30457 lstm2.W_all:15.6972 lstm2.lstm_nonlin:0.720323 lstm2.W_rp:10.5639 tdnn5.affine:7.45755 tdnn6.affine:7.96011 lstm3.W_all:22.7884 lstm3.lstm_nonlin:1.93108 lstm3.W_rp:25.8976 output.affine:29.6132 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.665152 tdnn2.affine:0.716029 lstm1.W_all:0.336859 lstm1.lstm_nonlin:0.0884001 lstm1.W_rp:0.242579 tdnn3.affine:0.616271 tdnn4.affine:0.681305 lstm2.W_all:0.281962 lstm2.lstm_nonlin:0.085537 lstm2.W_rp:0.176158 tdnn5.affine:0.532391 tdnn6.affine:0.589095 lstm3.W_all:0.268102 lstm3.lstm_nonlin:0.0695956 lstm3.W_rp:0.0920503 output.affine:0.17594 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:47:44 KST 2020, elapsed time 0 seconds
