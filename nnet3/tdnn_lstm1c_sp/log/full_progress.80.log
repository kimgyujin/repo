# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/79.mdl exp/nnet3/tdnn_lstm1c_sp/80.mdl 
# Started at Thu Jul 30 10:32:45 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/79.mdl exp/nnet3/tdnn_lstm1c_sp/80.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000234252, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02138, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.008,0.02 0.06,0.31,0.38,0.44,0.47 0.50,0.52,0.55,0.67), mean=0.344, stddev=0.137], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.13,0.16,0.44,0.59,0.72 0.87,1.0,1.1,1.3), mean=0.425, stddev=0.238], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.05,0.08,0.27,0.62,0.85 1.0,1.2,1.3,1.4), mean=0.366, stddev=0.322], bias-{mean,stddev}=-0.0006308,0.02916, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.09,1.3,1.8 2.2,3.0,3.3,5.0), mean=0.642, stddev=0.855], oderiv-count=16128
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7107.54, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.18,-0.13,-0.12,-0.07 -0.04,-0.002,0.05,0.12,0.17 0.22,0.25,0.29,0.47), mean=0.0577, stddev=0.0876], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,0.11,0.14 0.15,0.16,0.16,0.20), mean=0.0544, stddev=0.056]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000234252, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009545, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.30,0.32 0.33,0.34,0.38,0.41,0.43 0.44,0.45,0.45,0.49), mean=0.375, stddev=0.0375], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.01 0.03,0.19,0.22,0.26,0.27 0.28,0.30,0.31,0.36), mean=0.203, stddev=0.0796], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.11,0.22,0.47,0.64 0.79,0.92,0.98,1.1), mean=0.299, stddev=0.229], bias-{mean,stddev}=0.001193,0.01459, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.06,0.08 0.09,0.11,0.11,0.12), mean=0.0327, stddev=0.0323], oderiv-count=56896
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=6989.58, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.04,0.05,0.08,0.12 0.17,0.24,0.36,0.48,0.55 0.61,0.68,0.72,1.1), mean=0.365, stddev=0.152], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.31,0.59,0.79,0.89 0.97,1.1,1.2,1.8), mean=0.551, stddev=0.301]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000234252, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006419, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0005,0.002,0.008 0.04,0.07,0.13,0.20,0.26 0.30,0.33,0.36,0.47), mean=0.141, stddev=0.0836], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.11 0.12,0.19,0.31,0.34,0.36 0.37,0.39,0.40,0.44), mean=0.28, stddev=0.0853], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,2e-05,3e-05,3e-05 8e-05,0.07,0.16,0.34,0.48 0.63,0.83,0.90,1.1), mean=0.215, stddev=0.199], bias-{mean,stddev}=-7.245e-06,0.002313, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000234252, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.002098, w_fc-rms=0.002842, w_oc-rms=0.00485, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000323568, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-1.3,-1.0,-0.68 -0.33,0.003,0.49,0.92,1.2 1.5,1.9,2.2,3.0), mean=0.455, stddev=0.652], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.58,-0.29,-0.18,-0.07 -0.002,0.12,0.26,0.41,0.52 0.63,0.73,0.76,1.0), mean=0.27, stddev=0.209] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000323568, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-1.1,-0.94,-0.51 -0.23,0.09,0.50,0.81,1.1 1.2,1.5,1.6,2.6), mean=0.454, stddev=0.532], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.32,-0.21,-0.12,-0.02 0.09,0.17,0.25,0.39,0.46 0.58,0.70,0.73,1.1), mean=0.272, stddev=0.174] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00160011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-13,-7.6,-7.1,-6.0 -4.7,-3.0,-0.23,2.6,4.3 5.6,7.5,8.8,11), mean=-0.148, stddev=3.52], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.9,-3.6,-3.0,-2.3 -1.7,-0.63,1.0,2.5,3.6 4.4,5.2,5.6,7.7), mean=1.02, stddev=2] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000323568, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.3,-1.1,-0.80 -0.44,-0.05,0.49,1.0,1.3 1.6,1.8,2.0,2.8), mean=0.448, stddev=0.695], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.45,-0.37,-0.20 -0.05,0.10,0.27,0.47,0.58 0.66,0.79,0.81,0.95), mean=0.269, stddev=0.255] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.177799, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-7.1,-5.7,-4.5 -3.5,-2.5,-0.19,1.8,3.2 4.3,6.4,7.2,8.2), mean=-0.165, stddev=2.73], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.0,-2.2,-1.6,-0.94 -0.54,-0.01,0.99,1.9,2.7 3.4,4.2,4.7,6.0), mean=1.03, stddev=1.33] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.1e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1653
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000234252, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.008379, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.10,0.16,0.25,0.27 0.29,0.30,0.31,0.36), mean=0.175, stddev=0.076], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.009,0.02 0.05,0.09,0.13,0.17,0.18 0.20,0.22,0.22,0.26), mean=0.126, stddev=0.0496], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,7e-06,7e-06,9e-06 1e-05,2e-05,0.0002,0.04,0.35 0.53,0.64,0.71,0.77), mean=0.0765, stddev=0.175], bias-{mean,stddev}=0.0001034,0.007764, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000234252, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008333, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.16,0.16,0.17 0.18,0.20,0.23,0.26,0.28 0.30,0.32,0.34,0.41), mean=0.229, stddev=0.0391], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.07,0.08,0.13,0.26,0.28 0.29,0.31,0.32,0.36), mean=0.169, stddev=0.0874], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,7e-06,8e-06,1e-05 2e-05,4e-05,0.0009,0.14,0.44 0.62,0.79,0.86,1.0), mean=0.101, stddev=0.21], bias-{mean,stddev}=-0.0004731,0.01552, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.67e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.30,-0.11,-0.09,-0.05 -0.009,0.04,0.12,0.22,0.27 0.30,0.33,0.36,0.43), mean=0.125, stddev=0.106], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.25,-0.14,-0.01 0.06,0.22,0.49,0.72,0.83 0.97,1.1,1.1,1.3), mean=0.474, stddev=0.306]
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=6635.68, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.19,-0.14,-0.12,-0.07 -0.01,0.04,0.13,0.23,0.27 0.32,0.37,0.42,0.49), mean=0.133, stddev=0.117], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.19,0.26,0.30 0.34,0.36,0.38,0.45), mean=0.172, stddev=0.109]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000234252, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006865, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.23,0.24 0.25,0.25,0.27,0.29,0.30 0.31,0.32,0.32,0.35), mean=0.27, stddev=0.0212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.12,0.12 0.13,0.14,0.15,0.17,0.19 0.20,0.21,0.22,0.25), mean=0.155, stddev=0.0228], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.08,0.10,0.18,0.33,0.45 0.55,0.65,0.70,0.83), mean=0.226, stddev=0.15], bias-{mean,stddev}=-0.0001468,0.008465, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.04,0.05 0.05,0.06,0.06,0.08), mean=0.0248, stddev=0.0187], oderiv-count=76096
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=6281.79, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.02,0.08,0.09,0.12 0.16,0.21,0.30,0.38,0.44 0.49,0.52,0.55,0.64), mean=0.302, stddev=0.108], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.25,0.37,0.53,0.67,0.75 0.81,0.87,0.92,0.97), mean=0.508, stddev=0.21]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000234252, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004184, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,3e-05,4e-05,7e-05 0.0002,0.003,0.08,0.14,0.19 0.21,0.23,0.25,0.38), mean=0.0804, stddev=0.0701], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.07,0.09,0.20,0.22,0.23 0.24,0.25,0.25,0.32), mean=0.181, stddev=0.0591], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,2e-05,2e-05,3e-05 0.0001,0.04,0.09,0.21,0.31 0.42,0.56,0.62,0.75), mean=0.135, stddev=0.135], bias-{mean,stddev}=-4.051e-05,0.002446, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000234252, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001242, w_fc-rms=0.001552, w_oc-rms=0.002107, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00033397, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-0.80,-0.55,-0.26 -0.06,0.21,0.50,0.71,0.96 1.1,1.4,1.7,2.1), mean=0.46, stddev=0.435], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.32,-0.20,-0.03,0.08 0.15,0.24,0.25,0.41,0.53 0.61,0.67,0.69,1.3), mean=0.302, stddev=0.162] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00033397, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.54,-0.34,-0.11 0.04,0.27,0.50,0.67,0.91 1.1,1.3,1.5,1.9), mean=0.485, stddev=0.361], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.21,0.02,0.05,0.11 0.17,0.23,0.25,0.33,0.39 0.45,0.53,0.59,0.78), mean=0.272, stddev=0.104] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00170235, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.3,-6.6,-6.3,-4.4 -3.1,-1.7,-0.007,1.4,2.7 3.9,5.8,6.4,11), mean=-0.0871, stddev=2.5], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.6,-2.1,-1.5,-1.1 -0.60,0.46,1.1,2.4,3.2 3.8,4.6,5.2,8.2), mean=1.32, stddev=1.46] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00033397, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.81,-0.70,-0.43 -0.13,0.21,0.50,0.73,1.1 1.2,1.6,1.7,2.3), mean=0.478, stddev=0.475], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.65,-0.14,-0.10,0.02 0.10,0.20,0.25,0.38,0.49 0.57,0.71,0.76,1.5), mean=0.282, stddev=0.175] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00033397, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.4,-5.3,-5.0,-3.8 -2.4,-1.5,-0.02,1.2,2.2 3.4,4.5,5.0,7.9), mean=-0.0913, stddev=1.99], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-0.94,-0.60,-0.16 0.16,0.63,1.0,1.9,2.3 2.8,3.6,3.7,4.3), mean=1.22, stddev=0.892] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-9.47e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1428
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000234252, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005476, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.09,0.12,0.15,0.16 0.17,0.18,0.18,0.20), mean=0.121, stddev=0.0322], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.001,0.001,0.002 0.003,0.009,0.09,0.12,0.13 0.14,0.15,0.15,0.20), mean=0.0731, stddev=0.0496], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,7e-06,8e-06,9e-06 1e-05,2e-05,0.0002,0.08,0.25 0.32,0.37,0.41,0.45), mean=0.0562, stddev=0.112], bias-{mean,stddev}=0.0006258,0.008077, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000234252, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006678, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.13 0.14,0.15,0.18,0.21,0.23 0.25,0.28,0.29,0.36), mean=0.183, stddev=0.0384], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.10,0.10,0.14,0.19,0.20 0.21,0.23,0.23,0.25), mean=0.146, stddev=0.0426], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,4e-06,5e-06,6e-06 1e-05,3e-05,0.002,0.17,0.34 0.49,0.60,0.65,0.75), mean=0.089, stddev=0.164], bias-{mean,stddev}=-0.001458,0.009642, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.12,0.16 0.18,0.21,0.24,0.32), mean=0.0664, stddev=0.0658], oderiv-count=66432
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=5927.89, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.13,-0.07,-0.06,-0.02 -0.002,0.03,0.08,0.15,0.19 0.21,0.26,0.30,0.40), mean=0.0892, stddev=0.0758], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.06,0.15,0.20,0.22 0.25,0.27,0.27,0.36), mean=0.137, stddev=0.0766]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000234252, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005674, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.19,0.20,0.22,0.24,0.25 0.27,0.27,0.28,0.31), mean=0.223, stddev=0.0235], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.09 0.10,0.11,0.12,0.14,0.16 0.17,0.19,0.20,0.22), mean=0.127, stddev=0.0245], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.08,0.14,0.27,0.38 0.48,0.57,0.60,0.67), mean=0.181, stddev=0.132], bias-{mean,stddev}=0.0008712,0.0072, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=5574, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.08,0.12 0.16,0.21,0.31,0.40,0.45 0.52,0.55,0.58,0.65), mean=0.307, stddev=0.114], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.27,0.41,0.58,0.72,0.80 0.86,0.93,1.0,1.3), mean=0.558, stddev=0.222]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000234252, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005626, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.05 0.07,0.08,0.11,0.20,0.24 0.26,0.28,0.29,0.39), mean=0.128, stddev=0.0649], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.17,0.19,0.23,0.31,0.37 0.39,0.41,0.42,0.45), mean=0.246, stddev=0.0727], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0003,0.0004,0.002 0.04,0.05,0.11,0.26,0.45 0.62,0.77,0.82,0.93), mean=0.176, stddev=0.187], bias-{mean,stddev}=3.675e-06,0.002079, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000234252, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.002547, w_fc-rms=0.003872, w_oc-rms=0.004769, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000347002, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.2,-1.9,-1.6,-1.2 -0.73,-0.25,0.72,1.4,1.9 2.4,3.1,3.4,6.6), mean=0.663, stddev=1.12], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.49,-0.28,-0.17,-0.06 0.007,0.09,0.29,0.49,0.58 0.71,0.86,0.92,1.3), mean=0.299, stddev=0.241] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000347002, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-2.5,-1.9,-1.4 -1.0,-0.47,0.55,1.5,2.1 2.6,3.3,3.7,4.4), mean=0.568, stddev=1.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.43,-0.37,-0.21 -0.09,0.05,0.27,0.49,0.61 0.73,0.83,0.88,1.5), mean=0.266, stddev=0.292] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0152289, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-17,-13,-12,-9.8 -6.6,-4.8,-0.31,3.9,6.9 8.7,11,12,15), mean=-0.209, stddev=5.38], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.3,-4.5,-3.9,-2.7 -2.1,-0.90,0.82,2.7,3.5 4.2,4.8,5.8,7.4), mean=0.83, stddev=2.16] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00157675, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-1.4,-1.2,-0.68 -0.34,0.06,0.91,1.7,2.2 2.6,3.2,3.5,5.8), mean=0.922, stddev=1.07], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.63,-0.51,-0.45,-0.26 -0.15,-0.04,0.20,0.47,0.59 0.68,0.86,0.96,1.2), mean=0.21, stddev=0.302] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.575757, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-14,-10,-9.2,-7.0 -5.7,-3.6,-0.22,3.3,5.3 6.8,8.7,9.9,13), mean=-0.176, stddev=4.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.2,-3.2,-3.0,-2.3 -1.7,-0.81,0.78,2.3,3.1 3.6,4.1,5.4,7.0), mean=0.741, stddev=1.86] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-7.94e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1181
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000234252, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007253, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.15,0.21,0.22 0.23,0.23,0.23,0.24), mean=0.158, stddev=0.0487], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.06 0.08,0.10,0.12,0.13,0.14 0.15,0.16,0.17,0.18), mean=0.114, stddev=0.0256], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.0001,0.0001,0.0002 0.0003,0.0006,0.04,0.21,0.30 0.38,0.44,0.46,0.56), mean=0.102, stddev=0.13], bias-{mean,stddev}=5.443e-05,0.005846, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000234252, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0078, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.06 0.07,0.08,0.11,0.15,0.17 0.20,0.23,0.25,0.44), mean=0.118, stddev=0.0447], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.25,0.26 0.27,0.28,0.34,0.42,0.44 0.45,0.47,0.48,0.48), mean=0.351, stddev=0.0671], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0001,0.0001,0.0002 0.0003,0.0006,0.02,0.51,0.72 0.83,0.92,0.95,1.0), mean=0.201, stddev=0.296], bias-{mean,stddev}=-2.727e-10,0.001853, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.09,0.11 0.13,0.15,0.16,0.27), mean=0.0439, stddev=0.0473], oderiv-count=4480

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.46911 tdnn2.affine:8.60338 lstm1.W_all:7.46438 lstm1.lstm_nonlin:0.136811 lstm1.W_rp:3.0835 tdnn3.affine:5.31897 tdnn4.affine:6.18647 lstm2.W_all:4.86671 lstm2.lstm_nonlin:0.0660454 lstm2.W_rp:2.01777 tdnn5.affine:4.25897 tdnn6.affine:5.11309 lstm3.W_all:6.54229 lstm3.lstm_nonlin:0.151646 lstm3.W_rp:2.66843 output.affine:5.76956 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.1634 tdnn2.affine:11.3677 lstm1.W_all:20.3229 lstm1.lstm_nonlin:1.59499 lstm1.W_rp:11.7048 tdnn3.affine:8.21037 tdnn4.affine:8.49828 lstm2.W_all:15.878 lstm2.lstm_nonlin:0.751397 lstm2.W_rp:10.6416 tdnn5.affine:7.53885 tdnn6.affine:8.07309 lstm3.W_all:22.8253 lstm3.lstm_nonlin:1.79722 lstm3.W_rp:25.5257 output.affine:29.9829 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.694854 tdnn2.affine:0.756187 lstm1.W_all:0.367901 lstm1.lstm_nonlin:0.0843987 lstm1.W_rp:0.263553 tdnn3.affine:0.64786 tdnn4.affine:0.729745 lstm2.W_all:0.306058 lstm2.lstm_nonlin:0.0879983 lstm2.W_rp:0.189177 tdnn5.affine:0.563508 tdnn6.affine:0.633534 lstm3.W_all:0.285738 lstm3.lstm_nonlin:0.0834055 lstm3.W_rp:0.104486 output.affine:0.192662 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:32:46 KST 2020, elapsed time 1 seconds
