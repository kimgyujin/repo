# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/249.mdl exp/nnet3/tdnn_lstm1c_sp/250.mdl 
# Started at Thu Jul 30 11:39:54 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/249.mdl exp/nnet3/tdnn_lstm1c_sp/250.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000268095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01453, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.008,0.01 0.02,0.07,0.25,0.31,0.33 0.36,0.40,0.42,0.53), mean=0.224, stddev=0.114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.11,0.30,0.40,0.47 0.62,0.67,0.72,0.80), mean=0.29, stddev=0.16], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.05,0.17,0.43,0.58 0.71,0.84,0.88,1.0), mean=0.245, stddev=0.223], bias-{mean,stddev}=-0.0004468,0.01904, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-13.7948, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000268095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006211, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.22,0.23,0.24,0.26,0.27 0.28,0.29,0.29,0.30), mean=0.244, stddev=0.0222], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.006 0.01,0.04,0.15,0.17,0.19 0.20,0.21,0.22,0.27), mean=0.127, stddev=0.0631], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.05,0.07,0.14,0.30,0.42 0.53,0.63,0.66,0.75), mean=0.192, stddev=0.153], bias-{mean,stddev}=0.0008509,0.01031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=5.68e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.40,-0.09,0.03,0.10 0.18,0.25,0.41,0.60,0.68 0.76,0.83,0.89,1.0), mean=0.42, stddev=0.204], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.38,-0.06,0.06,0.18 0.25,0.33,0.47,0.61,0.67 0.73,0.81,0.84,1.1), mean=0.466, stddev=0.177], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.02,0.04,0.05,0.06 0.07,0.07,0.08,0.10), mean=0.0353, stddev=0.0206], oderiv-count=71520
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-13.7948, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000268095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004013, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,6e-07,2e-06,9e-06 0.0003,0.03,0.08,0.14,0.16 0.18,0.21,0.22,0.30), mean=0.0845, stddev=0.0577], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.07,0.10,0.19,0.21,0.22 0.23,0.24,0.25,0.27), mean=0.174, stddev=0.0561], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-08,1e-07,1e-07,1e-07 2e-07,0.04,0.10,0.21,0.30 0.41,0.52,0.57,0.65), mean=0.133, stddev=0.126], bias-{mean,stddev}=-9.418e-05,0.001445, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000268095, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.00174, w_fc-rms=0.001874, w_oc-rms=0.004224, count=4.1e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00116689, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.5,-1.4,-0.70 -0.37,0.04,0.50,1.1,1.6 2.0,2.2,2.6,3.3), mean=0.596, stddev=0.802], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.94,-0.43,-0.35,-0.21 0.007,0.16,0.28,0.60,0.79 0.93,1.1,1.2,1.6), mean=0.353, stddev=0.328] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00116689, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.0,-1.8,-1.5,-0.99 -0.55,-0.05,0.50,0.81,1.3 1.6,1.8,2.1,4.2), mean=0.379, stddev=0.748], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.41,-0.32,-0.15 0.02,0.18,0.26,0.46,0.57 0.71,0.93,1.0,1.3), mean=0.297, stddev=0.253] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.439213, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-12,-9.5,-8.5,-6.8 -5.2,-2.9,-0.01,2.8,4.9 7.0,8.7,9.7,13), mean=-0.103, stddev=3.95], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.6,-5.8,-4.8,-3.6 -2.3,-0.83,1.0,3.1,4.5 6.0,7.5,7.8,11), mean=1.13, stddev=2.74] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00116689, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.6,-1.7,-1.4,-1.1 -0.60,-0.02,0.50,1.3,1.7 2.2,3.1,3.4,4.7), mean=0.609, stddev=0.987], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.65,-0.57,-0.40 -0.21,0.04,0.25,0.51,0.70 0.81,1.0,1.1,1.6), mean=0.259, stddev=0.358] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00116689, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.3,-5.3,-4.7,-4.1 -3.3,-1.9,-0.009,2.0,3.1 4.3,5.0,5.3,11), mean=0.00852, stddev=2.43], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.4,-2.3,-2.0,-1.5 -0.72,-0.07,0.98,1.6,2.1 2.4,2.9,3.1,4.2), mean=0.746, stddev=1.16] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=6.14e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=8.13802e-05, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00162602, count-zeroing-boundaries=922
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.149862
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000268095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005016, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.10,0.15,0.16 0.17,0.17,0.18,0.19), mean=0.105, stddev=0.046], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.0002,0.0003,0.0006 0.003,0.05,0.08,0.10,0.11 0.12,0.12,0.13,0.16), mean=0.0726, stddev=0.0356], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,4e-08,5e-08 7e-08,1e-07,4e-07,0.02,0.23 0.30,0.36,0.39,0.43), mean=0.0479, stddev=0.104], bias-{mean,stddev}=-0.0001261,0.004984, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000268095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005668, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.11,0.11,0.12 0.13,0.14,0.15,0.18,0.19 0.20,0.21,0.22,0.25), mean=0.156, stddev=0.0254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.06,0.12,0.17,0.18 0.20,0.20,0.21,0.23), mean=0.117, stddev=0.0559], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,4e-08,5e-08 7e-08,1e-07,1e-05,0.17,0.31 0.41,0.48,0.52,0.59), mean=0.0754, stddev=0.139], bias-{mean,stddev}=0.0002902,0.004832, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=5.2e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.21,-0.15,-0.11,-0.07 -0.02,0.03,0.14,0.26,0.31 0.37,0.42,0.44,0.53), mean=0.143, stddev=0.131], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.53,-0.36,-0.28,-0.15 -0.02,0.16,0.46,0.81,1.0 1.2,1.3,1.4,1.7), mean=0.489, stddev=0.397], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.03 0.05,0.06,0.09,0.11,0.13 0.15,0.18,0.21,0.41), mean=0.0909, stddev=0.041], oderiv-count=133312
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-13.7948, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000268095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0046, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.16 0.17,0.17,0.18,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.181, stddev=0.0133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.08,0.08 0.08,0.09,0.10,0.12,0.13 0.13,0.14,0.14,0.16), mean=0.104, stddev=0.0162], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.07,0.12,0.22,0.30 0.36,0.43,0.45,0.49), mean=0.153, stddev=0.0974], bias-{mean,stddev}=0.0001838,0.004988, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=5.02e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,0.06,0.10,0.15 0.22,0.27,0.38,0.50,0.58 0.67,0.73,0.75,0.85), mean=0.389, stddev=0.148], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.11,0.008,0.06,0.17 0.23,0.31,0.46,0.59,0.68 0.74,0.81,0.89,1.1), mean=0.454, stddev=0.176], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0186, stddev=0.0196], oderiv-count=34592
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-13.7948, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000268095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002809, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,1e-07,2e-07,4e-07 2e-06,4e-05,0.05,0.10,0.12 0.14,0.16,0.16,0.21), mean=0.0526, stddev=0.0486], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.08,0.14,0.15,0.16 0.16,0.17,0.18,0.20), mean=0.122, stddev=0.0385], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,8e-08,8e-08,1e-07 8e-06,0.02,0.06,0.14,0.21 0.29,0.38,0.42,0.48), mean=0.0908, stddev=0.0904], bias-{mean,stddev}=-0.0002813,0.002423, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000268095, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0009852, w_fc-rms=0.00106, w_oc-rms=0.001949, count=3.76e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00117334, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-1.8,-1.2,-0.78 -0.36,0.07,0.50,0.88,1.3 1.7,2.2,2.3,3.0), mean=0.478, stddev=0.715], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.62,-0.38,-0.35,-0.16 -0.03,0.13,0.25,0.38,0.53 0.66,0.74,0.84,1.4), mean=0.252, stddev=0.234] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00117334, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.5,-2.3,-1.8,-1.1 -0.64,-0.21,0.50,0.51,0.80 1.1,1.5,1.8,2.6), mean=0.234, stddev=0.718], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.51,-0.27,-0.16,-0.06 0.06,0.19,0.25,0.35,0.52 0.66,0.81,0.89,1.1), mean=0.27, stddev=0.201] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=1.26768, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-18,-9.4,-8.3,-5.6 -3.9,-2.2,-0.001,2.1,4.3 5.9,7.0,7.6,13), mean=-0.0295, stddev=3.33], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-5.3,-4.5,-3.7 -2.5,-1.1,1.0,1.5,3.2 4.5,5.2,5.8,8.1), mean=0.491, stddev=2.31] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00117334, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-2.2,-2.0,-1.2 -0.72,-0.14,0.50,0.79,1.2 1.6,2.0,2.1,3.3), mean=0.363, stddev=0.846], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.44,-0.32,-0.18 -0.05,0.12,0.25,0.40,0.59 0.73,0.90,1.1,1.3), mean=0.265, stddev=0.269] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00117334, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.5,-6.1,-4.9,-3.9 -2.6,-1.5,-0.0007,1.2,2.6 3.8,5.1,5.3,7.3), mean=-0.0422, stddev=2.16], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.2,-2.7,-2.1,-1.4 -0.64,0.11,1.0,1.2,1.9 2.3,2.8,3.0,4.0), mean=0.734, stddev=1.07] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=5.38e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=-0.000186012, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00123686, count-zeroing-boundaries=808
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.149862
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000268095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003638, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.05,0.08,0.10,0.11 0.12,0.12,0.12,0.12), mean=0.0793, stddev=0.0242], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,7e-05,9e-05,0.0001 0.0002,0.0007,0.06,0.08,0.08 0.09,0.10,0.10,0.12), mean=0.0466, stddev=0.0356], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,2e-06,0.11,0.17 0.20,0.23,0.25,0.28), mean=0.0398, stddev=0.0728], bias-{mean,stddev}=0.0002768,0.004896, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000268095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00465, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.11,0.11,0.12,0.14,0.16 0.17,0.18,0.19,0.21), mean=0.128, stddev=0.0212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.06 0.06,0.07,0.10,0.13,0.14 0.15,0.15,0.16,0.18), mean=0.101, stddev=0.0322], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 8e-08,1e-07,0.0009,0.15,0.24 0.32,0.40,0.42,0.49), mean=0.0683, stddev=0.11], bias-{mean,stddev}=0.000241,0.002734, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=4.54e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.18,-0.16,-0.13,-0.07 -0.03,0.01,0.10,0.18,0.24 0.27,0.32,0.34,0.50), mean=0.0983, stddev=0.106], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.59,-0.45,-0.39,-0.21 -0.04,0.09,0.43,0.72,0.89 1.0,1.1,1.3,1.5), mean=0.426, stddev=0.367], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.03,0.08,0.12,0.14 0.17,0.18,0.20,0.26), mean=0.0781, stddev=0.0507], oderiv-count=98560
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-13.7948, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000268095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00384, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.12 0.13,0.14,0.15,0.16,0.17 0.17,0.18,0.18,0.20), mean=0.151, stddev=0.0148], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.07 0.07,0.08,0.09,0.10,0.10 0.11,0.12,0.12,0.13), mean=0.0867, stddev=0.0124], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.06,0.10,0.18,0.25 0.31,0.37,0.39,0.44), mean=0.125, stddev=0.0852], bias-{mean,stddev}=0.0003996,0.004507, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.47e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.18,0.21,0.24 0.26,0.30,0.37,0.44,0.48 0.52,0.55,0.57,0.62), mean=0.37, stddev=0.0848], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.22,0.26 0.30,0.34,0.42,0.48,0.52 0.55,0.58,0.61,0.69), mean=0.414, stddev=0.088], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.03,0.04 0.04,0.05,0.05,0.06), mean=0.0165, stddev=0.0167], oderiv-count=28160
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-13.7948, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000268095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003491, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.04,0.06,0.12,0.16 0.17,0.18,0.19,0.21), mean=0.0764, stddev=0.0456], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.11,0.12,0.14,0.19,0.22 0.24,0.25,0.25,0.27), mean=0.153, stddev=0.0426], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,6e-07,1e-06,4e-05 0.02,0.03,0.06,0.17,0.29 0.38,0.47,0.51,0.58), mean=0.109, stddev=0.116], bias-{mean,stddev}=0.0001834,0.001208, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000268095, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.00245, w_fc-rms=0.001805, w_oc-rms=0.003547, count=3.42e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.0011808, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-2.0,-1.7,-1.1 -0.79,-0.36,0.50,1.3,1.7 2.2,2.5,2.8,3.5), mean=0.495, stddev=1.01], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.46,-0.34,-0.21 -0.05,0.09,0.38,0.64,0.77 0.88,1.0,1.1,1.5), mean=0.366, stddev=0.332] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.0011808, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-3.1,-2.6,-2.2 -1.7,-0.98,-0.01,0.88,1.5 1.9,2.3,2.4,3.2), mean=-0.0602, stddev=1.19], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.58,-0.25,-0.14,-0.02 0.08,0.20,0.44,0.72,0.88 0.99,1.2,1.3,1.7), mean=0.464, stddev=0.318] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.60129, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-26,-18,-16,-12 -8.6,-5.5,-0.30,6.0,8.5 12,17,18,30), mean=0.101, stddev=7.33], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-6.6,-5.8,-4.4 -3.2,-1.8,0.75,3.2,4.8 6.0,7.0,8.8,11), mean=0.782, stddev=3.17] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.0011808, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.8,-2.9,-2.3,-1.8 -1.1,-0.29,1.3,2.4,3.0 3.8,4.6,5.1,7.0), mean=1.12, stddev=1.68], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.65,-0.53,-0.37 -0.26,-0.07,0.18,0.53,0.71 0.86,1.0,1.2,1.6), mean=0.223, stddev=0.381] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0011808, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-19,-12,-11,-9.2 -6.2,-4.0,-0.21,3.9,6.2 8.8,11,12,27), mean=-0.00394, stddev=5.31], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.0,-4.7,-3.3,-2.6 -2.0,-0.95,0.53,2.0,2.9 3.7,4.3,5.0,6.2), mean=0.526, stddev=1.87] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=4.61e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=690
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.149862
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000268095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004607, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.06,0.08,0.14,0.14 0.15,0.15,0.16,0.16), mean=0.0981, stddev=0.0377], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.06,0.07,0.09,0.09 0.09,0.10,0.10,0.18), mean=0.0729, stddev=0.0141], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 6e-07,4e-06,0.02,0.14,0.20 0.24,0.27,0.30,0.34), mean=0.0631, stddev=0.084], bias-{mean,stddev}=0.0001019,0.01764, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000268095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005317, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.04 0.05,0.06,0.08,0.10,0.12 0.13,0.15,0.16,0.29), mean=0.0809, stddev=0.0283], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.14 0.15,0.15,0.20,0.31,0.32 0.33,0.34,0.34,0.35), mean=0.233, stddev=0.0737], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,4e-07,4e-07 7e-07,3e-06,0.008,0.35,0.48 0.55,0.60,0.62,0.67), mean=0.137, stddev=0.202], bias-{mean,stddev}=-3.488e-10,0.00152, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.03,0.04 0.04,0.05,0.06,0.23), mean=0.0179, stddev=0.0166], oderiv-count=38400

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.75376 tdnn2.affine:5.59856 lstm1.W_all:4.66709 lstm1.lstm_nonlin:0.1126 lstm1.W_rp:1.84608 tdnn3.affine:3.61122 tdnn4.affine:4.14431 lstm2.W_all:3.26815 lstm2.lstm_nonlin:0.0553614 lstm2.W_rp:1.33997 tdnn5.affine:2.96225 tdnn6.affine:3.45995 lstm3.W_all:4.05928 lstm3.lstm_nonlin:0.106569 lstm3.W_rp:1.71787 output.affine:3.93344 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.9595 tdnn2.affine:11.9797 lstm1.W_all:21.1737 lstm1.lstm_nonlin:1.48153 lstm1.W_rp:15.057 tdnn3.affine:8.73189 tdnn4.affine:8.87469 lstm2.W_all:17.9039 lstm2.lstm_nonlin:0.762962 lstm2.W_rp:14.2177 tdnn5.affine:8.25486 tdnn6.affine:8.78259 lstm3.W_all:25.2086 lstm3.lstm_nonlin:2.21995 lstm3.W_rp:30.6929 output.affine:31.8546 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.412421 tdnn2.affine:0.466559 lstm1.W_all:0.221861 lstm1.lstm_nonlin:0.0767613 lstm1.W_rp:0.123475 tdnn3.affine:0.413457 tdnn4.affine:0.466485 lstm2.W_all:0.183164 lstm2.lstm_nonlin:0.0746516 lstm2.W_rp:0.0950496 tdnn5.affine:0.359281 tdnn6.affine:0.393139 lstm3.W_all:0.16209 lstm3.lstm_nonlin:0.0490846 lstm3.W_rp:0.0561286 output.affine:0.124118 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:39:55 KST 2020, elapsed time 1 seconds
