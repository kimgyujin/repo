# nnet3-info exp/nnet3/tdnn_lstm1c_sp/13.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/12.mdl exp/nnet3/tdnn_lstm1c_sp/13.mdl 
# Started at Thu Jul 30 10:06:16 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/13.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000288797, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03057, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.007,0.01 0.02,0.06,0.56,0.67,0.74 0.78,0.85,0.91,1.0), mean=0.453, stddev=0.275], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.17,0.20,0.58,0.83,1.1 1.4,1.5,1.6,1.7), mean=0.588, stddev=0.374], bias-{mean,stddev}=-0.002964,0.06188, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0.213169, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,5e-06,2e-05 4e-05,0.0002,0.06,0.09,0.11 0.12,0.14,0.15,0.17), mean=0.0547, stddev=0.0435], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.002,0.003,0.007 0.02,0.05,0.43,0.60,0.68 0.75,0.81,0.83,0.92), mean=0.369, stddev=0.254], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.01,0.02 0.04,0.11,0.33,0.43,0.49 0.55,0.71,0.75,1.1), mean=0.306, stddev=0.174], oderiv-count=1.14086e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39073.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,6e-07,1e-06,4e-06 2e-05,0.0001,0.06,0.08,0.10 0.12,0.14,0.15,0.20), mean=0.0505, stddev=0.0417], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,2e-05,4e-05,9e-05 0.0002,0.001,0.10,0.12,0.13 0.13,0.14,0.15,0.17), mean=0.074, stddev=0.0511]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000288797, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01279, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.42 0.44,0.46,0.50,0.54,0.57 0.58,0.61,0.62,0.66), mean=0.503, stddev=0.0494], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.005,0.007 0.01,0.04,0.32,0.37,0.39 0.41,0.44,0.45,0.56), mean=0.252, stddev=0.147], bias-{mean,stddev}=-0.0007113,0.03161, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.27,0.28 0.30,0.31,0.33,0.36,0.38 0.39,0.41,0.41,0.47), mean=0.336, stddev=0.0332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.40,0.41 0.42,0.44,0.46,0.49,0.50 0.52,0.54,0.54,0.56), mean=0.462, stddev=0.0324], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.08), mean=0.0406, stddev=0.00744], oderiv-count=1.07859e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38233.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.27 0.29,0.30,0.33,0.36,0.38 0.40,0.42,0.43,0.49), mean=0.331, stddev=0.038], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.47,0.49 0.51,0.53,0.58,0.63,0.66 0.68,0.71,0.72,0.79), mean=0.581, stddev=0.0585]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000288797, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01813, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.25,0.29,0.40,0.57,0.67 0.74,0.82,0.85,1.1), mean=0.434, stddev=0.16], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.49,0.52 0.55,0.72,0.86,0.91,0.95 0.98,1.0,1.0,1.1), mean=0.814, stddev=0.144], bias-{mean,stddev}=-0.0001982,0.2119, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000288797, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.2205, w_fc-rms=0.2179, w_oc-rms=0.211, count=1.44e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00609935, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.37,0.40 0.42,0.45,0.50,0.56,0.59 0.62,0.66,0.69,0.77), mean=0.503, stddev=0.0682], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.24 0.24,0.24,0.25,0.25), mean=0.227, stddev=0.0134] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00609935, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.32,0.34 0.37,0.41,0.47,0.56,0.62 0.67,0.74,0.78,0.83), mean=0.485, stddev=0.0986], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.17,0.19 0.20,0.22,0.23,0.24,0.24 0.25,0.25,0.25,0.25), mean=0.227, stddev=0.0195] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0080107, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.75,-0.71,-0.61 -0.48,-0.29,0.003,0.34,0.49 0.59,0.67,0.70,0.81), mean=0.00703, stddev=0.355], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.31,0.32,0.38 0.42,0.46,0.57,0.69,0.75 0.84,0.87,0.89,0.93), mean=0.581, stddev=0.133] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00609935, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.37,0.39 0.41,0.43,0.48,0.53,0.56 0.59,0.64,0.67,0.73), mean=0.482, stddev=0.062], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.24,0.24,0.24,0.25), mean=0.222, stddev=0.0147] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00992204, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.80,-0.69,-0.55 -0.40,-0.23,0.002,0.26,0.39 0.52,0.64,0.73,0.87), mean=0.00425, stddev=0.31], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.30,0.48 0.61,0.69,0.81,0.88,0.91 0.93,0.96,0.97,0.98), mean=0.777, stddev=0.141] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=296907
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000288797, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03124, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.49,0.51,0.52 0.54,0.58,0.69,0.82,0.87 0.89,0.94,0.96,0.99), mean=0.702, stddev=0.123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.24 0.29,0.36,0.48,0.59,0.67 0.76,0.83,0.85,1.1), mean=0.482, stddev=0.148], bias-{mean,stddev}=0.02225,0.2156, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000288797, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01354, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.19,0.21,0.23 0.26,0.29,0.36,0.43,0.48 0.55,0.59,0.60,0.65), mean=0.367, stddev=0.0909], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.23,0.24,0.30,0.36,0.38 0.41,0.43,0.44,0.49), mean=0.303, stddev=0.0615], bias-{mean,stddev}=-0.0009172,0.01121, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.37e+05, self-repaired-proportion=0.00192308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.05,0.07,0.08 0.10,0.11,0.16,0.21,0.23 0.25,0.27,0.28,0.32), mean=0.161, stddev=0.0509], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.16,0.22,0.26 0.31,0.36,0.48,0.60,0.67 0.70,0.73,0.75,0.80), mean=0.48, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.05,0.06,0.07,0.08 0.09,0.10,0.11,0.14), mean=0.0607, stddev=0.0151], oderiv-count=1.11014e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35714.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.05,0.06,0.08 0.09,0.11,0.15,0.20,0.22 0.24,0.26,0.28,0.34), mean=0.155, stddev=0.05], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.14,0.16,0.18 0.20,0.22,0.24,0.28,0.30 0.32,0.36,0.36,0.38), mean=0.246, stddev=0.0442]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000288797, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009856, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.26,0.30 0.33,0.35,0.39,0.42,0.44 0.46,0.47,0.48,0.53), mean=0.387, stddev=0.0462], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.12,0.14 0.16,0.18,0.22,0.26,0.28 0.30,0.32,0.33,0.38), mean=0.22, stddev=0.0471], bias-{mean,stddev}=-0.009326,0.01775, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.58e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.26 0.27,0.29,0.32,0.35,0.37 0.39,0.40,0.42,0.45), mean=0.32, stddev=0.0375], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.42,0.44,0.46,0.48 0.49,0.50,0.51,0.52), mean=0.442, stddev=0.0272], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.0268, stddev=0.00336], oderiv-count=1.12506e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33195.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.26,0.28,0.30,0.34,0.36 0.38,0.41,0.43,0.49), mean=0.309, stddev=0.0413], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.43,0.45,0.48 0.50,0.52,0.57,0.63,0.66 0.70,0.72,0.73,0.78), mean=0.574, stddev=0.0656]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000288797, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01517, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.22,0.24,0.32,0.48,0.56 0.63,0.68,0.72,0.96), mean=0.363, stddev=0.133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.47 0.49,0.56,0.71,0.77,0.80 0.84,0.87,0.88,0.96), mean=0.682, stddev=0.115], bias-{mean,stddev}=0.005731,0.2113, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000288797, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.2278, w_fc-rms=0.2205, w_oc-rms=0.2199, count=1.31e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.39,0.40 0.42,0.44,0.50,0.56,0.59 0.61,0.64,0.66,0.69), mean=0.503, stddev=0.0651], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.24 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0143] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.38 0.40,0.43,0.48,0.55,0.60 0.66,0.71,0.76,0.83), mean=0.491, stddev=0.0836], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.19,0.20 0.21,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0167] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00615378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.70,-0.65,-0.50 -0.40,-0.27,-0.005,0.27,0.44 0.53,0.63,0.65,0.78), mean=0.00352, stddev=0.314], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.38,0.42,0.47 0.50,0.54,0.64,0.76,0.84 0.88,0.91,0.93,0.94), mean=0.65, stddev=0.128] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.37,0.39 0.41,0.44,0.48,0.54,0.57 0.62,0.65,0.66,0.70), mean=0.491, stddev=0.0663], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.22,0.23,0.24,0.24 0.24,0.24,0.25,0.25), mean=0.228, stddev=0.0131] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00729035, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.76,-0.68,-0.44 -0.33,-0.18,-0.003,0.22,0.34 0.50,0.65,0.72,0.88), mean=0.00595, stddev=0.281], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.38,0.55 0.69,0.76,0.84,0.91,0.93 0.96,0.97,0.98,0.98), mean=0.816, stddev=0.129] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=261813
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000288797, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02907, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.49,0.51,0.53 0.55,0.57,0.65,0.74,0.77 0.82,0.87,0.87,0.90), mean=0.657, stddev=0.0907], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.24,0.28,0.42,0.58,0.66 0.75,0.87,0.90,1.1), mean=0.437, stddev=0.169], bias-{mean,stddev}=-0.00577,0.2081, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000288797, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01272, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.14,0.17,0.19 0.23,0.25,0.32,0.41,0.48 0.53,0.61,0.65,0.76), mean=0.339, stddev=0.107], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.22,0.24,0.28,0.33,0.36 0.38,0.40,0.41,0.46), mean=0.285, stddev=0.0529], bias-{mean,stddev}=-0.0001828,0.009682, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.38e+05, self-repaired-proportion=0.0105565, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.007,0.04,0.05 0.06,0.08,0.14,0.19,0.22 0.23,0.25,0.26,0.31), mean=0.139, stddev=0.0581], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.05,0.14,0.19 0.24,0.29,0.42,0.55,0.60 0.64,0.69,0.70,0.82), mean=0.421, stddev=0.142], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.05,0.06,0.07,0.08 0.10,0.12,0.14,0.26), mean=0.0614, stddev=0.0213], oderiv-count=1.06662e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30676.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.003,0.04,0.06 0.07,0.09,0.13,0.18,0.20 0.23,0.24,0.26,0.28), mean=0.133, stddev=0.0533], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.03,0.10,0.14 0.16,0.19,0.23,0.27,0.29 0.31,0.33,0.34,0.38), mean=0.226, stddev=0.0545]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000288797, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009879, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.29,0.31 0.33,0.35,0.38,0.42,0.45 0.47,0.51,0.52,0.66), mean=0.387, stddev=0.0496], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.10,0.11,0.12 0.14,0.16,0.21,0.27,0.29 0.32,0.36,0.39,0.54), mean=0.216, stddev=0.0642], bias-{mean,stddev}=-0.008949,0.02035, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.94e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.27 0.28,0.29,0.32,0.36,0.37 0.39,0.41,0.42,0.61), mean=0.326, stddev=0.0395], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.36,0.37 0.39,0.40,0.42,0.45,0.46 0.48,0.49,0.50,0.52), mean=0.423, stddev=0.0297], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.024, stddev=0.00297], oderiv-count=928960
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28157.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.26 0.27,0.29,0.32,0.36,0.38 0.39,0.42,0.44,0.70), mean=0.322, stddev=0.0464], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.49,0.51 0.53,0.56,0.60,0.67,0.70 0.73,0.77,0.83,0.98), mean=0.613, stddev=0.0715]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000288797, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01923, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.23,0.25 0.28,0.34,0.44,0.58,0.71 0.78,0.82,0.86,1.1), mean=0.466, stddev=0.153], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.63,0.65,0.69 0.72,0.75,0.80,1.0,1.1 1.2,1.3,1.3,1.4), mean=0.862, stddev=0.162], bias-{mean,stddev}=0.005691,0.2133, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000288797, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.2043, w_fc-rms=0.2161, w_oc-rms=0.2234, count=1.19e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621952, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.42,0.43,0.46 0.48,0.50,0.56,0.62,0.64 0.67,0.69,0.69,0.72), mean=0.562, stddev=0.0642], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.17,0.18 0.19,0.19,0.21,0.22,0.23 0.23,0.24,0.24,0.25), mean=0.207, stddev=0.0164] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621952, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.39,0.43 0.45,0.49,0.57,0.64,0.67 0.70,0.75,0.76,0.85), mean=0.566, stddev=0.0846], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.17 0.18,0.19,0.21,0.23,0.23 0.24,0.24,0.24,0.25), mean=0.208, stddev=0.0211] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00621952, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.71,-0.67,-0.49 -0.37,-0.22,-0.006,0.22,0.36 0.47,0.58,0.59,0.72), mean=-0.00474, stddev=0.283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.29,0.31,0.35 0.40,0.43,0.49,0.56,0.62 0.67,0.74,0.78,0.81), mean=0.497, stddev=0.0942] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621952, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.43,0.47 0.49,0.53,0.62,0.68,0.71 0.73,0.75,0.75,0.80), mean=0.607, stddev=0.0801], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.16 0.17,0.18,0.19,0.21,0.22 0.22,0.23,0.23,0.24), mean=0.192, stddev=0.018] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00621952, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.72,-0.66,-0.50 -0.33,-0.20,-0.003,0.19,0.33 0.46,0.55,0.66,0.76), mean=-0.00445, stddev=0.269], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.36,0.39,0.47 0.53,0.60,0.67,0.74,0.78 0.82,0.87,0.89,0.92), mean=0.664, stddev=0.104] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222596
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000288797, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06235, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.4,1.5,1.6 1.7,1.7,1.7,1.8), mean=1.42, stddev=0.135], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.42,0.55 0.65,0.80,1.0,1.2,1.3 1.3,1.4,1.4,1.7), mean=0.978, stddev=0.232], bias-{mean,stddev}=0.01942,0.2194, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000288797, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04133, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.50,0.52,0.54 0.56,0.59,0.64,0.71,0.76 0.80,0.87,0.95,2.4), mean=0.657, stddev=0.111], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.7,1.7,1.9,2.0,2.1 2.2,2.3,2.3,2.3), mean=1.89, stddev=0.171], bias-{mean,stddev}=4.2e-09,0.01793, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=607360
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/12.mdl exp/nnet3/tdnn_lstm1c_sp/13.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.26075 tdnn2.affine:9.50077 lstm1.W_all:8.32603 lstm1.lstm_nonlin:1.03553 lstm1.W_rp:3.62131 tdnn3.affine:5.94723 tdnn4.affine:6.95325 lstm2.W_all:5.74355 lstm2.lstm_nonlin:1.07189 lstm2.W_rp:2.48274 tdnn5.affine:4.87961 tdnn6.affine:6.20408 lstm3.W_all:7.01525 lstm3.lstm_nonlin:1.01231 lstm3.W_rp:2.86977 output.affine:6.48101 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.1568 tdnn2.affine:11.5438 lstm1.W_all:23.1956 lstm1.lstm_nonlin:8.55061 lstm1.W_rp:12.0052 tdnn3.affine:8.62522 tdnn4.affine:8.88909 lstm2.W_all:20.1038 lstm2.lstm_nonlin:8.79731 lstm2.W_rp:11.2046 tdnn5.affine:8.1053 tdnn6.affine:8.91173 lstm3.W_all:24.3798 lstm3.lstm_nonlin:8.48179 lstm3.W_rp:23.1977 output.affine:30.5775 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.75638 tdnn2.affine:0.821505 lstm1.W_all:0.346159 lstm1.lstm_nonlin:0.108278 lstm1.W_rp:0.294287 tdnn3.affine:0.675762 tdnn4.affine:0.775983 lstm2.W_all:0.270917 lstm2.lstm_nonlin:0.108697 lstm2.W_rp:0.215416 tdnn5.affine:0.594357 tdnn6.affine:0.693683 lstm3.W_all:0.278487 lstm3.lstm_nonlin:0.107044 lstm3.W_rp:0.12377 output.affine:0.211812 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:06:16 KST 2020, elapsed time 0 seconds
