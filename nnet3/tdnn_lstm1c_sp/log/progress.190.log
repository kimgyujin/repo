# nnet3-info exp/nnet3/tdnn_lstm1c_sp/190.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/189.mdl exp/nnet3/tdnn_lstm1c_sp/190.mdl 
# Started at Thu Jul 30 11:16:11 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/190.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000164737, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02868, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.008,0.02 0.02,0.20,0.51,0.60,0.66 0.71,0.78,0.82,1.1), mean=0.443, stddev=0.224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.16,0.20,0.56,0.77,1.0 1.3,1.4,1.4,1.5), mean=0.557, stddev=0.342], bias-{mean,stddev}=0.004812,0.05244, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0.13393, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,7e-06,1e-05,2e-05 0.0001,0.001,0.06,0.08,0.09 0.11,0.12,0.14,0.16), mean=0.0528, stddev=0.036], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.005,0.02 0.04,0.12,0.47,0.62,0.71 0.77,0.87,0.90,0.96), mean=0.425, stddev=0.241], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.03 0.05,0.25,0.35,0.45,0.50 0.60,0.68,0.84,1.5), mean=0.341, stddev=0.183], oderiv-count=1.13446e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32996.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,1e-06,2e-06,1e-05 6e-05,0.001,0.05,0.08,0.10 0.11,0.12,0.14,0.18), mean=0.0512, stddev=0.0364], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,5e-05,7e-05,0.0002 0.0005,0.006,0.08,0.10,0.11 0.12,0.12,0.13,0.14), mean=0.0716, stddev=0.0406]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000164737, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01143, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.36,0.37 0.39,0.41,0.44,0.49,0.51 0.54,0.57,0.59,0.73), mean=0.448, stddev=0.0529], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.005,0.008 0.01,0.11,0.27,0.31,0.33 0.35,0.37,0.40,0.68), mean=0.234, stddev=0.115], bias-{mean,stddev}=-0.002815,0.02809, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.25 0.26,0.28,0.30,0.33,0.35 0.37,0.40,0.40,0.58), mean=0.305, stddev=0.0371], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.41 0.42,0.43,0.46,0.49,0.50 0.51,0.52,0.53,0.54), mean=0.46, stddev=0.0296], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0466, stddev=0.00906], oderiv-count=1.1479e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32274.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.24,0.25 0.26,0.27,0.30,0.33,0.35 0.37,0.41,0.42,0.62), mean=0.303, stddev=0.0407], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.42,0.43,0.45 0.46,0.48,0.53,0.58,0.61 0.64,0.67,0.68,0.88), mean=0.533, stddev=0.0601]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000164737, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01581, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.0001,0.0005,0.003 0.02,0.17,0.35,0.52,0.62 0.69,0.75,0.79,1.0), mean=0.348, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.32,0.34,0.39 0.44,0.62,0.74,0.81,0.86 0.90,0.95,0.97,1.3), mean=0.705, stddev=0.154], bias-{mean,stddev}=-0.0001728,0.02198, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000164737, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.026, w_fc-rms=0.02928, w_oc-rms=0.03347, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628295, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.44,0.45 0.46,0.47,0.49,0.51,0.54 0.59,0.70,0.72,0.75), mean=0.499, stddev=0.051], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.015] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628295, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.40,0.41,0.42 0.44,0.46,0.49,0.51,0.55 0.64,0.70,0.73,0.78), mean=0.496, stddev=0.0621], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0153] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00628295, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.85,-0.82,-0.52 -0.34,-0.18,0.004,0.19,0.30 0.43,0.61,0.76,0.87), mean=-0.00576, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.28,0.35 0.43,0.48,0.60,0.77,0.99 1.0,1.0,1.0,1.0), mean=0.632, stddev=0.19] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628295, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.42 0.44,0.45,0.47,0.50,0.50 0.53,0.56,0.57,0.61), mean=0.472, stddev=0.0322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0166] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00628295, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.81,-0.72,-0.41 -0.27,-0.15,0.002,0.14,0.24 0.36,0.55,0.71,0.87), mean=-0.00599, stddev=0.247], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.30,0.33,0.53 0.69,0.77,0.85,0.92,1.0 1.0,1.0,1.0,1.0), mean=0.827, stddev=0.141] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.38358e-06, count-zeroing-boundaries=295545
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0603306
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000164737, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03173, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.18,0.20 0.22,0.27,0.46,1.0,1.1 1.1,1.1,1.2,1.2), mean=0.629, stddev=0.358], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.004,0.007,0.01 0.04,0.29,0.45,0.59,0.70 0.86,1.1,1.3,1.5), mean=0.446, stddev=0.251], bias-{mean,stddev}=0.003365,0.2305, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000164737, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01177, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.23,0.25,0.32,0.38,0.42 0.44,0.48,0.49,0.60), mean=0.321, stddev=0.0723], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.10,0.20,0.37,0.41 0.43,0.46,0.48,0.54), mean=0.233, stddev=0.134], bias-{mean,stddev}=0.003861,0.0219, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.05 0.06,0.07,0.10,0.13,0.14 0.15,0.16,0.17,0.20), mean=0.101, stddev=0.0308], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.17,0.22,0.27 0.32,0.38,0.51,0.61,0.66 0.69,0.72,0.74,0.79), mean=0.495, stddev=0.13], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.13,0.14 0.15,0.17,0.19,0.38), mean=0.111, stddev=0.0267], oderiv-count=1.17274e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30109.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.05 0.05,0.07,0.10,0.12,0.14 0.15,0.16,0.17,0.19), mean=0.0971, stddev=0.0311], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.11,0.12 0.13,0.14,0.15,0.18,0.19 0.20,0.21,0.23,0.26), mean=0.157, stddev=0.026]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000164737, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008529, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.29,0.31,0.33,0.36,0.38 0.40,0.42,0.43,0.54), mean=0.335, stddev=0.0364], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.16,0.19,0.22,0.23 0.25,0.27,0.28,0.34), mean=0.192, stddev=0.0336], bias-{mean,stddev}=-0.01271,0.01556, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.68e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.22,0.23,0.26,0.29,0.30 0.32,0.33,0.35,0.44), mean=0.262, stddev=0.0331], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.50,0.51,0.51,0.54), mean=0.44, stddev=0.0327], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05), mean=0.0368, stddev=0.00326], oderiv-count=1.07354e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27944.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.20 0.22,0.23,0.26,0.28,0.30 0.32,0.34,0.35,0.44), mean=0.258, stddev=0.0354], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.40,0.41,0.42 0.44,0.46,0.49,0.54,0.57 0.60,0.65,0.71,0.84), mean=0.502, stddev=0.0595]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000164737, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01311, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,8e-07,1e-06,4e-06 1e-05,0.0003,0.27,0.47,0.55 0.59,0.63,0.66,1.2), mean=0.253, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.27,0.33 0.40,0.53,0.60,0.65,0.69 0.74,0.80,0.86,1.4), mean=0.585, stddev=0.123], bias-{mean,stddev}=-0.00495,0.04355, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000164737, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.009529, w_fc-rms=0.009906, w_oc-rms=0.01552, count=1.34e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633581, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.42,0.43,0.44 0.45,0.46,0.50,0.51,0.54 0.58,0.62,0.65,0.72), mean=0.497, stddev=0.0433], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0143] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633581, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.38,0.40 0.42,0.44,0.49,0.50,0.50 0.53,0.57,0.59,0.77), mean=0.475, stddev=0.0454], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.012] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00933792, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.75,-0.58,-0.39 -0.25,-0.12,2e-05,0.11,0.25 0.34,0.56,0.66,0.84), mean=-0.0032, stddev=0.22], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.31,0.37,0.50 0.54,0.58,0.67,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.749, stddev=0.202] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633581, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.40,0.42 0.44,0.45,0.49,0.50,0.51 0.54,0.57,0.60,0.65), mean=0.483, stddev=0.0367], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0153] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00633581, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.58,-0.42,-0.30 -0.18,-0.09,0.0003,0.08,0.18 0.26,0.45,0.58,0.73), mean=-0.00156, stddev=0.176], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.52,0.59,0.73 0.79,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.902, stddev=0.104] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.83622e-06, count-zeroing-boundaries=260673
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0603306
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000164737, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02931, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.33,0.36 0.38,0.40,0.55,0.87,0.91 0.95,0.97,0.98,1.1), mean=0.631, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0005,0.0006,0.0009 0.002,0.004,0.46,0.62,0.72 0.80,0.89,0.94,1.0), mean=0.369, stddev=0.295], bias-{mean,stddev}=0.003156,0.1448, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000164737, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01054, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.20 0.21,0.23,0.28,0.33,0.38 0.43,0.46,0.48,0.51), mean=0.287, stddev=0.0675], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.14,0.21,0.32,0.34 0.35,0.37,0.39,0.44), mean=0.226, stddev=0.0829], bias-{mean,stddev}=0.0033,0.01068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.6e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.05,0.07,0.08,0.09 0.10,0.11,0.12,0.15), mean=0.0653, stddev=0.0222], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.19,0.24 0.27,0.34,0.47,0.57,0.61 0.65,0.67,0.69,0.77), mean=0.457, stddev=0.125], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.13,0.15,0.17 0.19,0.23,0.24,0.27), mean=0.134, stddev=0.0297], oderiv-count=1.01184e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25779, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.03,0.04,0.06,0.08,0.09 0.10,0.11,0.12,0.13), mean=0.0648, stddev=0.0225], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.08 0.09,0.09,0.11,0.12,0.13 0.14,0.14,0.15,0.19), mean=0.108, stddev=0.018]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000164737, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007961, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.23,0.24 0.26,0.27,0.31,0.35,0.38 0.39,0.41,0.41,0.52), mean=0.311, stddev=0.0464], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.14,0.15,0.17,0.20,0.23 0.25,0.28,0.32,0.36), mean=0.177, stddev=0.0392], bias-{mean,stddev}=-0.01127,0.02048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.52e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.22,0.23,0.26,0.29,0.30 0.31,0.33,0.34,0.45), mean=0.26, stddev=0.0338], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.36,0.37 0.38,0.39,0.42,0.45,0.46 0.47,0.48,0.50,0.52), mean=0.421, stddev=0.0306], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.03, stddev=0.00266], oderiv-count=978240
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23613.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.20 0.22,0.23,0.26,0.29,0.30 0.32,0.34,0.34,0.58), mean=0.263, stddev=0.0387], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.31,0.35,0.40 0.42,0.46,0.51,0.57,0.60 0.64,0.67,0.70,1.0), mean=0.516, stddev=0.077]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000164737, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01881, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.22,0.26 0.29,0.34,0.42,0.61,0.69 0.74,0.78,0.80,1.3), mean=0.456, stddev=0.148], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.61 0.63,0.65,0.71,1.0,1.3 1.4,1.5,1.5,1.7), mean=0.82, stddev=0.252], bias-{mean,stddev}=0.02495,0.02603, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000164737, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04679, w_fc-rms=0.047, w_oc-rms=0.04702, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639959, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.56,0.57 0.59,0.61,0.66,0.70,0.72 0.75,0.76,0.77,0.80), mean=0.66, stddev=0.0521], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.17 0.18,0.18,0.19,0.20,0.21 0.21,0.21,0.22,0.24), mean=0.193, stddev=0.0137] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639959, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.49,0.50 0.52,0.55,0.59,0.64,0.69 0.75,0.78,0.79,0.87), mean=0.6, stddev=0.069], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.15,0.15,0.16 0.18,0.19,0.20,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.2, stddev=0.0166] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0087278, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.73,-0.69,-0.52 -0.36,-0.24,-0.01,0.23,0.35 0.50,0.62,0.76,0.85), mean=-0.00608, stddev=0.294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.25,0.26,0.30 0.35,0.39,0.44,0.48,0.50 0.51,0.54,0.55,0.67), mean=0.434, stddev=0.0647] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639959, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.55,0.56,0.58 0.60,0.62,0.66,0.70,0.72 0.73,0.75,0.76,0.86), mean=0.659, stddev=0.0465], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.22), mean=0.18, stddev=0.0139] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00685139, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.77,-0.70,-0.50 -0.34,-0.22,-0.01,0.21,0.32 0.47,0.66,0.76,0.87), mean=-0.00686, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.28,0.30,0.34 0.43,0.53,0.62,0.66,0.68 0.70,0.72,0.72,0.74), mean=0.588, stddev=0.102] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221692
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0603306
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000164737, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.074, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.0,1.1 1.1,1.2,1.6,2.1,2.1 2.2,2.2,2.3,2.3), mean=1.64, stddev=0.416], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.74,0.88,0.96 1.0,1.1,1.2,1.3,1.4 1.5,1.5,1.5,1.6), mean=1.18, stddev=0.155], bias-{mean,stddev}=0.009766,0.34, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000164737, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0383, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.50,0.51,0.53 0.54,0.56,0.60,0.65,0.68 0.71,0.75,0.80,2.2), mean=0.611, stddev=0.0879], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.1,2.2 2.3,2.4,2.4,2.5), mean=1.71, stddev=0.406], bias-{mean,stddev}=5.482e-09,0.03177, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0167, stddev=0.0138], oderiv-count=606720
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/189.mdl exp/nnet3/tdnn_lstm1c_sp/190.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.54348 tdnn2.affine:6.49415 lstm1.W_all:5.11817 lstm1.lstm_nonlin:0.0950472 lstm1.W_rp:2.09167 tdnn3.affine:4.17524 tdnn4.affine:4.74338 lstm2.W_all:3.53882 lstm2.lstm_nonlin:0.0413618 lstm2.W_rp:1.44898 tdnn5.affine:3.3091 tdnn6.affine:3.83427 lstm3.W_all:4.6101 lstm3.lstm_nonlin:0.0895909 lstm3.W_rp:1.81567 output.affine:4.09122 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.3905 tdnn2.affine:10.3136 lstm1.W_all:18.4133 lstm1.lstm_nonlin:1.17479 lstm1.W_rp:12.2441 tdnn3.affine:7.51512 tdnn4.affine:7.69586 lstm2.W_all:15.379 lstm2.lstm_nonlin:0.472757 lstm2.W_rp:11.0256 tdnn5.affine:6.7196 tdnn6.affine:7.18994 lstm3.W_all:21.9389 lstm3.lstm_nonlin:1.85389 lstm3.W_rp:27.7575 output.affine:28.3637 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.575347 tdnn2.affine:0.630707 lstm1.W_all:0.277848 lstm1.lstm_nonlin:0.0815686 lstm1.W_rp:0.171316 tdnn3.affine:0.560069 tdnn4.affine:0.617781 lstm2.W_all:0.23015 lstm2.lstm_nonlin:0.0881099 lstm2.W_rp:0.131858 tdnn5.affine:0.496921 tdnn6.affine:0.53542 lstm3.W_all:0.210302 lstm3.lstm_nonlin:0.0482654 lstm3.W_rp:0.0655445 output.affine:0.144231 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:16:11 KST 2020, elapsed time 0 seconds
