# nnet3-info exp/nnet3/tdnn_lstm1c_sp/55.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/54.mdl exp/nnet3/tdnn_lstm1c_sp/55.mdl 
# Started at Thu Jul 30 10:22:53 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/55.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000252779, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03098, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.03 0.06,0.44,0.54,0.63,0.68 0.74,0.81,0.89,1.0), mean=0.496, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.17,0.21,0.60,0.82,1.2 1.4,1.6,1.6,1.7), mean=0.598, stddev=0.376], bias-{mean,stddev}=0.003047,0.05968, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.86e+05, self-repaired-proportion=0.106284, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,6e-06,1e-05,7e-05 0.0003,0.03,0.07,0.09,0.10 0.12,0.13,0.14,0.21), mean=0.0615, stddev=0.0369], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.003,0.006,0.01 0.05,0.23,0.48,0.62,0.72 0.80,0.87,0.88,0.97), mean=0.446, stddev=0.229], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.03,0.04 0.11,0.26,0.34,0.43,0.49 0.55,0.63,0.68,1.2), mean=0.337, stddev=0.143], oderiv-count=1.18963e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34712.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,1e-06,2e-06,1e-05 0.0002,0.02,0.06,0.09,0.10 0.12,0.13,0.14,0.19), mean=0.0589, stddev=0.0368], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,6e-05,7e-05,0.0002 0.001,0.06,0.10,0.11,0.12 0.13,0.13,0.14,0.15), mean=0.0827, stddev=0.0393]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000252779, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01278, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.40,0.41 0.43,0.45,0.50,0.54,0.57 0.60,0.62,0.64,0.82), mean=0.502, stddev=0.0556], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.009,0.02 0.04,0.25,0.30,0.34,0.36 0.38,0.40,0.43,0.77), mean=0.27, stddev=0.109], bias-{mean,stddev}=-0.0009952,0.02711, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.31 0.32,0.33,0.37,0.40,0.42 0.44,0.46,0.49,0.67), mean=0.367, stddev=0.0424], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.44,0.46,0.48,0.50 0.51,0.52,0.53,0.53), mean=0.459, stddev=0.0272], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0396, stddev=0.00758], oderiv-count=1.21178e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33990.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.29 0.31,0.32,0.36,0.39,0.42 0.43,0.45,0.48,0.70), mean=0.36, stddev=0.0459], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.50,0.51,0.53 0.55,0.58,0.63,0.69,0.72 0.74,0.78,0.81,1.0), mean=0.635, stddev=0.0676]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000252779, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01761, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.01,0.05 0.14,0.23,0.39,0.58,0.68 0.76,0.84,0.89,1.1), mean=0.4, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.39,0.46 0.52,0.69,0.82,0.90,0.94 0.98,1.0,1.1,1.4), mean=0.788, stddev=0.158], bias-{mean,stddev}=-0.001652,0.01985, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000252779, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02498, w_fc-rms=0.03971, w_oc-rms=0.0536, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614532, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.41,0.42,0.44 0.45,0.46,0.49,0.53,0.57 0.63,0.66,0.69,0.72), mean=0.501, stddev=0.055], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0151] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614532, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.36,0.38,0.39 0.41,0.43,0.48,0.53,0.62 0.70,0.76,0.79,0.85), mean=0.495, stddev=0.0903], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.16,0.19 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0213] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00836963, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.82,-0.80,-0.59 -0.39,-0.21,-0.001,0.23,0.38 0.59,0.76,0.79,0.83), mean=-0.000266, stddev=0.325], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.26,0.30,0.34 0.38,0.45,0.57,0.69,0.82 0.96,0.99,1.0,1.0), mean=0.585, stddev=0.166] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614532, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.41 0.43,0.44,0.47,0.51,0.53 0.55,0.59,0.60,0.67), mean=0.476, stddev=0.0443], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0169] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0180127, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.88,-0.81,-0.57 -0.33,-0.21,-0.006,0.18,0.34 0.53,0.78,0.82,0.89), mean=-0.00371, stddev=0.312], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.20,0.23,0.33 0.55,0.71,0.82,0.88,0.92 0.98,1.0,1.0,1.0), mean=0.775, stddev=0.17] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=296715
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000252779, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03238, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.28,0.29 0.32,0.36,0.56,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.671, stddev=0.308], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.10 0.24,0.35,0.49,0.62,0.72 0.81,0.90,1.0,1.2), mean=0.485, stddev=0.194], bias-{mean,stddev}=-0.003205,0.04275, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000252779, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01306, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.25 0.27,0.29,0.35,0.41,0.46 0.51,0.53,0.56,0.67), mean=0.357, stddev=0.0762], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.14,0.23,0.40,0.45 0.48,0.51,0.51,0.54), mean=0.268, stddev=0.131], bias-{mean,stddev}=-0.003761,0.02254, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0.00133779, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.05,0.05,0.07 0.09,0.11,0.15,0.19,0.21 0.23,0.24,0.25,0.29), mean=0.147, stddev=0.0471], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.17,0.20,0.25 0.30,0.37,0.49,0.60,0.64 0.67,0.70,0.70,0.73), mean=0.48, stddev=0.127], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.06,0.07,0.08,0.09 0.10,0.11,0.12,0.30), mean=0.0707, stddev=0.0179], oderiv-count=1.04269e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31825.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.05,0.07 0.08,0.10,0.14,0.18,0.20 0.23,0.24,0.25,0.30), mean=0.142, stddev=0.0476], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.14,0.15,0.17 0.19,0.20,0.23,0.26,0.28 0.30,0.32,0.33,0.38), mean=0.232, stddev=0.0404]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000252779, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009486, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.32 0.33,0.34,0.37,0.40,0.42 0.43,0.45,0.46,0.58), mean=0.373, stddev=0.0365], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.17,0.18,0.21,0.24,0.26 0.28,0.29,0.31,0.35), mean=0.214, stddev=0.0338], bias-{mean,stddev}=-0.009242,0.01654, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.7e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.23,0.24 0.26,0.27,0.30,0.34,0.36 0.38,0.40,0.42,0.46), mean=0.307, stddev=0.0397], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.40 0.40,0.42,0.44,0.47,0.49 0.50,0.51,0.53,0.55), mean=0.444, stddev=0.0322], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0297, stddev=0.00264], oderiv-count=943424
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29660.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.25,0.27,0.30,0.34,0.36 0.38,0.40,0.41,0.45), mean=0.302, stddev=0.043], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.49 0.50,0.53,0.57,0.63,0.66 0.69,0.75,0.79,0.89), mean=0.579, stddev=0.0663]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000252779, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01366, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.004 0.01,0.05,0.28,0.47,0.57 0.62,0.67,0.70,1.1), mean=0.281, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.28,0.32 0.38,0.54,0.64,0.70,0.74 0.76,0.81,0.84,0.94), mean=0.609, stddev=0.131], bias-{mean,stddev}=-0.002544,0.02043, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000252779, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01446, w_fc-rms=0.0197, w_oc-rms=0.02449, count=1.32e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620119, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.43,0.45 0.46,0.47,0.50,0.51,0.53 0.57,0.60,0.61,0.65), mean=0.495, stddev=0.0353], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0155] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620119, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.40,0.41,0.41 0.43,0.44,0.49,0.51,0.52 0.56,0.62,0.66,0.76), mean=0.484, stddev=0.0498], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.238, stddev=0.0133] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00811234, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.64,-0.60,-0.40 -0.27,-0.15,0.007,0.17,0.31 0.43,0.58,0.65,0.76), mean=0.00967, stddev=0.241], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.44,0.46,0.50 0.54,0.57,0.65,0.94,0.99 1.0,1.0,1.0,1.0), mean=0.714, stddev=0.172] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620119, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.42,0.43 0.44,0.45,0.49,0.50,0.52 0.55,0.57,0.58,0.65), mean=0.486, stddev=0.0359], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0161] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00620119, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.66,-0.57,-0.36 -0.25,-0.14,0.006,0.16,0.29 0.42,0.56,0.62,0.83), mean=0.0108, stddev=0.232], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.42,0.52,0.65 0.76,0.81,0.88,0.97,1.0 1.0,1.0,1.0,1.0), mean=0.869, stddev=0.109] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=261624
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000252779, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02889, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.42,0.42 0.44,0.47,0.61,0.81,0.87 0.92,0.94,0.96,1.0), mean=0.637, stddev=0.169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.04,0.09,0.44,0.61,0.70 0.77,0.85,0.90,1.0), mean=0.394, stddev=0.248], bias-{mean,stddev}=0.001182,0.0938, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000252779, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01205, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.24,0.26,0.31,0.38,0.43 0.51,0.57,0.60,0.64), mean=0.326, stddev=0.0849], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.18,0.19,0.25,0.34,0.37 0.40,0.42,0.43,0.47), mean=0.264, stddev=0.0751], bias-{mean,stddev}=0.001756,0.01965, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.97e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.05 0.06,0.07,0.10,0.13,0.14 0.16,0.17,0.18,0.21), mean=0.0991, stddev=0.0356], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.19 0.25,0.30,0.43,0.54,0.58 0.62,0.65,0.66,0.68), mean=0.42, stddev=0.128], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.06,0.06,0.07,0.09,0.11 0.11,0.12,0.14,0.15), mean=0.0786, stddev=0.0175], oderiv-count=1.05242e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27495.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.04 0.05,0.07,0.10,0.13,0.14 0.16,0.18,0.18,0.23), mean=0.0974, stddev=0.037], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.12 0.14,0.15,0.17,0.20,0.21 0.22,0.25,0.26,0.31), mean=0.172, stddev=0.0347]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000252779, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009196, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.28,0.29 0.30,0.32,0.35,0.40,0.43 0.45,0.47,0.48,0.55), mean=0.36, stddev=0.049], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.15 0.16,0.17,0.20,0.24,0.26 0.29,0.33,0.36,0.47), mean=0.204, stddev=0.0466], bias-{mean,stddev}=-0.01077,0.0146, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.61e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.23 0.26,0.28,0.31,0.35,0.36 0.37,0.39,0.40,0.49), mean=0.311, stddev=0.0427], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.35,0.36 0.37,0.39,0.42,0.45,0.46 0.48,0.49,0.49,0.52), mean=0.417, stddev=0.0345], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0249, stddev=0.00258], oderiv-count=893440
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25330, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.25,0.27,0.31,0.35,0.37 0.38,0.40,0.42,0.60), mean=0.311, stddev=0.0488], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.46,0.49 0.51,0.54,0.60,0.69,0.73 0.79,0.81,0.83,1.2), mean=0.616, stddev=0.0937]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000252779, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01962, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.17,0.25 0.31,0.35,0.43,0.62,0.75 0.80,0.84,0.87,1.5), mean=0.472, stddev=0.165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.62 0.64,0.67,0.75,1.1,1.3 1.4,1.5,1.5,1.7), mean=0.856, stddev=0.261], bias-{mean,stddev}=0.008162,0.02499, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000252779, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02953, w_fc-rms=0.04032, w_oc-rms=0.05547, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0062687, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.44,0.45,0.46 0.48,0.51,0.57,0.63,0.66 0.68,0.69,0.70,0.80), mean=0.572, stddev=0.0665], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.19,0.20,0.21,0.21,0.22 0.22,0.23,0.23,0.23), mean=0.206, stddev=0.0109] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0062687, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.46,0.48 0.50,0.53,0.59,0.63,0.66 0.68,0.72,0.73,0.87), mean=0.584, stddev=0.0625], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.17,0.18,0.18 0.19,0.20,0.21,0.22,0.22 0.22,0.23,0.23,0.24), mean=0.205, stddev=0.0137] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00735556, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.83,-0.76,-0.52 -0.33,-0.20,0.01,0.21,0.34 0.50,0.72,0.78,0.88), mean=0.00336, stddev=0.297], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.24,0.28,0.31 0.35,0.40,0.45,0.49,0.51 0.53,0.55,0.56,0.64), mean=0.441, stddev=0.0651] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0062687, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.53,0.54,0.56 0.57,0.60,0.65,0.68,0.70 0.72,0.74,0.76,0.93), mean=0.643, stddev=0.0513], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.15,0.16,0.17 0.17,0.18,0.19,0.20,0.20 0.21,0.21,0.21,0.21), mean=0.188, stddev=0.0132] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0178496, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.98,-0.87,-0.78,-0.48 -0.31,-0.17,-0.002,0.21,0.31 0.51,0.73,0.82,0.93), mean=0.00345, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.19,0.24,0.40 0.48,0.56,0.64,0.69,0.71 0.73,0.74,0.75,0.76), mean=0.618, stddev=0.109] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222397
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000252779, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06809, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.5,1.8,1.8 1.9,1.9,2.0,2.1), mean=1.53, stddev=0.251], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.67,0.72,0.84 0.89,0.96,1.1,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.09, stddev=0.158], bias-{mean,stddev}=0.001773,0.0863, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000252779, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04076, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.53,0.55 0.57,0.59,0.64,0.70,0.74 0.78,0.82,0.88,2.1), mean=0.65, stddev=0.0944], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.5 1.5,1.6,1.8,2.1,2.2 2.3,2.3,2.4,2.6), mean=1.85, stddev=0.265], bias-{mean,stddev}=4.193e-09,0.02733, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0168, stddev=0.0137], oderiv-count=597760
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/54.mdl exp/nnet3/tdnn_lstm1c_sp/55.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.80363 tdnn2.affine:8.94821 lstm1.W_all:7.7258 lstm1.lstm_nonlin:0.144743 lstm1.W_rp:3.17822 tdnn3.affine:5.44487 tdnn4.affine:6.32269 lstm2.W_all:4.98255 lstm2.lstm_nonlin:0.0716281 lstm2.W_rp:2.06944 tdnn5.affine:4.39133 tdnn6.affine:5.33204 lstm3.W_all:6.75618 lstm3.lstm_nonlin:0.151998 lstm3.W_rp:2.72275 output.affine:6.02059 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.312 tdnn2.affine:11.5247 lstm1.W_all:20.501 lstm1.lstm_nonlin:1.62433 lstm1.W_rp:11.9273 tdnn3.affine:8.33149 tdnn4.affine:8.55479 lstm2.W_all:15.9058 lstm2.lstm_nonlin:0.788926 lstm2.W_rp:10.7303 tdnn5.affine:7.69025 tdnn6.affine:8.29318 lstm3.W_all:22.8413 lstm3.lstm_nonlin:1.7026 lstm3.W_rp:25.0753 output.affine:30.1695 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.713537 tdnn2.affine:0.771048 lstm1.W_all:0.37608 lstm1.lstm_nonlin:0.0886786 lstm1.W_rp:0.266801 tdnn3.affine:0.649443 tdnn4.affine:0.735191 lstm2.W_all:0.312301 lstm2.lstm_nonlin:0.0900584 lstm2.W_rp:0.192038 tdnn5.affine:0.56383 tdnn6.affine:0.636886 lstm3.W_all:0.294884 lstm3.lstm_nonlin:0.0904063 lstm3.W_rp:0.108683 output.affine:0.199709 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:22:53 KST 2020, elapsed time 0 seconds
