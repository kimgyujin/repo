# nnet3-info exp/nnet3/tdnn_lstm1c_sp/248.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/247.mdl exp/nnet3/tdnn_lstm1c_sp/248.mdl 
# Started at Thu Jul 30 11:39:06 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/248.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000269801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0352, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.01,0.02 0.03,0.14,0.61,0.75,0.84 0.92,1.0,1.0,1.3), mean=0.536, stddev=0.29], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.19,0.23,0.65,0.95,1.3 1.6,1.7,1.8,1.9), mean=0.677, stddev=0.432], bias-{mean,stddev}=-0.0003348,0.0674, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.24e+05, self-repaired-proportion=0.193407, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,6e-06,2e-05,5e-05 0.0001,0.0007,0.07,0.10,0.12 0.13,0.16,0.17,0.24), mean=0.0638, stddev=0.0475], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.002,0.005,0.01 0.03,0.07,0.45,0.60,0.70 0.79,0.85,0.88,0.99), mean=0.396, stddev=0.25], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.05,0.17,0.26,0.36,0.40 0.48,0.56,0.65,1.3), mean=0.266, stddev=0.144], oderiv-count=1.21574e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36306, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-06,1e-05,3e-05 0.0001,0.001,0.07,0.10,0.12 0.14,0.16,0.18,0.26), mean=0.0626, stddev=0.0477], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.0001,0.0002,0.0003 0.001,0.005,0.11,0.13,0.15 0.16,0.17,0.17,0.19), mean=0.0895, stddev=0.0547]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000269801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01333, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.43 0.45,0.47,0.51,0.57,0.61 0.65,0.70,0.71,0.79), mean=0.522, stddev=0.0685], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.01 0.02,0.08,0.32,0.37,0.40 0.43,0.47,0.49,0.82), mean=0.269, stddev=0.141], bias-{mean,stddev}=-0.01667,0.04038, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.30 0.32,0.33,0.36,0.41,0.43 0.47,0.50,0.53,0.57), mean=0.371, stddev=0.0506], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.39,0.40 0.41,0.43,0.45,0.48,0.49 0.51,0.52,0.52,0.55), mean=0.452, stddev=0.0327], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.06), mean=0.0372, stddev=0.007], oderiv-count=1.20291e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35525.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.29,0.31 0.32,0.34,0.37,0.42,0.45 0.47,0.50,0.54,0.61), mean=0.378, stddev=0.0518], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.54,0.57 0.59,0.61,0.67,0.74,0.77 0.82,0.85,0.87,0.95), mean=0.677, stddev=0.0739]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000269801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01793, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,7e-06,2e-05,0.0001 0.002,0.15,0.40,0.61,0.71 0.77,0.84,0.89,1.1), mean=0.387, stddev=0.243], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.36,0.41 0.48,0.71,0.83,0.92,0.98 1.0,1.1,1.2,1.2), mean=0.798, stddev=0.178], bias-{mean,stddev}=-0.0003455,0.02683, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000269801, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0416, w_fc-rms=0.028, w_oc-rms=0.03945, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063464, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.64,0.79,0.80,0.84), mean=0.491, stddev=0.0708], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.022] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063464, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.41,0.42,0.43 0.45,0.46,0.49,0.51,0.55 0.62,0.73,0.77,0.81), mean=0.5, stddev=0.0624], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.19 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0197] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0395876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.91,-0.86,-0.53 -0.30,-0.15,0.001,0.18,0.32 0.50,0.83,0.88,0.91), mean=0.0134, stddev=0.299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.26 0.37,0.42,0.56,0.78,1.0 1.0,1.0,1.0,1.0), mean=0.595, stddev=0.223] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063464, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.40 0.41,0.42,0.45,0.50,0.50 0.50,0.53,0.56,0.62), mean=0.453, stddev=0.0381], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.219, stddev=0.0213] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0063464, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.79,-0.66,-0.35 -0.20,-0.10,0.002,0.13,0.22 0.34,0.64,0.76,0.83), mean=0.00958, stddev=0.231], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.30,0.35,0.53 0.72,0.80,0.87,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.848, stddev=0.139] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.54379e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.6971e-05, count-zeroing-boundaries=294621
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.147107
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000269801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03857, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.27,0.31 0.34,0.40,0.78,1.2,1.3 1.3,1.4,1.4,1.5), mean=0.792, stddev=0.383], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.002,0.003 0.01,0.27,0.52,0.71,0.83 1.1,1.5,1.7,1.9), mean=0.52, stddev=0.341], bias-{mean,stddev}=0.01312,0.2743, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000269801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01386, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.20,0.22,0.24 0.27,0.30,0.37,0.45,0.50 0.55,0.57,0.58,0.76), mean=0.376, stddev=0.0905], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.14,0.28,0.43,0.45 0.48,0.50,0.52,0.55), mean=0.284, stddev=0.139], bias-{mean,stddev}=0.00447,0.01759, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.95e+05, self-repaired-proportion=0.0039819, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.04,0.04,0.06 0.08,0.10,0.12,0.15,0.17 0.18,0.20,0.22,0.25), mean=0.123, stddev=0.0363], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.18,0.19,0.25 0.32,0.39,0.49,0.59,0.63 0.66,0.70,0.70,0.73), mean=0.483, stddev=0.122], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.07,0.07,0.08,0.10,0.11 0.12,0.14,0.16,0.26), mean=0.0894, stddev=0.0213], oderiv-count=1.08378e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33183.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.04,0.04,0.06 0.08,0.09,0.12,0.15,0.17 0.18,0.21,0.22,0.27), mean=0.123, stddev=0.037], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.13,0.14,0.15 0.16,0.17,0.20,0.22,0.24 0.26,0.27,0.28,0.33), mean=0.199, stddev=0.0334]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000269801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009904, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.32,0.33 0.34,0.35,0.38,0.42,0.45 0.47,0.51,0.52,0.63), mean=0.388, stddev=0.0468], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.14,0.14,0.16 0.17,0.18,0.22,0.26,0.28 0.31,0.33,0.35,0.45), mean=0.221, stddev=0.0465], bias-{mean,stddev}=-0.02017,0.01924, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.86e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.26,0.27 0.28,0.29,0.33,0.36,0.38 0.39,0.41,0.42,0.51), mean=0.328, stddev=0.0388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.38,0.39 0.40,0.41,0.44,0.46,0.48 0.49,0.49,0.50,0.52), mean=0.437, stddev=0.0292], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0303, stddev=0.0023], oderiv-count=1.02867e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30841.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.29,0.30,0.33,0.37,0.39 0.41,0.42,0.43,0.53), mean=0.337, stddev=0.0417], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.53,0.53,0.54 0.56,0.58,0.63,0.70,0.75 0.77,0.81,0.87,1.1), mean=0.644, stddev=0.0748]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000269801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01514, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,7e-07,1e-06,3e-06 1e-05,0.0002,0.33,0.55,0.63 0.67,0.73,0.76,1.2), mean=0.293, stddev=0.251], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.31,0.32,0.39 0.50,0.62,0.68,0.76,0.80 0.86,0.93,1.0,1.7), mean=0.676, stddev=0.14], bias-{mean,stddev}=-0.002126,0.05687, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000269801, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01813, w_fc-rms=0.01048, w_oc-rms=0.02375, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639953, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.43,0.45,0.50,0.51,0.57 0.62,0.68,0.70,0.81), mean=0.497, stddev=0.061], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0185] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639953, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.39,0.41 0.42,0.45,0.50,0.50,0.53 0.56,0.60,0.64,0.76), mean=0.487, stddev=0.0489], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0163] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0184584, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.81,-0.69,-0.47 -0.31,-0.16,0.0003,0.15,0.35 0.50,0.78,0.80,0.89), mean=0.00663, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.24,0.37 0.43,0.50,0.60,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.699, stddev=0.242] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639953, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.40 0.41,0.43,0.49,0.50,0.51 0.54,0.57,0.60,0.74), mean=0.475, stddev=0.0458], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0196] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00639953, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.55,-0.48,-0.30 -0.21,-0.10,0.0002,0.11,0.23 0.38,0.56,0.63,0.74), mean=0.00662, stddev=0.201], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.46,0.55,0.67 0.75,0.82,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.893, stddev=0.116] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.90341e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.6965e-06, count-zeroing-boundaries=259858
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.147107
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000269801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03701, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.44,0.49 0.52,0.54,0.78,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.806, stddev=0.251], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0007,0.0009 0.002,0.005,0.54,0.78,0.91 1.0,1.2,1.3,1.5), mean=0.461, stddev=0.378], bias-{mean,stddev}=-0.000905,0.2008, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000269801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01305, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.23,0.23,0.25 0.27,0.29,0.34,0.41,0.47 0.52,0.56,0.58,0.64), mean=0.356, stddev=0.0788], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.38,0.42 0.44,0.45,0.46,0.51), mean=0.281, stddev=0.0969], bias-{mean,stddev}=0.001826,0.00955, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.99e+05, self-repaired-proportion=0.000243148, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.03,0.03,0.04 0.05,0.07,0.09,0.12,0.13 0.14,0.16,0.17,0.20), mean=0.0924, stddev=0.0306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.17,0.19,0.24 0.27,0.34,0.47,0.56,0.59 0.62,0.65,0.67,0.70), mean=0.452, stddev=0.119], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.09,0.11,0.12 0.14,0.15,0.16,0.19), mean=0.0986, stddev=0.0196], oderiv-count=979136
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28499, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.03,0.04 0.05,0.07,0.10,0.12,0.14 0.15,0.16,0.17,0.22), mean=0.0961, stddev=0.0328], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.10,0.12 0.12,0.14,0.16,0.18,0.19 0.21,0.22,0.23,0.25), mean=0.16, stddev=0.0277]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000269801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009812, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.23,0.28 0.30,0.33,0.38,0.44,0.47 0.49,0.51,0.51,0.59), mean=0.382, stddev=0.0646], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.15 0.16,0.17,0.21,0.25,0.29 0.32,0.36,0.39,0.48), mean=0.217, stddev=0.053], bias-{mean,stddev}=-0.02116,0.02471, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.9e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.23,0.25 0.28,0.30,0.34,0.37,0.38 0.39,0.42,0.45,0.53), mean=0.334, stddev=0.0447], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.35,0.35,0.37 0.38,0.39,0.42,0.44,0.45 0.47,0.48,0.49,0.51), mean=0.417, stddev=0.0297], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0252, stddev=0.002], oderiv-count=903680
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26156.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.26 0.28,0.31,0.35,0.39,0.40 0.41,0.43,0.46,0.60), mean=0.347, stddev=0.0488], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.42,0.50 0.56,0.60,0.68,0.76,0.83 0.87,0.90,0.94,1.2), mean=0.686, stddev=0.11]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000269801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02135, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.28,0.30 0.32,0.36,0.49,0.70,0.78 0.82,0.87,0.89,1.5), mean=0.518, stddev=0.167], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.61,0.65,0.71 0.74,0.77,0.84,1.1,1.4 1.5,1.6,1.7,2.1), mean=0.941, stddev=0.251], bias-{mean,stddev}=0.02197,0.02419, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000269801, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06464, w_fc-rms=0.04758, w_oc-rms=0.04713, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646363, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.58,0.60 0.62,0.64,0.69,0.73,0.75 0.78,0.80,0.82,0.84), mean=0.687, stddev=0.0528], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.15 0.16,0.17,0.18,0.20,0.20 0.20,0.21,0.21,0.22), mean=0.182, stddev=0.0178] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646363, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.47,0.51,0.53 0.55,0.58,0.63,0.67,0.72 0.76,0.82,0.83,0.86), mean=0.631, stddev=0.069], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.15 0.16,0.18,0.19,0.20,0.21 0.21,0.21,0.21,0.22), mean=0.188, stddev=0.0196] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0206409, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.79,-0.72,-0.54 -0.38,-0.24,-0.02,0.24,0.36 0.53,0.75,0.77,0.90), mean=-0.00401, stddev=0.312], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.21,0.25 0.31,0.36,0.42,0.47,0.48 0.49,0.51,0.52,0.55), mean=0.409, stddev=0.0715] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646363, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.51,0.53,0.55 0.57,0.59,0.63,0.66,0.68 0.70,0.73,0.75,0.84), mean=0.627, stddev=0.0465], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.16,0.17,0.19,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.183, stddev=0.0157] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00646363, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.73,-0.68,-0.51 -0.32,-0.20,-0.01,0.21,0.29 0.46,0.67,0.70,0.85), mean=-0.00416, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.30,0.33,0.40 0.48,0.55,0.64,0.69,0.70 0.72,0.74,0.74,0.75), mean=0.615, stddev=0.0958] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=6.7629e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.52468e-06, count-zeroing-boundaries=221010
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.147107
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000269801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08067, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.1,1.1 1.1,1.2,1.6,2.3,2.4 2.4,2.5,2.6,2.7), mean=1.76, stddev=0.522], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.78,0.98,1.0 1.1,1.1,1.2,1.4,1.6 1.7,1.8,1.9,2.0), mean=1.28, stddev=0.214], bias-{mean,stddev}=-0.03917,0.4481, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000269801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04252, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.58,0.59 0.61,0.63,0.67,0.72,0.75 0.79,0.84,0.89,2.3), mean=0.68, stddev=0.0905], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.3,1.8,2.4,2.5 2.5,2.6,2.6,2.7), mean=1.88, stddev=0.507], bias-{mean,stddev}=5.793e-09,0.02844, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=555840
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/247.mdl exp/nnet3/tdnn_lstm1c_sp/248.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.764 tdnn2.affine:5.62033 lstm1.W_all:4.77529 lstm1.lstm_nonlin:0.108435 lstm1.W_rp:1.87323 tdnn3.affine:3.63823 tdnn4.affine:4.1929 lstm2.W_all:3.33836 lstm2.lstm_nonlin:0.0605616 lstm2.W_rp:1.38141 tdnn5.affine:2.94833 tdnn6.affine:3.48883 lstm3.W_all:4.21157 lstm3.lstm_nonlin:0.122465 lstm3.W_rp:1.75324 output.affine:4.02512 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.9868 tdnn2.affine:12.0471 lstm1.W_all:20.8789 lstm1.lstm_nonlin:1.4549 lstm1.W_rp:14.8559 tdnn3.affine:8.8336 tdnn4.affine:8.94271 lstm2.W_all:17.7901 lstm2.lstm_nonlin:0.721923 lstm2.W_rp:13.9873 tdnn5.affine:8.3121 tdnn6.affine:8.86815 lstm3.W_all:24.8647 lstm3.lstm_nonlin:2.12246 lstm3.W_rp:30.5353 output.affine:31.4727 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.415188 tdnn2.affine:0.469333 lstm1.W_all:0.23148 lstm1.lstm_nonlin:0.0758802 lstm1.W_rp:0.127915 tdnn3.affine:0.414245 tdnn4.affine:0.470148 lstm2.W_all:0.189348 lstm2.lstm_nonlin:0.0867826 lstm2.W_rp:0.100159 tdnn5.affine:0.356559 tdnn6.affine:0.39605 lstm3.W_all:0.171373 lstm3.lstm_nonlin:0.0588323 lstm3.W_rp:0.0577469 output.affine:0.129341 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:39:07 KST 2020, elapsed time 1 seconds
