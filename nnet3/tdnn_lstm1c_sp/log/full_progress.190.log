# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/189.mdl exp/nnet3/tdnn_lstm1c_sp/190.mdl 
# Started at Thu Jul 30 11:16:11 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/189.mdl exp/nnet3/tdnn_lstm1c_sp/190.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00016526, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01653, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.006,0.01 0.02,0.13,0.30,0.34,0.37 0.40,0.44,0.46,0.61), mean=0.258, stddev=0.124], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.11,0.12,0.34,0.46,0.55 0.70,0.77,0.80,0.97), mean=0.329, stddev=0.184], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.06,0.19,0.48,0.66 0.81,0.95,1.0,1.1), mean=0.278, stddev=0.254], bias-{mean,stddev}=-0.0006387,0.01953, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.82e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.26,-0.21,-0.16,-0.09 -0.05,-0.005,0.04,0.13,0.18 0.22,0.27,0.30,0.88), mean=0.0552, stddev=0.102], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-1.2,-0.99,-0.63 -0.33,-0.11,0.45,0.91,1.2 1.4,1.6,1.8,2.4), mean=0.41, stddev=0.628], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.21,0.56,0.77 0.89,1.1,1.4,1.9), mean=0.302, stddev=0.336], oderiv-count=110848
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=5699.23, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.24,-0.11,-0.10,-0.05 -0.02,-0.002,0.03,0.10,0.14 0.19,0.24,0.28,0.38), mean=0.0466, stddev=0.0773], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.007,0.10,0.12 0.14,0.16,0.17,0.20), mean=0.0458, stddev=0.0533]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00016526, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007205, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.25,0.26,0.28,0.30,0.32 0.33,0.34,0.35,0.37), mean=0.283, stddev=0.0268], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.003,0.005 0.009,0.07,0.17,0.20,0.21 0.22,0.23,0.24,0.31), mean=0.148, stddev=0.071], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.07,0.16,0.35,0.49 0.61,0.73,0.79,0.91), mean=0.221, stddev=0.18], bias-{mean,stddev}=0.0003075,0.01114, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.92e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-27,-17,-14,-12 -8.4,-4.5,0.72,7.5,10 13,16,17,21), mean=1.01, stddev=7.39], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-30,-17,-16,-12 -9.5,-6.5,-0.70,5.9,8.8 12,15,16,21), mean=-0.309, stddev=7.22]
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=5581.26, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.07,-0.01,0.02,0.05 0.13,0.19,0.30,0.42,0.47 0.53,0.62,0.64,0.78), mean=0.301, stddev=0.141], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.21,0.51,0.70,0.79 0.86,0.94,0.99,1.2), mean=0.469, stddev=0.273]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00016526, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004401, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,2e-05,5e-05,0.0003 0.003,0.04,0.09,0.14,0.18 0.21,0.23,0.25,0.30), mean=0.0938, stddev=0.0616], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.07,0.09,0.21,0.23,0.24 0.25,0.27,0.28,0.34), mean=0.19, stddev=0.0641], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-07,1e-07,1e-07 2e-07,0.04,0.10,0.22,0.33 0.44,0.58,0.64,0.76), mean=0.144, stddev=0.14], bias-{mean,stddev}=2.396e-05,0.001497, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00016526, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001321, w_fc-rms=0.001501, w_oc-rms=0.003657, count=6.76e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000810209, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-1.0,-0.77,-0.35 -0.11,0.11,0.50,0.89,1.2 1.3,1.6,1.7,2.3), mean=0.499, stddev=0.527], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.33,-0.29,-0.15 -0.06,0.08,0.25,0.35,0.45 0.61,0.74,0.86,0.93), mean=0.222, stddev=0.219] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000810209, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.97,-0.61,-0.36 -0.11,0.14,0.50,0.83,1.1 1.3,1.5,1.7,1.9), mean=0.486, stddev=0.482], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.42,-0.23,-0.18,-0.09 0.02,0.11,0.25,0.32,0.40 0.53,0.70,0.73,1.2), mean=0.229, stddev=0.182] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000810209, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-10,-8.9,-7.9,-6.0 -4.7,-3.0,-0.01,2.6,4.0 5.2,6.2,7.5,10), mean=-0.23, stddev=3.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.0,-5.2,-4.2,-3.3 -2.4,-1.2,0.92,2.4,3.4 4.8,5.9,6.4,9.6), mean=0.682, stddev=2.36] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000810209, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.1,-1.4,-0.87,-0.38 -0.11,0.17,0.50,1.0,1.3 1.6,1.9,2.4,2.7), mean=0.569, stddev=0.62], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.67,-0.44,-0.39,-0.25 -0.13,0.03,0.25,0.40,0.55 0.71,0.88,0.97,1.1), mean=0.226, stddev=0.276] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0356004, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.8,-6.3,-5.3,-4.3 -3.5,-2.4,-0.01,1.7,2.7 3.7,5.0,5.8,7.3), mean=-0.193, stddev=2.5], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-2.1,-1.7,-1.3 -0.78,-0.12,0.82,1.6,2.2 2.8,3.1,3.6,6.7), mean=0.762, stddev=1.17] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=9.73e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=1455
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0589532
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00016526, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00568, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.11,0.17,0.19 0.19,0.20,0.20,0.21), mean=0.117, stddev=0.0565], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.002,0.003 0.01,0.06,0.09,0.11,0.13 0.14,0.15,0.16,0.18), mean=0.0832, stddev=0.0382], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 7e-08,1e-07,5e-07,0.01,0.27 0.35,0.41,0.45,0.50), mean=0.052, stddev=0.119], bias-{mean,stddev}=-3.626e-05,0.00698, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00016526, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006548, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.15,0.18,0.21,0.22 0.23,0.25,0.26,0.28), mean=0.18, stddev=0.0307], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.11,0.21,0.22 0.23,0.24,0.25,0.26), mean=0.131, stddev=0.0718], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,7e-08 9e-08,2e-07,2e-05,0.16,0.35 0.48,0.58,0.64,0.77), mean=0.0821, stddev=0.163], bias-{mean,stddev}=0.0002152,0.008732, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=5227.37, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,-0.09,-0.08,-0.04 -0.009,0.02,0.10,0.18,0.23 0.26,0.30,0.34,0.44), mean=0.104, stddev=0.0925], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.13,0.19,0.21 0.23,0.26,0.26,0.29), mean=0.115, stddev=0.0792]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00016526, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005264, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.18,0.18 0.19,0.19,0.21,0.22,0.23 0.23,0.24,0.25,0.27), mean=0.207, stddev=0.0165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.10,0.10,0.12,0.13,0.14 0.15,0.16,0.16,0.19), mean=0.119, stddev=0.0181], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.08,0.13,0.25,0.34 0.42,0.50,0.54,0.60), mean=0.172, stddev=0.116], bias-{mean,stddev}=0.0005817,0.006155, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=4873.47, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.02,0.02,0.04,0.09 0.12,0.18,0.26,0.34,0.38 0.44,0.50,0.53,0.68), mean=0.261, stddev=0.105], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.27,0.47,0.61,0.67 0.73,0.79,0.85,1.0), mean=0.437, stddev=0.217]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00016526, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00304, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,1e-07,2e-07,6e-07 2e-06,4e-05,0.05,0.10,0.14 0.16,0.17,0.18,0.24), mean=0.0566, stddev=0.0529], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.10,0.15,0.16,0.17 0.18,0.18,0.19,0.24), mean=0.132, stddev=0.0422], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,8e-08,9e-08,1e-07 4e-06,0.02,0.07,0.15,0.22 0.31,0.42,0.47,0.54), mean=0.0968, stddev=0.0993], bias-{mean,stddev}=-6.172e-05,0.003944, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00016526, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0007841, w_fc-rms=0.0007621, w_oc-rms=0.001447, count=5.6e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000901384, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-0.99,-0.87,-0.61 -0.35,0.07,0.50,0.86,1.2 1.4,1.8,2.0,3.4), mean=0.486, stddev=0.604], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.44,-0.24,-0.20,-0.07 0.03,0.14,0.25,0.30,0.42 0.51,0.65,0.74,0.86), mean=0.233, stddev=0.169] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000901384, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.0,-0.78,-0.41 -0.09,0.21,0.50,0.78,1.2 1.6,2.0,2.2,3.2), mean=0.525, stddev=0.58], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.23,-0.15,-0.09,0.06 0.12,0.19,0.25,0.30,0.38 0.46,0.59,0.69,1.0), mean=0.252, stddev=0.131] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.225105, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-15,-10,-9.1,-6.9 -4.5,-2.3,0.005,2.6,4.5 6.4,8.7,10,16), mean=0.0745, stddev=3.89], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.0,-4.8,-4.1,-2.3 -1.3,-0.14,1.0,2.1,3.2 4.3,5.2,5.6,6.7), mean=0.939, stddev=1.94] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000901384, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-1.5,-1.3,-0.86 -0.42,0.12,0.50,0.92,1.3 1.7,2.2,2.8,3.8), mean=0.508, stddev=0.757], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.48,-0.30,-0.20,-0.10 -0.003,0.13,0.25,0.33,0.46 0.57,0.71,0.78,1.4), mean=0.24, stddev=0.197] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000901384, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-6.7,-6.0,-4.6 -3.4,-1.5,0.002,1.8,3.3 4.7,6.3,8.0,9.8), mean=0.0848, stddev=2.71], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-2.3,-1.7,-0.73 -0.31,0.44,1.0,1.6,2.2 2.6,3.5,4.0,4.9), mean=0.991, stddev=1.05] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=8.19e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=-0.000805153, count-zeroing-boundaries=1242
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0589532
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00016526, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00393, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.05,0.06,0.08,0.11,0.12 0.13,0.13,0.13,0.14), mean=0.0851, stddev=0.028], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0001,0.0001,0.0002 0.0003,0.0008,0.07,0.09,0.09 0.10,0.10,0.11,0.15), mean=0.0503, stddev=0.0386], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,4e-08,5e-08 7e-08,1e-07,3e-06,0.10,0.19 0.23,0.26,0.28,0.31), mean=0.0414, stddev=0.0795], bias-{mean,stddev}=9.633e-05,0.006683, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00016526, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005193, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.10 0.11,0.12,0.14,0.16,0.18 0.19,0.20,0.21,0.24), mean=0.143, stddev=0.0266], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.07,0.07,0.11,0.15,0.16 0.17,0.18,0.18,0.20), mean=0.112, stddev=0.0396], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,7e-08 1e-07,2e-07,0.001,0.15,0.27 0.37,0.46,0.49,0.57), mean=0.0725, stddev=0.126], bias-{mean,stddev}=7.503e-05,0.00502, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=4519.58, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.09,-0.06,-0.05,-0.03 -0.005,0.02,0.06,0.11,0.14 0.17,0.19,0.20,0.26), mean=0.068, stddev=0.0582], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.09,0.13,0.15 0.17,0.18,0.18,0.21), mean=0.0827, stddev=0.0567]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00016526, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004255, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.15,0.17,0.18,0.19 0.20,0.20,0.20,0.23), mean=0.167, stddev=0.0174], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.08,0.09,0.11,0.12 0.12,0.13,0.14,0.16), mean=0.0958, stddev=0.0155], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.06,0.10,0.20,0.28 0.36,0.42,0.45,0.54), mean=0.136, stddev=0.0993], bias-{mean,stddev}=0.0002724,0.005156, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.38e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,0.05,0.06,0.10 0.13,0.20,0.27,0.34,0.38 0.43,0.47,0.49,0.58), mean=0.266, stddev=0.0955], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.12,0.07,0.11,0.20 0.26,0.31,0.42,0.54,0.60 0.67,0.73,0.74,1.0), mean=0.426, stddev=0.144]
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=4165.69, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,-0.02,0.03,0.07 0.10,0.16,0.24,0.35,0.41 0.45,0.50,0.56,0.70), mean=0.253, stddev=0.118], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.23,0.45,0.64,0.72 0.80,0.90,0.97,1.2), mean=0.435, stddev=0.242]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00016526, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003964, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.05,0.07,0.14,0.18 0.20,0.21,0.22,0.31), mean=0.0868, stddev=0.0518], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.11 0.11,0.12,0.15,0.23,0.27 0.29,0.30,0.30,0.34), mean=0.171, stddev=0.0587], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,3e-06,7e-06,0.0002 0.02,0.03,0.07,0.18,0.32 0.45,0.55,0.61,0.69), mean=0.119, stddev=0.136], bias-{mean,stddev}=-0.0001024,0.001466, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00016526, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001349, w_fc-rms=0.00232, w_oc-rms=0.002869, count=4.44e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00104029, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.6,-3.4,-2.5,-2.0 -1.5,-0.87,0.08,1.0,1.5 2.1,2.6,3.0,3.8), mean=0.083, stddev=1.22], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.56,-0.43,-0.28 -0.18,-0.05,0.26,0.52,0.66 0.77,0.95,1.0,1.3), mean=0.25, stddev=0.332] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00104029, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.4,-3.5,-3.1,-2.4 -2.0,-1.4,-0.16,0.95,1.7 2.3,2.9,3.3,4.5), mean=-0.166, stddev=1.43], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.67,-0.41,-0.32,-0.18 -0.03,0.08,0.35,0.61,0.80 0.96,1.1,1.3,1.5), mean=0.357, stddev=0.34] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.126958, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-27,-21,-17,-14 -10.0,-6.4,-0.67,6.0,9.6 13,16,17,23), mean=-0.375, stddev=8.02], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.6,-7.0,-6.0,-4.7 -3.6,-2.0,1.2,3.6,4.8 6.1,7.0,7.5,12), mean=0.885, stddev=3.23] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00104029, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.1,-3.6,-3.1,-2.1 -1.6,-1.1,0.15,1.4,2.0 2.6,3.4,4.0,5.4), mean=0.181, stddev=1.51], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.69,-0.53,-0.44 -0.27,-0.08,0.26,0.60,0.83 0.99,1.1,1.2,1.7), mean=0.264, stddev=0.422] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.124803, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-23,-18,-14,-11 -8.3,-5.2,-0.45,4.5,7.1 10,13,14,18), mean=-0.384, stddev=6.36], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.7,-4.4,-3.8,-2.7 -1.8,-0.73,1.3,3.2,4.3 5.1,6.0,6.7,13), mean=1.23, stddev=2.41] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=6.66e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=997
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0589532
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00016526, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004907, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.06,0.09,0.15,0.15 0.16,0.16,0.16,0.18), mean=0.104, stddev=0.0409], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.06,0.08,0.09,0.10 0.11,0.11,0.11,0.13), mean=0.0773, stddev=0.0167], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,6e-07,8e-07,1e-06 3e-06,2e-05,0.02,0.14,0.21 0.26,0.30,0.32,0.38), mean=0.067, stddev=0.0897], bias-{mean,stddev}=0.0004098,0.01255, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00016526, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005531, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.04 0.05,0.06,0.08,0.11,0.12 0.14,0.16,0.18,0.33), mean=0.0834, stddev=0.0316], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.16 0.17,0.18,0.23,0.31,0.32 0.33,0.34,0.36,0.36), mean=0.245, stddev=0.0654], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,6e-07,8e-07,1e-06 3e-06,1e-05,0.009,0.36,0.50 0.58,0.65,0.67,0.72), mean=0.142, stddev=0.21], bias-{mean,stddev}=-9.827e-11,0.00137, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.11,0.14 0.17,0.19,0.21,0.86), mean=0.0511, stddev=0.0642], oderiv-count=2560

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.54348 tdnn2.affine:6.49415 lstm1.W_all:5.11817 lstm1.lstm_nonlin:0.0950472 lstm1.W_rp:2.09167 tdnn3.affine:4.17524 tdnn4.affine:4.74338 lstm2.W_all:3.53882 lstm2.lstm_nonlin:0.0413618 lstm2.W_rp:1.44898 tdnn5.affine:3.3091 tdnn6.affine:3.83427 lstm3.W_all:4.6101 lstm3.lstm_nonlin:0.0895909 lstm3.W_rp:1.81567 output.affine:4.09122 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.3905 tdnn2.affine:10.3136 lstm1.W_all:18.4133 lstm1.lstm_nonlin:1.17479 lstm1.W_rp:12.2441 tdnn3.affine:7.51512 tdnn4.affine:7.69586 lstm2.W_all:15.379 lstm2.lstm_nonlin:0.472757 lstm2.W_rp:11.0256 tdnn5.affine:6.7196 tdnn6.affine:7.18994 lstm3.W_all:21.9389 lstm3.lstm_nonlin:1.85389 lstm3.W_rp:27.7575 output.affine:28.3637 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.575347 tdnn2.affine:0.630707 lstm1.W_all:0.277848 lstm1.lstm_nonlin:0.0815686 lstm1.W_rp:0.171316 tdnn3.affine:0.560069 tdnn4.affine:0.617781 lstm2.W_all:0.23015 lstm2.lstm_nonlin:0.0881099 lstm2.W_rp:0.131858 tdnn5.affine:0.496921 tdnn6.affine:0.53542 lstm3.W_all:0.210302 lstm3.lstm_nonlin:0.0482654 lstm3.W_rp:0.0655445 output.affine:0.144231 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:16:12 KST 2020, elapsed time 1 seconds
