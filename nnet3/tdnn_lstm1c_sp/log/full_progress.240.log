# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/239.mdl exp/nnet3/tdnn_lstm1c_sp/240.mdl 
# Started at Thu Jul 30 11:35:55 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/239.mdl exp/nnet3/tdnn_lstm1c_sp/240.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000141025, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01488, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.004,0.005,0.008 0.01,0.07,0.26,0.31,0.34 0.38,0.41,0.42,0.51), mean=0.23, stddev=0.116], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.11,0.31,0.41,0.49 0.64,0.71,0.75,0.83), mean=0.295, stddev=0.168], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.05,0.17,0.42,0.59 0.73,0.88,0.97,1.1), mean=0.246, stddev=0.234], bias-{mean,stddev}=9.322e-05,0.02053, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=5.89e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.9,-3.2,-2.7,-2.1 -1.8,-1.1,-0.01,0.57,1.3 1.8,2.5,2.9,6.2), mean=-0.136, stddev=1.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-29,-19,-17,-13 -11,-6.5,0.79,7.2,11 15,18,22,33), mean=0.662, stddev=8.58]
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-5475.83, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000141025, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006352, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.23,0.25,0.27,0.28 0.29,0.30,0.31,0.34), mean=0.25, stddev=0.0251], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.002,0.002,0.004 0.009,0.04,0.15,0.18,0.19 0.20,0.22,0.22,0.28), mean=0.13, stddev=0.0649], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.05,0.06,0.14,0.30,0.43 0.54,0.64,0.70,0.95), mean=0.191, stddev=0.162], bias-{mean,stddev}=0.0002004,0.01081, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.08,0.10 0.12,0.14,0.16,0.19), mean=0.0368, stddev=0.0445], oderiv-count=32448
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-5410.29, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000141025, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003859, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,8e-07,3e-06,2e-05 0.0004,0.03,0.08,0.13,0.16 0.18,0.21,0.22,0.41), mean=0.0799, stddev=0.0574], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.07,0.19,0.20,0.22 0.23,0.24,0.25,0.30), mean=0.165, stddev=0.0603], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,8e-08,9e-08,1e-07 2e-07,0.03,0.09,0.19,0.28 0.39,0.51,0.57,0.83), mean=0.123, stddev=0.126], bias-{mean,stddev}=3.129e-05,0.001692, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000141025, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001373, w_fc-rms=0.001493, w_oc-rms=0.003243, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=3.45136e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.6,-1.2,-0.94,-0.60 -0.29,0.05,0.50,0.80,1.1 1.5,2.0,2.2,3.6), mean=0.449, stddev=0.646], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.54,-0.43,-0.29 -0.16,0.02,0.25,0.35,0.50 0.66,0.79,0.94,1.1), mean=0.204, stddev=0.279] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=3.45136e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.9,-0.69,-0.55,-0.22 0.004,0.24,0.50,0.80,0.99 1.2,1.5,2.1,3.1), mean=0.516, stddev=0.474], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.47,-0.36,-0.13 0.01,0.14,0.25,0.32,0.42 0.53,0.65,0.73,1.1), mean=0.227, stddev=0.203] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00388088, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-14,-10,-8.0,-6.7 -4.6,-2.7,-0.005,3.3,5.6 7.2,9.0,9.7,17), mean=0.232, stddev=4.1], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-15,-7.8,-6.4,-5.0 -3.9,-2.6,0.65,2.0,3.9 5.1,6.6,7.7,9.3), mean=0.0775, stddev=3.13] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=3.45136e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.6,-1.5,-1.2,-0.77 -0.49,-0.06,0.47,0.73,1.1 1.5,1.9,2.2,2.9), mean=0.362, stddev=0.663], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.67,-0.55,-0.33 -0.20,0.007,0.25,0.41,0.55 0.68,0.90,1.0,1.6), mean=0.214, stddev=0.314] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=3.45136e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.2,-6.8,-5.4,-4.3 -3.2,-1.8,-0.004,2.2,3.5 4.9,6.4,6.7,14), mean=0.182, stddev=2.76], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.3,-2.7,-2.1,-1.5 -0.93,-0.22,0.99,1.5,2.0 2.7,3.1,3.5,6.6), mean=0.7, stddev=1.24] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-8.38e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1254
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.127824
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000141025, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005082, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.05,0.10,0.16,0.16 0.17,0.18,0.19,0.20), mean=0.105, stddev=0.0484], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.0002,0.0004,0.0006 0.003,0.05,0.08,0.10,0.11 0.12,0.13,0.14,0.21), mean=0.0732, stddev=0.0369], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,5e-08 7e-08,1e-07,4e-07,0.02,0.23 0.30,0.37,0.40,0.46), mean=0.0477, stddev=0.106], bias-{mean,stddev}=-6.182e-05,0.00525, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000141025, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005806, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.11,0.11,0.12 0.13,0.14,0.16,0.18,0.19 0.21,0.22,0.22,0.24), mean=0.16, stddev=0.0269], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.11,0.18,0.19 0.20,0.21,0.21,0.24), mean=0.119, stddev=0.0588], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,4e-08,5e-08 7e-08,1e-07,1e-05,0.16,0.31 0.42,0.50,0.55,0.62), mean=0.0761, stddev=0.143], bias-{mean,stddev}=0.0005484,0.006139, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-5213.69, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000141025, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004527, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.16,0.17,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.178, stddev=0.0143], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.07,0.07,0.08 0.08,0.09,0.10,0.12,0.12 0.13,0.13,0.14,0.16), mean=0.102, stddev=0.0163], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.07,0.12,0.22,0.30 0.37,0.43,0.46,0.55), mean=0.148, stddev=0.0999], bias-{mean,stddev}=0.001021,0.00517, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-5017.08, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000141025, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002604, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,9e-08,1e-07,3e-07 2e-06,3e-05,0.05,0.09,0.11 0.13,0.15,0.15,0.22), mean=0.0484, stddev=0.0454], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.09,0.13,0.14,0.14 0.15,0.16,0.17,0.18), mean=0.113, stddev=0.0377], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,8e-08,1e-07 4e-06,0.02,0.05,0.13,0.19 0.27,0.36,0.40,0.51), mean=0.0821, stddev=0.0858], bias-{mean,stddev}=-3.674e-05,0.00355, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000141025, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0008359, w_fc-rms=0.0008796, w_oc-rms=0.00146, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=3.43037e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-1.2,-0.68,-0.37 -0.07,0.32,0.50,0.89,1.2 1.5,1.8,2.0,2.3), mean=0.55, stddev=0.537], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.61,-0.25,-0.21,-0.09 0.008,0.10,0.25,0.29,0.38 0.49,0.57,0.60,0.98), mean=0.218, stddev=0.165] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=3.43037e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.71,-0.55,-0.21 0.06,0.42,0.50,0.93,1.2 1.5,1.9,2.1,2.4), mean=0.608, stddev=0.498], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.49,-0.18,-0.08,0.007 0.11,0.19,0.25,0.29,0.37 0.44,0.50,0.57,0.70), mean=0.241, stddev=0.126] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0763575, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-12,-8.4,-7.7,-5.6 -3.9,-1.5,0.002,2.0,3.8 5.9,7.5,8.3,13), mean=0.139, stddev=3.17], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.3,-5.5,-4.8,-3.8 -2.4,-0.91,1.0,1.3,2.8 3.5,4.4,5.2,7.2), mean=0.467, stddev=2.06] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=3.43037e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.1,-0.87,-0.50 -0.12,0.37,0.50,0.96,1.4 1.6,2.0,2.3,4.5), mean=0.584, stddev=0.633], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.43,-0.36,-0.30,-0.18 0.004,0.11,0.25,0.31,0.42 0.52,0.63,0.70,0.94), mean=0.22, stddev=0.189] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=3.43037e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.3,-5.5,-4.5,-3.6 -2.1,-0.90,-0.001,1.3,2.6 3.7,5.1,5.6,7.2), mean=0.121, stddev=1.99], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-1.8,-1.5,-0.89 -0.38,0.22,1.0,1.2,1.6 2.1,2.5,2.8,4.1), mean=0.777, stddev=0.861] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-7.62e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1152
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.127824
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000141025, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003436, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.07,0.10,0.10 0.11,0.11,0.12,0.12), mean=0.0746, stddev=0.0238], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,7e-05,9e-05,0.0001 0.0002,0.0007,0.06,0.07,0.08 0.09,0.09,0.09,0.13), mean=0.0439, stddev=0.0338], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,4e-08,5e-08 7e-08,1e-07,1e-06,0.09,0.16 0.19,0.22,0.25,0.28), mean=0.037, stddev=0.069], bias-{mean,stddev}=0.0001097,0.003686, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000141025, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004561, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.10,0.11,0.12,0.14,0.15 0.16,0.18,0.18,0.20), mean=0.126, stddev=0.0213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.07,0.10,0.13,0.14 0.15,0.15,0.16,0.16), mean=0.099, stddev=0.032], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 8e-08,1e-07,0.0008,0.14,0.23 0.32,0.40,0.42,0.54), mean=0.0657, stddev=0.109], bias-{mean,stddev}=-6.074e-05,0.003743, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-4820.47, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000141025, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003665, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.14,0.16,0.16 0.17,0.17,0.18,0.18), mean=0.144, stddev=0.0151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.07,0.08,0.09,0.10 0.11,0.11,0.11,0.13), mean=0.0827, stddev=0.012], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.05,0.09,0.17,0.24 0.30,0.36,0.38,0.54), mean=0.117, stddev=0.0851], bias-{mean,stddev}=3.845e-05,0.004733, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-4623.86, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000141025, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003123, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.03,0.05,0.12,0.15 0.16,0.17,0.18,0.24), mean=0.0658, stddev=0.0448], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.12,0.18,0.21 0.22,0.23,0.24,0.26), mean=0.136, stddev=0.0438], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,6e-07,1e-06,4e-05 0.02,0.02,0.05,0.14,0.25 0.35,0.44,0.48,0.62), mean=0.0927, stddev=0.108], bias-{mean,stddev}=2.72e-05,0.001196, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000141025, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001124, w_fc-rms=0.001733, w_oc-rms=0.002904, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=3.3212e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-1.2,-0.88,-0.37 -0.12,0.22,0.79,1.3,1.5 1.8,2.0,2.3,3.0), mean=0.753, stddev=0.673], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.74,-0.65,-0.47 -0.32,-0.19,0.03,0.22,0.35 0.44,0.53,0.60,0.81), mean=0.0101, stddev=0.274] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=3.3212e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.3,-0.82,-0.46 -0.12,0.32,0.99,1.6,2.0 2.3,2.6,2.8,3.7), mean=0.966, stddev=0.833], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.61,-0.53,-0.37 -0.27,-0.13,0.09,0.28,0.39 0.50,0.61,0.69,0.92), mean=0.0744, stddev=0.263] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.651754, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-29,-14,-12,-9.0 -7.3,-4.8,-0.14,4.7,7.5 10.0,12,14,28), mean=0.0394, stddev=5.99], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-9.3,-7.2,-5.3 -3.7,-2.4,0.05,2.4,3.8 4.8,5.6,6.6,7.6), mean=-0.048, stddev=3.06] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=3.3212e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-1.3,-1.2,-0.88 -0.45,-0.09,0.69,1.4,1.7 2.0,2.8,3.0,4.0), mean=0.667, stddev=0.895], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.81,-0.75,-0.52 -0.40,-0.24,0.01,0.28,0.41 0.55,0.68,0.77,0.98), mean=0.0113, stddev=0.333] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0186025, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-26,-11,-9.7,-7.3 -6.0,-3.9,0.06,3.7,5.8 7.8,10,11,27), mean=-0.0272, stddev=4.89], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.9,-3.6,-3.4,-2.5 -1.8,-0.94,0.49,1.9,2.5 3.4,4.2,4.5,6.1), mean=0.462, stddev=1.75] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-6.85e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1025
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.127824
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000141025, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003746, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.04,0.05,0.06,0.11,0.12 0.12,0.13,0.13,0.13), mean=0.0792, stddev=0.0321], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.05,0.06,0.07,0.07 0.08,0.08,0.08,0.15), mean=0.0591, stddev=0.0126], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,4e-07 7e-07,4e-06,0.01,0.10,0.16 0.20,0.23,0.26,0.30), mean=0.05, stddev=0.0693], bias-{mean,stddev}=0.0009764,0.01393, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000141025, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004587, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.05,0.07,0.09,0.10 0.12,0.14,0.15,0.22), mean=0.0693, stddev=0.0259], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.13,0.14,0.18,0.26,0.27 0.28,0.29,0.30,0.31), mean=0.202, stddev=0.0597], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,4e-07,4e-07,4e-07 7e-07,3e-06,0.005,0.30,0.41 0.49,0.53,0.56,0.63), mean=0.116, stddev=0.176], bias-{mean,stddev}=1.903e-11,0.001141, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,5e-05,0.12,0.15 0.18,0.22,0.24,0.90), mean=0.056, stddev=0.0722], oderiv-count=1920

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.89692 tdnn2.affine:5.72635 lstm1.W_all:4.48823 lstm1.lstm_nonlin:0.0872233 lstm1.W_rp:1.87051 tdnn3.affine:3.70011 tdnn4.affine:4.07927 lstm2.W_all:3.03192 lstm2.lstm_nonlin:0.0432894 lstm2.W_rp:1.2649 tdnn5.affine:2.90588 tdnn6.affine:3.30277 lstm3.W_all:3.63162 lstm3.lstm_nonlin:0.0812706 lstm3.W_rp:1.39551 output.affine:3.39293 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.0789 tdnn2.affine:9.85401 lstm1.W_all:17.7605 lstm1.lstm_nonlin:1.17872 lstm1.W_rp:12.295 tdnn3.affine:7.19382 tdnn4.affine:7.22077 lstm2.W_all:15.1472 lstm2.lstm_nonlin:0.553754 lstm2.W_rp:11.5449 tdnn5.affine:6.47958 tdnn6.affine:6.85128 lstm3.W_all:21.2845 lstm3.lstm_nonlin:1.74956 lstm3.W_rp:29.0656 output.affine:27.8022 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.538466 tdnn2.affine:0.592358 lstm1.W_all:0.253811 lstm1.lstm_nonlin:0.0747877 lstm1.W_rp:0.152531 tdnn3.affine:0.52202 tdnn4.affine:0.569758 lstm2.W_all:0.200884 lstm2.lstm_nonlin:0.0789855 lstm2.W_rp:0.110454 tdnn5.affine:0.456317 tdnn6.affine:0.491217 lstm3.W_all:0.170857 lstm3.lstm_nonlin:0.0465799 lstm3.W_rp:0.0481178 output.affine:0.121963 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:35:55 KST 2020, elapsed time 0 seconds
