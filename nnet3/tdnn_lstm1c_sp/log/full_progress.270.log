# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/269.mdl exp/nnet3/tdnn_lstm1c_sp/270.mdl 
# Started at Thu Jul 30 11:47:52 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/269.mdl exp/nnet3/tdnn_lstm1c_sp/270.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000236153, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01291, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.009 0.01,0.03,0.23,0.27,0.30 0.33,0.37,0.40,0.46), mean=0.195, stddev=0.109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.10,0.28,0.36,0.42 0.53,0.60,0.62,0.72), mean=0.259, stddev=0.141], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.15,0.37,0.53 0.62,0.73,0.79,0.86), mean=0.218, stddev=0.198], bias-{mean,stddev}=0.001245,0.01688, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.18e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.17,-0.09,-0.07,-0.04 -0.01,-0.0005,0.04,0.14,0.19 0.23,0.25,0.27,0.43), mean=0.0657, stddev=0.087], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.63,-0.55,-0.38 -0.20,-0.0002,0.45,0.80,0.99 1.2,1.3,1.4,2.1), mean=0.413, stddev=0.47], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.14,0.42,0.59 0.76,1.0,1.1,1.8), mean=0.232, stddev=0.28], oderiv-count=62400
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3488.72, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.31,-0.18,-0.13,-0.06 -0.02,-0.0001,0.06,0.19,0.23 0.28,0.33,0.38,0.55), mean=0.0837, stddev=0.114], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.07,0.15,0.18 0.20,0.22,0.24,0.31), mean=0.0762, stddev=0.0753]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000236153, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005569, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.23,0.24 0.25,0.26,0.27,0.30), mean=0.219, stddev=0.019], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.005 0.006,0.02,0.14,0.16,0.17 0.18,0.19,0.20,0.22), mean=0.111, stddev=0.0612], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.06,0.13,0.27,0.38 0.46,0.55,0.59,0.66), mean=0.172, stddev=0.137], bias-{mean,stddev}=0.0008838,0.008855, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3403.53, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.31,-0.10,-0.04,0.08 0.14,0.21,0.34,0.49,0.57 0.64,0.74,0.77,0.82), mean=0.348, stddev=0.175], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.02,0.55,0.79,0.91 1.0,1.1,1.2,1.3), mean=0.501, stddev=0.33]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000236153, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003492, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,4e-07,8e-07,5e-06 0.0002,0.02,0.07,0.12,0.14 0.16,0.18,0.19,0.22), mean=0.0737, stddev=0.0499], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.08,0.17,0.18,0.19 0.20,0.22,0.22,0.25), mean=0.151, stddev=0.0513], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,9e-08,1e-07,1e-07 2e-07,0.04,0.08,0.18,0.26 0.35,0.45,0.50,0.56), mean=0.116, stddev=0.109], bias-{mean,stddev}=-2.347e-05,0.001253, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000236153, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001691, w_fc-rms=0.001717, w_oc-rms=0.003156, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-7.33488e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.67,-0.45,-0.23,-0.02 0.10,0.29,0.50,0.71,0.88 1.1,1.2,1.4,2.5), mean=0.497, stddev=0.333], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.33,-0.18,-0.10,-0.01 0.05,0.13,0.25,0.31,0.37 0.44,0.52,0.57,0.68), mean=0.229, stddev=0.137] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-7.33488e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.30,-0.09,0.004,0.21 0.33,0.43,0.52,0.73,0.89 0.99,1.2,1.4,1.7), mean=0.571, stddev=0.252], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.25,-0.12,-0.006,0.05 0.11,0.17,0.25,0.29,0.33 0.38,0.42,0.48,0.74), mean=0.231, stddev=0.102] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.045353, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.0,-3.2,-2.9,-2.2 -1.6,-0.97,0.008,1.2,2.0 2.7,3.1,3.3,4.6), mean=0.113, stddev=1.4], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-1.8,-1.5,-1.1 -0.68,-0.16,0.92,1.4,1.9 2.4,2.9,3.3,4.6), mean=0.722, stddev=1.04] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-7.33488e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.44,-0.27,-0.12 0.02,0.24,0.50,0.73,0.89 1.0,1.2,1.2,2.3), mean=0.483, stddev=0.343], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.30,-0.11,-0.09,-0.006 0.04,0.14,0.25,0.32,0.40 0.48,0.56,0.58,0.71), mean=0.237, stddev=0.143] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-7.33488e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-1.7,-1.6,-1.3 -0.99,-0.53,-0.002,0.62,0.96 1.4,1.8,2.0,2.4), mean=0.0201, stddev=0.763], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.53,-0.09,0.12,0.39 0.56,0.74,1.0,1.3,1.5 1.6,1.8,1.9,2.5), mean=1, stddev=0.375] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.42e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2137
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.204959
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000236153, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004405, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.05,0.09,0.13,0.14 0.15,0.16,0.16,0.17), mean=0.0927, stddev=0.0387], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0002,0.0002,0.0005 0.002,0.04,0.07,0.09,0.10 0.10,0.11,0.11,0.13), mean=0.0637, stddev=0.0314], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.03,0.20 0.26,0.30,0.34,0.38), mean=0.0429, stddev=0.0908], bias-{mean,stddev}=-0.0002319,0.005776, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000236153, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005424, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.10,0.11,0.11 0.12,0.13,0.15,0.17,0.18 0.19,0.20,0.21,0.23), mean=0.149, stddev=0.0254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.06,0.12,0.16,0.18 0.18,0.19,0.19,0.22), mean=0.113, stddev=0.0505], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,4e-08,4e-08,5e-08 7e-08,1e-07,1e-05,0.17,0.29 0.38,0.46,0.49,0.57), mean=0.0737, stddev=0.132], bias-{mean,stddev}=0.0007251,0.004291, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.11,0.13 0.15,0.19,0.21,0.46), mean=0.064, stddev=0.0554], oderiv-count=129792
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3147.94, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.20,-0.09,-0.07,-0.04 -0.0003,0.04,0.13,0.21,0.26 0.30,0.35,0.40,0.57), mean=0.13, stddev=0.105], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.04,0.17,0.22,0.26 0.28,0.30,0.31,0.35), mean=0.149, stddev=0.0909]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000236153, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004264, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.14,0.15 0.15,0.16,0.17,0.18,0.19 0.19,0.20,0.20,0.21), mean=0.168, stddev=0.013], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.07,0.07,0.08 0.08,0.08,0.10,0.11,0.12 0.12,0.13,0.13,0.15), mean=0.0961, stddev=0.0147], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.07,0.11,0.21,0.28 0.34,0.39,0.42,0.47), mean=0.142, stddev=0.0906], bias-{mean,stddev}=0.0007233,0.00477, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2892.35, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,0.04,0.06,0.11 0.15,0.21,0.32,0.45,0.52 0.58,0.64,0.70,0.82), mean=0.328, stddev=0.143], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.23,0.53,0.73,0.83 0.93,1.1,1.1,1.3), mean=0.494, stddev=0.291]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000236153, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002517, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,1e-07,3e-07,6e-07 3e-06,6e-05,0.05,0.09,0.11 0.13,0.14,0.14,0.19), mean=0.0473, stddev=0.0433], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.07,0.12,0.13,0.14 0.15,0.15,0.16,0.19), mean=0.109, stddev=0.036], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,8e-08,1e-07 1e-05,0.02,0.06,0.13,0.19 0.26,0.34,0.37,0.42), mean=0.0813, stddev=0.081], bias-{mean,stddev}=-0.0001048,0.001338, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000236153, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001107, w_fc-rms=0.0009288, w_oc-rms=0.001595, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-7.56196e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.25,0.02,0.06,0.18 0.31,0.43,0.50,0.64,0.75 0.86,1.1,1.2,1.4), mean=0.524, stddev=0.205], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.14,0.001,0.03,0.08 0.12,0.18,0.25,0.27,0.33 0.38,0.42,0.46,0.64), mean=0.237, stddev=0.0872] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-7.56196e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,0.25,0.30,0.37 0.45,0.50,0.51,0.73,0.87 1.0,1.2,1.2,1.6), mean=0.601, stddev=0.199], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.20,-0.04,0.03,0.11 0.15,0.20,0.25,0.26,0.31 0.35,0.39,0.41,0.49), mean=0.234, stddev=0.0743] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.276923, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.2,-2.8,-2.4,-1.8 -1.3,-0.69,0.001,0.62,1.4 1.8,2.4,2.8,4.8), mean=0.0187, stddev=1.08], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.9,-1.3,-1.2,-0.76 -0.20,0.23,1.0,1.2,1.7 2.1,2.4,2.6,3.2), mean=0.812, stddev=0.772] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-7.56196e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.35,-0.05,0.06,0.14 0.26,0.42,0.50,0.66,0.77 0.88,0.98,1.1,1.4), mean=0.52, stddev=0.207], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.14,-0.06,-0.02,0.07 0.12,0.17,0.25,0.26,0.34 0.37,0.42,0.44,0.63), mean=0.233, stddev=0.0908] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-7.56196e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-1.5,-1.4,-1.0 -0.75,-0.35,0.0004,0.41,0.80 1.1,1.4,1.6,2.6), mean=0.0255, stddev=0.627], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.40,-0.03,0.13,0.34 0.61,0.82,1.0,1.1,1.3 1.4,1.6,1.8,2.0), mean=0.971, stddev=0.306] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.23e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1857
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.204959
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000236153, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.07,0.09,0.10 0.10,0.10,0.11,0.11), mean=0.0699, stddev=0.0204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,8e-05,0.0001,0.0001 0.0003,0.0008,0.06,0.07,0.07 0.08,0.08,0.08,0.12), mean=0.0411, stddev=0.0311], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,4e-08,5e-08 7e-08,1e-07,1e-06,0.09,0.15 0.18,0.20,0.22,0.27), mean=0.0355, stddev=0.0636], bias-{mean,stddev}=-0.0001647,0.003961, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000236153, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004498, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.10,0.11,0.12,0.14,0.15 0.16,0.17,0.18,0.19), mean=0.124, stddev=0.0181], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.07,0.10,0.13,0.14 0.14,0.15,0.15,0.18), mean=0.098, stddev=0.0303], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 8e-08,1e-07,0.001,0.15,0.24 0.31,0.36,0.40,0.45), mean=0.0676, stddev=0.106], bias-{mean,stddev}=3.441e-05,0.002135, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.04,-0.02,-0.01,0.005 0.02,0.04,0.09,0.13,0.15 0.18,0.20,0.21,0.30), mean=0.0882, stddev=0.0529], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.14,-0.03,0.02,0.09 0.17,0.31,0.47,0.62,0.69 0.75,0.82,0.84,1.0), mean=0.458, stddev=0.198]
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2636.76, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.25,-0.16,-0.09,-0.07 -0.05,-0.009,0.07,0.14,0.19 0.23,0.28,0.30,0.45), mean=0.073, stddev=0.0939], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.11,0.18,0.21 0.24,0.26,0.28,0.33), mean=0.097, stddev=0.0858]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000236153, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00355, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.12,0.13,0.14,0.15,0.16 0.16,0.17,0.17,0.18), mean=0.14, stddev=0.0132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.06 0.07,0.07,0.08,0.09,0.10 0.10,0.11,0.11,0.12), mean=0.0802, stddev=0.0107], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.05,0.09,0.17,0.23 0.28,0.33,0.36,0.44), mean=0.117, stddev=0.078], bias-{mean,stddev}=-0.000418,0.003938, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2381.17, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.41,-0.14,-0.09,-0.05 0.03,0.12,0.28,0.43,0.52 0.58,0.63,0.69,0.84), mean=0.277, stddev=0.185], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.55,0.82,0.95 1.0,1.1,1.2,1.3), mean=0.501, stddev=0.358]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000236153, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002885, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.03,0.05,0.10,0.13 0.14,0.15,0.16,0.23), mean=0.0625, stddev=0.0388], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.09 0.09,0.10,0.12,0.16,0.18 0.19,0.20,0.20,0.21), mean=0.128, stddev=0.0315], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,4e-07,7e-07,3e-05 0.02,0.02,0.05,0.14,0.23 0.31,0.38,0.41,0.53), mean=0.0903, stddev=0.0957], bias-{mean,stddev}=0.0001525,0.001145, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000236153, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.00186, w_fc-rms=0.001467, w_oc-rms=0.003737, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-7.8452e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.37,-0.23,0.03 0.27,0.39,0.69,0.93,1.1 1.3,1.5,1.6,2.8), mean=0.678, stddev=0.392], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.47,-0.16,-0.10,-0.03 0.01,0.07,0.16,0.26,0.32 0.36,0.41,0.49,0.84), mean=0.165, stddev=0.127] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-7.8452e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.20,0.30 0.41,0.56,0.84,1.1,1.3 1.4,1.6,1.7,2.0), mean=0.846, stddev=0.334], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.28,-0.17,-0.14,-0.08 -0.01,0.04,0.15,0.23,0.29 0.32,0.36,0.38,0.47), mean=0.138, stddev=0.118] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.740041, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-15,-6.1,-5.4,-4.0 -3.2,-1.8,0.15,2.2,3.3 4.4,5.5,6.0,7.7), mean=0.102, stddev=2.6], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.5,-2.4,-1.6,-1.2 -0.66,-0.17,0.67,1.7,2.3 2.7,3.1,3.2,4.0), mean=0.717, stddev=1.19] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-7.8452e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.47,-0.29,-0.20 -0.03,0.15,0.61,1.0,1.3 1.5,1.7,2.0,2.5), mean=0.619, stddev=0.52], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.60,-0.24,-0.15,-0.09 -0.03,0.06,0.18,0.29,0.36 0.41,0.45,0.48,0.83), mean=0.172, stddev=0.155] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-7.8452e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-4.7,-3.8,-3.0 -2.2,-1.4,0.05,1.4,2.4 3.1,3.8,4.3,5.8), mean=0.0458, stddev=1.87], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.7,-0.53,-0.38,0.006 0.28,0.58,1.1,1.6,1.8 2.1,2.4,2.6,3.9), mean=1.05, stddev=0.701] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.04e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1551
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.204959
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000236153, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003809, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.04,0.05,0.07,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.0809, stddev=0.0317], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.06,0.07,0.07 0.08,0.08,0.08,0.15), mean=0.0604, stddev=0.0114], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 4e-07,2e-06,0.01,0.11,0.16 0.20,0.22,0.24,0.31), mean=0.0515, stddev=0.0699], bias-{mean,stddev}=-0.0002844,0.01939, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000236153, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004559, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.04,0.05,0.07,0.09,0.10 0.11,0.13,0.14,0.30), mean=0.0694, stddev=0.0242], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.17,0.27,0.28 0.28,0.29,0.30,0.31), mean=0.199, stddev=0.0657], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,4e-07 5e-07,2e-06,0.006,0.31,0.41 0.47,0.52,0.54,0.58), mean=0.118, stddev=0.173], bias-{mean,stddev}=-3.718e-10,0.001278, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.11444 tdnn2.affine:5.01977 lstm1.W_all:4.06097 lstm1.lstm_nonlin:0.09054 lstm1.W_rp:1.62227 tdnn3.affine:3.45548 tdnn4.affine:3.84216 lstm2.W_all:2.92708 lstm2.lstm_nonlin:0.0490745 lstm2.W_rp:1.17613 tdnn5.affine:2.86532 tdnn6.affine:3.1986 lstm3.W_all:3.35505 lstm3.lstm_nonlin:0.10091 lstm3.W_rp:1.4352 output.affine:3.3727 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.5164 tdnn2.affine:11.563 lstm1.W_all:21.6737 lstm1.lstm_nonlin:1.73156 lstm1.W_rp:15.6976 tdnn3.affine:8.66994 tdnn4.affine:8.57424 lstm2.W_all:17.9361 lstm2.lstm_nonlin:1.07398 lstm2.W_rp:14.9452 tdnn5.affine:8.35808 tdnn6.affine:8.46019 lstm3.W_all:25.7226 lstm3.lstm_nonlin:2.85889 lstm3.W_rp:32.7842 output.affine:32.7015 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.378046 tdnn2.affine:0.434951 lstm1.W_all:0.187286 lstm1.lstm_nonlin:0.0528602 lstm1.W_rp:0.103412 tdnn3.affine:0.401405 tdnn4.affine:0.449968 lstm2.W_all:0.163318 lstm2.lstm_nonlin:0.0463924 lstm2.W_rp:0.0787956 tdnn5.affine:0.345668 tdnn6.affine:0.380057 lstm3.W_all:0.130338 lstm3.lstm_nonlin:0.0357082 lstm3.W_rp:0.043909 output.affine:0.10308 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:47:53 KST 2020, elapsed time 1 seconds
