# nnet3-info exp/nnet3/tdnn_lstm1c_sp/146.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/145.mdl exp/nnet3/tdnn_lstm1c_sp/146.mdl 
# Started at Thu Jul 30 10:58:47 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/146.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000189407, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02974, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.03,0.38,0.52,0.61,0.66 0.73,0.78,0.86,1.3), mean=0.466, stddev=0.22], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.17,0.21,0.58,0.80,1.1 1.4,1.4,1.5,1.6), mean=0.579, stddev=0.353], bias-{mean,stddev}=0.004982,0.05452, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.143116, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,1e-06,3e-06,2e-05 0.0001,0.007,0.06,0.08,0.10 0.11,0.13,0.14,0.19), mean=0.057, stddev=0.0365], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.001,0.002,0.008 0.03,0.13,0.49,0.63,0.72 0.77,0.84,0.87,0.94), mean=0.435, stddev=0.242], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.06,0.28,0.37,0.46,0.52 0.57,0.67,0.83,1.3), mean=0.356, stddev=0.168], oderiv-count=1.17325e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32986.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,8e-07,2e-06,5e-06 3e-05,0.007,0.06,0.08,0.10 0.12,0.13,0.14,0.17), mean=0.0543, stddev=0.0361], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,3e-05,6e-05,0.0001 0.0004,0.03,0.09,0.10,0.11 0.12,0.13,0.13,0.14), mean=0.0752, stddev=0.0398]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000189407, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01202, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.37,0.39 0.41,0.43,0.47,0.51,0.54 0.56,0.60,0.62,0.72), mean=0.472, stddev=0.0543], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.01 0.02,0.22,0.28,0.32,0.34 0.37,0.40,0.41,0.74), mean=0.249, stddev=0.114], bias-{mean,stddev}=-0.001269,0.02813, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.27,0.27,0.28 0.29,0.30,0.33,0.37,0.38 0.41,0.43,0.46,0.54), mean=0.336, stddev=0.0403], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.41,0.42 0.43,0.44,0.46,0.48,0.50 0.51,0.52,0.52,0.55), mean=0.46, stddev=0.0271], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0446, stddev=0.00897], oderiv-count=1.13562e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32264.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.27 0.28,0.29,0.32,0.36,0.38 0.40,0.43,0.44,0.55), mean=0.326, stddev=0.0423], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.47,0.48 0.50,0.52,0.56,0.63,0.67 0.70,0.73,0.75,0.82), mean=0.574, stddev=0.0666]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000189407, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01667, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0008,0.003,0.01 0.07,0.20,0.37,0.54,0.64 0.71,0.80,0.87,1.1), mean=0.372, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.37,0.39,0.43 0.49,0.65,0.77,0.85,0.90 0.94,1.0,1.0,1.3), mean=0.745, stddev=0.151], bias-{mean,stddev}=-0.002125,0.02279, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000189407, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02176, w_fc-rms=0.03423, w_oc-rms=0.04957, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620964, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.43,0.44 0.45,0.46,0.49,0.52,0.56 0.59,0.65,0.67,0.75), mean=0.497, stddev=0.0479], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.21 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0146] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620964, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.38,0.40 0.42,0.45,0.49,0.53,0.58 0.66,0.75,0.79,0.88), mean=0.496, stddev=0.0781], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.17,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0192] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00987718, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.79,-0.73,-0.50 -0.33,-0.18,0.001,0.18,0.32 0.55,0.74,0.79,0.84), mean=0.00297, stddev=0.287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.29,0.30,0.37 0.41,0.48,0.60,0.73,0.95 0.99,1.0,1.0,1.0), mean=0.621, stddev=0.179] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620964, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.42 0.43,0.44,0.47,0.51,0.52 0.54,0.58,0.59,0.64), mean=0.477, stddev=0.0394], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.0172] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0176765, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.96,-0.82,-0.69,-0.48 -0.30,-0.16,-0.004,0.17,0.28 0.49,0.73,0.83,0.90), mean=0.00253, stddev=0.278], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.19,0.27,0.45 0.61,0.73,0.83,0.90,0.97 1.0,1.0,1.0,1.0), mean=0.798, stddev=0.157] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=297483
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000189407, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03023, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.20,0.23,0.41,0.96,1.0 1.1,1.1,1.1,1.2), mean=0.59, stddev=0.357], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.03,0.05 0.12,0.31,0.45,0.58,0.65 0.79,0.94,0.98,1.1), mean=0.444, stddev=0.202], bias-{mean,stddev}=0.0001555,0.04672, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000189407, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01219, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.18,0.21,0.23 0.25,0.27,0.33,0.39,0.43 0.45,0.49,0.51,0.68), mean=0.333, stddev=0.072], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.06 0.07,0.09,0.17,0.39,0.44 0.47,0.51,0.52,0.58), mean=0.234, stddev=0.149], bias-{mean,stddev}=-0.003301,0.03099, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.65e+05, self-repaired-proportion=0.00344365, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.03,0.05 0.06,0.09,0.12,0.15,0.16 0.18,0.19,0.21,0.24), mean=0.117, stddev=0.0396], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.14,0.16,0.24 0.28,0.37,0.51,0.61,0.64 0.67,0.71,0.73,0.79), mean=0.485, stddev=0.137], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.07,0.08,0.09,0.10,0.11 0.13,0.14,0.16,0.26), mean=0.0903, stddev=0.0213], oderiv-count=1.18106e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30099.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.02,0.03,0.04 0.06,0.08,0.11,0.14,0.16 0.18,0.19,0.20,0.23), mean=0.112, stddev=0.0399], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.07,0.10,0.13 0.14,0.16,0.18,0.21,0.22 0.23,0.25,0.25,0.30), mean=0.181, stddev=0.035]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000189407, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008959, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.30 0.31,0.32,0.35,0.38,0.39 0.41,0.43,0.45,0.60), mean=0.352, stddev=0.037], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.14,0.14,0.15 0.16,0.17,0.20,0.23,0.24 0.26,0.28,0.29,0.36), mean=0.202, stddev=0.033], bias-{mean,stddev}=-0.009979,0.01709, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.23e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.21,0.22,0.23 0.24,0.25,0.28,0.31,0.33 0.34,0.36,0.38,0.45), mean=0.284, stddev=0.037], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.38,0.39 0.40,0.42,0.44,0.47,0.48 0.49,0.51,0.51,0.52), mean=0.442, stddev=0.0302], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0325, stddev=0.00276], oderiv-count=1.0695e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27934.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.23,0.24,0.28,0.30,0.32 0.34,0.36,0.38,0.44), mean=0.277, stddev=0.0375], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.47,0.49,0.52,0.58,0.60 0.63,0.67,0.70,0.86), mean=0.533, stddev=0.06]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000189407, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0132, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-07,3e-06,5e-06,1e-05 5e-05,0.001,0.28,0.47,0.55 0.60,0.64,0.66,1.0), mean=0.257, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.26,0.31 0.37,0.51,0.62,0.68,0.70 0.74,0.78,0.84,1.2), mean=0.588, stddev=0.129], bias-{mean,stddev}=-0.003516,0.02526, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000189407, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01218, w_fc-rms=0.01524, w_oc-rms=0.02021, count=1.34e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626162, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.44,0.45 0.46,0.47,0.50,0.50,0.53 0.55,0.58,0.60,0.65), mean=0.495, stddev=0.031], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0153] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626162, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.44,0.45,0.50,0.50,0.51 0.54,0.59,0.63,0.70), mean=0.485, stddev=0.0397], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.21,0.21,0.22 0.23,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0119] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00626162, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.63,-0.55,-0.33 -0.22,-0.10,0.0003,0.12,0.23 0.30,0.44,0.61,0.77), mean=0.000653, stddev=0.198], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.43,0.46,0.51 0.54,0.57,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.747, stddev=0.196] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626162, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.42,0.44 0.45,0.46,0.50,0.50,0.52 0.55,0.57,0.58,0.62), mean=0.489, stddev=0.0316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.016] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00626162, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.62,-0.53,-0.32 -0.21,-0.10,0.0003,0.11,0.22 0.29,0.43,0.58,0.79), mean=0.00211, stddev=0.194], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.48,0.57,0.69 0.77,0.83,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.89, stddev=0.11] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=262392
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000189407, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02793, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.32,0.34 0.35,0.38,0.52,0.83,0.88 0.92,0.94,0.96,1.0), mean=0.598, stddev=0.219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0009,0.001,0.002 0.003,0.008,0.46,0.59,0.66 0.76,0.81,0.84,0.93), mean=0.357, stddev=0.274], bias-{mean,stddev}=-0.00427,0.1024, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000189407, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0114, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.20 0.22,0.24,0.29,0.36,0.42 0.46,0.51,0.53,0.62), mean=0.308, stddev=0.0799], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.14,0.15,0.23,0.34,0.37 0.39,0.42,0.44,0.50), mean=0.244, stddev=0.0908], bias-{mean,stddev}=0.00149,0.01675, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.76e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.03 0.04,0.05,0.08,0.10,0.11 0.12,0.13,0.14,0.15), mean=0.0759, stddev=0.0288], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.17 0.22,0.29,0.43,0.53,0.58 0.61,0.63,0.64,0.70), mean=0.414, stddev=0.135], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.08,0.10,0.12,0.14 0.15,0.16,0.17,0.21), mean=0.102, stddev=0.023], oderiv-count=1.03642e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25769, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.03 0.04,0.05,0.07,0.10,0.11 0.12,0.13,0.14,0.16), mean=0.075, stddev=0.0294], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.09 0.10,0.11,0.13,0.15,0.16 0.17,0.18,0.19,0.22), mean=0.132, stddev=0.0272]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000189407, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008559, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.27 0.28,0.29,0.33,0.38,0.40 0.42,0.44,0.44,0.56), mean=0.335, stddev=0.0474], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.13 0.15,0.16,0.19,0.22,0.24 0.27,0.31,0.33,0.39), mean=0.19, stddev=0.0431], bias-{mean,stddev}=-0.01183,0.01532, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.18e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.23,0.25,0.28,0.31,0.33 0.34,0.36,0.36,0.50), mean=0.281, stddev=0.0388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.34,0.36 0.37,0.38,0.42,0.45,0.46 0.48,0.48,0.49,0.51), mean=0.416, stddev=0.0353], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0272, stddev=0.00269], oderiv-count=911040
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23603.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.23,0.24,0.28,0.31,0.32 0.34,0.36,0.38,0.58), mean=0.278, stddev=0.0422], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.45,0.49,0.54,0.61,0.64 0.68,0.75,0.76,1.1), mean=0.551, stddev=0.0815]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000189407, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01935, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.25 0.31,0.35,0.42,0.61,0.74 0.79,0.84,0.85,1.3), mean=0.465, stddev=0.164], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.57,0.59 0.61,0.64,0.72,1.0,1.4 1.4,1.5,1.5,1.6), mean=0.837, stddev=0.279], bias-{mean,stddev}=0.007136,0.02106, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000189407, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03247, w_fc-rms=0.04523, w_oc-rms=0.06567, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632433, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.47,0.49 0.51,0.53,0.59,0.65,0.67 0.70,0.71,0.72,0.80), mean=0.589, stddev=0.0657], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.19 0.19,0.20,0.20,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.203, stddev=0.0103] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632433, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.48,0.49 0.51,0.54,0.60,0.65,0.69 0.72,0.75,0.78,0.89), mean=0.598, stddev=0.0693], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.16,0.17,0.18 0.18,0.19,0.20,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.202, stddev=0.015] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0082109, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.83,-0.69,-0.55 -0.35,-0.22,-0.02,0.21,0.36 0.48,0.76,0.81,0.89), mean=-0.00751, stddev=0.306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.24,0.27,0.30 0.35,0.38,0.43,0.46,0.48 0.50,0.51,0.52,0.54), mean=0.421, stddev=0.057] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00892134, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.55,0.56,0.59 0.60,0.63,0.68,0.71,0.74 0.75,0.78,0.80,0.95), mean=0.672, stddev=0.0552], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.14,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.179, stddev=0.0168] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0329421, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.90,-0.75,-0.51 -0.36,-0.21,-0.01,0.19,0.36 0.48,0.83,0.89,0.99), mean=-0.0071, stddev=0.316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.13,0.18,0.29 0.43,0.52,0.62,0.67,0.69 0.70,0.71,0.71,0.75), mean=0.584, stddev=0.123] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223165
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000189407, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07072, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.1,1.1 1.1,1.2,1.6,1.9,2.0 2.1,2.1,2.1,2.2), mean=1.57, stddev=0.353], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.58,0.78,0.88 0.95,1.0,1.1,1.3,1.3 1.4,1.4,1.4,1.6), mean=1.13, stddev=0.161], bias-{mean,stddev}=0.003723,0.07813, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000189407, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03962, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.51,0.52,0.54 0.56,0.58,0.62,0.68,0.72 0.75,0.79,0.83,1.9), mean=0.633, stddev=0.085], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.3,1.4,1.8,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.78, stddev=0.361], bias-{mean,stddev}=5.51e-09,0.02114, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0167, stddev=0.0139], oderiv-count=579200
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/145.mdl exp/nnet3/tdnn_lstm1c_sp/146.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.42427 tdnn2.affine:7.43431 lstm1.W_all:6.11283 lstm1.lstm_nonlin:0.123166 lstm1.W_rp:2.57583 tdnn3.affine:4.68341 tdnn4.affine:5.36551 lstm2.W_all:4.0973 lstm2.lstm_nonlin:0.0542318 lstm2.W_rp:1.73843 tdnn5.affine:3.82975 tdnn6.affine:4.47981 lstm3.W_all:5.70557 lstm3.lstm_nonlin:0.122209 lstm3.W_rp:2.23201 output.affine:4.88451 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.8141 tdnn2.affine:10.847 lstm1.W_all:19.4149 lstm1.lstm_nonlin:1.46068 lstm1.W_rp:11.1424 tdnn3.affine:7.79528 tdnn4.affine:8.0819 lstm2.W_all:15.3912 lstm2.lstm_nonlin:0.640432 lstm2.W_rp:10.4007 tdnn5.affine:7.2686 tdnn6.affine:7.72151 lstm3.W_all:22.5242 lstm3.lstm_nonlin:1.96331 lstm3.W_rp:26.0322 output.affine:29.3188 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.62182 tdnn2.affine:0.676314 lstm1.W_all:0.313795 lstm1.lstm_nonlin:0.0848924 lstm1.W_rp:0.230866 tdnn3.affine:0.599676 tdnn4.affine:0.658574 lstm2.W_all:0.265856 lstm2.lstm_nonlin:0.0847597 lstm2.W_rp:0.167129 tdnn5.affine:0.525971 tdnn6.affine:0.578488 lstm3.W_all:0.253 lstm3.lstm_nonlin:0.0624958 lstm3.W_rp:0.0857532 output.affine:0.166778 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:58:47 KST 2020, elapsed time 0 seconds
