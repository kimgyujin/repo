# nnet3-info exp/nnet3/tdnn_lstm1c_sp/186.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/185.mdl exp/nnet3/tdnn_lstm1c_sp/186.mdl 
# Started at Thu Jul 30 11:14:36 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/186.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00016684, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0288, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.009,0.01 0.02,0.22,0.51,0.60,0.66 0.71,0.78,0.88,1.1), mean=0.446, stddev=0.224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.13,0.14 0.16,0.19,0.55,0.77,1.0 1.3,1.4,1.4,1.5), mean=0.559, stddev=0.345], bias-{mean,stddev}=0.004432,0.05033, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0.140686, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,4e-06,1e-05,4e-05 9e-05,0.002,0.06,0.08,0.10 0.11,0.12,0.13,0.20), mean=0.0537, stddev=0.0361], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.005,0.02 0.04,0.11,0.47,0.63,0.71 0.77,0.84,0.90,0.98), mean=0.427, stddev=0.243], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.02 0.05,0.24,0.35,0.45,0.51 0.61,0.70,0.76,1.6), mean=0.34, stddev=0.179], oderiv-count=1.20922e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=43459, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,2e-06,2e-06,2e-05 7e-05,0.001,0.06,0.08,0.10 0.11,0.12,0.14,0.19), mean=0.052, stddev=0.0361], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,5e-05,8e-05,0.0002 0.0005,0.006,0.09,0.10,0.11 0.12,0.12,0.13,0.15), mean=0.0726, stddev=0.0407]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00016684, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01146, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.37 0.39,0.41,0.45,0.49,0.51 0.54,0.56,0.60,0.73), mean=0.45, stddev=0.0528], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.007 0.02,0.13,0.27,0.31,0.33 0.35,0.38,0.41,0.70), mean=0.235, stddev=0.114], bias-{mean,stddev}=-0.003962,0.02716, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.26 0.27,0.28,0.31,0.34,0.36 0.37,0.40,0.40,0.59), mean=0.311, stddev=0.0375], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.41 0.42,0.44,0.46,0.49,0.50 0.51,0.52,0.53,0.54), mean=0.46, stddev=0.0292], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0456, stddev=0.00903], oderiv-count=1.1913e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=42537.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.25 0.26,0.27,0.30,0.34,0.35 0.37,0.39,0.40,0.56), mean=0.305, stddev=0.0383], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.43,0.44 0.47,0.49,0.53,0.58,0.61 0.63,0.66,0.68,0.84), mean=0.536, stddev=0.0585]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00016684, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01587, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.0002,0.0006,0.003 0.02,0.17,0.35,0.53,0.62 0.69,0.75,0.81,1.1), mean=0.349, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.32,0.34,0.39 0.44,0.63,0.74,0.82,0.86 0.90,0.96,0.98,1.3), mean=0.707, stddev=0.154], bias-{mean,stddev}=-9.059e-05,0.02195, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00016684, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02506, w_fc-rms=0.02948, w_oc-rms=0.03279, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627785, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.45,0.45 0.46,0.47,0.49,0.51,0.54 0.60,0.70,0.71,0.74), mean=0.5, stddev=0.05], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0148] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627785, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.39,0.40,0.42 0.44,0.46,0.49,0.51,0.55 0.65,0.71,0.73,0.77), mean=0.496, stddev=0.0629], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.20 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0152] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00627785, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.82,-0.80,-0.52 -0.34,-0.19,0.004,0.20,0.31 0.42,0.62,0.78,0.86), mean=-0.00581, stddev=0.286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.29,0.37 0.43,0.48,0.60,0.76,0.99 1.0,1.0,1.0,1.0), mean=0.631, stddev=0.188] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627785, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.43 0.44,0.45,0.47,0.50,0.50 0.53,0.56,0.57,0.61), mean=0.473, stddev=0.0323], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0166] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00627785, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.80,-0.71,-0.44 -0.28,-0.15,0.0009,0.15,0.24 0.37,0.53,0.74,0.86), mean=-0.00665, stddev=0.249], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.30,0.33,0.53 0.68,0.76,0.85,0.91,1.0 1.0,1.0,1.0,1.0), mean=0.825, stddev=0.141] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.35121e-05, count-zeroing-boundaries=296031
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0548209
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00016684, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03174, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.19 0.22,0.26,0.45,1.0,1.1 1.1,1.1,1.2,1.2), mean=0.627, stddev=0.362], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.004,0.008,0.02 0.04,0.29,0.45,0.59,0.70 0.86,1.1,1.3,1.5), mean=0.448, stddev=0.248], bias-{mean,stddev}=0.001982,0.2238, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00016684, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01169, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.23,0.25,0.32,0.38,0.42 0.44,0.47,0.50,0.59), mean=0.318, stddev=0.0723], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.09,0.19,0.37,0.41 0.44,0.46,0.48,0.51), mean=0.23, stddev=0.135], bias-{mean,stddev}=0.003621,0.02174, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.07e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.06 0.06,0.08,0.10,0.13,0.14 0.16,0.17,0.18,0.20), mean=0.103, stddev=0.0311], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.18,0.23,0.28 0.33,0.38,0.50,0.60,0.65 0.70,0.73,0.74,0.82), mean=0.495, stddev=0.126], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.08,0.09,0.10,0.12,0.13 0.14,0.15,0.16,0.37), mean=0.105, stddev=0.0237], oderiv-count=1.04102e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39772.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.06,0.08,0.10,0.13,0.14 0.15,0.17,0.17,0.20), mean=0.102, stddev=0.0308], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.12 0.13,0.14,0.16,0.18,0.19 0.21,0.22,0.23,0.26), mean=0.163, stddev=0.0254]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00016684, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008497, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.29,0.31,0.33,0.36,0.38 0.40,0.41,0.44,0.57), mean=0.334, stddev=0.0357], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.15,0.16,0.19,0.22,0.24 0.25,0.27,0.28,0.34), mean=0.191, stddev=0.0338], bias-{mean,stddev}=-0.01257,0.01507, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.77e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.23,0.24,0.26,0.29,0.31 0.32,0.33,0.36,0.43), mean=0.266, stddev=0.0337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.39 0.40,0.41,0.44,0.46,0.47 0.49,0.50,0.51,0.52), mean=0.437, stddev=0.0305], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0354, stddev=0.00296], oderiv-count=955520
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37007.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.22,0.23,0.26,0.29,0.31 0.32,0.33,0.35,0.41), mean=0.263, stddev=0.0338], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.42,0.43 0.45,0.47,0.50,0.55,0.58 0.60,0.67,0.72,0.80), mean=0.511, stddev=0.0588]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00016684, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01314, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,9e-07,2e-06,4e-06 2e-05,0.0003,0.28,0.47,0.55 0.59,0.63,0.66,1.1), mean=0.254, stddev=0.219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.26,0.32 0.39,0.53,0.61,0.65,0.68 0.74,0.79,0.84,1.4), mean=0.586, stddev=0.123], bias-{mean,stddev}=-0.004515,0.04205, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00016684, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.009251, w_fc-rms=0.009929, w_oc-rms=0.01467, count=1.34e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633367, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.43,0.44,0.44 0.45,0.46,0.50,0.51,0.54 0.59,0.62,0.65,0.71), mean=0.498, stddev=0.0415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0144] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633367, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.41 0.42,0.44,0.49,0.50,0.50 0.52,0.56,0.58,0.77), mean=0.476, stddev=0.0434], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0117] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00772612, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.72,-0.56,-0.38 -0.23,-0.12,0.0001,0.11,0.23 0.35,0.54,0.65,0.85), mean=-0.00176, stddev=0.216], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.33,0.39,0.50 0.54,0.58,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.75, stddev=0.202] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633367, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.41,0.42 0.44,0.45,0.50,0.50,0.51 0.54,0.56,0.59,0.63), mean=0.484, stddev=0.0355], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0153] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00633367, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.56,-0.40,-0.30 -0.17,-0.09,0.0007,0.08,0.19 0.27,0.44,0.53,0.71), mean=-0.00025, stddev=0.175], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.53,0.61,0.72 0.79,0.83,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.901, stddev=0.103] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.83063e-06, count-zeroing-boundaries=261054
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0548209
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00016684, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02927, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.33,0.36 0.38,0.40,0.54,0.87,0.91 0.94,0.97,0.99,1.0), mean=0.63, stddev=0.222], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0006,0.0006,0.001 0.002,0.005,0.47,0.61,0.72 0.80,0.89,0.94,1.0), mean=0.369, stddev=0.294], bias-{mean,stddev}=0.004146,0.1443, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00016684, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0105, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.20 0.21,0.23,0.28,0.33,0.38 0.42,0.46,0.49,0.54), mean=0.285, stddev=0.0674], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.13,0.14,0.21,0.31,0.34 0.35,0.37,0.39,0.43), mean=0.225, stddev=0.0827], bias-{mean,stddev}=0.003762,0.0106, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.36e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.05,0.07,0.09,0.10 0.10,0.11,0.12,0.13), mean=0.0671, stddev=0.0218], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.20,0.24 0.28,0.35,0.47,0.58,0.61 0.64,0.66,0.68,0.75), mean=0.461, stddev=0.122], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.14,0.16 0.19,0.21,0.23,0.28), mean=0.128, stddev=0.0286], oderiv-count=966272
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34243, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.07,0.09,0.09 0.10,0.11,0.12,0.13), mean=0.0669, stddev=0.0221], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.09,0.10,0.11,0.12,0.13 0.14,0.15,0.15,0.18), mean=0.11, stddev=0.0177]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00016684, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007957, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.23,0.24 0.25,0.27,0.31,0.35,0.38 0.39,0.40,0.41,0.53), mean=0.311, stddev=0.0463], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.15,0.17,0.20,0.22 0.25,0.28,0.31,0.36), mean=0.177, stddev=0.0394], bias-{mean,stddev}=-0.01038,0.01936, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.95e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.20,0.21 0.22,0.24,0.27,0.29,0.30 0.32,0.33,0.34,0.45), mean=0.266, stddev=0.0337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.37 0.38,0.40,0.42,0.45,0.46 0.47,0.48,0.49,0.51), mean=0.421, stddev=0.029], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.029, stddev=0.00262], oderiv-count=919680
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31478.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.22,0.24,0.27,0.29,0.31 0.32,0.33,0.34,0.49), mean=0.265, stddev=0.0358], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.33,0.37,0.41 0.44,0.47,0.51,0.57,0.60 0.63,0.67,0.69,0.98), mean=0.518, stddev=0.0702]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00016684, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01888, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.21,0.26 0.29,0.34,0.42,0.61,0.70 0.74,0.78,0.81,1.4), mean=0.458, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.60,0.61 0.63,0.65,0.72,1.0,1.3 1.4,1.4,1.5,1.7), mean=0.823, stddev=0.254], bias-{mean,stddev}=0.02481,0.02602, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00016684, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04576, w_fc-rms=0.04745, w_oc-rms=0.04763, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.54,0.55,0.56 0.58,0.61,0.66,0.70,0.72 0.74,0.75,0.76,0.79), mean=0.654, stddev=0.0516], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.17 0.18,0.18,0.19,0.20,0.21 0.21,0.21,0.22,0.24), mean=0.193, stddev=0.0129] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.46,0.48,0.49 0.52,0.54,0.59,0.63,0.69 0.74,0.77,0.78,0.85), mean=0.595, stddev=0.0692], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.15,0.15,0.17 0.18,0.19,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.201, stddev=0.0161] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0100123, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.72,-0.66,-0.52 -0.36,-0.21,-0.004,0.22,0.32 0.48,0.63,0.73,0.82), mean=-0.00414, stddev=0.287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.24,0.27,0.31 0.35,0.39,0.44,0.48,0.50 0.51,0.53,0.55,0.65), mean=0.433, stddev=0.0609] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.53,0.56,0.58 0.59,0.62,0.65,0.69,0.71 0.73,0.75,0.76,0.86), mean=0.655, stddev=0.0464], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.16 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.22), mean=0.181, stddev=0.0134] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00650011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.75,-0.68,-0.49 -0.33,-0.20,-0.002,0.20,0.30 0.44,0.66,0.74,0.85), mean=-0.00562, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.28,0.30,0.36 0.43,0.53,0.62,0.66,0.69 0.70,0.71,0.72,0.74), mean=0.59, stddev=0.101] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221956
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0548209
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00016684, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07383, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.1,1.1 1.1,1.2,1.6,2.0,2.1 2.2,2.2,2.3,2.3), mean=1.63, stddev=0.412], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.67,0.85,0.96 1.0,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.18, stddev=0.155], bias-{mean,stddev}=0.01204,0.3295, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00016684, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03842, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.50,0.51,0.53 0.54,0.56,0.60,0.65,0.68 0.71,0.76,0.81,2.3), mean=0.613, stddev=0.0903], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.7,2.1,2.2 2.3,2.4,2.4,2.4), mean=1.72, stddev=0.403], bias-{mean,stddev}=5.227e-09,0.03254, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0136], oderiv-count=633600
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/185.mdl exp/nnet3/tdnn_lstm1c_sp/186.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.55758 tdnn2.affine:6.4795 lstm1.W_all:5.11361 lstm1.lstm_nonlin:0.0928282 lstm1.W_rp:2.11492 tdnn3.affine:4.1672 tdnn4.affine:4.70289 lstm2.W_all:3.54042 lstm2.lstm_nonlin:0.0426907 lstm2.W_rp:1.44985 tdnn5.affine:3.29313 tdnn6.affine:3.80042 lstm3.W_all:4.58819 lstm3.lstm_nonlin:0.0893498 lstm3.W_rp:1.81156 output.affine:4.10911 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.435 tdnn2.affine:10.34 lstm1.W_all:18.4759 lstm1.lstm_nonlin:1.15669 lstm1.W_rp:12.2161 tdnn3.affine:7.46077 tdnn4.affine:7.6657 lstm2.W_all:15.3986 lstm2.lstm_nonlin:0.455716 lstm2.W_rp:11.0127 tdnn5.affine:6.69096 tdnn6.affine:7.18435 lstm3.W_all:22.0187 lstm3.lstm_nonlin:1.85459 lstm3.W_rp:27.6634 output.affine:28.4552 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.570404 tdnn2.affine:0.621172 lstm1.W_all:0.276482 lstm1.lstm_nonlin:0.0797414 lstm1.W_rp:0.173183 tdnn3.affine:0.552925 tdnn4.affine:0.608161 lstm2.W_all:0.229653 lstm2.lstm_nonlin:0.0932243 lstm2.W_rp:0.131888 tdnn5.affine:0.488579 tdnn6.affine:0.524868 lstm3.W_all:0.207951 lstm3.lstm_nonlin:0.0482089 lstm3.W_rp:0.0655974 output.affine:0.144413 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:14:37 KST 2020, elapsed time 1 seconds
