# nnet3-info exp/nnet3/tdnn_lstm1c_sp/312.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/311.mdl exp/nnet3/tdnn_lstm1c_sp/312.mdl 
# Started at Thu Jul 30 12:04:35 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/312.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000179777, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03156, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.01 0.01,0.04,0.55,0.69,0.78 0.85,0.94,0.99,1.2), mean=0.463, stddev=0.291], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.18,0.21,0.63,0.89,1.2 1.3,1.5,1.5,1.5), mean=0.618, stddev=0.369], bias-{mean,stddev}=-0.001232,0.05948, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.13e+06, self-repaired-proportion=0.187749, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,1e-05,2e-05,4e-05 7e-05,0.0002,0.05,0.09,0.11 0.12,0.14,0.16,0.17), mean=0.0508, stddev=0.0439], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.004,0.009,0.02 0.04,0.06,0.41,0.60,0.71 0.81,0.88,0.90,0.99), mean=0.371, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.009,0.01,0.02 0.02,0.06,0.28,0.37,0.43 0.55,0.67,0.75,1.6), mean=0.268, stddev=0.18], oderiv-count=1.10707e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40742.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,6e-06,9e-06,2e-05 5e-05,0.0002,0.05,0.09,0.11 0.12,0.14,0.15,0.19), mean=0.0497, stddev=0.0438], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,8e-05,0.0001,0.0002 0.0003,0.001,0.09,0.12,0.13 0.14,0.15,0.15,0.16), mean=0.0699, stddev=0.0505]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000179777, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01175, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.37 0.38,0.41,0.45,0.51,0.54 0.59,0.62,0.64,0.71), mean=0.46, stddev=0.0651], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.006 0.008,0.02,0.28,0.33,0.36 0.39,0.45,0.48,0.72), mean=0.228, stddev=0.141], bias-{mean,stddev}=-0.03,0.04091, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.21,0.22 0.24,0.25,0.28,0.32,0.34 0.36,0.39,0.41,0.49), mean=0.283, stddev=0.0434], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.37,0.38 0.40,0.41,0.44,0.47,0.49 0.51,0.52,0.54,0.55), mean=0.444, stddev=0.037], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.05 0.06,0.07,0.07,0.08), mean=0.0441, stddev=0.0077], oderiv-count=1.12986e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39894.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.23,0.25,0.28,0.32,0.34 0.36,0.40,0.42,0.49), mean=0.286, stddev=0.0453], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.44 0.45,0.47,0.51,0.57,0.60 0.63,0.66,0.68,0.75), mean=0.521, stddev=0.0582]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000179777, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0177, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,1e-06,3e-06,2e-05 0.0006,0.16,0.42,0.59,0.67 0.73,0.79,0.84,1.0), mean=0.387, stddev=0.232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.39,0.44 0.52,0.70,0.81,0.90,0.96 1.0,1.1,1.1,1.3), mean=0.79, stddev=0.164], bias-{mean,stddev}=0.003812,0.02909, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000179777, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.08437, w_fc-rms=0.03303, w_oc-rms=0.04774, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631563, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.42,0.43 0.44,0.45,0.47,0.50,0.55 0.72,0.79,0.82,0.86), mean=0.497, stddev=0.0799], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.0233] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631563, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.45,0.47,0.48 0.49,0.50,0.51,0.55,0.60 0.68,0.80,0.81,0.87), mean=0.531, stddev=0.0673], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.17 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0247] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0344284, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.89,-0.87,-0.52 -0.27,-0.13,0.0007,0.15,0.31 0.56,0.87,0.89,0.92), mean=0.0181, stddev=0.306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.20,0.24 0.37,0.45,0.58,0.77,1.0 1.0,1.0,1.0,1.0), mean=0.611, stddev=0.22] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631563, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.40,0.40 0.42,0.43,0.46,0.50,0.50 0.51,0.55,0.58,0.74), mean=0.463, stddev=0.0401], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0202] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00631563, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.67,-0.62,-0.30 -0.15,-0.07,0.0008,0.09,0.21 0.33,0.62,0.69,0.75), mean=0.0117, stddev=0.208], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.49,0.59 0.79,0.84,0.90,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.882, stddev=0.115] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.50593e-05, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000234425, count-zeroing-boundaries=298603
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.28595
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000179777, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04025, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.39,0.43 0.46,0.54,0.88,1.2,1.3 1.3,1.4,1.4,1.4), mean=0.861, stddev=0.318], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0009,0.001,0.002 0.01,0.33,0.53,0.73,0.91 1.2,1.5,1.6,1.9), mean=0.544, stddev=0.354], bias-{mean,stddev}=0.01252,0.265, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000179777, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01346, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.21,0.23,0.26 0.28,0.30,0.37,0.43,0.47 0.49,0.53,0.54,0.58), mean=0.368, stddev=0.0768], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.17,0.29,0.40,0.42 0.45,0.47,0.49,0.51), mean=0.286, stddev=0.11], bias-{mean,stddev}=0.001976,0.009405, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.39e+05, self-repaired-proportion=0.00132479, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.01,0.02,0.03 0.04,0.05,0.08,0.10,0.12 0.13,0.14,0.15,0.18), mean=0.0795, stddev=0.0303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.16,0.20 0.26,0.37,0.52,0.62,0.66 0.70,0.73,0.75,0.85), mean=0.492, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.09,0.09,0.10 0.10,0.11,0.13,0.16,0.19 0.22,0.27,0.29,0.35), mean=0.138, stddev=0.041], oderiv-count=1.1049e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37350.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.02,0.03 0.04,0.05,0.08,0.10,0.12 0.13,0.14,0.15,0.18), mean=0.0797, stddev=0.0302], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.06,0.07,0.08 0.09,0.11,0.12,0.14,0.15 0.16,0.18,0.18,0.19), mean=0.121, stddev=0.0245]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000179777, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008747, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.29 0.29,0.31,0.33,0.38,0.40 0.43,0.46,0.47,0.53), mean=0.343, stddev=0.0437], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.11,0.13,0.14 0.15,0.16,0.19,0.23,0.25 0.28,0.31,0.33,0.37), mean=0.194, stddev=0.0453], bias-{mean,stddev}=-0.02456,0.02051, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.5e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.23,0.24,0.26,0.29,0.30 0.32,0.33,0.34,0.39), mean=0.263, stddev=0.0308], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.38,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.49,0.52), mean=0.435, stddev=0.0281], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0357, stddev=0.00317], oderiv-count=1.07309e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34807.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.23,0.24,0.26,0.29,0.31 0.32,0.34,0.34,0.41), mean=0.267, stddev=0.0321], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.39,0.41,0.42 0.44,0.46,0.50,0.56,0.59 0.63,0.67,0.69,0.89), mean=0.512, stddev=0.0656]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000179777, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01475, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-06,4e-06,1e-05 4e-05,0.0008,0.33,0.53,0.59 0.64,0.69,0.71,0.91), mean=0.29, stddev=0.239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.31,0.32,0.38 0.47,0.60,0.67,0.74,0.78 0.84,0.96,1.0,1.3), mean=0.659, stddev=0.134], bias-{mean,stddev}=0.00667,0.03571, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000179777, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05486, w_fc-rms=0.01835, w_oc-rms=0.03882, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637288, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.45,0.46 0.46,0.47,0.50,0.51,0.57 0.61,0.70,0.73,0.81), mean=0.507, stddev=0.0531], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0183] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637288, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.45,0.46,0.48 0.49,0.50,0.50,0.55,0.59 0.63,0.68,0.70,0.76), mean=0.525, stddev=0.0489], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0213] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00835574, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.84,-0.77,-0.47 -0.29,-0.11,0.0005,0.14,0.34 0.58,0.73,0.77,0.85), mean=0.0127, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.26,0.28,0.39 0.44,0.52,0.65,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.714, stddev=0.227] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637288, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.50,0.50,0.52 0.54,0.56,0.58,0.64), mean=0.493, stddev=0.0272], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.019] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00637288, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.68,-0.58,-0.46,-0.29 -0.16,-0.06,0.0002,0.08,0.19 0.36,0.46,0.53,0.60), mean=0.00859, stddev=0.178], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.59,0.62,0.73 0.78,0.85,0.92,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.911, stddev=0.0938] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=4.01185e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=8.16575e-05, count-zeroing-boundaries=263295
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.28595
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000179777, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03911, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.46,0.50,0.53 0.57,0.61,0.87,1.1,1.2 1.2,1.2,1.3,1.3), mean=0.858, stddev=0.243], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.004,0.01,0.56,0.82,0.97 1.1,1.3,1.5,1.7), mean=0.488, stddev=0.399], bias-{mean,stddev}=0.002123,0.2155, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000179777, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01288, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.27 0.28,0.30,0.34,0.40,0.44 0.49,0.51,0.53,0.60), mean=0.354, stddev=0.0646], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.16 0.17,0.19,0.27,0.37,0.41 0.43,0.44,0.45,0.50), mean=0.28, stddev=0.0896], bias-{mean,stddev}=0.0004782,0.005925, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.63e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.12,0.15), mean=0.0654, stddev=0.0266], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.15,0.19 0.24,0.32,0.50,0.60,0.64 0.66,0.69,0.71,0.77), mean=0.472, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.12,0.14,0.17,0.20 0.21,0.24,0.25,0.31), mean=0.146, stddev=0.0336], oderiv-count=973184
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32263.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.12,0.16), mean=0.0674, stddev=0.0269], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.09,0.11,0.13,0.13 0.14,0.15,0.15,0.17), mean=0.107, stddev=0.0209]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000179777, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008613, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.17,0.22 0.27,0.29,0.33,0.38,0.41 0.43,0.45,0.47,0.50), mean=0.335, stddev=0.0616], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.15,0.18,0.23,0.26 0.28,0.31,0.33,0.40), mean=0.191, stddev=0.0461], bias-{mean,stddev}=-0.01615,0.02535, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.97e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.20 0.22,0.25,0.28,0.31,0.32 0.33,0.34,0.35,0.44), mean=0.276, stddev=0.0421], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.36,0.37 0.39,0.40,0.43,0.46,0.47 0.48,0.49,0.50,0.54), mean=0.429, stddev=0.0325], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0293, stddev=0.00274], oderiv-count=973280
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29719.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.18,0.21 0.23,0.25,0.29,0.31,0.33 0.34,0.35,0.37,0.49), mean=0.282, stddev=0.0433], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.28,0.37 0.43,0.48,0.55,0.61,0.65 0.69,0.73,0.77,1.0), mean=0.541, stddev=0.097]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000179777, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02085, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.28,0.28,0.30 0.32,0.36,0.50,0.65,0.71 0.76,0.85,0.90,1.1), mean=0.51, stddev=0.149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.69,0.75 0.78,0.82,0.89,1.1,1.1 1.2,1.4,1.4,1.8), mean=0.937, stddev=0.164], bias-{mean,stddev}=0.01343,0.01801, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000179777, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.09996, w_fc-rms=0.04679, w_oc-rms=0.07474, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644207, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.58,0.61,0.63 0.65,0.68,0.73,0.78,0.81 0.83,0.85,0.87,0.89), mean=0.731, stddev=0.0598], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.22), mean=0.164, stddev=0.0248] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644207, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.50,0.57,0.60 0.62,0.65,0.70,0.75,0.79 0.83,0.85,0.88,0.89), mean=0.702, stddev=0.0683], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.13,0.15,0.17,0.19,0.19 0.20,0.21,0.21,0.23), mean=0.168, stddev=0.0251] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0321159, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.89,-0.79,-0.62 -0.46,-0.33,-0.003,0.32,0.48 0.61,0.83,0.85,0.91), mean=-0.00469, stddev=0.372], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.20,0.22 0.28,0.36,0.47,0.52,0.55 0.57,0.58,0.59,0.65), mean=0.442, stddev=0.101] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644207, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.50,0.53 0.56,0.59,0.64,0.68,0.71 0.74,0.77,0.81,0.88), mean=0.639, stddev=0.062], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0187] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644207, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.71,-0.64,-0.50 -0.36,-0.26,-0.004,0.24,0.36 0.48,0.66,0.69,0.75), mean=-0.00577, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.43,0.47 0.53,0.62,0.70,0.75,0.78 0.79,0.81,0.82,0.84), mean=0.679, stddev=0.0933] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.23386e-06, count-zeroing-boundaries=223827
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.28595
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000179777, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09135, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.8,2.6,2.7 2.8,2.9,3.0,3.1), mean=1.98, stddev=0.632], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.87,0.99,1.1 1.1,1.2,1.4,1.6,1.9 2.1,2.2,2.3,2.3), mean=1.44, stddev=0.303], bias-{mean,stddev}=0.000298,0.7182, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000179777, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04428, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.61,0.62 0.64,0.66,0.70,0.74,0.78 0.81,0.87,0.93,2.1), mean=0.709, stddev=0.0843], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.2 1.3,1.3,1.7,2.5,2.6 2.7,2.7,2.8,2.9), mean=1.94, stddev=0.586], bias-{mean,stddev}=5.184e-09,0.02289, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0138], oderiv-count=592960
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/311.mdl exp/nnet3/tdnn_lstm1c_sp/312.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.05013 tdnn2.affine:3.95459 lstm1.W_all:3.10157 lstm1.lstm_nonlin:0.0656262 lstm1.W_rp:1.28571 tdnn3.affine:2.86484 tdnn4.affine:3.01701 lstm2.W_all:2.20459 lstm2.lstm_nonlin:0.0384844 lstm2.W_rp:0.887454 tdnn5.affine:2.41077 tdnn6.affine:2.52443 lstm3.W_all:2.288 lstm3.lstm_nonlin:0.0564975 lstm3.W_rp:0.923897 output.affine:2.56079 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.5382 tdnn2.affine:10.6501 lstm1.W_all:20.6232 lstm1.lstm_nonlin:2.33537 lstm1.W_rp:15.4067 tdnn3.affine:8.5757 tdnn4.affine:7.91168 lstm2.W_all:17.225 lstm2.lstm_nonlin:1.58849 lstm2.W_rp:14.795 tdnn5.affine:8.20523 tdnn6.affine:7.78798 lstm3.W_all:24.2628 lstm3.lstm_nonlin:3.03963 lstm3.W_rp:35.5297 output.affine:32.7659 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.323492 tdnn2.affine:0.370557 lstm1.W_all:0.150307 lstm1.lstm_nonlin:0.0282778 lstm1.W_rp:0.0833834 tdnn3.affine:0.333439 tdnn4.affine:0.380492 lstm2.W_all:0.127893 lstm2.lstm_nonlin:0.024401 lstm2.W_rp:0.0599549 tdnn5.affine:0.293201 tdnn6.affine:0.323362 lstm3.W_all:0.0941934 lstm3.lstm_nonlin:0.0186067 lstm3.W_rp:0.0260003 output.affine:0.0781106 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:04:35 KST 2020, elapsed time 0 seconds
