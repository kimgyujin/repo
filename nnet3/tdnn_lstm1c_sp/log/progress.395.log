# nnet3-info exp/nnet3/tdnn_lstm1c_sp/395.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/394.mdl exp/nnet3/tdnn_lstm1c_sp/395.mdl 
# Started at Thu Jul 30 12:37:38 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/395.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00010619, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03238, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.007 0.008,0.02,0.57,0.72,0.81 0.86,0.95,0.98,1.2), mean=0.468, stddev=0.309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.18,0.23,0.67,0.92,1.2 1.3,1.4,1.4,1.5), mean=0.642, stddev=0.365], bias-{mean,stddev}=-0.006619,0.05977, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.16e+06, self-repaired-proportion=0.168577, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,2e-05,2e-05,3e-05 7e-05,0.0001,0.04,0.09,0.11 0.12,0.14,0.15,0.18), mean=0.0452, stddev=0.0439], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.02,0.03 0.05,0.07,0.37,0.58,0.71 0.79,0.88,0.90,0.99), mean=0.348, stddev=0.261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.008,0.01 0.02,0.03,0.36,0.51,0.61 0.72,0.80,0.91,1.7), mean=0.34, stddev=0.244], oderiv-count=1.09965e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34409.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,8e-06,2e-05,3e-05 5e-05,0.0002,0.04,0.08,0.11 0.12,0.14,0.15,0.18), mean=0.0431, stddev=0.0429], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,9e-05,0.0001,0.0002 0.0003,0.0007,0.08,0.11,0.12 0.13,0.14,0.15,0.16), mean=0.061, stddev=0.0487]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00010619, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01165, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.35,0.36 0.38,0.40,0.44,0.50,0.54 0.58,0.63,0.65,0.73), mean=0.455, stddev=0.068], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.004 0.005,0.009,0.28,0.33,0.37 0.40,0.43,0.47,0.76), mean=0.221, stddev=0.147], bias-{mean,stddev}=-0.0363,0.03911, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.20 0.21,0.22,0.26,0.29,0.31 0.33,0.35,0.37,0.46), mean=0.258, stddev=0.0428], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.36,0.36,0.39 0.40,0.41,0.44,0.47,0.49 0.50,0.52,0.53,0.58), mean=0.443, stddev=0.0368], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.10), mean=0.0526, stddev=0.0105], oderiv-count=1.11085e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33661.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.20 0.21,0.22,0.26,0.29,0.32 0.34,0.36,0.39,0.49), mean=0.26, stddev=0.0461], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.36,0.38 0.40,0.42,0.47,0.52,0.55 0.58,0.61,0.64,0.72), mean=0.473, stddev=0.0614]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00010619, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01756, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,6e-07,1e-06,1e-05 0.0002,0.17,0.41,0.59,0.66 0.73,0.79,0.85,1.1), mean=0.384, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.37,0.42 0.50,0.70,0.81,0.90,0.95 1.0,1.1,1.2,1.3), mean=0.783, stddev=0.169], bias-{mean,stddev}=0.002019,0.02622, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00010619, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.07314, w_fc-rms=0.02436, w_oc-rms=0.04455, count=1.51e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640493, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.48,0.50,0.54 0.69,0.76,0.78,0.83), mean=0.494, stddev=0.0723], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.19 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0193] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640493, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.44,0.45,0.46 0.47,0.48,0.50,0.52,0.56 0.63,0.71,0.76,0.81), mean=0.512, stddev=0.0564], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.18,0.19 0.21,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0176] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0117842, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.87,-0.83,-0.46 -0.26,-0.13,0.0004,0.15,0.29 0.62,0.80,0.86,0.89), mean=0.016, stddev=0.294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.24,0.30 0.39,0.45,0.58,0.73,1.0 1.0,1.0,1.0,1.0), mean=0.612, stddev=0.21] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640493, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.42,0.46,0.50,0.50 0.52,0.56,0.58,0.65), mean=0.462, stddev=0.0413], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0193] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00640493, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.75,-0.71,-0.33 -0.19,-0.09,0.0003,0.11,0.22 0.46,0.64,0.75,0.84), mean=0.0112, stddev=0.234], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.33,0.38,0.52 0.71,0.79,0.87,0.93,1.0 1.0,1.0,1.0,1.0), mean=0.847, stddev=0.137] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.03256e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.23809e-05, count-zeroing-boundaries=296565
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.14876
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00010619, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0394, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.44,0.46 0.51,0.56,0.86,1.1,1.2 1.3,1.3,1.3,1.4), mean=0.854, stddev=0.278], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0006,0.0009,0.002 0.007,0.36,0.55,0.73,0.93 1.2,1.4,1.5,1.7), mean=0.542, stddev=0.331], bias-{mean,stddev}=0.01248,0.2583, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00010619, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01256, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.23,0.24,0.25 0.27,0.29,0.34,0.39,0.42 0.45,0.49,0.51,0.56), mean=0.345, stddev=0.0615], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.27,0.36,0.39 0.41,0.43,0.44,0.46), mean=0.271, stddev=0.0916], bias-{mean,stddev}=0.001303,0.009163, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0.00109326, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.01,0.02,0.02 0.03,0.05,0.08,0.11,0.12 0.14,0.15,0.16,0.18), mean=0.0785, stddev=0.0336], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.12,0.13,0.16 0.22,0.32,0.46,0.57,0.62 0.67,0.70,0.71,0.81), mean=0.446, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.09,0.09,0.10 0.10,0.10,0.12,0.16,0.19 0.23,0.27,0.29,0.35), mean=0.136, stddev=0.0434], oderiv-count=1.12435e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31418.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.12 0.13,0.14,0.15,0.19), mean=0.0773, stddev=0.0332], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.06,0.07 0.09,0.10,0.13,0.15,0.16 0.17,0.18,0.19,0.21), mean=0.125, stddev=0.0289]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00010619, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008232, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.26,0.27 0.28,0.29,0.32,0.35,0.38 0.39,0.41,0.42,0.45), mean=0.323, stddev=0.0377], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.12,0.13,0.14 0.14,0.16,0.18,0.21,0.23 0.25,0.28,0.29,0.37), mean=0.184, stddev=0.0375], bias-{mean,stddev}=-0.02752,0.01849, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.22,0.24,0.27,0.29 0.30,0.32,0.32,0.35), mean=0.246, stddev=0.031], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.35,0.36,0.38 0.39,0.40,0.42,0.45,0.46 0.47,0.48,0.48,0.50), mean=0.424, stddev=0.0288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.04,0.04,0.05,0.05), mean=0.0375, stddev=0.00271], oderiv-count=976864
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29174.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.22,0.25,0.27,0.29 0.30,0.32,0.33,0.36), mean=0.248, stddev=0.032], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.36,0.39,0.40 0.42,0.43,0.47,0.53,0.55 0.58,0.62,0.64,0.79), mean=0.482, stddev=0.0585]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00010619, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01434, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,6e-06,2e-05 6e-05,0.001,0.33,0.51,0.58 0.63,0.68,0.70,0.89), mean=0.283, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.35 0.43,0.60,0.66,0.73,0.77 0.80,0.86,0.92,1.3), mean=0.641, stddev=0.13], bias-{mean,stddev}=0.004794,0.03078, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00010619, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04476, w_fc-rms=0.01446, w_oc-rms=0.03996, count=1.38e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646074, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.46 0.46,0.48,0.50,0.51,0.55 0.59,0.65,0.67,0.76), mean=0.503, stddev=0.0436], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0151] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646074, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.46,0.47 0.48,0.50,0.50,0.52,0.55 0.58,0.63,0.64,0.70), mean=0.51, stddev=0.0358], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0151] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00646074, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.79,-0.73,-0.39 -0.23,-0.09,0.0003,0.12,0.31 0.48,0.63,0.68,0.76), mean=0.00765, stddev=0.245], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.33,0.40,0.43 0.48,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.721, stddev=0.215] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646074, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.45,0.47,0.50,0.50,0.51 0.52,0.56,0.57,0.67), mean=0.488, stddev=0.0288], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0181] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00646074, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.60,-0.55,-0.28 -0.17,-0.07,0.0002,0.09,0.21 0.35,0.47,0.56,0.62), mean=0.00647, stddev=0.189], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.55,0.58,0.67 0.76,0.82,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.89, stddev=0.109] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=5.73542e-06, count-zeroing-boundaries=261532
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.14876
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00010619, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03738, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.48,0.53 0.56,0.60,0.82,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.823, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.003 0.005,0.01,0.56,0.79,0.90 1.0,1.2,1.3,1.4), mean=0.475, stddev=0.371], bias-{mean,stddev}=-0.001048,0.2023, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00010619, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0118, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.25 0.26,0.28,0.31,0.37,0.41 0.44,0.48,0.49,0.55), mean=0.324, stddev=0.0594], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.24,0.34,0.37 0.39,0.40,0.41,0.44), mean=0.257, stddev=0.0797], bias-{mean,stddev}=0.001066,0.006968, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.67e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.13,0.13,0.15), mean=0.063, stddev=0.029], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.14,0.16 0.21,0.28,0.44,0.55,0.60 0.63,0.65,0.68,0.72), mean=0.42, stddev=0.144], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.10,0.11,0.13,0.16,0.18 0.21,0.23,0.24,0.27), mean=0.138, stddev=0.0333], oderiv-count=951552
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26930.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.04,0.06,0.09,0.10 0.11,0.13,0.13,0.15), mean=0.0647, stddev=0.0291], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.08,0.09,0.11,0.13,0.14 0.15,0.16,0.17,0.19), mean=0.109, stddev=0.0257]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00010619, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008245, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.15,0.22 0.25,0.28,0.32,0.37,0.39 0.40,0.41,0.42,0.45), mean=0.32, stddev=0.0583], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.14,0.15,0.17,0.22,0.24 0.27,0.30,0.33,0.40), mean=0.183, stddev=0.0444], bias-{mean,stddev}=-0.02167,0.02268, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.02e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.14,0.18 0.21,0.23,0.26,0.28,0.30 0.32,0.33,0.34,0.39), mean=0.256, stddev=0.0419], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.38,0.39,0.42,0.44,0.45 0.46,0.48,0.49,0.51), mean=0.415, stddev=0.0309], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0312, stddev=0.00318], oderiv-count=909440
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24686.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.16,0.18 0.21,0.23,0.26,0.29,0.30 0.32,0.34,0.35,0.46), mean=0.26, stddev=0.0429], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.25,0.34 0.39,0.45,0.51,0.58,0.61 0.64,0.68,0.69,1.0), mean=0.51, stddev=0.0962]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00010619, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02073, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.27,0.28 0.30,0.34,0.49,0.66,0.72 0.78,0.85,0.90,0.98), mean=0.505, stddev=0.158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.59,0.61,0.70 0.77,0.80,0.87,1.1,1.2 1.3,1.4,1.5,2.0), mean=0.927, stddev=0.187], bias-{mean,stddev}=0.01351,0.01692, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00010619, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1073, w_fc-rms=0.04378, w_oc-rms=0.07328, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652812, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.58,0.59,0.62 0.64,0.67,0.71,0.76,0.78 0.80,0.83,0.85,0.87), mean=0.713, stddev=0.0556], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.13 0.14,0.16,0.17,0.19,0.19 0.20,0.20,0.20,0.22), mean=0.17, stddev=0.0203] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652812, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.53,0.56,0.58 0.59,0.62,0.66,0.70,0.75 0.80,0.83,0.84,0.89), mean=0.666, stddev=0.0644], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.15,0.17,0.19,0.20,0.20 0.21,0.21,0.21,0.23), mean=0.181, stddev=0.0221] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0256446, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.81,-0.75,-0.58 -0.44,-0.31,-0.01,0.27,0.43 0.55,0.75,0.83,0.91), mean=-0.0109, stddev=0.348], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.20,0.24 0.31,0.36,0.43,0.47,0.50 0.51,0.53,0.55,0.61), mean=0.415, stddev=0.078] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652812, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.49,0.50,0.53 0.55,0.59,0.64,0.67,0.70 0.72,0.75,0.80,0.89), mean=0.633, stddev=0.0585], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.14 0.15,0.16,0.18,0.19,0.19 0.19,0.20,0.20,0.21), mean=0.175, stddev=0.0171] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00742537, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.76,-0.69,-0.56 -0.41,-0.29,-0.009,0.25,0.37 0.54,0.73,0.77,0.88), mean=-0.0107, stddev=0.32], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.27,0.29,0.35 0.43,0.52,0.60,0.66,0.69 0.70,0.71,0.72,0.77), mean=0.582, stddev=0.102] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.74567e-06, count-zeroing-boundaries=222365
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.14876
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00010619, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08891, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.1,1.1,1.1 1.2,1.3,1.7,2.6,2.7 2.7,2.8,2.9,3.1), mean=1.93, stddev=0.633], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.90,1.0,1.1 1.2,1.2,1.4,1.6,1.8 1.9,2.0,2.1,2.2), mean=1.41, stddev=0.255], bias-{mean,stddev}=-0.03641,0.5712, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00010619, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04222, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.58,0.60 0.61,0.63,0.67,0.71,0.74 0.77,0.82,0.88,2.1), mean=0.676, stddev=0.0814], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.0,1.1,1.1 1.1,1.2,1.6,2.4,2.6 2.6,2.7,2.7,2.8), mean=1.84, stddev=0.593], bias-{mean,stddev}=4.667e-09,0.02281, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0167, stddev=0.0139], oderiv-count=606400
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/394.mdl exp/nnet3/tdnn_lstm1c_sp/395.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.27065 tdnn2.affine:3.03755 lstm1.W_all:2.30054 lstm1.lstm_nonlin:0.0459963 lstm1.W_rp:1.00383 tdnn3.affine:2.09843 tdnn4.affine:2.17855 lstm2.W_all:1.57142 lstm2.lstm_nonlin:0.0244725 lstm2.W_rp:0.68922 tdnn5.affine:1.76704 tdnn6.affine:1.87414 lstm3.W_all:1.95618 lstm3.lstm_nonlin:0.0438026 lstm3.W_rp:0.735964 output.affine:1.81162 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8643 tdnn2.affine:10.5611 lstm1.W_all:20.4509 lstm1.lstm_nonlin:2.03043 lstm1.W_rp:15.0745 tdnn3.affine:7.99955 tdnn4.affine:7.45255 lstm2.W_all:16.732 lstm2.lstm_nonlin:1.40751 lstm2.W_rp:14.1256 tdnn5.affine:7.51766 tdnn6.affine:7.46025 lstm3.W_all:24.1273 lstm3.lstm_nonlin:3.1265 lstm3.W_rp:33.9693 output.affine:31.2412 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.254163 tdnn2.affine:0.287976 lstm1.W_all:0.112477 lstm1.lstm_nonlin:0.0225383 lstm1.W_rp:0.0665607 tdnn3.affine:0.261865 tdnn4.affine:0.291642 lstm2.W_all:0.0938692 lstm2.lstm_nonlin:0.0173217 lstm2.W_rp:0.048724 tdnn5.affine:0.234425 tdnn6.affine:0.250895 lstm3.W_all:0.0810697 lstm3.lstm_nonlin:0.0139955 lstm3.W_rp:0.0216595 output.affine:0.0579784 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:37:39 KST 2020, elapsed time 1 seconds
