# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/139.mdl exp/nnet3/tdnn_lstm1c_sp/140.mdl 
# Started at Thu Jul 30 10:56:23 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/139.mdl exp/nnet3/tdnn_lstm1c_sp/140.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000193659, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01914, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.007,0.01 0.03,0.27,0.34,0.39,0.42 0.44,0.48,0.51,0.62), mean=0.304, stddev=0.132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.15,0.40,0.53,0.64 0.82,0.91,0.93,1.2), mean=0.379, stddev=0.216], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.07,0.23,0.56,0.75 0.92,1.1,1.2,1.4), mean=0.324, stddev=0.292], bias-{mean,stddev}=-0.0008822,0.02505, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=4.89e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.67,-0.40,-0.39,-0.30 -0.20,-0.08,0.03,0.21,0.33 0.43,0.52,0.54,0.73), mean=0.0572, stddev=0.208], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.6,-2.4,-2.3,-1.8 -1.1,-0.62,0.28,1.2,1.7 2.3,2.9,3.5,4.0), mean=0.32, stddev=1.21]
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7853.48, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.20,-0.13,-0.10,-0.06 -0.03,-0.0005,0.04,0.12,0.16 0.20,0.23,0.25,0.37), mean=0.0549, stddev=0.0796], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,0.12,0.14 0.16,0.17,0.18,0.22), mean=0.0574, stddev=0.0589]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000193659, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008449, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.27,0.28 0.29,0.31,0.33,0.36,0.37 0.39,0.40,0.41,0.44), mean=0.332, stddev=0.0316], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.007 0.02,0.16,0.20,0.23,0.24 0.26,0.27,0.28,0.35), mean=0.177, stddev=0.0764], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.07,0.09,0.19,0.41,0.57 0.71,0.84,0.90,1.0), mean=0.261, stddev=0.208], bias-{mean,stddev}=0.0002863,0.0133, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=3.11e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.81,-0.73,-0.51 -0.31,-0.10,0.35,0.79,0.98 1.1,1.3,1.4,1.7), mean=0.342, stddev=0.506], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.70,-0.43,-0.34,-0.19 -0.05,0.15,0.51,0.85,0.98 1.2,1.4,1.5,1.9), mean=0.49, stddev=0.415]
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7706.02, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.09,0.01,0.03,0.11 0.16,0.22,0.32,0.43,0.50 0.56,0.66,0.70,0.98), mean=0.323, stddev=0.14], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.19,0.54,0.70,0.80 0.88,1.0,1.1,1.3), mean=0.481, stddev=0.285]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000193659, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00543, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,0.0003,0.0009,0.005 0.02,0.06,0.11,0.18,0.22 0.26,0.29,0.31,0.37), mean=0.118, stddev=0.0731], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.10,0.15,0.26,0.29,0.30 0.31,0.33,0.34,0.36), mean=0.237, stddev=0.0723], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 2e-06,0.06,0.13,0.28,0.40 0.54,0.70,0.79,0.92), mean=0.18, stddev=0.171], bias-{mean,stddev}=1.141e-06,0.00218, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000193659, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001928, w_fc-rms=0.002196, w_oc-rms=0.004395, count=6.68e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000888999, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.9,-1.4,-1.1,-0.84 -0.51,-0.09,0.49,0.92,1.2 1.6,1.9,2.1,2.8), mean=0.417, stddev=0.704], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.55,-0.28,-0.16 -0.05,0.09,0.25,0.42,0.59 0.72,0.96,1.1,1.6), mean=0.258, stddev=0.286] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000888999, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-1.3,-0.98,-0.67 -0.30,-0.008,0.48,0.94,1.2 1.5,1.9,2.0,2.6), mean=0.462, stddev=0.635], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.52,-0.48,-0.16 0.003,0.11,0.25,0.39,0.49 0.64,0.76,0.83,1.4), mean=0.24, stddev=0.24] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.304388, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-15,-8.9,-8.2,-6.8 -5.2,-3.5,-0.14,2.7,4.7 6.2,8.0,9.9,17), mean=-0.186, stddev=3.96], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.0,-5.1,-4.8,-3.5 -2.8,-1.4,0.81,2.7,4.2 5.1,6.0,7.1,9.3), mean=0.729, stddev=2.6] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000888999, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.1,-1.7,-1.4,-0.87 -0.50,-0.11,0.47,1.0,1.4 1.8,2.1,2.4,3.2), mean=0.44, stddev=0.807], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-0.88,-0.74,-0.42 -0.24,-0.08,0.22,0.39,0.57 0.75,0.99,1.1,1.5), mean=0.175, stddev=0.367] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0901819, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-12,-7.9,-6.6,-5.4 -4.4,-2.9,-0.02,2.2,4.0 5.0,6.9,8.8,11), mean=-0.148, stddev=3.24], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.9,-3.0,-2.7,-1.6 -1.0,-0.19,0.99,2.3,3.1 3.7,4.8,5.3,6.5), mean=1.01, stddev=1.66] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.1e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00120992, count-zeroing-boundaries=1653
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000193659, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007087, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.07,0.12,0.22,0.24 0.25,0.26,0.27,0.29), mean=0.143, stddev=0.0745], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.003,0.005,0.01 0.03,0.07,0.11,0.14,0.15 0.17,0.19,0.19,0.21), mean=0.105, stddev=0.0445], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,7e-08,8e-08,9e-08 1e-07,3e-07,3e-06,0.02,0.32 0.43,0.54,0.59,0.66), mean=0.0632, stddev=0.149], bias-{mean,stddev}=0.0002977,0.00586, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000193659, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007383, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.14,0.15,0.15 0.16,0.17,0.20,0.23,0.25 0.27,0.29,0.30,0.33), mean=0.203, stddev=0.0363], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.06,0.10,0.24,0.25 0.26,0.28,0.29,0.31), mean=0.145, stddev=0.0853], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-07,1e-07,2e-07 3e-07,6e-07,0.0001,0.12,0.38 0.55,0.70,0.75,0.86), mean=0.0883, stddev=0.186], bias-{mean,stddev}=3.782e-05,0.0156, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.36e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.15,-0.08,-0.06,-0.02 0.006,0.04,0.12,0.19,0.23 0.27,0.31,0.32,0.47), mean=0.12, stddev=0.0913], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.64,-0.34,-0.11,0.02 0.11,0.24,0.50,0.76,0.89 0.96,1.1,1.1,1.3), mean=0.494, stddev=0.302], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.13,0.22,0.28 0.33,0.45,0.55,1.1), mean=0.133, stddev=0.136], oderiv-count=29184
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7263.66, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.24,-0.06,-0.06,-0.02 0.006,0.04,0.12,0.21,0.24 0.28,0.31,0.34,0.55), mean=0.126, stddev=0.0938], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.07,0.19,0.25,0.27 0.29,0.32,0.34,0.38), mean=0.167, stddev=0.0946]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000193659, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006049, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.21,0.22,0.24,0.25,0.26 0.27,0.28,0.29,0.30), mean=0.238, stddev=0.0188], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.10,0.10,0.11 0.11,0.12,0.13,0.15,0.16 0.17,0.18,0.19,0.22), mean=0.136, stddev=0.0215], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.07,0.09,0.15,0.29,0.39 0.49,0.58,0.62,0.73), mean=0.198, stddev=0.134], bias-{mean,stddev}=-0.000468,0.007102, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.02,0.04,0.06,0.07 0.08,0.08,0.08,0.10), mean=0.0407, stddev=0.0235], oderiv-count=45888
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=6821.29, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.09,0.13 0.17,0.21,0.28,0.37,0.42 0.45,0.49,0.53,0.65), mean=0.287, stddev=0.0983], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.09 0.27,0.39,0.54,0.67,0.73 0.78,0.82,0.86,0.97), mean=0.513, stddev=0.192]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000193659, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003589, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,6e-07,1e-06,3e-06 1e-05,0.0002,0.06,0.12,0.16 0.18,0.20,0.21,0.34), mean=0.0673, stddev=0.0621], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.08,0.17,0.19,0.20 0.20,0.21,0.22,0.27), mean=0.156, stddev=0.0505], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-07,2e-07,2e-07 1e-05,0.03,0.08,0.18,0.26 0.36,0.49,0.55,0.66), mean=0.115, stddev=0.117], bias-{mean,stddev}=3.013e-05,0.002176, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000193659, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001021, w_fc-rms=0.001149, w_oc-rms=0.001665, count=5.72e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000956663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.96,-0.70,-0.37 -0.16,0.19,0.50,0.83,1.2 1.5,1.7,1.8,2.6), mean=0.507, stddev=0.533], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.67,-0.40,-0.32,-0.18 -0.07,0.06,0.25,0.27,0.43 0.53,0.62,0.74,1.1), mean=0.2, stddev=0.209] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000956663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-0.92,-0.66,-0.43 -0.18,0.12,0.50,0.73,1.0 1.4,1.6,2.0,2.4), mean=0.463, stddev=0.51], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.33,-0.23,-0.09 0.001,0.11,0.25,0.25,0.32 0.38,0.47,0.52,0.86), mean=0.194, stddev=0.163] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000956663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-7.7,-6.7,-5.0 -3.7,-1.9,0.0003,1.8,3.5 5.2,6.9,7.8,11), mean=0.0206, stddev=2.95], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.1,-5.4,-4.7,-3.4 -2.2,-1.0,0.99,1.4,2.7 4.1,4.9,5.3,6.9), mean=0.49, stddev=2.04] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000956663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-1.0,-0.92,-0.48 -0.25,0.13,0.50,0.83,1.2 1.6,2.1,2.3,2.6), mean=0.498, stddev=0.609], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.62,-0.41,-0.34,-0.21 -0.12,0.04,0.25,0.29,0.41 0.53,0.66,0.71,0.97), mean=0.193, stddev=0.219] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000956663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.1,-6.1,-5.5,-4.1 -3.0,-1.5,-0.004,1.7,2.8 4.0,5.4,6.3,7.8), mean=0.0216, stddev=2.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.6,-2.9,-2.4,-1.6 -0.91,-0.10,0.99,1.3,1.9 2.6,3.5,3.9,4.8), mean=0.674, stddev=1.24] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=9.47e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000703235, count-zeroing-boundaries=1422
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000193659, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00467, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.06,0.07,0.09,0.13,0.14 0.15,0.16,0.16,0.16), mean=0.101, stddev=0.0325], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0002,0.0002,0.0004 0.0006,0.002,0.08,0.10,0.11 0.12,0.13,0.13,0.15), mean=0.0602, stddev=0.0453], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,6e-08,7e-08,8e-08 1e-07,2e-07,1e-05,0.08,0.21 0.28,0.32,0.34,0.38), mean=0.0479, stddev=0.0951], bias-{mean,stddev}=1.59e-05,0.006266, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000193659, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006013, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.11 0.13,0.14,0.16,0.19,0.21 0.23,0.24,0.25,0.28), mean=0.164, stddev=0.035], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.08,0.08,0.13,0.18,0.19 0.20,0.21,0.21,0.26), mean=0.13, stddev=0.0449], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,7e-08,8e-08,1e-07 2e-07,9e-07,0.001,0.15,0.30 0.43,0.55,0.60,0.70), mean=0.0797, stddev=0.148], bias-{mean,stddev}=-2.865e-05,0.007903, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.76e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.18,-0.09,-0.08,-0.04 -0.01,0.02,0.08,0.15,0.19 0.22,0.26,0.28,0.42), mean=0.0831, stddev=0.0803], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.71,-0.31,-0.24,-0.17 -0.03,0.11,0.38,0.70,0.86 1.0,1.2,1.3,1.6), mean=0.407, stddev=0.356]
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=6378.92, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.19,-0.06,-0.03,-0.01 0.008,0.03,0.08,0.13,0.16 0.19,0.22,0.23,0.28), mean=0.0807, stddev=0.0618], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.08,0.14,0.18,0.20 0.22,0.24,0.25,0.28), mean=0.131, stddev=0.0632]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000193659, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00498, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.16 0.17,0.18,0.20,0.21,0.22 0.23,0.24,0.24,0.25), mean=0.196, stddev=0.0206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.08 0.09,0.10,0.11,0.13,0.14 0.15,0.16,0.17,0.20), mean=0.111, stddev=0.0227], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.12,0.23,0.33 0.42,0.50,0.54,0.60), mean=0.157, stddev=0.118], bias-{mean,stddev}=0.0003502,0.006195, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=3.58e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.59,-0.26,-0.18,-0.03 0.06,0.22,0.42,0.65,0.78 0.91,1.0,1.1,1.5), mean=0.43, stddev=0.287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.58,-0.37,-0.22 -0.08,0.10,0.43,0.78,1.0 1.2,1.3,1.4,1.7), mean=0.447, stddev=0.419]
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=5936.55, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.006,0.06,0.09,0.12 0.15,0.20,0.29,0.39,0.44 0.51,0.56,0.58,0.66), mean=0.297, stddev=0.114], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.02 0.25,0.36,0.57,0.73,0.81 0.87,0.97,0.99,1.3), mean=0.547, stddev=0.226]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000193659, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004952, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.04 0.06,0.07,0.09,0.18,0.21 0.23,0.24,0.26,0.35), mean=0.112, stddev=0.0579], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.13 0.15,0.16,0.19,0.28,0.34 0.36,0.37,0.38,0.40), mean=0.215, stddev=0.0706], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,2e-05,4e-05,0.0006 0.03,0.04,0.09,0.23,0.40 0.55,0.68,0.72,0.83), mean=0.153, stddev=0.167], bias-{mean,stddev}=0.0001031,0.001605, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000193659, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001934, w_fc-rms=0.003264, w_oc-rms=0.004065, count=4.76e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00105219, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.5,-3.5,-3.1,-2.0 -1.4,-0.80,0.37,1.5,2.3 2.7,3.7,4.2,5.3), mean=0.378, stddev=1.49], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-0.66,-0.57,-0.40 -0.26,-0.12,0.11,0.41,0.53 0.66,0.76,0.82,1.2), mean=0.124, stddev=0.336] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00105219, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.4,-3.1,-2.5,-2.1 -1.5,-0.70,0.59,2.2,3.2 3.8,4.5,4.8,5.5), mean=0.723, stddev=1.74], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-1.1,-0.91,-0.69 -0.48,-0.27,0.09,0.45,0.61 0.76,0.94,1.1,1.3), mean=0.0838, stddev=0.435] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.329395, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-33,-20,-19,-13 -10,-5.9,0.12,6.7,11 13,17,20,23), mean=0.224, stddev=8.01], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.1,-8.6,-7.3,-5.4 -4.4,-3.2,-0.13,2.7,4.4 5.3,7.4,8.8,12), mean=-0.124, stddev=3.53] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.637985, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.3,-3.0,-2.5,-1.8 -1.2,-0.62,0.53,1.8,2.5 3.2,4.0,4.5,10), mean=0.59, stddev=1.58], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.79,-0.73,-0.56 -0.38,-0.18,0.21,0.62,0.80 0.90,1.1,1.2,1.7), mean=0.212, stddev=0.466] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-1.2823, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-29,-17,-15,-11 -8.5,-4.6,0.10,5.1,8.9 11,13,16,19), mean=0.0917, stddev=6.65], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.1,-6.4,-5.9,-4.3 -3.0,-1.9,0.31,2.9,4.2 5.2,6.6,7.2,12), mean=0.433, stddev=2.95] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=7.94e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00083682, count-zeroing-boundaries=1195
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000193659, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006161, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.10,0.18,0.19 0.20,0.20,0.20,0.21), mean=0.132, stddev=0.0476], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.07,0.08,0.10,0.11,0.12 0.13,0.14,0.14,0.15), mean=0.0968, stddev=0.0224], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,5e-06,6e-06,9e-06 2e-05,9e-05,0.03,0.18,0.26 0.32,0.37,0.40,0.43), mean=0.0866, stddev=0.111], bias-{mean,stddev}=0.0002715,0.003911, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000193659, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006699, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.07,0.10,0.13,0.15 0.17,0.20,0.21,0.42), mean=0.101, stddev=0.0379], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.20,0.21 0.22,0.23,0.30,0.37,0.38 0.40,0.41,0.41,0.42), mean=0.3, stddev=0.067], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,5e-06,6e-06,1e-05 2e-05,8e-05,0.02,0.45,0.61 0.71,0.77,0.80,0.86), mean=0.173, stddev=0.254], bias-{mean,stddev}=7.879e-11,0.001326, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.03,0.03 0.04,0.04,0.05,0.45), mean=0.0149, stddev=0.0199], oderiv-count=63360

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.57943 tdnn2.affine:7.61553 lstm1.W_all:6.31475 lstm1.lstm_nonlin:0.120349 lstm1.W_rp:2.60761 tdnn3.affine:4.71573 tdnn4.affine:5.45018 lstm2.W_all:4.17486 lstm2.lstm_nonlin:0.0516641 lstm2.W_rp:1.72012 tdnn5.affine:3.83368 tdnn6.affine:4.48768 lstm3.W_all:5.75835 lstm3.lstm_nonlin:0.126791 lstm3.W_rp:2.2663 output.affine:4.95488 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.8872 tdnn2.affine:10.9869 lstm1.W_all:19.559 lstm1.lstm_nonlin:1.42613 lstm1.W_rp:11.1807 tdnn3.affine:7.86369 tdnn4.affine:8.15217 lstm2.W_all:15.459 lstm2.lstm_nonlin:0.643534 lstm2.W_rp:10.4442 tdnn5.affine:7.26011 tdnn6.affine:7.75545 lstm3.W_all:22.5467 lstm3.lstm_nonlin:1.91487 lstm3.W_rp:26.0479 output.affine:29.3766 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.632617 tdnn2.affine:0.689474 lstm1.W_all:0.322777 lstm1.lstm_nonlin:0.0852969 lstm1.W_rp:0.233222 tdnn3.affine:0.599433 tdnn4.affine:0.669589 lstm2.W_all:0.269376 lstm2.lstm_nonlin:0.0792485 lstm2.W_rp:0.164303 tdnn5.affine:0.525651 tdnn6.affine:0.577505 lstm3.W_all:0.25478 lstm3.lstm_nonlin:0.0667038 lstm3.W_rp:0.087024 output.affine:0.168731 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:56:24 KST 2020, elapsed time 1 seconds
