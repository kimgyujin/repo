# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/389.mdl exp/nnet3/tdnn_lstm1c_sp/390.mdl 
# Started at Thu Jul 30 12:35:40 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/389.mdl exp/nnet3/tdnn_lstm1c_sp/390.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00011031, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008267, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.004,0.007,0.15,0.18,0.20 0.21,0.23,0.25,0.28), mean=0.121, stddev=0.0761], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.06,0.17,0.23,0.27 0.35,0.39,0.40,0.48), mean=0.164, stddev=0.0927], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.008,0.01 0.01,0.02,0.09,0.23,0.33 0.41,0.49,0.52,0.59), mean=0.136, stddev=0.13], bias-{mean,stddev}=0.0006763,0.01078, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2231.61, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.41,-0.20,-0.17,-0.09 -0.05,-0.02,0.002,0.12,0.22 0.29,0.38,0.42,0.65), mean=0.0461, stddev=0.121], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.07,0.12 0.15,0.17,0.20,0.25), mean=0.0314, stddev=0.0535]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00011031, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003414, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.12,0.13,0.14,0.15 0.16,0.16,0.16,0.18), mean=0.134, stddev=0.0117], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0009,0.001 0.002,0.004,0.08,0.10,0.11 0.12,0.12,0.13,0.15), mean=0.0659, stddev=0.0414], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.03,0.07,0.16,0.23 0.30,0.35,0.38,0.44), mean=0.102, stddev=0.0881], bias-{mean,stddev}=-0.0004416,0.005487, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.13,0.15 0.18,0.20,0.26,0.32,0.36 0.39,0.42,0.46,0.52), mean=0.265, stddev=0.0727], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.29,0.32 0.35,0.38,0.44,0.51,0.54 0.57,0.59,0.61,0.69), mean=0.447, stddev=0.0747]
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2190.65, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.52,-0.17,-0.12,-0.06 0.009,0.10,0.24,0.43,0.56 0.65,0.75,0.86,1.0), mean=0.268, stddev=0.215], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.46,0.72,0.83 0.96,1.0,1.1,1.4), mean=0.431, stddev=0.323]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00011031, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002003, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-09,5e-08,1e-07,8e-07 2e-05,0.02,0.04,0.07,0.08 0.09,0.10,0.11,0.12), mean=0.0426, stddev=0.0281], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.04,0.09,0.11,0.12 0.12,0.13,0.14,0.16), mean=0.0855, stddev=0.0322], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,7e-08,9e-08 2e-07,0.02,0.05,0.10,0.15 0.21,0.26,0.29,0.35), mean=0.0651, stddev=0.064], bias-{mean,stddev}=1.098e-05,0.0006676, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00011031, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0008159, w_fc-rms=0.0008449, w_oc-rms=0.001915, count=349, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00458475, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-18,-13,-9.8,-7.8 -5.1,-2.7,0.50,3.9,6.4 7.9,11,12,16), mean=0.575, stddev=4.63], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-10,-6.0,-5.0,-3.7 -3.0,-1.6,0.25,1.6,2.9 4.0,5.5,6.5,11), mean=0.0989, stddev=2.41] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00458475, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-14,-9.1,-7.4,-4.7 -3.4,-1.3,0.50,3.9,5.9 7.4,9.0,11,17), mean=1.17, stddev=3.77], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.8,-5.8,-5.5,-3.0 -2.0,-0.90,0.25,1.1,1.9 2.9,4.1,4.5,8.6), mean=0.0901, stddev=1.85] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.026273, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-111,-70,-62,-50 -36,-21,-0.001,18,34 49,63,70,104), mean=-0.716, stddev=28.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-81,-51,-45,-34 -28,-14,1.0,18,31 40,51,58,97), mean=1.59, stddev=22.7] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00458475, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-25,-12,-11,-7.6 -5.4,-2.4,0.50,4.6,7.2 11,15,17,20), mean=1.09, stddev=5.42], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-7.7,-6.5,-5.2 -3.5,-1.5,0.25,2.2,3.9 5.6,6.9,7.9,13), mean=0.283, stddev=3] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00458475, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-78,-45,-42,-32 -25,-14,0.02,12,20 30,39,47,81), mean=-0.344, stddev=18.4], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-30,-18,-16,-11 -7.6,-3.4,1.3,9.4,15 20,24,27,55), mean=2.96, stddev=9.44] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.95e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=-0.000512295, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00846024, count-zeroing-boundaries=295
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.158678
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00011031, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002799, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.06,0.08,0.08 0.09,0.09,0.10,0.10), mean=0.0606, stddev=0.02], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,6e-05,8e-05,0.0001 0.0006,0.03,0.05,0.06,0.06 0.07,0.07,0.07,0.09), mean=0.0405, stddev=0.02], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.07,0.12 0.16,0.19,0.21,0.24), mean=0.0289, stddev=0.0569], bias-{mean,stddev}=8.97e-05,0.002408, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00011031, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00336, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.06,0.07,0.07 0.08,0.08,0.09,0.10,0.11 0.12,0.12,0.13,0.15), mean=0.0926, stddev=0.015], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.05,0.07,0.10,0.10 0.11,0.11,0.12,0.12), mean=0.0724, stddev=0.0251], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-09,3e-08,3e-08,4e-08 5e-08,8e-08,1e-05,0.11,0.18 0.23,0.28,0.30,0.34), mean=0.0484, stddev=0.0804], bias-{mean,stddev}=-2.446e-05,0.002189, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2067.77, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.27,-0.16,-0.15,-0.10 -0.06,-0.02,0.07,0.16,0.20 0.24,0.27,0.30,0.37), mean=0.0678, stddev=0.104], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.08,0.15,0.18 0.21,0.23,0.24,0.29), mean=0.0795, stddev=0.0768]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00011031, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002445, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.09,0.10,0.10,0.11 0.11,0.11,0.11,0.12), mean=0.0963, stddev=0.00681], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.04,0.04,0.04 0.05,0.05,0.05,0.06,0.07 0.07,0.07,0.07,0.08), mean=0.0552, stddev=0.00774], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.04,0.06,0.12,0.16 0.20,0.23,0.25,0.28), mean=0.0801, stddev=0.054], bias-{mean,stddev}=-0.0001633,0.002591, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.36e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.18 0.19,0.21,0.25,0.29,0.31 0.33,0.35,0.36,0.42), mean=0.252, stddev=0.0451], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.30,0.31,0.33 0.35,0.38,0.42,0.46,0.48 0.51,0.52,0.54,0.57), mean=0.42, stddev=0.0525]
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1944.89, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.15,-0.07,-0.04,0.02 0.06,0.12,0.22,0.36,0.43 0.49,0.57,0.61,0.88), mean=0.237, stddev=0.149], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.45,0.64,0.72 0.81,0.90,0.97,1.1), mean=0.391, stddev=0.283]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00011031, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00136, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-07,5e-07,1e-06 5e-06,0.0001,0.03,0.05,0.06 0.07,0.08,0.08,0.10), mean=0.0259, stddev=0.023], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.03,0.06,0.07,0.08 0.08,0.09,0.09,0.09), mean=0.0584, stddev=0.0208], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,6e-08,8e-08 2e-05,0.01,0.03,0.07,0.10 0.14,0.19,0.20,0.24), mean=0.0428, stddev=0.0448], bias-{mean,stddev}=1.542e-05,0.0006682, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00011031, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0005354, w_fc-rms=0.0005249, w_oc-rms=0.0009009, count=149, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00992995, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-27,-20,-16,-11 -7.1,-3.1,0.50,4.7,8.2 11,16,19,33), mean=0.45, stddev=6.77], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-13,-9.9,-9.0,-6.7 -4.6,-2.1,0.25,2.0,3.9 5.6,7.5,9.5,13), mean=-0.0242, stddev=3.52] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00992995, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-28,-15,-12,-6.8 -3.6,-0.002,0.52,6.1,10 14,17,18,28), mean=2.25, stddev=6.31], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-14,-9.1,-8.0,-5.8 -3.8,-1.5,0.25,1.6,3.1 4.6,6.3,9.0,11), mean=-0.0428, stddev=3.06] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00992995, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-169,-108,-88,-66 -50,-21,-0.05,18,43 62,85,108,138), mean=-1.64, stddev=38.6], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-126,-85,-75,-58 -39,-19,0.85,17,39 60,77,81,125), mean=-0.107, stddev=32.4] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00992995, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-30,-20,-17,-14 -8.1,-3.2,0.50,5.4,11 15,19,22,44), mean=0.957, stddev=7.98], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-16,-9.3,-7.6,-5.8 -4.4,-2.1,0.25,3.1,6.3 8.3,11,13,17), mean=0.665, stddev=4.2] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00992995, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-131,-78,-65,-47 -34,-17,-0.04,14,31 45,57,75,120), mean=-0.549, stddev=27.4], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-41,-32,-26,-17 -10,-3.3,0.99,13,21 29,36,43,57), mean=3.68, stddev=13.5] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.57e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.0108225, count-zeroing-boundaries=231
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.158678
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00011031, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001884, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.05,0.06 0.06,0.06,0.06,0.07), mean=0.0414, stddev=0.0115], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0001,0.0002 0.0004,0.001,0.03,0.04,0.04 0.05,0.05,0.05,0.06), mean=0.0247, stddev=0.0177], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,1e-06,0.05,0.09 0.10,0.12,0.13,0.14), mean=0.0217, stddev=0.0371], bias-{mean,stddev}=-0.0001027,0.002038, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00011031, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002772, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.06,0.07,0.08,0.08,0.09 0.10,0.11,0.11,0.12), mean=0.0765, stddev=0.012], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.06,0.08,0.08 0.09,0.09,0.09,0.10), mean=0.0607, stddev=0.0175], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,4e-08 6e-08,1e-07,0.001,0.09,0.14 0.19,0.23,0.25,0.30), mean=0.0426, stddev=0.0647], bias-{mean,stddev}=5.096e-06,0.001505, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1822.01, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.15,-0.11,-0.09,-0.06 -0.04,-0.009,0.06,0.14,0.19 0.22,0.27,0.31,0.44), mean=0.0667, stddev=0.0894], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.07,0.15,0.17 0.19,0.21,0.22,0.27), mean=0.0756, stddev=0.0703]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00011031, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002093, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.07,0.08,0.08,0.09,0.09 0.10,0.10,0.10,0.11), mean=0.0821, stddev=0.00933], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.04,0.05,0.05,0.06 0.06,0.06,0.06,0.07), mean=0.0473, stddev=0.00619], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.03,0.05,0.10,0.14 0.17,0.21,0.22,0.24), mean=0.0672, stddev=0.0482], bias-{mean,stddev}=0.0002486,0.002288, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.59e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.02,0.06,0.09,0.13 0.17,0.21,0.26,0.33,0.36 0.38,0.41,0.43,0.51), mean=0.263, stddev=0.0774], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.13,0.17,0.22 0.27,0.32,0.42,0.49,0.54 0.57,0.65,0.68,0.79), mean=0.409, stddev=0.112]
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1699.13, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.29,-0.12,-0.06,-0.003 0.05,0.12,0.27,0.42,0.52 0.58,0.68,0.71,1.0), mean=0.277, stddev=0.184], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.53,0.77,0.92 1.0,1.2,1.3,2.0), mean=0.487, stddev=0.356]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00011031, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001678, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.009,0.01 0.01,0.02,0.03,0.06,0.08 0.09,0.09,0.10,0.11), mean=0.0352, stddev=0.0243], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.05,0.07,0.09,0.11 0.12,0.13,0.13,0.14), mean=0.0729, stddev=0.0233], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,8e-06 0.008,0.01,0.03,0.08,0.13 0.18,0.24,0.26,0.30), mean=0.0499, stddev=0.058], bias-{mean,stddev}=-1.598e-05,0.00043, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00011031, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0007584, w_fc-rms=0.0008204, w_oc-rms=0.001896, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.026262, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-146,-110,-87,-64 -46,-29,-1.0,29,47 68,90,105,216), mean=0.00406, stddev=42], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-59,-34,-27,-20 -16,-10,0.33,10,17 22,26,34,57), mean=0.407, stddev=13.3] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.026262, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-120,-107,-96,-81 -63,-48,-13,20,41 59,78,93,123), mean=-11.8, stddev=41.7], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-42,-27,-22,-18 -13,-6.5,4.6,17,23 27,31,37,47), mean=4.91, stddev=13.9] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-94.8409, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1031,-795,-666,-569 -363,-213,-6.8,221,394 567,667,787,1132), mean=4.74, stddev=313], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-526,-465,-335,-250 -186,-108,-1.2,105,165 229,277,326,524), mean=-5.02, stddev=147] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.026262, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-194,-141,-131,-114 -78,-50,-2.0,49,80 95,127,133,175), mean=-2.28, stddev=60.9], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-61,-44,-38,-29 -21,-13,1.5,15,22 32,38,42,77), mean=0.917, stddev=18.1] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-2.63216, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-931,-614,-492,-405 -290,-164,-0.11,170,300 401,507,590,855), mean=1.91, stddev=239], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-518,-242,-215,-171 -129,-91,-21,42,79 114,149,164,233), mean=-24.7, stddev=86] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.18e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=-0.00276243, count-zeroing-boundaries=181
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.158678
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00011031, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001966, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.06,0.06 0.07,0.07,0.07,0.07), mean=0.0408, stddev=0.0187], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.04,0.04 0.04,0.05,0.05,0.07), mean=0.0309, stddev=0.00711], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,2e-07 3e-07,6e-07,0.005,0.05,0.08 0.10,0.12,0.13,0.16), mean=0.0259, stddev=0.0366], bias-{mean,stddev}=0.0002281,0.009468, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00011031, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002503, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.02,0.02 0.02,0.03,0.04,0.05,0.06 0.06,0.07,0.08,0.18), mean=0.0377, stddev=0.0145], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.06,0.07,0.09,0.15,0.15 0.16,0.16,0.16,0.17), mean=0.108, stddev=0.0395], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,3e-07,3e-07 3e-07,6e-07,0.002,0.17,0.22 0.26,0.29,0.30,0.33), mean=0.0643, stddev=0.0951], bias-{mean,stddev}=5.666e-11,0.0006072, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.03,0.03 0.04,0.04,0.05,0.37), mean=0.0162, stddev=0.0172], oderiv-count=53120

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.27442 tdnn2.affine:3.07769 lstm1.W_all:2.32883 lstm1.lstm_nonlin:0.0512311 lstm1.W_rp:1.02974 tdnn3.affine:2.14041 tdnn4.affine:2.20331 lstm2.W_all:1.58147 lstm2.lstm_nonlin:0.0267269 lstm2.W_rp:0.693421 tdnn5.affine:1.76599 tdnn6.affine:1.88562 lstm3.W_all:1.9516 lstm3.lstm_nonlin:0.050177 lstm3.W_rp:0.73871 output.affine:1.8515 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.89 tdnn2.affine:10.5388 lstm1.W_all:20.4868 lstm1.lstm_nonlin:2.08 lstm1.W_rp:15.1131 tdnn3.affine:8.02096 tdnn4.affine:7.47948 lstm2.W_all:16.7553 lstm2.lstm_nonlin:1.43305 lstm2.W_rp:14.1814 tdnn5.affine:7.54611 tdnn6.affine:7.47452 lstm3.W_all:24.1365 lstm3.lstm_nonlin:3.13902 lstm3.W_rp:34.0852 output.affine:31.33 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.253479 tdnn2.affine:0.291309 lstm1.W_all:0.1136 lstm1.lstm_nonlin:0.0244889 lstm1.W_rp:0.0681053 tdnn3.affine:0.266488 tdnn4.affine:0.294266 lstm2.W_all:0.0943868 lstm2.lstm_nonlin:0.0185968 lstm2.W_rp:0.0488484 tdnn5.affine:0.233621 tdnn6.affine:0.251856 lstm3.W_all:0.0808549 lstm3.lstm_nonlin:0.0159291 lstm3.W_rp:0.0216694 output.affine:0.0590764 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:35:41 KST 2020, elapsed time 1 seconds
