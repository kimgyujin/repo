# nnet3-info exp/nnet3/tdnn_lstm1c_sp/247.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/246.mdl exp/nnet3/tdnn_lstm1c_sp/247.mdl 
# Started at Thu Jul 30 11:38:43 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/247.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000271518, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03493, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.02 0.04,0.13,0.61,0.74,0.83 0.92,1.0,1.0,1.3), mean=0.532, stddev=0.288], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.16 0.18,0.23,0.65,0.93,1.3 1.6,1.7,1.8,1.9), mean=0.671, stddev=0.429], bias-{mean,stddev}=-0.002002,0.06747, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.12e+06, self-repaired-proportion=0.204005, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,6e-06,9e-06,3e-05 9e-05,0.0007,0.07,0.10,0.12 0.14,0.15,0.17,0.23), mean=0.0638, stddev=0.0475], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0008,0.003,0.008 0.02,0.06,0.45,0.61,0.70 0.78,0.84,0.86,0.99), mean=0.397, stddev=0.253], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.02,0.03 0.06,0.17,0.27,0.36,0.41 0.47,0.57,0.66,1.2), mean=0.268, stddev=0.146], oderiv-count=1.16166e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38447.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,5e-06,6e-06,3e-05 0.0001,0.0008,0.07,0.10,0.12 0.13,0.15,0.17,0.22), mean=0.0629, stddev=0.0468], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.0001,0.0001,0.0003 0.0009,0.005,0.11,0.13,0.15 0.16,0.17,0.18,0.19), mean=0.0903, stddev=0.0554]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000271518, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01325, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.41,0.43 0.44,0.46,0.51,0.57,0.61 0.65,0.69,0.70,0.79), mean=0.519, stddev=0.0677], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.008,0.01 0.02,0.08,0.31,0.36,0.40 0.43,0.46,0.49,0.83), mean=0.268, stddev=0.14], bias-{mean,stddev}=-0.01701,0.04097, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.28,0.30 0.31,0.33,0.36,0.40,0.43 0.46,0.50,0.52,0.57), mean=0.369, stddev=0.0486], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.38,0.39,0.40 0.41,0.43,0.45,0.48,0.49 0.51,0.52,0.53,0.55), mean=0.453, stddev=0.0329], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.05,0.06), mean=0.037, stddev=0.00697], oderiv-count=1.23613e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37640.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.29,0.30 0.32,0.34,0.37,0.41,0.44 0.47,0.51,0.52,0.61), mean=0.375, stddev=0.051], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.53,0.54,0.57 0.58,0.61,0.66,0.73,0.77 0.81,0.84,0.85,0.93), mean=0.671, stddev=0.0724]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000271518, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01771, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,7e-06,2e-05,0.0001 0.002,0.15,0.39,0.60,0.70 0.76,0.83,0.88,1.1), mean=0.382, stddev=0.24], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.35,0.41 0.47,0.70,0.82,0.91,0.97 1.0,1.1,1.2,1.2), mean=0.788, stddev=0.177], bias-{mean,stddev}=-0.0003546,0.02676, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000271518, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04067, w_fc-rms=0.02779, w_oc-rms=0.03874, count=1.48e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631817, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.44,0.45,0.47,0.50,0.53 0.64,0.78,0.79,0.84), mean=0.491, stddev=0.0695], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.19 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0216] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631817, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.41,0.42,0.43 0.45,0.46,0.49,0.51,0.55 0.62,0.73,0.76,0.81), mean=0.5, stddev=0.0614], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.19 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0193] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0387648, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.90,-0.84,-0.53 -0.29,-0.15,0.002,0.19,0.31 0.49,0.82,0.87,0.91), mean=0.0123, stddev=0.297], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.18,0.27 0.36,0.43,0.56,0.79,1.0 1.0,1.0,1.0,1.0), mean=0.599, stddev=0.221] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631817, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.40 0.41,0.42,0.45,0.50,0.50 0.51,0.54,0.56,0.61), mean=0.454, stddev=0.0373], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.219, stddev=0.0211] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00631817, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.78,-0.66,-0.35 -0.20,-0.09,0.002,0.13,0.22 0.33,0.63,0.76,0.83), mean=0.00927, stddev=0.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.31,0.35,0.54 0.72,0.80,0.88,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.848, stddev=0.138] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=7.60131e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.01424e-05, count-zeroing-boundaries=295788
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.144353
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000271518, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03799, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.27,0.30 0.33,0.39,0.77,1.2,1.2 1.3,1.4,1.4,1.4), mean=0.78, stddev=0.378], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.002,0.003 0.01,0.27,0.51,0.70,0.82 1.1,1.5,1.7,1.9), mean=0.512, stddev=0.336], bias-{mean,stddev}=0.01311,0.2722, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000271518, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01377, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.21,0.21,0.24 0.27,0.30,0.37,0.45,0.50 0.54,0.56,0.58,0.77), mean=0.374, stddev=0.0899], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.12,0.14,0.28,0.42,0.45 0.48,0.50,0.52,0.55), mean=0.282, stddev=0.138], bias-{mean,stddev}=0.004007,0.01877, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.02e+05, self-repaired-proportion=0.00459057, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.04,0.04,0.06 0.08,0.09,0.12,0.15,0.17 0.18,0.20,0.21,0.24), mean=0.121, stddev=0.0363], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.18,0.19,0.25 0.32,0.39,0.49,0.58,0.63 0.67,0.69,0.70,0.75), mean=0.481, stddev=0.122], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.07,0.07,0.09,0.10,0.11 0.12,0.14,0.16,0.27), mean=0.0899, stddev=0.0217], oderiv-count=1.20026e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35219.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.04,0.05,0.06 0.08,0.09,0.12,0.15,0.17 0.18,0.20,0.22,0.25), mean=0.123, stddev=0.037], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.13,0.14,0.15 0.16,0.17,0.19,0.22,0.24 0.25,0.26,0.27,0.31), mean=0.197, stddev=0.0319]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000271518, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009876, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.31,0.32 0.34,0.35,0.38,0.42,0.45 0.47,0.50,0.51,0.63), mean=0.387, stddev=0.0466], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.13,0.14,0.16 0.17,0.18,0.22,0.26,0.28 0.30,0.33,0.34,0.44), mean=0.22, stddev=0.0462], bias-{mean,stddev}=-0.02065,0.01922, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.72e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.25,0.26,0.27 0.28,0.30,0.33,0.36,0.38 0.39,0.41,0.42,0.49), mean=0.33, stddev=0.0389], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.40,0.41,0.44,0.46,0.47 0.49,0.49,0.50,0.52), mean=0.436, stddev=0.03], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0299, stddev=0.00232], oderiv-count=1.00512e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32798.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.27 0.28,0.30,0.33,0.37,0.39 0.40,0.41,0.42,0.51), mean=0.335, stddev=0.0391], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.53,0.54,0.55 0.57,0.58,0.63,0.69,0.73 0.76,0.79,0.83,1.0), mean=0.641, stddev=0.0682]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000271518, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.015, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,6e-07,1e-06,3e-06 1e-05,0.0002,0.32,0.55,0.62 0.66,0.72,0.74,1.2), mean=0.29, stddev=0.249], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.30,0.32,0.39 0.50,0.61,0.68,0.75,0.80 0.85,0.92,1.0,1.7), mean=0.669, stddev=0.14], bias-{mean,stddev}=-0.002405,0.0573, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000271518, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01754, w_fc-rms=0.01029, w_oc-rms=0.02287, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637327, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.44,0.45,0.50,0.51,0.57 0.63,0.68,0.69,0.81), mean=0.497, stddev=0.0605], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0183] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637327, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.39,0.41 0.42,0.45,0.50,0.50,0.52 0.57,0.60,0.64,0.76), mean=0.486, stddev=0.0489], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.016] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0199364, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.80,-0.68,-0.46 -0.32,-0.16,0.0004,0.16,0.34 0.49,0.77,0.81,0.90), mean=0.00676, stddev=0.283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.24,0.37 0.44,0.51,0.60,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.701, stddev=0.241] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637327, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.40 0.41,0.43,0.49,0.50,0.51 0.54,0.57,0.60,0.73), mean=0.475, stddev=0.0455], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0193] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00637327, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.55,-0.47,-0.31 -0.20,-0.10,3e-05,0.11,0.23 0.37,0.56,0.63,0.74), mean=0.00648, stddev=0.201], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.45,0.54,0.68 0.76,0.82,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.893, stddev=0.116] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.83342e-06, count-zeroing-boundaries=260863
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.144353
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000271518, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03648, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.43,0.48 0.51,0.54,0.77,1.0,1.1 1.2,1.2,1.2,1.3), mean=0.794, stddev=0.248], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0007,0.0009 0.002,0.005,0.54,0.77,0.89 1.0,1.2,1.3,1.5), mean=0.455, stddev=0.373], bias-{mean,stddev}=-0.0008333,0.1988, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000271518, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01298, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.23,0.24,0.25 0.27,0.29,0.34,0.41,0.47 0.51,0.56,0.58,0.65), mean=0.354, stddev=0.0783], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.17,0.19,0.27,0.38,0.42 0.44,0.45,0.46,0.51), mean=0.28, stddev=0.0964], bias-{mean,stddev}=0.001918,0.009571, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.99e+05, self-repaired-proportion=0.00117788, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.03,0.03,0.04 0.05,0.06,0.09,0.12,0.13 0.14,0.15,0.16,0.20), mean=0.0911, stddev=0.0298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.17,0.18,0.22 0.28,0.34,0.46,0.56,0.59 0.62,0.64,0.66,0.70), mean=0.45, stddev=0.12], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.09,0.11,0.12 0.14,0.16,0.17,0.19), mean=0.0983, stddev=0.0194], oderiv-count=991232
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30378.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.03,0.03,0.04 0.05,0.07,0.09,0.12,0.13 0.14,0.15,0.17,0.20), mean=0.0933, stddev=0.0304], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.11,0.12 0.12,0.14,0.16,0.18,0.19 0.19,0.21,0.21,0.23), mean=0.156, stddev=0.0246]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000271518, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009747, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.22,0.28 0.30,0.33,0.38,0.43,0.46 0.49,0.50,0.51,0.60), mean=0.38, stddev=0.0642], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.15 0.16,0.17,0.20,0.25,0.29 0.32,0.36,0.39,0.48), mean=0.216, stddev=0.0524], bias-{mean,stddev}=-0.02079,0.02448, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.69e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.23,0.24,0.26 0.28,0.30,0.34,0.37,0.38 0.39,0.42,0.44,0.50), mean=0.334, stddev=0.0437], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.37 0.38,0.39,0.42,0.44,0.45 0.47,0.48,0.48,0.51), mean=0.417, stddev=0.0299], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0249, stddev=0.002], oderiv-count=946880
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27957.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.25,0.26 0.28,0.30,0.34,0.37,0.39 0.40,0.43,0.45,0.61), mean=0.339, stddev=0.0462], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.42,0.51 0.55,0.61,0.68,0.75,0.79 0.83,0.88,0.90,1.1), mean=0.675, stddev=0.101]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000271518, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0211, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.27,0.29 0.31,0.36,0.48,0.69,0.77 0.82,0.86,0.87,1.4), mean=0.512, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.61,0.64,0.70 0.73,0.76,0.83,1.1,1.3 1.4,1.6,1.7,2.1), mean=0.93, stddev=0.248], bias-{mean,stddev}=0.02212,0.02402, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000271518, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06286, w_fc-rms=0.04694, w_oc-rms=0.04667, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643981, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.59,0.60 0.62,0.64,0.69,0.73,0.75 0.78,0.80,0.82,0.84), mean=0.688, stddev=0.0519], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.15 0.16,0.17,0.18,0.20,0.20 0.20,0.21,0.21,0.22), mean=0.181, stddev=0.0175] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643981, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.47,0.50,0.53 0.55,0.58,0.62,0.67,0.72 0.76,0.82,0.83,0.86), mean=0.63, stddev=0.0691], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.15 0.16,0.18,0.19,0.20,0.21 0.21,0.21,0.22,0.22), mean=0.189, stddev=0.0196] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0201252, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.78,-0.73,-0.54 -0.39,-0.24,-0.01,0.24,0.36 0.54,0.75,0.77,0.90), mean=-0.0042, stddev=0.311], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.22,0.25 0.30,0.36,0.43,0.47,0.48 0.50,0.51,0.53,0.54), mean=0.41, stddev=0.0721] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643981, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.52,0.53,0.55 0.58,0.59,0.63,0.66,0.69 0.71,0.74,0.75,0.83), mean=0.631, stddev=0.0463], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.16,0.17,0.19,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.182, stddev=0.0156] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00643981, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.73,-0.68,-0.52 -0.32,-0.20,-0.01,0.21,0.29 0.48,0.68,0.71,0.85), mean=-0.00411, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.30,0.33,0.40 0.47,0.55,0.64,0.68,0.70 0.71,0.73,0.74,0.75), mean=0.613, stddev=0.0958] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.25404e-06, count-zeroing-boundaries=221824
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.144353
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000271518, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08016, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.1,1.1 1.1,1.2,1.6,2.3,2.4 2.4,2.5,2.6,2.7), mean=1.75, stddev=0.517], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.75,0.96,1.0 1.1,1.1,1.2,1.4,1.6 1.7,1.8,1.8,2.0), mean=1.27, stddev=0.213], bias-{mean,stddev}=-0.03904,0.4503, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000271518, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04204, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.56,0.57,0.59 0.60,0.62,0.66,0.71,0.74 0.78,0.83,0.90,2.3), mean=0.672, stddev=0.09], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.3,1.8,2.4,2.5 2.5,2.6,2.6,2.7), mean=1.86, stddev=0.5], bias-{mean,stddev}=5.404e-09,0.02814, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0169, stddev=0.0137], oderiv-count=578240
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/246.mdl exp/nnet3/tdnn_lstm1c_sp/247.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.74957 tdnn2.affine:5.63404 lstm1.W_all:4.78746 lstm1.lstm_nonlin:0.107821 lstm1.W_rp:1.89015 tdnn3.affine:3.63125 tdnn4.affine:4.1973 lstm2.W_all:3.37676 lstm2.lstm_nonlin:0.056007 lstm2.W_rp:1.37793 tdnn5.affine:2.93175 tdnn6.affine:3.46889 lstm3.W_all:4.27297 lstm3.lstm_nonlin:0.107131 lstm3.W_rp:1.76209 output.affine:4.09159 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.8829 tdnn2.affine:11.9752 lstm1.W_all:20.6294 lstm1.lstm_nonlin:1.42903 lstm1.W_rp:14.6443 tdnn3.affine:8.78278 tdnn4.affine:8.91826 lstm2.W_all:17.6308 lstm2.lstm_nonlin:0.697854 lstm2.W_rp:13.7922 tdnn5.affine:8.26885 tdnn6.affine:8.80906 lstm3.W_all:24.5755 lstm3.lstm_nonlin:2.08159 lstm3.W_rp:30.3608 output.affine:31.1202 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.417637 tdnn2.affine:0.471269 lstm1.W_all:0.235242 lstm1.lstm_nonlin:0.0771835 lstm1.W_rp:0.130933 tdnn3.affine:0.411866 tdnn4.affine:0.468766 lstm2.W_all:0.193418 lstm2.lstm_nonlin:0.081987 lstm2.W_rp:0.10125 tdnn5.affine:0.35249 tdnn6.affine:0.392307 lstm3.W_all:0.175863 lstm3.lstm_nonlin:0.0527095 lstm3.W_rp:0.0581939 output.affine:0.132989 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:38:43 KST 2020, elapsed time 0 seconds
