# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/9.mdl exp/nnet3/tdnn_lstm1c_sp/10.mdl 
# Started at Thu Jul 30 10:05:06 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/9.mdl exp/nnet3/tdnn_lstm1c_sp/10.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000292484, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02288, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.004 0.007,0.02,0.43,0.51,0.55 0.58,0.63,0.68,0.84), mean=0.332, stddev=0.216], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.14,0.17,0.47,0.63,0.78 0.95,1.1,1.1,1.2), mean=0.455, stddev=0.255], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.07,0.27,0.67,0.92 1.1,1.3,1.4,1.5), mean=0.383, stddev=0.355], bias-{mean,stddev}=0.001533,0.03024, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,1.2,1.9 2.4,2.9,3.5,7.1), mean=0.521, stddev=0.94], oderiv-count=11264
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-4173.8, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000292484, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01048, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.33,0.35 0.37,0.38,0.41,0.44,0.46 0.47,0.48,0.49,0.52), mean=0.413, stddev=0.0357], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.004,0.01,0.27,0.31,0.33 0.34,0.35,0.36,0.39), mean=0.201, stddev=0.129], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.10,0.24,0.52,0.71 0.87,1.0,1.1,1.3), mean=0.322, stddev=0.26], bias-{mean,stddev}=-0.0008169,0.01736, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.82e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.42,-0.31,-0.24,-0.13 -0.04,0.06,0.27,0.48,0.62 0.74,0.88,0.95,1.3), mean=0.281, stddev=0.266], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.24,-0.08,-0.02,0.06 0.14,0.27,0.49,0.67,0.78 0.88,0.99,1.1,1.2), mean=0.479, stddev=0.244], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.07,0.08 0.09,0.09,0.10,0.12), mean=0.0356, stddev=0.0324], oderiv-count=53888
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-4108.26, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000292484, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007148, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.07,0.08,0.14,0.23,0.29 0.34,0.38,0.41,0.52), mean=0.16, stddev=0.0864], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.18,0.35,0.38,0.39 0.40,0.42,0.42,0.45), mean=0.313, stddev=0.0927], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.09,0.19,0.38,0.52 0.68,0.91,0.99,1.2), mean=0.253, stddev=0.205], bias-{mean,stddev}=0.0002143,0.03696, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000292484, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0386, w_fc-rms=0.03698, w_oc-rms=0.03702, count=8.06e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000862666, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.0,-3.1,-2.9,-2.3 -1.9,-1.3,0.48,2.3,3.2 4.2,4.9,5.4,7.3), mean=0.61, stddev=1.99], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.0,-2.0,-1.3,-0.95 -0.72,-0.47,-0.07,0.24,0.45 0.65,0.81,0.91,2.4), mean=-0.114, stddev=0.528] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000862666, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.8,-3.3,-3.1,-2.3 -1.8,-0.90,0.39,1.9,2.5 3.0,4.0,4.8,5.7), mean=0.444, stddev=1.67], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-1.7,-1.6,-1.1 -0.60,-0.36,-0.04,0.18,0.35 0.54,0.73,0.78,1.8), mean=-0.107, stddev=0.483] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.200816, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-19,-11,-9.7,-8.2 -6.4,-4.5,0.38,4.8,7.0 9.3,11,14,20), mean=0.37, stddev=5.5], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-8.1,-7.0,-5.7 -4.6,-3.2,-0.12,2.5,3.8 5.6,7.3,8.8,12), mean=-0.212, stddev=3.41] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000862666, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.8,-3.6,-3.1,-2.5 -1.9,-1.1,0.49,2.2,3.2 3.9,4.5,4.9,6.3), mean=0.594, stddev=1.95], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.9,-1.5,-1.2,-0.89 -0.68,-0.35,0.02,0.34,0.57 0.77,0.91,1.0,1.6), mean=-0.0138, stddev=0.496] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.801221, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-15,-12,-9.7,-7.2 -4.6,-3.0,0.12,3.9,5.8 7.9,9.6,11,14), mean=0.296, stddev=4.42], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-12,-7.5,-6.0,-4.3 -2.9,-1.4,0.51,2.0,3.0 3.6,4.4,4.8,10), mean=0.209, stddev=2.47] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.09e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=1638
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000292484, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01004, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.19,0.20,0.22,0.25,0.27 0.28,0.29,0.29,0.30), mean=0.227, stddev=0.0298], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.09,0.11,0.15,0.20,0.22 0.24,0.25,0.26,0.32), mean=0.154, stddev=0.0496], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.07,0.20,0.41 0.57,0.70,0.76,0.88), mean=0.144, stddev=0.178], bias-{mean,stddev}=0.002763,0.03887, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000292484, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009493, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.16,0.18 0.20,0.22,0.25,0.30,0.33 0.36,0.39,0.40,0.45), mean=0.26, stddev=0.0532], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.17,0.18,0.21,0.24,0.26 0.27,0.28,0.29,0.31), mean=0.214, stddev=0.0335], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.009 0.01,0.02,0.05,0.23,0.48 0.68,0.84,0.92,1.1), mean=0.151, stddev=0.218], bias-{mean,stddev}=0.0004949,0.006496, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.13,0.21 0.28,0.35,0.46,2.2), mean=0.0656, stddev=0.145], oderiv-count=13440
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-3911.65, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000292484, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007805, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.25 0.27,0.29,0.31,0.33,0.34 0.35,0.36,0.37,0.38), mean=0.307, stddev=0.0291], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.12 0.13,0.15,0.17,0.20,0.22 0.24,0.25,0.27,0.29), mean=0.175, stddev=0.0349], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.09,0.12,0.21,0.38,0.51 0.61,0.73,0.78,0.94), mean=0.258, stddev=0.169], bias-{mean,stddev}=0.0001304,0.01085, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2.97e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.66,-0.57,-0.46 -0.28,-0.10,0.26,0.62,0.82 1.0,1.2,1.3,2.0), mean=0.278, stddev=0.437], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.99,-0.69,-0.44 -0.19,-0.006,0.39,0.84,1.0 1.2,1.4,1.6,2.0), mean=0.4, stddev=0.507]
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-3715.05, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000292484, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004971, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.09,0.16,0.20 0.24,0.27,0.29,0.39), mean=0.11, stddev=0.0628], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.10,0.14,0.24,0.26,0.27 0.28,0.30,0.30,0.33), mean=0.218, stddev=0.0618], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.07,0.13,0.26,0.36 0.48,0.63,0.71,0.82), mean=0.177, stddev=0.142], bias-{mean,stddev}=0.00132,0.03733, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000292484, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03979, w_fc-rms=0.038, w_oc-rms=0.0383, count=8.17e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000784822, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.2,-2.8,-2.4,-2.0 -1.4,-0.71,0.57,2.3,3.0 3.8,4.5,5.2,6.2), mean=0.733, stddev=1.74], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-1.9,-1.4,-0.98 -0.69,-0.42,-0.05,0.16,0.31 0.47,0.63,0.69,1.1), mean=-0.139, stddev=0.461] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000784822, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-2.4,-2.2,-1.5 -1.2,-0.60,0.64,1.9,2.6 3.3,4.1,4.5,6.0), mean=0.693, stddev=1.49], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.1,-2.1,-1.6,-1.0 -0.63,-0.35,-0.08,0.10,0.25 0.37,0.55,0.74,1.1), mean=-0.166, stddev=0.474] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000784822, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-9.5,-8.2,-6.8 -5.5,-3.7,0.12,3.9,5.4 6.4,7.8,8.9,12), mean=0.0542, stddev=4.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.7,-7.6,-7.3,-5.9 -4.7,-3.3,-1.1,1.3,2.5 3.7,4.8,5.5,9.3), mean=-1, stddev=2.86] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000784822, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.8,-3.2,-2.8,-2.2 -1.7,-0.86,0.60,2.2,3.0 3.8,4.9,5.7,8.1), mean=0.695, stddev=1.86], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.8,-1.8,-1.5,-1.0 -0.74,-0.41,-0.03,0.18,0.33 0.47,0.55,0.59,0.86), mean=-0.139, stddev=0.508] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.291761, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-7.1,-6.2,-5.5 -4.5,-2.9,0.16,2.8,4.2 6.1,7.2,7.8,9.7), mean=0.00822, stddev=3.41], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.3,-7.0,-6.6,-4.8 -3.6,-2.1,-0.33,0.96,1.6 2.2,2.7,3.2,5.8), mean=-0.662, stddev=2.12] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.02e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=1539
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000292484, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00705, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.14,0.16,0.17,0.18 0.19,0.20,0.21,0.22), mean=0.16, stddev=0.0186], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.06,0.07,0.10,0.14,0.16 0.18,0.19,0.19,0.27), mean=0.106, stddev=0.0402], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.03,0.05,0.15,0.31 0.39,0.47,0.52,0.63), mean=0.102, stddev=0.124], bias-{mean,stddev}=-0.001697,0.03788, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000292484, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007758, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.11,0.13 0.15,0.17,0.21,0.25,0.27 0.30,0.33,0.34,0.37), mean=0.211, stddev=0.0511], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.14,0.15,0.17,0.20,0.21 0.22,0.23,0.23,0.25), mean=0.175, stddev=0.0254], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.005 0.007,0.01,0.04,0.18,0.39 0.56,0.70,0.77,0.94), mean=0.119, stddev=0.181], bias-{mean,stddev}=0.0002406,0.004469, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2.12e+05, self-repaired-proportion=0.0682692, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.22,-0.11,-0.08,-0.004 0.04,0.11,0.21,0.34,0.41 0.47,0.52,0.56,0.67), mean=0.219, stddev=0.142], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.29,-0.18,-0.04 0.09,0.21,0.43,0.65,0.77 0.86,0.93,0.98,1.3), mean=0.428, stddev=0.274], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.07,0.09 0.13,0.25,0.34,0.60), mean=0.0408, stddev=0.0699], oderiv-count=95104
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-3518.44, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000292484, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007049, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.23 0.25,0.26,0.28,0.30,0.31 0.32,0.33,0.34,0.38), mean=0.277, stddev=0.0261], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.08,0.09 0.11,0.13,0.15,0.18,0.21 0.22,0.24,0.25,0.32), mean=0.156, stddev=0.0393], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.10,0.18,0.33,0.46 0.58,0.68,0.74,0.88), mean=0.227, stddev=0.161], bias-{mean,stddev}=0.002022,0.01064, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.01,0.02,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0263, stddev=0.0104], oderiv-count=113600
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-3321.83, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000292484, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005944, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.06,0.08,0.12,0.18,0.25 0.29,0.31,0.33,0.38), mean=0.134, stddev=0.0709], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.21 0.22,0.23,0.26,0.31,0.34 0.36,0.38,0.39,0.41), mean=0.267, stddev=0.0456], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.08,0.14,0.27,0.43 0.63,0.80,0.89,1.1), mean=0.201, stddev=0.181], bias-{mean,stddev}=-0.0008255,0.03703, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000292484, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03531, w_fc-rms=0.03627, w_oc-rms=0.03801, count=8.28e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000709018, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.2,-3.5,-3.2,-2.4 -1.9,-1.1,0.24,1.7,2.6 3.5,4.3,4.5,9.0), mean=0.355, stddev=1.78], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-1.7,-1.1,-0.80 -0.56,-0.34,-0.04,0.27,0.40 0.53,0.72,0.77,1.1), mean=-0.0679, stddev=0.441] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000709018, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.5,-3.9,-3.3,-2.8 -2.2,-1.6,-0.11,1.3,2.2 3.1,3.6,4.0,5.2), mean=-0.0482, stddev=1.72], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-1.5,-1.2,-0.77 -0.53,-0.25,0.06,0.37,0.55 0.77,0.95,1.1,1.4), mean=0.0383, stddev=0.473] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0663659, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-19,-14,-12,-9.3 -7.4,-5.0,-0.35,4.4,7.3 10,14,16,19), mean=-0.123, stddev=5.98], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.7,-6.3,-5.4,-3.8 -3.0,-1.6,0.65,2.8,3.9 4.8,5.9,6.6,9.4), mean=0.571, stddev=2.7] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000709018, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.1,-3.7,-3.3,-2.8 -2.3,-1.5,-0.04,1.3,2.1 2.7,3.4,3.9,7.1), mean=-0.00378, stddev=1.7], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.4,-1.1,-0.82 -0.58,-0.36,0.02,0.37,0.53 0.71,0.89,1.0,1.5), mean=-0.00297, stddev=0.469] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0661989, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-15,-12,-11,-7.7 -5.9,-3.7,-0.38,3.3,5.6 7.7,11,13,18), mean=-0.205, stddev=4.76], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.4,-5.9,-5.3,-3.8 -2.1,-0.88,1.1,2.5,3.4 4.1,4.8,5.9,8.6), mean=0.798, stddev=2.34] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=9.41e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=1402
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000292484, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007738, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.14,0.15,0.17,0.20,0.21 0.22,0.22,0.23,0.24), mean=0.174, stddev=0.0269], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.06 0.07,0.08,0.12,0.15,0.16 0.17,0.18,0.19,0.20), mean=0.12, stddev=0.0355], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.07,0.23,0.33 0.40,0.45,0.48,0.52), mean=0.126, stddev=0.123], bias-{mean,stddev}=0.003054,0.03269, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000292484, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.008936, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.06,0.07 0.08,0.10,0.13,0.17,0.20 0.22,0.26,0.28,0.43), mean=0.136, stddev=0.0476], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.32,0.34 0.35,0.37,0.41,0.44,0.46 0.48,0.51,0.54,0.56), mean=0.407, stddev=0.0443], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.07,0.44,0.81 1.1,1.2,1.2,1.4), mean=0.235, stddev=0.336], bias-{mean,stddev}=-3.957e-10,0.002921, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.06482 tdnn2.affine:9.45135 lstm1.W_all:8.481 lstm1.lstm_nonlin:1.48274 lstm1.W_rp:3.74651 tdnn3.affine:6.04763 tdnn4.affine:7.03366 lstm2.W_all:6.02585 lstm2.lstm_nonlin:1.52871 lstm2.W_rp:2.66343 tdnn5.affine:4.94207 tdnn6.affine:6.35386 lstm3.W_all:7.11431 lstm3.lstm_nonlin:1.44339 lstm3.W_rp:2.89389 output.affine:6.6107 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.9657 tdnn2.affine:11.4884 lstm1.W_all:26.3332 lstm1.lstm_nonlin:11.9985 lstm1.W_rp:12.7947 tdnn3.affine:8.85218 tdnn4.affine:9.06711 lstm2.W_all:23.9538 lstm2.lstm_nonlin:12.393 lstm2.W_rp:12.1735 tdnn5.affine:8.35279 tdnn6.affine:9.08039 lstm3.W_all:27.1683 lstm3.lstm_nonlin:11.805 lstm3.W_rp:23.1063 output.affine:30.6093 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.759165 tdnn2.affine:0.814766 lstm1.W_all:0.304165 lstm1.lstm_nonlin:0.110112 lstm1.W_rp:0.282799 tdnn3.affine:0.666245 tdnn4.affine:0.762005 lstm2.W_all:0.23386 lstm2.lstm_nonlin:0.109864 lstm2.W_rp:0.211139 tdnn5.affine:0.582073 tdnn6.affine:0.689018 lstm3.W_all:0.248303 lstm3.lstm_nonlin:0.109164 lstm3.W_rp:0.124982 output.affine:0.216027 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:05:07 KST 2020, elapsed time 1 seconds
