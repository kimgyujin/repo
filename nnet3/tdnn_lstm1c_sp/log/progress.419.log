# nnet3-info exp/nnet3/tdnn_lstm1c_sp/419.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/418.mdl exp/nnet3/tdnn_lstm1c_sp/419.mdl 
# Started at Thu Jul 30 12:47:11 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/419.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=9.11947e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03247, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.006 0.009,0.02,0.58,0.73,0.81 0.87,0.94,0.99,1.2), mean=0.469, stddev=0.31], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.18,0.23,0.69,0.93,1.1 1.3,1.4,1.4,1.5), mean=0.646, stddev=0.362], bias-{mean,stddev}=-0.00664,0.0606, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.12e+06, self-repaired-proportion=0.164441, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,2e-05,2e-05,4e-05 6e-05,0.0001,0.04,0.09,0.11 0.13,0.13,0.15,0.18), mean=0.0446, stddev=0.0444], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.03 0.05,0.07,0.35,0.59,0.71 0.80,0.86,0.91,0.98), mean=0.347, stddev=0.264], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.009,0.01 0.02,0.04,0.39,0.56,0.69 0.78,0.86,0.95,1.8), mean=0.372, stddev=0.266], oderiv-count=1.13382e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37630.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,2e-05,2e-05,4e-05 5e-05,0.0002,0.04,0.08,0.11 0.13,0.14,0.15,0.18), mean=0.0438, stddev=0.0439], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0001,0.0001,0.0002 0.0003,0.0008,0.08,0.11,0.12 0.14,0.15,0.15,0.15), mean=0.0612, stddev=0.0499]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.11947e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01155, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.34,0.36 0.37,0.40,0.44,0.50,0.54 0.58,0.61,0.65,0.73), mean=0.451, stddev=0.0673], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.003,0.003 0.005,0.009,0.28,0.33,0.37 0.39,0.43,0.47,0.77), mean=0.219, stddev=0.146], bias-{mean,stddev}=-0.03517,0.03829, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.22,0.25,0.28,0.30 0.32,0.34,0.36,0.44), mean=0.253, stddev=0.0411], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.36,0.38,0.39 0.40,0.41,0.44,0.47,0.49 0.51,0.52,0.53,0.57), mean=0.442, stddev=0.0374], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.04,0.05,0.05,0.06,0.07 0.08,0.09,0.09,0.11), mean=0.0555, stddev=0.0115], oderiv-count=1.08803e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36823.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.22,0.25,0.29,0.31 0.33,0.35,0.37,0.45), mean=0.256, stddev=0.0436], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.36,0.38 0.39,0.41,0.46,0.51,0.54 0.57,0.61,0.61,0.67), mean=0.464, stddev=0.0597]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01748, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,5e-07,1e-06,9e-06 0.0002,0.17,0.40,0.58,0.66 0.72,0.79,0.87,1.1), mean=0.382, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.38,0.41 0.49,0.70,0.80,0.89,0.96 1.0,1.1,1.2,1.3), mean=0.779, stddev=0.17], bias-{mean,stddev}=0.001439,0.02498, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06275, w_fc-rms=0.02279, w_oc-rms=0.04232, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646934, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.48,0.50,0.54 0.67,0.74,0.76,0.81), mean=0.493, stddev=0.0692], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.20 0.21,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.226, stddev=0.0178] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646934, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.44,0.44,0.46 0.46,0.48,0.50,0.52,0.55 0.62,0.69,0.73,0.79), mean=0.507, stddev=0.054], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.19,0.20 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0157] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00807189, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.85,-0.81,-0.44 -0.28,-0.13,0.0003,0.16,0.28 0.60,0.78,0.84,0.88), mean=0.0146, stddev=0.289], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.26,0.31 0.39,0.45,0.58,0.72,1.0 1.0,1.0,1.0,1.0), mean=0.613, stddev=0.208] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646934, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.56,0.57,0.63), mean=0.461, stddev=0.0416], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.019] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00646934, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.77,-0.73,-0.35 -0.21,-0.09,0.0004,0.11,0.21 0.44,0.65,0.78,0.86), mean=0.0106, stddev=0.24], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.31,0.36,0.48 0.70,0.78,0.86,0.92,1.0 1.0,1.0,1.0,1.0), mean=0.837, stddev=0.143] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.29319e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.54982e-05, count-zeroing-boundaries=294138
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.109091
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03902, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.44,0.46 0.51,0.57,0.85,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.847, stddev=0.273], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0006,0.0008,0.002 0.007,0.38,0.55,0.72,0.89 1.2,1.3,1.4,1.7), mean=0.54, stddev=0.322], bias-{mean,stddev}=0.01269,0.2649, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=9.11947e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01241, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.24,0.24,0.26 0.28,0.30,0.34,0.38,0.41 0.45,0.47,0.49,0.58), mean=0.342, stddev=0.0574], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.16,0.18,0.27,0.36,0.39 0.41,0.43,0.44,0.46), mean=0.269, stddev=0.0893], bias-{mean,stddev}=0.0007184,0.009509, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.17e+05, self-repaired-proportion=0.00110681, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.01,0.02,0.02 0.03,0.05,0.08,0.11,0.12 0.14,0.15,0.17,0.18), mean=0.0782, stddev=0.0348], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.13,0.16 0.22,0.30,0.44,0.55,0.61 0.66,0.70,0.71,0.82), mean=0.431, stddev=0.145], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.09,0.10 0.10,0.11,0.12,0.16,0.19 0.22,0.26,0.27,0.34), mean=0.135, stddev=0.0409], oderiv-count=1.10662e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34403.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.01,0.02,0.02 0.03,0.05,0.08,0.11,0.12 0.14,0.15,0.16,0.18), mean=0.078, stddev=0.0346], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.05,0.06,0.07 0.09,0.11,0.13,0.15,0.17 0.18,0.19,0.19,0.22), mean=0.128, stddev=0.0294]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.11947e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008146, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.26,0.27 0.28,0.29,0.32,0.35,0.37 0.39,0.41,0.41,0.44), mean=0.32, stddev=0.0359], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.12,0.13,0.14 0.15,0.16,0.18,0.21,0.23 0.25,0.27,0.29,0.37), mean=0.182, stddev=0.0356], bias-{mean,stddev}=-0.02834,0.01727, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.5e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.20,0.21,0.24,0.27,0.28 0.29,0.31,0.32,0.35), mean=0.241, stddev=0.0305], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.35,0.36,0.38 0.39,0.40,0.42,0.45,0.46 0.47,0.48,0.49,0.49), mean=0.422, stddev=0.029], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.0386, stddev=0.00271], oderiv-count=1.04758e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31982.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.24,0.27,0.28 0.29,0.31,0.33,0.34), mean=0.244, stddev=0.0312], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.37,0.39,0.40 0.42,0.44,0.47,0.52,0.55 0.57,0.60,0.62,0.75), mean=0.479, stddev=0.0535]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01425, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,6e-06,2e-05 6e-05,0.001,0.33,0.51,0.58 0.63,0.67,0.70,0.88), mean=0.281, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.34 0.41,0.59,0.65,0.72,0.76 0.80,0.88,0.90,1.3), mean=0.637, stddev=0.13], bias-{mean,stddev}=0.004059,0.02922, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03831, w_fc-rms=0.01419, w_oc-rms=0.03942, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.45,0.45 0.46,0.48,0.50,0.51,0.55 0.58,0.63,0.66,0.74), mean=0.502, stddev=0.0406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0143] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.46,0.46 0.47,0.49,0.50,0.52,0.54 0.57,0.61,0.62,0.68), mean=0.506, stddev=0.033], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.238, stddev=0.0135] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00652378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.76,-0.69,-0.37 -0.22,-0.08,4e-05,0.11,0.27 0.46,0.59,0.65,0.73), mean=0.00674, stddev=0.234], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.37,0.41,0.45 0.48,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.724, stddev=0.213] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.44 0.45,0.47,0.50,0.50,0.51 0.52,0.55,0.56,0.70), mean=0.488, stddev=0.0296], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0178] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00652378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.59,-0.55,-0.28 -0.18,-0.06,2e-05,0.10,0.21 0.36,0.47,0.53,0.62), mean=0.00601, stddev=0.19], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.55,0.58,0.67 0.75,0.81,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.884, stddev=0.112] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.90822e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.70913e-06, count-zeroing-boundaries=259432
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.109091
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03692, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.47,0.52 0.55,0.59,0.82,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.813, stddev=0.217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.003 0.004,0.01,0.57,0.78,0.89 0.99,1.2,1.2,1.4), mean=0.471, stddev=0.364], bias-{mean,stddev}=-0.00193,0.2036, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=9.11947e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.22,0.24 0.25,0.27,0.31,0.37,0.40 0.44,0.47,0.48,0.53), mean=0.319, stddev=0.0587], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.24,0.34,0.36 0.38,0.40,0.41,0.44), mean=0.253, stddev=0.0777], bias-{mean,stddev}=0.0008988,0.007336, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.86e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.0626, stddev=0.0284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.13,0.16 0.21,0.28,0.42,0.53,0.58 0.61,0.64,0.65,0.70), mean=0.408, stddev=0.136], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.13,0.15,0.18 0.22,0.23,0.25,0.29), mean=0.136, stddev=0.034], oderiv-count=1.0311e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29561.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.03,0.04,0.06,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.0644, stddev=0.0281], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.07 0.08,0.09,0.11,0.13,0.14 0.15,0.16,0.16,0.19), mean=0.112, stddev=0.0255]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.11947e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008171, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.15,0.22 0.25,0.28,0.32,0.37,0.39 0.40,0.41,0.41,0.45), mean=0.318, stddev=0.0563], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.13 0.14,0.15,0.17,0.21,0.24 0.27,0.31,0.33,0.39), mean=0.181, stddev=0.0438], bias-{mean,stddev}=-0.02279,0.0216, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.13e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.14,0.18 0.20,0.23,0.26,0.28,0.30 0.31,0.32,0.34,0.37), mean=0.251, stddev=0.0403], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.37,0.39,0.41,0.44,0.45 0.46,0.48,0.49,0.52), mean=0.413, stddev=0.031], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0318, stddev=0.00313], oderiv-count=924320
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27141, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.20,0.23,0.26,0.29,0.30 0.31,0.32,0.34,0.40), mean=0.255, stddev=0.0401], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.25,0.34 0.40,0.45,0.51,0.57,0.60 0.63,0.66,0.68,0.86), mean=0.506, stddev=0.0894]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02059, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.28 0.29,0.34,0.48,0.66,0.72 0.77,0.83,0.89,0.95), mean=0.5, stddev=0.16], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.56,0.59,0.68 0.75,0.78,0.86,1.1,1.2 1.3,1.4,1.6,1.9), mean=0.918, stddev=0.196], bias-{mean,stddev}=0.01428,0.01724, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1003, w_fc-rms=0.04257, w_oc-rms=0.06948, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00658947, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.58,0.59,0.61 0.63,0.66,0.70,0.75,0.77 0.79,0.82,0.83,0.86), mean=0.703, stddev=0.0538], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.173, stddev=0.0183] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00658947, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.52,0.55,0.56 0.58,0.60,0.64,0.68,0.74 0.78,0.81,0.83,0.88), mean=0.65, stddev=0.0636], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.14 0.16,0.17,0.19,0.20,0.21 0.21,0.21,0.22,0.22), mean=0.187, stddev=0.0208] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0190735, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.81,-0.73,-0.57 -0.43,-0.29,-0.005,0.27,0.40 0.53,0.72,0.79,0.89), mean=-0.00955, stddev=0.336], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.22,0.26 0.31,0.36,0.42,0.46,0.48 0.50,0.52,0.53,0.55), mean=0.409, stddev=0.071] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00658947, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.51,0.54 0.56,0.59,0.63,0.67,0.69 0.71,0.77,0.80,0.88), mean=0.633, stddev=0.0568], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.19,0.20,0.20,0.20), mean=0.175, stddev=0.0164] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0114753, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.77,-0.69,-0.55 -0.41,-0.27,-0.01,0.25,0.36 0.55,0.72,0.78,0.88), mean=-0.0114, stddev=0.32], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.24,0.26,0.32 0.41,0.49,0.58,0.64,0.66 0.68,0.69,0.70,0.75), mean=0.558, stddev=0.103] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.53229e-06, count-zeroing-boundaries=220639
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.109091
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08798, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.1,1.1 1.2,1.2,1.7,2.6,2.6 2.7,2.8,2.9,3.1), mean=1.91, stddev=0.627], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.96,1.1,1.1 1.2,1.2,1.3,1.6,1.8 1.9,2.0,2.0,2.2), mean=1.4, stddev=0.237], bias-{mean,stddev}=-0.04226,0.5174, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04163, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.57,0.59 0.60,0.62,0.66,0.70,0.73 0.76,0.81,0.87,2.2), mean=0.666, stddev=0.0817], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.0,1.1 1.1,1.2,1.6,2.4,2.5 2.6,2.6,2.7,2.7), mean=1.82, stddev=0.589], bias-{mean,stddev}=3.888e-09,0.02391, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.41), mean=0.0169, stddev=0.0137], oderiv-count=596800
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/418.mdl exp/nnet3/tdnn_lstm1c_sp/419.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.06559 tdnn2.affine:2.82611 lstm1.W_all:2.128 lstm1.lstm_nonlin:0.0390606 lstm1.W_rp:0.940122 tdnn3.affine:1.97933 tdnn4.affine:2.02366 lstm2.W_all:1.45369 lstm2.lstm_nonlin:0.0213368 lstm2.W_rp:0.640089 tdnn5.affine:1.62232 tdnn6.affine:1.75725 lstm3.W_all:1.89334 lstm3.lstm_nonlin:0.042623 lstm3.W_rp:0.68434 output.affine:1.62974 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.9012 tdnn2.affine:10.4715 lstm1.W_all:20.3598 lstm1.lstm_nonlin:1.80252 lstm1.W_rp:14.9717 tdnn3.affine:7.90732 tdnn4.affine:7.376 lstm2.W_all:16.6192 lstm2.lstm_nonlin:1.29456 lstm2.W_rp:13.9653 tdnn5.affine:7.39193 tdnn6.affine:7.39415 lstm3.W_all:23.9648 lstm3.lstm_nonlin:2.94723 lstm3.W_rp:33.4139 output.affine:30.8079 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.237623 tdnn2.affine:0.269873 lstm1.W_all:0.104492 lstm1.lstm_nonlin:0.0215645 lstm1.W_rp:0.0627945 tdnn3.affine:0.250784 tdnn4.affine:0.274864 lstm2.W_all:0.0874667 lstm2.lstm_nonlin:0.0164354 lstm2.W_rp:0.0458321 tdnn5.affine:0.21993 tdnn6.affine:0.237852 lstm3.W_all:0.0789696 lstm3.lstm_nonlin:0.0144306 lstm3.W_rp:0.0204636 output.affine:0.0528698 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:47:12 KST 2020, elapsed time 1 seconds
