# nnet3-info exp/nnet3/tdnn_lstm1c_sp/178.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/177.mdl exp/nnet3/tdnn_lstm1c_sp/178.mdl 
# Started at Thu Jul 30 11:11:25 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/178.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000171127, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02901, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.009,0.01,0.02 0.03,0.29,0.51,0.61,0.65 0.71,0.79,0.84,1.1), mean=0.451, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.13,0.14 0.16,0.20,0.57,0.77,1.1 1.3,1.4,1.5,1.6), mean=0.563, stddev=0.347], bias-{mean,stddev}=0.006033,0.05652, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.25e+05, self-repaired-proportion=0.153372, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,4e-06,8e-06,3e-05 9e-05,0.001,0.06,0.09,0.10 0.11,0.13,0.14,0.18), mean=0.0556, stddev=0.0375], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.001,0.003,0.01 0.03,0.11,0.48,0.62,0.71 0.81,0.86,0.87,0.96), mean=0.427, stddev=0.246], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.04 0.07,0.26,0.36,0.46,0.53 0.59,0.70,0.75,1.5), mean=0.349, stddev=0.174], oderiv-count=1.26157e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36168, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,2e-06,3e-06,1e-05 4e-05,0.002,0.06,0.09,0.11 0.12,0.13,0.15,0.22), mean=0.0554, stddev=0.0388], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,7e-05,9e-05,0.0002 0.0005,0.008,0.09,0.11,0.12 0.13,0.13,0.13,0.15), mean=0.0763, stddev=0.0426]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000171127, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01172, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.38 0.40,0.42,0.45,0.50,0.53 0.55,0.57,0.61,0.76), mean=0.46, stddev=0.0532], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.01 0.02,0.14,0.28,0.32,0.34 0.36,0.39,0.42,0.67), mean=0.241, stddev=0.115], bias-{mean,stddev}=-0.002655,0.0267, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.99e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.27,0.28,0.31,0.35,0.36 0.38,0.39,0.40,0.58), mean=0.315, stddev=0.0365], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.41 0.42,0.43,0.46,0.48,0.50 0.51,0.52,0.52,0.53), mean=0.46, stddev=0.0286], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.046, stddev=0.00876], oderiv-count=1.09126e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35393.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.26 0.27,0.28,0.31,0.34,0.37 0.38,0.40,0.41,0.61), mean=0.315, stddev=0.04], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.46 0.48,0.50,0.55,0.60,0.64 0.67,0.69,0.73,0.94), mean=0.555, stddev=0.0649]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000171127, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01598, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.0003,0.001,0.005 0.03,0.18,0.35,0.53,0.62 0.69,0.77,0.81,1.1), mean=0.353, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.32,0.34,0.40 0.44,0.64,0.74,0.82,0.87 0.91,0.96,0.99,1.4), mean=0.712, stddev=0.153], bias-{mean,stddev}=0.0001661,0.02279, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000171127, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02396, w_fc-rms=0.03077, w_oc-rms=0.0336, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633692, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.45 0.46,0.47,0.49,0.52,0.55 0.60,0.69,0.71,0.75), mean=0.501, stddev=0.0492], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0147] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633692, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.39,0.40,0.42 0.43,0.45,0.49,0.52,0.57 0.64,0.72,0.74,0.79), mean=0.496, stddev=0.0674], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.20 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.016] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00633692, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.83,-0.77,-0.57 -0.36,-0.21,0.006,0.21,0.35 0.47,0.65,0.77,0.84), mean=-0.00193, stddev=0.298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.28,0.37 0.43,0.48,0.60,0.74,0.99 1.0,1.0,1.0,1.0), mean=0.628, stddev=0.187] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633692, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.44,0.45,0.47,0.50,0.51 0.53,0.56,0.57,0.61), mean=0.475, stddev=0.0333], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.19,0.20 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00824781, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.82,-0.74,-0.47 -0.31,-0.16,0.003,0.16,0.28 0.41,0.59,0.75,0.87), mean=-0.00313, stddev=0.264], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.28,0.31,0.49 0.66,0.75,0.84,0.91,0.99 1.0,1.0,1.0,1.0), mean=0.816, stddev=0.145] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.95e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.82543e-06, count-zeroing-boundaries=293022
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0438017
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000171127, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03174, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.19 0.22,0.25,0.44,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.625, stddev=0.366], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.006,0.01,0.02 0.06,0.31,0.46,0.60,0.71 0.85,1.0,1.2,1.4), mean=0.452, stddev=0.239], bias-{mean,stddev}=-0.0006836,0.2078, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000171127, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01212, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.20,0.22 0.24,0.26,0.32,0.39,0.43 0.46,0.48,0.50,0.63), mean=0.33, stddev=0.0748], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.09,0.20,0.38,0.43 0.45,0.48,0.50,0.55), mean=0.237, stddev=0.142], bias-{mean,stddev}=0.006736,0.02287, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.04,0.05,0.06 0.07,0.08,0.11,0.14,0.15 0.16,0.18,0.18,0.23), mean=0.109, stddev=0.0324], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.19,0.23,0.27 0.32,0.37,0.50,0.62,0.67 0.69,0.72,0.75,0.83), mean=0.496, stddev=0.131], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.08,0.09,0.10,0.12,0.13 0.14,0.15,0.15,0.31), mean=0.102, stddev=0.0212], oderiv-count=1.08659e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33071.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.05,0.06 0.07,0.08,0.11,0.14,0.15 0.17,0.18,0.18,0.24), mean=0.109, stddev=0.0336], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.13,0.14 0.14,0.15,0.17,0.20,0.21 0.22,0.23,0.24,0.30), mean=0.175, stddev=0.027]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000171127, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008717, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.28 0.30,0.31,0.34,0.37,0.38 0.40,0.43,0.44,0.55), mean=0.342, stddev=0.0369], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.15,0.17,0.19,0.22,0.24 0.25,0.27,0.29,0.33), mean=0.196, stddev=0.0343], bias-{mean,stddev}=-0.0111,0.01602, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.37e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.23,0.24,0.27,0.30,0.31 0.32,0.35,0.35,0.41), mean=0.271, stddev=0.0328], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.38,0.39 0.40,0.41,0.44,0.46,0.48 0.49,0.51,0.52,0.55), mean=0.439, stddev=0.0319], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0363, stddev=0.00309], oderiv-count=955776
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30749, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.23,0.25,0.27,0.30,0.32 0.33,0.35,0.36,0.43), mean=0.274, stddev=0.0347], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.45 0.47,0.49,0.52,0.57,0.59 0.63,0.69,0.72,0.86), mean=0.532, stddev=0.0592]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000171127, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01317, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,9e-07,2e-06,4e-06 2e-05,0.0004,0.28,0.47,0.55 0.59,0.64,0.67,1.1), mean=0.254, stddev=0.219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.25,0.26,0.31 0.39,0.54,0.61,0.66,0.69 0.73,0.80,0.83,1.3), mean=0.588, stddev=0.125], bias-{mean,stddev}=-0.003487,0.03838, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000171127, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.009254, w_fc-rms=0.01041, w_oc-rms=0.01494, count=1.33e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638922, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.44,0.45 0.46,0.47,0.50,0.51,0.54 0.57,0.61,0.62,0.69), mean=0.498, stddev=0.0376], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0143] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638922, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.39,0.41 0.42,0.44,0.49,0.50,0.50 0.53,0.55,0.57,0.76), mean=0.477, stddev=0.0415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.23,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0116] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00638922, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.63,-0.55,-0.34 -0.22,-0.11,0.0004,0.10,0.23 0.34,0.52,0.65,0.81), mean=0.000233, stddev=0.207], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.37,0.42,0.49 0.55,0.58,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.752, stddev=0.199] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638922, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.46,0.50,0.50,0.52 0.55,0.57,0.58,0.63), mean=0.486, stddev=0.0339], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0154] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00638922, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.57,-0.43,-0.28 -0.18,-0.08,0.0001,0.09,0.18 0.27,0.42,0.55,0.67), mean=0.000946, stddev=0.173], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.53,0.63,0.72 0.79,0.83,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.901, stddev=0.101] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.71e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=258477
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0438017
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000171127, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02887, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.31,0.32,0.35 0.37,0.39,0.52,0.86,0.90 0.95,0.97,0.98,1.1), mean=0.62, stddev=0.222], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0006,0.0007,0.001 0.002,0.005,0.46,0.61,0.70 0.78,0.88,0.91,0.99), mean=0.365, stddev=0.289], bias-{mean,stddev}=0.003105,0.1376, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000171127, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01083, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.22,0.24,0.28,0.34,0.40 0.43,0.48,0.49,0.55), mean=0.294, stddev=0.0706], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.13,0.15,0.21,0.32,0.35 0.37,0.39,0.40,0.44), mean=0.231, stddev=0.0862], bias-{mean,stddev}=0.00503,0.01201, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.1e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.07,0.09,0.10 0.10,0.11,0.12,0.13), mean=0.0675, stddev=0.0225], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.17,0.18,0.22 0.27,0.34,0.47,0.57,0.61 0.63,0.67,0.68,0.73), mean=0.453, stddev=0.126], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.10,0.11,0.12,0.14,0.16 0.19,0.21,0.23,0.26), mean=0.127, stddev=0.0279], oderiv-count=965248
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28426.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.05,0.07,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.0707, stddev=0.0243], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.08,0.09 0.09,0.10,0.12,0.14,0.14 0.15,0.16,0.17,0.19), mean=0.118, stddev=0.0205]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000171127, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008172, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.24,0.25 0.26,0.28,0.31,0.36,0.39 0.40,0.41,0.42,0.52), mean=0.319, stddev=0.0462], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.13 0.14,0.15,0.18,0.21,0.23 0.26,0.29,0.32,0.37), mean=0.182, stddev=0.0399], bias-{mean,stddev}=-0.01074,0.02023, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.78e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.22,0.24,0.27,0.29,0.31 0.32,0.33,0.35,0.45), mean=0.267, stddev=0.0334], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.36,0.37 0.39,0.40,0.42,0.45,0.46 0.47,0.49,0.50,0.51), mean=0.422, stddev=0.0301], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0293, stddev=0.00265], oderiv-count=934400
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26104.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.23,0.24,0.28,0.30,0.32 0.33,0.35,0.37,0.52), mean=0.276, stddev=0.0384], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.34,0.38,0.43 0.45,0.48,0.54,0.59,0.64 0.70,0.73,0.76,1.0), mean=0.542, stddev=0.0823]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000171127, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01896, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.18,0.20,0.26 0.30,0.34,0.42,0.61,0.71 0.75,0.79,0.82,1.3), mean=0.459, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.59,0.60,0.61 0.63,0.65,0.72,0.99,1.3 1.4,1.5,1.5,1.6), mean=0.825, stddev=0.259], bias-{mean,stddev}=0.02408,0.02614, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000171127, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04367, w_fc-rms=0.04758, w_oc-rms=0.04974, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645231, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.55,0.56 0.57,0.60,0.65,0.69,0.71 0.73,0.75,0.76,0.79), mean=0.648, stddev=0.0519], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.16,0.17 0.18,0.19,0.20,0.20,0.21 0.21,0.21,0.22,0.24), mean=0.195, stddev=0.0124] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645231, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.47,0.48,0.49 0.51,0.54,0.58,0.63,0.69 0.74,0.77,0.78,0.86), mean=0.591, stddev=0.0698], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.15,0.16,0.17 0.18,0.19,0.21,0.21,0.22 0.22,0.22,0.22,0.22), mean=0.202, stddev=0.0154] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00835057, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.74,-0.67,-0.53 -0.36,-0.21,-0.01,0.20,0.34 0.49,0.69,0.71,0.81), mean=-0.00763, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.27,0.29,0.32 0.36,0.39,0.44,0.47,0.49 0.50,0.52,0.53,0.61), mean=0.43, stddev=0.0558] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645231, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.55,0.56,0.58 0.60,0.62,0.66,0.70,0.71 0.74,0.76,0.78,0.86), mean=0.66, stddev=0.0474], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.22), mean=0.18, stddev=0.0135] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00950777, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.77,-0.71,-0.49 -0.33,-0.20,-0.01,0.19,0.33 0.47,0.71,0.78,0.86), mean=-0.00784, stddev=0.286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.27,0.30,0.35 0.42,0.54,0.61,0.66,0.68 0.70,0.71,0.72,0.73), mean=0.586, stddev=0.104] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.47e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=219870
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0438017
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000171127, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07316, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.0,1.1,1.1 1.1,1.2,1.6,2.0,2.1 2.2,2.2,2.2,2.3), mean=1.62, stddev=0.4], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.64,0.79,0.95 1.0,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.6), mean=1.17, stddev=0.154], bias-{mean,stddev}=0.01354,0.3065, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000171127, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03858, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.50,0.52,0.53 0.54,0.56,0.61,0.65,0.68 0.72,0.77,0.82,2.3), mean=0.615, stddev=0.0905], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.3,1.3,1.7,2.1,2.2 2.3,2.3,2.4,2.4), mean=1.73, stddev=0.393], bias-{mean,stddev}=4.66e-09,0.03312, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=581760
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/177.mdl exp/nnet3/tdnn_lstm1c_sp/178.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.78048 tdnn2.affine:6.73932 lstm1.W_all:5.39108 lstm1.lstm_nonlin:0.102926 lstm1.W_rp:2.20123 tdnn3.affine:4.38307 tdnn4.affine:4.92193 lstm2.W_all:3.7222 lstm2.lstm_nonlin:0.0435811 lstm2.W_rp:1.52752 tdnn5.affine:3.42973 tdnn6.affine:3.99092 lstm3.W_all:4.88741 lstm3.lstm_nonlin:0.0964446 lstm3.W_rp:1.9434 output.affine:4.28556 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.5324 tdnn2.affine:10.5704 lstm1.W_all:18.6093 lstm1.lstm_nonlin:1.17378 lstm1.W_rp:12.142 tdnn3.affine:7.7386 tdnn4.affine:7.86375 lstm2.W_all:15.4177 lstm2.lstm_nonlin:0.465834 lstm2.W_rp:10.8461 tdnn5.affine:6.90477 tdnn6.affine:7.37844 lstm3.W_all:22.1078 lstm3.lstm_nonlin:1.85895 lstm3.W_rp:27.3507 output.affine:28.5761 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.58474 tdnn2.affine:0.640011 lstm1.W_all:0.28986 lstm1.lstm_nonlin:0.0882288 lstm1.W_rp:0.182029 tdnn3.affine:0.571781 tdnn4.affine:0.630326 lstm2.W_all:0.242204 lstm2.lstm_nonlin:0.0940359 lstm2.W_rp:0.141536 tdnn5.affine:0.505919 tdnn6.affine:0.548037 lstm3.W_all:0.221357 lstm3.lstm_nonlin:0.0516799 lstm3.W_rp:0.0710944 output.affine:0.149784 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:11:25 KST 2020, elapsed time 0 seconds
