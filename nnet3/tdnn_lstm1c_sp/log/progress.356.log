# nnet3-info exp/nnet3/tdnn_lstm1c_sp/356.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/355.mdl exp/nnet3/tdnn_lstm1c_sp/356.mdl 
# Started at Thu Jul 30 12:22:06 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/356.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000135995, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03233, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.006,0.007 0.01,0.02,0.57,0.72,0.81 0.87,0.96,0.97,1.2), mean=0.469, stddev=0.305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.22,0.65,0.91,1.2 1.4,1.4,1.5,1.5), mean=0.637, stddev=0.37], bias-{mean,stddev}=-0.003434,0.06192, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0.172069, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,2e-05,3e-05,5e-05 7e-05,0.0002,0.05,0.09,0.12 0.13,0.14,0.16,0.19), mean=0.0488, stddev=0.0455], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.01,0.03 0.05,0.07,0.39,0.59,0.72 0.82,0.88,0.92,0.99), mean=0.361, stddev=0.264], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.009,0.01,0.01 0.02,0.04,0.33,0.45,0.55 0.66,0.78,0.82,1.7), mean=0.308, stddev=0.22], oderiv-count=1.16467e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34800, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,6e-06,1e-05,3e-05 5e-05,0.0002,0.04,0.09,0.11 0.13,0.14,0.16,0.20), mean=0.0467, stddev=0.0443], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,8e-05,0.0001,0.0002 0.0004,0.0009,0.08,0.11,0.12 0.14,0.15,0.15,0.16), mean=0.0653, stddev=0.05]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000135995, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01177, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.35,0.36 0.38,0.41,0.45,0.51,0.55 0.59,0.64,0.65,0.73), mean=0.46, stddev=0.0672], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.003,0.003,0.004 0.006,0.01,0.28,0.34,0.37 0.40,0.44,0.48,0.73), mean=0.225, stddev=0.146], bias-{mean,stddev}=-0.03482,0.03956, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.13e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.20,0.21 0.22,0.23,0.27,0.30,0.32 0.34,0.37,0.39,0.50), mean=0.27, stddev=0.0434], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.36,0.37,0.39 0.40,0.42,0.44,0.47,0.49 0.50,0.52,0.52,0.56), mean=0.443, stddev=0.0366], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.06,0.06 0.07,0.07,0.08,0.10), mean=0.0493, stddev=0.00957], oderiv-count=1.08323e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34052.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.22,0.23,0.27,0.31,0.33 0.35,0.38,0.41,0.50), mean=0.272, stddev=0.0456], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.39,0.40 0.42,0.44,0.49,0.54,0.57 0.60,0.63,0.64,0.73), mean=0.495, stddev=0.0599]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000135995, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01763, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,7e-07,2e-06,1e-05 0.0004,0.17,0.41,0.59,0.67 0.73,0.78,0.86,1.0), mean=0.385, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.37,0.42 0.50,0.71,0.81,0.90,0.96 1.0,1.1,1.2,1.3), mean=0.786, stddev=0.168], bias-{mean,stddev}=0.002821,0.02795, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000135995, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.08805, w_fc-rms=0.02709, w_oc-rms=0.04773, count=1.51e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636482, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.48,0.50,0.54 0.70,0.78,0.80,0.86), mean=0.496, stddev=0.0769], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0215] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636482, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.45,0.46,0.47 0.48,0.49,0.50,0.53,0.58 0.66,0.74,0.79,0.84), mean=0.521, stddev=0.0614], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.16,0.19 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.021] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0200216, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.88,-0.86,-0.48 -0.26,-0.13,0.0007,0.15,0.30 0.59,0.84,0.88,0.90), mean=0.0165, stddev=0.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.21,0.25 0.37,0.45,0.58,0.74,1.0 1.0,1.0,1.0,1.0), mean=0.61, stddev=0.216] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636482, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.57,0.58,0.70), mean=0.463, stddev=0.0411], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0199] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00636482, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.72,-0.67,-0.31 -0.16,-0.08,0.0006,0.10,0.22 0.39,0.63,0.72,0.79), mean=0.0114, stddev=0.223], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.43,0.55 0.74,0.82,0.89,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.863, stddev=0.128] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=4.78591e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000119314, count-zeroing-boundaries=297534
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.213223
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000135995, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03985, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.42,0.45 0.49,0.55,0.86,1.1,1.2 1.3,1.3,1.4,1.4), mean=0.86, stddev=0.294], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0007,0.001,0.002 0.008,0.33,0.55,0.73,0.93 1.2,1.4,1.5,1.8), mean=0.543, stddev=0.343], bias-{mean,stddev}=0.01376,0.2617, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000135995, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01293, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.21,0.24,0.26 0.28,0.30,0.35,0.41,0.44 0.47,0.50,0.52,0.58), mean=0.355, stddev=0.0679], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.17,0.28,0.38,0.41 0.43,0.44,0.46,0.49), mean=0.277, stddev=0.0998], bias-{mean,stddev}=0.001518,0.008958, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.78e+05, self-repaired-proportion=0.00245445, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.01,0.02,0.02 0.03,0.05,0.08,0.11,0.12 0.13,0.15,0.16,0.18), mean=0.078, stddev=0.0319], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.12,0.14,0.18 0.23,0.36,0.48,0.60,0.65 0.68,0.71,0.73,0.84), mean=0.466, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.09,0.09,0.10 0.10,0.11,0.13,0.16,0.20 0.24,0.26,0.30,0.35), mean=0.14, stddev=0.043], oderiv-count=1.07405e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31808.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.01,0.02,0.02 0.03,0.05,0.08,0.10,0.12 0.13,0.14,0.15,0.17), mean=0.0775, stddev=0.0317], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.05,0.06,0.07 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.18,0.19), mean=0.121, stddev=0.0261]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000135995, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008443, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.27,0.28 0.29,0.30,0.33,0.36,0.39 0.41,0.43,0.44,0.47), mean=0.331, stddev=0.0399], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.12,0.13,0.14 0.15,0.16,0.18,0.22,0.24 0.26,0.29,0.32,0.37), mean=0.188, stddev=0.0407], bias-{mean,stddev}=-0.02665,0.01932, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.84e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.21,0.23,0.25,0.28,0.29 0.30,0.32,0.32,0.37), mean=0.253, stddev=0.0299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.36,0.37,0.38 0.39,0.41,0.43,0.45,0.46 0.47,0.48,0.49,0.49), mean=0.428, stddev=0.0279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0369, stddev=0.00265], oderiv-count=1.06726e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29564.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.22,0.23,0.25,0.28,0.29 0.31,0.32,0.33,0.39), mean=0.255, stddev=0.0307], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.37,0.39,0.41 0.43,0.44,0.49,0.53,0.57 0.59,0.63,0.65,0.87), mean=0.492, stddev=0.0589]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000135995, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01446, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,5e-06,1e-05 5e-05,0.001,0.33,0.52,0.58 0.62,0.68,0.70,0.92), mean=0.285, stddev=0.234], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.35 0.44,0.60,0.66,0.73,0.77 0.81,0.89,0.95,1.3), mean=0.646, stddev=0.132], bias-{mean,stddev}=0.005885,0.03277, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000135995, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05552, w_fc-rms=0.01616, w_oc-rms=0.04127, count=1.38e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642014, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.45,0.45 0.47,0.48,0.50,0.52,0.56 0.60,0.67,0.70,0.78), mean=0.505, stddev=0.048], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0166] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642014, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.46,0.48 0.49,0.50,0.50,0.54,0.57 0.60,0.66,0.67,0.73), mean=0.518, stddev=0.0419], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0181] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00649276, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.80,-0.75,-0.44 -0.24,-0.10,0.0007,0.13,0.33 0.55,0.68,0.71,0.80), mean=0.0093, stddev=0.259], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.35,0.41 0.47,0.53,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.719, stddev=0.219] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642014, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.43,0.44 0.46,0.47,0.50,0.50,0.51 0.53,0.56,0.58,0.69), mean=0.49, stddev=0.028], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0186] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00642014, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.71,-0.60,-0.52,-0.31 -0.16,-0.07,0.0005,0.09,0.20 0.37,0.48,0.54,0.61), mean=0.00709, stddev=0.185], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.57,0.59,0.69 0.77,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.9, stddev=0.103] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.72528e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.42998e-05, count-zeroing-boundaries=262392
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.213223
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000135995, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03821, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.50,0.53 0.56,0.60,0.85,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.84, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.002 0.004,0.01,0.56,0.80,0.94 1.1,1.3,1.4,1.6), mean=0.481, stddev=0.385], bias-{mean,stddev}=-0.0002747,0.209, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000135995, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01228, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.24,0.26 0.27,0.29,0.33,0.38,0.43 0.46,0.49,0.51,0.58), mean=0.337, stddev=0.0611], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.17,0.19,0.25,0.36,0.39 0.41,0.42,0.43,0.47), mean=0.267, stddev=0.0839], bias-{mean,stddev}=0.0009944,0.006141, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.98e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.12,0.12,0.15), mean=0.064, stddev=0.0278], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.14,0.18 0.21,0.30,0.47,0.58,0.62 0.65,0.67,0.69,0.73), mean=0.445, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.11,0.12,0.13,0.16,0.19 0.21,0.23,0.23,0.28), mean=0.143, stddev=0.0326], oderiv-count=1.03533e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27320.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.17), mean=0.0658, stddev=0.028], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.07,0.09,0.11,0.13,0.14 0.15,0.15,0.16,0.17), mean=0.108, stddev=0.0242]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000135995, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008423, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.16,0.21 0.26,0.29,0.33,0.38,0.40 0.41,0.43,0.44,0.47), mean=0.327, stddev=0.0613], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.13 0.14,0.15,0.18,0.22,0.25 0.28,0.31,0.33,0.40), mean=0.187, stddev=0.0453], bias-{mean,stddev}=-0.01951,0.02413, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.81e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.14,0.19 0.22,0.23,0.27,0.30,0.31 0.32,0.34,0.34,0.41), mean=0.265, stddev=0.0424], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.38,0.39,0.42,0.45,0.46 0.47,0.49,0.49,0.53), mean=0.421, stddev=0.0334], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0303, stddev=0.00299], oderiv-count=950560
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25076.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.19 0.22,0.24,0.28,0.30,0.32 0.33,0.35,0.36,0.47), mean=0.27, stddev=0.0437], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.26,0.33 0.41,0.46,0.53,0.61,0.64 0.67,0.71,0.74,1.0), mean=0.527, stddev=0.102]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000135995, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0207, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.28,0.29 0.31,0.35,0.49,0.65,0.71 0.76,0.86,0.90,0.98), mean=0.505, stddev=0.153], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.61,0.63,0.71 0.78,0.81,0.88,1.0,1.1 1.3,1.4,1.5,1.8), mean=0.928, stddev=0.17], bias-{mean,stddev}=0.01245,0.01637, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000135995, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.107, w_fc-rms=0.04448, w_oc-rms=0.07465, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00648691, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.59,0.61,0.63 0.65,0.68,0.72,0.77,0.79 0.82,0.84,0.85,0.89), mean=0.723, stddev=0.0561], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.22), mean=0.167, stddev=0.0224] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00648691, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.54,0.56,0.58 0.61,0.63,0.68,0.72,0.77 0.80,0.84,0.86,0.88), mean=0.682, stddev=0.065], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.13 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.175, stddev=0.0235] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0274428, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.82,-0.77,-0.61 -0.45,-0.32,-0.02,0.29,0.43 0.60,0.81,0.86,0.93), mean=-0.00467, stddev=0.359], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.18,0.20,0.24 0.30,0.36,0.45,0.50,0.52 0.54,0.57,0.58,0.63), mean=0.43, stddev=0.0894] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00648691, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.50,0.53 0.55,0.59,0.64,0.68,0.70 0.72,0.78,0.80,0.89), mean=0.634, stddev=0.0611], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.22), mean=0.176, stddev=0.0181] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00648691, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.72,-0.67,-0.54 -0.38,-0.27,-0.006,0.25,0.36 0.55,0.70,0.75,0.82), mean=-0.00522, stddev=0.31], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.36,0.41 0.47,0.56,0.65,0.70,0.73 0.75,0.76,0.78,0.82), mean=0.628, stddev=0.0987] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.24113e-06, count-zeroing-boundaries=223101
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.213223
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000135995, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09032, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.1,1.2 1.2,1.3,1.7,2.6,2.7 2.8,2.8,3.0,3.1), mean=1.96, stddev=0.639], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.89,1.0,1.1 1.1,1.2,1.4,1.6,1.9 2.0,2.1,2.2,2.3), mean=1.43, stddev=0.282], bias-{mean,stddev}=-0.01874,0.6597, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000135995, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04323, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.60,0.61 0.63,0.64,0.68,0.73,0.76 0.79,0.84,0.91,2.1), mean=0.692, stddev=0.0823], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.1,1.1 1.2,1.3,1.7,2.5,2.6 2.7,2.7,2.7,2.9), mean=1.89, stddev=0.595], bias-{mean,stddev}=5.28e-09,0.02127, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0135], oderiv-count=603840
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/355.mdl exp/nnet3/tdnn_lstm1c_sp/356.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.70002 tdnn2.affine:3.50818 lstm1.W_all:2.69687 lstm1.lstm_nonlin:0.0567778 lstm1.W_rp:1.13963 tdnn3.affine:2.47862 tdnn4.affine:2.55698 lstm2.W_all:1.85868 lstm2.lstm_nonlin:0.0318747 lstm2.W_rp:0.783503 tdnn5.affine:2.0466 tdnn6.affine:2.15461 lstm3.W_all:2.10173 lstm3.lstm_nonlin:0.0495481 lstm3.W_rp:0.816776 output.affine:2.15209 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8462 tdnn2.affine:10.6656 lstm1.W_all:20.5384 lstm1.lstm_nonlin:2.36591 lstm1.W_rp:15.2487 tdnn3.affine:8.23717 tdnn4.affine:7.6417 lstm2.W_all:16.8826 lstm2.lstm_nonlin:1.62 lstm2.W_rp:14.4498 tdnn5.affine:7.82203 tdnn6.affine:7.61887 lstm3.W_all:24.082 lstm3.lstm_nonlin:3.14385 lstm3.W_rp:34.8743 output.affine:31.9918 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.289391 tdnn2.affine:0.32979 lstm1.W_all:0.131278 lstm1.lstm_nonlin:0.0239123 lstm1.W_rp:0.0746498 tdnn3.affine:0.300499 tdnn4.affine:0.334574 lstm2.W_all:0.110088 lstm2.lstm_nonlin:0.0196092 lstm2.W_rp:0.0541854 tdnn5.affine:0.261469 tdnn6.affine:0.282763 lstm3.W_all:0.0872821 lstm3.lstm_nonlin:0.015768 lstm3.W_rp:0.0233995 output.affine:0.067186 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:22:07 KST 2020, elapsed time 1 seconds
