# nnet3-info exp/nnet3/tdnn_lstm1c_sp/421.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/420.mdl exp/nnet3/tdnn_lstm1c_sp/421.mdl 
# Started at Thu Jul 30 12:48:03 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/421.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=9.0045e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03243, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.006 0.009,0.02,0.57,0.73,0.81 0.86,0.94,0.99,1.3), mean=0.468, stddev=0.31], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.23,0.68,0.93,1.1 1.3,1.4,1.4,1.5), mean=0.645, stddev=0.361], bias-{mean,stddev}=-0.00688,0.06083, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.13e+06, self-repaired-proportion=0.187224, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,2e-05,3e-05,4e-05 6e-05,0.0001,0.04,0.09,0.11 0.12,0.14,0.15,0.18), mean=0.0445, stddev=0.0446], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.03 0.05,0.07,0.36,0.59,0.70 0.81,0.88,0.92,0.97), mean=0.344, stddev=0.263], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.009,0.01 0.02,0.03,0.38,0.55,0.67 0.76,0.87,0.94,1.8), mean=0.366, stddev=0.262], oderiv-count=1.16288e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33117.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,1e-05,1e-05,3e-05 6e-05,0.0002,0.04,0.08,0.11 0.12,0.15,0.15,0.18), mean=0.0431, stddev=0.0442], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0001,0.0001,0.0002 0.0003,0.0008,0.07,0.11,0.12 0.13,0.14,0.14,0.17), mean=0.0605, stddev=0.0496]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.0045e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01153, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.34,0.36 0.37,0.39,0.44,0.50,0.54 0.57,0.61,0.66,0.73), mean=0.45, stddev=0.0671], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.003,0.003 0.005,0.01,0.28,0.33,0.37 0.39,0.42,0.47,0.77), mean=0.218, stddev=0.146], bias-{mean,stddev}=-0.03552,0.03802, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.12e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.22,0.25,0.28,0.31 0.32,0.34,0.36,0.44), mean=0.252, stddev=0.0418], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.36,0.37,0.39 0.40,0.41,0.44,0.47,0.49 0.51,0.52,0.53,0.57), mean=0.442, stddev=0.0382], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.05,0.05,0.06,0.07 0.08,0.09,0.09,0.11), mean=0.0548, stddev=0.0112], oderiv-count=1.13517e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32369.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.22,0.25,0.28,0.30 0.33,0.35,0.38,0.46), mean=0.253, stddev=0.0437], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.37 0.39,0.41,0.46,0.51,0.54 0.57,0.60,0.60,0.67), mean=0.462, stddev=0.06]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.0045e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01748, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,5e-07,1e-06,9e-06 0.0002,0.17,0.40,0.58,0.66 0.72,0.79,0.87,1.1), mean=0.382, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.38,0.41 0.49,0.70,0.80,0.89,0.95 1.0,1.1,1.2,1.3), mean=0.779, stddev=0.17], bias-{mean,stddev}=0.001372,0.02483, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.0045e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06186, w_fc-rms=0.02273, w_oc-rms=0.04225, count=1.51e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640916, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.48,0.50,0.53 0.67,0.74,0.76,0.81), mean=0.493, stddev=0.0689], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.20 0.21,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.226, stddev=0.0177] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640916, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.44,0.46 0.46,0.47,0.50,0.52,0.55 0.63,0.69,0.73,0.79), mean=0.506, stddev=0.0538], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.19,0.20 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0156] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00789808, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.85,-0.81,-0.44 -0.27,-0.13,0.0005,0.15,0.28 0.62,0.78,0.85,0.89), mean=0.0147, stddev=0.289], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.26,0.32 0.39,0.45,0.58,0.72,1.0 1.0,1.0,1.0,1.0), mean=0.613, stddev=0.207] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640916, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.56,0.58,0.63), mean=0.461, stddev=0.0415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.019] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00640916, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.77,-0.73,-0.35 -0.20,-0.09,0.0004,0.11,0.21 0.44,0.65,0.78,0.87), mean=0.0108, stddev=0.241], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.30,0.35,0.47 0.70,0.78,0.86,0.92,1.0 1.0,1.0,1.0,1.0), mean=0.836, stddev=0.144] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=7.57282e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.35766e-05, count-zeroing-boundaries=296904
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.105785
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.0045e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.039, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.44,0.46 0.52,0.56,0.85,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.846, stddev=0.273], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0006,0.0008,0.002 0.007,0.38,0.55,0.72,0.88 1.2,1.3,1.4,1.7), mean=0.54, stddev=0.322], bias-{mean,stddev}=0.01281,0.2647, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=9.0045e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01242, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.23,0.24,0.26 0.28,0.29,0.34,0.38,0.42 0.45,0.47,0.49,0.57), mean=0.342, stddev=0.0574], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.16,0.18,0.27,0.36,0.39 0.41,0.43,0.43,0.47), mean=0.269, stddev=0.0893], bias-{mean,stddev}=0.0008677,0.009421, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.76e+05, self-repaired-proportion=0.000660689, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.12 0.14,0.15,0.16,0.20), mean=0.0786, stddev=0.0352], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.13,0.16 0.22,0.30,0.44,0.55,0.61 0.65,0.69,0.71,0.83), mean=0.43, stddev=0.146], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.09,0.09 0.10,0.10,0.12,0.15,0.19 0.22,0.25,0.27,0.33), mean=0.133, stddev=0.0407], oderiv-count=1.11597e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30125.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.12 0.14,0.16,0.16,0.19), mean=0.0781, stddev=0.0345], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.05,0.06,0.07 0.09,0.11,0.13,0.15,0.17 0.18,0.19,0.19,0.22), mean=0.129, stddev=0.0303]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.0045e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008153, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.26,0.27 0.28,0.29,0.32,0.35,0.37 0.39,0.41,0.41,0.45), mean=0.32, stddev=0.0363], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.12,0.13,0.14 0.15,0.15,0.18,0.21,0.23 0.25,0.27,0.30,0.37), mean=0.182, stddev=0.0357], bias-{mean,stddev}=-0.02842,0.01736, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.71e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.20,0.22,0.24,0.27,0.28 0.30,0.31,0.32,0.34), mean=0.243, stddev=0.0312], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.35,0.36,0.38 0.38,0.40,0.42,0.44,0.46 0.47,0.48,0.48,0.49), mean=0.422, stddev=0.0283], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.04,0.04,0.05,0.05), mean=0.0378, stddev=0.00263], oderiv-count=1.0777e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27881.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.24,0.27,0.29 0.30,0.32,0.32,0.36), mean=0.246, stddev=0.0325], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.37,0.38,0.40 0.42,0.43,0.47,0.53,0.55 0.57,0.62,0.64,0.81), mean=0.481, stddev=0.0582]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.0045e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01425, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,5e-06,2e-05 6e-05,0.001,0.32,0.51,0.58 0.63,0.68,0.70,0.88), mean=0.281, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.34 0.41,0.59,0.65,0.72,0.76 0.79,0.88,0.90,1.3), mean=0.637, stddev=0.13], bias-{mean,stddev}=0.004008,0.02915, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.0045e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03785, w_fc-rms=0.01421, w_oc-rms=0.03935, count=1.38e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646298, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.45,0.45 0.46,0.48,0.50,0.51,0.55 0.59,0.63,0.66,0.74), mean=0.502, stddev=0.0404], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0143] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646298, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.46,0.46 0.47,0.49,0.50,0.52,0.54 0.57,0.61,0.62,0.68), mean=0.505, stddev=0.0329], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.238, stddev=0.0134] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00646298, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.75,-0.70,-0.36 -0.22,-0.08,0.0001,0.11,0.27 0.44,0.59,0.64,0.73), mean=0.00698, stddev=0.234], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.37,0.40,0.44 0.48,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.723, stddev=0.213] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646298, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.45,0.47,0.50,0.50,0.51 0.52,0.55,0.56,0.70), mean=0.487, stddev=0.0298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0179] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00646298, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.59,-0.55,-0.29 -0.18,-0.07,0.0001,0.10,0.21 0.35,0.47,0.53,0.62), mean=0.00611, stddev=0.191], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.55,0.58,0.66 0.74,0.80,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.883, stddev=0.113] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.14561e-05, count-zeroing-boundaries=261870
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.105785
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.0045e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03691, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.47,0.53 0.55,0.60,0.81,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.813, stddev=0.217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.003 0.004,0.01,0.57,0.78,0.88 0.99,1.2,1.2,1.4), mean=0.471, stddev=0.364], bias-{mean,stddev}=-0.001919,0.2042, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=9.0045e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01162, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.21,0.22,0.24 0.25,0.27,0.31,0.36,0.40 0.44,0.47,0.48,0.53), mean=0.319, stddev=0.0588], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.24,0.34,0.36 0.38,0.40,0.41,0.44), mean=0.253, stddev=0.0778], bias-{mean,stddev}=0.001081,0.007374, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.92e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.12,0.13,0.16), mean=0.0636, stddev=0.0285], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.13,0.16 0.20,0.29,0.43,0.53,0.58 0.60,0.63,0.65,0.68), mean=0.408, stddev=0.134], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.15,0.18 0.21,0.23,0.24,0.28), mean=0.134, stddev=0.0336], oderiv-count=918336
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25637.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.13,0.14,0.16), mean=0.0665, stddev=0.0286], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.07 0.08,0.09,0.12,0.14,0.15 0.16,0.17,0.17,0.19), mean=0.115, stddev=0.0276]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.0045e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0082, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.23 0.26,0.28,0.32,0.37,0.39 0.40,0.41,0.41,0.44), mean=0.319, stddev=0.0564], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.13 0.14,0.15,0.17,0.21,0.24 0.27,0.31,0.33,0.39), mean=0.182, stddev=0.0439], bias-{mean,stddev}=-0.02298,0.02179, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.2e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.18 0.20,0.23,0.26,0.28,0.30 0.31,0.33,0.34,0.37), mean=0.255, stddev=0.0399], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.34,0.36 0.37,0.39,0.41,0.44,0.45 0.46,0.48,0.48,0.51), mean=0.413, stddev=0.0312], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0316, stddev=0.00321], oderiv-count=954080
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23394, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.19 0.21,0.23,0.26,0.29,0.31 0.32,0.34,0.36,0.43), mean=0.26, stddev=0.0415], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.25,0.35 0.40,0.45,0.52,0.57,0.61 0.64,0.66,0.70,1.0), mean=0.509, stddev=0.0914]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.0045e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02059, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.28 0.29,0.34,0.48,0.66,0.72 0.77,0.83,0.89,0.95), mean=0.5, stddev=0.16], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.55,0.59,0.68 0.75,0.78,0.85,1.1,1.2 1.3,1.4,1.5,1.9), mean=0.918, stddev=0.197], bias-{mean,stddev}=0.01432,0.01727, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.0045e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.09957, w_fc-rms=0.0425, w_oc-rms=0.06908, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652791, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.58,0.59,0.61 0.63,0.66,0.70,0.74,0.77 0.79,0.82,0.83,0.85), mean=0.702, stddev=0.0539], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.174, stddev=0.0182] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652791, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.52,0.55,0.56 0.58,0.60,0.64,0.68,0.74 0.78,0.81,0.83,0.88), mean=0.648, stddev=0.0635], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.16,0.17,0.19,0.20,0.21 0.21,0.21,0.22,0.22), mean=0.187, stddev=0.0205] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0180851, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.81,-0.72,-0.56 -0.43,-0.29,-0.008,0.27,0.40 0.54,0.72,0.79,0.89), mean=-0.0105, stddev=0.336], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.22,0.25 0.30,0.36,0.42,0.46,0.48 0.50,0.52,0.53,0.55), mean=0.409, stddev=0.0712] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652791, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.51,0.53 0.56,0.59,0.63,0.67,0.69 0.71,0.77,0.79,0.88), mean=0.632, stddev=0.0564], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.19,0.20,0.20,0.20), mean=0.175, stddev=0.0163] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0119378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.78,-0.71,-0.56 -0.41,-0.28,-0.008,0.25,0.35 0.56,0.72,0.78,0.88), mean=-0.0122, stddev=0.321], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.24,0.26,0.32 0.40,0.49,0.58,0.64,0.66 0.67,0.69,0.70,0.74), mean=0.556, stddev=0.103] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.49039e-06, count-zeroing-boundaries=222698
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.105785
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.0045e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08789, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.1,1.1 1.2,1.2,1.7,2.6,2.6 2.7,2.8,2.9,3.0), mean=1.9, stddev=0.626], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.96,1.1,1.1 1.2,1.2,1.3,1.5,1.8 1.9,2.0,2.0,2.1), mean=1.4, stddev=0.235], bias-{mean,stddev}=-0.04216,0.5124, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=9.0045e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04157, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.57,0.59 0.60,0.62,0.65,0.70,0.73 0.76,0.80,0.87,2.2), mean=0.665, stddev=0.082], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.0,1.1 1.1,1.2,1.6,2.4,2.5 2.6,2.6,2.6,2.7), mean=1.81, stddev=0.589], bias-{mean,stddev}=4.285e-09,0.024, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0167, stddev=0.0139], oderiv-count=569600
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/420.mdl exp/nnet3/tdnn_lstm1c_sp/421.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.01097 tdnn2.affine:2.78803 lstm1.W_all:2.10614 lstm1.lstm_nonlin:0.0424497 lstm1.W_rp:0.941317 tdnn3.affine:1.91987 tdnn4.affine:1.98221 lstm2.W_all:1.43362 lstm2.lstm_nonlin:0.0223328 lstm2.W_rp:0.643811 tdnn5.affine:1.60308 tdnn6.affine:1.73969 lstm3.W_all:1.90038 lstm3.lstm_nonlin:0.0457412 lstm3.W_rp:0.694019 output.affine:1.62777 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8828 tdnn2.affine:10.4503 lstm1.W_all:20.3518 lstm1.lstm_nonlin:1.78523 lstm1.W_rp:14.9622 tdnn3.affine:7.91156 tdnn4.affine:7.38219 lstm2.W_all:16.6262 lstm2.lstm_nonlin:1.28655 lstm2.W_rp:13.9661 tdnn5.affine:7.40184 tdnn6.affine:7.42113 lstm3.W_all:23.9631 lstm3.lstm_nonlin:2.92847 lstm3.W_rp:33.3622 output.affine:30.7689 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.233534 tdnn2.affine:0.266419 lstm1.W_all:0.103436 lstm1.lstm_nonlin:0.0236987 lstm1.W_rp:0.0628948 tdnn3.affine:0.242676 tdnn4.affine:0.268561 lstm2.W_all:0.0862486 lstm2.lstm_nonlin:0.0172965 lstm2.W_rp:0.0460976 tdnn5.affine:0.216782 tdnn6.affine:0.234788 lstm3.W_all:0.0792854 lstm3.lstm_nonlin:0.0155694 lstm3.W_rp:0.0207794 output.affine:0.0528507 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:48:03 KST 2020, elapsed time 0 seconds
