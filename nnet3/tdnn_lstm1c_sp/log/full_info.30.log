# nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/30.mdl 
# Started at Thu Jul 30 10:13:00 KST 2020
#
nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/30.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000273638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03117, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.03,0.27,0.56,0.65,0.70 0.75,0.84,0.89,1.1), mean=0.487, stddev=0.233], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.15,0.15 0.18,0.21,0.59,0.82,1.2 1.4,1.6,1.7,1.8), mean=0.599, stddev=0.382], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.06,0.09,0.32,0.80,1.3 1.7,2.0,2.1,2.4), mean=0.496, stddev=0.509], bias-{mean,stddev}=-0.003779,0.05809, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.14e+06, self-repaired-proportion=0.154748, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,1e-06,6e-06,4e-05 0.0001,0.003,0.06,0.09,0.10 0.11,0.13,0.15,0.18), mean=0.0569, stddev=0.0382], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0008,0.002,0.01 0.03,0.13,0.45,0.58,0.66 0.74,0.83,0.87,0.91), mean=0.4, stddev=0.23], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.04 0.07,0.25,0.33,0.44,0.49 0.55,0.62,0.67,0.77), mean=0.328, stddev=0.144], oderiv-count=1.1177e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33145.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,9e-07,2e-06,4e-06 2e-05,0.003,0.06,0.08,0.10 0.12,0.14,0.16,0.18), mean=0.0543, stddev=0.0391], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,4e-05,6e-05,0.0001 0.0004,0.01,0.10,0.12,0.13 0.13,0.15,0.15,0.17), mean=0.0814, stddev=0.0459]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000273638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01311, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.40,0.43 0.45,0.47,0.51,0.56,0.58 0.61,0.63,0.65,0.71), mean=0.515, stddev=0.0554], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.008,0.01 0.02,0.16,0.32,0.36,0.38 0.40,0.43,0.45,0.65), mean=0.272, stddev=0.124], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.08 0.09,0.13,0.26,0.57,0.87 1.2,1.4,1.5,2.3), mean=0.386, stddev=0.346], bias-{mean,stddev}=-0.001552,0.02781, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.62e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.30 0.31,0.32,0.35,0.38,0.40 0.42,0.45,0.46,0.55), mean=0.354, stddev=0.0386], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.40,0.41 0.42,0.43,0.46,0.49,0.50 0.52,0.52,0.53,0.55), mean=0.46, stddev=0.031], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.041, stddev=0.00814], oderiv-count=1.1143e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32423.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.28,0.28 0.30,0.31,0.34,0.38,0.41 0.42,0.45,0.48,0.54), mean=0.349, stddev=0.0434], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.49,0.50,0.52 0.54,0.57,0.62,0.68,0.70 0.74,0.77,0.80,0.88), mean=0.624, stddev=0.0655]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000273638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0177, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.09 0.15,0.22,0.38,0.58,0.68 0.76,0.86,0.92,1.1), mean=0.403, stddev=0.203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.39,0.43 0.49,0.69,0.83,0.91,0.95 0.99,1.0,1.1,1.3), mean=0.79, stddev=0.166], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.21,0.43,0.85,1.3 1.8,2.3,2.5,3.4), mean=0.589, stddev=0.552], bias-{mean,stddev}=-0.001349,0.03848, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000273638, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0415, w_fc-rms=0.05404, w_oc-rms=0.05692, count=1.44e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00610817, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.43,0.44 0.45,0.46,0.49,0.53,0.58 0.62,0.65,0.68,0.72), mean=0.501, stddev=0.0541], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0146] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00610817, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.36,0.38 0.40,0.42,0.47,0.54,0.62 0.69,0.77,0.81,0.87), mean=0.49, stddev=0.0931], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.17,0.19 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0215] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00993083, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.80,-0.78,-0.67 -0.41,-0.25,0.01,0.29,0.41 0.64,0.72,0.77,0.85), mean=0.0113, stddev=0.342], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.26,0.29,0.35 0.39,0.45,0.57,0.69,0.80 0.88,0.94,0.94,1.0), mean=0.583, stddev=0.153] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00610817, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.41 0.42,0.44,0.47,0.51,0.53 0.55,0.59,0.61,0.71), mean=0.476, stddev=0.0462], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.22,0.24,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0171] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0162353, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.82,-0.79,-0.63 -0.34,-0.20,-0.003,0.22,0.34 0.60,0.71,0.77,0.91), mean=0.00566, stddev=0.318], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.22,0.26,0.40 0.53,0.71,0.83,0.88,0.91 0.94,0.97,0.98,1.0), mean=0.776, stddev=0.161] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=297291
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000273638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03193, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.40 0.42,0.46,0.65,0.93,0.99 1.0,1.1,1.1,1.2), mean=0.693, stddev=0.225], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.16 0.25,0.34,0.47,0.62,0.69 0.79,0.90,0.97,1.3), mean=0.481, stddev=0.185], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.009,0.01 0.01,0.02,0.04,0.25,1.4 2.0,2.4,2.7,3.2), mean=0.321, stddev=0.653], bias-{mean,stddev}=0.002923,0.05203, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000273638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01349, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.25,0.27 0.28,0.30,0.36,0.43,0.47 0.51,0.55,0.57,0.72), mean=0.369, stddev=0.0751], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.17,0.19,0.27,0.39,0.43 0.45,0.49,0.49,0.52), mean=0.29, stddev=0.101], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.0009,0.001,0.001 0.002,0.003,0.01,0.19,0.63 1.0,1.4,1.4,1.6), mean=0.165, stddev=0.339], bias-{mean,stddev}=-0.001978,0.01706, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.68e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.08 0.09,0.11,0.15,0.19,0.21 0.22,0.25,0.26,0.32), mean=0.153, stddev=0.0445], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.25,0.27 0.32,0.38,0.49,0.58,0.62 0.64,0.67,0.70,0.73), mean=0.48, stddev=0.114], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.06,0.06,0.07,0.08 0.09,0.10,0.10,0.13), mean=0.0663, stddev=0.0125], oderiv-count=1.17158e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30258.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.07 0.09,0.11,0.15,0.19,0.21 0.23,0.25,0.26,0.30), mean=0.148, stddev=0.0473], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.18 0.20,0.21,0.24,0.27,0.29 0.31,0.33,0.34,0.36), mean=0.242, stddev=0.0388]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000273638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009806, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.31,0.32 0.33,0.35,0.38,0.42,0.44 0.46,0.47,0.49,0.53), mean=0.385, stddev=0.0402], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.16,0.17 0.18,0.19,0.22,0.25,0.27 0.28,0.30,0.31,0.37), mean=0.221, stddev=0.0351], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.12,0.21,0.42,0.65 0.87,1.1,1.1,1.4), mean=0.299, stddev=0.246], bias-{mean,stddev}=-0.008616,0.01579, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.74e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.25 0.26,0.28,0.31,0.34,0.37 0.39,0.40,0.41,0.47), mean=0.313, stddev=0.0396], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.38,0.39 0.41,0.42,0.44,0.47,0.48 0.49,0.50,0.51,0.54), mean=0.445, stddev=0.0295], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.0289, stddev=0.00262], oderiv-count=1.06848e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28093.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.25 0.26,0.28,0.31,0.35,0.37 0.39,0.41,0.43,0.53), mean=0.312, stddev=0.0441], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.47,0.49 0.51,0.54,0.59,0.65,0.69 0.71,0.75,0.78,0.85), mean=0.595, stddev=0.07]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000273638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0137, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.06,0.10,0.27,0.48,0.57 0.63,0.68,0.72,1.2), mean=0.293, stddev=0.19], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.28,0.31 0.36,0.53,0.64,0.71,0.75 0.78,0.83,0.87,0.93), mean=0.609, stddev=0.14], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.12,0.27,0.59,1.0 1.5,1.9,2.2,3.0), mean=0.423, stddev=0.46], bias-{mean,stddev}=-0.001559,0.03829, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000273638, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03837, w_fc-rms=0.04197, w_oc-rms=0.0415, count=1.32e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616052, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.42,0.43,0.45 0.46,0.47,0.49,0.52,0.54 0.57,0.61,0.62,0.65), mean=0.496, stddev=0.0377], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0149] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616052, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.41 0.42,0.44,0.48,0.51,0.54 0.60,0.67,0.68,0.75), mean=0.485, stddev=0.0577], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.238, stddev=0.0138] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00807176, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.70,-0.64,-0.48 -0.34,-0.19,0.008,0.20,0.35 0.50,0.59,0.67,0.76), mean=0.00622, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.44,0.45,0.50 0.53,0.57,0.66,0.84,0.93 0.97,0.98,0.99,1.0), mean=0.692, stddev=0.149] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616052, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.42,0.43 0.44,0.46,0.48,0.51,0.53 0.55,0.59,0.61,0.62), mean=0.486, stddev=0.0365], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0153] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00616052, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.68,-0.65,-0.42 -0.29,-0.16,0.01,0.17,0.32 0.46,0.59,0.68,0.84), mean=0.00995, stddev=0.254], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.40,0.44,0.63 0.75,0.80,0.87,0.93,0.97 0.99,0.99,0.99,1.0), mean=0.852, stddev=0.113] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=262200
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000273638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0284, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.44,0.45 0.48,0.50,0.60,0.76,0.81 0.86,0.91,0.92,0.96), mean=0.634, stddev=0.134], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.07 0.10,0.18,0.41,0.59,0.67 0.75,0.89,0.93,1.1), mean=0.402, stddev=0.219], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.02,0.04,0.50,1.3 1.7,1.9,2.1,2.5), mean=0.311, stddev=0.568], bias-{mean,stddev}=0.0005513,0.08367, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000273638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01257, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.20,0.22,0.23 0.24,0.27,0.32,0.40,0.45 0.53,0.60,0.62,0.70), mean=0.339, stddev=0.0927], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.19 0.20,0.22,0.27,0.35,0.37 0.39,0.41,0.44,0.47), mean=0.279, stddev=0.0654], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0005,0.0006,0.0008 0.001,0.002,0.008,0.24,0.65 0.97,1.2,1.3,1.4), mean=0.161, stddev=0.312], bias-{mean,stddev}=-0.001377,0.01934, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0.00333868, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.02,0.02,0.05 0.06,0.07,0.10,0.14,0.16 0.17,0.18,0.19,0.22), mean=0.106, stddev=0.0377], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.13,0.14,0.20 0.26,0.31,0.43,0.54,0.59 0.62,0.65,0.68,0.70), mean=0.422, stddev=0.128], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.05 0.06,0.06,0.07,0.08,0.10 0.11,0.13,0.13,0.16), mean=0.0745, stddev=0.0184], oderiv-count=944640
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25928.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.02,0.03,0.04 0.05,0.07,0.10,0.14,0.15 0.17,0.18,0.19,0.22), mean=0.103, stddev=0.0382], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.07,0.08,0.13 0.14,0.16,0.18,0.22,0.23 0.25,0.27,0.27,0.30), mean=0.184, stddev=0.0398]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000273638, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009581, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.30,0.31 0.32,0.33,0.37,0.41,0.44 0.46,0.50,0.52,0.61), mean=0.375, stddev=0.0494], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.12,0.13,0.15 0.16,0.17,0.21,0.25,0.27 0.30,0.33,0.38,0.47), mean=0.213, stddev=0.0503], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.10,0.17,0.41,0.68 0.89,1.1,1.1,1.2), mean=0.277, stddev=0.258], bias-{mean,stddev}=-0.01208,0.01636, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.29e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.25 0.26,0.28,0.31,0.35,0.37 0.38,0.40,0.42,0.57), mean=0.317, stddev=0.042], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.37 0.38,0.40,0.42,0.45,0.46 0.47,0.48,0.49,0.53), mean=0.424, stddev=0.0304], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0246, stddev=0.00258], oderiv-count=1.03488e+06
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23763.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.26,0.28,0.32,0.35,0.37 0.39,0.42,0.44,0.69), mean=0.318, stddev=0.0489], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.47,0.48,0.50 0.52,0.55,0.61,0.69,0.73 0.76,0.80,0.87,0.97), mean=0.62, stddev=0.0845]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000273638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01921, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.21 0.27,0.33,0.43,0.60,0.73 0.79,0.84,0.88,1.7), mean=0.459, stddev=0.171], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.60,0.62,0.64 0.66,0.68,0.75,1.0,1.3 1.3,1.4,1.4,1.6), mean=0.846, stddev=0.227], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.06 0.12,0.16,0.31,0.83,1.7 2.1,2.5,2.7,4.1), mean=0.581, stddev=0.656], bias-{mean,stddev}=0.008271,0.04547, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000273638, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0447, w_fc-rms=0.05587, w_oc-rms=0.06417, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622371, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.47 0.49,0.51,0.57,0.62,0.64 0.66,0.67,0.68,0.70), mean=0.566, stddev=0.0586], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.19 0.19,0.20,0.21,0.22,0.22 0.23,0.23,0.23,0.24), mean=0.207, stddev=0.0135] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622371, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.46,0.47 0.49,0.52,0.58,0.63,0.65 0.68,0.71,0.73,0.81), mean=0.577, stddev=0.0646], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.17,0.18 0.19,0.19,0.21,0.22,0.23 0.23,0.24,0.24,0.24), mean=0.208, stddev=0.0172] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.008195, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.76,-0.69,-0.47 -0.34,-0.22,0.004,0.20,0.36 0.45,0.60,0.69,0.81), mean=-0.000114, stddev=0.281], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.26,0.29,0.33 0.37,0.41,0.46,0.51,0.55 0.58,0.61,0.64,0.71), mean=0.461, stddev=0.0729] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622371, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.52,0.52,0.54 0.56,0.58,0.63,0.68,0.70 0.71,0.73,0.74,0.77), mean=0.631, stddev=0.052], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.16,0.17 0.17,0.18,0.19,0.20,0.21 0.21,0.22,0.22,0.23), mean=0.19, stddev=0.0137] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0084168, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.78,-0.69,-0.47 -0.31,-0.19,0.003,0.19,0.32 0.48,0.61,0.70,0.84), mean=0.0011, stddev=0.273], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.30,0.35,0.46 0.52,0.58,0.66,0.70,0.73 0.74,0.76,0.77,0.82), mean=0.639, stddev=0.0926] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222973
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000273638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06573, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.5,1.7,1.7 1.8,1.9,1.9,2.0), mean=1.49, stddev=0.193], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.56,0.64,0.74 0.80,0.88,1.1,1.2,1.3 1.3,1.4,1.4,1.7), mean=1.04, stddev=0.184], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.06,0.22,2.4,2.9 3.2,3.5,3.9,4.4), mean=0.917, stddev=1.19], bias-{mean,stddev}=0.002313,0.1115, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000273638, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04112, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.51,0.53,0.55 0.57,0.59,0.64,0.71,0.75 0.79,0.84,0.87,2.3), mean=0.655, stddev=0.104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.6,1.7,1.9,2.0,2.1 2.2,2.3,2.4,2.5), mean=1.87, stddev=0.208], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.05,0.14,2.9,3.9 4.3,4.7,4.9,5.3), mean=1.06, stddev=1.56], bias-{mean,stddev}=4.929e-09,0.03179, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0138], oderiv-count=601600
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:13:01 KST 2020, elapsed time 1 seconds
