# nnet3-info exp/nnet3/tdnn_lstm1c_sp/96.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/95.mdl exp/nnet3/tdnn_lstm1c_sp/96.mdl 
# Started at Thu Jul 30 10:39:04 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/96.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000221956, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03031, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.009,0.01,0.02 0.07,0.42,0.52,0.62,0.68 0.73,0.81,0.87,1.2), mean=0.482, stddev=0.208], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.15 0.17,0.21,0.58,0.81,1.1 1.4,1.5,1.6,1.8), mean=0.586, stddev=0.366], bias-{mean,stddev}=0.003811,0.05256, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.18e+06, self-repaired-proportion=0.119925, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,2e-06,5e-06,4e-05 0.0003,0.03,0.06,0.09,0.10 0.11,0.12,0.13,0.18), mean=0.058, stddev=0.0346], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0009,0.002,0.01 0.05,0.26,0.47,0.63,0.73 0.77,0.82,0.89,0.94), mean=0.443, stddev=0.227], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.05 0.12,0.28,0.37,0.46,0.52 0.56,0.63,0.71,1.1), mean=0.359, stddev=0.147], oderiv-count=1.12218e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32344.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,1e-06,2e-06,1e-05 0.0001,0.02,0.06,0.08,0.10 0.11,0.13,0.13,0.17), mean=0.0553, stddev=0.0344], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,4e-05,9e-05,0.0002 0.001,0.06,0.09,0.11,0.11 0.12,0.13,0.13,0.15), mean=0.0786, stddev=0.038]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000221956, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01251, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.41 0.43,0.45,0.49,0.53,0.56 0.59,0.62,0.64,0.72), mean=0.491, stddev=0.0544], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.008,0.01 0.04,0.24,0.29,0.33,0.35 0.37,0.41,0.42,0.68), mean=0.264, stddev=0.108], bias-{mean,stddev}=-0.00102,0.02747, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.28,0.29 0.30,0.32,0.34,0.38,0.41 0.43,0.46,0.47,0.52), mean=0.35, stddev=0.042], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.42,0.44,0.46,0.48,0.49 0.50,0.52,0.52,0.54), mean=0.459, stddev=0.0274], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.0424, stddev=0.00824], oderiv-count=1.01843e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31622.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.30,0.31,0.34,0.38,0.41 0.44,0.47,0.49,0.58), mean=0.348, stddev=0.0473], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.47,0.48,0.50 0.52,0.55,0.60,0.67,0.71 0.74,0.79,0.83,0.99), mean=0.612, stddev=0.0771]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000221956, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0173, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.002,0.004,0.02 0.12,0.22,0.38,0.56,0.66 0.73,0.81,0.88,1.2), mean=0.391, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.37,0.41,0.45 0.50,0.70,0.80,0.89,0.93 0.99,1.0,1.1,1.2), mean=0.774, stddev=0.155], bias-{mean,stddev}=-0.002009,0.02114, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000221956, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02266, w_fc-rms=0.0363, w_oc-rms=0.04789, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613173, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.43,0.44 0.45,0.46,0.49,0.52,0.57 0.60,0.66,0.68,0.71), mean=0.497, stddev=0.0515], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0147] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613173, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.37,0.40 0.42,0.44,0.48,0.53,0.60 0.67,0.75,0.80,0.85), mean=0.497, stddev=0.0824], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.16,0.19 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0197] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00804301, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.81,-0.71,-0.58 -0.35,-0.20,-0.0009,0.21,0.34 0.55,0.73,0.77,0.83), mean=0.00107, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.29,0.31,0.35 0.40,0.48,0.58,0.71,0.88 0.99,1.0,1.0,1.0), mean=0.606, stddev=0.17] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613173, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.40,0.41 0.43,0.44,0.47,0.50,0.52 0.55,0.58,0.59,0.64), mean=0.475, stddev=0.0415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.20,0.21,0.22,0.23,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.017] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0210794, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.87,-0.71,-0.56 -0.33,-0.18,-0.001,0.18,0.33 0.52,0.71,0.81,0.89), mean=-0.00198, stddev=0.293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.20,0.25,0.46 0.57,0.72,0.83,0.88,0.94 1.0,1.0,1.0,1.0), mean=0.788, stddev=0.16] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.34192e-06, count-zeroing-boundaries=299229
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000221956, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.23,0.27,0.45,0.99,1.1 1.1,1.1,1.2,1.3), mean=0.62, stddev=0.347], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.03,0.07 0.19,0.34,0.46,0.59,0.69 0.81,0.90,0.99,1.1), mean=0.462, stddev=0.197], bias-{mean,stddev}=-0.002296,0.05033, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000221956, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01265, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.22,0.23 0.26,0.28,0.34,0.40,0.44 0.48,0.51,0.52,0.68), mean=0.345, stddev=0.0739], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.09,0.10,0.20,0.40,0.44 0.48,0.51,0.52,0.56), mean=0.249, stddev=0.146], bias-{mean,stddev}=-0.003178,0.02887, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.43e+05, self-repaired-proportion=0.000105374, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.05,0.05,0.06 0.08,0.09,0.13,0.17,0.19 0.20,0.21,0.22,0.27), mean=0.131, stddev=0.0409], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.20,0.23,0.26 0.30,0.37,0.50,0.60,0.64 0.68,0.70,0.71,0.78), mean=0.485, stddev=0.125], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.07,0.07,0.08,0.09,0.10 0.11,0.12,0.13,0.24), mean=0.0804, stddev=0.0158], oderiv-count=1.14522e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29457.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.05,0.06 0.07,0.09,0.12,0.16,0.18 0.19,0.20,0.22,0.27), mean=0.124, stddev=0.0388], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.14,0.15 0.16,0.18,0.20,0.23,0.25 0.26,0.28,0.29,0.34), mean=0.202, stddev=0.0343]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000221956, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009281, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.31 0.32,0.33,0.36,0.39,0.41 0.43,0.45,0.47,0.62), mean=0.365, stddev=0.0388], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.17,0.18,0.21,0.24,0.25 0.27,0.28,0.29,0.39), mean=0.209, stddev=0.0333], bias-{mean,stddev}=-0.01023,0.0163, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.03e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.25,0.26,0.29,0.32,0.34 0.36,0.38,0.39,0.51), mean=0.295, stddev=0.0386], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.39 0.40,0.41,0.44,0.47,0.48 0.50,0.51,0.51,0.52), mean=0.441, stddev=0.0329], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0314, stddev=0.00272], oderiv-count=1.0521e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27292.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.22,0.23 0.24,0.25,0.29,0.32,0.34 0.35,0.37,0.40,0.53), mean=0.288, stddev=0.0398], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.46,0.47 0.49,0.51,0.55,0.60,0.64 0.67,0.70,0.80,0.97), mean=0.561, stddev=0.0655]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000221956, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01353, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,6e-05,8e-05,0.0002 0.0006,0.007,0.28,0.47,0.56 0.61,0.66,0.69,1.0), mean=0.269, stddev=0.216], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.28,0.31 0.38,0.53,0.64,0.69,0.72 0.76,0.81,0.85,0.99), mean=0.603, stddev=0.131], bias-{mean,stddev}=-0.003452,0.02346, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000221956, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01367, w_fc-rms=0.0174, w_oc-rms=0.02248, count=1.34e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00618327, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.50,0.50,0.53 0.56,0.58,0.61,0.64), mean=0.495, stddev=0.0324], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0156] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00618327, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.43,0.45,0.50,0.50,0.52 0.55,0.59,0.65,0.69), mean=0.484, stddev=0.0414], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0123] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00898322, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.62,-0.55,-0.32 -0.22,-0.11,0.001,0.12,0.26 0.38,0.50,0.59,0.75), mean=0.00744, stddev=0.21], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.44,0.47,0.52 0.54,0.57,0.65,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.737, stddev=0.191] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00618327, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.42,0.43 0.44,0.46,0.50,0.50,0.52 0.54,0.57,0.59,0.64), mean=0.487, stddev=0.0334], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0165] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00618327, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.61,-0.54,-0.30 -0.21,-0.11,0.002,0.12,0.23 0.36,0.51,0.56,0.78), mean=0.00757, stddev=0.205], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.57,0.69 0.77,0.82,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.884, stddev=0.11] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.75e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=263919
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000221956, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02821, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.35,0.37 0.39,0.41,0.57,0.83,0.87 0.89,0.92,0.95,1.0), mean=0.613, stddev=0.197], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.005 0.009,0.02,0.45,0.60,0.67 0.75,0.83,0.86,1.0), mean=0.37, stddev=0.265], bias-{mean,stddev}=-0.00752,0.09723, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000221956, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01169, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.18,0.22 0.23,0.25,0.30,0.37,0.42 0.50,0.55,0.57,0.63), mean=0.316, stddev=0.0821], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.15,0.17,0.24,0.34,0.37 0.39,0.42,0.43,0.47), mean=0.253, stddev=0.0839], bias-{mean,stddev}=0.003414,0.01852, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.02e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.04 0.05,0.06,0.09,0.11,0.13 0.14,0.15,0.16,0.17), mean=0.0858, stddev=0.0317], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.19 0.24,0.31,0.44,0.55,0.60 0.63,0.66,0.67,0.76), mean=0.428, stddev=0.135], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.07,0.08,0.09,0.11,0.12 0.13,0.15,0.16,0.18), mean=0.0921, stddev=0.0197], oderiv-count=1.00083e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25127.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.06,0.08,0.11,0.13 0.14,0.15,0.16,0.18), mean=0.0849, stddev=0.033], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.10 0.12,0.13,0.15,0.17,0.18 0.20,0.21,0.22,0.26), mean=0.148, stddev=0.03]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000221956, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008933, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.28 0.29,0.30,0.34,0.39,0.42 0.44,0.45,0.47,0.51), mean=0.349, stddev=0.0489], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.12,0.14 0.15,0.16,0.19,0.23,0.25 0.28,0.32,0.34,0.42), mean=0.199, stddev=0.045], bias-{mean,stddev}=-0.01175,0.01627, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.13e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.22 0.25,0.27,0.30,0.33,0.34 0.36,0.37,0.38,0.43), mean=0.295, stddev=0.0382], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.36 0.37,0.39,0.41,0.45,0.46 0.48,0.49,0.50,0.51), mean=0.416, stddev=0.0343], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0263, stddev=0.0027], oderiv-count=949760
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=22962.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.24,0.26,0.30,0.33,0.35 0.37,0.39,0.40,0.44), mean=0.297, stddev=0.0423], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.47 0.49,0.51,0.58,0.65,0.70 0.73,0.76,0.79,0.86), mean=0.587, stddev=0.0803]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000221956, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01962, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.25 0.32,0.36,0.43,0.63,0.75 0.80,0.84,0.86,1.3), mean=0.472, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.59,0.61 0.63,0.65,0.74,1.0,1.4 1.4,1.5,1.5,1.7), mean=0.851, stddev=0.275], bias-{mean,stddev}=0.008034,0.0227, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000221956, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0309, w_fc-rms=0.04327, w_oc-rms=0.0606, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00624546, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.46,0.48 0.50,0.52,0.58,0.63,0.66 0.68,0.70,0.71,0.81), mean=0.577, stddev=0.064], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.19,0.20,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.205, stddev=0.00968] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00624546, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.47,0.48,0.49 0.50,0.54,0.59,0.63,0.66 0.70,0.74,0.75,0.89), mean=0.59, stddev=0.0633], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.17,0.17,0.18 0.19,0.19,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.204, stddev=0.0136] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00880244, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.82,-0.75,-0.56 -0.34,-0.21,-0.004,0.20,0.33 0.50,0.72,0.81,0.88), mean=-0.00753, stddev=0.297], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.23,0.27,0.32 0.36,0.39,0.44,0.48,0.50 0.51,0.52,0.53,0.60), mean=0.434, stddev=0.0596] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00815652, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.55,0.55,0.57 0.59,0.61,0.65,0.69,0.71 0.73,0.75,0.77,0.95), mean=0.653, stddev=0.0507], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.15,0.15,0.16 0.17,0.18,0.19,0.19,0.20 0.20,0.20,0.21,0.21), mean=0.184, stddev=0.014] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0248808, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.89,-0.80,-0.56 -0.32,-0.19,-0.005,0.19,0.32 0.49,0.75,0.87,0.97), mean=-0.00571, stddev=0.301], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.17,0.20,0.36 0.46,0.55,0.64,0.69,0.70 0.72,0.72,0.73,0.74), mean=0.606, stddev=0.115] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=224446
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000221956, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06982, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.2,1.2,1.6,1.9,1.9 2.0,2.0,2.1,2.2), mean=1.56, stddev=0.311], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.65,0.78,0.88 0.93,1.0,1.1,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.12, stddev=0.15], bias-{mean,stddev}=0.002876,0.07817, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000221956, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04026, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.51,0.53,0.55 0.56,0.59,0.63,0.69,0.73 0.76,0.82,0.85,2.0), mean=0.643, stddev=0.0895], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.4,1.5,1.8,2.1,2.2 2.3,2.4,2.4,2.6), mean=1.82, stddev=0.324], bias-{mean,stddev}=4.533e-09,0.02408, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.41), mean=0.0168, stddev=0.0138], oderiv-count=622080
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/95.mdl exp/nnet3/tdnn_lstm1c_sp/96.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.25177 tdnn2.affine:8.40707 lstm1.W_all:7.14239 lstm1.lstm_nonlin:0.138505 lstm1.W_rp:2.87387 tdnn3.affine:5.1352 tdnn4.affine:5.94981 lstm2.W_all:4.68158 lstm2.lstm_nonlin:0.0601129 lstm2.W_rp:1.97064 tdnn5.affine:4.15664 tdnn6.affine:4.94919 lstm3.W_all:6.38353 lstm3.lstm_nonlin:0.141434 lstm3.W_rp:2.5345 output.affine:5.56733 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.0298 tdnn2.affine:11.2849 lstm1.W_all:20.1416 lstm1.lstm_nonlin:1.46453 lstm1.W_rp:11.4875 tdnn3.affine:8.0814 tdnn4.affine:8.37091 lstm2.W_all:15.7667 lstm2.lstm_nonlin:0.719317 lstm2.W_rp:10.493 tdnn5.affine:7.45667 tdnn6.affine:8.05907 lstm3.W_all:22.8347 lstm3.lstm_nonlin:1.83839 lstm3.W_rp:25.7034 output.affine:29.7973 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.688433 tdnn2.affine:0.750706 lstm1.W_all:0.354191 lstm1.lstm_nonlin:0.0934426 lstm1.W_rp:0.2488 tdnn3.affine:0.637232 tdnn4.affine:0.718028 lstm2.W_all:0.296653 lstm2.lstm_nonlin:0.0835544 lstm2.W_rp:0.18751 tdnn5.affine:0.558554 tdnn6.affine:0.61825 lstm3.W_all:0.280049 lstm3.lstm_nonlin:0.0770057 lstm3.W_rp:0.0986701 output.affine:0.186814 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:39:04 KST 2020, elapsed time 0 seconds
