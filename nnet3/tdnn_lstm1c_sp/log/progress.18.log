# nnet3-info exp/nnet3/tdnn_lstm1c_sp/18.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/17.mdl exp/nnet3/tdnn_lstm1c_sp/18.mdl 
# Started at Thu Jul 30 10:08:14 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/18.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000284253, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03097, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.01,0.02 0.03,0.10,0.56,0.66,0.72 0.77,0.86,0.90,1.2), mean=0.47, stddev=0.258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.17,0.21,0.59,0.82,1.1 1.4,1.6,1.7,1.7), mean=0.594, stddev=0.382], bias-{mean,stddev}=-0.006819,0.06345, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0.20976, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,3e-06,7e-06,2e-05 7e-05,0.0003,0.06,0.09,0.11 0.12,0.14,0.15,0.17), mean=0.0551, stddev=0.0416], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.001,0.002,0.005 0.02,0.05,0.42,0.58,0.66 0.73,0.81,0.82,0.92), mean=0.37, stddev=0.241], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.03,0.03 0.06,0.17,0.36,0.45,0.52 0.57,0.67,0.73,0.89), mean=0.33, stddev=0.165], oderiv-count=1.1497e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=46127.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-09,4e-07,1e-06,4e-06 3e-05,0.0006,0.06,0.09,0.11 0.13,0.14,0.15,0.19), mean=0.0547, stddev=0.0428], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,3e-05,6e-05,0.0001 0.0004,0.003,0.10,0.12,0.14 0.15,0.16,0.16,0.18), mean=0.0807, stddev=0.0525]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000284253, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01293, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.40,0.42 0.44,0.47,0.51,0.55,0.57 0.59,0.62,0.63,0.69), mean=0.508, stddev=0.0506], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.009,0.01 0.02,0.07,0.31,0.36,0.39 0.41,0.43,0.45,0.65), mean=0.261, stddev=0.137], bias-{mean,stddev}=-0.001407,0.02958, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.16e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.29 0.30,0.32,0.34,0.37,0.39 0.41,0.43,0.44,0.47), mean=0.347, stddev=0.0352], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.44,0.46,0.49,0.51 0.52,0.53,0.53,0.54), mean=0.463, stddev=0.0307], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.0414, stddev=0.00774], oderiv-count=1.17587e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=45205.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.27,0.29 0.30,0.31,0.34,0.38,0.40 0.41,0.44,0.46,0.54), mean=0.346, stddev=0.0405], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.48,0.48,0.51 0.53,0.55,0.60,0.66,0.69 0.73,0.75,0.76,0.90), mean=0.607, stddev=0.0656]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000284253, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01766, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.16 0.19,0.24,0.38,0.57,0.67 0.76,0.84,0.87,1.1), mean=0.41, stddev=0.185], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.41,0.44 0.49,0.70,0.84,0.90,0.95 0.98,1.0,1.0,1.1), mean=0.789, stddev=0.162], bias-{mean,stddev}=-0.0007972,0.1215, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000284253, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1262, w_fc-rms=0.1294, w_oc-rms=0.1247, count=1.44e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00607938, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.42 0.44,0.46,0.49,0.55,0.57 0.60,0.65,0.67,0.72), mean=0.502, stddev=0.0556], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.24 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0138] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00607938, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.35,0.37 0.38,0.41,0.47,0.54,0.61 0.68,0.74,0.78,0.85), mean=0.486, stddev=0.0936], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.17,0.19 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0203] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00652763, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.79,-0.73,-0.64 -0.45,-0.27,0.01,0.31,0.46 0.57,0.68,0.74,0.85), mean=0.0101, stddev=0.351], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.31,0.37 0.40,0.46,0.58,0.69,0.77 0.84,0.90,0.92,0.98), mean=0.579, stddev=0.143] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00607938, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.42,0.44,0.47,0.51,0.54 0.56,0.60,0.63,0.69), mean=0.479, stddev=0.05], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.21,0.22,0.24,0.24 0.24,0.25,0.25,0.25), mean=0.222, stddev=0.0158] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0136995, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.81,-0.74,-0.59 -0.37,-0.21,0.004,0.25,0.38 0.52,0.65,0.75,0.89), mean=0.00575, stddev=0.313], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.22,0.31,0.50 0.58,0.70,0.82,0.88,0.91 0.93,0.96,0.97,0.99), mean=0.777, stddev=0.147] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=299430
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000284253, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03148, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.46,0.48 0.51,0.54,0.70,0.86,0.92 0.94,0.99,1.0,1.1), mean=0.701, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.20 0.26,0.35,0.48,0.61,0.68 0.77,0.85,0.89,1.2), mean=0.48, stddev=0.165], bias-{mean,stddev}=0.01219,0.1203, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000284253, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01354, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.26 0.27,0.30,0.36,0.43,0.47 0.51,0.56,0.58,0.66), mean=0.37, stddev=0.0793], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.20 0.21,0.23,0.29,0.37,0.40 0.42,0.45,0.47,0.51), mean=0.3, stddev=0.074], bias-{mean,stddev}=0.0003743,0.01498, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.61e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.09 0.10,0.12,0.16,0.20,0.22 0.24,0.26,0.28,0.43), mean=0.159, stddev=0.0479], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.18,0.21,0.27 0.32,0.37,0.48,0.59,0.64 0.68,0.72,0.75,0.80), mean=0.482, stddev=0.124], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.06,0.07,0.08 0.09,0.10,0.10,0.14), mean=0.0639, stddev=0.0136], oderiv-count=1.11078e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=42441.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.07,0.08 0.10,0.11,0.16,0.20,0.22 0.24,0.26,0.27,0.41), mean=0.158, stddev=0.0495], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.17,0.19 0.20,0.22,0.25,0.28,0.31 0.32,0.35,0.37,0.42), mean=0.252, stddev=0.044]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000284253, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009775, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.29,0.31 0.33,0.35,0.39,0.42,0.44 0.45,0.47,0.49,0.50), mean=0.383, stddev=0.0446], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.16 0.17,0.19,0.22,0.25,0.27 0.29,0.31,0.32,0.37), mean=0.219, stddev=0.0393], bias-{mean,stddev}=-0.008734,0.01657, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.27 0.28,0.29,0.33,0.36,0.38 0.40,0.41,0.43,0.48), mean=0.328, stddev=0.0395], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.40 0.41,0.42,0.44,0.46,0.48 0.49,0.50,0.50,0.52), mean=0.442, stddev=0.0278], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0269, stddev=0.00317], oderiv-count=1.02618e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39676.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.26 0.27,0.29,0.32,0.36,0.38 0.40,0.43,0.44,0.47), mean=0.326, stddev=0.0413], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.45,0.48 0.52,0.55,0.60,0.66,0.70 0.73,0.77,0.80,0.88), mean=0.606, stddev=0.0732]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000284253, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01409, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.14,0.17,0.29,0.47,0.57 0.62,0.68,0.70,1.2), mean=0.321, stddev=0.161], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.32,0.33,0.35 0.39,0.52,0.66,0.73,0.76 0.80,0.85,0.87,0.92), mean=0.628, stddev=0.135], bias-{mean,stddev}=0.002087,0.1201, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000284253, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1296, w_fc-rms=0.1275, w_oc-rms=0.1265, count=1.32e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613594, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.46,0.49,0.54,0.56 0.59,0.61,0.62,0.66), mean=0.499, stddev=0.0473], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0147] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613594, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.38,0.40 0.41,0.43,0.48,0.53,0.57 0.63,0.69,0.74,0.78), mean=0.489, stddev=0.0704], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.19,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0155] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00613594, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.72,-0.67,-0.47 -0.37,-0.24,-0.01,0.26,0.37 0.51,0.63,0.72,0.77), mean=0.0038, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.39,0.44,0.47 0.50,0.55,0.65,0.80,0.87 0.92,0.95,0.95,0.98), mean=0.668, stddev=0.139] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613594, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.40,0.41,0.42 0.43,0.45,0.48,0.52,0.55 0.59,0.61,0.63,0.66), mean=0.488, stddev=0.0479], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0143] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00613594, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.76,-0.65,-0.41 -0.30,-0.17,-0.003,0.19,0.32 0.47,0.65,0.74,0.87), mean=0.00815, stddev=0.266], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.35,0.38,0.56 0.73,0.78,0.85,0.92,0.95 0.97,0.98,0.98,0.99), mean=0.832, stddev=0.124] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.75e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=264006
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000284253, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02872, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.47,0.47,0.49 0.51,0.55,0.63,0.74,0.78 0.83,0.89,0.93,0.95), mean=0.646, stddev=0.108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.18,0.24,0.41,0.58,0.68 0.75,0.86,0.90,1.1), mean=0.422, stddev=0.192], bias-{mean,stddev}=-0.001233,0.1223, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000284253, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01266, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.16,0.20,0.23 0.25,0.27,0.32,0.40,0.46 0.52,0.61,0.64,0.72), mean=0.34, stddev=0.0955], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.21,0.23,0.28,0.34,0.36 0.39,0.40,0.42,0.47), mean=0.283, stddev=0.0571], bias-{mean,stddev}=-0.001933,0.01455, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.55e+05, self-repaired-proportion=0.00994695, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.006,0.02,0.05 0.06,0.08,0.13,0.17,0.18 0.20,0.21,0.22,0.27), mean=0.124, stddev=0.0468], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.05,0.12,0.20 0.24,0.30,0.43,0.54,0.57 0.60,0.63,0.65,0.72), mean=0.417, stddev=0.131], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.05 0.05,0.05,0.06,0.08,0.09 0.11,0.13,0.14,0.28), mean=0.0677, stddev=0.0223], oderiv-count=1.01645e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36911.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.005,0.02,0.05 0.06,0.08,0.12,0.16,0.18 0.20,0.22,0.24,0.25), mean=0.121, stddev=0.0475], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.07,0.12 0.15,0.18,0.21,0.25,0.27 0.29,0.31,0.31,0.38), mean=0.211, stddev=0.0526]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000284253, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009688, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.30,0.31 0.32,0.34,0.37,0.41,0.44 0.47,0.49,0.52,0.62), mean=0.38, stddev=0.0487], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.11,0.13,0.14 0.16,0.17,0.21,0.25,0.28 0.31,0.35,0.38,0.53), mean=0.214, stddev=0.0543], bias-{mean,stddev}=-0.01174,0.01775, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.48e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.27 0.29,0.30,0.34,0.37,0.39 0.40,0.43,0.43,0.67), mean=0.336, stddev=0.042], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.36,0.37 0.38,0.39,0.42,0.44,0.46 0.47,0.48,0.49,0.51), mean=0.42, stddev=0.0289], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0233, stddev=0.00289], oderiv-count=1.0016e+06
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34146.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.25,0.26 0.28,0.30,0.33,0.37,0.39 0.41,0.43,0.45,0.70), mean=0.336, stddev=0.0475], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.49,0.50,0.52 0.54,0.58,0.64,0.70,0.73 0.78,0.82,0.84,1.1), mean=0.641, stddev=0.0798]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000284253, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01902, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.18,0.20 0.25,0.31,0.42,0.59,0.73 0.79,0.85,0.87,1.1), mean=0.454, stddev=0.171], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.60,0.62,0.66 0.68,0.71,0.77,1.0,1.2 1.2,1.4,1.4,1.5), mean=0.846, stddev=0.193], bias-{mean,stddev}=0.00713,0.124, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000284253, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1192, w_fc-rms=0.1291, w_oc-rms=0.1343, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620432, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.43,0.44,0.46 0.49,0.51,0.57,0.62,0.64 0.66,0.68,0.69,0.70), mean=0.565, stddev=0.0598], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.17,0.18 0.19,0.19,0.21,0.22,0.23 0.23,0.24,0.24,0.25), mean=0.207, stddev=0.0164] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620432, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.44,0.45 0.47,0.51,0.58,0.64,0.66 0.68,0.72,0.75,0.84), mean=0.574, stddev=0.0733], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.16,0.17 0.18,0.19,0.21,0.23,0.23 0.24,0.24,0.24,0.25), mean=0.208, stddev=0.0206] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00620432, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.69,-0.66,-0.46 -0.37,-0.22,0.0001,0.21,0.34 0.45,0.59,0.63,0.74), mean=-0.0076, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.29,0.34 0.38,0.42,0.47,0.54,0.59 0.63,0.68,0.75,0.82), mean=0.479, stddev=0.0882] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620432, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.47,0.48,0.50 0.53,0.56,0.63,0.68,0.70 0.72,0.74,0.74,0.77), mean=0.621, stddev=0.0672], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.16,0.16 0.17,0.18,0.19,0.20,0.21 0.22,0.23,0.23,0.24), mean=0.191, stddev=0.0172] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00620432, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.72,-0.65,-0.47 -0.32,-0.19,-0.005,0.19,0.31 0.46,0.57,0.66,0.76), mean=-0.00532, stddev=0.264], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.36,0.37,0.47 0.53,0.59,0.66,0.72,0.75 0.77,0.83,0.84,0.89), mean=0.652, stddev=0.0927] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=224425
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000284253, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06371, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.4,1.6,1.6 1.7,1.7,1.8,1.9), mean=1.44, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.40,0.52,0.63 0.72,0.83,1.0,1.2,1.3 1.3,1.4,1.4,1.8), mean=1, stddev=0.216], bias-{mean,stddev}=0.01284,0.1564, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000284253, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04115, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.50,0.52,0.54 0.56,0.59,0.64,0.71,0.75 0.79,0.84,0.91,2.6), mean=0.654, stddev=0.111], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.7,1.7,1.9,2.0,2.1 2.2,2.3,2.3,2.4), mean=1.88, stddev=0.177], bias-{mean,stddev}=5.623e-09,0.02593, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=586240
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/17.mdl exp/nnet3/tdnn_lstm1c_sp/18.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.13233 tdnn2.affine:9.4101 lstm1.W_all:8.38327 lstm1.lstm_nonlin:0.587393 lstm1.W_rp:3.58468 tdnn3.affine:5.75363 tdnn4.affine:6.79151 lstm2.W_all:5.68746 lstm2.lstm_nonlin:0.600701 lstm2.W_rp:2.604 tdnn5.affine:4.83484 tdnn6.affine:5.99353 lstm3.W_all:7.25398 lstm3.lstm_nonlin:0.603987 lstm3.W_rp:3.09636 output.affine:6.57296 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.3191 tdnn2.affine:11.6617 lstm1.W_all:21.2704 lstm1.lstm_nonlin:5.00695 lstm1.W_rp:11.7366 tdnn3.affine:8.62907 tdnn4.affine:8.81431 lstm2.W_all:17.2779 lstm2.lstm_nonlin:5.05127 lstm2.W_rp:10.7427 tdnn5.affine:8.07114 tdnn6.affine:8.73885 lstm3.W_all:22.8256 lstm3.lstm_nonlin:5.04279 lstm3.W_rp:23.5608 output.affine:30.4578 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.745514 tdnn2.affine:0.815006 lstm1.W_all:0.391743 lstm1.lstm_nonlin:0.105775 lstm1.W_rp:0.308296 tdnn3.affine:0.676008 tdnn4.affine:0.772447 lstm2.W_all:0.324355 lstm2.lstm_nonlin:0.106528 lstm2.W_rp:0.243939 tdnn5.affine:0.59975 tdnn6.affine:0.68001 lstm3.W_all:0.317866 lstm3.lstm_nonlin:0.108007 lstm3.W_rp:0.131418 output.affine:0.214667 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:08:14 KST 2020, elapsed time 0 seconds
