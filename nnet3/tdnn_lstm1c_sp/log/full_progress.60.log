# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/59.mdl exp/nnet3/tdnn_lstm1c_sp/60.mdl 
# Started at Thu Jul 30 10:24:50 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/59.mdl exp/nnet3/tdnn_lstm1c_sp/60.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000249592, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02165, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.01,0.02 0.05,0.31,0.38,0.44,0.47 0.50,0.55,0.60,0.70), mean=0.349, stddev=0.137], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.14,0.16,0.45,0.59,0.71 0.92,1.0,1.1,1.3), mean=0.43, stddev=0.242], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.05,0.08,0.27,0.63,0.85 1.0,1.2,1.3,1.5), mean=0.37, stddev=0.327], bias-{mean,stddev}=-1.867e-05,0.02979, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.32,1.1,1.6 2.1,2.9,3.5,5.9), mean=0.611, stddev=0.812], oderiv-count=20608
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7134.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.23,-0.14,-0.12,-0.07 -0.03,-0.001,0.05,0.14,0.19 0.23,0.26,0.28,0.35), mean=0.0659, stddev=0.092], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.13,0.14 0.17,0.19,0.19,0.22), mean=0.0624, stddev=0.0622]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000249592, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009806, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.31,0.32 0.34,0.35,0.39,0.42,0.43 0.45,0.46,0.47,0.49), mean=0.386, stddev=0.0371], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.007,0.01 0.03,0.19,0.23,0.26,0.28 0.29,0.31,0.33,0.38), mean=0.209, stddev=0.0802], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.11,0.23,0.48,0.66 0.82,0.96,1.0,1.2), mean=0.308, stddev=0.235], bias-{mean,stddev}=-0.0004586,0.01482, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.06,0.07 0.08,0.09,0.10,0.11), mean=0.0363, stddev=0.0289], oderiv-count=76480
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=6987.44, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.10,0.02,0.06,0.13 0.19,0.26,0.41,0.54,0.63 0.69,0.74,0.77,1.1), mean=0.403, stddev=0.169], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.31,0.66,0.89,0.99 1.1,1.2,1.2,1.5), mean=0.598, stddev=0.336]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000249592, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006518, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.001,0.003,0.01 0.04,0.07,0.13,0.21,0.26 0.31,0.35,0.37,0.47), mean=0.143, stddev=0.0847], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.13,0.18,0.31,0.35,0.36 0.37,0.39,0.40,0.45), mean=0.285, stddev=0.0844], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0002,0.0002,0.0002 0.0004,0.07,0.16,0.34,0.49 0.64,0.84,0.93,1.1), mean=0.218, stddev=0.202], bias-{mean,stddev}=-2.8e-05,0.002309, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000249592, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.002267, w_fc-rms=0.002898, w_oc-rms=0.005548, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000445988, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.66,-0.43,-0.32,-0.11 0.03,0.22,0.50,0.72,0.92 1.1,1.4,1.5,2.1), mean=0.479, stddev=0.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.13,-0.08,-0.01 0.07,0.14,0.23,0.29,0.36 0.41,0.49,0.52,0.80), mean=0.219, stddev=0.134] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000445988, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.59,-0.29,-0.22,-0.07 0.05,0.23,0.45,0.69,0.86 1.0,1.2,1.3,1.8), mean=0.458, stddev=0.327], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.35,-0.15,-0.10,0.02 0.09,0.17,0.25,0.29,0.34 0.39,0.43,0.47,0.75), mean=0.227, stddev=0.114] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0523181, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.6,-4.9,-4.5,-3.5 -2.7,-1.4,0.02,1.7,2.9 3.8,4.4,5.3,7.5), mean=0.0637, stddev=2.12], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.5,-2.7,-2.3,-1.9 -1.3,-0.68,0.52,1.5,1.9 2.5,3.2,3.5,4.4), mean=0.447, stddev=1.3] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000445988, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.68,-0.44,-0.19 -0.05,0.17,0.48,0.76,0.99 1.1,1.4,1.6,2.3), mean=0.464, stddev=0.43], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.40,-0.24,-0.17,-0.09 0.002,0.09,0.22,0.31,0.40 0.45,0.51,0.61,0.81), mean=0.203, stddev=0.162] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.218236, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.2,-3.8,-3.5,-2.9 -2.0,-1.2,0.02,1.4,2.0 2.8,3.4,3.8,6.5), mean=0.0359, stddev=1.64], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.6,-1.2,-0.78 -0.33,0.15,0.84,1.4,1.7 1.9,2.3,2.6,3.4), mean=0.75, stddev=0.821] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.48e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2229
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000249592, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.008472, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.11,0.18,0.25,0.27 0.28,0.28,0.30,0.35), mean=0.181, stddev=0.0673], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.009,0.01,0.03 0.06,0.09,0.13,0.17,0.18 0.20,0.22,0.23,0.26), mean=0.128, stddev=0.0477], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,5e-05,6e-05,7e-05 9e-05,0.0002,0.0008,0.06,0.38 0.53,0.63,0.69,0.81), mean=0.0798, stddev=0.176], bias-{mean,stddev}=-1.006e-05,0.007183, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000249592, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008419, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.17 0.18,0.20,0.23,0.26,0.28 0.30,0.32,0.34,0.44), mean=0.232, stddev=0.0386], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.09,0.15,0.26,0.28 0.29,0.31,0.31,0.33), mean=0.174, stddev=0.0805], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,4e-05,5e-05,6e-05 9e-05,0.0002,0.002,0.15,0.43 0.63,0.78,0.85,0.98), mean=0.104, stddev=0.211], bias-{mean,stddev}=-0.0005866,0.01364, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.10,0.21,0.27 0.32,0.38,0.47,0.91), mean=0.112, stddev=0.121], oderiv-count=16896
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=6545.08, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.25,-0.16,-0.10,-0.04 -0.003,0.06,0.19,0.31,0.41 0.45,0.50,0.53,0.60), mean=0.189, stddev=0.151], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.12,0.27,0.34,0.38 0.41,0.44,0.46,0.50), mean=0.239, stddev=0.13]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000249592, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.23,0.24 0.25,0.26,0.28,0.30,0.31 0.31,0.32,0.33,0.36), mean=0.277, stddev=0.0223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.12 0.13,0.14,0.16,0.18,0.19 0.20,0.21,0.22,0.26), mean=0.159, stddev=0.0235], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.09,0.11,0.18,0.33,0.46 0.57,0.67,0.73,0.85), mean=0.231, stddev=0.156], bias-{mean,stddev}=-0.0008888,0.008752, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.02,0.05,0.07,0.08 0.09,0.10,0.10,0.12), mean=0.0482, stddev=0.0279], oderiv-count=31872
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=6102.71, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.03,0.10,0.12,0.16 0.21,0.26,0.37,0.50,0.58 0.67,0.75,0.79,0.93), mean=0.385, stddev=0.151], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.24,0.44,0.67,0.82,0.90 0.96,1.0,1.1,1.5), mean=0.614, stddev=0.261]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000249592, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004331, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0002,0.0002,0.0004 0.001,0.008,0.08,0.14,0.19 0.22,0.24,0.26,0.36), mean=0.0845, stddev=0.0711], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.11,0.21,0.23,0.24 0.25,0.26,0.26,0.30), mean=0.188, stddev=0.0592], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0002,0.0002,0.0002 0.0004,0.04,0.10,0.22,0.32 0.43,0.58,0.66,0.78), mean=0.14, stddev=0.14], bias-{mean,stddev}=3.209e-05,0.002434, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000249592, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001411, w_fc-rms=0.001619, w_oc-rms=0.002605, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000433225, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.24,-0.18,0.07 0.20,0.31,0.50,0.65,0.81 0.94,1.1,1.3,1.7), mean=0.489, stddev=0.277], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.18,-0.04,-0.02,0.04 0.10,0.17,0.25,0.27,0.31 0.35,0.38,0.43,0.49), mean=0.223, stddev=0.0897] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000433225, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.1,-0.32,-0.06,0.03 0.15,0.32,0.49,0.58,0.71 0.84,0.97,1.0,1.6), mean=0.45, stddev=0.285], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,0.06,0.08,0.12 0.15,0.20,0.25,0.27,0.30 0.35,0.38,0.41,1.5), mean=0.241, stddev=0.0854] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.198093, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.0,-3.6,-3.3,-2.6 -1.8,-1.0,0.07,1.0,1.7 2.5,3.2,3.6,5.8), mean=0.0383, stddev=1.45], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-1.5,-1.4,-0.88 -0.40,0.16,1.0,1.5,1.9 2.2,2.6,3.0,4.7), mean=0.864, stddev=0.925] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000433225, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.4,-0.32,-0.21,-0.03 0.11,0.31,0.50,0.67,0.84 0.99,1.2,1.3,1.9), mean=0.484, stddev=0.364], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.17,-0.03,0.02,0.05 0.09,0.15,0.25,0.28,0.32 0.37,0.42,0.46,0.61), mean=0.225, stddev=0.0942] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000433225, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.7,-3.0,-2.8,-2.1 -1.5,-0.78,0.02,0.91,1.4 2.0,2.5,2.9,4.4), mean=0.0234, stddev=1.19], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.39,-0.24,0.12 0.41,0.64,1.0,1.4,1.6 2.0,2.3,2.5,9.8), mean=1.04, stddev=0.661] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.33e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2004
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000249592, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005655, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.12,0.15,0.17 0.17,0.18,0.18,0.20), mean=0.126, stddev=0.0288], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.004 0.007,0.02,0.09,0.12,0.13 0.14,0.15,0.17,0.20), mean=0.077, stddev=0.0489], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,5e-05,6e-05,6e-05 8e-05,0.0001,0.0007,0.09,0.26 0.34,0.39,0.42,0.48), mean=0.0584, stddev=0.115], bias-{mean,stddev}=-8.069e-05,0.006048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000249592, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006979, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.14 0.15,0.16,0.19,0.22,0.24 0.26,0.28,0.30,0.42), mean=0.191, stddev=0.04], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.11,0.11,0.15,0.19,0.21 0.22,0.23,0.24,0.26), mean=0.154, stddev=0.0413], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,2e-05,3e-05,4e-05 6e-05,0.0001,0.003,0.16,0.35 0.49,0.64,0.69,0.82), mean=0.092, stddev=0.172], bias-{mean,stddev}=-0.001223,0.009839, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=4.2e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.58,-0.46,-0.30 -0.22,-0.12,0.06,0.27,0.40 0.49,0.63,0.67,0.97), mean=0.0755, stddev=0.249], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.1,-1.9,-1.8,-1.3 -0.71,-0.39,0.27,0.96,1.3 1.7,2.1,2.4,2.7), mean=0.286, stddev=0.865]
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=5660.34, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.23,-0.08,-0.05,-0.02 0.004,0.05,0.12,0.21,0.27 0.32,0.37,0.40,0.53), mean=0.132, stddev=0.105], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.03,0.13,0.21,0.27,0.30 0.33,0.36,0.38,0.45), mean=0.195, stddev=0.0941]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000249592, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005921, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.23,0.25,0.26 0.27,0.28,0.30,0.34), mean=0.233, stddev=0.0247], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.07,0.10 0.11,0.11,0.13,0.15,0.17 0.18,0.19,0.20,0.24), mean=0.132, stddev=0.026], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.08,0.14,0.28,0.39 0.49,0.59,0.64,0.71), mean=0.188, stddev=0.139], bias-{mean,stddev}=-0.0008611,0.007554, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.09,0.11 0.12,0.13,0.13,0.14), mean=0.0584, stddev=0.0387], oderiv-count=8960
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=5217.97, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,-0.008,0.04,0.11 0.18,0.25,0.37,0.49,0.56 0.65,0.71,0.75,0.96), mean=0.369, stddev=0.157], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.26,0.47,0.67,0.86,0.95 1.0,1.1,1.2,1.7), mean=0.644, stddev=0.277]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000249592, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00579, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.05 0.07,0.08,0.11,0.20,0.25 0.27,0.29,0.30,0.39), mean=0.131, stddev=0.0672], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.17 0.18,0.19,0.23,0.32,0.38 0.40,0.42,0.43,0.45), mean=0.254, stddev=0.0732], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0007,0.0009,0.003 0.04,0.05,0.11,0.27,0.46 0.64,0.80,0.85,0.98), mean=0.181, stddev=0.192], bias-{mean,stddev}=-8.707e-05,0.002449, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000249592, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.002623, w_fc-rms=0.004237, w_oc-rms=0.004905, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000419011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-0.96,-0.89,-0.62 -0.38,-0.17,0.27,0.94,1.3 1.5,1.9,2.2,2.9), mean=0.372, stddev=0.682], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.14,-0.05,-0.007,0.04 0.08,0.15,0.27,0.39,0.45 0.50,0.56,0.57,0.73), mean=0.271, stddev=0.141] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000419011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-1.3,-1.1,-0.85 -0.60,-0.32,0.23,0.80,1.1 1.4,1.8,2.0,2.2), mean=0.258, stddev=0.678], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.28,-0.21,-0.07,0.002 0.06,0.14,0.26,0.39,0.46 0.53,0.62,0.64,0.92), mean=0.265, stddev=0.165] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.499245, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-12,-7.5,-6.7,-5.0 -3.9,-2.3,-0.09,2.6,3.8 4.8,6.0,6.6,8.6), mean=0.0194, stddev=3.02], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.1,-2.8,-2.4,-1.7 -1.1,-0.55,0.43,1.4,2.1 2.4,2.9,3.4,3.9), mean=0.412, stddev=1.25] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000419011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.3,-1.2,-1.0 -0.71,-0.43,0.08,0.61,0.88 1.2,1.4,1.5,3.2), mean=0.0955, stddev=0.631], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.19,-0.14,-0.04,0.01 0.08,0.15,0.30,0.46,0.57 0.62,0.71,0.76,0.85), mean=0.308, stddev=0.186] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0529764, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.1,-5.6,-5.0,-3.7 -3.0,-1.9,0.05,1.8,2.9 3.9,4.5,5.0,8.3), mean=0.0485, stddev=2.28], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.6,-1.6,-1.4,-0.79 -0.35,0.10,0.92,1.9,2.3 2.7,3.3,3.4,4.5), mean=0.961, stddev=1.08] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.18e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1757
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000249592, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007388, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.10 0.11,0.11,0.14,0.21,0.22 0.23,0.23,0.24,0.26), mean=0.162, stddev=0.0474], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.06 0.08,0.10,0.12,0.14,0.15 0.15,0.16,0.16,0.23), mean=0.116, stddev=0.0258], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0003,0.0004,0.0005 0.0007,0.002,0.04,0.22,0.31 0.39,0.45,0.48,0.55), mean=0.105, stddev=0.131], bias-{mean,stddev}=0.0004191,0.007161, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000249592, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.008036, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.06 0.07,0.08,0.11,0.15,0.18 0.20,0.23,0.25,0.53), mean=0.122, stddev=0.0446], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.27,0.27 0.29,0.30,0.36,0.43,0.44 0.46,0.47,0.49,0.52), mean=0.363, stddev=0.0629], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0004,0.0005,0.0006 0.0008,0.002,0.02,0.52,0.73 0.86,0.94,0.98,1.0), mean=0.206, stddev=0.305], bias-{mean,stddev}=-8.145e-11,0.002019, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.04,0.05 0.06,0.07,0.08,0.41), mean=0.0202, stddev=0.0238], oderiv-count=24320

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.57798 tdnn2.affine:8.83839 lstm1.W_all:7.57952 lstm1.lstm_nonlin:0.151805 lstm1.W_rp:3.11732 tdnn3.affine:5.37071 tdnn4.affine:6.35028 lstm2.W_all:5.03656 lstm2.lstm_nonlin:0.0769896 lstm2.W_rp:2.08148 tdnn5.affine:4.45019 tdnn6.affine:5.3353 lstm3.W_all:6.73359 lstm3.lstm_nonlin:0.159455 lstm3.W_rp:2.71897 output.affine:5.94443 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.2241 tdnn2.affine:11.5698 lstm1.W_all:20.5711 lstm1.lstm_nonlin:1.63154 lstm1.W_rp:11.9961 tdnn3.affine:8.31791 tdnn4.affine:8.61561 lstm2.W_all:16.1359 lstm2.lstm_nonlin:0.777547 lstm2.W_rp:10.84 tdnn5.affine:7.72564 tdnn6.affine:8.31603 lstm3.W_all:23.0422 lstm3.lstm_nonlin:1.69282 lstm3.W_rp:25.1808 output.affine:30.1029 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.691266 tdnn2.affine:0.756383 lstm1.W_all:0.367114 lstm1.lstm_nonlin:0.0927254 lstm1.W_rp:0.258574 tdnn3.affine:0.628313 tdnn4.affine:0.710733 lstm2.W_all:0.310531 lstm2.lstm_nonlin:0.0970176 lstm2.W_rp:0.190482 tdnn5.affine:0.547978 tdnn6.affine:0.618097 lstm3.W_all:0.292141 lstm3.lstm_nonlin:0.0941732 lstm3.W_rp:0.108145 output.affine:0.197274 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:24:51 KST 2020, elapsed time 1 seconds
