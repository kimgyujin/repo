# nnet3-info exp/nnet3/tdnn_lstm1c_sp/213.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/212.mdl exp/nnet3/tdnn_lstm1c_sp/213.mdl 
# Started at Thu Jul 30 11:25:16 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/213.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000153148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0284, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.009,0.01 0.03,0.14,0.50,0.60,0.65 0.73,0.79,0.84,1.1), mean=0.434, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.16,0.19,0.55,0.77,1.0 1.3,1.3,1.4,1.5), mean=0.552, stddev=0.339], bias-{mean,stddev}=0.002284,0.05088, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.85e+05, self-repaired-proportion=0.145313, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-08,5e-06,1e-05,5e-05 0.0001,0.0009,0.05,0.08,0.09 0.11,0.12,0.13,0.24), mean=0.0501, stddev=0.037], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.004,0.007,0.02 0.03,0.08,0.45,0.61,0.71 0.79,0.86,0.90,0.99), mean=0.409, stddev=0.248], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.03 0.05,0.23,0.35,0.46,0.53 0.59,0.75,0.86,1.3), mean=0.34, stddev=0.184], oderiv-count=1.1776e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37082.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-06,4e-06,1e-05 4e-05,0.0005,0.05,0.08,0.10 0.11,0.13,0.13,0.25), mean=0.0481, stddev=0.0368], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,5e-05,0.0001,0.0002 0.0004,0.003,0.08,0.10,0.11 0.11,0.12,0.13,0.13), mean=0.0677, stddev=0.0405]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000153148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01114, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.36 0.38,0.40,0.43,0.47,0.50 0.53,0.55,0.57,0.68), mean=0.437, stddev=0.0496], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.004,0.005,0.008 0.01,0.08,0.27,0.31,0.33 0.35,0.38,0.41,0.61), mean=0.226, stddev=0.116], bias-{mean,stddev}=-0.00655,0.0301, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.23,0.23 0.25,0.26,0.29,0.32,0.34 0.35,0.38,0.39,0.52), mean=0.29, stddev=0.0368], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.40,0.41 0.42,0.43,0.46,0.48,0.50 0.51,0.52,0.53,0.54), mean=0.458, stddev=0.0311], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0473, stddev=0.00913], oderiv-count=1.19002e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36308.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.24,0.25,0.28,0.31,0.34 0.36,0.40,0.42,0.53), mean=0.286, stddev=0.0417], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.39,0.40,0.42 0.44,0.46,0.50,0.55,0.58 0.61,0.64,0.67,0.78), mean=0.508, stddev=0.0593]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000153148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01553, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,4e-05,0.0001,0.0009 0.007,0.15,0.34,0.52,0.61 0.67,0.74,0.79,1.0), mean=0.338, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.31,0.32,0.36 0.41,0.62,0.72,0.80,0.84 0.89,0.94,0.99,1.3), mean=0.691, stddev=0.155], bias-{mean,stddev}=-0.0002881,0.02179, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000153148, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0295, w_fc-rms=0.02655, w_oc-rms=0.03165, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621485, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.44,0.45 0.46,0.47,0.48,0.51,0.53 0.60,0.71,0.75,0.77), mean=0.497, stddev=0.0542], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0157] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621485, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.41,0.42,0.43 0.45,0.46,0.49,0.51,0.55 0.61,0.69,0.73,0.76), mean=0.497, stddev=0.0562], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.18,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0148] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00681333, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.85,-0.81,-0.44 -0.28,-0.15,0.0002,0.17,0.30 0.44,0.71,0.82,0.87), mean=0.0043, stddev=0.277], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.26,0.33 0.42,0.49,0.61,0.79,1.0 1.0,1.0,1.0,1.0), mean=0.642, stddev=0.196] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621485, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.42 0.43,0.44,0.46,0.50,0.50 0.51,0.53,0.55,0.60), mean=0.468, stddev=0.03], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.226, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00621485, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.78,-0.68,-0.35 -0.22,-0.11,0.0003,0.12,0.23 0.35,0.60,0.71,0.84), mean=0.00193, stddev=0.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.30,0.38,0.55 0.71,0.79,0.86,0.93,1.0 1.0,1.0,1.0,1.0), mean=0.844, stddev=0.135] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=299238
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.092011
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000153148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03164, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.20,0.21 0.24,0.29,0.52,0.99,1.1 1.1,1.1,1.2,1.2), mean=0.635, stddev=0.342], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.002,0.003,0.005 0.02,0.27,0.44,0.59,0.70 0.90,1.2,1.4,1.5), mean=0.435, stddev=0.266], bias-{mean,stddev}=0.01155,0.2477, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000153148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0114, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.22,0.24,0.30,0.37,0.41 0.44,0.47,0.48,0.58), mean=0.31, stddev=0.0706], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.08,0.10,0.21,0.36,0.39 0.41,0.44,0.45,0.48), mean=0.228, stddev=0.124], bias-{mean,stddev}=0.003863,0.019, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.5e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.04 0.05,0.06,0.09,0.11,0.13 0.14,0.14,0.15,0.19), mean=0.0891, stddev=0.0284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.23,0.28 0.31,0.39,0.50,0.61,0.67 0.71,0.74,0.77,0.80), mean=0.499, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.12,0.14,0.16 0.17,0.19,0.22,0.34), mean=0.124, stddev=0.029], oderiv-count=1.03142e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33986, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.05,0.06,0.09,0.11,0.13 0.13,0.14,0.15,0.17), mean=0.0863, stddev=0.0292], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.10 0.11,0.12,0.13,0.15,0.16 0.17,0.19,0.19,0.22), mean=0.136, stddev=0.0228]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000153148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008201, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.28,0.30,0.32,0.35,0.36 0.38,0.40,0.41,0.55), mean=0.322, stddev=0.0347], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.15,0.18,0.21,0.23 0.24,0.27,0.28,0.34), mean=0.184, stddev=0.0332], bias-{mean,stddev}=-0.01348,0.01564, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.51e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.22,0.23,0.25,0.28,0.29 0.30,0.32,0.33,0.42), mean=0.255, stddev=0.0314], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.37,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.49,0.51,0.52,0.53), mean=0.439, stddev=0.0329], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.0381, stddev=0.00312], oderiv-count=1.0457e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31663.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.25,0.28,0.29 0.30,0.32,0.33,0.43), mean=0.251, stddev=0.034], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.41 0.42,0.44,0.48,0.52,0.56 0.59,0.67,0.70,0.83), mean=0.486, stddev=0.0616]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000153148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01299, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,7e-07,1e-06,3e-06 1e-05,0.0002,0.27,0.46,0.55 0.59,0.62,0.65,1.2), mean=0.25, stddev=0.217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.24,0.27,0.32 0.43,0.53,0.59,0.64,0.68 0.72,0.81,0.90,1.5), mean=0.58, stddev=0.121], bias-{mean,stddev}=-0.003753,0.04694, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000153148, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01102, w_fc-rms=0.009245, w_oc-rms=0.01726, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627287, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.43,0.43,0.44 0.45,0.46,0.50,0.51,0.55 0.60,0.63,0.67,0.75), mean=0.499, stddev=0.0459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0144] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627287, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.40,0.41 0.42,0.45,0.50,0.50,0.51 0.53,0.57,0.60,0.74), mean=0.481, stddev=0.0431], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0121] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0100949, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.76,-0.60,-0.36 -0.28,-0.11,0.0006,0.11,0.26 0.40,0.59,0.70,0.85), mean=0.00149, stddev=0.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.30,0.37,0.49 0.53,0.58,0.67,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.748, stddev=0.204] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627287, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.44,0.45,0.50,0.50,0.52 0.54,0.56,0.58,0.68), mean=0.484, stddev=0.0361], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0151] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00627287, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.50,-0.40,-0.27 -0.19,-0.08,0.0003,0.08,0.20 0.30,0.44,0.55,0.69), mean=0.00196, stddev=0.176], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.54,0.63,0.74 0.79,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.903, stddev=0.103] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.75e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=263817
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.092011
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000153148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03002, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.32,0.34,0.37 0.40,0.42,0.59,0.88,0.92 0.97,0.99,1.0,1.1), mean=0.648, stddev=0.222], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0005,0.0006,0.0008 0.001,0.004,0.46,0.64,0.74 0.82,0.95,1.0,1.1), mean=0.376, stddev=0.305], bias-{mean,stddev}=0.002169,0.1739, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000153148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01024, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.19,0.20 0.21,0.23,0.26,0.33,0.36 0.41,0.45,0.45,0.49), mean=0.279, stddev=0.0616], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.14,0.21,0.30,0.33 0.34,0.36,0.37,0.40), mean=0.22, stddev=0.0784], bias-{mean,stddev}=0.00141,0.009289, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.54e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.06,0.08,0.09 0.10,0.11,0.11,0.14), mean=0.0607, stddev=0.0207], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.17,0.18,0.24 0.27,0.35,0.47,0.57,0.61 0.64,0.66,0.68,0.71), mean=0.458, stddev=0.123], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.14,0.16,0.18 0.21,0.23,0.25,0.29), mean=0.143, stddev=0.0302], oderiv-count=966272
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29341.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.06,0.08,0.09 0.10,0.11,0.11,0.12), mean=0.0616, stddev=0.0217], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.07 0.08,0.09,0.10,0.12,0.12 0.13,0.14,0.14,0.16), mean=0.101, stddev=0.0176]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000153148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007711, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.21,0.23 0.25,0.27,0.30,0.34,0.36 0.38,0.39,0.39,0.46), mean=0.301, stddev=0.045], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.13,0.14,0.16,0.20,0.22 0.24,0.28,0.30,0.35), mean=0.172, stddev=0.0378], bias-{mean,stddev}=-0.01109,0.02052, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.45e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.20 0.21,0.23,0.26,0.28,0.30 0.31,0.32,0.34,0.41), mean=0.255, stddev=0.0334], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.37 0.38,0.39,0.42,0.45,0.46 0.47,0.48,0.49,0.51), mean=0.421, stddev=0.0294], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0307, stddev=0.00261], oderiv-count=991040
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27018.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.18,0.20 0.21,0.22,0.26,0.29,0.30 0.32,0.34,0.34,0.49), mean=0.256, stddev=0.0394], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.28,0.31,0.38 0.41,0.44,0.50,0.57,0.60 0.63,0.66,0.70,0.92), mean=0.503, stddev=0.0802]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000153148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01862, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.22,0.23,0.26 0.28,0.33,0.42,0.60,0.68 0.72,0.75,0.78,1.2), mean=0.452, stddev=0.144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.60,0.62 0.64,0.66,0.72,0.98,1.2 1.3,1.4,1.5,2.0), mean=0.816, stddev=0.235], bias-{mean,stddev}=0.02377,0.02407, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000153148, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04982, w_fc-rms=0.04396, w_oc-rms=0.04116, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634301, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.58,0.60 0.62,0.64,0.69,0.73,0.75 0.77,0.79,0.80,0.83), mean=0.688, stddev=0.0527], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.16 0.17,0.17,0.19,0.20,0.20 0.21,0.21,0.21,0.24), mean=0.185, stddev=0.0165] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634301, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.50,0.52 0.54,0.57,0.61,0.66,0.70 0.76,0.81,0.82,0.84), mean=0.619, stddev=0.0692], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.16 0.17,0.19,0.20,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.197, stddev=0.0186] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0147117, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.81,-0.71,-0.52 -0.39,-0.24,0.004,0.22,0.35 0.54,0.71,0.76,0.89), mean=-0.00118, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.24,0.28 0.34,0.40,0.46,0.49,0.51 0.53,0.54,0.55,0.64), mean=0.441, stddev=0.0717] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634301, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.55,0.55,0.58 0.61,0.63,0.67,0.70,0.73 0.74,0.76,0.78,0.85), mean=0.667, stddev=0.0485], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.17,0.18,0.19,0.19 0.20,0.20,0.20,0.22), mean=0.178, stddev=0.015] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00924054, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.81,-0.74,-0.47 -0.33,-0.22,0.005,0.19,0.31 0.48,0.68,0.75,0.87), mean=-0.00298, stddev=0.286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.28,0.35 0.44,0.53,0.62,0.66,0.69 0.70,0.71,0.73,0.75), mean=0.591, stddev=0.103] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.45979e-06, count-zeroing-boundaries=224226
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.092011
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000153148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07519, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.0,1.0,1.1 1.1,1.2,1.6,2.1,2.2 2.2,2.3,2.4,2.4), mean=1.66, stddev=0.443], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.85,0.92,0.97 1.0,1.1,1.2,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.2, stddev=0.171], bias-{mean,stddev}=-0.01082,0.3952, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000153148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03782, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.50,0.51,0.52 0.54,0.56,0.59,0.64,0.67 0.70,0.75,0.81,2.2), mean=0.604, stddev=0.0853], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.6,2.1,2.2 2.3,2.3,2.3,2.5), mean=1.68, stddev=0.426], bias-{mean,stddev}=5.468e-09,0.02864, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.006,0.007,0.008 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.43), mean=0.0166, stddev=0.014], oderiv-count=616960
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/212.mdl exp/nnet3/tdnn_lstm1c_sp/213.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.15615 tdnn2.affine:6.04262 lstm1.W_all:4.72796 lstm1.lstm_nonlin:0.0832807 lstm1.W_rp:1.94043 tdnn3.affine:3.91443 tdnn4.affine:4.3863 lstm2.W_all:3.24242 lstm2.lstm_nonlin:0.038903 lstm2.W_rp:1.33022 tdnn5.affine:3.08966 tdnn6.affine:3.54703 lstm3.W_all:4.12061 lstm3.lstm_nonlin:0.0845611 lstm3.W_rp:1.6192 output.affine:3.71877 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.2757 tdnn2.affine:10.0566 lstm1.W_all:18.0811 lstm1.lstm_nonlin:1.15755 lstm1.W_rp:12.3025 tdnn3.affine:7.27127 tdnn4.affine:7.40097 lstm2.W_all:15.2574 lstm2.lstm_nonlin:0.512405 lstm2.W_rp:11.3871 tdnn5.affine:6.52591 tdnn6.affine:6.96552 lstm3.W_all:21.7108 lstm3.lstm_nonlin:1.78224 lstm3.W_rp:28.3724 output.affine:28.0052 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.548339 tdnn2.affine:0.60318 lstm1.W_all:0.261393 lstm1.lstm_nonlin:0.0717856 lstm1.W_rp:0.157814 tdnn3.affine:0.537414 tdnn4.affine:0.591281 lstm2.W_all:0.212017 lstm2.lstm_nonlin:0.0763757 lstm2.W_rp:0.116775 tdnn5.affine:0.473059 tdnn6.affine:0.508501 lstm3.W_all:0.189685 lstm3.lstm_nonlin:0.0473818 lstm3.W_rp:0.0571074 output.affine:0.132662 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:25:16 KST 2020, elapsed time 0 seconds
