# nnet3-info exp/nnet3/tdnn_lstm1c_sp/173.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/172.mdl exp/nnet3/tdnn_lstm1c_sp/173.mdl 
# Started at Thu Jul 30 11:09:28 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/173.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000173863, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02891, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.01,0.02 0.04,0.26,0.51,0.60,0.67 0.72,0.77,0.87,1.0), mean=0.451, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.14,0.15 0.16,0.20,0.56,0.78,1.1 1.3,1.4,1.4,1.6), mean=0.561, stddev=0.347], bias-{mean,stddev}=0.003467,0.05222, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.85e+05, self-repaired-proportion=0.11236, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,2e-06,1e-05,6e-05 0.0002,0.003,0.06,0.08,0.09 0.11,0.12,0.13,0.18), mean=0.0545, stddev=0.0358], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.0008,0.004,0.03 0.05,0.15,0.48,0.62,0.72 0.77,0.84,0.86,0.95), mean=0.432, stddev=0.235], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.04 0.07,0.25,0.36,0.46,0.51 0.57,0.65,0.70,1.6), mean=0.344, stddev=0.17], oderiv-count=1.21434e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35500.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,6e-07,2e-06,1e-05 0.0001,0.002,0.06,0.08,0.10 0.11,0.13,0.14,0.18), mean=0.0523, stddev=0.0361], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,3e-05,7e-05,0.0002 0.0008,0.01,0.09,0.10,0.11 0.12,0.13,0.13,0.15), mean=0.0735, stddev=0.0408]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000173863, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01165, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.36,0.38 0.39,0.42,0.46,0.49,0.52 0.55,0.57,0.60,0.78), mean=0.457, stddev=0.0524], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.01 0.02,0.15,0.28,0.32,0.34 0.36,0.38,0.41,0.74), mean=0.24, stddev=0.113], bias-{mean,stddev}=-0.003681,0.02817, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.15e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.27 0.28,0.29,0.31,0.34,0.36 0.37,0.39,0.41,0.62), mean=0.316, stddev=0.0359], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.40,0.41 0.42,0.43,0.46,0.48,0.50 0.51,0.52,0.53,0.55), mean=0.459, stddev=0.0307], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.046, stddev=0.00871], oderiv-count=1.06048e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34726.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.26 0.27,0.28,0.30,0.34,0.35 0.37,0.39,0.40,0.62), mean=0.309, stddev=0.0376], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.46 0.48,0.50,0.54,0.60,0.62 0.65,0.67,0.72,0.90), mean=0.551, stddev=0.0583]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000173863, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01606, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,0.0003,0.001,0.006 0.04,0.18,0.35,0.53,0.62 0.69,0.77,0.82,1.1), mean=0.355, stddev=0.203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.33,0.35,0.40 0.46,0.63,0.75,0.82,0.87 0.91,0.96,0.98,1.4), mean=0.716, stddev=0.153], bias-{mean,stddev}=2.14e-05,0.02322, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000173863, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02339, w_fc-rms=0.03161, w_oc-rms=0.03403, count=1.46e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630644, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.44,0.45 0.46,0.47,0.49,0.52,0.55 0.59,0.67,0.70,0.75), mean=0.5, stddev=0.0487], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0145] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630644, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.39,0.40,0.41 0.43,0.45,0.49,0.52,0.57 0.63,0.72,0.75,0.81), mean=0.496, stddev=0.0692], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0162] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.006679, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.82,-0.78,-0.57 -0.38,-0.22,0.006,0.23,0.36 0.45,0.64,0.78,0.85), mean=-0.00131, stddev=0.299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.28,0.29,0.38 0.42,0.48,0.60,0.74,0.98 1.0,1.0,1.0,1.0), mean=0.627, stddev=0.184] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630644, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.44,0.45,0.47,0.50,0.51 0.54,0.56,0.57,0.61), mean=0.476, stddev=0.0344], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0166] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00829027, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.81,-0.75,-0.49 -0.32,-0.17,0.004,0.18,0.28 0.40,0.59,0.75,0.88), mean=-0.0018, stddev=0.268], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.26,0.32,0.50 0.65,0.75,0.84,0.91,0.99 1.0,1.0,1.0,1.0), mean=0.814, stddev=0.145] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=294000
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0369146
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000173863, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03141, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.19 0.21,0.24,0.43,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.616, stddev=0.365], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.008,0.01,0.03 0.07,0.30,0.45,0.60,0.71 0.83,0.96,1.1,1.3), mean=0.451, stddev=0.231], bias-{mean,stddev}=-0.001728,0.1902, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000173863, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01198, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.20,0.22 0.24,0.26,0.32,0.39,0.42 0.46,0.49,0.51,0.64), mean=0.326, stddev=0.0734], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.09,0.17,0.38,0.42 0.45,0.48,0.50,0.55), mean=0.233, stddev=0.143], bias-{mean,stddev}=0.006452,0.02413, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.93e+05, self-repaired-proportion=0.00103365, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.04,0.04,0.05 0.07,0.08,0.11,0.14,0.16 0.17,0.18,0.19,0.20), mean=0.111, stddev=0.0352], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.16,0.21,0.26 0.31,0.37,0.51,0.63,0.68 0.70,0.72,0.73,0.78), mean=0.496, stddev=0.137], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.10,0.11,0.13 0.14,0.15,0.17,0.27), mean=0.1, stddev=0.0212], oderiv-count=1.14918e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32404.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.03,0.04,0.05 0.06,0.08,0.11,0.14,0.15 0.17,0.18,0.19,0.21), mean=0.109, stddev=0.0354], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.11,0.12,0.13 0.14,0.15,0.17,0.20,0.21 0.22,0.23,0.25,0.28), mean=0.174, stddev=0.0279]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000173863, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008685, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.27,0.29 0.30,0.31,0.34,0.36,0.38 0.40,0.42,0.44,0.56), mean=0.341, stddev=0.0359], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.14 0.15,0.17,0.19,0.22,0.24 0.25,0.27,0.29,0.35), mean=0.195, stddev=0.034], bias-{mean,stddev}=-0.01122,0.01619, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.27e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.23,0.24,0.27,0.30,0.31 0.32,0.34,0.37,0.39), mean=0.27, stddev=0.033], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.38,0.39 0.40,0.41,0.44,0.46,0.48 0.50,0.51,0.51,0.54), mean=0.439, stddev=0.0324], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0357, stddev=0.00293], oderiv-count=1.01734e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30081.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.21 0.22,0.24,0.26,0.29,0.31 0.32,0.34,0.36,0.41), mean=0.265, stddev=0.0332], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.44 0.46,0.47,0.51,0.55,0.59 0.62,0.66,0.71,0.87), mean=0.519, stddev=0.0583]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000173863, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01313, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,1e-06,2e-06,5e-06 2e-05,0.0004,0.28,0.47,0.55 0.60,0.64,0.66,1.1), mean=0.254, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.26,0.31 0.38,0.53,0.61,0.66,0.69 0.73,0.78,0.84,1.3), mean=0.585, stddev=0.125], bias-{mean,stddev}=-0.002961,0.03522, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000173863, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.009399, w_fc-rms=0.0108, w_oc-rms=0.01503, count=1.33e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636341, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.50,0.51,0.53 0.57,0.60,0.61,0.66), mean=0.498, stddev=0.0349], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0144] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636341, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.41 0.43,0.44,0.49,0.50,0.50 0.53,0.56,0.58,0.72), mean=0.479, stddev=0.0394], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.23,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0113] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00907254, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.60,-0.55,-0.36 -0.22,-0.10,0.0006,0.09,0.20 0.33,0.47,0.63,0.79), mean=-0.00189, stddev=0.202], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.41,0.44,0.50 0.55,0.59,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.753, stddev=0.197] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636341, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.44 0.45,0.46,0.50,0.50,0.52 0.54,0.57,0.59,0.63), mean=0.487, stddev=0.0326], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0153] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00636341, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.56,-0.46,-0.27 -0.20,-0.08,0.0003,0.09,0.17 0.29,0.39,0.55,0.66), mean=-0.000592, stddev=0.172], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.55,0.62,0.72 0.78,0.84,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.9, stddev=0.1] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=259236
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0369146
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000173863, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02859, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.30,0.32,0.34 0.36,0.39,0.53,0.84,0.89 0.94,0.97,0.98,1.0), mean=0.613, stddev=0.223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0006,0.0007,0.001 0.002,0.005,0.46,0.62,0.70 0.76,0.86,0.91,0.95), mean=0.362, stddev=0.285], bias-{mean,stddev}=0.004775,0.1313, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000173863, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01066, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.23,0.28,0.34,0.39 0.44,0.48,0.50,0.51), mean=0.289, stddev=0.0711], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.13,0.14,0.21,0.32,0.35 0.36,0.38,0.39,0.44), mean=0.228, stddev=0.0848], bias-{mean,stddev}=0.004923,0.01244, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.05,0.07,0.09,0.10 0.10,0.11,0.12,0.13), mean=0.0688, stddev=0.0222], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.17,0.19,0.22 0.27,0.34,0.46,0.55,0.60 0.63,0.65,0.67,0.70), mean=0.448, stddev=0.122], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.11,0.13,0.15 0.18,0.20,0.21,0.25), mean=0.121, stddev=0.0263], oderiv-count=998784
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27759.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.07,0.09,0.10 0.11,0.11,0.12,0.14), mean=0.0688, stddev=0.0234], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.08,0.08 0.09,0.10,0.12,0.13,0.14 0.15,0.16,0.16,0.18), mean=0.116, stddev=0.0192]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000173863, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008105, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.23,0.25 0.26,0.28,0.31,0.36,0.38 0.39,0.41,0.42,0.52), mean=0.317, stddev=0.0459], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.14,0.15,0.17,0.21,0.23 0.26,0.29,0.32,0.37), mean=0.18, stddev=0.0401], bias-{mean,stddev}=-0.01189,0.01984, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.85e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.21 0.22,0.24,0.27,0.29,0.31 0.32,0.33,0.34,0.46), mean=0.268, stddev=0.0349], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.38 0.39,0.39,0.42,0.45,0.46 0.47,0.48,0.49,0.52), mean=0.421, stddev=0.0297], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0289, stddev=0.00272], oderiv-count=965440
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25436.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.22,0.24,0.27,0.29,0.31 0.32,0.34,0.35,0.53), mean=0.267, stddev=0.0375], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.38,0.42 0.44,0.47,0.52,0.58,0.62 0.64,0.69,0.71,1.0), mean=0.526, stddev=0.0753]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000173863, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01894, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.18,0.19,0.26 0.30,0.34,0.42,0.61,0.71 0.76,0.80,0.82,1.3), mean=0.458, stddev=0.153], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.59,0.61 0.62,0.64,0.71,1.0,1.3 1.4,1.5,1.5,1.7), mean=0.823, stddev=0.261], bias-{mean,stddev}=0.02332,0.0258, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000173863, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04218, w_fc-rms=0.04765, w_oc-rms=0.05209, count=1.21e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643224, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.53,0.54,0.55 0.56,0.59,0.64,0.69,0.71 0.72,0.74,0.75,0.76), mean=0.639, stddev=0.0526], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.16,0.17,0.18 0.18,0.19,0.20,0.20,0.21 0.21,0.21,0.22,0.24), mean=0.197, stddev=0.0116] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643224, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.46,0.47,0.49 0.51,0.54,0.58,0.63,0.69 0.73,0.77,0.78,0.86), mean=0.589, stddev=0.0681], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.16,0.17 0.18,0.19,0.21,0.21,0.22 0.22,0.22,0.22,0.22), mean=0.202, stddev=0.0147] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00834295, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.76,-0.69,-0.51 -0.34,-0.22,-0.02,0.21,0.32 0.49,0.67,0.74,0.82), mean=-0.00871, stddev=0.289], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.27,0.28,0.32 0.36,0.39,0.44,0.47,0.49 0.50,0.51,0.52,0.59), mean=0.429, stddev=0.0544] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643224, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.55,0.56,0.58 0.60,0.62,0.66,0.69,0.71 0.74,0.76,0.77,0.86), mean=0.658, stddev=0.0483], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.16 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.22), mean=0.181, stddev=0.0133] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00839193, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.76,-0.73,-0.51 -0.34,-0.20,-0.02,0.19,0.30 0.49,0.70,0.77,0.86), mean=-0.00892, stddev=0.286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.30,0.34 0.43,0.53,0.62,0.66,0.68 0.69,0.70,0.71,0.74), mean=0.587, stddev=0.104] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.47e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=9.07511e-06, count-zeroing-boundaries=220383
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0369146
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000173863, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07287, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.0,1.1 1.1,1.2,1.6,2.0,2.1 2.1,2.2,2.2,2.3), mean=1.61, stddev=0.394], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.58,0.77,0.95 1.0,1.1,1.2,1.3,1.3 1.4,1.4,1.5,1.6), mean=1.17, stddev=0.153], bias-{mean,stddev}=0.01315,0.2911, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000173863, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03875, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.49,0.51,0.53 0.55,0.57,0.61,0.66,0.69 0.72,0.78,0.83,2.3), mean=0.618, stddev=0.0925], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.3,1.3,1.7,2.1,2.2 2.3,2.3,2.4,2.4), mean=1.73, stddev=0.39], bias-{mean,stddev}=3.994e-09,0.03389, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0168, stddev=0.0137], oderiv-count=512640
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/172.mdl exp/nnet3/tdnn_lstm1c_sp/173.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.78096 tdnn2.affine:6.78448 lstm1.W_all:5.46246 lstm1.lstm_nonlin:0.09145 lstm1.W_rp:2.19358 tdnn3.affine:4.36464 tdnn4.affine:4.94965 lstm2.W_all:3.74479 lstm2.lstm_nonlin:0.0468799 lstm2.W_rp:1.50989 tdnn5.affine:3.43651 tdnn6.affine:3.98517 lstm3.W_all:4.94041 lstm3.lstm_nonlin:0.105951 lstm3.W_rp:1.96245 output.affine:4.316 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.4824 tdnn2.affine:10.5141 lstm1.W_all:18.7036 lstm1.lstm_nonlin:1.18581 lstm1.W_rp:11.9505 tdnn3.affine:7.65173 tdnn4.affine:7.83505 lstm2.W_all:15.3471 lstm2.lstm_nonlin:0.473316 lstm2.W_rp:10.723 tdnn5.affine:6.79728 tdnn6.affine:7.31934 lstm3.W_all:22.0781 lstm3.lstm_nonlin:1.87532 lstm3.W_rp:27.2045 output.affine:28.7015 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.587937 tdnn2.affine:0.648273 lstm1.W_all:0.292315 lstm1.lstm_nonlin:0.0769927 lstm1.W_rp:0.184037 tdnn3.affine:0.571578 tdnn4.affine:0.632491 lstm2.W_all:0.244417 lstm2.lstm_nonlin:0.100399 lstm2.W_rp:0.141209 tdnn5.affine:0.505574 tdnn6.affine:0.546111 lstm3.W_all:0.224026 lstm3.lstm_nonlin:0.0563526 lstm3.W_rp:0.0723608 output.affine:0.150395 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:09:28 KST 2020, elapsed time 0 seconds
