# nnet3-info exp/nnet3/tdnn_lstm1c_sp/317.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/316.mdl exp/nnet3/tdnn_lstm1c_sp/317.mdl 
# Started at Thu Jul 30 12:06:33 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/317.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000174165, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03154, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.007,0.009 0.01,0.03,0.55,0.69,0.78 0.85,0.91,0.98,1.1), mean=0.462, stddev=0.292], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.16 0.17,0.21,0.63,0.90,1.2 1.3,1.5,1.5,1.5), mean=0.617, stddev=0.369], bias-{mean,stddev}=-0.001594,0.06045, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0.189372, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,2e-05,3e-05,5e-05 8e-05,0.0002,0.05,0.09,0.11 0.12,0.14,0.16,0.20), mean=0.0504, stddev=0.0446], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.03 0.05,0.07,0.42,0.60,0.72 0.81,0.88,0.93,1.0), mean=0.371, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.009,0.01,0.02 0.02,0.05,0.29,0.39,0.46 0.56,0.64,0.73,1.5), mean=0.271, stddev=0.181], oderiv-count=1.16371e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35714, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,8e-06,1e-05,3e-05 6e-05,0.0002,0.05,0.09,0.11 0.12,0.14,0.16,0.19), mean=0.0482, stddev=0.0436], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0001,0.0001,0.0002 0.0004,0.001,0.08,0.11,0.12 0.14,0.14,0.15,0.17), mean=0.0677, stddev=0.0492]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000174165, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01174, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.36,0.37 0.38,0.40,0.45,0.51,0.55 0.59,0.62,0.64,0.71), mean=0.459, stddev=0.0653], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.005 0.007,0.02,0.28,0.33,0.36 0.39,0.44,0.48,0.73), mean=0.227, stddev=0.142], bias-{mean,stddev}=-0.02975,0.04021, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.21,0.22 0.23,0.25,0.28,0.31,0.34 0.35,0.38,0.41,0.47), mean=0.282, stddev=0.0427], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.37,0.39 0.40,0.42,0.44,0.47,0.49 0.51,0.52,0.53,0.54), mean=0.443, stddev=0.0358], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0445, stddev=0.00774], oderiv-count=1.16064e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34939.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.23,0.25,0.28,0.32,0.34 0.36,0.40,0.41,0.50), mean=0.283, stddev=0.0451], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.42,0.43 0.45,0.47,0.51,0.56,0.59 0.62,0.67,0.68,0.72), mean=0.517, stddev=0.0596]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000174165, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01765, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,1e-06,3e-06,2e-05 0.0006,0.16,0.42,0.59,0.67 0.72,0.79,0.84,1.0), mean=0.386, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.39,0.43 0.52,0.70,0.81,0.90,0.95 1.0,1.1,1.2,1.3), mean=0.788, stddev=0.164], bias-{mean,stddev}=0.003806,0.02903, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000174165, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.08684, w_fc-rms=0.03246, w_oc-rms=0.04773, count=1.51e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629086, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.44,0.45,0.48,0.50,0.54 0.72,0.79,0.82,0.86), mean=0.497, stddev=0.0795], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0231] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629086, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.45,0.47,0.48 0.49,0.50,0.51,0.55,0.59 0.68,0.78,0.82,0.87), mean=0.53, stddev=0.0666], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.17 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0244] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0303516, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.89,-0.87,-0.54 -0.28,-0.13,0.0007,0.16,0.31 0.58,0.87,0.88,0.92), mean=0.0175, stddev=0.305], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.20,0.24 0.38,0.45,0.58,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.612, stddev=0.219] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629086, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.39,0.40 0.42,0.43,0.46,0.50,0.50 0.51,0.56,0.58,0.75), mean=0.463, stddev=0.0404], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0202] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00629086, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.68,-0.63,-0.31 -0.15,-0.07,0.0007,0.09,0.20 0.33,0.63,0.69,0.75), mean=0.0114, stddev=0.209], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.48,0.58 0.79,0.84,0.90,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.88, stddev=0.116] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=9.25059e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00027188, count-zeroing-boundaries=299764
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.277686
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000174165, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04017, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.39,0.43 0.47,0.54,0.87,1.2,1.3 1.3,1.3,1.4,1.4), mean=0.861, stddev=0.314], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0008,0.001,0.002 0.01,0.33,0.53,0.73,0.92 1.2,1.6,1.6,1.9), mean=0.544, stddev=0.352], bias-{mean,stddev}=0.0123,0.2637, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000174165, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01335, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.20,0.24,0.26 0.28,0.30,0.36,0.42,0.46 0.49,0.53,0.54,0.59), mean=0.365, stddev=0.0757], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.14 0.15,0.17,0.29,0.39,0.42 0.45,0.47,0.47,0.51), mean=0.284, stddev=0.109], bias-{mean,stddev}=0.00211,0.009208, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.73e+05, self-repaired-proportion=0.0032177, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.01,0.02,0.03 0.04,0.05,0.08,0.10,0.12 0.13,0.14,0.15,0.17), mean=0.0784, stddev=0.0298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.15,0.20 0.25,0.38,0.51,0.61,0.66 0.69,0.72,0.74,0.84), mean=0.49, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.09,0.09,0.10 0.11,0.11,0.13,0.16,0.19 0.22,0.27,0.28,0.34), mean=0.14, stddev=0.0405], oderiv-count=1.15021e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32617.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.01,0.02,0.03 0.04,0.05,0.08,0.10,0.11 0.13,0.14,0.15,0.19), mean=0.0778, stddev=0.0297], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.05,0.07,0.08 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.17,0.19), mean=0.119, stddev=0.0243]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000174165, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008701, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.29 0.30,0.31,0.33,0.37,0.40 0.43,0.45,0.46,0.51), mean=0.341, stddev=0.0428], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.12,0.13,0.14 0.15,0.16,0.19,0.23,0.25 0.28,0.30,0.33,0.38), mean=0.193, stddev=0.0445], bias-{mean,stddev}=-0.02433,0.02022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.21 0.22,0.23,0.26,0.29,0.30 0.31,0.32,0.33,0.39), mean=0.261, stddev=0.0306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.37,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.49,0.50), mean=0.434, stddev=0.0278], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0362, stddev=0.00307], oderiv-count=1.01174e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30295, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.21 0.22,0.24,0.26,0.29,0.31 0.32,0.33,0.34,0.38), mean=0.264, stddev=0.0322], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.37,0.40,0.42 0.43,0.45,0.50,0.56,0.59 0.62,0.65,0.67,0.81), mean=0.507, stddev=0.0651]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000174165, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01467, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-06,4e-06,1e-05 4e-05,0.0009,0.33,0.53,0.59 0.64,0.68,0.70,0.92), mean=0.289, stddev=0.238], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.30,0.31,0.37 0.47,0.60,0.66,0.73,0.78 0.84,0.95,1.0,1.4), mean=0.656, stddev=0.134], bias-{mean,stddev}=0.0067,0.03539, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000174165, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05641, w_fc-rms=0.0181, w_oc-rms=0.03936, count=1.38e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634622, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.45,0.46 0.46,0.48,0.50,0.51,0.57 0.61,0.69,0.72,0.81), mean=0.507, stddev=0.0526], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.018] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634622, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.45,0.47,0.48 0.49,0.50,0.50,0.55,0.59 0.63,0.68,0.70,0.76), mean=0.525, stddev=0.0486], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0211] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00850991, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.83,-0.77,-0.47 -0.27,-0.11,0.0003,0.14,0.34 0.57,0.72,0.77,0.84), mean=0.0124, stddev=0.278], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.27,0.29,0.39 0.45,0.53,0.65,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.715, stddev=0.225] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634622, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.45 0.46,0.47,0.50,0.50,0.51 0.54,0.56,0.58,0.66), mean=0.492, stddev=0.0272], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0188] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00634622, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.68,-0.59,-0.47,-0.29 -0.16,-0.07,0.0003,0.09,0.19 0.37,0.46,0.53,0.61), mean=0.00834, stddev=0.18], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.59,0.61,0.73 0.78,0.85,0.92,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.91, stddev=0.0952] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.75e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.56877e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=9.26809e-05, count-zeroing-boundaries=264348
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.277686
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000174165, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03902, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.50,0.53 0.57,0.61,0.87,1.1,1.2 1.2,1.2,1.3,1.3), mean=0.857, stddev=0.241], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.004,0.01,0.56,0.81,0.97 1.1,1.3,1.5,1.7), mean=0.488, stddev=0.398], bias-{mean,stddev}=0.002103,0.2139, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000174165, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01284, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.27 0.28,0.30,0.34,0.40,0.44 0.48,0.51,0.54,0.59), mean=0.353, stddev=0.0638], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.17,0.19,0.27,0.37,0.41 0.43,0.44,0.45,0.48), mean=0.279, stddev=0.089], bias-{mean,stddev}=0.0006863,0.005789, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.04e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.0647, stddev=0.0272], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.14,0.19 0.23,0.32,0.50,0.60,0.64 0.67,0.69,0.70,0.79), mean=0.469, stddev=0.15], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.14,0.17,0.20 0.22,0.25,0.25,0.29), mean=0.148, stddev=0.0338], oderiv-count=1.02656e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27972.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.0676, stddev=0.0275], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.09,0.11,0.13,0.13 0.14,0.15,0.15,0.18), mean=0.107, stddev=0.0218]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000174165, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00859, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.17,0.21 0.26,0.29,0.33,0.39,0.41 0.42,0.45,0.46,0.50), mean=0.334, stddev=0.062], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.15,0.18,0.22,0.25 0.28,0.31,0.33,0.39), mean=0.19, stddev=0.0458], bias-{mean,stddev}=-0.01718,0.02558, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.57e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.15,0.19 0.22,0.25,0.28,0.31,0.32 0.34,0.35,0.35,0.44), mean=0.276, stddev=0.0441], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.36,0.38 0.39,0.40,0.43,0.46,0.47 0.48,0.49,0.50,0.53), mean=0.429, stddev=0.0334], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0296, stddev=0.00289], oderiv-count=912640
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25650.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.20 0.23,0.25,0.29,0.31,0.33 0.34,0.35,0.37,0.49), mean=0.282, stddev=0.0458], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.27,0.35 0.42,0.48,0.55,0.61,0.66 0.69,0.74,0.77,1.1), mean=0.542, stddev=0.102]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000174165, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02076, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.27,0.28,0.30 0.31,0.36,0.50,0.64,0.71 0.76,0.85,0.90,1.0), mean=0.508, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.65,0.67,0.74 0.78,0.82,0.89,1.1,1.1 1.2,1.4,1.4,1.8), mean=0.933, stddev=0.16], bias-{mean,stddev}=0.01292,0.01739, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000174165, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1002, w_fc-rms=0.0461, w_oc-rms=0.07526, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641307, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.58,0.61,0.63 0.65,0.68,0.73,0.78,0.81 0.83,0.85,0.87,0.89), mean=0.73, stddev=0.0593], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.15,0.17,0.18,0.19 0.20,0.20,0.21,0.22), mean=0.164, stddev=0.0245] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641307, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.51,0.57,0.60 0.62,0.65,0.70,0.74,0.79 0.83,0.85,0.87,0.89), mean=0.7, stddev=0.0676], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.12 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.23), mean=0.168, stddev=0.025] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0348895, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.87,-0.82,-0.65 -0.47,-0.32,-0.0004,0.31,0.46 0.61,0.82,0.85,0.89), mean=-0.0027, stddev=0.375], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.19,0.22 0.28,0.36,0.46,0.52,0.54 0.56,0.59,0.59,0.63), mean=0.438, stddev=0.0992] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641307, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.50,0.53 0.56,0.59,0.64,0.68,0.71 0.74,0.77,0.81,0.88), mean=0.637, stddev=0.0622], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0186] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00641307, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.72,-0.65,-0.51 -0.37,-0.26,-0.006,0.24,0.36 0.51,0.67,0.69,0.75), mean=-0.00418, stddev=0.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.42,0.46 0.52,0.61,0.69,0.74,0.77 0.79,0.80,0.81,0.83), mean=0.672, stddev=0.0937] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.32503e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.22467e-06, count-zeroing-boundaries=224752
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.277686
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000174165, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09118, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.8,2.6,2.7 2.8,2.9,2.9,3.1), mean=1.98, stddev=0.633], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.87,0.99,1.1 1.1,1.2,1.4,1.6,1.9 2.1,2.2,2.3,2.3), mean=1.44, stddev=0.303], bias-{mean,stddev}=7.509e-05,0.7185, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000174165, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04418, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.61,0.62 0.64,0.66,0.70,0.74,0.78 0.81,0.86,0.93,2.1), mean=0.707, stddev=0.0834], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.5,2.6 2.7,2.7,2.8,2.9), mean=1.94, stddev=0.587], bias-{mean,stddev}=4.855e-09,0.02222, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.42), mean=0.0168, stddev=0.0138], oderiv-count=651840
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/316.mdl exp/nnet3/tdnn_lstm1c_sp/317.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.95687 tdnn2.affine:3.864 lstm1.W_all:3.06071 lstm1.lstm_nonlin:0.0647005 lstm1.W_rp:1.25086 tdnn3.affine:2.82679 tdnn4.affine:2.98614 lstm2.W_all:2.17867 lstm2.lstm_nonlin:0.0354995 lstm2.W_rp:0.880579 tdnn5.affine:2.38265 tdnn6.affine:2.49081 lstm3.W_all:2.26248 lstm3.lstm_nonlin:0.0591194 lstm3.W_rp:0.904706 output.affine:2.54124 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.5327 tdnn2.affine:10.638 lstm1.W_all:20.5684 lstm1.lstm_nonlin:2.37781 lstm1.W_rp:15.3722 tdnn3.affine:8.50788 tdnn4.affine:7.87026 lstm2.W_all:17.1365 lstm2.lstm_nonlin:1.62186 lstm2.W_rp:14.7572 tdnn5.affine:8.17551 tdnn6.affine:7.76837 lstm3.W_all:24.1631 lstm3.lstm_nonlin:3.04423 lstm3.W_rp:35.4721 output.affine:32.6896 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.315807 tdnn2.affine:0.363475 lstm1.W_all:0.148857 lstm1.lstm_nonlin:0.0272545 lstm1.W_rp:0.0814164 tdnn3.affine:0.332652 tdnn4.affine:0.380041 lstm2.W_all:0.127069 lstm2.lstm_nonlin:0.0219362 lstm2.W_rp:0.0596885 tdnn5.affine:0.291806 tdnn6.affine:0.320972 lstm3.W_all:0.0935927 lstm3.lstm_nonlin:0.0193901 lstm3.W_rp:0.0254951 output.affine:0.0777172 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:06:34 KST 2020, elapsed time 1 seconds
