# nnet3-info exp/nnet3/tdnn_lstm1c_sp/8.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/7.mdl exp/nnet3/tdnn_lstm1c_sp/8.mdl 
# Started at Thu Jul 30 10:04:19 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/8.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000293413, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02987, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.008 0.008,0.009,0.55,0.67,0.72 0.78,0.82,0.88,1.0), mean=0.426, stddev=0.293], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.16,0.20,0.55,0.80,1.1 1.4,1.5,1.6,1.7), mean=0.572, stddev=0.369], bias-{mean,stddev}=0.008421,0.05935, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0.300361, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 1e-08,1e-05,0.07,0.10,0.12 0.13,0.14,0.15,0.18), mean=0.0574, stddev=0.0478], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 3e-05,0.009,0.45,0.63,0.73 0.79,0.84,0.86,0.90), mean=0.372, stddev=0.285], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.33,0.43,0.49 0.56,0.66,0.68,0.92), mean=0.28, stddev=0.194], oderiv-count=1.23226e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=45409.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 9e-08,8e-06,0.07,0.10,0.12 0.13,0.15,0.16,0.19), mean=0.0571, stddev=0.0478], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 7e-06,0.0001,0.11,0.12,0.13 0.14,0.15,0.16,0.18), mean=0.0773, stddev=0.0571]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000293413, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01271, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.43 0.45,0.47,0.50,0.54,0.56 0.58,0.59,0.60,0.63), mean=0.5, stddev=0.0444], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.005 0.005,0.006,0.32,0.37,0.40 0.42,0.44,0.46,0.53), mean=0.24, stddev=0.162], bias-{mean,stddev}=-0.003366,0.04029, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.26,0.28 0.29,0.31,0.33,0.36,0.39 0.40,0.42,0.43,0.50), mean=0.337, stddev=0.0381], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.41 0.42,0.44,0.46,0.50,0.51 0.52,0.53,0.54,0.56), mean=0.465, stddev=0.034], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.08), mean=0.0414, stddev=0.00652], oderiv-count=1.19763e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=44487.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.25,0.27 0.29,0.30,0.33,0.36,0.38 0.40,0.42,0.43,0.51), mean=0.332, stddev=0.0393], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.44,0.46,0.48 0.50,0.52,0.57,0.61,0.64 0.66,0.69,0.70,0.74), mean=0.567, stddev=0.056]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000293413, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02085, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.39 0.40,0.42,0.49,0.61,0.71 0.76,0.82,0.85,1.0), mean=0.518, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.71,0.72,0.74 0.75,0.87,0.97,1.0,1.0 1.1,1.1,1.1,1.2), mean=0.945, stddev=0.102], bias-{mean,stddev}=0.0009544,0.3778, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000293413, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.3938, w_fc-rms=0.3821, w_oc-rms=0.3728, count=1.42e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616654, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.29,0.30,0.33 0.37,0.42,0.50,0.59,0.64 0.67,0.72,0.73,0.87), mean=0.506, stddev=0.103], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.16,0.17,0.19 0.20,0.21,0.22,0.23,0.24 0.24,0.24,0.24,0.24), mean=0.219, stddev=0.0167] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616654, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.26,0.29 0.34,0.38,0.47,0.58,0.66 0.72,0.77,0.80,0.84), mean=0.483, stddev=0.124], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.17 0.19,0.21,0.23,0.24,0.24 0.24,0.24,0.24,0.24), mean=0.219, stddev=0.023] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00807776, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.78,-0.74,-0.64 -0.53,-0.36,0.003,0.39,0.55 0.66,0.73,0.77,0.82), mean=0.0136, stddev=0.396], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.29,0.30,0.35 0.39,0.45,0.55,0.66,0.72 0.77,0.82,0.85,0.87), mean=0.554, stddev=0.127] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616654, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.30,0.33 0.37,0.40,0.48,0.56,0.61 0.66,0.71,0.73,0.79), mean=0.484, stddev=0.0954], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.19 0.19,0.20,0.22,0.23,0.23 0.24,0.24,0.24,0.24), mean=0.216, stddev=0.0154] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00939563, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.76,-0.73,-0.59 -0.43,-0.25,-0.004,0.30,0.43 0.55,0.70,0.72,0.87), mean=0.00821, stddev=0.334], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.24,0.29,0.43 0.57,0.68,0.80,0.88,0.91 0.93,0.96,0.97,0.98), mean=0.761, stddev=0.151] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=294477
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000293413, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03318, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.59,0.61 0.63,0.67,0.75,0.84,0.88 0.90,0.92,0.93,0.96), mean=0.751, stddev=0.0901], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.31,0.34 0.37,0.41,0.51,0.62,0.69 0.74,0.80,0.84,1.0), mean=0.521, stddev=0.122], bias-{mean,stddev}=0.0381,0.387, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000293413, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01452, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.19,0.20,0.22 0.25,0.30,0.38,0.47,0.54 0.60,0.65,0.68,0.75), mean=0.39, stddev=0.112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.24 0.26,0.28,0.32,0.38,0.40 0.42,0.44,0.45,0.48), mean=0.327, stddev=0.0529], bias-{mean,stddev}=0.0001448,0.01045, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.0101331, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,0.02,0.05,0.08 0.11,0.14,0.20,0.26,0.30 0.32,0.34,0.35,0.43), mean=0.199, stddev=0.073], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.09,0.13,0.21 0.27,0.35,0.49,0.63,0.71 0.76,0.79,0.82,0.84), mean=0.486, stddev=0.164], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.05,0.06,0.07 0.09,0.10,0.13,0.28), mean=0.0542, stddev=0.0226], oderiv-count=1.07712e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=41722.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.03,0.04,0.08 0.10,0.13,0.19,0.26,0.29 0.31,0.33,0.35,0.41), mean=0.193, stddev=0.0736], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.13,0.15,0.18 0.22,0.25,0.29,0.34,0.36 0.39,0.41,0.43,0.48), mean=0.292, stddev=0.0624]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000293413, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01029, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.27,0.31 0.33,0.37,0.41,0.44,0.46 0.47,0.49,0.50,0.52), mean=0.403, stddev=0.0506], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.10,0.11,0.12 0.14,0.17,0.23,0.27,0.30 0.33,0.36,0.38,0.45), mean=0.226, stddev=0.0616], bias-{mean,stddev}=-0.009766,0.02572, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.32e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.26 0.28,0.29,0.32,0.35,0.37 0.39,0.40,0.42,0.45), mean=0.323, stddev=0.0366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.38,0.39 0.41,0.42,0.44,0.47,0.48 0.49,0.50,0.50,0.52), mean=0.441, stddev=0.029], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.027, stddev=0.00392], oderiv-count=1.03488e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38958.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.27 0.28,0.29,0.32,0.35,0.37 0.39,0.41,0.42,0.44), mean=0.324, stddev=0.0372], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.47,0.49 0.52,0.54,0.59,0.63,0.66 0.68,0.71,0.74,0.78), mean=0.589, stddev=0.0572]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000293413, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01885, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.37,0.38 0.38,0.40,0.44,0.54,0.61 0.67,0.72,0.75,0.88), mean=0.472, stddev=0.0925], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.69,0.70,0.70,0.72 0.73,0.77,0.87,0.92,0.94 0.97,0.99,1.0,1.1), mean=0.856, stddev=0.0778], bias-{mean,stddev}=0.01167,0.3789, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000293413, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.4065, w_fc-rms=0.3901, w_oc-rms=0.3911, count=1.3e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622093, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.30,0.31,0.34 0.37,0.41,0.50,0.60,0.65 0.69,0.73,0.75,0.84), mean=0.51, stddev=0.105], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.19 0.20,0.21,0.22,0.23,0.24 0.24,0.24,0.24,0.24), mean=0.219, stddev=0.0176] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622093, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.29,0.30,0.34 0.37,0.40,0.47,0.58,0.65 0.73,0.80,0.82,0.90), mean=0.495, stddev=0.117], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.15,0.17 0.20,0.21,0.23,0.24,0.24 0.24,0.24,0.24,0.24), mean=0.221, stddev=0.0237] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00622093, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.78,-0.74,-0.62 -0.50,-0.36,-0.0004,0.36,0.55 0.62,0.70,0.79,0.87), mean=0.00658, stddev=0.381], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.30,0.32,0.41 0.45,0.49,0.58,0.70,0.76 0.81,0.85,0.86,0.88), mean=0.593, stddev=0.123] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622093, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.30,0.32 0.35,0.40,0.49,0.59,0.64 0.68,0.73,0.78,0.87), mean=0.496, stddev=0.11], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.18 0.20,0.21,0.22,0.23,0.24 0.24,0.24,0.24,0.24), mean=0.218, stddev=0.0175] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.018216, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.82,-0.80,-0.55 -0.40,-0.25,-0.003,0.28,0.43 0.57,0.71,0.77,0.96), mean=0.0068, stddev=0.332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.20,0.27,0.40 0.61,0.69,0.81,0.89,0.92 0.94,0.96,0.97,0.97), mean=0.773, stddev=0.158] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=259719
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000293413, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03169, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.59,0.61 0.63,0.65,0.71,0.78,0.81 0.86,0.88,0.90,0.93), mean=0.719, stddev=0.0737], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.29,0.31 0.34,0.37,0.47,0.60,0.68 0.75,0.83,0.89,1.0), mean=0.492, stddev=0.139], bias-{mean,stddev}=-0.01329,0.3776, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000293413, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01348, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.12,0.17 0.20,0.25,0.35,0.45,0.51 0.55,0.61,0.68,0.75), mean=0.356, stddev=0.121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.21,0.23 0.24,0.26,0.30,0.35,0.37 0.39,0.41,0.42,0.47), mean=0.303, stddev=0.0491], bias-{mean,stddev}=-0.0003729,0.008787, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.41e+05, self-repaired-proportion=0.0435897, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,8e-05,0.002,0.03 0.08,0.11,0.19,0.27,0.31 0.34,0.36,0.38,0.41), mean=0.187, stddev=0.0904], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.004,0.02,0.12 0.21,0.29,0.42,0.57,0.64 0.70,0.74,0.76,0.83), mean=0.423, stddev=0.171], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.05,0.06,0.08 0.09,0.14,0.15,0.23), mean=0.0518, stddev=0.0261], oderiv-count=1.01939e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36193.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,2e-05,0.0002,0.03 0.07,0.11,0.18,0.25,0.28 0.32,0.34,0.35,0.42), mean=0.177, stddev=0.0848], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0006,0.003,0.10 0.19,0.23,0.31,0.36,0.38 0.41,0.44,0.46,0.52), mean=0.289, stddev=0.0903]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000293413, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01025, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.31 0.35,0.37,0.41,0.44,0.45 0.48,0.51,0.52,0.58), mean=0.402, stddev=0.0484], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.08,0.11 0.13,0.15,0.22,0.28,0.31 0.35,0.38,0.42,0.61), mean=0.221, stddev=0.0762], bias-{mean,stddev}=-0.002439,0.0302, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.97e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.25,0.27 0.28,0.30,0.33,0.37,0.39 0.41,0.43,0.44,0.54), mean=0.335, stddev=0.0433], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.37 0.38,0.40,0.43,0.45,0.47 0.48,0.49,0.50,0.54), mean=0.426, stddev=0.0326], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0249, stddev=0.00315], oderiv-count=948160
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33428.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.25,0.27 0.28,0.30,0.34,0.37,0.39 0.41,0.42,0.44,0.57), mean=0.336, stddev=0.0437], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.48,0.50,0.52 0.55,0.58,0.62,0.68,0.71 0.73,0.75,0.78,0.84), mean=0.623, stddev=0.0619]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000293413, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02158, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.38,0.39 0.41,0.44,0.51,0.62,0.72 0.79,0.84,0.87,1.2), mean=0.537, stddev=0.12], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.80,0.81,0.85 0.88,0.90,0.95,1.1,1.1 1.2,1.3,1.3,1.4), mean=0.979, stddev=0.106], bias-{mean,stddev}=0.001606,0.3784, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000293413, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.3609, w_fc-rms=0.3755, w_oc-rms=0.3897, count=1.18e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628661, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.35,0.37,0.40 0.43,0.48,0.56,0.63,0.67 0.71,0.72,0.74,0.80), mean=0.556, stddev=0.0905], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.17 0.18,0.19,0.20,0.21,0.22 0.23,0.23,0.23,0.24), mean=0.2, stddev=0.0185] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628661, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.32,0.33,0.37 0.41,0.46,0.56,0.65,0.68 0.74,0.80,0.82,0.87), mean=0.555, stddev=0.111], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.14,0.16 0.17,0.18,0.21,0.22,0.23 0.23,0.24,0.24,0.24), mean=0.202, stddev=0.0233] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00966761, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.76,-0.71,-0.59 -0.45,-0.25,0.01,0.26,0.42 0.55,0.67,0.71,0.76), mean=-0.00408, stddev=0.327], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.28,0.29,0.33 0.38,0.42,0.48,0.56,0.62 0.67,0.72,0.73,0.80), mean=0.49, stddev=0.098] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628661, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.33,0.37,0.40 0.44,0.50,0.60,0.69,0.73 0.75,0.78,0.79,0.85), mean=0.593, stddev=0.107], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.16,0.17,0.19,0.20,0.21 0.22,0.23,0.23,0.23), mean=0.186, stddev=0.0196] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00860266, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.76,-0.72,-0.57 -0.37,-0.23,-0.01,0.22,0.34 0.50,0.65,0.72,0.84), mean=-0.00621, stddev=0.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.28,0.34,0.39 0.50,0.58,0.67,0.76,0.81 0.85,0.89,0.90,0.94), mean=0.663, stddev=0.127] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=220867
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000293413, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.2,1.3,1.4,1.5,1.5 1.6,1.6,1.7,1.7), mean=1.39, stddev=0.117], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.40,0.50 0.63,0.77,0.97,1.2,1.2 1.3,1.4,1.4,1.7), mean=0.957, stddev=0.238], bias-{mean,stddev}=0.03475,0.3598, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000293413, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04125, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.49,0.50,0.53 0.55,0.58,0.64,0.72,0.77 0.81,0.88,0.96,2.2), mean=0.656, stddev=0.11], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.6,1.6 1.7,1.7,1.9,2.0,2.1 2.2,2.2,2.3,2.3), mean=1.88, stddev=0.171], bias-{mean,stddev}=2.521e-09,0.01017, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=577280
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/7.mdl exp/nnet3/tdnn_lstm1c_sp/8.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.0545 tdnn2.affine:9.55806 lstm1.W_all:8.74753 lstm1.lstm_nonlin:1.88546 lstm1.W_rp:4.00191 tdnn3.affine:6.31612 tdnn4.affine:7.21904 lstm2.W_all:6.37267 lstm2.lstm_nonlin:1.93544 lstm2.W_rp:2.90298 tdnn5.affine:5.14956 tdnn6.affine:6.59369 lstm3.W_all:7.44926 lstm3.lstm_nonlin:1.82753 lstm3.W_rp:3.06743 output.affine:6.74533 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.8753 tdnn2.affine:11.4828 lstm1.W_all:29.7431 lstm1.lstm_nonlin:15.1272 lstm1.W_rp:13.7155 tdnn3.affine:9.2487 tdnn4.affine:9.28487 lstm2.W_all:27.9152 lstm2.lstm_nonlin:15.6407 lstm2.W_rp:13.1475 tdnn5.affine:8.58726 tdnn6.affine:9.26123 lstm3.W_all:30.4594 lstm3.lstm_nonlin:14.8329 lstm3.W_rp:23.2301 output.affine:30.5105 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.760213 tdnn2.affine:0.826589 lstm1.W_all:0.273497 lstm1.lstm_nonlin:0.110919 lstm1.W_rp:0.279369 tdnn3.affine:0.670409 tdnn4.affine:0.76942 lstm2.W_all:0.209491 lstm2.lstm_nonlin:0.110152 lstm2.W_rp:0.211546 tdnn5.affine:0.587235 tdnn6.affine:0.701031 lstm3.W_all:0.228539 lstm3.lstm_nonlin:0.10983 lstm3.W_rp:0.131441 output.affine:0.22237 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:04:19 KST 2020, elapsed time 0 seconds
