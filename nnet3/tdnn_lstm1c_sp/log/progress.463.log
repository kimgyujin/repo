# nnet3-info exp/nnet3/tdnn_lstm1c_sp/463.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/462.mdl exp/nnet3/tdnn_lstm1c_sp/463.mdl 
# Started at Thu Jul 30 13:04:46 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/463.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=6.89854e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03228, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.004,0.006 0.009,0.02,0.57,0.73,0.79 0.87,0.92,0.96,1.3), mean=0.468, stddev=0.306], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.19,0.23,0.69,0.93,1.1 1.3,1.4,1.4,1.4), mean=0.645, stddev=0.354], bias-{mean,stddev}=-0.007724,0.05884, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0.153091, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,2e-05,2e-05,4e-05 6e-05,0.0002,0.03,0.08,0.11 0.12,0.13,0.15,0.19), mean=0.0428, stddev=0.0437], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.03 0.05,0.07,0.35,0.61,0.70 0.78,0.87,0.89,0.98), mean=0.341, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.01 0.02,0.05,0.43,0.64,0.77 0.88,0.98,1.1,1.7), mean=0.417, stddev=0.288], oderiv-count=1.2295e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35791.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,1e-05,3e-05,3e-05 6e-05,0.0002,0.03,0.08,0.10 0.12,0.13,0.15,0.20), mean=0.0409, stddev=0.0424], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.0001,0.0001,0.0002 0.0003,0.0008,0.07,0.10,0.12 0.13,0.14,0.14,0.15), mean=0.0573, stddev=0.0477]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.89854e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01136, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.33,0.34 0.36,0.39,0.43,0.49,0.54 0.57,0.61,0.63,0.71), mean=0.443, stddev=0.0683], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.005,0.01,0.27,0.33,0.36 0.38,0.42,0.49,0.76), mean=0.216, stddev=0.143], bias-{mean,stddev}=-0.03585,0.03736, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.12e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.18 0.19,0.21,0.24,0.27,0.29 0.31,0.32,0.34,0.41), mean=0.242, stddev=0.0411], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.35,0.37,0.38 0.40,0.41,0.44,0.47,0.49 0.51,0.52,0.52,0.56), mean=0.441, stddev=0.0381], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.06,0.07,0.07 0.08,0.09,0.10,0.12), mean=0.0586, stddev=0.0124], oderiv-count=1.18109e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35032.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.18 0.19,0.21,0.24,0.28,0.30 0.32,0.34,0.36,0.44), mean=0.245, stddev=0.0435], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.31,0.33,0.35 0.37,0.39,0.44,0.49,0.53 0.55,0.58,0.58,0.63), mean=0.443, stddev=0.06]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.89854e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01732, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,5e-07,1e-06,8e-06 0.0002,0.18,0.39,0.58,0.65 0.72,0.80,0.88,1.1), mean=0.378, stddev=0.228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.38,0.41 0.47,0.68,0.80,0.89,0.95 1.0,1.1,1.2,1.3), mean=0.771, stddev=0.172], bias-{mean,stddev}=0.0004097,0.02206, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.89854e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04572, w_fc-rms=0.02162, w_oc-rms=0.0391, count=1.51e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644466, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.42,0.43 0.44,0.45,0.48,0.50,0.54 0.64,0.71,0.73,0.77), mean=0.49, stddev=0.0621], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0151] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644466, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.43,0.44 0.45,0.47,0.50,0.51,0.55 0.61,0.66,0.70,0.76), mean=0.499, stddev=0.0509], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.013] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00657305, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.81,-0.76,-0.44 -0.27,-0.13,0.0006,0.15,0.27 0.59,0.74,0.80,0.86), mean=0.0136, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.28,0.31,0.34 0.40,0.46,0.58,0.71,1.0 1.0,1.0,1.0,1.0), mean=0.616, stddev=0.201] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644466, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.55,0.58,0.65), mean=0.461, stddev=0.0416], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0183] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00870252, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.80,-0.75,-0.38 -0.22,-0.11,0.0002,0.13,0.23 0.46,0.66,0.79,0.90), mean=0.0107, stddev=0.252], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.28,0.33,0.47 0.66,0.75,0.84,0.90,1.0 1.0,1.0,1.0,1.0), mean=0.816, stddev=0.152] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.68876e-05, count-zeroing-boundaries=296076
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0363636
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.89854e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03818, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.44,0.46 0.51,0.55,0.83,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.83, stddev=0.262], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0005,0.0008,0.002 0.006,0.40,0.55,0.71,0.87 1.0,1.2,1.3,1.6), mean=0.535, stddev=0.305], bias-{mean,stddev}=0.01103,0.2431, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=6.89854e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0122, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.23,0.24,0.26 0.27,0.29,0.33,0.37,0.41 0.44,0.47,0.48,0.55), mean=0.336, stddev=0.0551], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.16,0.18,0.26,0.35,0.38 0.40,0.43,0.44,0.47), mean=0.265, stddev=0.0865], bias-{mean,stddev}=0.001349,0.01047, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=3.84615e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.13 0.15,0.16,0.16,0.19), mean=0.0819, stddev=0.0379], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.12,0.15 0.21,0.28,0.43,0.54,0.60 0.64,0.66,0.69,0.83), mean=0.414, stddev=0.145], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.10,0.11,0.15,0.18 0.21,0.24,0.25,0.29), mean=0.126, stddev=0.0385], oderiv-count=1.01114e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32753, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.13 0.15,0.16,0.16,0.19), mean=0.0807, stddev=0.0371], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.06,0.07 0.09,0.11,0.14,0.16,0.18 0.19,0.20,0.20,0.22), mean=0.136, stddev=0.0343]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.89854e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008051, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.26,0.27 0.28,0.29,0.31,0.34,0.36 0.38,0.39,0.41,0.43), mean=0.316, stddev=0.0346], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.13,0.14 0.15,0.15,0.17,0.20,0.22 0.24,0.27,0.29,0.37), mean=0.18, stddev=0.0337], bias-{mean,stddev}=-0.02899,0.01642, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.9e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.24,0.26,0.28 0.30,0.31,0.33,0.36), mean=0.237, stddev=0.0338], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.35,0.36,0.37 0.38,0.40,0.42,0.45,0.46 0.46,0.48,0.48,0.50), mean=0.42, stddev=0.0299], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04,0.04 0.04,0.04,0.05,0.05), mean=0.0383, stddev=0.00285], oderiv-count=1.09126e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30473.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.21,0.24,0.27,0.28 0.30,0.32,0.33,0.38), mean=0.24, stddev=0.034], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.37,0.37,0.39 0.41,0.43,0.47,0.52,0.54 0.57,0.61,0.63,0.75), mean=0.472, stddev=0.0563]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.89854e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01413, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,5e-06,1e-05 5e-05,0.0009,0.32,0.50,0.58 0.63,0.68,0.71,0.84), mean=0.279, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.30,0.33 0.39,0.58,0.65,0.72,0.76 0.79,0.85,0.89,1.3), mean=0.631, stddev=0.133], bias-{mean,stddev}=0.002503,0.02615, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.89854e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02889, w_fc-rms=0.014, w_oc-rms=0.036, count=1.38e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00649876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.45 0.46,0.48,0.50,0.51,0.54 0.57,0.61,0.64,0.71), mean=0.5, stddev=0.0365], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0132] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00649876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.45,0.46 0.46,0.48,0.50,0.51,0.53 0.55,0.59,0.61,0.67), mean=0.498, stddev=0.031], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0114] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00649876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.73,-0.65,-0.36 -0.21,-0.08,0.0002,0.10,0.26 0.41,0.55,0.60,0.72), mean=0.00497, stddev=0.222], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.37,0.42,0.46 0.49,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.724, stddev=0.212] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00649876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.45,0.46,0.50,0.50,0.51 0.52,0.55,0.56,0.73), mean=0.486, stddev=0.0305], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0174] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00649876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.61,-0.57,-0.30 -0.19,-0.08,5e-05,0.10,0.22 0.38,0.48,0.53,0.71), mean=0.00471, stddev=0.197], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.51,0.57,0.64 0.71,0.78,0.87,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.871, stddev=0.122] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.88908e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.91459e-06, count-zeroing-boundaries=261153
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0363636
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.89854e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03607, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.45,0.52 0.54,0.59,0.79,1.0,1.1 1.1,1.1,1.2,1.3), mean=0.796, stddev=0.208], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.004,0.01,0.58,0.77,0.86 0.96,1.1,1.1,1.3), mean=0.463, stddev=0.352], bias-{mean,stddev}=-0.003505,0.1935, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=6.89854e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01136, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.21,0.23 0.25,0.26,0.30,0.36,0.39 0.43,0.45,0.46,0.49), mean=0.312, stddev=0.0581], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.23,0.33,0.35 0.38,0.40,0.41,0.43), mean=0.248, stddev=0.075], bias-{mean,stddev}=0.001406,0.007505, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.22e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.03,0.04,0.06,0.09,0.10 0.12,0.13,0.14,0.16), mean=0.0644, stddev=0.0295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.14 0.19,0.27,0.39,0.50,0.54 0.58,0.61,0.64,0.66), mean=0.384, stddev=0.128], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.09,0.10,0.11,0.14,0.17 0.20,0.22,0.23,0.29), mean=0.124, stddev=0.0324], oderiv-count=937216
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28194.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.02 0.03,0.04,0.06,0.09,0.11 0.12,0.13,0.14,0.16), mean=0.0663, stddev=0.0288], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.08,0.09,0.12,0.14,0.16 0.16,0.17,0.17,0.19), mean=0.119, stddev=0.0283]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.89854e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008092, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.17,0.23 0.26,0.28,0.32,0.36,0.38 0.40,0.40,0.41,0.43), mean=0.315, stddev=0.053], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.13 0.14,0.15,0.17,0.20,0.23 0.26,0.30,0.33,0.39), mean=0.18, stddev=0.0423], bias-{mean,stddev}=-0.02461,0.02065, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.63e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.18 0.20,0.22,0.25,0.28,0.29 0.31,0.32,0.33,0.35), mean=0.248, stddev=0.0394], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.36 0.37,0.38,0.41,0.43,0.45 0.46,0.47,0.48,0.50), mean=0.409, stddev=0.0302], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0316, stddev=0.00344], oderiv-count=841920
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25915.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.16,0.18 0.20,0.22,0.25,0.28,0.30 0.31,0.34,0.34,0.37), mean=0.251, stddev=0.04], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.27,0.35 0.39,0.44,0.50,0.56,0.59 0.62,0.65,0.69,0.78), mean=0.497, stddev=0.0857]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.89854e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02026, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.24,0.25 0.27,0.32,0.46,0.66,0.73 0.78,0.82,0.85,0.93), mean=0.489, stddev=0.168], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.50,0.55,0.66 0.72,0.75,0.83,1.1,1.2 1.3,1.4,1.5,1.8), mean=0.899, stddev=0.213], bias-{mean,stddev}=0.0144,0.01703, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.89854e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.07807, w_fc-rms=0.03987, w_oc-rms=0.05809, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00656404, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.55,0.56,0.59 0.61,0.64,0.68,0.72,0.74 0.76,0.78,0.79,0.82), mean=0.679, stddev=0.0526], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.21,0.21), mean=0.182, stddev=0.0145] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00656404, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.50,0.52,0.54 0.55,0.57,0.61,0.65,0.71 0.75,0.79,0.80,0.85), mean=0.618, stddev=0.0623], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.17,0.19,0.20,0.21,0.21 0.22,0.22,0.22,0.22), mean=0.196, stddev=0.0173] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00989055, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.80,-0.70,-0.54 -0.40,-0.27,-0.01,0.26,0.40 0.55,0.65,0.73,0.86), mean=-0.00922, stddev=0.319], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.24,0.29 0.31,0.35,0.40,0.44,0.46 0.48,0.51,0.51,0.53), mean=0.395, stddev=0.059] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00656404, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.51,0.52,0.54 0.56,0.59,0.63,0.67,0.69 0.71,0.75,0.78,0.90), mean=0.632, stddev=0.0533], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.13,0.14,0.14 0.15,0.16,0.18,0.18,0.19 0.19,0.19,0.19,0.20), mean=0.174, stddev=0.0147] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0222436, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.83,-0.72,-0.57 -0.39,-0.27,-0.01,0.24,0.36 0.55,0.70,0.75,0.89), mean=-0.012, stddev=0.321], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.29 0.36,0.45,0.55,0.60,0.62 0.64,0.65,0.66,0.71), mean=0.518, stddev=0.104] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222108
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0363636
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.89854e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08573, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.1,1.1 1.1,1.2,1.7,2.5,2.6 2.6,2.7,2.8,3.0), mean=1.86, stddev=0.606], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,1.0,1.1,1.1 1.2,1.2,1.3,1.5,1.7 1.8,1.9,1.9,2.0), mean=1.37, stddev=0.206], bias-{mean,stddev}=-0.03971,0.4096, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=6.89854e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04057, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.55,0.56,0.57 0.59,0.61,0.64,0.68,0.71 0.74,0.78,0.84,2.2), mean=0.649, stddev=0.0827], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.97,1.0,1.0 1.1,1.2,1.6,2.4,2.4 2.5,2.6,2.6,2.6), mean=1.77, stddev=0.576], bias-{mean,stddev}=3.534e-09,0.02569, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=602560
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/462.mdl exp/nnet3/tdnn_lstm1c_sp/463.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.65712 tdnn2.affine:2.42846 lstm1.W_all:1.7987 lstm1.lstm_nonlin:0.0345033 lstm1.W_rp:0.835532 tdnn3.affine:1.6785 tdnn4.affine:1.71748 lstm2.W_all:1.22501 lstm2.lstm_nonlin:0.0194418 lstm2.W_rp:0.554256 tdnn5.affine:1.39285 tdnn6.affine:1.51907 lstm3.W_all:1.7425 lstm3.lstm_nonlin:0.0411264 lstm3.W_rp:0.615266 output.affine:1.3253 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8222 tdnn2.affine:10.2975 lstm1.W_all:20.1638 lstm1.lstm_nonlin:1.45779 lstm1.W_rp:14.5784 tdnn3.affine:7.77561 tdnn4.affine:7.29116 lstm2.W_all:16.4762 lstm2.lstm_nonlin:1.09993 lstm2.W_rp:13.6244 tdnn5.affine:7.23593 tdnn6.affine:7.32478 lstm3.W_all:23.5845 lstm3.lstm_nonlin:2.39819 lstm3.W_rp:32.2125 output.affine:30.0263 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.206863 tdnn2.affine:0.235623 lstm1.W_all:0.0891526 lstm1.lstm_nonlin:0.0235781 lstm1.W_rp:0.057264 tdnn3.affine:0.215782 tdnn4.affine:0.235548 lstm2.W_all:0.0743269 lstm2.lstm_nonlin:0.0176497 lstm2.W_rp:0.0406405 tdnn5.affine:0.192194 tdnn6.affine:0.207158 lstm3.W_all:0.0738381 lstm3.lstm_nonlin:0.0170351 lstm3.W_rp:0.0190865 output.affine:0.0441162 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 13:04:47 KST 2020, elapsed time 1 seconds
