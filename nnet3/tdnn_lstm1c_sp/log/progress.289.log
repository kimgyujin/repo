# nnet3-info exp/nnet3/tdnn_lstm1c_sp/289.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/288.mdl exp/nnet3/tdnn_lstm1c_sp/289.mdl 
# Started at Thu Jul 30 11:55:27 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/289.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000208016, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03249, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.009,0.01,0.01 0.02,0.04,0.57,0.71,0.80 0.88,0.94,0.96,1.2), mean=0.478, stddev=0.297], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.15 0.18,0.21,0.63,0.91,1.2 1.4,1.5,1.6,1.6), mean=0.631, stddev=0.388], bias-{mean,stddev}=0.0006735,0.0619, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0.200712, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,2e-05,3e-05,4e-05 8e-05,0.0002,0.06,0.10,0.11 0.13,0.15,0.16,0.25), mean=0.0548, stddev=0.0465], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.01,0.02 0.03,0.05,0.42,0.60,0.72 0.82,0.86,0.92,1.0), mean=0.378, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.03,0.06,0.27,0.36,0.41 0.50,0.63,0.70,1.4), mean=0.256, stddev=0.164], oderiv-count=1.05773e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40934.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,6e-06,1e-05,3e-05 6e-05,0.0003,0.05,0.09,0.12 0.13,0.16,0.17,0.24), mean=0.0536, stddev=0.0464], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0001,0.0002,0.0003 0.0005,0.001,0.09,0.12,0.13 0.14,0.15,0.15,0.16), mean=0.0744, stddev=0.0517]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000208016, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01219, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.37,0.38 0.40,0.42,0.47,0.53,0.56 0.59,0.65,0.66,0.73), mean=0.477, stddev=0.0663], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.007 0.009,0.02,0.29,0.34,0.38 0.41,0.45,0.52,0.73), mean=0.237, stddev=0.144], bias-{mean,stddev}=-0.02554,0.0407, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.67e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.25 0.26,0.27,0.30,0.34,0.36 0.38,0.42,0.44,0.50), mean=0.307, stddev=0.0435], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.38,0.39 0.41,0.42,0.45,0.47,0.49 0.51,0.53,0.53,0.54), mean=0.447, stddev=0.0347], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0416, stddev=0.00727], oderiv-count=1.08854e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40095, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.25 0.26,0.27,0.31,0.34,0.37 0.40,0.42,0.45,0.50), mean=0.312, stddev=0.0455], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.45,0.47 0.49,0.51,0.56,0.61,0.65 0.67,0.71,0.73,0.77), mean=0.563, stddev=0.0626]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000208016, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01818, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-06,5e-06,3e-05 0.001,0.16,0.43,0.61,0.69 0.75,0.81,0.87,1.1), mean=0.397, stddev=0.239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.38,0.41,0.45 0.54,0.72,0.84,0.93,1.0 1.1,1.1,1.1,1.3), mean=0.812, stddev=0.166], bias-{mean,stddev}=0.0029,0.0282, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000208016, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06706, w_fc-rms=0.0319, w_oc-rms=0.04584, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634958, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.71,0.79,0.81,0.85), mean=0.495, stddev=0.0793], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.17 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0234] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634958, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.44,0.46,0.47 0.48,0.49,0.50,0.54,0.58 0.67,0.78,0.79,0.86), mean=0.524, stddev=0.0649], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.17 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0232] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0301658, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.88,-0.87,-0.52 -0.27,-0.13,0.001,0.16,0.32 0.56,0.86,0.89,0.91), mean=0.0158, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.20,0.23 0.37,0.43,0.56,0.75,1.0 1.0,1.0,1.0,1.0), mean=0.599, stddev=0.221] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634958, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.39,0.40 0.41,0.43,0.45,0.50,0.50 0.51,0.54,0.57,0.73), mean=0.459, stddev=0.041], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.219, stddev=0.0211] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00634958, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.69,-0.63,-0.33 -0.15,-0.07,0.0003,0.09,0.22 0.33,0.63,0.71,0.74), mean=0.0109, stddev=0.211], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.43,0.46,0.56 0.77,0.83,0.90,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.874, stddev=0.119] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=8.08957e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000119745, count-zeroing-boundaries=296464
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.260055
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000208016, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0406, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.36,0.38 0.43,0.50,0.87,1.2,1.3 1.4,1.4,1.4,1.5), mean=0.858, stddev=0.347], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.001,0.003 0.01,0.33,0.54,0.75,0.91 1.2,1.6,1.7,2.0), mean=0.55, stddev=0.355], bias-{mean,stddev}=0.01273,0.2742, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000208016, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01349, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.21,0.23,0.25 0.27,0.30,0.37,0.44,0.48 0.51,0.54,0.56,0.63), mean=0.368, stddev=0.0825], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.13 0.14,0.16,0.29,0.41,0.43 0.45,0.47,0.49,0.53), mean=0.284, stddev=0.119], bias-{mean,stddev}=0.002741,0.01112, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.8e+05, self-repaired-proportion=0.00495304, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.03,0.04 0.05,0.07,0.09,0.12,0.13 0.14,0.17,0.17,0.18), mean=0.0917, stddev=0.0323], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.14,0.18,0.22 0.29,0.40,0.52,0.61,0.65 0.68,0.71,0.73,0.83), mean=0.497, stddev=0.138], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.08,0.08,0.09 0.09,0.10,0.11,0.14,0.16 0.18,0.22,0.24,0.30), mean=0.12, stddev=0.0334], oderiv-count=1.19366e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37576, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.02,0.03 0.05,0.07,0.09,0.12,0.13 0.15,0.16,0.17,0.18), mean=0.0914, stddev=0.0322], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.08,0.09,0.10 0.11,0.12,0.14,0.16,0.17 0.18,0.20,0.21,0.23), mean=0.141, stddev=0.0274]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000208016, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009063, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.31,0.32,0.35,0.39,0.42 0.44,0.47,0.48,0.55), mean=0.355, stddev=0.0455], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.12,0.13,0.14 0.15,0.16,0.19,0.24,0.26 0.28,0.31,0.33,0.38), mean=0.201, stddev=0.0462], bias-{mean,stddev}=-0.02311,0.01962, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.39e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.23 0.24,0.25,0.28,0.31,0.33 0.34,0.36,0.37,0.45), mean=0.283, stddev=0.0353], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.38,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.49,0.52), mean=0.434, stddev=0.0267], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0339, stddev=0.00286], oderiv-count=1.07178e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35057, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.22,0.23 0.24,0.25,0.28,0.32,0.33 0.35,0.37,0.39,0.48), mean=0.286, stddev=0.0369], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.44,0.45,0.46 0.47,0.49,0.54,0.60,0.63 0.67,0.72,0.75,1.0), mean=0.549, stddev=0.0698]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000208016, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01509, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-06,2e-06,6e-06 3e-05,0.0005,0.35,0.54,0.61 0.66,0.70,0.73,0.89), mean=0.296, stddev=0.246], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.31,0.34,0.39 0.49,0.62,0.68,0.76,0.80 0.87,0.94,1.0,1.4), mean=0.675, stddev=0.133], bias-{mean,stddev}=0.005292,0.03614, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000208016, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04051, w_fc-rms=0.0163, w_oc-rms=0.03678, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640335, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.50,0.52,0.57 0.60,0.67,0.73,0.80), mean=0.506, stddev=0.0529], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0183] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640335, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.45,0.47 0.48,0.50,0.50,0.54,0.57 0.61,0.66,0.67,0.76), mean=0.517, stddev=0.0442], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0196] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00881906, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.83,-0.71,-0.48 -0.26,-0.13,0.0007,0.15,0.32 0.55,0.73,0.76,0.86), mean=0.0117, stddev=0.278], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.29,0.39 0.45,0.51,0.63,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.709, stddev=0.23] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640335, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.44 0.45,0.46,0.50,0.50,0.52 0.54,0.57,0.59,0.63), mean=0.491, stddev=0.0299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0193] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00640335, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.68,-0.58,-0.43,-0.31 -0.16,-0.07,0.0002,0.09,0.21 0.37,0.47,0.53,0.61), mean=0.00871, stddev=0.18], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.58,0.63,0.73 0.78,0.85,0.92,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.908, stddev=0.0956] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.4427e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.07499e-05, count-zeroing-boundaries=261484
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.260055
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000208016, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03947, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.45,0.49,0.53 0.56,0.60,0.88,1.1,1.2 1.2,1.3,1.3,1.4), mean=0.864, stddev=0.254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0009,0.001,0.002 0.003,0.009,0.57,0.83,0.96 1.1,1.3,1.5,1.6), mean=0.493, stddev=0.402], bias-{mean,stddev}=0.002238,0.2196, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000208016, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01302, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.25,0.26 0.28,0.30,0.34,0.41,0.45 0.50,0.53,0.55,0.62), mean=0.357, stddev=0.0692], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.38,0.41 0.44,0.45,0.46,0.53), mean=0.282, stddev=0.0937], bias-{mean,stddev}=0.0006927,0.006402, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.13e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.07,0.10,0.11 0.12,0.13,0.14,0.17), mean=0.0755, stddev=0.029], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.15,0.18,0.22 0.26,0.35,0.50,0.60,0.64 0.66,0.69,0.71,0.76), mean=0.478, stddev=0.139], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.14,0.16 0.18,0.20,0.21,0.27), mean=0.127, stddev=0.0268], oderiv-count=938880
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32537.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.08,0.10,0.11 0.12,0.14,0.14,0.18), mean=0.0762, stddev=0.0294], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.10,0.12,0.14,0.15 0.16,0.16,0.17,0.21), mean=0.121, stddev=0.0229]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000208016, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008934, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.19,0.24 0.27,0.30,0.35,0.40,0.42 0.44,0.47,0.48,0.51), mean=0.347, stddev=0.0617], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.14 0.15,0.16,0.19,0.23,0.26 0.29,0.32,0.35,0.43), mean=0.198, stddev=0.048], bias-{mean,stddev}=-0.01856,0.02485, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.47e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.19,0.22 0.24,0.26,0.30,0.33,0.34 0.35,0.37,0.38,0.47), mean=0.294, stddev=0.0422], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.35,0.36,0.38 0.39,0.40,0.43,0.45,0.46 0.47,0.49,0.50,0.53), mean=0.427, stddev=0.0306], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.028, stddev=0.00233], oderiv-count=903520
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30018.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.19,0.22 0.24,0.26,0.30,0.33,0.35 0.36,0.38,0.39,0.56), mean=0.297, stddev=0.045], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.29,0.32,0.41 0.46,0.52,0.59,0.65,0.69 0.73,0.77,0.79,1.1), mean=0.58, stddev=0.0993]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000208016, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02151, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.29,0.30,0.31 0.33,0.38,0.52,0.66,0.74 0.79,0.86,0.88,1.2), mean=0.528, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.75 0.78,0.82,0.89,1.1,1.2 1.4,1.5,1.7,2.0), mean=0.96, stddev=0.203], bias-{mean,stddev}=0.01638,0.0216, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000208016, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1036, w_fc-rms=0.04868, w_oc-rms=0.07175, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646825, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.57,0.58,0.61 0.64,0.67,0.72,0.77,0.80 0.82,0.85,0.86,0.89), mean=0.72, stddev=0.0627], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.14,0.15,0.17,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.168, stddev=0.0238] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646825, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.49,0.55,0.59 0.61,0.64,0.70,0.74,0.78 0.82,0.86,0.87,0.88), mean=0.696, stddev=0.0713], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.12 0.14,0.15,0.17,0.19,0.20 0.20,0.20,0.21,0.22), mean=0.17, stddev=0.0241] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0358809, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.87,-0.80,-0.62 -0.45,-0.33,-0.001,0.32,0.45 0.58,0.74,0.86,0.92), mean=-0.00783, stddev=0.365], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.20,0.23 0.29,0.36,0.45,0.50,0.53 0.55,0.57,0.59,0.65), mean=0.429, stddev=0.0945] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646825, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.50,0.54 0.57,0.59,0.64,0.68,0.71 0.73,0.77,0.79,0.88), mean=0.639, stddev=0.0597], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0179] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00646825, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.72,-0.67,-0.49 -0.38,-0.26,-0.007,0.24,0.35 0.48,0.64,0.70,0.78), mean=-0.00752, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.40,0.45 0.52,0.61,0.69,0.73,0.76 0.78,0.80,0.81,0.85), mean=0.665, stddev=0.0946] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222386
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.260055
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000208016, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08927, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.6,2.7 2.7,2.8,2.9,3.0), mean=1.94, stddev=0.606], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.98,1.0,1.1 1.1,1.2,1.4,1.6,1.9 2.0,2.1,2.2,2.3), mean=1.41, stddev=0.279], bias-{mean,stddev}=-0.009178,0.6283, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000208016, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0442, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.61,0.62 0.64,0.66,0.70,0.75,0.78 0.81,0.87,0.93,2.2), mean=0.708, stddev=0.0848], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.3,1.3,1.8,2.5,2.6 2.7,2.8,2.8,2.9), mean=1.95, stddev=0.57], bias-{mean,stddev}=6.261e-09,0.02663, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0168, stddev=0.0137], oderiv-count=620160
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/288.mdl exp/nnet3/tdnn_lstm1c_sp/289.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.51322 tdnn2.affine:4.41988 lstm1.W_all:3.48803 lstm1.lstm_nonlin:0.0798775 lstm1.W_rp:1.39801 tdnn3.affine:3.10639 tdnn4.affine:3.3567 lstm2.W_all:2.51373 lstm2.lstm_nonlin:0.0428098 lstm2.W_rp:1.00434 tdnn5.affine:2.62124 tdnn6.affine:2.80524 lstm3.W_all:2.69045 lstm3.lstm_nonlin:0.0731516 lstm3.W_rp:1.14895 output.affine:2.91376 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.9118 tdnn2.affine:11.0319 lstm1.W_all:21.1778 lstm1.lstm_nonlin:1.99003 lstm1.W_rp:15.5718 tdnn3.affine:8.59771 tdnn4.affine:8.19215 lstm2.W_all:17.6273 lstm2.lstm_nonlin:1.30197 lstm2.W_rp:14.9388 tdnn5.affine:8.29403 tdnn6.affine:8.07717 lstm3.W_all:25.0452 lstm3.lstm_nonlin:3.08062 lstm3.W_rp:34.3513 output.affine:32.7127 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.349147 tdnn2.affine:0.400463 lstm1.W_all:0.164526 lstm1.lstm_nonlin:0.0404141 lstm1.W_rp:0.0897972 tdnn3.affine:0.361821 tdnn4.affine:0.409699 lstm2.W_all:0.142559 lstm2.lstm_nonlin:0.0331872 lstm2.W_rp:0.0673074 tdnn5.affine:0.316861 tdnn6.affine:0.347213 lstm3.W_all:0.107279 lstm3.lstm_nonlin:0.0237658 lstm3.W_rp:0.0335308 output.affine:0.0891054 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:55:27 KST 2020, elapsed time 0 seconds
