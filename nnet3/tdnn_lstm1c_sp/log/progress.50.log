# nnet3-info exp/nnet3/tdnn_lstm1c_sp/50.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/49.mdl exp/nnet3/tdnn_lstm1c_sp/50.mdl 
# Started at Thu Jul 30 10:20:56 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/50.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00025682, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03096, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.08,0.43,0.54,0.62,0.68 0.75,0.83,0.88,1.2), mean=0.495, stddev=0.207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.17,0.22,0.59,0.81,1.2 1.4,1.5,1.6,1.7), mean=0.597, stddev=0.377], bias-{mean,stddev}=0.001562,0.05951, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.15e+06, self-repaired-proportion=0.107567, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,4e-06,1e-05,8e-05 0.0003,0.02,0.07,0.09,0.10 0.11,0.13,0.15,0.20), mean=0.0606, stddev=0.0364], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.001,0.006,0.02 0.05,0.26,0.47,0.61,0.70 0.77,0.84,0.89,0.94), mean=0.439, stddev=0.225], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.05 0.14,0.27,0.35,0.44,0.50 0.56,0.62,0.68,1.1), mean=0.347, stddev=0.141], oderiv-count=1.0496e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39473.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,9e-07,4e-06,2e-05 9e-05,0.03,0.06,0.09,0.11 0.12,0.14,0.14,0.24), mean=0.0609, stddev=0.0377], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,5e-05,9e-05,0.0003 0.0008,0.06,0.10,0.12,0.12 0.13,0.14,0.14,0.16), mean=0.0871, stddev=0.0422]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00025682, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01294, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.40,0.42 0.44,0.46,0.51,0.55,0.58 0.60,0.62,0.65,0.83), mean=0.508, stddev=0.0554], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.01,0.02 0.05,0.25,0.30,0.34,0.36 0.39,0.41,0.44,0.73), mean=0.274, stddev=0.11], bias-{mean,stddev}=-0.001431,0.02806, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.29,0.30,0.31 0.32,0.33,0.36,0.40,0.41 0.44,0.46,0.47,0.68), mean=0.365, stddev=0.0417], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.42,0.44,0.46,0.48,0.50 0.50,0.51,0.52,0.55), mean=0.46, stddev=0.0274], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.07,0.08), mean=0.0406, stddev=0.00826], oderiv-count=1.12064e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38633.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.29,0.30 0.31,0.33,0.36,0.40,0.42 0.43,0.46,0.47,0.65), mean=0.365, stddev=0.0422], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.50,0.51,0.53 0.55,0.58,0.63,0.70,0.73 0.77,0.81,0.84,0.97), mean=0.64, stddev=0.0732]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00025682, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01764, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.02,0.06 0.14,0.23,0.39,0.58,0.67 0.76,0.85,0.90,1.2), mean=0.401, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.39,0.45 0.51,0.69,0.82,0.90,0.95 0.99,1.0,1.1,1.4), mean=0.788, stddev=0.16], bias-{mean,stddev}=-0.001678,0.02041, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00025682, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02506, w_fc-rms=0.04001, w_oc-rms=0.05398, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00612681, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.43,0.44 0.45,0.46,0.49,0.53,0.56 0.62,0.66,0.69,0.72), mean=0.5, stddev=0.0547], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0149] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00612681, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.36,0.37,0.40 0.41,0.43,0.48,0.52,0.63 0.70,0.75,0.79,0.87), mean=0.494, stddev=0.0907], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.17,0.19 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0212] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00976822, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.81,-0.59 -0.40,-0.22,0.01,0.23,0.38 0.61,0.76,0.79,0.84), mean=0.0021, stddev=0.327], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.28,0.33 0.39,0.45,0.57,0.69,0.79 0.95,0.99,0.99,1.0), mean=0.585, stddev=0.165] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00612681, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.41 0.42,0.44,0.47,0.51,0.53 0.55,0.59,0.60,0.66), mean=0.475, stddev=0.045], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0168] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.019179, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.89,-0.81,-0.56 -0.34,-0.20,-0.0004,0.19,0.33 0.54,0.75,0.82,0.89), mean=-0.00181, stddev=0.313], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.20,0.23,0.31 0.57,0.71,0.82,0.88,0.91 0.97,1.0,1.0,1.0), mean=0.776, stddev=0.169] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.72097e-06, count-zeroing-boundaries=297576
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00025682, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03243, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.31 0.33,0.37,0.59,0.99,1.1 1.1,1.1,1.2,1.2), mean=0.677, stddev=0.298], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.12 0.25,0.36,0.48,0.62,0.70 0.80,0.89,1.0,1.2), mean=0.486, stddev=0.192], bias-{mean,stddev}=-0.003436,0.04299, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00025682, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01327, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.25,0.26 0.28,0.30,0.36,0.43,0.46 0.50,0.53,0.56,0.66), mean=0.363, stddev=0.0739], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.13,0.15,0.24,0.40,0.45 0.48,0.51,0.52,0.55), mean=0.274, stddev=0.128], bias-{mean,stddev}=-0.004058,0.02202, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.7e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.07 0.09,0.11,0.15,0.19,0.21 0.23,0.24,0.26,0.30), mean=0.15, stddev=0.0463], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.18,0.27 0.31,0.38,0.50,0.59,0.63 0.66,0.69,0.70,0.73), mean=0.483, stddev=0.122], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.06,0.07,0.08,0.09 0.10,0.11,0.13,0.17), mean=0.0702, stddev=0.0149], oderiv-count=1.19181e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36114.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.04,0.05,0.07 0.09,0.11,0.15,0.19,0.21 0.23,0.25,0.26,0.30), mean=0.15, stddev=0.048], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.13,0.15,0.18 0.19,0.21,0.24,0.27,0.29 0.30,0.31,0.33,0.36), mean=0.241, stddev=0.0405]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00025682, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009643, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.31,0.31,0.32 0.34,0.35,0.38,0.41,0.42 0.44,0.46,0.46,0.61), mean=0.379, stddev=0.0368], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.16,0.17 0.18,0.19,0.21,0.25,0.26 0.28,0.30,0.31,0.37), mean=0.217, stddev=0.0335], bias-{mean,stddev}=-0.008884,0.01534, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.92e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.26,0.28,0.31,0.34,0.36 0.38,0.40,0.41,0.48), mean=0.309, stddev=0.04], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.40 0.41,0.42,0.44,0.47,0.48 0.49,0.51,0.52,0.55), mean=0.444, stddev=0.0293], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0299, stddev=0.00255], oderiv-count=1.05357e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33595.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.25 0.26,0.28,0.31,0.35,0.36 0.38,0.40,0.41,0.48), mean=0.312, stddev=0.0408], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.47,0.48,0.51 0.52,0.54,0.58,0.64,0.68 0.71,0.75,0.77,0.92), mean=0.592, stddev=0.065]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00025682, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01371, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.007 0.02,0.06,0.28,0.48,0.57 0.62,0.68,0.70,1.1), mean=0.284, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.28,0.31 0.37,0.54,0.64,0.71,0.74 0.77,0.82,0.85,0.96), mean=0.611, stddev=0.133], bias-{mean,stddev}=-0.00259,0.02092, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00025682, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01554, w_fc-rms=0.02056, w_oc-rms=0.02495, count=1.33e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0061779, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.44 0.45,0.46,0.49,0.51,0.53 0.57,0.60,0.63,0.65), mean=0.494, stddev=0.037], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0157] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0061779, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.40,0.40,0.41 0.42,0.44,0.49,0.51,0.53 0.57,0.64,0.67,0.78), mean=0.483, stddev=0.0521], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.238, stddev=0.0136] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00934757, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.68,-0.63,-0.42 -0.30,-0.16,0.006,0.18,0.33 0.45,0.57,0.68,0.78), mean=0.00877, stddev=0.255], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.43,0.45,0.50 0.53,0.57,0.65,0.91,0.99 1.0,1.0,1.0,1.0), mean=0.706, stddev=0.168] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0061779, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.45,0.49,0.50,0.52 0.55,0.57,0.59,0.66), mean=0.485, stddev=0.0372], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0162] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0061779, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.67,-0.58,-0.39 -0.27,-0.14,0.0007,0.16,0.31 0.43,0.55,0.66,0.84), mean=0.00989, stddev=0.242], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.40,0.49,0.65 0.75,0.81,0.88,0.95,0.99 1.0,1.0,1.0,1.0), mean=0.864, stddev=0.112] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.1429e-05, count-zeroing-boundaries=262491
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00025682, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02905, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.42,0.44 0.45,0.48,0.60,0.81,0.86 0.90,0.95,0.96,1.0), mean=0.642, stddev=0.164], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.11,0.44,0.61,0.71 0.77,0.88,0.92,1.0), mean=0.399, stddev=0.246], bias-{mean,stddev}=0.001955,0.09421, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00025682, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01234, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.23 0.24,0.27,0.31,0.39,0.44 0.52,0.59,0.62,0.65), mean=0.334, stddev=0.0856], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.18,0.20,0.26,0.34,0.38 0.40,0.42,0.44,0.50), mean=0.271, stddev=0.0744], bias-{mean,stddev}=0.002218,0.0187, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.89e+05, self-repaired-proportion=6.55594e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.05 0.06,0.07,0.10,0.13,0.15 0.16,0.18,0.18,0.24), mean=0.1, stddev=0.0366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.16,0.20 0.25,0.31,0.43,0.55,0.59 0.63,0.66,0.67,0.73), mean=0.426, stddev=0.129], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.06,0.07,0.07,0.09,0.10 0.11,0.12,0.13,0.22), mean=0.079, stddev=0.0176], oderiv-count=969728
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31076.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.05 0.06,0.07,0.10,0.13,0.15 0.16,0.17,0.18,0.27), mean=0.102, stddev=0.0371], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.07,0.13 0.14,0.16,0.18,0.21,0.22 0.24,0.25,0.26,0.32), mean=0.181, stddev=0.0368]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00025682, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009336, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.30 0.31,0.32,0.36,0.41,0.43 0.46,0.48,0.49,0.56), mean=0.365, stddev=0.0498], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.13,0.15 0.16,0.17,0.20,0.24,0.27 0.29,0.33,0.37,0.49), mean=0.208, stddev=0.0474], bias-{mean,stddev}=-0.009599,0.01441, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.08e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.23,0.24 0.26,0.28,0.31,0.35,0.37 0.38,0.40,0.41,0.50), mean=0.314, stddev=0.043], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.36 0.38,0.39,0.42,0.45,0.46 0.47,0.49,0.50,0.50), mean=0.418, stddev=0.0327], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0253, stddev=0.00261], oderiv-count=971520
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28557.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.23,0.24 0.26,0.28,0.32,0.35,0.37 0.39,0.41,0.42,0.47), mean=0.317, stddev=0.0454], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.46,0.47,0.49 0.52,0.55,0.61,0.69,0.73 0.76,0.79,0.83,0.99), mean=0.622, stddev=0.0848]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00025682, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01966, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.17,0.24 0.30,0.35,0.43,0.62,0.75 0.80,0.85,0.87,1.4), mean=0.473, stddev=0.167], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.60,0.63 0.65,0.68,0.75,1.0,1.3 1.4,1.5,1.5,1.7), mean=0.859, stddev=0.258], bias-{mean,stddev}=0.008449,0.02654, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00025682, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02977, w_fc-rms=0.03945, w_oc-rms=0.05449, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623954, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.44,0.46,0.47 0.48,0.51,0.57,0.63,0.66 0.67,0.69,0.70,0.77), mean=0.572, stddev=0.0651], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.19,0.20,0.21,0.22,0.22 0.22,0.23,0.23,0.23), mean=0.206, stddev=0.0111] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623954, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.47 0.49,0.53,0.58,0.63,0.66 0.68,0.71,0.73,0.87), mean=0.582, stddev=0.0637], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.17,0.17,0.18 0.19,0.19,0.21,0.22,0.22 0.22,0.23,0.23,0.24), mean=0.205, stddev=0.0146] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00909877, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.81,-0.74,-0.47 -0.32,-0.20,0.005,0.20,0.32 0.49,0.71,0.78,0.87), mean=0.00423, stddev=0.289], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.24,0.27,0.32 0.36,0.40,0.45,0.49,0.52 0.53,0.55,0.55,0.65), mean=0.445, stddev=0.0648] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623954, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.53,0.54,0.56 0.58,0.60,0.64,0.68,0.70 0.73,0.75,0.76,0.91), mean=0.643, stddev=0.0513], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.16,0.16,0.17 0.17,0.18,0.19,0.20,0.20 0.21,0.21,0.21,0.22), mean=0.188, stddev=0.0129] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0172558, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.98,-0.85,-0.77,-0.47 -0.30,-0.18,0.004,0.19,0.31 0.51,0.72,0.80,0.92), mean=0.00636, stddev=0.288], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.21,0.26,0.41 0.49,0.57,0.65,0.69,0.71 0.73,0.74,0.75,0.76), mean=0.623, stddev=0.105] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223265
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00025682, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06779, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.5,1.8,1.8 1.9,1.9,1.9,2.1), mean=1.53, stddev=0.242], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.64,0.72,0.82 0.89,0.95,1.1,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.08, stddev=0.16], bias-{mean,stddev}=0.001901,0.0892, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00025682, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04085, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.51,0.52,0.55 0.57,0.59,0.64,0.70,0.74 0.78,0.84,0.87,2.2), mean=0.652, stddev=0.096], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.6,1.8,2.1,2.2 2.3,2.3,2.4,2.6), mean=1.86, stddev=0.255], bias-{mean,stddev}=4.186e-09,0.02878, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=577280
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/49.mdl exp/nnet3/tdnn_lstm1c_sp/50.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.8674 tdnn2.affine:9.14755 lstm1.W_all:7.96958 lstm1.lstm_nonlin:0.150427 lstm1.W_rp:3.26788 tdnn3.affine:5.6243 tdnn4.affine:6.51378 lstm2.W_all:5.22224 lstm2.lstm_nonlin:0.0739284 lstm2.W_rp:2.15656 tdnn5.affine:4.54262 tdnn6.affine:5.46461 lstm3.W_all:6.86977 lstm3.lstm_nonlin:0.19114 lstm3.W_rp:2.75126 output.affine:6.16616 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.3039 tdnn2.affine:11.6716 lstm1.W_all:20.5278 lstm1.lstm_nonlin:1.63521 lstm1.W_rp:11.9446 tdnn3.affine:8.46943 tdnn4.affine:8.69427 lstm2.W_all:15.9706 lstm2.lstm_nonlin:0.817981 lstm2.W_rp:10.7905 tdnn5.affine:7.86845 tdnn6.affine:8.41809 lstm3.W_all:22.8976 lstm3.lstm_nonlin:1.67743 lstm3.W_rp:24.9689 output.affine:30.2433 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.723077 tdnn2.affine:0.790093 lstm1.W_all:0.3902 lstm1.lstm_nonlin:0.0932011 lstm1.W_rp:0.275391 tdnn3.affine:0.672251 tdnn4.affine:0.753741 lstm2.W_all:0.328229 lstm2.lstm_nonlin:0.0896422 lstm2.W_rp:0.201532 tdnn5.affine:0.590155 tdnn6.affine:0.660906 lstm3.W_all:0.301381 lstm3.lstm_nonlin:0.112173 lstm3.W_rp:0.110536 output.affine:0.203957 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:20:56 KST 2020, elapsed time 0 seconds
