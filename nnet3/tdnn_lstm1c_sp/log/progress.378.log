# nnet3-info exp/nnet3/tdnn_lstm1c_sp/378.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/377.mdl exp/nnet3/tdnn_lstm1c_sp/378.mdl 
# Started at Thu Jul 30 12:30:52 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/378.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000118282, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03243, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.006 0.009,0.02,0.56,0.73,0.80 0.87,0.97,0.99,1.2), mean=0.469, stddev=0.309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.19,0.22,0.66,0.93,1.2 1.3,1.4,1.4,1.6), mean=0.642, stddev=0.368], bias-{mean,stddev}=-0.003841,0.06132, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0.173552, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,2e-05,3e-05,4e-05 7e-05,0.0002,0.05,0.09,0.11 0.12,0.14,0.16,0.18), mean=0.0473, stddev=0.0452], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.02,0.03 0.05,0.08,0.38,0.59,0.70 0.80,0.88,0.90,0.99), mean=0.357, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.01,0.01 0.02,0.03,0.36,0.50,0.59 0.71,0.80,0.87,1.6), mean=0.336, stddev=0.238], oderiv-count=1.13114e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35532.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,8e-06,2e-05,3e-05 6e-05,0.0002,0.04,0.09,0.11 0.13,0.14,0.16,0.18), mean=0.0457, stddev=0.0446], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.0001,0.0001,0.0002 0.0004,0.001,0.08,0.11,0.12 0.14,0.14,0.15,0.17), mean=0.064, stddev=0.0502]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000118282, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01172, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.38,0.40,0.45,0.51,0.55 0.59,0.62,0.65,0.72), mean=0.458, stddev=0.0677], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.004 0.005,0.01,0.28,0.34,0.37 0.40,0.42,0.48,0.74), mean=0.223, stddev=0.148], bias-{mean,stddev}=-0.0338,0.04092, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.92e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.19,0.20 0.21,0.23,0.26,0.30,0.32 0.33,0.35,0.38,0.49), mean=0.264, stddev=0.043], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.35,0.37,0.38 0.40,0.42,0.44,0.47,0.49 0.51,0.52,0.53,0.55), mean=0.443, stddev=0.0377], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.06,0.06 0.07,0.08,0.08,0.10), mean=0.0518, stddev=0.00988], oderiv-count=1.16221e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34784.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.19,0.20 0.21,0.23,0.27,0.31,0.33 0.35,0.38,0.43,0.55), mean=0.269, stddev=0.0499], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.37,0.39 0.41,0.43,0.48,0.54,0.57 0.60,0.65,0.67,0.71), mean=0.488, stddev=0.065]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000118282, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01763, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,6e-07,2e-06,1e-05 0.0003,0.17,0.41,0.59,0.66 0.73,0.79,0.86,1.2), mean=0.385, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.37,0.42 0.50,0.71,0.81,0.90,0.96 1.0,1.1,1.2,1.3), mean=0.786, stddev=0.169], bias-{mean,stddev}=0.002366,0.02719, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000118282, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.08041, w_fc-rms=0.02529, w_oc-rms=0.04631, count=1.52e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633807, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.48,0.50,0.55 0.71,0.77,0.78,0.84), mean=0.495, stddev=0.0743], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.19 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0202] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633807, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.44,0.46,0.47 0.48,0.49,0.50,0.53,0.57 0.65,0.73,0.78,0.82), mean=0.516, stddev=0.0584], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.19 0.21,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.019] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0144345, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.87,-0.85,-0.45 -0.26,-0.13,0.0007,0.15,0.29 0.63,0.82,0.87,0.90), mean=0.0157, stddev=0.298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.23,0.28 0.39,0.45,0.58,0.74,1.0 1.0,1.0,1.0,1.0), mean=0.611, stddev=0.212] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633807, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.57,0.58,0.67), mean=0.462, stddev=0.0407], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0195] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00633807, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.74,-0.69,-0.31 -0.18,-0.09,0.0003,0.10,0.22 0.43,0.64,0.74,0.81), mean=0.0105, stddev=0.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.40,0.52 0.73,0.81,0.88,0.93,1.0 1.0,1.0,1.0,1.0), mean=0.854, stddev=0.133] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=4.5083e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000100256, count-zeroing-boundaries=299233
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.176859
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000118282, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03974, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.43,0.46 0.50,0.56,0.86,1.1,1.2 1.3,1.3,1.4,1.4), mean=0.86, stddev=0.285], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0006,0.0009,0.002 0.007,0.35,0.55,0.73,0.93 1.2,1.4,1.5,1.8), mean=0.545, stddev=0.338], bias-{mean,stddev}=0.0129,0.2609, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000118282, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0128, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.22,0.23,0.26 0.28,0.30,0.35,0.40,0.43 0.46,0.51,0.52,0.57), mean=0.352, stddev=0.0649], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.15 0.16,0.18,0.28,0.37,0.40 0.42,0.44,0.45,0.48), mean=0.276, stddev=0.0956], bias-{mean,stddev}=0.001366,0.009997, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.15e+05, self-repaired-proportion=0.00207796, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.12 0.14,0.15,0.15,0.17), mean=0.0785, stddev=0.0332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.11,0.13,0.17 0.22,0.34,0.46,0.58,0.63 0.67,0.71,0.72,0.83), mean=0.451, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.09,0.10 0.10,0.11,0.13,0.16,0.20 0.23,0.27,0.28,0.36), mean=0.138, stddev=0.0426], oderiv-count=1.10336e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32541.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.02,0.02 0.03,0.05,0.08,0.10,0.12 0.14,0.15,0.16,0.17), mean=0.0782, stddev=0.0328], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.08 0.09,0.11,0.13,0.15,0.16 0.17,0.18,0.18,0.20), mean=0.127, stddev=0.0279]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000118282, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008352, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.27,0.27 0.29,0.29,0.32,0.36,0.38 0.40,0.42,0.43,0.46), mean=0.328, stddev=0.0386], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.12,0.13,0.14 0.15,0.16,0.18,0.21,0.24 0.26,0.29,0.30,0.37), mean=0.186, stddev=0.0388], bias-{mean,stddev}=-0.02787,0.01902, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.20 0.21,0.22,0.25,0.28,0.29 0.30,0.32,0.33,0.35), mean=0.25, stddev=0.0309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.36,0.37,0.38 0.39,0.40,0.43,0.45,0.46 0.47,0.48,0.49,0.50), mean=0.425, stddev=0.0274], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0378, stddev=0.00265], oderiv-count=1.11926e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30297.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.21,0.22,0.25,0.28,0.29 0.31,0.32,0.33,0.36), mean=0.251, stddev=0.0331], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.39,0.41 0.43,0.44,0.49,0.53,0.57 0.60,0.63,0.65,0.75), mean=0.492, stddev=0.0579]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000118282, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01442, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,6e-06,2e-05 6e-05,0.001,0.33,0.51,0.58 0.62,0.68,0.70,0.90), mean=0.285, stddev=0.233], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.35 0.43,0.60,0.66,0.73,0.78 0.80,0.87,0.92,1.3), mean=0.645, stddev=0.131], bias-{mean,stddev}=0.005292,0.03172, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000118282, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04967, w_fc-rms=0.01505, w_oc-rms=0.04059, count=1.39e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639408, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.45,0.46 0.47,0.48,0.50,0.51,0.55 0.60,0.65,0.68,0.77), mean=0.504, stddev=0.0453], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0157] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639408, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.46,0.47 0.48,0.50,0.50,0.53,0.56 0.59,0.64,0.66,0.71), mean=0.514, stddev=0.0382], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0163] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00639408, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.79,-0.74,-0.43 -0.23,-0.10,0.0005,0.11,0.31 0.49,0.64,0.70,0.77), mean=0.00803, stddev=0.25], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.30,0.38,0.42 0.47,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.72, stddev=0.217] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639408, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.43,0.44 0.46,0.47,0.50,0.50,0.51 0.52,0.55,0.57,0.69), mean=0.489, stddev=0.0281], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0183] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00639408, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.60,-0.54,-0.30 -0.16,-0.07,0.0002,0.08,0.20 0.37,0.48,0.56,0.62), mean=0.0065, stddev=0.187], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.56,0.58,0.68 0.76,0.83,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.894, stddev=0.106] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.75e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.85936e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.27386e-05, count-zeroing-boundaries=263868
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.176859
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000118282, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03784, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.49,0.53 0.56,0.60,0.83,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.833, stddev=0.225], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.002 0.004,0.01,0.56,0.80,0.92 1.0,1.2,1.3,1.5), mean=0.479, stddev=0.378], bias-{mean,stddev}=-0.0007507,0.2058, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000118282, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01205, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.23,0.25 0.27,0.29,0.32,0.37,0.42 0.45,0.48,0.50,0.55), mean=0.331, stddev=0.0588], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.17,0.18,0.25,0.35,0.38 0.40,0.41,0.43,0.45), mean=0.262, stddev=0.0817], bias-{mean,stddev}=0.0005604,0.007347, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.27e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.13,0.14,0.15), mean=0.0642, stddev=0.029], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.14,0.17 0.22,0.29,0.46,0.56,0.60 0.64,0.69,0.71,0.72), mean=0.433, stddev=0.145], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.11,0.12,0.13,0.16,0.19 0.22,0.23,0.24,0.26), mean=0.142, stddev=0.0324], oderiv-count=963328
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28053.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.06,0.09,0.10 0.12,0.13,0.14,0.16), mean=0.0662, stddev=0.0297], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.09,0.11,0.13,0.14 0.15,0.16,0.17,0.18), mean=0.111, stddev=0.0244]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000118282, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008387, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.22 0.26,0.29,0.33,0.38,0.40 0.41,0.43,0.43,0.47), mean=0.326, stddev=0.058], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.15,0.17,0.22,0.25 0.28,0.31,0.33,0.40), mean=0.186, stddev=0.0447], bias-{mean,stddev}=-0.0208,0.02353, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.41e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.16,0.19 0.21,0.23,0.27,0.29,0.31 0.32,0.33,0.35,0.40), mean=0.263, stddev=0.042], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.36 0.38,0.39,0.42,0.45,0.46 0.47,0.48,0.49,0.51), mean=0.417, stddev=0.0319], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0312, stddev=0.00308], oderiv-count=928160
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25809.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.20 0.22,0.24,0.27,0.30,0.32 0.33,0.34,0.36,0.42), mean=0.269, stddev=0.0405], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.28,0.38 0.42,0.47,0.53,0.59,0.61 0.65,0.68,0.69,0.93), mean=0.526, stddev=0.0862]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000118282, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02075, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.27,0.29 0.31,0.35,0.49,0.66,0.72 0.76,0.85,0.91,0.98), mean=0.506, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.60,0.63,0.71 0.77,0.81,0.88,1.1,1.2 1.3,1.4,1.5,1.9), mean=0.929, stddev=0.18], bias-{mean,stddev}=0.013,0.01652, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000118282, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.109, w_fc-rms=0.04403, w_oc-rms=0.07477, count=1.26e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646172, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.59,0.60,0.62 0.65,0.68,0.72,0.76,0.79 0.81,0.84,0.85,0.89), mean=0.718, stddev=0.0558], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.13 0.14,0.15,0.17,0.19,0.19 0.20,0.20,0.20,0.22), mean=0.168, stddev=0.0213] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646172, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.54,0.56,0.58 0.60,0.62,0.67,0.71,0.76 0.80,0.84,0.86,0.89), mean=0.673, stddev=0.0648], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.13 0.15,0.17,0.18,0.20,0.20 0.21,0.21,0.21,0.23), mean=0.179, stddev=0.0229] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0285755, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.83,-0.73,-0.58 -0.44,-0.31,-0.02,0.30,0.44 0.58,0.77,0.84,0.92), mean=-0.00494, stddev=0.352], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.21,0.23 0.31,0.36,0.44,0.48,0.51 0.52,0.54,0.55,0.63), mean=0.42, stddev=0.0824] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646172, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.50,0.53 0.55,0.59,0.64,0.67,0.70 0.72,0.77,0.80,0.88), mean=0.634, stddev=0.0593], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.19,0.20,0.20,0.21), mean=0.176, stddev=0.0172] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00646172, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.75,-0.64,-0.54 -0.39,-0.28,-0.02,0.26,0.37 0.54,0.70,0.76,0.86), mean=-0.00587, stddev=0.316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.30,0.32,0.37 0.46,0.54,0.63,0.67,0.70 0.72,0.73,0.74,0.78), mean=0.601, stddev=0.1] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.3312e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=8.9152e-06, count-zeroing-boundaries=224336
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.176859
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000118282, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08944, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.1,1.1 1.2,1.3,1.7,2.6,2.7 2.7,2.8,2.9,3.1), mean=1.94, stddev=0.636], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.90,1.0,1.1 1.2,1.2,1.4,1.6,1.8 2.0,2.1,2.1,2.3), mean=1.42, stddev=0.266], bias-{mean,stddev}=-0.03049,0.6108, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000118282, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04262, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.59,0.61 0.62,0.64,0.67,0.72,0.75 0.78,0.83,0.88,2.1), mean=0.682, stddev=0.0809], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.1,1.1 1.2,1.2,1.6,2.5,2.6 2.7,2.7,2.8,2.9), mean=1.86, stddev=0.595], bias-{mean,stddev}=4.607e-09,0.0218, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=590720
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/377.mdl exp/nnet3/tdnn_lstm1c_sp/378.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.59755 tdnn2.affine:3.40897 lstm1.W_all:2.6647 lstm1.lstm_nonlin:0.0526026 lstm1.W_rp:1.14888 tdnn3.affine:2.35132 tdnn4.affine:2.41784 lstm2.W_all:1.83232 lstm2.lstm_nonlin:0.0321733 lstm2.W_rp:0.82704 tdnn5.affine:1.99296 tdnn6.affine:2.19564 lstm3.W_all:2.21572 lstm3.lstm_nonlin:0.0610528 lstm3.W_rp:0.823626 output.affine:1.976 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8854 tdnn2.affine:10.6291 lstm1.W_all:20.5328 lstm1.lstm_nonlin:2.19311 lstm1.W_rp:15.2076 tdnn3.affine:8.15534 tdnn4.affine:7.5617 lstm2.W_all:16.8361 lstm2.lstm_nonlin:1.50252 lstm2.W_rp:14.3033 tdnn5.affine:7.67626 tdnn6.affine:7.58741 lstm3.W_all:24.1509 lstm3.lstm_nonlin:3.17636 lstm3.W_rp:34.3322 output.affine:31.54 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.280837 tdnn2.affine:0.323852 lstm1.W_all:0.130041 lstm1.lstm_nonlin:0.0238988 lstm1.W_rp:0.0756026 tdnn3.affine:0.290518 tdnn4.affine:0.321507 lstm2.W_all:0.109058 lstm2.lstm_nonlin:0.0213807 lstm2.W_rp:0.0578659 tdnn5.affine:0.261276 tdnn6.affine:0.292414 lstm3.W_all:0.0918471 lstm3.lstm_nonlin:0.0192256 lstm3.W_rp:0.0239793 output.affine:0.0626076 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:30:52 KST 2020, elapsed time 0 seconds
