# nnet3-info exp/nnet3/tdnn_lstm1c_sp/11.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/10.mdl exp/nnet3/tdnn_lstm1c_sp/11.mdl 
# Started at Thu Jul 30 10:05:29 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/11.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000290634, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.007 0.01,0.03,0.56,0.68,0.73 0.78,0.84,0.92,1.0), mean=0.442, stddev=0.289], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.17,0.21,0.58,0.82,1.1 1.4,1.5,1.6,1.7), mean=0.587, stddev=0.372], bias-{mean,stddev}=0.00182,0.06041, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.98e+05, self-repaired-proportion=0.180245, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,4e-06,5e-06,2e-05 4e-05,0.0001,0.07,0.09,0.11 0.12,0.13,0.15,0.19), mean=0.0549, stddev=0.045], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.001,0.003,0.01 0.03,0.06,0.44,0.62,0.71 0.76,0.83,0.86,0.90), mean=0.376, stddev=0.26], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.006,0.01 0.02,0.06,0.33,0.43,0.50 0.56,0.66,0.77,1.0), mean=0.295, stddev=0.185], oderiv-count=1.15008e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38846.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,4e-07,9e-07,3e-06 8e-06,5e-05,0.06,0.09,0.11 0.12,0.14,0.15,0.20), mean=0.0525, stddev=0.0443], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,2e-05,3e-05,7e-05 0.0001,0.0006,0.10,0.12,0.13 0.14,0.15,0.15,0.16), mean=0.0748, stddev=0.0545]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000290634, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01277, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.41,0.42 0.44,0.46,0.50,0.54,0.56 0.58,0.60,0.62,0.65), mean=0.502, stddev=0.0475], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.004 0.007,0.02,0.32,0.37,0.39 0.42,0.44,0.47,0.53), mean=0.246, stddev=0.156], bias-{mean,stddev}=-0.002924,0.03308, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.26,0.28 0.29,0.31,0.34,0.36,0.38 0.40,0.41,0.42,0.47), mean=0.336, stddev=0.0347], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.41 0.43,0.44,0.46,0.49,0.50 0.51,0.53,0.53,0.56), mean=0.464, stddev=0.0308], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.08), mean=0.0413, stddev=0.00697], oderiv-count=1.09107e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38006.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.26,0.27 0.28,0.30,0.33,0.36,0.38 0.40,0.41,0.42,0.50), mean=0.33, stddev=0.038], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.47,0.49 0.50,0.53,0.58,0.63,0.66 0.68,0.70,0.71,0.76), mean=0.579, stddev=0.0591]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000290634, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01886, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.27,0.28 0.30,0.33,0.43,0.59,0.68 0.75,0.80,0.86,1.1), mean=0.458, stddev=0.146], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.55,0.56,0.58 0.61,0.76,0.89,0.94,0.97 0.99,1.0,1.0,1.1), mean=0.85, stddev=0.13], bias-{mean,stddev}=0.0002489,0.2664, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000290634, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.2774, w_fc-rms=0.2719, w_oc-rms=0.2636, count=1.43e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613014, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.34,0.35,0.37 0.40,0.44,0.50,0.57,0.60 0.63,0.67,0.69,0.80), mean=0.504, stddev=0.0785], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.24 0.24,0.24,0.24,0.25), mean=0.225, stddev=0.0138] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613014, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.30,0.33 0.36,0.40,0.47,0.56,0.63 0.69,0.74,0.76,0.83), mean=0.484, stddev=0.105], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.16,0.19 0.20,0.21,0.23,0.24,0.24 0.24,0.25,0.25,0.25), mean=0.225, stddev=0.0197] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00613014, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.76,-0.71,-0.61 -0.50,-0.31,0.01,0.36,0.49 0.61,0.70,0.73,0.80), mean=0.0104, stddev=0.365], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.32,0.34,0.37 0.41,0.46,0.56,0.69,0.74 0.81,0.86,0.88,0.92), mean=0.573, stddev=0.129] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613014, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.37 0.39,0.42,0.48,0.54,0.57 0.61,0.66,0.68,0.73), mean=0.483, stddev=0.0722], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.24,0.24,0.24,0.24), mean=0.22, stddev=0.0144] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00622211, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.77,-0.67,-0.54 -0.42,-0.22,0.005,0.27,0.40 0.53,0.66,0.74,0.86), mean=0.00612, stddev=0.315], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.33,0.46 0.59,0.69,0.81,0.88,0.91 0.94,0.95,0.97,0.98), mean=0.772, stddev=0.14] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=295443
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000290634, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03177, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.53,0.53,0.56 0.57,0.61,0.71,0.82,0.86 0.89,0.93,0.95,0.98), mean=0.716, stddev=0.109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.27 0.31,0.37,0.49,0.60,0.68 0.75,0.82,0.84,1.1), mean=0.493, stddev=0.14], bias-{mean,stddev}=0.02825,0.2712, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000290634, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01391, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.20,0.22 0.24,0.30,0.36,0.45,0.51 0.57,0.62,0.65,0.74), mean=0.375, stddev=0.101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.24,0.26,0.31,0.36,0.39 0.41,0.43,0.45,0.49), mean=0.312, stddev=0.0583], bias-{mean,stddev}=-0.001037,0.008931, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.95e+05, self-repaired-proportion=0.0014553, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.05,0.06,0.08 0.10,0.12,0.17,0.22,0.25 0.26,0.28,0.30,0.33), mean=0.171, stddev=0.0576], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.18,0.19,0.25 0.30,0.36,0.50,0.62,0.66 0.71,0.77,0.79,0.84), mean=0.487, stddev=0.145], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.05,0.06,0.07,0.08 0.09,0.11,0.12,0.32), mean=0.0595, stddev=0.02], oderiv-count=1.10477e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35487.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.05,0.06,0.08 0.10,0.12,0.17,0.22,0.25 0.26,0.29,0.30,0.37), mean=0.172, stddev=0.0577], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.17,0.18,0.19 0.21,0.23,0.26,0.30,0.33 0.35,0.38,0.39,0.42), mean=0.267, stddev=0.0479]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000290634, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01006, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.27,0.30 0.33,0.36,0.40,0.43,0.45 0.47,0.48,0.50,0.53), mean=0.394, stddev=0.0481], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.15,0.18,0.22,0.27,0.29 0.31,0.34,0.35,0.40), mean=0.223, stddev=0.0526], bias-{mean,stddev}=-0.009387,0.01845, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.42e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.25,0.26 0.28,0.29,0.31,0.35,0.37 0.38,0.40,0.41,0.45), mean=0.318, stddev=0.0363], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.40 0.41,0.42,0.44,0.47,0.48 0.49,0.50,0.51,0.52), mean=0.444, stddev=0.0264], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.027, stddev=0.00355], oderiv-count=999424
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32968.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.26 0.27,0.28,0.31,0.35,0.37 0.39,0.41,0.42,0.44), mean=0.318, stddev=0.0397], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.45,0.48 0.50,0.53,0.58,0.64,0.67 0.70,0.72,0.75,0.89), mean=0.585, stddev=0.0668]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000290634, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01623, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.27 0.28,0.29,0.36,0.50,0.57 0.64,0.70,0.73,0.98), mean=0.396, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.53,0.54 0.56,0.62,0.76,0.81,0.85 0.87,0.91,0.92,0.99), mean=0.733, stddev=0.103], bias-{mean,stddev}=0.007667,0.2663, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000290634, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.2865, w_fc-rms=0.2761, w_oc-rms=0.2762, count=1.31e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00618227, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.38 0.40,0.43,0.50,0.57,0.61 0.64,0.66,0.69,0.73), mean=0.505, stddev=0.0783], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.24 0.24,0.24,0.25,0.25), mean=0.226, stddev=0.0147] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00618227, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.34,0.37 0.39,0.42,0.47,0.56,0.61 0.68,0.74,0.78,0.85), mean=0.492, stddev=0.0948], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.18,0.19 0.21,0.22,0.23,0.24,0.24 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0186] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00618227, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.72,-0.66,-0.54 -0.45,-0.31,-0.006,0.31,0.47 0.56,0.64,0.70,0.80), mean=0.00486, stddev=0.337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.35,0.40,0.46 0.48,0.52,0.62,0.74,0.81 0.85,0.89,0.90,0.92), mean=0.631, stddev=0.124] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00618227, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.33,0.35,0.37 0.39,0.43,0.49,0.56,0.59 0.64,0.67,0.70,0.76), mean=0.492, stddev=0.0802], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.24 0.24,0.24,0.24,0.25), mean=0.225, stddev=0.0135] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.014567, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.77,-0.72,-0.48 -0.36,-0.21,-0.008,0.25,0.36 0.51,0.64,0.72,0.92), mean=0.00587, stddev=0.299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.21,0.35,0.49 0.66,0.73,0.83,0.90,0.93 0.95,0.97,0.97,0.97), mean=0.801, stddev=0.139] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=260571
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000290634, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02995, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.53,0.55 0.58,0.60,0.67,0.75,0.78 0.84,0.88,0.88,0.91), mean=0.678, stddev=0.0856], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.22,0.24 0.27,0.31,0.43,0.59,0.67 0.75,0.86,0.90,1.1), mean=0.456, stddev=0.16], bias-{mean,stddev}=-0.008522,0.2638, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000290634, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01308, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.11,0.14,0.18 0.22,0.26,0.34,0.44,0.50 0.53,0.58,0.67,0.76), mean=0.348, stddev=0.112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.23,0.25,0.29,0.34,0.36 0.39,0.41,0.42,0.45), mean=0.294, stddev=0.052], bias-{mean,stddev}=-0.0008078,0.007736, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.66e+05, self-repaired-proportion=0.0182368, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.002,0.03,0.05 0.06,0.09,0.15,0.21,0.24 0.26,0.28,0.29,0.32), mean=0.15, stddev=0.0663], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.03,0.11,0.17 0.22,0.29,0.42,0.55,0.61 0.64,0.69,0.72,0.81), mean=0.415, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.07,0.08 0.10,0.13,0.14,0.23), mean=0.0582, stddev=0.0222], oderiv-count=991616
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30449.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.003,0.02,0.05 0.07,0.09,0.15,0.21,0.24 0.26,0.27,0.28,0.32), mean=0.149, stddev=0.0652], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.02,0.07,0.13 0.16,0.20,0.26,0.31,0.33 0.35,0.38,0.39,0.52), mean=0.251, stddev=0.072]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000290634, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01007, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.28,0.29,0.31 0.34,0.36,0.39,0.43,0.45 0.48,0.52,0.53,0.64), mean=0.395, stddev=0.0493], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.09,0.12 0.14,0.16,0.22,0.27,0.31 0.33,0.36,0.39,0.58), mean=0.219, stddev=0.0691], bias-{mean,stddev}=-0.007736,0.02297, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.1e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.27 0.28,0.29,0.33,0.36,0.38 0.39,0.41,0.41,0.59), mean=0.327, stddev=0.0388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.37,0.38 0.39,0.40,0.42,0.44,0.46 0.47,0.49,0.49,0.51), mean=0.422, stddev=0.0273], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0244, stddev=0.00304], oderiv-count=1.00096e+06
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27930.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.26 0.28,0.29,0.33,0.37,0.39 0.41,0.42,0.43,0.67), mean=0.332, stddev=0.0467], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.50,0.52 0.54,0.57,0.62,0.69,0.72 0.74,0.78,0.84,0.98), mean=0.63, stddev=0.072]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000290634, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01979, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.29 0.32,0.36,0.46,0.59,0.71 0.78,0.82,0.85,1.1), mean=0.484, stddev=0.142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.67,0.69,0.72 0.77,0.79,0.85,1.0,1.1 1.2,1.3,1.3,1.4), mean=0.891, stddev=0.143], bias-{mean,stddev}=0.004068,0.2672, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000290634, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.2556, w_fc-rms=0.2678, w_oc-rms=0.2775, count=1.19e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00624519, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.40,0.42,0.45 0.47,0.50,0.56,0.62,0.66 0.68,0.70,0.70,0.75), mean=0.562, stddev=0.0717], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.18 0.18,0.19,0.20,0.22,0.23 0.23,0.24,0.24,0.24), mean=0.205, stddev=0.0169] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00624519, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.38,0.41 0.44,0.48,0.57,0.64,0.68 0.72,0.77,0.79,0.85), mean=0.565, stddev=0.0935], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.17 0.18,0.19,0.21,0.23,0.23 0.24,0.24,0.24,0.24), mean=0.206, stddev=0.0222] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00666433, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.72,-0.67,-0.53 -0.40,-0.23,0.006,0.23,0.37 0.50,0.61,0.64,0.71), mean=-0.00352, stddev=0.297], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.29,0.31,0.35 0.39,0.43,0.49,0.56,0.62 0.68,0.75,0.76,0.84), mean=0.499, stddev=0.0954] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00624519, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.39,0.42,0.45 0.48,0.53,0.61,0.68,0.72 0.74,0.76,0.77,0.82), mean=0.605, stddev=0.0888], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.17,0.17,0.19,0.21,0.22 0.22,0.23,0.23,0.24), mean=0.19, stddev=0.019] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00711062, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.72,-0.67,-0.54 -0.35,-0.21,-0.002,0.20,0.34 0.47,0.62,0.66,0.79), mean=-0.00486, stddev=0.281], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.34,0.36,0.44 0.52,0.59,0.67,0.75,0.79 0.83,0.87,0.89,0.94), mean=0.663, stddev=0.112] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221609
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000290634, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06179, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.4,1.5,1.6 1.6,1.7,1.7,1.8), mean=1.4, stddev=0.128], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.41,0.52 0.64,0.78,0.98,1.2,1.2 1.3,1.4,1.4,1.7), mean=0.968, stddev=0.236], bias-{mean,stddev}=0.02482,0.2623, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000290634, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04139, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.50,0.52,0.54 0.56,0.59,0.65,0.72,0.76 0.80,0.88,0.94,2.3), mean=0.658, stddev=0.109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.6,1.6 1.7,1.7,1.9,2.0,2.1 2.2,2.3,2.3,2.3), mean=1.89, stddev=0.169], bias-{mean,stddev}=3.768e-09,0.01488, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.40), mean=0.017, stddev=0.0135], oderiv-count=602880
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/10.mdl exp/nnet3/tdnn_lstm1c_sp/11.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.07703 tdnn2.affine:9.4923 lstm1.W_all:8.4997 lstm1.lstm_nonlin:1.31187 lstm1.W_rp:3.72988 tdnn3.affine:6.00038 tdnn4.affine:7.04963 lstm2.W_all:5.93717 lstm2.lstm_nonlin:1.35455 lstm2.W_rp:2.57014 tdnn5.affine:4.955 tdnn6.affine:6.32372 lstm3.W_all:7.09317 lstm3.lstm_nonlin:1.28424 lstm3.W_rp:2.91867 output.affine:6.67445 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.1129 tdnn2.affine:11.5261 lstm1.W_all:25.0739 lstm1.lstm_nonlin:10.7048 lstm1.W_rp:12.4819 tdnn3.affine:8.86069 tdnn4.affine:9.07018 lstm2.W_all:22.4468 lstm2.lstm_nonlin:11.0456 lstm2.W_rp:11.8068 tdnn5.affine:8.33135 tdnn6.affine:9.0882 lstm3.W_all:26.0365 lstm3.lstm_nonlin:10.5492 lstm3.W_rp:23.1146 output.affine:30.6187 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.758589 tdnn2.affine:0.826251 lstm1.W_all:0.322775 lstm1.lstm_nonlin:0.109336 lstm1.W_rp:0.291516 tdnn3.affine:0.677842 tdnn4.affine:0.777496 lstm2.W_all:0.247859 lstm2.lstm_nonlin:0.1093 lstm2.W_rp:0.211127 tdnn5.affine:0.593215 tdnn6.affine:0.696416 lstm3.W_all:0.261082 lstm3.lstm_nonlin:0.108788 lstm3.W_rp:0.126315 output.affine:0.218053 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:05:30 KST 2020, elapsed time 1 seconds
