# nnet3-info exp/nnet3/tdnn_lstm1c_sp/207.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/206.mdl exp/nnet3/tdnn_lstm1c_sp/207.mdl 
# Started at Thu Jul 30 11:22:55 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/207.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00015609, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02832, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.01,0.02 0.03,0.15,0.50,0.60,0.65 0.73,0.79,0.84,1.1), mean=0.436, stddev=0.225], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.13,0.14 0.16,0.19,0.56,0.77,1.0 1.3,1.4,1.4,1.5), mean=0.551, stddev=0.336], bias-{mean,stddev}=0.0004041,0.05323, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.16e+06, self-repaired-proportion=0.129157, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,4e-06,1e-05,4e-05 0.0001,0.001,0.06,0.08,0.09 0.11,0.12,0.13,0.17), mean=0.0506, stddev=0.0368], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.002,0.006,0.02 0.04,0.11,0.46,0.62,0.73 0.78,0.88,0.89,0.97), mean=0.413, stddev=0.247], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.03 0.06,0.24,0.35,0.46,0.54 0.60,0.72,0.81,1.4), mean=0.348, stddev=0.184], oderiv-count=1.14406e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39135.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-06,4e-06,2e-05 5e-05,0.001,0.05,0.08,0.10 0.11,0.13,0.14,0.19), mean=0.0494, stddev=0.0372], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,6e-05,9e-05,0.0002 0.0005,0.005,0.08,0.10,0.11 0.12,0.13,0.13,0.15), mean=0.0698, stddev=0.042]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00015609, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01115, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.37 0.38,0.39,0.43,0.47,0.50 0.53,0.55,0.58,0.72), mean=0.437, stddev=0.0509], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.006,0.009 0.02,0.09,0.26,0.31,0.33 0.35,0.37,0.40,0.60), mean=0.228, stddev=0.113], bias-{mean,stddev}=-0.005271,0.02924, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.24 0.25,0.26,0.29,0.32,0.33 0.35,0.38,0.40,0.51), mean=0.29, stddev=0.0369], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.40,0.41 0.42,0.43,0.46,0.48,0.50 0.51,0.52,0.53,0.57), mean=0.457, stddev=0.0303], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0472, stddev=0.009], oderiv-count=1.15443e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38295.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.22,0.23 0.24,0.26,0.28,0.31,0.34 0.36,0.39,0.41,0.50), mean=0.288, stddev=0.0401], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.40,0.42 0.44,0.45,0.50,0.55,0.58 0.62,0.65,0.66,0.79), mean=0.506, stddev=0.0609]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00015609, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01559, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,5e-05,0.0002,0.001 0.009,0.15,0.35,0.52,0.61 0.68,0.74,0.78,1.0), mean=0.341, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.31,0.33,0.37 0.42,0.62,0.72,0.80,0.84 0.90,0.95,0.98,1.3), mean=0.694, stddev=0.155], bias-{mean,stddev}=-0.0002816,0.02187, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00015609, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02845, w_fc-rms=0.02687, w_oc-rms=0.03174, count=1.48e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.45,0.45 0.46,0.47,0.49,0.51,0.53 0.60,0.70,0.74,0.76), mean=0.497, stddev=0.0527], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0156] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.42,0.43 0.45,0.46,0.49,0.51,0.54 0.62,0.69,0.73,0.75), mean=0.496, stddev=0.0567], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0147] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00625876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.86,-0.81,-0.47 -0.28,-0.15,0.0004,0.17,0.30 0.44,0.72,0.77,0.86), mean=0.0011, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.26,0.34 0.42,0.48,0.61,0.78,1.0 1.0,1.0,1.0,1.0), mean=0.64, stddev=0.193] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.43,0.44,0.46,0.50,0.50 0.52,0.54,0.55,0.60), mean=0.469, stddev=0.0302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00625876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.79,-0.73,-0.37 -0.21,-0.12,-0.0002,0.13,0.23 0.36,0.59,0.69,0.84), mean=-0.000825, stddev=0.232], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.38,0.54 0.71,0.78,0.86,0.93,1.0 1.0,1.0,1.0,1.0), mean=0.84, stddev=0.135] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.36269e-06, count-zeroing-boundaries=297381
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0837466
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00015609, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03158, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.19,0.20 0.23,0.29,0.50,0.99,1.1 1.1,1.1,1.2,1.2), mean=0.632, stddev=0.346], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.002,0.004,0.007 0.03,0.27,0.44,0.59,0.71 0.90,1.2,1.3,1.5), mean=0.436, stddev=0.263], bias-{mean,stddev}=0.009996,0.2466, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00015609, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01144, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.25,0.30,0.37,0.41 0.45,0.46,0.48,0.59), mean=0.312, stddev=0.0708], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.08,0.10,0.21,0.36,0.39 0.41,0.43,0.45,0.49), mean=0.229, stddev=0.126], bias-{mean,stddev}=0.002959,0.0186, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.62e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.03,0.04 0.05,0.07,0.09,0.11,0.13 0.14,0.15,0.16,0.18), mean=0.0902, stddev=0.0286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.19,0.20,0.27 0.31,0.37,0.50,0.61,0.66 0.70,0.74,0.76,0.80), mean=0.493, stddev=0.131], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.11,0.14,0.15 0.17,0.19,0.21,0.31), mean=0.121, stddev=0.027], oderiv-count=1.12691e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35776.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.03,0.03,0.04 0.05,0.06,0.09,0.11,0.13 0.14,0.15,0.16,0.17), mean=0.0875, stddev=0.0285], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.09,0.10,0.10 0.11,0.12,0.14,0.15,0.17 0.18,0.19,0.20,0.22), mean=0.139, stddev=0.0221]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00015609, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008281, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.28 0.29,0.30,0.32,0.35,0.36 0.38,0.41,0.42,0.51), mean=0.325, stddev=0.0346], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.16,0.18,0.21,0.23 0.24,0.26,0.28,0.34), mean=0.186, stddev=0.0337], bias-{mean,stddev}=-0.01249,0.01427, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.82e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.22,0.23,0.25,0.28,0.29 0.31,0.33,0.34,0.41), mean=0.255, stddev=0.0318], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.50,0.51,0.52,0.53), mean=0.44, stddev=0.0318], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05), mean=0.0376, stddev=0.00301], oderiv-count=1.0807e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33257.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.21,0.23,0.25,0.28,0.29 0.31,0.33,0.33,0.38), mean=0.253, stddev=0.0323], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.41 0.43,0.45,0.48,0.53,0.55 0.59,0.64,0.65,0.74), mean=0.489, stddev=0.0544]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00015609, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.013, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,7e-07,1e-06,3e-06 1e-05,0.0002,0.28,0.46,0.54 0.59,0.63,0.65,1.2), mean=0.251, stddev=0.217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.24,0.28,0.32 0.42,0.53,0.59,0.65,0.68 0.72,0.80,0.88,1.5), mean=0.58, stddev=0.121], bias-{mean,stddev}=-0.004178,0.04649, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00015609, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01066, w_fc-rms=0.009474, w_oc-rms=0.01693, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631139, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.43,0.43,0.44 0.45,0.46,0.50,0.51,0.55 0.60,0.63,0.67,0.74), mean=0.499, stddev=0.0456], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.22,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0142] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631139, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.41 0.42,0.44,0.49,0.50,0.51 0.53,0.57,0.60,0.75), mean=0.479, stddev=0.0441], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.012] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00822233, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.78,-0.60,-0.39 -0.27,-0.13,0.0008,0.12,0.25 0.38,0.56,0.70,0.85), mean=-0.00159, stddev=0.229], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.29,0.37,0.48 0.54,0.58,0.67,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.749, stddev=0.203] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631139, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.44,0.45,0.50,0.50,0.52 0.54,0.57,0.58,0.68), mean=0.484, stddev=0.0364], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0151] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00631139, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.56,-0.41,-0.27 -0.20,-0.09,0.0006,0.08,0.19 0.28,0.44,0.53,0.71), mean=-0.000346, stddev=0.177], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.51,0.60,0.73 0.79,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.903, stddev=0.103] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=262290
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0837466
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00015609, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02977, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.33,0.34,0.37 0.39,0.41,0.59,0.87,0.92 0.96,0.98,0.98,1.1), mean=0.642, stddev=0.22], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0005,0.0006,0.0008 0.001,0.004,0.46,0.62,0.73 0.81,0.94,1.0,1.1), mean=0.374, stddev=0.302], bias-{mean,stddev}=0.002755,0.1647, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00015609, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0103, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.21,0.23,0.27,0.33,0.37 0.41,0.44,0.46,0.51), mean=0.28, stddev=0.0641], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.13,0.14,0.20,0.30,0.33 0.34,0.36,0.37,0.42), mean=0.221, stddev=0.0788], bias-{mean,stddev}=0.001583,0.009417, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.26e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.06,0.08,0.09 0.09,0.10,0.11,0.13), mean=0.0617, stddev=0.0203], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.24 0.28,0.34,0.48,0.56,0.61 0.63,0.66,0.67,0.73), mean=0.458, stddev=0.12], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.16,0.18 0.20,0.23,0.24,0.27), mean=0.141, stddev=0.0298], oderiv-count=1.01184e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30738.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.06,0.08,0.09 0.10,0.10,0.11,0.14), mean=0.0612, stddev=0.0214], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.07 0.08,0.09,0.10,0.12,0.12 0.13,0.14,0.15,0.16), mean=0.101, stddev=0.0173]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00015609, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007762, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.24 0.25,0.27,0.30,0.34,0.37 0.38,0.39,0.40,0.47), mean=0.303, stddev=0.0462], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.14,0.17,0.20,0.22 0.25,0.28,0.30,0.37), mean=0.173, stddev=0.0382], bias-{mean,stddev}=-0.01109,0.02033, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.68e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.23,0.26,0.28,0.29 0.31,0.33,0.34,0.43), mean=0.256, stddev=0.034], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.37 0.38,0.40,0.42,0.44,0.46 0.47,0.48,0.49,0.51), mean=0.42, stddev=0.0286], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0303, stddev=0.00274], oderiv-count=984960
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28219.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.18,0.20 0.21,0.23,0.26,0.28,0.29 0.31,0.32,0.33,0.43), mean=0.255, stddev=0.0353], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.31,0.34,0.40 0.42,0.45,0.50,0.56,0.59 0.62,0.65,0.67,0.83), mean=0.502, stddev=0.0714]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00015609, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01864, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.21,0.23,0.26 0.28,0.33,0.42,0.60,0.68 0.72,0.76,0.78,1.3), mean=0.453, stddev=0.144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.62 0.64,0.66,0.72,0.98,1.2 1.3,1.4,1.5,2.0), mean=0.816, stddev=0.238], bias-{mean,stddev}=0.02405,0.02452, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00015609, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04942, w_fc-rms=0.04479, w_oc-rms=0.04217, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637489, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.56,0.57,0.59 0.61,0.63,0.68,0.72,0.75 0.77,0.78,0.80,0.83), mean=0.68, stddev=0.0527], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.16 0.17,0.18,0.19,0.20,0.20 0.21,0.21,0.22,0.24), mean=0.187, stddev=0.0157] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637489, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.47,0.49,0.51 0.54,0.56,0.61,0.65,0.70 0.76,0.80,0.81,0.85), mean=0.615, stddev=0.0688], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.14,0.16 0.17,0.19,0.20,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.198, stddev=0.0179] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0111743, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.81,-0.74,-0.52 -0.39,-0.23,0.001,0.22,0.36 0.49,0.69,0.74,0.82), mean=-0.00129, stddev=0.298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.22,0.25,0.28 0.33,0.40,0.46,0.49,0.51 0.53,0.55,0.57,0.65), mean=0.442, stddev=0.0717] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637489, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.54,0.55,0.58 0.61,0.63,0.67,0.70,0.72 0.74,0.76,0.77,0.86), mean=0.665, stddev=0.0482], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.17,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.178, stddev=0.0149] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00734119, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.82,-0.75,-0.48 -0.34,-0.21,0.003,0.20,0.31 0.48,0.68,0.73,0.83), mean=-0.00315, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.27,0.34 0.43,0.53,0.63,0.67,0.69 0.70,0.72,0.72,0.74), mean=0.592, stddev=0.104] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.48266e-06, count-zeroing-boundaries=223082
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0837466
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00015609, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07482, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.0,1.1 1.1,1.2,1.6,2.1,2.2 2.2,2.3,2.3,2.4), mean=1.65, stddev=0.434], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.84,0.91,0.96 1.0,1.1,1.2,1.3,1.4 1.5,1.6,1.6,1.6), mean=1.19, stddev=0.166], bias-{mean,stddev}=-0.00568,0.3854, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00015609, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03793, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.50,0.51,0.53 0.54,0.56,0.60,0.64,0.67 0.70,0.75,0.80,2.1), mean=0.606, stddev=0.0852], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.6,2.1,2.2 2.3,2.3,2.3,2.5), mean=1.69, stddev=0.421], bias-{mean,stddev}=4.943e-09,0.02907, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0138], oderiv-count=618240
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/206.mdl exp/nnet3/tdnn_lstm1c_sp/207.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.23039 tdnn2.affine:6.10704 lstm1.W_all:4.80478 lstm1.lstm_nonlin:0.0857492 lstm1.W_rp:1.97123 tdnn3.affine:4.01634 tdnn4.affine:4.46935 lstm2.W_all:3.33229 lstm2.lstm_nonlin:0.0400445 lstm2.W_rp:1.35919 tdnn5.affine:3.1274 tdnn6.affine:3.62777 lstm3.W_all:4.24059 lstm3.lstm_nonlin:0.0851405 lstm3.W_rp:1.64623 output.affine:3.82864 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.2498 tdnn2.affine:10.0636 lstm1.W_all:18.1605 lstm1.lstm_nonlin:1.14896 lstm1.W_rp:12.2767 tdnn3.affine:7.30024 tdnn4.affine:7.47055 lstm2.W_all:15.2653 lstm2.lstm_nonlin:0.504749 lstm2.W_rp:11.265 tdnn5.affine:6.5609 tdnn6.affine:7.01131 lstm3.W_all:21.7251 lstm3.lstm_nonlin:1.79934 lstm3.W_rp:28.2027 output.affine:28.0889 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.552543 tdnn2.affine:0.604827 lstm1.W_all:0.263965 lstm1.lstm_nonlin:0.0744653 lstm1.W_rp:0.160955 tdnn3.affine:0.545737 tdnn4.affine:0.595685 lstm2.W_all:0.218076 lstm2.lstm_nonlin:0.0799001 lstm2.W_rp:0.120761 tdnn5.affine:0.477416 tdnn6.affine:0.518402 lstm3.W_all:0.195015 lstm3.lstm_nonlin:0.047157 lstm3.W_rp:0.0583602 output.affine:0.136196 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:22:55 KST 2020, elapsed time 0 seconds
