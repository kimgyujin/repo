# nnet3-info exp/nnet3/tdnn_lstm1c_sp/9.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/8.mdl exp/nnet3/tdnn_lstm1c_sp/9.mdl 
# Started at Thu Jul 30 10:04:43 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/9.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000292484, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03003, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.004,0.004,0.004 0.005,0.01,0.55,0.67,0.73 0.77,0.84,0.87,1.1), mean=0.43, stddev=0.292], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.16,0.20,0.56,0.79,1.2 1.3,1.6,1.6,1.7), mean=0.575, stddev=0.372], bias-{mean,stddev}=0.00526,0.0604, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.256388, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-08 4e-06,6e-05,0.07,0.10,0.12 0.13,0.14,0.15,0.19), mean=0.0571, stddev=0.0471], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,5e-05 0.005,0.05,0.44,0.63,0.72 0.78,0.83,0.85,0.88), mean=0.374, stddev=0.272], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.006 0.007,0.02,0.32,0.41,0.47 0.51,0.61,0.74,0.90), mean=0.273, stddev=0.184], oderiv-count=1.25325e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36041.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-07 4e-06,5e-05,0.06,0.10,0.12 0.13,0.14,0.15,0.20), mean=0.0556, stddev=0.0466], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-05 6e-05,0.0003,0.11,0.13,0.14 0.14,0.15,0.16,0.17), mean=0.0773, stddev=0.0567]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000292484, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01285, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.45,0.47,0.51,0.54,0.56 0.58,0.60,0.61,0.65), mean=0.505, stddev=0.0442], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.003,0.009,0.32,0.37,0.40 0.42,0.44,0.47,0.55), mean=0.244, stddev=0.162], bias-{mean,stddev}=-0.002753,0.03625, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.92e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.26,0.28 0.29,0.31,0.33,0.36,0.38 0.39,0.41,0.42,0.50), mean=0.334, stddev=0.0366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.41 0.42,0.44,0.46,0.49,0.51 0.52,0.54,0.54,0.57), mean=0.466, stddev=0.0329], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.05,0.06,0.08), mean=0.0408, stddev=0.00648], oderiv-count=1.0919e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35267.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.26,0.27 0.28,0.30,0.33,0.37,0.39 0.41,0.42,0.44,0.50), mean=0.334, stddev=0.0408], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.47,0.48 0.50,0.53,0.58,0.63,0.66 0.69,0.72,0.73,0.81), mean=0.579, stddev=0.0635]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000292484, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02004, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.34,0.35 0.36,0.38,0.46,0.60,0.70 0.76,0.81,0.85,1.1), mean=0.494, stddev=0.129], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.68 0.70,0.82,0.94,0.99,1.0 1.0,1.1,1.1,1.1), mean=0.907, stddev=0.113], bias-{mean,stddev}=0.000655,0.3359, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000292484, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.3501, w_fc-rms=0.3407, w_oc-rms=0.3318, count=1.44e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00609872, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.31,0.32,0.35 0.38,0.42,0.50,0.59,0.62 0.65,0.70,0.71,0.85), mean=0.505, stddev=0.094], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.17,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.24,0.24,0.24,0.24), mean=0.221, stddev=0.0155] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00609872, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.27,0.30 0.35,0.38,0.47,0.57,0.65 0.71,0.76,0.79,0.84), mean=0.483, stddev=0.117], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.16,0.18 0.19,0.21,0.23,0.24,0.24 0.24,0.24,0.24,0.24), mean=0.222, stddev=0.0216] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0062757, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.78,-0.74,-0.62 -0.52,-0.33,0.01,0.39,0.54 0.64,0.73,0.75,0.82), mean=0.013, stddev=0.386], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.30,0.32,0.36 0.40,0.45,0.56,0.68,0.74 0.79,0.83,0.86,0.89), mean=0.562, stddev=0.127] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00609872, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.32,0.35 0.38,0.41,0.48,0.55,0.60 0.64,0.69,0.71,0.77), mean=0.484, stddev=0.0862], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.22,0.23,0.23 0.24,0.24,0.24,0.24), mean=0.218, stddev=0.0147] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0106217, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.77,-0.72,-0.57 -0.42,-0.24,0.003,0.28,0.42 0.55,0.69,0.72,0.86), mean=0.00827, stddev=0.328], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.24,0.31,0.45 0.58,0.68,0.80,0.88,0.91 0.93,0.95,0.97,0.98), mean=0.765, stddev=0.148] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=296607
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000292484, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03269, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.56,0.57,0.59 0.61,0.65,0.73,0.83,0.87 0.90,0.92,0.94,0.97), mean=0.739, stddev=0.0973], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.28,0.32 0.35,0.40,0.51,0.61,0.68 0.75,0.78,0.85,0.99), mean=0.511, stddev=0.128], bias-{mean,stddev}=0.03412,0.3436, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000292484, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01425, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.19,0.20,0.22 0.25,0.30,0.38,0.47,0.52 0.59,0.65,0.68,0.74), mean=0.383, stddev=0.108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.25,0.27,0.32,0.37,0.39 0.42,0.43,0.45,0.49), mean=0.32, stddev=0.0546], bias-{mean,stddev}=0.0004826,0.008042, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.64e+05, self-repaired-proportion=0.00628781, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.05,0.05,0.08 0.10,0.13,0.19,0.25,0.28 0.30,0.32,0.34,0.39), mean=0.191, stddev=0.0691], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.15,0.18,0.22 0.27,0.36,0.49,0.63,0.70 0.75,0.79,0.81,0.86), mean=0.489, stddev=0.159], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.05,0.07,0.08 0.09,0.10,0.11,0.25), mean=0.0555, stddev=0.0199], oderiv-count=1.09952e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32944.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.04,0.06,0.08 0.10,0.13,0.19,0.25,0.28 0.30,0.32,0.33,0.38), mean=0.187, stddev=0.0658], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.13,0.17,0.20 0.23,0.25,0.29,0.33,0.35 0.37,0.40,0.42,0.50), mean=0.286, stddev=0.0554]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000292484, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01023, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.26,0.30 0.34,0.37,0.41,0.44,0.46 0.47,0.49,0.50,0.52), mean=0.401, stddev=0.0505], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.11,0.12,0.13 0.14,0.18,0.23,0.27,0.30 0.32,0.35,0.37,0.41), mean=0.226, stddev=0.0581], bias-{mean,stddev}=-0.009337,0.02169, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.32e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.27 0.28,0.29,0.32,0.35,0.37 0.38,0.41,0.42,0.44), mean=0.323, stddev=0.0357], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.38,0.40 0.41,0.42,0.44,0.46,0.48 0.49,0.50,0.51,0.53), mean=0.44, stddev=0.0277], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.027, stddev=0.00386], oderiv-count=998272
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30622.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.25,0.26 0.28,0.29,0.32,0.35,0.37 0.39,0.40,0.42,0.45), mean=0.321, stddev=0.0378], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.46,0.48,0.49 0.51,0.54,0.58,0.64,0.67 0.69,0.73,0.75,0.78), mean=0.588, stddev=0.062]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000292484, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01779, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.33,0.34 0.34,0.36,0.41,0.52,0.59 0.66,0.71,0.74,0.88), mean=0.442, stddev=0.102], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.63,0.64,0.65 0.66,0.71,0.83,0.88,0.90 0.93,0.95,0.96,1.0), mean=0.807, stddev=0.0871], bias-{mean,stddev}=0.01015,0.3366, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000292484, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.3615, w_fc-rms=0.3472, w_oc-rms=0.3479, count=1.31e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614978, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.32,0.33,0.36 0.38,0.42,0.50,0.59,0.63 0.67,0.71,0.72,0.79), mean=0.508, stddev=0.0952], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.18,0.19 0.20,0.21,0.23,0.24,0.24 0.24,0.24,0.24,0.24), mean=0.222, stddev=0.016] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614978, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.31,0.31,0.35 0.38,0.41,0.47,0.57,0.64 0.70,0.78,0.80,0.88), mean=0.494, stddev=0.109], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.16,0.18 0.20,0.21,0.23,0.24,0.24 0.24,0.24,0.24,0.24), mean=0.224, stddev=0.0215] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00614978, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.77,-0.71,-0.59 -0.49,-0.34,-0.008,0.34,0.51 0.60,0.68,0.77,0.84), mean=0.00518, stddev=0.364], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.37,0.42 0.46,0.51,0.60,0.72,0.78 0.83,0.86,0.88,0.90), mean=0.609, stddev=0.124] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614978, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.29,0.32,0.34 0.36,0.41,0.49,0.58,0.62 0.66,0.71,0.75,0.84), mean=0.494, stddev=0.0983], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.24,0.24,0.24,0.25), mean=0.221, stddev=0.0157] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0174279, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.79,-0.77,-0.53 -0.38,-0.24,-0.006,0.26,0.40 0.56,0.69,0.76,0.93), mean=0.00579, stddev=0.319], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.20,0.32,0.45 0.63,0.71,0.82,0.89,0.92 0.95,0.96,0.97,0.97), mean=0.783, stddev=0.151] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=261633
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000292484, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03099, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.56,0.57,0.59 0.61,0.63,0.70,0.77,0.80 0.85,0.88,0.89,0.93), mean=0.703, stddev=0.0771], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.29 0.31,0.35,0.45,0.60,0.67 0.75,0.86,0.90,1.1), mean=0.477, stddev=0.148], bias-{mean,stddev}=-0.01126,0.3352, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000292484, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01333, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.10,0.16 0.20,0.25,0.35,0.45,0.52 0.55,0.59,0.66,0.77), mean=0.352, stddev=0.122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.24,0.26,0.30,0.34,0.37 0.39,0.40,0.42,0.47), mean=0.3, stddev=0.0502], bias-{mean,stddev}=-0.000777,0.006353, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.79e+05, self-repaired-proportion=0.0269474, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,9e-05,0.0009,0.05 0.08,0.11,0.17,0.24,0.28 0.30,0.32,0.34,0.41), mean=0.172, stddev=0.0776], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.004,0.02,0.15 0.22,0.30,0.42,0.55,0.62 0.66,0.71,0.73,0.86), mean=0.418, stddev=0.157], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.05,0.06,0.08 0.10,0.13,0.16,0.23), mean=0.0541, stddev=0.0257], oderiv-count=1.06406e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28299.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,1e-05,4e-05,0.05 0.07,0.10,0.16,0.24,0.27 0.29,0.32,0.33,0.39), mean=0.166, stddev=0.0756], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.0006,0.001,0.15 0.19,0.22,0.29,0.34,0.37 0.39,0.41,0.42,0.48), mean=0.278, stddev=0.0788]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000292484, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01022, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.28,0.31 0.35,0.37,0.40,0.44,0.46 0.48,0.52,0.52,0.58), mean=0.4, stddev=0.05], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.08,0.11 0.12,0.16,0.22,0.28,0.31 0.34,0.38,0.41,0.60), mean=0.22, stddev=0.0753], bias-{mean,stddev}=-0.003536,0.02686, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.13e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.26,0.27 0.28,0.30,0.33,0.36,0.38 0.40,0.42,0.43,0.60), mean=0.331, stddev=0.0416], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.37 0.38,0.40,0.42,0.45,0.46 0.48,0.49,0.50,0.53), mean=0.424, stddev=0.0316], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0245, stddev=0.00307], oderiv-count=1.08992e+06
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25977.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.25,0.27 0.28,0.30,0.33,0.36,0.39 0.40,0.42,0.44,0.59), mean=0.332, stddev=0.0434], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.46,0.49,0.52 0.55,0.57,0.62,0.67,0.70 0.73,0.76,0.79,0.86), mean=0.622, stddev=0.0653]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000292484, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02081, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.34,0.35 0.37,0.41,0.49,0.61,0.71 0.78,0.84,0.88,1.1), mean=0.515, stddev=0.128], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.72,0.74,0.76,0.80 0.83,0.85,0.91,1.0,1.1 1.2,1.3,1.3,1.4), mean=0.941, stddev=0.12], bias-{mean,stddev}=0.002518,0.3366, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000292484, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.3213, w_fc-rms=0.3351, w_oc-rms=0.3474, count=1.19e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621138, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.37,0.40,0.42 0.44,0.49,0.56,0.63,0.67 0.70,0.71,0.72,0.79), mean=0.558, stddev=0.0834], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.16,0.17 0.18,0.19,0.20,0.22,0.22 0.23,0.23,0.24,0.24), mean=0.202, stddev=0.0178] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621138, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.33,0.35,0.38 0.42,0.47,0.56,0.64,0.68 0.73,0.79,0.81,0.87), mean=0.557, stddev=0.104], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.18,0.19,0.21,0.22,0.23 0.23,0.24,0.24,0.24), mean=0.204, stddev=0.0228] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00857544, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.74,-0.69,-0.58 -0.44,-0.25,0.0007,0.25,0.41 0.52,0.63,0.69,0.77), mean=-0.00412, stddev=0.317], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.27,0.30,0.34 0.38,0.42,0.49,0.56,0.62 0.68,0.73,0.74,0.81), mean=0.496, stddev=0.0977] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621138, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.35,0.39,0.42 0.46,0.51,0.60,0.68,0.72 0.75,0.77,0.78,0.84), mean=0.596, stddev=0.1], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.16,0.17,0.19,0.20,0.21 0.22,0.23,0.23,0.23), mean=0.188, stddev=0.0189] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00828645, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.74,-0.70,-0.56 -0.36,-0.22,-0.006,0.22,0.34 0.50,0.65,0.72,0.84), mean=-0.00588, stddev=0.293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.29,0.33,0.44 0.51,0.59,0.68,0.76,0.80 0.85,0.89,0.90,0.94), mean=0.665, stddev=0.122] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222525
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000292484, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06136, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.2,1.3,1.4,1.5,1.5 1.6,1.6,1.7,1.7), mean=1.39, stddev=0.122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.40,0.50 0.63,0.77,0.98,1.2,1.2 1.3,1.4,1.4,1.7), mean=0.96, stddev=0.238], bias-{mean,stddev}=0.03045,0.3219, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000292484, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04137, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.49,0.51,0.54 0.56,0.59,0.64,0.72,0.77 0.81,0.88,0.95,2.2), mean=0.658, stddev=0.108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.6,1.6 1.7,1.7,1.9,2.0,2.1 2.2,2.2,2.3,2.3), mean=1.89, stddev=0.17], bias-{mean,stddev}=2.755e-09,0.01135, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.40), mean=0.0171, stddev=0.0135], oderiv-count=570880
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/8.mdl exp/nnet3/tdnn_lstm1c_sp/9.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.97662 tdnn2.affine:9.58432 lstm1.W_all:8.62963 lstm1.lstm_nonlin:1.67621 lstm1.W_rp:3.87495 tdnn3.affine:6.18261 tdnn4.affine:7.19525 lstm2.W_all:6.25867 lstm2.lstm_nonlin:1.73221 lstm2.W_rp:2.82714 tdnn5.affine:5.09647 tdnn6.affine:6.49124 lstm3.W_all:7.29476 lstm3.lstm_nonlin:1.63489 lstm3.W_rp:2.99226 output.affine:6.60884 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.9405 tdnn2.affine:11.6001 lstm1.W_all:27.8829 lstm1.lstm_nonlin:13.4657 lstm1.W_rp:13.248 tdnn3.affine:9.07719 tdnn4.affine:9.23048 lstm2.W_all:25.7669 lstm2.lstm_nonlin:13.9146 lstm2.W_rp:12.6146 tdnn5.affine:8.49045 tdnn6.affine:9.22163 lstm3.W_all:28.6517 lstm3.lstm_nonlin:13.2222 lstm3.W_rp:23.1545 output.affine:30.6013 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.755909 tdnn2.affine:0.834667 lstm1.W_all:0.290139 lstm1.lstm_nonlin:0.110807 lstm1.W_rp:0.282522 tdnn3.affine:0.668485 tdnn4.affine:0.774943 lstm2.W_all:0.224203 lstm2.lstm_nonlin:0.11075 lstm2.W_rp:0.215032 tdnn5.affine:0.593492 tdnn6.affine:0.700905 lstm3.W_all:0.239492 lstm3.lstm_nonlin:0.110221 lstm3.W_rp:0.12881 output.affine:0.216609 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:04:43 KST 2020, elapsed time 0 seconds
