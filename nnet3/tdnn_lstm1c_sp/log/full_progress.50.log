# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/49.mdl exp/nnet3/tdnn_lstm1c_sp/50.mdl 
# Started at Thu Jul 30 10:20:56 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/49.mdl exp/nnet3/tdnn_lstm1c_sp/50.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000257635, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02238, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.08,0.32,0.39,0.46,0.49 0.53,0.55,0.58,0.80), mean=0.361, stddev=0.142], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.13 0.14,0.17,0.46,0.61,0.76 0.97,1.1,1.1,1.2), mean=0.444, stddev=0.252], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.05,0.08,0.28,0.65,0.89 1.1,1.3,1.4,1.6), mean=0.382, stddev=0.338], bias-{mean,stddev}=-0.0005182,0.03141, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.27,0.48,0.60 0.75,0.89,0.95,1.5), mean=0.285, stddev=0.26], oderiv-count=197248
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-4280.65, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000257635, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01015, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.32,0.34 0.35,0.37,0.40,0.43,0.45 0.46,0.47,0.49,0.51), mean=0.399, stddev=0.0383], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.009,0.01 0.04,0.20,0.24,0.27,0.29 0.30,0.33,0.34,0.39), mean=0.216, stddev=0.0833], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.11,0.24,0.50,0.69 0.84,0.99,1.1,1.2), mean=0.319, stddev=0.243], bias-{mean,stddev}=-0.0004675,0.01629, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.36e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.29,-0.17,-0.14,-0.006 0.07,0.18,0.33,0.52,0.61 0.69,0.77,0.84,0.91), mean=0.337, stddev=0.212], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.11,0.02,0.07,0.12 0.22,0.30,0.46,0.61,0.70 0.77,0.82,0.86,1.0), mean=0.457, stddev=0.189]
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-4215.12, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000257635, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006853, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.002,0.004,0.02 0.05,0.08,0.14,0.22,0.27 0.32,0.37,0.39,0.50), mean=0.151, stddev=0.0885], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.12 0.13,0.19,0.33,0.36,0.38 0.39,0.41,0.41,0.48), mean=0.299, stddev=0.0894], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0006 0.001,0.08,0.17,0.36,0.51 0.67,0.88,0.96,1.2), mean=0.23, stddev=0.212], bias-{mean,stddev}=1.503e-05,0.002562, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000257635, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.002261, w_fc-rms=0.003074, w_oc-rms=0.005381, count=4.46e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00144109, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.6,-3.6,-3.1,-2.0 -1.3,-0.50,0.47,1.6,2.3 3.1,3.7,4.2,5.9), mean=0.515, stddev=1.52], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.0,-0.82,-0.61 -0.37,-0.13,0.23,0.54,0.81 1.1,1.3,1.7,2.3), mean=0.228, stddev=0.497] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00144109, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.5,-2.8,-2.2,-1.5 -0.95,-0.43,0.47,1.5,2.0 2.6,3.5,3.9,6.0), mean=0.516, stddev=1.27], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.90,-0.67,-0.39 -0.13,0.03,0.25,0.47,0.64 0.89,1.1,1.2,2.4), mean=0.253, stddev=0.388] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.49645, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-29,-18,-17,-13 -11,-6.1,0.37,6.0,10 16,19,21,25), mean=0.209, stddev=8.32], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-9.4,-8.4,-6.7 -5.2,-3.0,0.51,4.3,7.0 8.5,11,13,18), mean=0.638, stddev=4.65] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00144109, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.6,-3.5,-3.1,-2.2 -1.6,-0.60,0.44,1.9,2.6 3.2,3.9,4.8,6.8), mean=0.551, stddev=1.69], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-1.3,-1.0,-0.84 -0.49,-0.22,0.24,0.63,0.90 1.2,1.4,1.7,2.4), mean=0.222, stddev=0.596] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.546904, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-25,-15,-13,-10 -8.2,-4.7,0.52,5.2,8.0 12,15,16,27), mean=0.249, stddev=6.55], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-6.8,-6.1,-4.4 -2.8,-1.5,0.83,3.2,4.5 5.9,6.7,8.0,14), mean=0.834, stddev=3.08] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=5.82e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=-0.00228311, count-zeroing-boundaries=876
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000257635, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.008882, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.10 0.11,0.13,0.19,0.26,0.28 0.29,0.30,0.31,0.36), mean=0.191, stddev=0.0663], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.03 0.07,0.10,0.14,0.17,0.19 0.21,0.23,0.24,0.30), mean=0.134, stddev=0.0503], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0001,0.0002,0.0002 0.0003,0.0004,0.002,0.07,0.38 0.56,0.66,0.71,0.86), mean=0.0851, stddev=0.184], bias-{mean,stddev}=0.0007441,0.006932, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000257635, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008818, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.19,0.21,0.24,0.28,0.30 0.32,0.34,0.36,0.43), mean=0.243, stddev=0.0415], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.16,0.27,0.29 0.30,0.32,0.32,0.35), mean=0.185, stddev=0.08], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.0001,0.0001,0.0002 0.0002,0.0004,0.004,0.15,0.46 0.65,0.82,0.93,1.1), mean=0.109, stddev=0.221], bias-{mean,stddev}=-0.0001245,0.01335, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2.04e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-1.8,-1.6,-1.3 -0.94,-0.58,0.008,0.69,1.0 1.3,1.5,1.7,2.7), mean=0.0309, stddev=0.779], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.9,-4.0,-3.5,-3.0 -2.1,-1.3,0.34,2.2,2.8 3.5,4.2,5.3,6.4), mean=0.383, stddev=1.96], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.24,0.33 0.42,0.52,0.60,1.6), mean=0.12, stddev=0.171], oderiv-count=10880
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-4018.51, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000257635, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007229, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.25 0.26,0.26,0.28,0.30,0.31 0.32,0.33,0.34,0.38), mean=0.285, stddev=0.0229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.14,0.16,0.18,0.19 0.20,0.22,0.22,0.26), mean=0.163, stddev=0.0228], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.11,0.19,0.35,0.47 0.58,0.68,0.73,0.85), mean=0.238, stddev=0.157], bias-{mean,stddev}=0.000244,0.00872, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.69e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.16,0.19 0.20,0.23,0.30,0.37,0.41 0.45,0.48,0.52,0.63), mean=0.303, stddev=0.0827], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.26,0.31 0.34,0.37,0.44,0.52,0.56 0.59,0.63,0.64,0.75), mean=0.445, stddev=0.0879], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.04,0.05 0.06,0.07,0.08,0.09), mean=0.0175, stddev=0.0228], oderiv-count=33600
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-3821.9, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000257635, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00449, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0005,0.0009 0.003,0.01,0.08,0.15,0.20 0.23,0.25,0.27,0.39), mean=0.0885, stddev=0.0726], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.10,0.22,0.24,0.25 0.26,0.27,0.27,0.34), mean=0.195, stddev=0.0632], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0005,0.0005,0.0006 0.0009,0.04,0.10,0.23,0.33 0.45,0.61,0.67,0.78), mean=0.145, stddev=0.144], bias-{mean,stddev}=-0.0001474,0.002342, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000257635, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001412, w_fc-rms=0.00179, w_oc-rms=0.002305, count=4.05e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00146502, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.4,-1.9,-1.7,-1.1 -0.62,-0.03,0.48,1.1,1.7 2.2,2.7,3.1,7.0), mean=0.542, stddev=1], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.70,-0.52,-0.32 -0.14,0.05,0.25,0.41,0.64 0.81,1.0,1.2,1.6), mean=0.239, stddev=0.333] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00146502, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.5,-1.8,-1.5,-1.0 -0.54,-0.01,0.49,0.97,1.4 1.6,2.2,2.3,3.9), mean=0.456, stddev=0.823], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.58,-0.43,-0.17 0.005,0.16,0.25,0.37,0.53 0.66,0.90,1.0,1.7), mean=0.26, stddev=0.263] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.730659, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-19,-14,-13,-10 -7.2,-3.9,-0.05,3.5,5.4 8.0,13,15,27), mean=-0.244, stddev=5.54], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-8.5,-7.6,-5.2 -3.6,-1.9,0.65,3.0,5.0 6.6,8.5,8.9,13), mean=0.633, stddev=3.46] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00146502, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.1,-2.6,-2.1,-1.4 -0.90,-0.07,0.46,1.2,1.9 2.4,3.0,3.2,6.2), mean=0.523, stddev=1.15], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.79,-0.68,-0.45 -0.22,0.02,0.24,0.42,0.64 0.82,1.1,1.2,1.9), mean=0.222, stddev=0.369] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00146502, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-15,-12,-10,-7.8 -5.7,-3.2,-0.09,3.2,5.1 7.5,9.8,12,17), mean=-0.101, stddev=4.55], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.2,-3.9,-3.5,-2.0 -1.4,-0.58,0.89,2.2,3.5 4.7,5.5,6.4,15), mean=0.968, stddev=2.08] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=5.06e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=-0.00395257, count-zeroing-boundaries=759
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000257635, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005855, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.10,0.10,0.13,0.16,0.17 0.18,0.19,0.19,0.20), mean=0.13, stddev=0.0284], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.006 0.01,0.02,0.09,0.12,0.14 0.15,0.16,0.17,0.19), mean=0.0807, stddev=0.0491], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0001,0.0002,0.0002 0.0002,0.0003,0.001,0.09,0.28 0.34,0.39,0.44,0.52), mean=0.0609, stddev=0.119], bias-{mean,stddev}=0.0001032,0.007806, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000257635, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007124, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.16,0.19,0.22,0.25 0.26,0.30,0.31,0.34), mean=0.195, stddev=0.0388], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.10 0.11,0.12,0.15,0.20,0.21 0.23,0.23,0.24,0.26), mean=0.158, stddev=0.0397], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,6e-05,7e-05,0.0001 0.0001,0.0003,0.003,0.18,0.36 0.52,0.64,0.70,0.83), mean=0.0947, stddev=0.175], bias-{mean,stddev}=-0.001421,0.009599, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.15,0.19 0.23,0.28,0.30,0.45), mean=0.0786, stddev=0.0836], oderiv-count=35072
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-3625.29, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000257635, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006064, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.22,0.24,0.26,0.27 0.28,0.29,0.30,0.34), mean=0.238, stddev=0.0266], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.10 0.11,0.12,0.13,0.15,0.17 0.18,0.20,0.21,0.25), mean=0.136, stddev=0.0256], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.08,0.14,0.29,0.40 0.50,0.60,0.65,0.76), mean=0.193, stddev=0.142], bias-{mean,stddev}=4.585e-05,0.007451, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.68e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.3,-3.0,-2.5,-2.0 -1.6,-0.96,0.07,1.2,1.9 2.4,3.1,3.5,4.5), mean=0.14, stddev=1.35], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.1,-4.0,-3.3,-2.6 -1.9,-0.95,0.41,1.8,2.9 3.6,4.4,4.9,9.2), mean=0.447, stddev=1.87]
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-3428.68, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000257635, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005907, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.05 0.07,0.08,0.11,0.21,0.25 0.27,0.29,0.30,0.38), mean=0.134, stddev=0.0678], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.18,0.20,0.24,0.32,0.38 0.40,0.43,0.44,0.47), mean=0.26, stddev=0.0723], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.002,0.005 0.04,0.06,0.11,0.27,0.47 0.65,0.80,0.87,1.0), mean=0.186, stddev=0.195], bias-{mean,stddev}=-5.133e-05,0.002298, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000257635, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.003443, w_fc-rms=0.004672, w_oc-rms=0.006048, count=3.64e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00149374, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.3,-5.4,-4.7,-3.8 -2.6,-1.7,0.06,1.8,2.6 3.7,5.3,6.2,8.7), mean=0.0442, stddev=2.28], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.2,-1.4,-1.3,-0.92 -0.63,-0.41,0.03,0.49,0.72 0.89,1.1,1.2,2.1), mean=0.0282, stddev=0.567] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00149374, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.4,-5.6,-4.9,-3.8 -2.7,-1.5,0.50,2.7,3.9 5.0,6.2,7.1,9.5), mean=0.568, stddev=2.64], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-1.6,-1.2,-0.93 -0.67,-0.37,0.11,0.60,0.83 1.1,1.3,1.4,2.7), mean=0.112, stddev=0.625] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.252868, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-35,-29,-27,-20 -14,-9.5,-0.77,7.8,13 18,20,23,35), mean=-0.79, stddev=11], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-19,-11,-10,-8.4 -6.6,-4.5,-0.71,3.0,5.2 7.4,8.6,9.9,13), mean=-0.765, stddev=4.7] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00149374, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.6,-4.9,-4.3,-3.4 -2.6,-1.5,0.14,2.0,2.9 4.1,6.2,6.6,12), mean=0.272, stddev=2.33], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-1.8,-1.5,-1.2 -0.84,-0.54,0.09,0.59,0.85 1.1,1.5,1.6,2.2), mean=0.0361, stddev=0.703] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.197404, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-32,-25,-21,-16 -12,-7.1,-0.66,5.9,11 15,18,18,27), mean=-0.66, stddev=8.93], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-17,-9.2,-7.8,-6.4 -4.7,-2.8,0.33,3.5,5.1 6.5,8.0,9.1,13), mean=0.241, stddev=3.98] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=4.29e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=640
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000257635, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007478, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.14,0.21,0.22 0.23,0.23,0.24,0.25), mean=0.164, stddev=0.0455], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.09,0.10,0.12,0.14,0.15 0.15,0.16,0.17,0.28), mean=0.118, stddev=0.0268], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.0006,0.0007,0.0009 0.001,0.002,0.04,0.22,0.31 0.39,0.44,0.47,0.53), mean=0.108, stddev=0.132], bias-{mean,stddev}=-0.000331,0.005933, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000257635, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.008336, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.07 0.07,0.09,0.12,0.16,0.18 0.21,0.24,0.27,0.49), mean=0.126, stddev=0.0468], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.29 0.30,0.31,0.37,0.44,0.46 0.47,0.49,0.50,0.53), mean=0.377, stddev=0.0621], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0009,0.001 0.001,0.003,0.03,0.53,0.78 0.89,0.99,1.1,1.1), mean=0.213, stddev=0.318], bias-{mean,stddev}=-1.416e-10,0.002001, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.03,0.03 0.04,0.04,0.05,0.34), mean=0.0162, stddev=0.0176], oderiv-count=65280

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.8674 tdnn2.affine:9.14755 lstm1.W_all:7.96958 lstm1.lstm_nonlin:0.150427 lstm1.W_rp:3.26788 tdnn3.affine:5.6243 tdnn4.affine:6.51378 lstm2.W_all:5.22224 lstm2.lstm_nonlin:0.0739284 lstm2.W_rp:2.15656 tdnn5.affine:4.54262 tdnn6.affine:5.46461 lstm3.W_all:6.86977 lstm3.lstm_nonlin:0.19114 lstm3.W_rp:2.75126 output.affine:6.16616 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.3039 tdnn2.affine:11.6716 lstm1.W_all:20.5278 lstm1.lstm_nonlin:1.63521 lstm1.W_rp:11.9446 tdnn3.affine:8.46943 tdnn4.affine:8.69427 lstm2.W_all:15.9706 lstm2.lstm_nonlin:0.817981 lstm2.W_rp:10.7905 tdnn5.affine:7.86845 tdnn6.affine:8.41809 lstm3.W_all:22.8976 lstm3.lstm_nonlin:1.67743 lstm3.W_rp:24.9689 output.affine:30.2433 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.723077 tdnn2.affine:0.790093 lstm1.W_all:0.3902 lstm1.lstm_nonlin:0.0932011 lstm1.W_rp:0.275391 tdnn3.affine:0.672251 tdnn4.affine:0.753741 lstm2.W_all:0.328229 lstm2.lstm_nonlin:0.0896422 lstm2.W_rp:0.201532 tdnn5.affine:0.590155 tdnn6.affine:0.660906 lstm3.W_all:0.301381 lstm3.lstm_nonlin:0.112173 lstm3.W_rp:0.110536 output.affine:0.203957 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:20:56 KST 2020, elapsed time 0 seconds
