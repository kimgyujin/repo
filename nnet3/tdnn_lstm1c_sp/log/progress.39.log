# nnet3-info exp/nnet3/tdnn_lstm1c_sp/39.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/38.mdl exp/nnet3/tdnn_lstm1c_sp/39.mdl 
# Started at Thu Jul 30 10:16:33 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/39.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000265938, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03115, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.01,0.02 0.05,0.40,0.56,0.64,0.69 0.74,0.83,0.88,1.2), mean=0.491, stddev=0.223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.16 0.17,0.21,0.59,0.81,1.2 1.5,1.5,1.7,1.7), mean=0.601, stddev=0.379], bias-{mean,stddev}=0.0002181,0.0581, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.1e+06, self-repaired-proportion=0.146084, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,4e-06,5e-06,4e-05 0.0002,0.009,0.06,0.09,0.10 0.11,0.13,0.14,0.18), mean=0.0588, stddev=0.0368], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.003,0.01 0.03,0.14,0.46,0.60,0.70 0.78,0.86,0.87,0.94), mean=0.422, stddev=0.233], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.09,0.26,0.35,0.43,0.47 0.54,0.67,0.71,1.0), mean=0.334, stddev=0.141], oderiv-count=1.18886e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34853.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,1e-06,2e-06,1e-05 7e-05,0.008,0.06,0.09,0.10 0.12,0.14,0.15,0.18), mean=0.0571, stddev=0.0376], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,5e-05,8e-05,0.0002 0.0006,0.03,0.10,0.12,0.12 0.13,0.14,0.14,0.15), mean=0.0825, stddev=0.0435]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000265938, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01305, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.43 0.44,0.47,0.51,0.55,0.58 0.60,0.64,0.66,0.87), mean=0.512, stddev=0.0563], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.008,0.01 0.03,0.23,0.31,0.35,0.37 0.39,0.42,0.47,0.74), mean=0.273, stddev=0.119], bias-{mean,stddev}=0.0009385,0.02763, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.76e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.29,0.30 0.32,0.33,0.36,0.39,0.41 0.42,0.44,0.47,0.60), mean=0.36, stddev=0.0379], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.40,0.41 0.42,0.43,0.46,0.49,0.50 0.51,0.53,0.53,0.55), mean=0.461, stddev=0.0303], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.08), mean=0.04, stddev=0.00799], oderiv-count=1.15014e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34132, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.28,0.30 0.31,0.33,0.36,0.39,0.41 0.43,0.46,0.47,0.64), mean=0.362, stddev=0.0433], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.49,0.50,0.52 0.55,0.57,0.63,0.69,0.72 0.77,0.81,0.85,0.99), mean=0.634, stddev=0.0757]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000265938, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01769, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.08 0.14,0.22,0.39,0.57,0.68 0.76,0.85,0.91,1.1), mean=0.403, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.39,0.43 0.51,0.70,0.83,0.91,0.95 0.99,1.0,1.1,1.5), mean=0.79, stddev=0.165], bias-{mean,stddev}=-0.0017,0.02384, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000265938, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02798, w_fc-rms=0.04309, w_oc-rms=0.05152, count=1.44e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00612869, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.42,0.44 0.45,0.46,0.49,0.53,0.57 0.63,0.66,0.68,0.74), mean=0.501, stddev=0.0549], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0146] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00612869, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.37,0.40 0.41,0.43,0.47,0.53,0.64 0.69,0.75,0.79,0.87), mean=0.493, stddev=0.0908], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.16,0.19 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0212] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00708427, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.81,-0.78,-0.61 -0.42,-0.22,0.005,0.26,0.36 0.62,0.75,0.76,0.85), mean=0.00294, stddev=0.332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.25,0.28,0.34 0.39,0.46,0.58,0.69,0.79 0.92,0.97,0.98,1.0), mean=0.584, stddev=0.158] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00612869, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.41 0.43,0.44,0.47,0.51,0.53 0.55,0.58,0.60,0.69), mean=0.476, stddev=0.0438], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.21,0.22,0.24,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0168] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0171896, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.96,-0.84,-0.81,-0.61 -0.34,-0.20,0.008,0.20,0.31 0.60,0.74,0.79,0.89), mean=-0.00123, stddev=0.314], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.20,0.25,0.38 0.52,0.72,0.83,0.88,0.91 0.95,0.98,0.99,1.0), mean=0.776, stddev=0.166] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=296715
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000265938, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03197, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.31,0.33,0.35 0.37,0.40,0.63,0.95,1.0 1.1,1.1,1.1,1.2), mean=0.679, stddev=0.265], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.07,0.14 0.26,0.36,0.48,0.61,0.71 0.78,0.90,0.99,1.2), mean=0.481, stddev=0.185], bias-{mean,stddev}=-0.001934,0.04429, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000265938, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0133, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.25,0.26 0.28,0.30,0.35,0.42,0.47 0.50,0.54,0.56,0.65), mean=0.364, stddev=0.0728], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.14,0.16,0.25,0.40,0.44 0.47,0.50,0.51,0.54), mean=0.28, stddev=0.117], bias-{mean,stddev}=-0.004923,0.01761, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.35e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.08 0.09,0.11,0.15,0.19,0.21 0.23,0.25,0.27,0.30), mean=0.151, stddev=0.0456], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.23,0.27 0.31,0.38,0.49,0.59,0.62 0.65,0.68,0.71,0.79), mean=0.483, stddev=0.119], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.06,0.06,0.08,0.08 0.09,0.10,0.11,0.14), mean=0.0675, stddev=0.0128], oderiv-count=1.12832e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31966.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.09,0.11,0.15,0.19,0.21 0.23,0.25,0.26,0.33), mean=0.148, stddev=0.0474], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.17,0.18 0.19,0.21,0.24,0.27,0.29 0.31,0.33,0.34,0.39), mean=0.241, stddev=0.0402]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000265938, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009714, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.31,0.31,0.32 0.34,0.35,0.38,0.41,0.43 0.45,0.46,0.48,0.57), mean=0.382, stddev=0.039], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.18,0.19,0.22,0.25,0.27 0.28,0.29,0.31,0.34), mean=0.219, stddev=0.034], bias-{mean,stddev}=-0.008891,0.01684, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.25 0.26,0.28,0.31,0.34,0.37 0.38,0.40,0.41,0.47), mean=0.311, stddev=0.0406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.40 0.40,0.42,0.44,0.47,0.48 0.50,0.51,0.51,0.54), mean=0.444, stddev=0.0305], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0291, stddev=0.00259], oderiv-count=1.09498e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29801.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.23,0.25 0.26,0.27,0.31,0.35,0.37 0.39,0.41,0.42,0.47), mean=0.312, stddev=0.0438], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.48 0.51,0.53,0.58,0.65,0.69 0.72,0.76,0.79,0.88), mean=0.592, stddev=0.0727]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000265938, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01372, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.03,0.08,0.27,0.48,0.57 0.62,0.67,0.72,1.1), mean=0.288, stddev=0.198], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.26,0.28,0.31 0.36,0.54,0.64,0.71,0.75 0.78,0.84,0.88,0.91), mean=0.61, stddev=0.138], bias-{mean,stddev}=-0.002605,0.02395, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000265938, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0208, w_fc-rms=0.02585, w_oc-rms=0.027, count=1.32e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00618375, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.43,0.45 0.46,0.47,0.49,0.52,0.54 0.57,0.60,0.61,0.64), mean=0.495, stddev=0.0358], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0153] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00618375, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.40,0.41 0.42,0.44,0.49,0.51,0.54 0.57,0.65,0.66,0.75), mean=0.484, stddev=0.0525], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.238, stddev=0.0133] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00956747, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.68,-0.56,-0.43 -0.31,-0.17,0.008,0.19,0.32 0.47,0.57,0.67,0.75), mean=0.00387, stddev=0.258], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.42,0.45,0.50 0.53,0.57,0.66,0.87,0.97 0.99,0.99,1.0,1.0), mean=0.702, stddev=0.159] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00618375, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.43 0.44,0.46,0.49,0.51,0.53 0.55,0.57,0.59,0.63), mean=0.485, stddev=0.0346], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0157] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00618375, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.69,-0.54,-0.40 -0.29,-0.15,0.002,0.16,0.29 0.44,0.55,0.67,0.81), mean=0.00642, stddev=0.242], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.43,0.48,0.68 0.75,0.81,0.87,0.94,0.98 0.99,1.0,1.0,1.0), mean=0.861, stddev=0.108] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=261624
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000265938, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02883, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.43,0.45 0.46,0.50,0.60,0.79,0.84 0.90,0.93,0.95,1.0), mean=0.64, stddev=0.149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.05 0.07,0.14,0.43,0.60,0.70 0.76,0.86,0.93,1.1), mean=0.402, stddev=0.234], bias-{mean,stddev}=0.002263,0.09248, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000265938, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01241, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.21,0.22,0.23 0.24,0.27,0.31,0.40,0.45 0.52,0.59,0.62,0.66), mean=0.335, stddev=0.0876], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.18 0.19,0.21,0.26,0.34,0.37 0.39,0.42,0.44,0.47), mean=0.274, stddev=0.0696], bias-{mean,stddev}=0.002093,0.02035, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.63e+05, self-repaired-proportion=0.000667735, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.02,0.04 0.06,0.07,0.10,0.13,0.15 0.16,0.18,0.19,0.23), mean=0.103, stddev=0.0377], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.16,0.16,0.20 0.25,0.31,0.43,0.53,0.59 0.62,0.63,0.65,0.70), mean=0.421, stddev=0.125], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.06,0.07,0.09,0.10 0.11,0.13,0.14,0.19), mean=0.0769, stddev=0.0179], oderiv-count=899456
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27636.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.03,0.03,0.04 0.05,0.07,0.10,0.14,0.15 0.17,0.19,0.21,0.25), mean=0.104, stddev=0.0401], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.08,0.09,0.12 0.14,0.16,0.18,0.21,0.23 0.24,0.25,0.26,0.29), mean=0.183, stddev=0.0383]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000265938, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009457, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.30,0.31 0.31,0.33,0.36,0.41,0.44 0.46,0.49,0.51,0.55), mean=0.37, stddev=0.0489], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.11,0.13,0.15 0.16,0.17,0.20,0.24,0.27 0.30,0.34,0.37,0.48), mean=0.21, stddev=0.0482], bias-{mean,stddev}=-0.01059,0.0149, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.62e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.23,0.25 0.26,0.28,0.31,0.35,0.36 0.38,0.40,0.41,0.55), mean=0.313, stddev=0.0419], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.36,0.38 0.38,0.39,0.42,0.45,0.46 0.47,0.48,0.49,0.52), mean=0.422, stddev=0.031], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.025, stddev=0.00252], oderiv-count=971840
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25471.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.22,0.23,0.25 0.26,0.28,0.32,0.36,0.38 0.40,0.42,0.43,0.66), mean=0.324, stddev=0.0481], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.47,0.48,0.49 0.52,0.55,0.61,0.69,0.74 0.78,0.82,0.86,0.93), mean=0.622, stddev=0.0863]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000265938, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01939, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.23 0.29,0.34,0.43,0.60,0.74 0.80,0.84,0.87,1.5), mean=0.465, stddev=0.167], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.61,0.62,0.63 0.66,0.68,0.74,1.1,1.3 1.4,1.4,1.5,1.7), mean=0.85, stddev=0.242], bias-{mean,stddev}=0.008744,0.03158, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000265938, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03329, w_fc-rms=0.04357, w_oc-rms=0.05624, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625028, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.45,0.47 0.48,0.51,0.57,0.63,0.65 0.67,0.69,0.70,0.75), mean=0.57, stddev=0.0622], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.19,0.20,0.21,0.22,0.22 0.22,0.23,0.23,0.23), mean=0.207, stddev=0.0122] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625028, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.47 0.49,0.52,0.58,0.63,0.66 0.67,0.71,0.72,0.85), mean=0.581, stddev=0.0637], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.17,0.18 0.19,0.19,0.21,0.22,0.23 0.23,0.23,0.23,0.24), mean=0.207, stddev=0.0153] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00711391, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.81,-0.71,-0.51 -0.32,-0.20,-0.02,0.22,0.34 0.50,0.67,0.72,0.85), mean=0.00292, stddev=0.291], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.26,0.28,0.32 0.37,0.41,0.46,0.50,0.53 0.55,0.57,0.59,0.63), mean=0.453, stddev=0.0667] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625028, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.52,0.53,0.55 0.57,0.60,0.64,0.68,0.70 0.72,0.74,0.76,0.85), mean=0.639, stddev=0.0511], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.16,0.16,0.17 0.17,0.18,0.19,0.20,0.21 0.21,0.21,0.21,0.22), mean=0.189, stddev=0.0133] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0156918, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.96,-0.84,-0.72,-0.48 -0.31,-0.18,0.008,0.19,0.33 0.51,0.67,0.75,0.90), mean=0.00577, stddev=0.287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.23,0.32,0.42 0.50,0.58,0.66,0.70,0.72 0.73,0.74,0.75,0.78), mean=0.629, stddev=0.101] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222397
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000265938, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06664, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.5,1.7,1.8 1.8,1.9,1.9,2.0), mean=1.5, stddev=0.213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.64,0.70,0.79 0.83,0.91,1.1,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.06, stddev=0.168], bias-{mean,stddev}=0.003179,0.09832, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000265938, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0409, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.51,0.53,0.55 0.57,0.59,0.64,0.70,0.74 0.78,0.84,0.87,2.2), mean=0.652, stddev=0.0982], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.6,1.6,1.9,2.1,2.2 2.2,2.3,2.4,2.6), mean=1.86, stddev=0.23], bias-{mean,stddev}=4.398e-09,0.03007, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0167, stddev=0.0139], oderiv-count=593280
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/38.mdl exp/nnet3/tdnn_lstm1c_sp/39.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.12162 tdnn2.affine:9.37051 lstm1.W_all:8.08717 lstm1.lstm_nonlin:0.159987 lstm1.W_rp:3.3343 tdnn3.affine:5.56555 tdnn4.affine:6.66279 lstm2.W_all:5.32477 lstm2.lstm_nonlin:0.0914168 lstm2.W_rp:2.17111 tdnn5.affine:4.56633 tdnn6.affine:5.64512 lstm3.W_all:6.91427 lstm3.lstm_nonlin:0.182638 lstm3.W_rp:2.79844 output.affine:6.19362 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.3725 tdnn2.affine:11.7685 lstm1.W_all:20.6034 lstm1.lstm_nonlin:1.6591 lstm1.W_rp:11.7782 tdnn3.affine:8.4777 tdnn4.affine:8.76026 lstm2.W_all:15.9923 lstm2.lstm_nonlin:0.975403 lstm2.W_rp:10.7046 tdnn5.affine:7.91953 tdnn6.affine:8.5277 lstm3.W_all:22.5933 lstm3.lstm_nonlin:1.79114 lstm3.W_rp:24.5536 output.affine:30.2853 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.732334 tdnn2.affine:0.800269 lstm1.W_all:0.392867 lstm1.lstm_nonlin:0.0960656 lstm1.W_rp:0.283829 tdnn3.affine:0.662419 tdnn4.affine:0.763539 lstm2.W_all:0.333823 lstm2.lstm_nonlin:0.0901334 lstm2.W_rp:0.203717 tdnn5.affine:0.579372 tdnn6.affine:0.667994 lstm3.W_all:0.306665 lstm3.lstm_nonlin:0.0996186 lstm3.W_rp:0.114469 output.affine:0.204639 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:16:33 KST 2020, elapsed time 0 seconds
