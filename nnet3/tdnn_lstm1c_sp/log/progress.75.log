# nnet3-info exp/nnet3/tdnn_lstm1c_sp/75.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/74.mdl exp/nnet3/tdnn_lstm1c_sp/75.mdl 
# Started at Thu Jul 30 10:30:47 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/75.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000237243, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03088, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.01,0.02 0.04,0.42,0.53,0.63,0.69 0.74,0.83,0.89,1.1), mean=0.492, stddev=0.211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.15 0.17,0.22,0.60,0.81,1.1 1.4,1.5,1.6,1.7), mean=0.598, stddev=0.373], bias-{mean,stddev}=0.004581,0.05441, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.95e+05, self-repaired-proportion=0.110616, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,6e-06,1e-05,4e-05 0.0002,0.03,0.06,0.09,0.10 0.11,0.13,0.14,0.17), mean=0.0596, stddev=0.035], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.003,0.008,0.02 0.05,0.27,0.48,0.62,0.71 0.79,0.86,0.89,0.94), mean=0.448, stddev=0.228], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.08,0.28,0.36,0.45,0.50 0.55,0.66,0.74,1.2), mean=0.351, stddev=0.152], oderiv-count=1.13626e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39547, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,8e-07,5e-06,2e-05 0.0001,0.03,0.06,0.08,0.10 0.12,0.14,0.15,0.18), mean=0.058, stddev=0.0351], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,4e-05,8e-05,0.0002 0.0009,0.07,0.10,0.11,0.12 0.12,0.13,0.13,0.15), mean=0.0825, stddev=0.0389]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000237243, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01274, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.40,0.42 0.43,0.45,0.50,0.54,0.57 0.60,0.64,0.67,0.74), mean=0.5, stddev=0.0559], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.006,0.01 0.03,0.24,0.30,0.34,0.36 0.37,0.41,0.45,0.69), mean=0.269, stddev=0.11], bias-{mean,stddev}=-0.00061,0.02797, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.77e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.29,0.30 0.31,0.33,0.36,0.39,0.41 0.44,0.46,0.48,0.62), mean=0.36, stddev=0.0421], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.40,0.41,0.41 0.42,0.44,0.46,0.48,0.50 0.51,0.52,0.53,0.56), mean=0.46, stddev=0.0289], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.07,0.07), mean=0.042, stddev=0.008], oderiv-count=1.09568e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38707.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.29 0.31,0.32,0.35,0.39,0.41 0.44,0.46,0.49,0.63), mean=0.357, stddev=0.0454], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.50,0.51,0.53 0.55,0.57,0.62,0.69,0.73 0.76,0.80,0.84,1.0), mean=0.632, stddev=0.0731]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000237243, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01755, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.003,0.007,0.03 0.12,0.23,0.39,0.57,0.67 0.75,0.84,0.90,1.1), mean=0.397, stddev=0.207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.36,0.41,0.46 0.52,0.69,0.82,0.90,0.95 0.99,1.0,1.1,1.3), mean=0.785, stddev=0.157], bias-{mean,stddev}=-0.001928,0.02004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000237243, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02492, w_fc-rms=0.04016, w_oc-rms=0.05515, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616855, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.43,0.43,0.44 0.45,0.46,0.49,0.52,0.56 0.61,0.66,0.68,0.71), mean=0.499, stddev=0.0512], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0146] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616855, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.39,0.40 0.42,0.44,0.48,0.53,0.60 0.69,0.75,0.79,0.84), mean=0.496, stddev=0.0839], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.18,0.19 0.21,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0199] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00807977, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.82,-0.75,-0.56 -0.35,-0.20,-0.005,0.20,0.35 0.51,0.72,0.76,0.82), mean=-4.08e-05, stddev=0.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.30,0.31,0.35 0.40,0.47,0.59,0.71,0.85 0.99,1.0,1.0,1.0), mean=0.603, stddev=0.168] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616855, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.41,0.42 0.43,0.44,0.47,0.51,0.53 0.56,0.58,0.60,0.68), mean=0.477, stddev=0.043], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.20,0.21,0.22,0.23,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.017] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0160024, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.86,-0.78,-0.52 -0.31,-0.18,-0.005,0.17,0.32 0.48,0.71,0.80,0.87), mean=-0.00377, stddev=0.292], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.22,0.24,0.41 0.59,0.71,0.83,0.89,0.93 0.99,1.0,1.0,1.0), mean=0.787, stddev=0.162] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=296523
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000237243, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03183, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.23,0.25 0.27,0.31,0.45,0.99,1.1 1.1,1.2,1.2,1.3), mean=0.644, stddev=0.336], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.04,0.08 0.21,0.34,0.47,0.61,0.69 0.81,0.92,0.98,1.1), mean=0.474, stddev=0.197], bias-{mean,stddev}=-0.002434,0.04173, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000237243, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01281, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.22,0.23,0.25 0.27,0.29,0.34,0.41,0.45 0.48,0.52,0.54,0.65), mean=0.35, stddev=0.073], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.12,0.21,0.40,0.45 0.48,0.50,0.52,0.57), mean=0.256, stddev=0.14], bias-{mean,stddev}=-0.004956,0.02765, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.81e+05, self-repaired-proportion=0.00192308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.04,0.05,0.07 0.08,0.10,0.13,0.17,0.18 0.20,0.23,0.24,0.26), mean=0.134, stddev=0.0413], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.18,0.22,0.26 0.30,0.37,0.51,0.59,0.63 0.66,0.67,0.69,0.72), mean=0.484, stddev=0.124], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.06 0.06,0.07,0.07,0.08,0.09 0.11,0.12,0.12,0.17), mean=0.0777, stddev=0.0138], oderiv-count=933504
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36188.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.04,0.05,0.06 0.08,0.10,0.13,0.16,0.19 0.20,0.23,0.24,0.31), mean=0.132, stddev=0.0429], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.14,0.15,0.16 0.18,0.19,0.22,0.25,0.26 0.28,0.30,0.32,0.38), mean=0.218, stddev=0.0381]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000237243, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009441, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.30,0.31,0.32 0.33,0.34,0.37,0.40,0.42 0.43,0.45,0.46,0.66), mean=0.371, stddev=0.0373], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.15,0.16,0.17 0.17,0.18,0.21,0.24,0.26 0.27,0.29,0.30,0.36), mean=0.213, stddev=0.0334], bias-{mean,stddev}=-0.009959,0.01723, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.94e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.24 0.25,0.26,0.30,0.33,0.35 0.37,0.39,0.40,0.48), mean=0.299, stddev=0.0396], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.41,0.42,0.44,0.47,0.49 0.50,0.51,0.52,0.54), mean=0.444, stddev=0.0313], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0309, stddev=0.00263], oderiv-count=1.03462e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33669.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.25,0.26,0.29,0.32,0.34 0.37,0.39,0.40,0.49), mean=0.294, stddev=0.0411], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.46,0.47 0.50,0.51,0.56,0.62,0.65 0.69,0.73,0.76,0.96), mean=0.571, stddev=0.0686]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000237243, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01362, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0004,0.0004,0.0008 0.003,0.02,0.28,0.48,0.56 0.62,0.66,0.69,1.2), mean=0.274, stddev=0.213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.28,0.32 0.37,0.53,0.64,0.70,0.73 0.77,0.81,0.84,0.97), mean=0.607, stddev=0.131], bias-{mean,stddev}=-0.003021,0.02161, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000237243, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01417, w_fc-rms=0.01862, w_oc-rms=0.02255, count=1.33e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622609, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.45 0.46,0.47,0.50,0.51,0.53 0.56,0.59,0.61,0.65), mean=0.494, stddev=0.0327], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0156] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622609, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.41,0.42 0.43,0.45,0.49,0.50,0.52 0.56,0.60,0.62,0.73), mean=0.484, stddev=0.0435], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0125] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00915392, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.63,-0.58,-0.37 -0.21,-0.11,0.005,0.14,0.27 0.38,0.54,0.62,0.76), mean=0.0123, stddev=0.219], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.45,0.48,0.51 0.54,0.57,0.65,0.99,1.0 1.0,1.0,1.0,1.0), mean=0.729, stddev=0.184] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622609, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.42,0.43 0.44,0.46,0.49,0.50,0.52 0.54,0.57,0.59,0.65), mean=0.487, stddev=0.034], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0162] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00622609, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.62,-0.56,-0.35 -0.22,-0.11,0.005,0.14,0.26 0.36,0.50,0.59,0.84), mean=0.0117, stddev=0.214], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.50,0.57,0.68 0.75,0.82,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.879, stddev=0.108] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=261429
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000237243, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02862, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.38,0.39 0.41,0.44,0.60,0.82,0.87 0.90,0.93,0.94,1.1), mean=0.626, stddev=0.184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.01 0.02,0.05,0.45,0.61,0.68 0.75,0.84,0.87,1.1), mean=0.382, stddev=0.259], bias-{mean,stddev}=-0.003964,0.09965, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000237243, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0119, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.21 0.23,0.26,0.30,0.38,0.44 0.50,0.57,0.58,0.65), mean=0.321, stddev=0.0865], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.16,0.18,0.25,0.34,0.37 0.39,0.41,0.44,0.50), mean=0.26, stddev=0.0792], bias-{mean,stddev}=0.002265,0.01849, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.33e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.04,0.06,0.09,0.12,0.13 0.14,0.16,0.16,0.21), mean=0.0879, stddev=0.0333], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.13,0.18 0.24,0.30,0.43,0.54,0.59 0.63,0.66,0.67,0.71), mean=0.421, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.07,0.08,0.10,0.12 0.13,0.14,0.15,0.18), mean=0.0884, stddev=0.0193], oderiv-count=969088
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31150.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.06,0.09,0.11,0.13 0.14,0.16,0.17,0.22), mean=0.0868, stddev=0.0338], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.11 0.12,0.13,0.15,0.18,0.19 0.20,0.23,0.25,0.27), mean=0.155, stddev=0.0327]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000237243, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009001, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.27,0.29 0.29,0.31,0.35,0.40,0.42 0.44,0.46,0.47,0.51), mean=0.352, stddev=0.0491], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.12,0.14 0.15,0.16,0.20,0.23,0.25 0.29,0.32,0.35,0.43), mean=0.2, stddev=0.0461], bias-{mean,stddev}=-0.0104,0.01452, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.24e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.23 0.25,0.27,0.30,0.33,0.35 0.37,0.38,0.39,0.43), mean=0.301, stddev=0.0405], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.35,0.36 0.38,0.39,0.41,0.45,0.46 0.48,0.49,0.50,0.51), mean=0.416, stddev=0.0348], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0259, stddev=0.00269], oderiv-count=1.00672e+06
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28631.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.22 0.24,0.27,0.30,0.34,0.36 0.37,0.39,0.40,0.50), mean=0.301, stddev=0.0448], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.45,0.47 0.49,0.52,0.59,0.66,0.70 0.75,0.78,0.80,0.86), mean=0.594, stddev=0.0821]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000237243, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01974, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.25 0.32,0.36,0.43,0.63,0.76 0.80,0.84,0.87,1.4), mean=0.475, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.59,0.61 0.63,0.66,0.75,1.1,1.4 1.4,1.5,1.5,1.7), mean=0.858, stddev=0.273], bias-{mean,stddev}=0.007778,0.02436, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000237243, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02967, w_fc-rms=0.04114, w_oc-rms=0.05739, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629566, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.45,0.45,0.47 0.49,0.51,0.57,0.63,0.66 0.67,0.70,0.71,0.80), mean=0.574, stddev=0.064], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.19,0.20,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.205, stddev=0.0101] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629566, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.47,0.48 0.50,0.54,0.59,0.64,0.66 0.70,0.73,0.74,0.88), mean=0.589, stddev=0.0644], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.17,0.18,0.18 0.19,0.19,0.20,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.204, stddev=0.0137] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0099717, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.81,-0.77,-0.51 -0.30,-0.21,0.002,0.20,0.33 0.48,0.67,0.81,0.87), mean=-0.00159, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.25,0.27,0.32 0.35,0.39,0.44,0.48,0.50 0.52,0.53,0.54,0.65), mean=0.435, stddev=0.062] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0069634, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.54,0.55,0.56 0.58,0.61,0.65,0.69,0.71 0.72,0.75,0.76,0.95), mean=0.649, stddev=0.0497], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.15,0.15,0.16 0.17,0.18,0.19,0.20,0.20 0.20,0.20,0.21,0.21), mean=0.185, stddev=0.0135] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0176783, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.87,-0.80,-0.51 -0.31,-0.18,0.002,0.18,0.30 0.48,0.72,0.87,0.95), mean=-0.000278, stddev=0.293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.20,0.23,0.38 0.47,0.56,0.64,0.69,0.71 0.72,0.73,0.74,0.75), mean=0.612, stddev=0.112] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222212
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000237243, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06911, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.2,1.2,1.6,1.8,1.9 2.0,2.0,2.0,2.2), mean=1.55, stddev=0.287], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.67,0.77,0.87 0.92,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.1, stddev=0.153], bias-{mean,stddev}=0.0001777,0.08836, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000237243, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04048, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.51,0.52,0.55 0.56,0.59,0.64,0.69,0.73 0.77,0.82,0.86,2.1), mean=0.646, stddev=0.0935], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.4 1.5,1.5,1.8,2.1,2.2 2.3,2.3,2.4,2.6), mean=1.83, stddev=0.299], bias-{mean,stddev}=3.917e-09,0.02665, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0138], oderiv-count=612480
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/74.mdl exp/nnet3/tdnn_lstm1c_sp/75.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.66161 tdnn2.affine:8.8064 lstm1.W_all:7.5443 lstm1.lstm_nonlin:0.136377 lstm1.W_rp:3.0562 tdnn3.affine:5.35997 tdnn4.affine:6.22892 lstm2.W_all:4.91115 lstm2.lstm_nonlin:0.0680928 lstm2.W_rp:1.99717 tdnn5.affine:4.30278 tdnn6.affine:5.13798 lstm3.W_all:6.58247 lstm3.lstm_nonlin:0.152258 lstm3.W_rp:2.66434 output.affine:5.82337 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.2616 tdnn2.affine:11.4905 lstm1.W_all:20.4244 lstm1.lstm_nonlin:1.65614 lstm1.W_rp:11.7243 tdnn3.affine:8.18344 tdnn4.affine:8.51533 lstm2.W_all:15.8653 lstm2.lstm_nonlin:0.74094 lstm2.W_rp:10.6468 tdnn5.affine:7.59341 tdnn6.affine:8.1172 lstm3.W_all:22.9824 lstm3.lstm_nonlin:1.7465 lstm3.W_rp:25.4505 output.affine:29.9655 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.713204 tdnn2.affine:0.771666 lstm1.W_all:0.369376 lstm1.lstm_nonlin:0.0823743 lstm1.W_rp:0.260595 tdnn3.affine:0.662328 tdnn4.affine:0.737637 lstm2.W_all:0.3096 lstm2.lstm_nonlin:0.0911838 lstm2.W_rp:0.187684 tdnn5.affine:0.57077 tdnn6.affine:0.635069 lstm3.W_all:0.286589 lstm3.lstm_nonlin:0.0886694 lstm3.W_rp:0.104825 output.affine:0.194242 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:30:47 KST 2020, elapsed time 0 seconds
