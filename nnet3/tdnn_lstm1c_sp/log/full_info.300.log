# nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/300.mdl 
# Started at Thu Jul 30 11:59:47 KST 2020
#
nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/300.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000193996, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03178, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.008,0.01 0.01,0.03,0.55,0.69,0.79 0.86,0.93,0.98,1.1), mean=0.467, stddev=0.291], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.17,0.21,0.62,0.88,1.2 1.4,1.5,1.5,1.6), mean=0.621, stddev=0.374], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.07,0.26,0.86,1.4 1.7,1.9,2.0,2.4), mean=0.486, stddev=0.538], bias-{mean,stddev}=-0.00106,0.05703, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.16e+05, self-repaired-proportion=0.191122, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,7e-06,2e-05,5e-05 8e-05,0.0002,0.05,0.09,0.11 0.12,0.15,0.16,0.18), mean=0.0508, stddev=0.0436], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.007,0.01,0.02 0.04,0.07,0.42,0.58,0.73 0.81,0.89,0.93,0.99), mean=0.373, stddev=0.259], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.02,0.05,0.27,0.37,0.43 0.51,0.65,0.68,1.5), mean=0.261, stddev=0.172], oderiv-count=1.14202e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33070.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,6e-06,9e-06,3e-05 7e-05,0.0003,0.05,0.09,0.11 0.13,0.15,0.16,0.20), mean=0.0494, stddev=0.0432], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.0001,0.0001,0.0003 0.0005,0.002,0.09,0.11,0.13 0.14,0.15,0.15,0.16), mean=0.0706, stddev=0.0495]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000193996, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01188, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.38 0.39,0.41,0.46,0.51,0.55 0.59,0.62,0.64,0.71), mean=0.465, stddev=0.0652], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.006 0.009,0.02,0.28,0.33,0.37 0.39,0.43,0.50,0.71), mean=0.231, stddev=0.141], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.06,0.09,0.19,0.53,0.86 1.1,1.3,1.4,2.1), mean=0.328, stddev=0.335], bias-{mean,stddev}=-0.02673,0.04015, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.37e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.22,0.23 0.24,0.26,0.28,0.32,0.34 0.36,0.39,0.43,0.48), mean=0.289, stddev=0.0424], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.37,0.37,0.39 0.40,0.42,0.44,0.47,0.49 0.51,0.53,0.53,0.55), mean=0.445, stddev=0.0371], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.05 0.06,0.06,0.07,0.07), mean=0.0434, stddev=0.00733], oderiv-count=1.12432e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32322.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.24,0.26,0.29,0.33,0.35 0.38,0.42,0.45,0.51), mean=0.294, stddev=0.0478], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.42,0.45 0.46,0.48,0.53,0.58,0.61 0.64,0.69,0.71,0.77), mean=0.535, stddev=0.0613]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000193996, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01789, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-08,2e-06,4e-06,2e-05 0.0007,0.16,0.42,0.60,0.68 0.74,0.80,0.85,1.0), mean=0.391, stddev=0.234], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.37,0.39,0.45 0.53,0.71,0.82,0.91,0.98 1.0,1.1,1.2,1.3), mean=0.799, stddev=0.164], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,4e-07 6e-07,0.15,0.33,0.79,1.4 1.9,2.4,2.6,4.8), mean=0.539, stddev=0.612], bias-{mean,stddev}=0.003557,0.02884, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000193996, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.07492, w_fc-rms=0.03266, w_oc-rms=0.04611, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634199, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.71,0.79,0.82,0.86), mean=0.496, stddev=0.0799], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.0233] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634199, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.44,0.46,0.48 0.49,0.50,0.51,0.55,0.59 0.68,0.78,0.81,0.87), mean=0.529, stddev=0.0661], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.14,0.17 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.024] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0351288, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.89,-0.87,-0.51 -0.28,-0.12,0.001,0.16,0.31 0.57,0.87,0.89,0.93), mean=0.0176, stddev=0.306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.16,0.19,0.23 0.37,0.44,0.57,0.75,1.0 1.0,1.0,1.0,1.0), mean=0.607, stddev=0.22] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634199, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.39,0.39,0.40 0.42,0.43,0.46,0.50,0.50 0.51,0.54,0.58,0.73), mean=0.462, stddev=0.0399], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0204] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00634199, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.66,-0.61,-0.32 -0.14,-0.07,0.0005,0.09,0.21 0.33,0.61,0.69,0.73), mean=0.0115, stddev=0.205], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.45,0.49,0.59 0.79,0.84,0.91,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.883, stddev=0.112] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=9.84467e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000217242, count-zeroing-boundaries=296904
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.290358
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000193996, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04037, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.37,0.41 0.44,0.52,0.87,1.2,1.3 1.3,1.4,1.4,1.4), mean=0.859, stddev=0.33], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0009,0.001,0.003 0.01,0.33,0.54,0.73,0.93 1.2,1.6,1.7,1.9), mean=0.546, stddev=0.354], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-07,2e-07,2e-07 3e-07,4e-07,1e-06,0.62,2.0 2.3,2.6,2.8,3.5), mean=0.403, stddev=0.828], bias-{mean,stddev}=0.013,0.2691, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000193996, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01357, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.22,0.23,0.26 0.28,0.30,0.37,0.43,0.47 0.50,0.54,0.56,0.63), mean=0.37, stddev=0.0802], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.15,0.17,0.29,0.40,0.43 0.45,0.48,0.49,0.51), mean=0.287, stddev=0.115], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-09,6e-08,7e-08,9e-08 1e-07,2e-07,3e-05,0.38,0.76 0.98,1.1,1.2,1.4), mean=0.184, stddev=0.331], bias-{mean,stddev}=0.002005,0.01061, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.5e+05, self-repaired-proportion=0.00498193, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.01,0.02,0.03 0.04,0.06,0.08,0.11,0.12 0.13,0.15,0.16,0.18), mean=0.0826, stddev=0.0308], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.11,0.16,0.22 0.27,0.38,0.52,0.62,0.67 0.70,0.73,0.74,0.85), mean=0.499, stddev=0.146], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.09,0.09,0.10 0.10,0.11,0.13,0.15,0.18 0.22,0.26,0.28,0.34), mean=0.135, stddev=0.0393], oderiv-count=1.13491e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30078.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.01,0.02,0.03 0.04,0.06,0.08,0.11,0.12 0.13,0.15,0.16,0.19), mean=0.0818, stddev=0.0309], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.06,0.07,0.09 0.10,0.11,0.12,0.14,0.16 0.16,0.17,0.18,0.21), mean=0.124, stddev=0.0252]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000193996, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008875, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.30,0.31,0.34,0.38,0.41 0.44,0.46,0.48,0.54), mean=0.348, stddev=0.0444], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.12,0.13,0.14 0.15,0.16,0.19,0.23,0.26 0.28,0.31,0.32,0.38), mean=0.197, stddev=0.0456], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.08,0.10,0.17,0.40,0.64 0.81,0.90,0.95,1.1), mean=0.266, stddev=0.228], bias-{mean,stddev}=-0.0235,0.0203, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.22 0.23,0.24,0.27,0.29,0.31 0.33,0.34,0.34,0.43), mean=0.267, stddev=0.0327], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.40,0.41,0.44,0.46,0.47 0.48,0.49,0.50,0.51), mean=0.437, stddev=0.0272], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0359, stddev=0.00313], oderiv-count=1.0143e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27834.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.22 0.23,0.24,0.27,0.30,0.32 0.33,0.35,0.36,0.45), mean=0.272, stddev=0.035], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.40,0.41,0.43 0.45,0.47,0.51,0.57,0.61 0.64,0.70,0.73,0.99), mean=0.521, stddev=0.0708]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000193996, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01489, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-06,3e-06,8e-06 3e-05,0.0007,0.34,0.53,0.60 0.64,0.69,0.72,0.90), mean=0.293, stddev=0.242], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.31,0.34,0.39 0.48,0.61,0.67,0.75,0.79 0.86,0.96,1.0,1.4), mean=0.666, stddev=0.133], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,3e-07,4e-07 8e-05,0.10,0.25,0.62,1.2 1.6,1.9,2.1,4.9), mean=0.431, stddev=0.525], bias-{mean,stddev}=0.006169,0.03598, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000193996, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04757, w_fc-rms=0.01765, w_oc-rms=0.03775, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639531, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.50,0.52,0.58 0.60,0.69,0.73,0.81), mean=0.507, stddev=0.0534], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0183] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639531, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.45,0.46,0.48 0.49,0.50,0.50,0.55,0.59 0.63,0.68,0.69,0.77), mean=0.523, stddev=0.0477], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0208] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00867967, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.84,-0.76,-0.48 -0.29,-0.13,0.0007,0.15,0.34 0.56,0.74,0.77,0.85), mean=0.0121, stddev=0.281], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.26,0.27,0.39 0.45,0.52,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.712, stddev=0.228] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639531, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.45 0.46,0.47,0.50,0.50,0.52 0.54,0.57,0.59,0.61), mean=0.493, stddev=0.028], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.019] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00639531, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.67,-0.57,-0.44,-0.29 -0.16,-0.07,0.0003,0.08,0.20 0.36,0.46,0.53,0.59), mean=0.0082, stddev=0.176], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.60,0.63,0.74 0.78,0.86,0.92,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.913, stddev=0.0916] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.16931e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000124107, count-zeroing-boundaries=261870
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.290358
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000193996, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03926, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.49,0.53 0.56,0.60,0.87,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.86, stddev=0.249], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.001,0.002 0.003,0.01,0.56,0.82,0.96 1.1,1.3,1.5,1.7), mean=0.49, stddev=0.401], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-07,2e-07,2e-07 2e-07,4e-07,9e-06,1.3,1.8 2.1,2.2,2.4,3.0), mean=0.45, stddev=0.774], bias-{mean,stddev}=0.002772,0.2182, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000193996, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01299, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.27 0.28,0.30,0.35,0.40,0.45 0.49,0.53,0.55,0.61), mean=0.357, stddev=0.0666], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.38,0.41 0.43,0.45,0.46,0.51), mean=0.282, stddev=0.0917], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,8e-08,9e-08,1e-07 2e-07,3e-07,0.003,0.39,0.75 0.91,1.0,1.1,1.2), mean=0.192, stddev=0.308], bias-{mean,stddev}=0.000168,0.006096, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.97e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.0679, stddev=0.027], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.21 0.25,0.35,0.51,0.61,0.65 0.68,0.70,0.72,0.75), mean=0.481, stddev=0.144], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.12,0.14,0.16,0.19 0.21,0.24,0.24,0.27), mean=0.145, stddev=0.0304], oderiv-count=1.04998e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25590.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.05,0.07,0.10,0.11 0.11,0.13,0.13,0.17), mean=0.0712, stddev=0.0278], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.08,0.09,0.11,0.13,0.14 0.14,0.15,0.16,0.18), mean=0.111, stddev=0.0215]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000193996, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008707, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.22 0.27,0.30,0.34,0.39,0.41 0.43,0.45,0.47,0.51), mean=0.338, stddev=0.0613], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.15,0.18,0.23,0.26 0.29,0.31,0.33,0.42), mean=0.193, stddev=0.0465], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.06 0.07,0.08,0.15,0.39,0.67 0.80,0.91,0.94,1.0), mean=0.25, stddev=0.236], bias-{mean,stddev}=-0.01702,0.02522, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.14e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.18,0.20 0.23,0.25,0.28,0.31,0.33 0.34,0.35,0.36,0.44), mean=0.279, stddev=0.0416], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.36,0.38 0.39,0.40,0.43,0.46,0.47 0.48,0.49,0.50,0.55), mean=0.43, stddev=0.0323], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0295, stddev=0.00249], oderiv-count=901760
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23347, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.18,0.22 0.24,0.25,0.29,0.32,0.34 0.35,0.37,0.39,0.53), mean=0.288, stddev=0.0447], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.30,0.38 0.43,0.49,0.55,0.62,0.67 0.71,0.75,0.83,1.1), mean=0.553, stddev=0.102]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000193996, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02117, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.28,0.29,0.31 0.33,0.37,0.51,0.66,0.72 0.77,0.85,0.90,1.1), mean=0.519, stddev=0.149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.68,0.69,0.75 0.78,0.82,0.89,1.1,1.2 1.3,1.4,1.5,2.0), mean=0.948, stddev=0.181], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,2e-06,4e-06,0.0002 0.08,0.12,0.28,0.91,1.9 2.3,2.7,2.8,7.3), mean=0.598, stddev=0.758], bias-{mean,stddev}=0.01496,0.0198, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000193996, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1018, w_fc-rms=0.04803, w_oc-rms=0.0736, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645964, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.57,0.60,0.63 0.65,0.67,0.73,0.78,0.81 0.83,0.85,0.86,0.89), mean=0.727, stddev=0.0615], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.15,0.17,0.19,0.20 0.20,0.20,0.21,0.22), mean=0.166, stddev=0.0246] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645964, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.50,0.57,0.60 0.62,0.65,0.70,0.75,0.79 0.83,0.86,0.88,0.89), mean=0.703, stddev=0.0703], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.12 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.23), mean=0.168, stddev=0.0247] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0330789, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.86,-0.79,-0.63 -0.45,-0.34,0.001,0.32,0.47 0.60,0.78,0.85,0.92), mean=-0.00796, stddev=0.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.18,0.23 0.29,0.36,0.46,0.52,0.55 0.57,0.58,0.60,0.65), mean=0.441, stddev=0.0993] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645964, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.51,0.53 0.56,0.60,0.65,0.68,0.71 0.74,0.76,0.80,0.88), mean=0.643, stddev=0.0618], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0183] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00645964, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.71,-0.63,-0.48 -0.36,-0.25,0.004,0.24,0.35 0.48,0.64,0.67,0.76), mean=-0.00766, stddev=0.291], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.43,0.48 0.55,0.63,0.71,0.76,0.78 0.80,0.81,0.82,0.84), mean=0.685, stddev=0.0917] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.24519e-06, count-zeroing-boundaries=222698
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.290358
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000193996, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09069, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.8,2.6,2.7 2.8,2.8,2.9,3.1), mean=1.97, stddev=0.621], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.92,0.98,1.1 1.1,1.2,1.4,1.6,1.9 2.1,2.2,2.2,2.4), mean=1.43, stddev=0.294], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-07,1e-06,1e-06,1e-06 3e-06,2e-05,0.10,3.2,3.8 4.3,4.9,5.7,6.2), mean=1.2, stddev=1.68], bias-{mean,stddev}=-0.002049,0.6848, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000193996, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04433, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.61,0.63 0.64,0.66,0.70,0.75,0.78 0.82,0.87,0.93,2.1), mean=0.71, stddev=0.0842], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.3,1.3,1.7,2.5,2.6 2.7,2.8,2.8,2.9), mean=1.95, stddev=0.579], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,1e-06,1e-06 2e-06,1e-05,0.04,3.0,4.1 4.5,4.9,5.0,6.2), mean=1.14, stddev=1.68], bias-{mean,stddev}=5.17e-09,0.0247, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0168, stddev=0.0138], oderiv-count=556800
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:59:48 KST 2020, elapsed time 1 seconds
