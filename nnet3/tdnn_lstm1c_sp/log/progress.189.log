# nnet3-info exp/nnet3/tdnn_lstm1c_sp/189.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/188.mdl exp/nnet3/tdnn_lstm1c_sp/189.mdl 
# Started at Thu Jul 30 11:15:47 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/189.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00016526, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02865, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.007,0.01 0.02,0.16,0.50,0.60,0.66 0.69,0.78,0.85,1.1), mean=0.442, stddev=0.225], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.16,0.20,0.55,0.76,1.0 1.3,1.4,1.4,1.5), mean=0.556, stddev=0.342], bias-{mean,stddev}=0.004173,0.05031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.1e+06, self-repaired-proportion=0.144442, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,4e-06,9e-06,2e-05 8e-05,0.0007,0.06,0.08,0.10 0.11,0.13,0.13,0.20), mean=0.0531, stddev=0.0361], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.002,0.004,0.01 0.03,0.10,0.47,0.62,0.70 0.77,0.85,0.88,0.99), mean=0.424, stddev=0.242], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.02 0.05,0.23,0.35,0.45,0.52 0.57,0.66,0.76,1.5), mean=0.338, stddev=0.18], oderiv-count=1.24531e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38695.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,2e-06,5e-06,1e-05 4e-05,0.0008,0.05,0.08,0.10 0.11,0.13,0.15,0.17), mean=0.0505, stddev=0.0361], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,7e-05,9e-05,0.0002 0.0004,0.005,0.08,0.10,0.11 0.12,0.12,0.13,0.13), mean=0.0708, stddev=0.0401]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00016526, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01141, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.36,0.37 0.39,0.41,0.44,0.49,0.51 0.53,0.55,0.59,0.77), mean=0.448, stddev=0.0519], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.007 0.01,0.09,0.27,0.31,0.33 0.35,0.38,0.40,0.67), mean=0.233, stddev=0.116], bias-{mean,stddev}=-0.002508,0.02799, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.25 0.26,0.28,0.30,0.33,0.35 0.37,0.39,0.40,0.55), mean=0.306, stddev=0.0353], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.41 0.42,0.44,0.46,0.48,0.50 0.51,0.52,0.52,0.55), mean=0.459, stddev=0.0288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0462, stddev=0.00907], oderiv-count=1.12301e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37855.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.26,0.27,0.30,0.33,0.35 0.37,0.39,0.40,0.56), mean=0.303, stddev=0.0385], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.43,0.44 0.47,0.48,0.52,0.58,0.61 0.64,0.65,0.69,0.85), mean=0.532, stddev=0.0581]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00016526, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01582, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.0001,0.0005,0.003 0.02,0.17,0.35,0.53,0.62 0.68,0.75,0.79,1.0), mean=0.348, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.32,0.34,0.39 0.44,0.62,0.74,0.81,0.86 0.90,0.95,0.98,1.4), mean=0.705, stddev=0.154], bias-{mean,stddev}=-0.0001488,0.02192, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00016526, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02584, w_fc-rms=0.02919, w_oc-rms=0.03304, count=1.48e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625046, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.44,0.45 0.46,0.47,0.49,0.51,0.54 0.60,0.69,0.72,0.75), mean=0.499, stddev=0.0505], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0149] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625046, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.40,0.41,0.42 0.44,0.46,0.49,0.51,0.55 0.64,0.70,0.73,0.78), mean=0.496, stddev=0.0619], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0152] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00625046, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.84,-0.80,-0.53 -0.35,-0.19,0.003,0.19,0.31 0.42,0.60,0.78,0.86), mean=-0.00678, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.29,0.35 0.43,0.49,0.60,0.76,0.99 1.0,1.0,1.0,1.0), mean=0.632, stddev=0.189] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625046, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.43 0.44,0.45,0.47,0.50,0.50 0.53,0.56,0.57,0.61), mean=0.472, stddev=0.0323], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0166] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00641723, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.80,-0.72,-0.42 -0.27,-0.14,0.001,0.15,0.25 0.36,0.54,0.72,0.87), mean=-0.00684, stddev=0.247], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.30,0.34,0.53 0.69,0.77,0.85,0.92,1.0 1.0,1.0,1.0,1.0), mean=0.827, stddev=0.14] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.367e-06, count-zeroing-boundaries=297000
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0589532
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00016526, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03164, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.20 0.22,0.26,0.46,1.0,1.1 1.1,1.1,1.2,1.2), mean=0.627, stddev=0.358], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.004,0.007,0.01 0.04,0.30,0.45,0.59,0.70 0.87,1.1,1.3,1.5), mean=0.445, stddev=0.249], bias-{mean,stddev}=0.003329,0.2295, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00016526, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01168, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.23,0.25,0.31,0.38,0.41 0.44,0.48,0.49,0.60), mean=0.318, stddev=0.0708], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.09,0.20,0.37,0.40 0.43,0.46,0.47,0.51), mean=0.23, stddev=0.134], bias-{mean,stddev}=0.004076,0.02158, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.39e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.06,0.07,0.10,0.13,0.14 0.15,0.16,0.17,0.22), mean=0.101, stddev=0.0314], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.20,0.22,0.26 0.32,0.38,0.51,0.61,0.66 0.70,0.72,0.74,0.79), mean=0.496, stddev=0.13], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.12,0.13 0.15,0.16,0.18,0.41), mean=0.108, stddev=0.0251], oderiv-count=1.12666e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35336.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.05 0.05,0.07,0.10,0.13,0.14 0.15,0.16,0.17,0.22), mean=0.0981, stddev=0.0323], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.12,0.13,0.15,0.17,0.19 0.20,0.21,0.22,0.24), mean=0.155, stddev=0.0255]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00016526, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00851, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.29,0.31,0.33,0.36,0.38 0.39,0.42,0.43,0.56), mean=0.334, stddev=0.0358], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.15,0.16,0.19,0.22,0.23 0.25,0.27,0.29,0.34), mean=0.191, stddev=0.0337], bias-{mean,stddev}=-0.01213,0.01562, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.56e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.23,0.26,0.29,0.30 0.32,0.33,0.36,0.45), mean=0.263, stddev=0.0333], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.50,0.51,0.51,0.54), mean=0.439, stddev=0.033], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0363, stddev=0.00298], oderiv-count=993472
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32817.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.21 0.22,0.23,0.26,0.29,0.30 0.31,0.34,0.34,0.44), mean=0.259, stddev=0.0349], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.42 0.44,0.45,0.49,0.54,0.56 0.60,0.65,0.69,0.80), mean=0.499, stddev=0.0585]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00016526, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01311, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,8e-07,1e-06,4e-06 1e-05,0.0003,0.28,0.47,0.55 0.59,0.63,0.66,1.1), mean=0.253, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.27,0.33 0.40,0.53,0.61,0.65,0.69 0.74,0.79,0.85,1.4), mean=0.585, stddev=0.123], bias-{mean,stddev}=-0.005012,0.04323, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00016526, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.009469, w_fc-rms=0.009955, w_oc-rms=0.01533, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630575, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.42,0.43,0.44 0.45,0.46,0.50,0.51,0.54 0.59,0.62,0.65,0.72), mean=0.497, stddev=0.0429], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0143] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630575, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.40 0.42,0.44,0.49,0.50,0.50 0.52,0.57,0.58,0.77), mean=0.475, stddev=0.045], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0119] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00836423, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.74,-0.58,-0.38 -0.25,-0.12,-2e-05,0.11,0.24 0.35,0.53,0.64,0.84), mean=-0.00287, stddev=0.219], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.31,0.38,0.50 0.54,0.59,0.67,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.75, stddev=0.201] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630575, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.40,0.42 0.44,0.45,0.50,0.50,0.51 0.54,0.56,0.60,0.65), mean=0.483, stddev=0.0363], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0152] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00630575, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.57,-0.41,-0.29 -0.18,-0.09,0.0005,0.08,0.18 0.26,0.44,0.57,0.74), mean=-0.0012, stddev=0.176], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.54,0.61,0.72 0.79,0.83,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.902, stddev=0.103] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=261915
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0589532
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00016526, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0292, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.33,0.36 0.38,0.40,0.54,0.86,0.91 0.94,0.97,0.99,1.0), mean=0.628, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0005,0.0006,0.001 0.002,0.004,0.46,0.61,0.72 0.79,0.91,0.94,1.0), mean=0.368, stddev=0.294], bias-{mean,stddev}=0.003252,0.1453, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00016526, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01045, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.23,0.27,0.33,0.38 0.42,0.46,0.47,0.49), mean=0.284, stddev=0.0661], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.14,0.21,0.31,0.34 0.35,0.37,0.38,0.42), mean=0.224, stddev=0.0823], bias-{mean,stddev}=0.003375,0.01064, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.08e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.06,0.08,0.09 0.10,0.11,0.12,0.13), mean=0.0646, stddev=0.0217], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.16,0.19,0.22 0.26,0.33,0.47,0.56,0.61 0.64,0.67,0.68,0.74), mean=0.454, stddev=0.127], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.10,0.11,0.13,0.15,0.17 0.20,0.22,0.25,0.28), mean=0.133, stddev=0.0298], oderiv-count=968320
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30298.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.06,0.08,0.09 0.10,0.11,0.12,0.14), mean=0.0653, stddev=0.023], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.08,0.09,0.11,0.12,0.13 0.14,0.14,0.15,0.17), mean=0.107, stddev=0.0177]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00016526, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00793, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.23,0.24 0.25,0.27,0.31,0.35,0.37 0.39,0.40,0.42,0.49), mean=0.31, stddev=0.0459], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.13,0.15,0.17,0.20,0.22 0.25,0.28,0.31,0.36), mean=0.177, stddev=0.0389], bias-{mean,stddev}=-0.011,0.02002, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.36e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.24,0.26,0.28,0.30 0.31,0.33,0.33,0.43), mean=0.261, stddev=0.033], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.37 0.38,0.39,0.42,0.45,0.46 0.48,0.48,0.50,0.52), mean=0.422, stddev=0.0312], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0297, stddev=0.00264], oderiv-count=958400
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27779.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.20 0.21,0.23,0.26,0.29,0.30 0.32,0.33,0.35,0.49), mean=0.261, stddev=0.0375], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.32,0.36,0.40 0.43,0.46,0.51,0.57,0.60 0.63,0.67,0.69,0.94), mean=0.512, stddev=0.0741]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00016526, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0188, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.21,0.26 0.29,0.34,0.42,0.61,0.69 0.74,0.77,0.80,1.3), mean=0.456, stddev=0.148], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.60,0.61 0.63,0.65,0.71,0.99,1.3 1.4,1.4,1.5,1.7), mean=0.82, stddev=0.251], bias-{mean,stddev}=0.02485,0.0259, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00016526, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04657, w_fc-rms=0.0472, w_oc-rms=0.04721, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637253, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.55,0.57 0.59,0.61,0.66,0.70,0.72 0.74,0.76,0.77,0.80), mean=0.658, stddev=0.0519], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.17 0.18,0.18,0.19,0.20,0.21 0.21,0.21,0.22,0.24), mean=0.193, stddev=0.0135] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637253, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.47,0.49,0.50 0.52,0.54,0.59,0.63,0.69 0.74,0.77,0.79,0.86), mean=0.597, stddev=0.0686], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.15,0.15,0.16 0.18,0.19,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.201, stddev=0.0163] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00823428, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.73,-0.68,-0.53 -0.37,-0.23,-0.01,0.21,0.34 0.48,0.63,0.73,0.84), mean=-0.00743, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.24,0.26,0.30 0.35,0.39,0.44,0.49,0.50 0.52,0.54,0.55,0.66), mean=0.435, stddev=0.0644] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637253, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.55,0.55,0.58 0.60,0.62,0.66,0.70,0.71 0.73,0.75,0.76,0.85), mean=0.658, stddev=0.0464], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.22), mean=0.18, stddev=0.0137] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00637253, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.75,-0.69,-0.50 -0.33,-0.22,-0.01,0.20,0.30 0.44,0.64,0.75,0.87), mean=-0.00824, stddev=0.28], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.30,0.35 0.43,0.53,0.62,0.67,0.69 0.70,0.71,0.72,0.74), mean=0.59, stddev=0.102] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222689
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0589532
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00016526, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07387, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.1,1.1 1.1,1.2,1.6,2.1,2.1 2.2,2.2,2.3,2.4), mean=1.63, stddev=0.415], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.73,0.88,0.96 1.0,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.18, stddev=0.155], bias-{mean,stddev}=0.01018,0.3378, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00016526, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0383, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.49,0.50,0.53 0.54,0.56,0.60,0.65,0.68 0.71,0.76,0.81,2.2), mean=0.611, stddev=0.0884], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.1,2.2 2.3,2.4,2.4,2.4), mean=1.71, stddev=0.406], bias-{mean,stddev}=5.156e-09,0.0319, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0138], oderiv-count=609280
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/188.mdl exp/nnet3/tdnn_lstm1c_sp/189.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.56181 tdnn2.affine:6.46392 lstm1.W_all:5.12517 lstm1.lstm_nonlin:0.0922157 lstm1.W_rp:2.07373 tdnn3.affine:4.16954 tdnn4.affine:4.7476 lstm2.W_all:3.53544 lstm2.lstm_nonlin:0.0415745 lstm2.W_rp:1.45239 tdnn5.affine:3.32038 tdnn6.affine:3.83487 lstm3.W_all:4.60134 lstm3.lstm_nonlin:0.0998695 lstm3.W_rp:1.82133 output.affine:4.09424 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.3731 tdnn2.affine:10.2966 lstm1.W_all:18.4208 lstm1.lstm_nonlin:1.16524 lstm1.W_rp:12.2095 tdnn3.affine:7.45487 tdnn4.affine:7.67809 lstm2.W_all:15.3761 lstm2.lstm_nonlin:0.469435 lstm2.W_rp:10.9889 tdnn5.affine:6.65921 tdnn6.affine:7.16124 lstm3.W_all:21.9213 lstm3.lstm_nonlin:1.85621 lstm3.W_rp:27.7013 output.affine:28.3658 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.574539 tdnn2.affine:0.626409 lstm1.W_all:0.27789 lstm1.lstm_nonlin:0.0789913 lstm1.W_rp:0.169768 tdnn3.affine:0.55551 tdnn4.affine:0.615091 lstm2.W_all:0.229471 lstm2.lstm_nonlin:0.0892833 lstm2.W_rp:0.131995 tdnn5.affine:0.496469 tdnn6.affine:0.534597 lstm3.W_all:0.209357 lstm3.lstm_nonlin:0.0536408 lstm3.W_rp:0.0657035 output.affine:0.144062 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:15:48 KST 2020, elapsed time 1 seconds
