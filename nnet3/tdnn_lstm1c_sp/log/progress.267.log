# nnet3-info exp/nnet3/tdnn_lstm1c_sp/267.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/266.mdl exp/nnet3/tdnn_lstm1c_sp/267.mdl 
# Started at Thu Jul 30 11:46:41 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/267.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000239168, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03434, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.02 0.02,0.06,0.60,0.74,0.82 0.93,1.0,1.0,1.3), mean=0.512, stddev=0.302], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.18,0.23,0.66,0.94,1.3 1.5,1.6,1.7,1.7), mean=0.665, stddev=0.413], bias-{mean,stddev}=0.001397,0.06482, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.13e+06, self-repaired-proportion=0.212434, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,9e-06,3e-05,5e-05 9e-05,0.0003,0.06,0.10,0.12 0.13,0.15,0.17,0.26), mean=0.0606, stddev=0.0481], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.006,0.01 0.03,0.06,0.44,0.61,0.72 0.79,0.87,0.89,0.99), mean=0.389, stddev=0.26], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.04,0.10,0.27,0.35,0.41 0.51,0.63,0.71,1.3), mean=0.262, stddev=0.157], oderiv-count=1.15117e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37236.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,5e-06,1e-05,3e-05 7e-05,0.0004,0.06,0.10,0.12 0.14,0.16,0.17,0.27), mean=0.0592, stddev=0.0478], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0001,0.0002,0.0003 0.0006,0.002,0.10,0.13,0.14 0.15,0.16,0.16,0.18), mean=0.0833, stddev=0.0549]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000239168, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01294, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.41 0.43,0.45,0.50,0.56,0.60 0.64,0.68,0.70,0.78), mean=0.506, stddev=0.0693], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.007,0.01 0.01,0.04,0.31,0.36,0.40 0.43,0.47,0.50,0.80), mean=0.256, stddev=0.147], bias-{mean,stddev}=-0.02187,0.03979, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.61e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.28 0.29,0.30,0.34,0.37,0.41 0.43,0.46,0.50,0.56), mean=0.341, stddev=0.0473], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.37,0.38,0.40 0.41,0.42,0.45,0.47,0.49 0.50,0.52,0.53,0.55), mean=0.45, stddev=0.0332], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0398, stddev=0.00717], oderiv-count=1.12848e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36429.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.26,0.28 0.29,0.31,0.34,0.38,0.41 0.44,0.48,0.50,0.62), mean=0.347, stddev=0.0516], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.51,0.51,0.52 0.54,0.56,0.62,0.68,0.72 0.76,0.79,0.82,0.86), mean=0.624, stddev=0.0704]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000239168, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01868, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,4e-06,1e-05,6e-05 0.002,0.17,0.43,0.63,0.73 0.78,0.85,0.90,1.1), mean=0.406, stddev=0.248], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.39,0.41,0.47 0.56,0.75,0.86,0.95,1.0 1.1,1.2,1.2,1.3), mean=0.834, stddev=0.172], bias-{mean,stddev}=0.001403,0.02744, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000239168, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05363, w_fc-rms=0.02866, w_oc-rms=0.04297, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628974, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.68,0.79,0.81,0.85), mean=0.492, stddev=0.0772], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.19,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0235] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628974, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.42,0.43,0.45 0.46,0.47,0.50,0.52,0.57 0.64,0.76,0.78,0.84), mean=0.51, stddev=0.0636], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.18 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0213] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0378043, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.89,-0.84,-0.53 -0.29,-0.14,0.0008,0.17,0.32 0.53,0.84,0.89,0.91), mean=0.0138, stddev=0.301], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.19,0.24 0.35,0.41,0.55,0.77,1.0 1.0,1.0,1.0,1.0), mean=0.588, stddev=0.225] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628974, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.38,0.39 0.41,0.42,0.45,0.50,0.50 0.50,0.53,0.55,0.64), mean=0.453, stddev=0.0408], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.217, stddev=0.0222] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00628974, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.75,-0.65,-0.37 -0.18,-0.09,0.0009,0.11,0.22 0.35,0.67,0.73,0.79), mean=0.0105, stddev=0.224], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.35,0.39,0.55 0.74,0.81,0.88,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.858, stddev=0.131] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.76039e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.86554e-05, count-zeroing-boundaries=298014
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.199449
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000239168, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04095, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.32,0.36 0.39,0.46,0.87,1.2,1.3 1.4,1.4,1.5,1.5), mean=0.854, stddev=0.379], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.002,0.004 0.01,0.30,0.55,0.75,0.90 1.2,1.6,1.8,2.0), mean=0.554, stddev=0.359], bias-{mean,stddev}=0.01227,0.2786, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000239168, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01358, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.21,0.22,0.24 0.26,0.30,0.36,0.44,0.49 0.52,0.54,0.57,0.69), mean=0.369, stddev=0.085], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.12 0.13,0.15,0.29,0.41,0.44 0.46,0.48,0.50,0.54), mean=0.282, stddev=0.127], bias-{mean,stddev}=0.003821,0.01369, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.38e+05, self-repaired-proportion=0.00379777, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.03,0.04,0.05 0.06,0.08,0.11,0.14,0.16 0.18,0.19,0.21,0.25), mean=0.113, stddev=0.037], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.17,0.19,0.25 0.30,0.39,0.51,0.61,0.65 0.68,0.70,0.71,0.78), mean=0.491, stddev=0.131], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.08,0.09,0.11,0.13 0.14,0.17,0.18,0.27), mean=0.0988, stddev=0.0248], oderiv-count=1.17594e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34009, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.03,0.04,0.05 0.07,0.08,0.11,0.14,0.16 0.18,0.20,0.21,0.25), mean=0.112, stddev=0.037], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.11,0.12,0.14 0.14,0.15,0.17,0.20,0.22 0.23,0.24,0.26,0.32), mean=0.176, stddev=0.031]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000239168, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009501, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.31 0.32,0.33,0.36,0.40,0.44 0.46,0.49,0.49,0.59), mean=0.372, stddev=0.047], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.13,0.14,0.15 0.16,0.17,0.21,0.25,0.27 0.30,0.32,0.34,0.38), mean=0.212, stddev=0.0458], bias-{mean,stddev}=-0.02215,0.01957, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.25 0.26,0.27,0.31,0.34,0.36 0.37,0.38,0.39,0.50), mean=0.309, stddev=0.0375], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.37,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.50,0.51), mean=0.435, stddev=0.0285], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0324, stddev=0.0026], oderiv-count=1.01034e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31588.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.26 0.27,0.28,0.31,0.34,0.36 0.38,0.39,0.39,0.51), mean=0.313, stddev=0.0382], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.49,0.49,0.51 0.52,0.54,0.59,0.65,0.68 0.72,0.76,0.84,1.1), mean=0.597, stddev=0.0714]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000239168, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01537, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,9e-07,1e-06,4e-06 2e-05,0.0003,0.35,0.55,0.63 0.67,0.72,0.76,0.92), mean=0.3, stddev=0.252], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.33,0.35,0.39 0.49,0.63,0.70,0.77,0.81 0.87,0.96,1.0,1.4), mean=0.688, stddev=0.134], bias-{mean,stddev}=0.002716,0.04129, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000239168, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02831, w_fc-rms=0.01358, w_oc-rms=0.03272, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634209, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.44 0.45,0.46,0.50,0.52,0.57 0.61,0.65,0.70,0.80), mean=0.502, stddev=0.0546], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0185] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634209, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.44 0.46,0.48,0.50,0.52,0.55 0.58,0.63,0.64,0.74), mean=0.502, stddev=0.0425], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0177] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00709631, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.81,-0.68,-0.47 -0.29,-0.14,8e-05,0.16,0.33 0.53,0.75,0.77,0.86), mean=0.0113, stddev=0.276], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.29,0.39 0.45,0.50,0.60,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.701, stddev=0.236] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634209, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.42 0.43,0.45,0.50,0.50,0.52 0.54,0.56,0.58,0.71), mean=0.484, stddev=0.0363], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.02] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00634209, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.54,-0.43,-0.31 -0.18,-0.09,-6e-05,0.10,0.22 0.38,0.52,0.55,0.66), mean=0.00935, stddev=0.19], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.55,0.60,0.70 0.76,0.83,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.898, stddev=0.105] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.28249e-05, count-zeroing-boundaries=262870
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.199449
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000239168, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03951, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.44,0.48,0.53 0.56,0.59,0.86,1.1,1.2 1.3,1.3,1.3,1.4), mean=0.863, stddev=0.259], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0007,0.0009,0.001 0.002,0.007,0.59,0.84,0.96 1.1,1.3,1.5,1.6), mean=0.494, stddev=0.403], bias-{mean,stddev}=0.000826,0.2187, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000239168, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01303, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.26 0.27,0.30,0.34,0.41,0.46 0.50,0.55,0.56,0.60), mean=0.356, stddev=0.0736], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.38,0.42 0.44,0.45,0.46,0.51), mean=0.281, stddev=0.095], bias-{mean,stddev}=0.001243,0.007087, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.87e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.06,0.09,0.12,0.13 0.14,0.15,0.17,0.20), mean=0.0876, stddev=0.0326], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.16,0.18,0.21 0.27,0.34,0.48,0.57,0.62 0.65,0.68,0.69,0.73), mean=0.459, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.12,0.13 0.15,0.17,0.17,0.21), mean=0.107, stddev=0.0213], oderiv-count=963264
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29167.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.05,0.06,0.09,0.12,0.13 0.14,0.16,0.17,0.22), mean=0.0891, stddev=0.0324], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.10 0.11,0.12,0.15,0.17,0.18 0.19,0.20,0.21,0.23), mean=0.146, stddev=0.0266]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000239168, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009379, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.21,0.26 0.29,0.32,0.37,0.42,0.44 0.47,0.48,0.50,0.55), mean=0.365, stddev=0.0624], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.16,0.17,0.20,0.24,0.28 0.31,0.34,0.37,0.46), mean=0.208, stddev=0.0505], bias-{mean,stddev}=-0.02105,0.02373, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.21,0.24 0.26,0.28,0.32,0.35,0.36 0.38,0.40,0.41,0.50), mean=0.316, stddev=0.0444], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.36,0.37 0.38,0.40,0.42,0.44,0.46 0.46,0.48,0.49,0.52), mean=0.42, stddev=0.0292], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0266, stddev=0.00208], oderiv-count=1.02416e+06
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26746.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.23,0.24 0.26,0.28,0.32,0.35,0.37 0.38,0.40,0.42,0.57), mean=0.32, stddev=0.0442], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.35,0.38,0.45 0.52,0.56,0.63,0.71,0.75 0.79,0.83,0.85,1.2), mean=0.632, stddev=0.101]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000239168, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02217, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.29,0.30,0.32 0.35,0.39,0.52,0.69,0.79 0.83,0.87,0.90,1.4), mean=0.542, stddev=0.159], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.65,0.67,0.74 0.78,0.81,0.89,1.1,1.4 1.5,1.7,1.8,2.2), mean=0.981, stddev=0.245], bias-{mean,stddev}=0.01965,0.02456, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000239168, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.09238, w_fc-rms=0.0505, w_oc-rms=0.06228, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640524, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.55,0.56,0.60 0.62,0.65,0.70,0.75,0.78 0.80,0.82,0.83,0.87), mean=0.698, stddev=0.0613], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.15,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.175, stddev=0.0212] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640524, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.50,0.53,0.56 0.58,0.61,0.67,0.72,0.76 0.80,0.84,0.85,0.89), mean=0.668, stddev=0.0716], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.13 0.15,0.16,0.18,0.20,0.20 0.20,0.21,0.21,0.22), mean=0.178, stddev=0.0222] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0272023, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.80,-0.61 -0.43,-0.30,-0.003,0.28,0.41 0.55,0.71,0.80,0.91), mean=-0.00901, stddev=0.345], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.24 0.29,0.36,0.42,0.47,0.49 0.51,0.53,0.53,0.56), mean=0.408, stddev=0.0777] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640524, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.49,0.52,0.54 0.56,0.59,0.62,0.66,0.69 0.71,0.74,0.77,0.83), mean=0.624, stddev=0.052], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.15,0.17,0.18,0.19,0.20 0.20,0.20,0.21,0.21), mean=0.18, stddev=0.0166] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00640524, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.73,-0.69,-0.52 -0.37,-0.25,-0.01,0.22,0.34 0.49,0.64,0.69,0.83), mean=-0.0087, stddev=0.294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.34,0.36,0.42 0.49,0.57,0.66,0.70,0.72 0.75,0.77,0.77,0.79), mean=0.633, stddev=0.0943] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.47257e-06, count-zeroing-boundaries=223585
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.199449
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000239168, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08546, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.3,1.7,2.5,2.5 2.6,2.7,2.7,2.9), mean=1.86, stddev=0.57], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.97,1.0,1.1 1.1,1.2,1.3,1.5,1.7 1.9,2.0,2.1,2.2), mean=1.36, stddev=0.245], bias-{mean,stddev}=-0.03078,0.5106, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000239168, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04416, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.62 0.64,0.66,0.70,0.75,0.78 0.81,0.86,0.93,2.3), mean=0.706, stddev=0.0894], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.7,2.7,2.8,2.9), mean=1.95, stddev=0.55], bias-{mean,stddev}=7.054e-09,0.02995, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=591680
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/266.mdl exp/nnet3/tdnn_lstm1c_sp/267.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.15932 tdnn2.affine:5.10895 lstm1.W_all:4.1187 lstm1.lstm_nonlin:0.0873644 lstm1.W_rp:1.62421 tdnn3.affine:3.4 tdnn4.affine:3.83982 lstm2.W_all:2.90514 lstm2.lstm_nonlin:0.0490638 lstm2.W_rp:1.16069 tdnn5.affine:2.83924 tdnn6.affine:3.18886 lstm3.W_all:3.4057 lstm3.lstm_nonlin:0.0991759 lstm3.W_rp:1.4669 output.affine:3.45152 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.6419 tdnn2.affine:11.7026 lstm1.W_all:21.7514 lstm1.lstm_nonlin:1.69789 lstm1.W_rp:15.7135 tdnn3.affine:8.65203 tdnn4.affine:8.58388 lstm2.W_all:17.9686 lstm2.lstm_nonlin:1.03405 lstm2.W_rp:14.9489 tdnn5.affine:8.29885 tdnn6.affine:8.47869 lstm3.W_all:25.8141 lstm3.lstm_nonlin:2.78926 lstm3.W_rp:32.486 output.affine:32.687 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.377862 tdnn2.affine:0.437553 lstm1.W_all:0.189254 lstm1.lstm_nonlin:0.0518914 lstm1.W_rp:0.10328 tdnn3.affine:0.392962 tdnn4.affine:0.445992 lstm2.W_all:0.161462 lstm2.lstm_nonlin:0.0482885 lstm2.W_rp:0.0775956 tdnn5.affine:0.34125 tdnn6.affine:0.374149 lstm3.W_all:0.131876 lstm3.lstm_nonlin:0.035915 lstm3.W_rp:0.0453561 output.affine:0.105682 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:46:42 KST 2020, elapsed time 1 seconds
