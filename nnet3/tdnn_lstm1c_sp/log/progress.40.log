# nnet3-info exp/nnet3/tdnn_lstm1c_sp/40.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/39.mdl exp/nnet3/tdnn_lstm1c_sp/40.mdl 
# Started at Thu Jul 30 10:16:57 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/40.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000265095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.05,0.41,0.55,0.64,0.70 0.77,0.82,0.92,1.1), mean=0.495, stddev=0.223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.16 0.18,0.21,0.61,0.83,1.2 1.5,1.6,1.6,1.7), mean=0.606, stddev=0.379], bias-{mean,stddev}=-0.001065,0.05758, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.129261, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,4e-06,8e-06,6e-05 0.0002,0.008,0.07,0.09,0.10 0.11,0.13,0.15,0.16), mean=0.0599, stddev=0.0371], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0009,0.004,0.02 0.05,0.17,0.48,0.60,0.70 0.77,0.86,0.89,0.95), mean=0.428, stddev=0.231], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.10,0.26,0.34,0.42,0.48 0.54,0.61,0.64,1.0), mean=0.328, stddev=0.139], oderiv-count=1.15584e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34208, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,1e-06,3e-06,1e-05 0.0001,0.009,0.06,0.08,0.10 0.12,0.13,0.15,0.22), mean=0.055, stddev=0.0368], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,6e-05,9e-05,0.0003 0.0009,0.03,0.09,0.11,0.12 0.12,0.13,0.13,0.18), mean=0.0798, stddev=0.0408]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000265095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01298, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.42 0.44,0.46,0.51,0.55,0.58 0.60,0.62,0.66,0.88), mean=0.509, stddev=0.0571], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.009,0.01 0.03,0.23,0.31,0.35,0.37 0.39,0.42,0.46,0.73), mean=0.272, stddev=0.117], bias-{mean,stddev}=0.0001748,0.02865, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.29,0.29,0.31 0.32,0.33,0.36,0.39,0.41 0.43,0.45,0.48,0.62), mean=0.365, stddev=0.0387], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.40,0.41 0.42,0.43,0.46,0.49,0.50 0.51,0.52,0.53,0.56), mean=0.461, stddev=0.0295], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.04, stddev=0.00786], oderiv-count=1.21363e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33433.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.29,0.30 0.31,0.33,0.35,0.39,0.41 0.43,0.45,0.47,0.65), mean=0.36, stddev=0.0441], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.50,0.50,0.54 0.55,0.57,0.63,0.69,0.72 0.74,0.78,0.80,1.0), mean=0.632, stddev=0.0662]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000265095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01769, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.08 0.14,0.23,0.39,0.58,0.68 0.76,0.84,0.90,1.1), mean=0.402, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.39,0.44 0.51,0.70,0.83,0.91,0.95 0.99,1.0,1.1,1.5), mean=0.79, stddev=0.164], bias-{mean,stddev}=-0.001716,0.02336, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000265095, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02738, w_fc-rms=0.04228, w_oc-rms=0.05134, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00609647, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.42,0.44 0.45,0.46,0.49,0.53,0.57 0.64,0.66,0.68,0.74), mean=0.501, stddev=0.0548], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0145] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00609647, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.37,0.40 0.41,0.43,0.47,0.53,0.63 0.69,0.75,0.78,0.86), mean=0.494, stddev=0.0903], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.16,0.19 0.21,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0211] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0100474, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.81,-0.79,-0.62 -0.41,-0.23,0.006,0.25,0.36 0.62,0.74,0.77,0.85), mean=0.00238, stddev=0.33], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.25,0.29,0.34 0.39,0.45,0.58,0.70,0.79 0.92,0.98,0.98,1.0), mean=0.583, stddev=0.159] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00609647, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.39,0.41 0.43,0.44,0.47,0.51,0.53 0.55,0.58,0.60,0.69), mean=0.475, stddev=0.0435], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0168] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0151442, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.96,-0.86,-0.81,-0.60 -0.34,-0.20,0.005,0.20,0.31 0.58,0.74,0.79,0.88), mean=-0.00177, stddev=0.312], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.21,0.24,0.38 0.52,0.72,0.83,0.88,0.91 0.95,0.99,0.99,1.0), mean=0.775, stddev=0.165] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=298353
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000265095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03208, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.33,0.35 0.37,0.41,0.64,0.97,1.0 1.1,1.1,1.2,1.2), mean=0.681, stddev=0.268], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.13 0.25,0.35,0.48,0.61,0.72 0.78,0.90,1.0,1.1), mean=0.482, stddev=0.187], bias-{mean,stddev}=-0.001931,0.04372, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000265095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01325, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.24,0.25 0.27,0.30,0.36,0.42,0.46 0.50,0.54,0.55,0.61), mean=0.362, stddev=0.074], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.14,0.16,0.25,0.40,0.44 0.47,0.50,0.51,0.55), mean=0.278, stddev=0.117], bias-{mean,stddev}=-0.003436,0.0181, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.81e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.07,0.07 0.09,0.11,0.15,0.19,0.21 0.23,0.25,0.25,0.31), mean=0.15, stddev=0.0449], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.21,0.23,0.27 0.32,0.38,0.49,0.58,0.62 0.66,0.69,0.71,0.77), mean=0.481, stddev=0.118], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.06,0.06,0.07,0.08 0.09,0.10,0.10,0.15), mean=0.0662, stddev=0.0124], oderiv-count=977280
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31111.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.07 0.09,0.10,0.14,0.18,0.20 0.22,0.24,0.27,0.29), mean=0.143, stddev=0.0466], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.17,0.18 0.19,0.20,0.23,0.26,0.28 0.30,0.32,0.33,0.35), mean=0.234, stddev=0.0366]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000265095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009686, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.32 0.34,0.35,0.38,0.41,0.43 0.44,0.46,0.49,0.57), mean=0.381, stddev=0.0385], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.16,0.17 0.18,0.19,0.21,0.25,0.26 0.28,0.30,0.31,0.36), mean=0.218, stddev=0.0341], bias-{mean,stddev}=-0.00897,0.01699, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.54e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.26,0.27,0.31,0.34,0.36 0.38,0.40,0.41,0.47), mean=0.311, stddev=0.0408], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.39 0.40,0.42,0.44,0.47,0.49 0.50,0.51,0.51,0.53), mean=0.444, stddev=0.0322], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.029, stddev=0.00262], oderiv-count=1.11539e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28789, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.24 0.25,0.27,0.30,0.34,0.36 0.38,0.41,0.42,0.48), mean=0.307, stddev=0.044], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.45,0.46,0.49 0.51,0.53,0.58,0.64,0.68 0.70,0.74,0.76,0.96), mean=0.586, stddev=0.0672]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000265095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01373, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.03,0.08,0.27,0.48,0.56 0.62,0.68,0.72,1.1), mean=0.288, stddev=0.199], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.28,0.31 0.37,0.54,0.64,0.71,0.75 0.78,0.84,0.88,0.92), mean=0.611, stddev=0.137], bias-{mean,stddev}=-0.002624,0.02363, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000265095, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01993, w_fc-rms=0.02495, w_oc-rms=0.02655, count=1.33e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614764, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.43,0.45 0.45,0.47,0.49,0.52,0.54 0.57,0.60,0.61,0.64), mean=0.494, stddev=0.0366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0155] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614764, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.40,0.41 0.42,0.44,0.49,0.51,0.53 0.57,0.65,0.66,0.75), mean=0.484, stddev=0.053], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.238, stddev=0.0134] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00989911, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.68,-0.58,-0.45 -0.31,-0.17,0.001,0.19,0.33 0.48,0.58,0.68,0.75), mean=0.0031, stddev=0.26], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.42,0.46,0.50 0.53,0.57,0.66,0.88,0.97 0.99,0.99,1.0,1.0), mean=0.702, stddev=0.16] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614764, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.44,0.46,0.49,0.51,0.53 0.55,0.57,0.59,0.64), mean=0.485, stddev=0.0353], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0158] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00614764, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.71,-0.54,-0.41 -0.29,-0.16,0.004,0.16,0.30 0.44,0.55,0.68,0.81), mean=0.00566, stddev=0.244], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.42,0.48,0.68 0.74,0.81,0.88,0.94,0.98 0.99,1.0,1.0,1.0), mean=0.861, stddev=0.109] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=263160
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000265095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02886, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.43,0.45 0.46,0.49,0.60,0.79,0.85 0.89,0.94,0.96,1.0), mean=0.641, stddev=0.151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.06,0.14,0.43,0.61,0.70 0.77,0.88,0.93,1.1), mean=0.401, stddev=0.236], bias-{mean,stddev}=0.002907,0.09268, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000265095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01243, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.22 0.24,0.27,0.31,0.40,0.45 0.53,0.59,0.62,0.67), mean=0.335, stddev=0.0893], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.18 0.19,0.21,0.26,0.34,0.37 0.39,0.42,0.43,0.50), mean=0.275, stddev=0.0698], bias-{mean,stddev}=0.0005194,0.01933, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.61e+05, self-repaired-proportion=0.0013917, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.05 0.06,0.07,0.10,0.14,0.15 0.17,0.18,0.19,0.23), mean=0.103, stddev=0.0384], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.18 0.25,0.30,0.42,0.54,0.59 0.62,0.65,0.67,0.71), mean=0.42, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.06,0.06,0.07,0.09,0.10 0.11,0.13,0.14,0.16), mean=0.0781, stddev=0.0176], oderiv-count=948480
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26466.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.04 0.05,0.07,0.10,0.14,0.15 0.17,0.18,0.20,0.23), mean=0.102, stddev=0.0392], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.12 0.14,0.15,0.18,0.21,0.22 0.24,0.26,0.26,0.29), mean=0.18, stddev=0.0377]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000265095, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009459, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.29,0.30 0.31,0.33,0.36,0.41,0.44 0.46,0.49,0.52,0.61), mean=0.37, stddev=0.0508], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.13,0.15 0.16,0.17,0.20,0.24,0.27 0.30,0.34,0.37,0.45), mean=0.21, stddev=0.0492], bias-{mean,stddev}=-0.01092,0.01498, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.23e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.23,0.24 0.26,0.28,0.32,0.34,0.36 0.38,0.40,0.41,0.55), mean=0.315, stddev=0.0413], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.37 0.38,0.39,0.42,0.45,0.47 0.48,0.49,0.50,0.54), mean=0.421, stddev=0.0342], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.025, stddev=0.00252], oderiv-count=996160
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24144.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.22,0.24 0.26,0.28,0.31,0.35,0.38 0.39,0.41,0.43,0.64), mean=0.315, stddev=0.0487], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.47,0.49 0.51,0.54,0.60,0.68,0.71 0.75,0.80,0.84,1.1), mean=0.609, stddev=0.084]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000265095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01941, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.23 0.29,0.34,0.43,0.61,0.74 0.79,0.83,0.87,1.6), mean=0.466, stddev=0.167], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.61,0.62,0.63 0.66,0.68,0.75,1.1,1.3 1.4,1.4,1.5,1.7), mean=0.852, stddev=0.242], bias-{mean,stddev}=0.008672,0.03065, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000265095, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03284, w_fc-rms=0.04341, w_oc-rms=0.05645, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620938, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.47 0.48,0.51,0.58,0.63,0.65 0.67,0.69,0.70,0.76), mean=0.574, stddev=0.063], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.19,0.20,0.21,0.22,0.22 0.22,0.23,0.23,0.23), mean=0.206, stddev=0.0121] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620938, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.48 0.49,0.52,0.59,0.63,0.66 0.68,0.72,0.74,0.86), mean=0.583, stddev=0.0643], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.17,0.17,0.18 0.19,0.19,0.21,0.22,0.22 0.23,0.23,0.23,0.24), mean=0.206, stddev=0.0153] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0080367, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.73,-0.53 -0.32,-0.20,-0.008,0.20,0.34 0.50,0.68,0.75,0.86), mean=0.00173, stddev=0.292], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.25,0.27,0.31 0.36,0.40,0.45,0.50,0.52 0.54,0.57,0.58,0.63), mean=0.448, stddev=0.068] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620938, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.53,0.54,0.55 0.58,0.60,0.64,0.69,0.71 0.72,0.75,0.76,0.87), mean=0.643, stddev=0.0511], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.15,0.16,0.17 0.17,0.18,0.19,0.20,0.20 0.21,0.21,0.21,0.22), mean=0.188, stddev=0.0135] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0161514, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.97,-0.85,-0.75,-0.52 -0.30,-0.18,0.006,0.19,0.32 0.53,0.68,0.77,0.92), mean=0.00477, stddev=0.291], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.21,0.30,0.41 0.49,0.58,0.65,0.69,0.71 0.73,0.74,0.75,0.79), mean=0.623, stddev=0.103] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223806
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000265095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06662, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.5,1.7,1.8 1.8,1.9,1.9,2.0), mean=1.5, stddev=0.215], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.65,0.71,0.79 0.84,0.92,1.1,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.06, stddev=0.167], bias-{mean,stddev}=0.003194,0.09686, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000265095, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04094, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.51,0.53,0.55 0.57,0.59,0.64,0.70,0.74 0.78,0.83,0.88,2.3), mean=0.653, stddev=0.0999], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.6,1.6,1.9,2.1,2.2 2.2,2.3,2.4,2.6), mean=1.86, stddev=0.234], bias-{mean,stddev}=4.341e-09,0.03066, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=632320
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/39.mdl exp/nnet3/tdnn_lstm1c_sp/40.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.12493 tdnn2.affine:9.31117 lstm1.W_all:8.02199 lstm1.lstm_nonlin:0.164059 lstm1.W_rp:3.25043 tdnn3.affine:5.61151 tdnn4.affine:6.6748 lstm2.W_all:5.32987 lstm2.lstm_nonlin:0.0890975 lstm2.W_rp:2.24297 tdnn5.affine:4.68176 tdnn6.affine:5.71146 lstm3.W_all:7.02108 lstm3.lstm_nonlin:0.167435 lstm3.W_rp:2.8273 output.affine:6.24014 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.4461 tdnn2.affine:11.7082 lstm1.W_all:20.6004 lstm1.lstm_nonlin:1.64014 lstm1.W_rp:11.8178 tdnn3.affine:8.4461 tdnn4.affine:8.7353 lstm2.W_all:15.9999 lstm2.lstm_nonlin:0.947075 lstm2.W_rp:10.7163 tdnn5.affine:7.92818 tdnn6.affine:8.53003 lstm3.W_all:22.6157 lstm3.lstm_nonlin:1.78821 lstm3.W_rp:24.5451 output.affine:30.3139 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.737516 tdnn2.affine:0.791192 lstm1.W_all:0.389353 lstm1.lstm_nonlin:0.0988842 lstm1.W_rp:0.27597 tdnn3.affine:0.661914 tdnn4.affine:0.761941 lstm2.W_all:0.333278 lstm2.lstm_nonlin:0.0913443 lstm2.W_rp:0.209533 tdnn5.affine:0.591167 tdnn6.affine:0.669754 lstm3.W_all:0.31076 lstm3.lstm_nonlin:0.0934796 lstm3.W_rp:0.115148 output.affine:0.206045 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:16:57 KST 2020, elapsed time 0 seconds
