# nnet3-info exp/nnet3/tdnn_lstm1c_sp/334.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/333.mdl exp/nnet3/tdnn_lstm1c_sp/334.mdl 
# Started at Thu Jul 30 12:13:20 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/334.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000156361, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03192, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.008 0.01,0.02,0.56,0.70,0.79 0.87,0.91,0.97,1.2), mean=0.465, stddev=0.299], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.22,0.64,0.90,1.2 1.4,1.4,1.5,1.5), mean=0.627, stddev=0.369], bias-{mean,stddev}=-0.003519,0.06272, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.21e+06, self-repaired-proportion=0.206402, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,2e-05,3e-05,5e-05 7e-05,0.0002,0.05,0.09,0.11 0.12,0.14,0.17,0.19), mean=0.0498, stddev=0.0453], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.008,0.02,0.03 0.04,0.07,0.40,0.59,0.71 0.80,0.88,0.93,0.99), mean=0.365, stddev=0.264], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.009,0.01 0.02,0.04,0.30,0.41,0.50 0.59,0.67,0.77,1.5), mean=0.284, stddev=0.197], oderiv-count=1.21709e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31426.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,5e-06,1e-05,3e-05 9e-05,0.0003,0.05,0.08,0.11 0.12,0.15,0.18,0.21), mean=0.0463, stddev=0.0443], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,7e-05,0.0001,0.0002 0.0005,0.001,0.08,0.11,0.12 0.13,0.14,0.15,0.16), mean=0.0652, stddev=0.0489]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000156361, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01177, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.35,0.36 0.39,0.40,0.45,0.51,0.54 0.59,0.63,0.65,0.74), mean=0.46, stddev=0.0665], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.006,0.01,0.28,0.34,0.37 0.40,0.44,0.48,0.72), mean=0.226, stddev=0.145], bias-{mean,stddev}=-0.03246,0.03919, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.88e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.22,0.24,0.27,0.30,0.33 0.35,0.38,0.40,0.47), mean=0.275, stddev=0.0429], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.37,0.38 0.40,0.41,0.44,0.47,0.49 0.50,0.52,0.52,0.57), mean=0.444, stddev=0.0365], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0463, stddev=0.00828], oderiv-count=1.08317e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30726, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.22,0.24,0.27,0.31,0.33 0.35,0.39,0.41,0.50), mean=0.276, stddev=0.047], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.39,0.41 0.43,0.45,0.50,0.55,0.58 0.62,0.65,0.68,0.72), mean=0.503, stddev=0.0611]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000156361, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01766, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,9e-07,2e-06,1e-05 0.0005,0.16,0.41,0.59,0.67 0.73,0.79,0.84,1.0), mean=0.386, stddev=0.232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.37,0.42 0.51,0.70,0.81,0.90,0.96 1.0,1.1,1.2,1.3), mean=0.788, stddev=0.167], bias-{mean,stddev}=0.003455,0.02869, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000156361, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.09085, w_fc-rms=0.02976, w_oc-rms=0.04847, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637285, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.42,0.43 0.44,0.46,0.48,0.50,0.54 0.71,0.78,0.81,0.86), mean=0.497, stddev=0.0787], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0224] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637285, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.46,0.46,0.48 0.49,0.50,0.50,0.54,0.59 0.68,0.77,0.81,0.86), mean=0.527, stddev=0.0641], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0229] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0230101, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.88,-0.86,-0.49 -0.26,-0.12,0.0009,0.16,0.30 0.59,0.86,0.88,0.91), mean=0.0182, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.21,0.25 0.38,0.44,0.58,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.61, stddev=0.218] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637285, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.39,0.39,0.40 0.42,0.43,0.46,0.50,0.50 0.51,0.56,0.58,0.73), mean=0.463, stddev=0.0406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0201] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00637285, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.70,-0.65,-0.31 -0.16,-0.08,0.001,0.09,0.20 0.36,0.62,0.69,0.77), mean=0.0119, stddev=0.216], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.45,0.56 0.77,0.83,0.90,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.872, stddev=0.122] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=9.09914e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000153447, count-zeroing-boundaries=296518
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.249587
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000156361, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04009, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.40,0.44 0.48,0.55,0.87,1.2,1.2 1.3,1.3,1.4,1.4), mean=0.862, stddev=0.304], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0008,0.001,0.002 0.009,0.34,0.54,0.72,0.93 1.3,1.5,1.6,1.9), mean=0.544, stddev=0.349], bias-{mean,stddev}=0.01245,0.2636, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000156361, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01312, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.21,0.24,0.26 0.28,0.30,0.35,0.42,0.45 0.47,0.51,0.52,0.58), mean=0.359, stddev=0.0716], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.17,0.29,0.39,0.41 0.43,0.45,0.47,0.50), mean=0.281, stddev=0.104], bias-{mean,stddev}=0.001651,0.008636, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.00453297, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.01,0.02,0.03 0.03,0.05,0.08,0.10,0.11 0.13,0.14,0.15,0.18), mean=0.0782, stddev=0.0307], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.11,0.15,0.20 0.25,0.36,0.51,0.61,0.65 0.68,0.72,0.73,0.83), mean=0.479, stddev=0.146], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.09,0.09,0.10 0.10,0.11,0.13,0.16,0.19 0.23,0.26,0.27,0.34), mean=0.138, stddev=0.0409], oderiv-count=1.17875e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28623.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.01,0.02,0.02 0.04,0.05,0.08,0.10,0.11 0.13,0.14,0.15,0.18), mean=0.0767, stddev=0.0306], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.05,0.07,0.07 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.18,0.20), mean=0.119, stddev=0.0255]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000156361, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008572, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.27,0.28 0.29,0.30,0.33,0.37,0.39 0.41,0.44,0.45,0.50), mean=0.336, stddev=0.0412], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.12,0.13,0.14 0.15,0.16,0.18,0.22,0.25 0.27,0.29,0.31,0.37), mean=0.191, stddev=0.0433], bias-{mean,stddev}=-0.02602,0.02013, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.79e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.23,0.26,0.28,0.30 0.31,0.32,0.34,0.36), mean=0.257, stddev=0.0304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.36,0.37,0.38 0.39,0.40,0.43,0.45,0.46 0.48,0.48,0.49,0.50), mean=0.428, stddev=0.0282], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0359, stddev=0.00288], oderiv-count=1.07277e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26521.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.22,0.23,0.26,0.29,0.30 0.31,0.33,0.34,0.41), mean=0.259, stddev=0.0327], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.38,0.39,0.41 0.43,0.45,0.49,0.55,0.58 0.60,0.65,0.69,0.90), mean=0.498, stddev=0.0659]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000156361, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01457, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,5e-06,1e-05 5e-05,0.001,0.33,0.52,0.58 0.63,0.68,0.70,0.94), mean=0.287, stddev=0.236], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.30,0.36 0.45,0.60,0.66,0.73,0.78 0.82,0.91,0.99,1.3), mean=0.651, stddev=0.133], bias-{mean,stddev}=0.006482,0.03425, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000156361, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05879, w_fc-rms=0.01748, w_oc-rms=0.04057, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064282, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.45,0.46 0.47,0.48,0.50,0.51,0.57 0.61,0.69,0.72,0.79), mean=0.507, stddev=0.0511], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0175] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064282, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.47,0.48 0.49,0.50,0.50,0.54,0.58 0.62,0.68,0.69,0.75), mean=0.523, stddev=0.0461], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0199] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0064282, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.81,-0.76,-0.44 -0.26,-0.10,0.0005,0.13,0.33 0.56,0.69,0.75,0.82), mean=0.0115, stddev=0.269], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.32,0.40 0.46,0.53,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.717, stddev=0.222] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064282, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.43,0.45 0.46,0.47,0.50,0.50,0.51 0.53,0.57,0.58,0.68), mean=0.491, stddev=0.0274], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0188] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0064282, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.70,-0.59,-0.49,-0.29 -0.15,-0.07,0.0004,0.09,0.19 0.36,0.46,0.54,0.61), mean=0.00805, stddev=0.183], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.58,0.60,0.71 0.77,0.84,0.92,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.905, stddev=0.0992] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.15418e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=5.92773e-05, count-zeroing-boundaries=261483
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.249587
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000156361, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03866, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.50,0.53 0.56,0.61,0.85,1.1,1.1 1.2,1.2,1.3,1.3), mean=0.849, stddev=0.236], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.002,0.002 0.004,0.01,0.56,0.82,0.96 1.1,1.3,1.4,1.6), mean=0.485, stddev=0.392], bias-{mean,stddev}=0.001046,0.2121, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000156361, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01261, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.26 0.28,0.30,0.34,0.39,0.44 0.48,0.50,0.52,0.57), mean=0.346, stddev=0.0632], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.16 0.17,0.19,0.26,0.37,0.40 0.42,0.43,0.44,0.48), mean=0.274, stddev=0.0871], bias-{mean,stddev}=0.0007846,0.005946, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.41e+05, self-repaired-proportion=1.21714e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.02 0.03,0.04,0.06,0.09,0.10 0.11,0.12,0.12,0.16), mean=0.0642, stddev=0.0272], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.14,0.17 0.23,0.31,0.49,0.58,0.63 0.65,0.69,0.70,0.75), mean=0.456, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.17,0.19 0.21,0.23,0.24,0.26), mean=0.144, stddev=0.0331], oderiv-count=1.02227e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24419.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.17), mean=0.0668, stddev=0.0271], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.08,0.09,0.11,0.13,0.14 0.15,0.16,0.16,0.17), mean=0.107, stddev=0.0238]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000156361, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00852, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.16,0.22 0.26,0.29,0.33,0.38,0.41 0.42,0.44,0.45,0.48), mean=0.331, stddev=0.0616], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.15,0.18,0.22,0.25 0.28,0.30,0.33,0.38), mean=0.189, stddev=0.0458], bias-{mean,stddev}=-0.0179,0.02527, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.49e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.16,0.19 0.22,0.24,0.28,0.31,0.32 0.33,0.35,0.37,0.45), mean=0.272, stddev=0.0439], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.38,0.39,0.43,0.45,0.47 0.48,0.49,0.49,0.53), mean=0.424, stddev=0.0352], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0296, stddev=0.00286], oderiv-count=975840
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=22317.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.17,0.20 0.22,0.25,0.28,0.31,0.33 0.34,0.36,0.38,0.55), mean=0.28, stddev=0.047], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.26,0.36 0.42,0.47,0.54,0.61,0.66 0.70,0.74,0.80,1.1), mean=0.538, stddev=0.109]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000156361, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0207, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.28,0.30 0.31,0.35,0.49,0.65,0.71 0.76,0.85,0.90,0.99), mean=0.506, stddev=0.151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.63,0.66,0.74 0.78,0.81,0.89,1.0,1.1 1.2,1.4,1.4,1.6), mean=0.931, stddev=0.159], bias-{mean,stddev}=0.01229,0.01652, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000156361, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1023, w_fc-rms=0.04498, w_oc-rms=0.07461, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00649503, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.60,0.61,0.63 0.65,0.68,0.72,0.77,0.80 0.83,0.84,0.85,0.89), mean=0.724, stddev=0.0566], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.21), mean=0.166, stddev=0.0231] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00649503, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.53,0.56,0.59 0.61,0.64,0.68,0.73,0.78 0.81,0.84,0.86,0.88), mean=0.687, stddev=0.0649], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.173, stddev=0.024] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0304322, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.81,-0.78,-0.63 -0.46,-0.32,0.001,0.30,0.43 0.61,0.81,0.85,0.91), mean=-0.00405, stddev=0.363], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.20,0.24 0.29,0.36,0.46,0.51,0.54 0.56,0.58,0.59,0.61), mean=0.436, stddev=0.0942] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00649503, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.49,0.52 0.55,0.59,0.63,0.67,0.69 0.72,0.77,0.81,0.88), mean=0.631, stddev=0.0615], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.14 0.15,0.16,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0185] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00649503, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.69,-0.64,-0.52 -0.36,-0.26,-0.003,0.24,0.36 0.55,0.69,0.72,0.74), mean=-0.00486, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.40,0.45 0.51,0.59,0.68,0.73,0.75 0.77,0.79,0.79,0.82), mean=0.655, stddev=0.0945] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.36144e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.49812e-06, count-zeroing-boundaries=222315
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.249587
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000156361, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09086, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.6,2.7 2.8,2.9,2.9,3.1), mean=1.97, stddev=0.637], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.92,1.0,1.1 1.1,1.2,1.4,1.6,1.9 2.1,2.2,2.2,2.3), mean=1.43, stddev=0.298], bias-{mean,stddev}=-0.00768,0.6995, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000156361, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0438, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.61,0.62 0.63,0.65,0.69,0.74,0.77 0.80,0.85,0.91,2.1), mean=0.701, stddev=0.0825], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.5,2.6 2.7,2.7,2.8,2.8), mean=1.92, stddev=0.592], bias-{mean,stddev}=4.618e-09,0.02108, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=634880
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/333.mdl exp/nnet3/tdnn_lstm1c_sp/334.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.84634 tdnn2.affine:3.67293 lstm1.W_all:2.84934 lstm1.lstm_nonlin:0.056823 lstm1.W_rp:1.19841 tdnn3.affine:2.62868 tdnn4.affine:2.74831 lstm2.W_all:1.99676 lstm2.lstm_nonlin:0.0344004 lstm2.W_rp:0.826461 tdnn5.affine:2.22473 tdnn6.affine:2.31839 lstm3.W_all:2.16392 lstm3.lstm_nonlin:0.0565817 lstm3.W_rp:0.85137 output.affine:2.34737 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.6896 tdnn2.affine:10.6636 lstm1.W_all:20.5722 lstm1.lstm_nonlin:2.44411 lstm1.W_rp:15.3435 tdnn3.affine:8.35704 tdnn4.affine:7.75689 lstm2.W_all:17.0127 lstm2.lstm_nonlin:1.67697 lstm2.W_rp:14.6201 tdnn5.affine:8.03139 tdnn6.affine:7.70598 lstm3.W_all:24.0911 lstm3.lstm_nonlin:3.06446 lstm3.W_rp:35.2631 output.affine:32.4072 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.303255 tdnn2.affine:0.344576 lstm1.W_all:0.138499 lstm1.lstm_nonlin:0.0232555 lstm1.W_rp:0.0780977 tdnn3.affine:0.313739 tdnn4.affine:0.352949 lstm2.W_all:0.117352 lstm2.lstm_nonlin:0.020483 lstm2.W_rp:0.0565319 tdnn5.affine:0.27631 tdnn6.affine:0.30038 lstm3.W_all:0.0898184 lstm3.lstm_nonlin:0.0184729 lstm3.W_rp:0.0241421 output.affine:0.0723969 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:13:20 KST 2020, elapsed time 0 seconds
