# nnet3-info exp/nnet3/tdnn_lstm1c_sp/414.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/413.mdl exp/nnet3/tdnn_lstm1c_sp/414.mdl 
# Started at Thu Jul 30 12:45:13 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/414.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=9.41334e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03241, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.004,0.006 0.008,0.02,0.57,0.73,0.80 0.87,0.94,1.0,1.3), mean=0.468, stddev=0.31], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.23,0.67,0.92,1.1 1.3,1.4,1.4,1.5), mean=0.645, stddev=0.362], bias-{mean,stddev}=-0.006477,0.06141, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.12e+06, self-repaired-proportion=0.179762, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,2e-05,3e-05,4e-05 6e-05,0.0002,0.04,0.09,0.11 0.12,0.14,0.15,0.18), mean=0.0448, stddev=0.0442], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.04 0.05,0.07,0.36,0.61,0.71 0.80,0.87,0.91,0.99), mean=0.348, stddev=0.263], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.009,0.01 0.02,0.04,0.38,0.54,0.66 0.74,0.86,0.95,1.7), mean=0.359, stddev=0.257], oderiv-count=1.23002e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32189.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,1e-05,2e-05,3e-05 6e-05,0.0002,0.04,0.08,0.10 0.12,0.14,0.16,0.17), mean=0.0428, stddev=0.0432], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.0001,0.0001,0.0002 0.0003,0.0007,0.07,0.11,0.12 0.13,0.14,0.14,0.16), mean=0.0597, stddev=0.0485]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.41334e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01158, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.35,0.36 0.37,0.40,0.44,0.50,0.54 0.57,0.62,0.65,0.73), mean=0.452, stddev=0.0671], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.003,0.003 0.005,0.01,0.28,0.33,0.37 0.39,0.43,0.46,0.76), mean=0.22, stddev=0.147], bias-{mean,stddev}=-0.03498,0.0384, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.45e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.20 0.21,0.22,0.25,0.29,0.31 0.33,0.35,0.37,0.46), mean=0.256, stddev=0.0426], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.36,0.38,0.39 0.40,0.41,0.44,0.47,0.49 0.51,0.52,0.53,0.57), mean=0.443, stddev=0.0366], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.05,0.05,0.06,0.07 0.08,0.08,0.09,0.11), mean=0.0542, stddev=0.0111], oderiv-count=1.09171e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31468, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.21,0.22,0.25,0.29,0.31 0.33,0.36,0.37,0.46), mean=0.258, stddev=0.0451], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.36,0.38 0.40,0.42,0.46,0.51,0.55 0.58,0.61,0.62,0.69), mean=0.467, stddev=0.0604]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.41334e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01751, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,5e-07,1e-06,9e-06 0.0002,0.17,0.40,0.58,0.66 0.72,0.79,0.85,1.1), mean=0.383, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.37,0.41 0.49,0.70,0.80,0.89,0.96 1.0,1.1,1.2,1.3), mean=0.78, stddev=0.17], bias-{mean,stddev}=0.001554,0.02524, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.41334e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06489, w_fc-rms=0.02326, w_oc-rms=0.04325, count=1.51e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639592, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.42,0.43 0.44,0.45,0.48,0.50,0.53 0.67,0.75,0.77,0.82), mean=0.493, stddev=0.0699], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.17,0.19 0.21,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.226, stddev=0.0181] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639592, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.44,0.44,0.46 0.47,0.48,0.50,0.52,0.56 0.62,0.70,0.73,0.79), mean=0.508, stddev=0.0544], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.19,0.20 0.21,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0161] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00730097, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.85,-0.81,-0.46 -0.27,-0.13,0.0002,0.16,0.26 0.62,0.78,0.85,0.88), mean=0.0148, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.26,0.32 0.39,0.45,0.58,0.72,1.0 1.0,1.0,1.0,1.0), mean=0.613, stddev=0.208] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639592, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.56,0.58,0.64), mean=0.461, stddev=0.0415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0192] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00639592, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.76,-0.73,-0.36 -0.20,-0.09,0.0003,0.11,0.21 0.44,0.64,0.77,0.85), mean=0.0108, stddev=0.239], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.31,0.36,0.49 0.70,0.78,0.86,0.92,1.0 1.0,1.0,1.0,1.0), mean=0.839, stddev=0.142] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.52879e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=5.88557e-05, count-zeroing-boundaries=297337
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.117355
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.41334e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0391, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.44,0.46 0.51,0.56,0.85,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.849, stddev=0.274], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0006,0.0008,0.002 0.007,0.37,0.55,0.71,0.89 1.2,1.4,1.5,1.7), mean=0.541, stddev=0.324], bias-{mean,stddev}=0.01292,0.262, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=9.41334e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01244, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.23,0.24,0.26 0.27,0.30,0.34,0.38,0.41 0.45,0.48,0.49,0.56), mean=0.343, stddev=0.0579], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.14,0.15 0.16,0.18,0.27,0.36,0.39 0.41,0.43,0.44,0.48), mean=0.269, stddev=0.0898], bias-{mean,stddev}=0.000943,0.00958, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.57e+05, self-repaired-proportion=0.000396635, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.13 0.14,0.15,0.16,0.17), mean=0.0791, stddev=0.0346], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.13,0.16 0.22,0.31,0.46,0.56,0.61 0.65,0.69,0.71,0.83), mean=0.436, stddev=0.145], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.09,0.09 0.10,0.10,0.12,0.15,0.18 0.22,0.27,0.29,0.36), mean=0.133, stddev=0.0417], oderiv-count=1.13798e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29302.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.01,0.02,0.02 0.03,0.05,0.08,0.11,0.13 0.14,0.15,0.16,0.17), mean=0.0786, stddev=0.0339], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.06,0.07 0.09,0.11,0.13,0.15,0.17 0.18,0.19,0.20,0.21), mean=0.129, stddev=0.0301]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.41334e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008156, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.26,0.27 0.28,0.29,0.32,0.35,0.37 0.39,0.41,0.42,0.45), mean=0.32, stddev=0.0365], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.12,0.13,0.14 0.15,0.15,0.18,0.21,0.23 0.25,0.27,0.29,0.37), mean=0.183, stddev=0.0358], bias-{mean,stddev}=-0.02784,0.01752, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.86e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.24,0.27,0.28 0.30,0.31,0.32,0.34), mean=0.244, stddev=0.0307], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.35,0.36,0.37 0.38,0.40,0.43,0.45,0.46 0.47,0.48,0.48,0.49), mean=0.423, stddev=0.0301], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0377, stddev=0.00265], oderiv-count=938112
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27137.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.25,0.27,0.29 0.30,0.32,0.34,0.35), mean=0.246, stddev=0.0318], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.39,0.40 0.41,0.44,0.48,0.52,0.56 0.58,0.61,0.62,0.76), mean=0.481, stddev=0.0569]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.41334e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01426, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,6e-06,2e-05 6e-05,0.001,0.33,0.51,0.58 0.63,0.67,0.70,0.88), mean=0.281, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.34 0.42,0.60,0.65,0.72,0.76 0.79,0.87,0.90,1.3), mean=0.637, stddev=0.129], bias-{mean,stddev}=0.004268,0.02953, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.41334e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0396, w_fc-rms=0.01425, w_oc-rms=0.03973, count=1.38e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644959, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.46 0.46,0.48,0.50,0.51,0.55 0.59,0.64,0.67,0.75), mean=0.502, stddev=0.0413], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0145] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644959, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.46,0.47 0.48,0.49,0.50,0.52,0.54 0.57,0.62,0.63,0.69), mean=0.507, stddev=0.0337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.237, stddev=0.0138] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644959, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.77,-0.71,-0.37 -0.22,-0.08,0.0003,0.11,0.28 0.48,0.60,0.64,0.73), mean=0.00658, stddev=0.237], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.35,0.41,0.45 0.48,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.723, stddev=0.214] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644959, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.44 0.45,0.47,0.50,0.50,0.51 0.52,0.56,0.56,0.69), mean=0.488, stddev=0.0294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.018] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644959, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.60,-0.55,-0.28 -0.17,-0.07,0.0002,0.10,0.21 0.36,0.47,0.54,0.62), mean=0.00584, stddev=0.19], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.54,0.58,0.67 0.75,0.81,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.885, stddev=0.112] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.62628e-06, count-zeroing-boundaries=262251
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.117355
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.41334e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03701, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.47,0.52 0.55,0.60,0.81,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.815, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.003 0.005,0.01,0.57,0.79,0.89 0.99,1.2,1.2,1.4), mean=0.472, stddev=0.365], bias-{mean,stddev}=-0.002024,0.2028, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=9.41334e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01161, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.22,0.24 0.25,0.27,0.31,0.36,0.40 0.44,0.46,0.48,0.53), mean=0.319, stddev=0.0583], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.24,0.34,0.36 0.38,0.40,0.41,0.44), mean=0.253, stddev=0.0779], bias-{mean,stddev}=0.001087,0.007296, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.89e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.13,0.13,0.15), mean=0.0632, stddev=0.0284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.13,0.16 0.20,0.28,0.43,0.53,0.58 0.61,0.65,0.67,0.72), mean=0.412, stddev=0.138], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.15,0.18 0.20,0.23,0.24,0.26), mean=0.134, stddev=0.0325], oderiv-count=1.05888e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24972.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.03,0.04,0.06,0.09,0.10 0.12,0.13,0.13,0.14), mean=0.0648, stddev=0.0283], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.08,0.09,0.11,0.13,0.15 0.15,0.16,0.16,0.20), mean=0.112, stddev=0.0263]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.41334e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00818, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.15,0.22 0.26,0.28,0.32,0.37,0.39 0.40,0.41,0.41,0.44), mean=0.318, stddev=0.0569], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.14,0.15,0.17,0.21,0.24 0.27,0.31,0.33,0.39), mean=0.181, stddev=0.0436], bias-{mean,stddev}=-0.02202,0.02188, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.8e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.15,0.18 0.21,0.23,0.26,0.29,0.30 0.31,0.33,0.34,0.37), mean=0.256, stddev=0.0405], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.36 0.37,0.39,0.41,0.44,0.45 0.47,0.48,0.49,0.51), mean=0.414, stddev=0.0315], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.031, stddev=0.00305], oderiv-count=965440
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=22807.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.19 0.20,0.23,0.26,0.29,0.30 0.32,0.34,0.35,0.42), mean=0.259, stddev=0.0415], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.24,0.33 0.40,0.44,0.52,0.57,0.62 0.64,0.66,0.70,0.85), mean=0.508, stddev=0.0935]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.41334e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02062, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.28 0.30,0.34,0.48,0.66,0.72 0.77,0.84,0.89,0.96), mean=0.501, stddev=0.159], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.56,0.60,0.68 0.75,0.79,0.86,1.1,1.2 1.3,1.4,1.6,1.9), mean=0.92, stddev=0.194], bias-{mean,stddev}=0.01415,0.01715, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.41334e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1021, w_fc-rms=0.04289, w_oc-rms=0.07034, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651433, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.58,0.59,0.61 0.64,0.66,0.71,0.75,0.77 0.80,0.82,0.84,0.86), mean=0.705, stddev=0.0544], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.172, stddev=0.0187] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651433, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.52,0.55,0.57 0.58,0.61,0.65,0.69,0.74 0.79,0.82,0.84,0.88), mean=0.654, stddev=0.0641], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.14 0.15,0.17,0.19,0.20,0.21 0.21,0.21,0.22,0.22), mean=0.185, stddev=0.0212] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.018159, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.84,-0.72,-0.56 -0.44,-0.29,-0.01,0.26,0.41 0.54,0.73,0.81,0.89), mean=-0.0102, stddev=0.338], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.25 0.30,0.37,0.43,0.47,0.48 0.50,0.52,0.53,0.55), mean=0.41, stddev=0.0719] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651433, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.51,0.53 0.56,0.60,0.63,0.67,0.69 0.71,0.77,0.80,0.88), mean=0.633, stddev=0.0572], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.14 0.15,0.16,0.18,0.19,0.19 0.19,0.20,0.20,0.20), mean=0.175, stddev=0.0166] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0102866, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.78,-0.69,-0.55 -0.42,-0.28,-0.009,0.23,0.37 0.55,0.72,0.78,0.88), mean=-0.0114, stddev=0.32], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.27,0.33 0.41,0.49,0.59,0.64,0.66 0.68,0.69,0.70,0.75), mean=0.562, stddev=0.103] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.24196e-06, count-zeroing-boundaries=223019
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.117355
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.41334e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08818, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.1,1.1 1.2,1.2,1.7,2.6,2.6 2.7,2.8,2.9,3.1), mean=1.91, stddev=0.628], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.95,1.1,1.1 1.1,1.2,1.3,1.6,1.8 1.9,2.0,2.0,2.2), mean=1.4, stddev=0.241], bias-{mean,stddev}=-0.04139,0.5282, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=9.41334e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04173, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.57,0.59 0.60,0.62,0.66,0.70,0.73 0.76,0.80,0.87,2.1), mean=0.668, stddev=0.081], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.0,1.1 1.1,1.2,1.6,2.4,2.5 2.6,2.6,2.7,2.7), mean=1.82, stddev=0.59], bias-{mean,stddev}=4.533e-09,0.02365, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0136], oderiv-count=589120
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/413.mdl exp/nnet3/tdnn_lstm1c_sp/414.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.09819 tdnn2.affine:2.88495 lstm1.W_all:2.19095 lstm1.lstm_nonlin:0.0474937 lstm1.W_rp:0.966971 tdnn3.affine:1.97782 tdnn4.affine:2.03258 lstm2.W_all:1.46358 lstm2.lstm_nonlin:0.0242758 lstm2.W_rp:0.647324 tdnn5.affine:1.6354 tdnn6.affine:1.74965 lstm3.W_all:1.86728 lstm3.lstm_nonlin:0.0459516 lstm3.W_rp:0.695355 output.affine:1.64698 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8796 tdnn2.affine:10.496 lstm1.W_all:20.3873 lstm1.lstm_nonlin:1.85582 lstm1.W_rp:14.9874 tdnn3.affine:7.92489 tdnn4.affine:7.38414 lstm2.W_all:16.6375 lstm2.lstm_nonlin:1.31994 lstm2.W_rp:13.995 tdnn5.affine:7.39723 tdnn6.affine:7.40162 lstm3.W_all:24.0007 lstm3.lstm_nonlin:2.99183 lstm3.W_rp:33.5307 output.affine:30.8869 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.240535 tdnn2.affine:0.274924 lstm1.W_all:0.107495 lstm1.lstm_nonlin:0.0254604 lstm1.W_rp:0.0645331 tdnn3.affine:0.249212 tdnn4.affine:0.27512 lstm2.W_all:0.0879457 lstm2.lstm_nonlin:0.0183042 lstm2.W_rp:0.0462156 tdnn5.affine:0.220571 tdnn6.affine:0.235975 lstm3.W_all:0.0777637 lstm3.lstm_nonlin:0.0153028 lstm3.W_rp:0.0207285 output.affine:0.0532987 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:45:13 KST 2020, elapsed time 0 seconds
