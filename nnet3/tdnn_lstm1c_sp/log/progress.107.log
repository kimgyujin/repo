# nnet3-info exp/nnet3/tdnn_lstm1c_sp/107.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/106.mdl exp/nnet3/tdnn_lstm1c_sp/107.mdl 
# Started at Thu Jul 30 10:43:26 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/107.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000214346, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03046, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.009,0.01,0.02 0.05,0.43,0.53,0.62,0.67 0.74,0.78,0.85,1.1), mean=0.485, stddev=0.207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.15 0.17,0.21,0.58,0.82,1.2 1.4,1.5,1.5,1.6), mean=0.591, stddev=0.366], bias-{mean,stddev}=0.00244,0.05844, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.119918, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,2e-06,5e-06,4e-05 0.0002,0.02,0.06,0.08,0.10 0.11,0.13,0.14,0.17), mean=0.0584, stddev=0.0354], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.001,0.003,0.01 0.04,0.21,0.48,0.63,0.73 0.80,0.85,0.89,0.95), mean=0.442, stddev=0.234], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.11,0.28,0.37,0.47,0.53 0.60,0.67,0.78,1.3), mean=0.365, stddev=0.158], oderiv-count=1.18118e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34638.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,1e-06,3e-06,1e-05 9e-05,0.02,0.06,0.08,0.10 0.11,0.13,0.14,0.17), mean=0.0551, stddev=0.0349], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,4e-05,7e-05,0.0003 0.0007,0.06,0.09,0.11,0.12 0.12,0.12,0.13,0.15), mean=0.079, stddev=0.0385]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000214346, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01248, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.41 0.43,0.45,0.49,0.53,0.56 0.58,0.60,0.63,0.74), mean=0.49, stddev=0.0542], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.008,0.01 0.03,0.24,0.29,0.33,0.35 0.37,0.40,0.41,0.77), mean=0.264, stddev=0.107], bias-{mean,stddev}=-0.0003402,0.02711, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.29 0.30,0.32,0.34,0.38,0.40 0.42,0.45,0.47,0.56), mean=0.349, stddev=0.0412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.39,0.40,0.41 0.42,0.44,0.46,0.48,0.50 0.51,0.52,0.52,0.54), mean=0.459, stddev=0.029], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.0426, stddev=0.00827], oderiv-count=1.03827e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33864.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.27,0.28 0.29,0.31,0.34,0.37,0.40 0.42,0.46,0.47,0.57), mean=0.344, stddev=0.0453], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.47,0.48,0.50 0.52,0.54,0.60,0.67,0.70 0.74,0.77,0.82,0.88), mean=0.61, stddev=0.0735]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000214346, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01721, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.001,0.004,0.02 0.10,0.22,0.38,0.56,0.65 0.74,0.83,0.89,1.1), mean=0.387, stddev=0.207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.37,0.40,0.45 0.50,0.69,0.80,0.88,0.93 0.97,1.0,1.1,1.2), mean=0.769, stddev=0.155], bias-{mean,stddev}=-0.002277,0.02148, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000214346, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02234, w_fc-rms=0.03468, w_oc-rms=0.04796, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00624479, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.42,0.43,0.44 0.45,0.46,0.49,0.52,0.56 0.59,0.66,0.68,0.72), mean=0.497, stddev=0.05], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.20,0.21 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0147] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00624479, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.38,0.41 0.42,0.44,0.48,0.53,0.59 0.67,0.75,0.79,0.83), mean=0.497, stddev=0.0793], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.17,0.20 0.21,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0193] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00815586, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.79,-0.72,-0.55 -0.35,-0.19,-0.002,0.19,0.34 0.57,0.74,0.78,0.82), mean=-0.00068, stddev=0.294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.30,0.32,0.35 0.42,0.48,0.59,0.72,0.91 0.99,1.0,1.0,1.0), mean=0.614, stddev=0.171] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00624479, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.41,0.42 0.43,0.44,0.47,0.50,0.53 0.55,0.57,0.59,0.63), mean=0.476, stddev=0.0398], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0168] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0191031, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.85,-0.69,-0.50 -0.32,-0.16,-0.003,0.16,0.30 0.53,0.73,0.80,0.89), mean=-0.00258, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.20,0.25,0.45 0.59,0.73,0.83,0.89,0.95 1.0,1.0,1.0,1.0), mean=0.793, stddev=0.157] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.39585e-06, count-zeroing-boundaries=294477
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000214346, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03094, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.20 0.22,0.26,0.46,0.98,1.1 1.1,1.2,1.2,1.3), mean=0.612, stddev=0.352], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.03,0.06 0.17,0.32,0.47,0.59,0.68 0.79,0.93,1.0,1.2), mean=0.457, stddev=0.2], bias-{mean,stddev}=-0.00377,0.04629, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000214346, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01263, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.20,0.22,0.23 0.26,0.28,0.34,0.41,0.44 0.47,0.51,0.52,0.71), mean=0.345, stddev=0.0759], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.08,0.10,0.18,0.40,0.45 0.48,0.51,0.53,0.59), mean=0.246, stddev=0.149], bias-{mean,stddev}=-0.006231,0.03145, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0.00192308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.04,0.04,0.06 0.08,0.09,0.13,0.15,0.17 0.19,0.20,0.21,0.23), mean=0.125, stddev=0.0377], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.17,0.19,0.26 0.32,0.38,0.49,0.59,0.63 0.66,0.69,0.70,0.77), mean=0.483, stddev=0.122], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.07,0.07,0.08,0.09,0.10 0.11,0.13,0.14,0.22), mean=0.0837, stddev=0.0167], oderiv-count=1.02694e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31542.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.04,0.04,0.06 0.07,0.09,0.12,0.15,0.17 0.18,0.20,0.21,0.26), mean=0.12, stddev=0.0377], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.11,0.12,0.14 0.16,0.17,0.20,0.23,0.24 0.25,0.27,0.30,0.41), mean=0.199, stddev=0.037]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000214346, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00927, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.29,0.31 0.32,0.34,0.36,0.39,0.41 0.42,0.44,0.45,0.60), mean=0.364, stddev=0.0385], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.15,0.15,0.16 0.17,0.18,0.21,0.24,0.25 0.27,0.29,0.29,0.39), mean=0.209, stddev=0.0347], bias-{mean,stddev}=-0.01066,0.01573, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.22,0.24 0.25,0.26,0.29,0.33,0.34 0.36,0.38,0.39,0.48), mean=0.294, stddev=0.0385], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.37,0.39 0.40,0.41,0.44,0.47,0.48 0.49,0.50,0.51,0.54), mean=0.44, stddev=0.0329], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0315, stddev=0.00266], oderiv-count=1.02502e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29219.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.22,0.23 0.24,0.25,0.29,0.32,0.34 0.36,0.38,0.39,0.49), mean=0.291, stddev=0.042], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.44,0.45,0.47 0.49,0.51,0.56,0.62,0.65 0.68,0.72,0.77,0.97), mean=0.565, stddev=0.0701]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000214346, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0135, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,3e-05,4e-05,9e-05 0.0003,0.004,0.28,0.48,0.56 0.61,0.65,0.68,1.1), mean=0.266, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.28,0.31 0.37,0.52,0.63,0.69,0.73 0.75,0.80,0.85,1.1), mean=0.602, stddev=0.131], bias-{mean,stddev}=-0.003499,0.02368, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000214346, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01358, w_fc-rms=0.01758, w_oc-rms=0.02256, count=1.32e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629792, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.44,0.45 0.46,0.47,0.50,0.50,0.53 0.56,0.59,0.60,0.65), mean=0.495, stddev=0.0329], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0155] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629792, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.45,0.50,0.50,0.51 0.56,0.58,0.64,0.70), mean=0.485, stddev=0.0415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0124] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00629792, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.66,-0.54,-0.35 -0.21,-0.11,-0.0004,0.11,0.24 0.37,0.51,0.62,0.77), mean=0.00369, stddev=0.21], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.45,0.47,0.51 0.55,0.57,0.65,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.741, stddev=0.192] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629792, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.45,0.46,0.50,0.50,0.52 0.55,0.57,0.60,0.63), mean=0.488, stddev=0.0335], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0165] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00629792, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.63,-0.55,-0.33 -0.20,-0.11,0.0002,0.11,0.23 0.35,0.50,0.60,0.81), mean=0.00553, stddev=0.205], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.44,0.56,0.68 0.76,0.82,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.885, stddev=0.112] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=259722
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000214346, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02834, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.33,0.35,0.36 0.38,0.41,0.55,0.83,0.87 0.92,0.93,0.95,1.0), mean=0.613, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.003,0.004 0.006,0.02,0.45,0.61,0.67 0.75,0.82,0.85,1.0), mean=0.369, stddev=0.27], bias-{mean,stddev}=-0.008889,0.09882, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000214346, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01172, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.21 0.23,0.26,0.30,0.38,0.43 0.49,0.52,0.56,0.64), mean=0.317, stddev=0.0817], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.14 0.15,0.17,0.24,0.34,0.37 0.39,0.42,0.43,0.51), mean=0.253, stddev=0.0865], bias-{mean,stddev}=0.002351,0.01756, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.06e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.03 0.05,0.06,0.08,0.11,0.12 0.13,0.14,0.15,0.18), mean=0.0825, stddev=0.0296], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.18 0.24,0.31,0.44,0.55,0.59 0.63,0.66,0.68,0.77), mean=0.426, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.07,0.08,0.09,0.11,0.12 0.13,0.15,0.16,0.18), mean=0.0929, stddev=0.0187], oderiv-count=1.0391e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26897.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.05,0.06,0.08,0.11,0.12 0.14,0.15,0.16,0.18), mean=0.0823, stddev=0.0305], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.10 0.11,0.13,0.15,0.17,0.18 0.19,0.21,0.22,0.27), mean=0.146, stddev=0.0307]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000214346, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00885, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.27 0.29,0.30,0.34,0.39,0.42 0.43,0.45,0.46,0.49), mean=0.346, stddev=0.0485], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.12,0.14 0.15,0.16,0.19,0.23,0.25 0.28,0.32,0.35,0.41), mean=0.197, stddev=0.0449], bias-{mean,stddev}=-0.01186,0.01518, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.72e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.24,0.26,0.29,0.32,0.34 0.36,0.38,0.40,0.44), mean=0.294, stddev=0.0404], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.36 0.37,0.39,0.42,0.45,0.47 0.48,0.49,0.50,0.53), mean=0.419, stddev=0.0369], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0261, stddev=0.00266], oderiv-count=919040
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24574.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.22 0.24,0.26,0.30,0.33,0.35 0.37,0.40,0.42,0.52), mean=0.297, stddev=0.0453], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.43,0.46 0.48,0.52,0.58,0.66,0.70 0.74,0.78,0.81,1.1), mean=0.587, stddev=0.0875]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000214346, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01964, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.17,0.24 0.32,0.36,0.43,0.63,0.75 0.80,0.84,0.86,1.4), mean=0.472, stddev=0.165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.58,0.58,0.60 0.62,0.65,0.73,1.0,1.4 1.4,1.5,1.5,1.7), mean=0.85, stddev=0.282], bias-{mean,stddev}=0.007797,0.02246, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000214346, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03222, w_fc-rms=0.04552, w_oc-rms=0.06372, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636203, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.45,0.46,0.48 0.49,0.52,0.58,0.64,0.66 0.69,0.70,0.71,0.81), mean=0.579, stddev=0.066], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.19,0.20,0.20,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.204, stddev=0.01] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00636203, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.49 0.51,0.54,0.59,0.64,0.67 0.70,0.74,0.76,0.89), mean=0.592, stddev=0.0651], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.17,0.17,0.18 0.19,0.19,0.20,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.203, stddev=0.0139] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00887662, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.83,-0.75,-0.55 -0.33,-0.21,-0.01,0.23,0.33 0.46,0.70,0.82,0.88), mean=-0.00694, stddev=0.301], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.26,0.29,0.31 0.36,0.39,0.44,0.48,0.49 0.50,0.52,0.53,0.56), mean=0.43, stddev=0.0571] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00827287, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.53,0.56,0.57 0.59,0.61,0.66,0.70,0.72 0.74,0.76,0.78,0.95), mean=0.657, stddev=0.0545], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.14,0.15,0.16 0.17,0.17,0.19,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.183, stddev=0.0153] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0316193, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.90,-0.79,-0.54 -0.33,-0.20,-0.02,0.19,0.33 0.46,0.76,0.89,0.98), mean=-0.00683, stddev=0.306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.16,0.19,0.35 0.47,0.54,0.63,0.68,0.70 0.71,0.72,0.73,0.75), mean=0.6, stddev=0.116] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.35833e-05, count-zeroing-boundaries=220860
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000214346, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07001, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.6,1.9,2.0 2.0,2.1,2.1,2.2), mean=1.56, stddev=0.326], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.64,0.79,0.88 0.94,1.0,1.1,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.12, stddev=0.151], bias-{mean,stddev}=0.003035,0.07877, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000214346, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03999, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.51,0.53,0.54 0.56,0.58,0.63,0.69,0.72 0.76,0.81,0.83,2.0), mean=0.639, stddev=0.0866], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.3 1.4,1.4,1.8,2.1,2.2 2.3,2.3,2.4,2.6), mean=1.8, stddev=0.333], bias-{mean,stddev}=5.198e-09,0.02287, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=583680
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/106.mdl exp/nnet3/tdnn_lstm1c_sp/107.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.01056 tdnn2.affine:8.20401 lstm1.W_all:6.98252 lstm1.lstm_nonlin:0.136774 lstm1.W_rp:2.89129 tdnn3.affine:5.03696 tdnn4.affine:5.80466 lstm2.W_all:4.61162 lstm2.lstm_nonlin:0.0647941 lstm2.W_rp:1.92336 tdnn5.affine:4.08425 tdnn6.affine:4.80629 lstm3.W_all:6.26112 lstm3.lstm_nonlin:0.127898 lstm3.W_rp:2.45843 output.affine:5.3538 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.1042 tdnn2.affine:11.2546 lstm1.W_all:20.0336 lstm1.lstm_nonlin:1.44254 lstm1.W_rp:11.4022 tdnn3.affine:8.07771 tdnn4.affine:8.3606 lstm2.W_all:15.7387 lstm2.lstm_nonlin:0.72214 lstm2.W_rp:10.5433 tdnn5.affine:7.47511 tdnn6.affine:7.98341 lstm3.W_all:22.8573 lstm3.lstm_nonlin:1.93098 lstm3.W_rp:25.7737 output.affine:29.5988 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.667305 tdnn2.affine:0.735227 lstm1.W_all:0.349925 lstm1.lstm_nonlin:0.0954446 lstm1.W_rp:0.254129 tdnn3.affine:0.630649 tdnn4.affine:0.701404 lstm2.W_all:0.293825 lstm2.lstm_nonlin:0.089904 lstm2.W_rp:0.182511 tdnn5.affine:0.547244 tdnn6.affine:0.604353 lstm3.W_all:0.274384 lstm3.lstm_nonlin:0.066264 lstm3.W_rp:0.0951311 output.affine:0.180447 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:43:26 KST 2020, elapsed time 0 seconds
