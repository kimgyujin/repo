# nnet3-info exp/nnet3/tdnn_lstm1c_sp/147.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/146.mdl exp/nnet3/tdnn_lstm1c_sp/147.mdl 
# Started at Thu Jul 30 10:59:11 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/147.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000188808, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02964, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.009,0.01,0.02 0.03,0.38,0.52,0.61,0.67 0.72,0.79,0.84,1.1), mean=0.465, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.17,0.21,0.58,0.80,1.1 1.3,1.4,1.5,1.6), mean=0.577, stddev=0.352], bias-{mean,stddev}=0.003984,0.05577, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0.135197, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,6e-06,2e-05 0.0001,0.007,0.06,0.09,0.10 0.11,0.13,0.14,0.17), mean=0.0566, stddev=0.0365], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.003,0.01 0.03,0.13,0.48,0.63,0.72 0.79,0.85,0.89,0.95), mean=0.437, stddev=0.24], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.05,0.27,0.37,0.47,0.53 0.61,0.71,0.81,1.3), mean=0.36, stddev=0.174], oderiv-count=1.21587e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34868.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,2e-06,3e-06,1e-05 6e-05,0.007,0.06,0.08,0.10 0.11,0.13,0.14,0.18), mean=0.0539, stddev=0.0366], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,5e-05,7e-05,0.0002 0.0005,0.02,0.09,0.10,0.11 0.12,0.13,0.13,0.14), mean=0.0751, stddev=0.0401]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000188808, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01205, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.38,0.39 0.41,0.43,0.47,0.51,0.54 0.56,0.59,0.63,0.74), mean=0.473, stddev=0.0541], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.007,0.009 0.02,0.22,0.28,0.32,0.34 0.37,0.39,0.41,0.73), mean=0.25, stddev=0.114], bias-{mean,stddev}=-0.001564,0.02707, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.16e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.26,0.27 0.28,0.30,0.33,0.36,0.38 0.40,0.42,0.45,0.55), mean=0.331, stddev=0.0402], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.41,0.42 0.43,0.44,0.46,0.48,0.49 0.50,0.51,0.52,0.54), mean=0.459, stddev=0.0269], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0448, stddev=0.00885], oderiv-count=1.1895e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34094.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.26 0.27,0.29,0.32,0.36,0.38 0.41,0.44,0.46,0.59), mean=0.324, stddev=0.0447], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.45,0.47 0.48,0.51,0.56,0.62,0.65 0.68,0.75,0.78,0.86), mean=0.569, stddev=0.0704]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000188808, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01663, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0008,0.003,0.01 0.07,0.20,0.37,0.54,0.64 0.72,0.81,0.85,1.1), mean=0.371, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.37,0.39,0.44 0.49,0.64,0.77,0.85,0.90 0.94,1.0,1.0,1.3), mean=0.743, stddev=0.15], bias-{mean,stddev}=-0.002198,0.02305, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000188808, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02169, w_fc-rms=0.03407, w_oc-rms=0.04891, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623477, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.43,0.44 0.45,0.46,0.49,0.52,0.55 0.58,0.65,0.67,0.75), mean=0.497, stddev=0.0472], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.20,0.21 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0145] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623477, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.39,0.40 0.42,0.45,0.49,0.53,0.57 0.66,0.74,0.78,0.88), mean=0.496, stddev=0.0766], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.18,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0189] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00895011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.78,-0.72,-0.51 -0.33,-0.17,0.0007,0.18,0.31 0.52,0.72,0.78,0.83), mean=0.0036, stddev=0.282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.30,0.31,0.37 0.42,0.48,0.60,0.73,0.95 0.99,1.0,1.0,1.0), mean=0.625, stddev=0.178] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623477, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.41,0.42 0.43,0.45,0.47,0.51,0.53 0.54,0.57,0.58,0.63), mean=0.477, stddev=0.0388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.017] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0159412, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.96,-0.82,-0.65,-0.47 -0.29,-0.17,-0.003,0.17,0.28 0.47,0.72,0.82,0.89), mean=0.0029, stddev=0.273], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.21,0.28,0.48 0.62,0.73,0.83,0.90,0.97 1.0,1.0,1.0,1.0), mean=0.801, stddev=0.155] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=296415
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00110193
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000188808, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03018, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.20,0.23,0.40,0.96,1.0 1.1,1.1,1.1,1.2), mean=0.588, stddev=0.358], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.03,0.05 0.12,0.31,0.45,0.58,0.66 0.77,0.93,0.97,1.1), mean=0.443, stddev=0.201], bias-{mean,stddev}=0.0004606,0.04622, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000188808, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01213, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.20,0.21,0.23 0.25,0.27,0.32,0.39,0.43 0.46,0.49,0.50,0.70), mean=0.331, stddev=0.0722], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.06 0.07,0.08,0.17,0.38,0.43 0.47,0.50,0.52,0.57), mean=0.233, stddev=0.149], bias-{mean,stddev}=-0.003057,0.03109, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0.00223558, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.01,0.03,0.05 0.06,0.08,0.12,0.15,0.17 0.18,0.19,0.20,0.23), mean=0.116, stddev=0.0396], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.09,0.18,0.22 0.28,0.37,0.50,0.61,0.65 0.68,0.72,0.72,0.76), mean=0.484, stddev=0.14], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.07,0.08,0.09,0.10,0.12 0.13,0.15,0.16,0.28), mean=0.0933, stddev=0.0238], oderiv-count=1.06829e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31772.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.02,0.03,0.05 0.07,0.08,0.11,0.14,0.16 0.17,0.19,0.20,0.23), mean=0.114, stddev=0.0389], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.08,0.10,0.13 0.15,0.16,0.18,0.21,0.22 0.24,0.26,0.27,0.31), mean=0.183, stddev=0.0358]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000188808, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008959, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.28,0.30 0.31,0.32,0.35,0.38,0.40 0.41,0.43,0.47,0.60), mean=0.352, stddev=0.0383], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.14,0.14,0.15 0.16,0.17,0.20,0.23,0.24 0.26,0.27,0.29,0.35), mean=0.202, stddev=0.0334], bias-{mean,stddev}=-0.009944,0.01748, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.83e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.22 0.23,0.25,0.28,0.31,0.32 0.34,0.36,0.37,0.45), mean=0.28, stddev=0.0365], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.38,0.39,0.39 0.40,0.42,0.44,0.47,0.48 0.49,0.50,0.51,0.53), mean=0.441, stddev=0.03], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.04), mean=0.0332, stddev=0.00287], oderiv-count=1.06554e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29449.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.23,0.24,0.27,0.31,0.32 0.34,0.36,0.38,0.46), mean=0.275, stddev=0.0391], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.43,0.45 0.46,0.48,0.52,0.58,0.60 0.63,0.68,0.72,0.93), mean=0.53, stddev=0.0646]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000188808, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01319, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-07,3e-06,5e-06,1e-05 5e-05,0.001,0.28,0.47,0.55 0.60,0.64,0.67,1.0), mean=0.257, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.26,0.31 0.37,0.50,0.62,0.68,0.70 0.73,0.79,0.84,1.3), mean=0.588, stddev=0.129], bias-{mean,stddev}=-0.003528,0.02516, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000188808, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01224, w_fc-rms=0.01526, w_oc-rms=0.02022, count=1.34e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628735, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.44,0.45 0.46,0.47,0.50,0.50,0.53 0.55,0.58,0.60,0.65), mean=0.495, stddev=0.0309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0152] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628735, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.44,0.45,0.50,0.50,0.51 0.53,0.59,0.64,0.70), mean=0.485, stddev=0.0395], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.21,0.21,0.22 0.23,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0118] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00628735, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.62,-0.57,-0.33 -0.22,-0.10,0.0001,0.11,0.23 0.29,0.44,0.61,0.77), mean=0.00103, stddev=0.198], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.43,0.46,0.50 0.54,0.58,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.749, stddev=0.195] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628735, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.42,0.44 0.45,0.46,0.50,0.50,0.52 0.55,0.57,0.58,0.63), mean=0.489, stddev=0.0317], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0159] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00628735, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.61,-0.53,-0.31 -0.20,-0.10,5e-05,0.11,0.22 0.29,0.43,0.58,0.79), mean=0.00225, stddev=0.194], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.47,0.58,0.69 0.77,0.83,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.89, stddev=0.11] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.82495e-06, count-zeroing-boundaries=261441
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00110193
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000188808, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02784, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.31,0.34 0.35,0.38,0.52,0.83,0.88 0.91,0.95,0.97,0.99), mean=0.596, stddev=0.219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0009,0.001,0.002 0.003,0.007,0.45,0.60,0.66 0.74,0.81,0.85,0.94), mean=0.356, stddev=0.274], bias-{mean,stddev}=-0.003375,0.1003, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000188808, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01138, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.23,0.24,0.29,0.36,0.41 0.48,0.50,0.53,0.61), mean=0.308, stddev=0.0771], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.14,0.15,0.23,0.34,0.37 0.39,0.41,0.43,0.48), mean=0.243, stddev=0.0908], bias-{mean,stddev}=0.002479,0.01686, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.51e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.03 0.04,0.05,0.08,0.10,0.11 0.12,0.13,0.13,0.15), mean=0.0754, stddev=0.029], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.17 0.22,0.29,0.43,0.55,0.59 0.61,0.64,0.66,0.70), mean=0.419, stddev=0.138], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.09,0.10,0.12,0.14 0.15,0.17,0.18,0.21), mean=0.104, stddev=0.024], oderiv-count=1.01478e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27127.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.05,0.08,0.10,0.12 0.13,0.14,0.14,0.17), mean=0.076, stddev=0.0293], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.08,0.09 0.10,0.11,0.13,0.15,0.16 0.17,0.18,0.19,0.24), mean=0.133, stddev=0.0244]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000188808, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008534, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.28,0.29,0.33,0.38,0.39 0.41,0.43,0.44,0.53), mean=0.334, stddev=0.0466], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.11,0.13 0.14,0.16,0.18,0.22,0.24 0.27,0.30,0.32,0.38), mean=0.19, stddev=0.0431], bias-{mean,stddev}=-0.01242,0.01584, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.77e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.21 0.22,0.25,0.28,0.30,0.32 0.34,0.35,0.36,0.53), mean=0.277, stddev=0.0386], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.37,0.39,0.41,0.44,0.46 0.47,0.48,0.49,0.51), mean=0.416, stddev=0.0331], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0276, stddev=0.00268], oderiv-count=828160
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24805, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.22,0.25,0.28,0.31,0.33 0.34,0.36,0.37,0.55), mean=0.28, stddev=0.043], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.43 0.45,0.48,0.55,0.61,0.65 0.69,0.73,0.75,0.98), mean=0.55, stddev=0.0794]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000188808, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01931, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.25 0.31,0.35,0.42,0.61,0.74 0.78,0.83,0.85,1.3), mean=0.465, stddev=0.163], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.57,0.59 0.61,0.64,0.71,1.0,1.4 1.4,1.5,1.5,1.6), mean=0.835, stddev=0.28], bias-{mean,stddev}=0.00753,0.0216, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000188808, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0325, w_fc-rms=0.04514, w_oc-rms=0.06566, count=1.21e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635081, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.46,0.47,0.49 0.51,0.53,0.60,0.65,0.67 0.69,0.72,0.72,0.81), mean=0.592, stddev=0.0647], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.19,0.20,0.20,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.203, stddev=0.0103] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635081, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.47,0.49 0.51,0.54,0.59,0.64,0.69 0.72,0.75,0.78,0.89), mean=0.596, stddev=0.0695], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.16,0.17,0.18 0.19,0.19,0.20,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.202, stddev=0.015] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0117097, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.84,-0.71,-0.56 -0.37,-0.22,-0.02,0.21,0.36 0.48,0.77,0.82,0.90), mean=-0.00847, stddev=0.307], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.25,0.26,0.31 0.35,0.38,0.43,0.47,0.48 0.50,0.51,0.52,0.54), mean=0.424, stddev=0.058] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0101725, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.56,0.57,0.59 0.61,0.63,0.68,0.71,0.74 0.76,0.78,0.80,0.95), mean=0.673, stddev=0.0543], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.13,0.14,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.179, stddev=0.0168] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0356089, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.91,-0.75,-0.51 -0.35,-0.21,-0.02,0.19,0.35 0.49,0.84,0.89,0.99), mean=-0.00807, stddev=0.316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.13,0.19,0.30 0.43,0.53,0.63,0.67,0.69 0.70,0.71,0.71,0.75), mean=0.586, stddev=0.123] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222333
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00110193
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000188808, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07076, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.1,1.1 1.1,1.2,1.6,1.9,2.0 2.1,2.1,2.1,2.2), mean=1.57, stddev=0.354], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.59,0.79,0.89 0.95,1.0,1.1,1.3,1.3 1.4,1.4,1.4,1.6), mean=1.13, stddev=0.16], bias-{mean,stddev}=0.004126,0.0847, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000188808, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03962, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.50,0.52,0.54 0.56,0.58,0.63,0.68,0.71 0.75,0.79,0.82,1.9), mean=0.633, stddev=0.0844], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.3,1.4,1.8,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.78, stddev=0.362], bias-{mean,stddev}=5.354e-09,0.02174, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0136], oderiv-count=632320
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/146.mdl exp/nnet3/tdnn_lstm1c_sp/147.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.43832 tdnn2.affine:7.51391 lstm1.W_all:6.11527 lstm1.lstm_nonlin:0.112507 lstm1.W_rp:2.54214 tdnn3.affine:4.67021 tdnn4.affine:5.3541 lstm2.W_all:4.09425 lstm2.lstm_nonlin:0.050262 lstm2.W_rp:1.71805 tdnn5.affine:3.82261 tdnn6.affine:4.47512 lstm3.W_all:5.65927 lstm3.lstm_nonlin:0.123536 lstm3.W_rp:2.21711 output.affine:4.87384 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.7756 tdnn2.affine:10.8725 lstm1.W_all:19.3637 lstm1.lstm_nonlin:1.44644 lstm1.W_rp:11.123 tdnn3.affine:7.75854 tdnn4.affine:8.08217 lstm2.W_all:15.3824 lstm2.lstm_nonlin:0.641596 lstm2.W_rp:10.3654 tdnn5.affine:7.25524 tdnn6.affine:7.70022 lstm3.W_all:22.4814 lstm3.lstm_nonlin:1.96238 lstm3.W_rp:26.0533 output.affine:29.3184 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.629612 tdnn2.affine:0.692719 lstm1.W_all:0.314978 lstm1.lstm_nonlin:0.077024 lstm1.W_rp:0.228149 tdnn3.affine:0.599108 tdnn4.affine:0.66248 lstm2.W_all:0.266013 lstm2.lstm_nonlin:0.0784814 lstm2.W_rp:0.165185 tdnn5.affine:0.525907 tdnn6.affine:0.579566 lstm3.W_all:0.251252 lstm3.lstm_nonlin:0.0629221 lstm3.W_rp:0.0851679 output.affine:0.166236 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:59:11 KST 2020, elapsed time 0 seconds
