# nnet3-info exp/nnet3/tdnn_lstm1c_sp/111.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/110.mdl exp/nnet3/tdnn_lstm1c_sp/111.mdl 
# Started at Thu Jul 30 10:44:59 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/111.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000211644, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0304, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.02 0.06,0.43,0.53,0.61,0.67 0.72,0.77,0.83,1.1), mean=0.485, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.17,0.21,0.59,0.80,1.1 1.4,1.5,1.5,1.6), mean=0.59, stddev=0.364], bias-{mean,stddev}=0.003248,0.05773, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.16e+05, self-repaired-proportion=0.0968815, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,5e-06,1e-05,4e-05 0.0003,0.02,0.06,0.09,0.10 0.11,0.13,0.14,0.18), mean=0.0596, stddev=0.0357], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.003,0.004,0.02 0.06,0.25,0.48,0.63,0.74 0.81,0.87,0.90,0.97), mean=0.45, stddev=0.23], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.03 0.12,0.28,0.37,0.44,0.51 0.55,0.62,0.67,1.6), mean=0.354, stddev=0.154], oderiv-count=1.19437e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39482.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-06,3e-06,1e-05 0.0001,0.02,0.06,0.08,0.10 0.12,0.13,0.14,0.17), mean=0.0575, stddev=0.0355], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,6e-05,7e-05,0.0002 0.0008,0.06,0.09,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.0811, stddev=0.0387]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000211644, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01242, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.41 0.42,0.45,0.48,0.52,0.56 0.58,0.62,0.65,0.76), mean=0.488, stddev=0.0541], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.006,0.01 0.03,0.25,0.29,0.33,0.35 0.37,0.39,0.40,0.80), mean=0.262, stddev=0.107], bias-{mean,stddev}=-0.001032,0.0278, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.29 0.31,0.32,0.34,0.38,0.40 0.42,0.46,0.47,0.57), mean=0.348, stddev=0.0413], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.42 0.42,0.44,0.46,0.48,0.50 0.51,0.52,0.52,0.55), mean=0.46, stddev=0.0281], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.043, stddev=0.00806], oderiv-count=1.14022e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38642.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.27,0.28,0.29 0.30,0.31,0.34,0.37,0.40 0.42,0.45,0.47,0.59), mean=0.345, stddev=0.044], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.49,0.51 0.52,0.55,0.60,0.66,0.69 0.72,0.76,0.78,0.91), mean=0.608, stddev=0.0677]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000211644, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01712, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.001,0.004,0.02 0.10,0.21,0.38,0.56,0.65 0.73,0.82,0.88,1.1), mean=0.384, stddev=0.207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.37,0.40,0.45 0.49,0.67,0.80,0.88,0.92 0.96,1.0,1.0,1.2), mean=0.766, stddev=0.155], bias-{mean,stddev}=-0.002303,0.02154, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000211644, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02217, w_fc-rms=0.0348, w_oc-rms=0.04866, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0062671, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.43,0.43,0.44 0.45,0.46,0.49,0.52,0.56 0.60,0.65,0.67,0.71), mean=0.497, stddev=0.0497], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.21 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0146] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0062671, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.38,0.41 0.42,0.44,0.48,0.53,0.59 0.66,0.76,0.79,0.84), mean=0.497, stddev=0.0794], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.17,0.19 0.21,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0193] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00817812, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.80,-0.69,-0.55 -0.36,-0.19,-0.005,0.18,0.33 0.56,0.70,0.78,0.83), mean=-0.0018, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.29,0.31,0.36 0.42,0.48,0.59,0.73,0.92 0.99,1.0,1.0,1.0), mean=0.614, stddev=0.172] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0062671, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.40,0.41 0.43,0.44,0.47,0.50,0.52 0.55,0.57,0.58,0.64), mean=0.476, stddev=0.0404], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0171] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0179995, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.84,-0.67,-0.49 -0.32,-0.18,-0.004,0.16,0.30 0.51,0.73,0.82,0.89), mean=-0.00329, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.20,0.27,0.47 0.59,0.73,0.83,0.89,0.96 1.0,1.0,1.0,1.0), mean=0.794, stddev=0.157] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=293700
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000211644, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03078, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.20 0.22,0.25,0.44,0.97,1.1 1.1,1.1,1.2,1.3), mean=0.607, stddev=0.352], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.03,0.07 0.16,0.32,0.46,0.59,0.67 0.78,0.90,1.0,1.1), mean=0.455, stddev=0.199], bias-{mean,stddev}=-0.001809,0.04353, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000211644, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01251, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.20,0.21,0.23 0.25,0.28,0.33,0.41,0.44 0.47,0.49,0.53,0.73), mean=0.341, stddev=0.0765], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.10,0.18,0.40,0.44 0.47,0.51,0.53,0.60), mean=0.244, stddev=0.148], bias-{mean,stddev}=-0.004073,0.03304, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.93e+05, self-repaired-proportion=0.00192308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.04,0.05,0.06 0.08,0.09,0.12,0.16,0.18 0.19,0.20,0.21,0.27), mean=0.125, stddev=0.0384], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.18,0.20,0.26 0.32,0.38,0.50,0.59,0.64 0.67,0.70,0.72,0.73), mean=0.486, stddev=0.124], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.07,0.07,0.08,0.09,0.10 0.11,0.13,0.13,0.21), mean=0.0836, stddev=0.0164], oderiv-count=1.11078e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36123.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.03,0.04,0.05 0.07,0.09,0.12,0.15,0.17 0.19,0.21,0.21,0.27), mean=0.12, stddev=0.0398], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.10,0.12,0.14 0.16,0.17,0.19,0.22,0.24 0.25,0.27,0.28,0.38), mean=0.196, stddev=0.0355]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000211644, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00919, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.31 0.32,0.33,0.36,0.39,0.41 0.42,0.44,0.45,0.60), mean=0.361, stddev=0.0388], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.14,0.15,0.16 0.17,0.18,0.20,0.23,0.25 0.27,0.28,0.29,0.40), mean=0.207, stddev=0.0342], bias-{mean,stddev}=-0.00991,0.01612, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.47e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.24,0.26,0.29,0.32,0.34 0.36,0.37,0.38,0.47), mean=0.291, stddev=0.0391], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.37,0.39 0.40,0.42,0.45,0.47,0.48 0.49,0.50,0.51,0.52), mean=0.444, stddev=0.0326], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0314, stddev=0.00272], oderiv-count=1.03731e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33604.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.23 0.24,0.25,0.29,0.32,0.34 0.36,0.39,0.41,0.49), mean=0.289, stddev=0.0416], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.44,0.45,0.46 0.49,0.51,0.55,0.60,0.64 0.67,0.70,0.73,0.93), mean=0.557, stddev=0.0636]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000211644, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01346, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,2e-05,3e-05,7e-05 0.0003,0.004,0.28,0.47,0.56 0.61,0.66,0.67,1.1), mean=0.265, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.27,0.31 0.37,0.52,0.63,0.69,0.72 0.75,0.80,0.82,1.1), mean=0.6, stddev=0.129], bias-{mean,stddev}=-0.003571,0.02412, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000211644, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01336, w_fc-rms=0.0173, w_oc-rms=0.02255, count=1.32e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632002, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.45 0.46,0.47,0.50,0.50,0.53 0.56,0.58,0.60,0.65), mean=0.495, stddev=0.0322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0156] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632002, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.43 0.44,0.45,0.50,0.50,0.51 0.55,0.59,0.64,0.71), mean=0.485, stddev=0.0409], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0123] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00819445, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.66,-0.53,-0.34 -0.21,-0.11,0.0001,0.11,0.24 0.37,0.51,0.61,0.77), mean=0.00427, stddev=0.209], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.44,0.46,0.51 0.54,0.57,0.65,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.739, stddev=0.195] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632002, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.44 0.45,0.46,0.50,0.50,0.52 0.54,0.57,0.59,0.63), mean=0.488, stddev=0.0326], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0165] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00632002, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.65,-0.53,-0.33 -0.20,-0.10,0.0003,0.11,0.22 0.35,0.49,0.57,0.81), mean=0.00529, stddev=0.203], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.46,0.54,0.69 0.76,0.81,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.884, stddev=0.113] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=259053
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000211644, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02821, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.32,0.34,0.36 0.37,0.40,0.54,0.83,0.87 0.91,0.93,0.95,1.0), mean=0.61, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.003,0.003 0.006,0.02,0.46,0.60,0.67 0.75,0.81,0.87,0.98), mean=0.366, stddev=0.27], bias-{mean,stddev}=-0.008772,0.1009, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000211644, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01163, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.21 0.23,0.25,0.30,0.37,0.43 0.49,0.52,0.54,0.62), mean=0.315, stddev=0.0809], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.15,0.16,0.24,0.34,0.37 0.39,0.41,0.43,0.50), mean=0.251, stddev=0.0866], bias-{mean,stddev}=0.002005,0.0167, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.69e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.04 0.04,0.05,0.08,0.11,0.12 0.13,0.14,0.15,0.18), mean=0.0816, stddev=0.0308], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.21 0.24,0.29,0.43,0.55,0.60 0.62,0.66,0.68,0.72), mean=0.423, stddev=0.135], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.07,0.08,0.09,0.11,0.12 0.13,0.15,0.15,0.19), mean=0.0947, stddev=0.0198], oderiv-count=979712
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31085.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.03 0.04,0.05,0.08,0.11,0.12 0.13,0.15,0.15,0.19), mean=0.0807, stddev=0.0318], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.10 0.11,0.12,0.14,0.16,0.17 0.18,0.20,0.21,0.25), mean=0.142, stddev=0.0295]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000211644, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008841, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.28 0.29,0.30,0.34,0.39,0.42 0.43,0.44,0.46,0.50), mean=0.346, stddev=0.0485], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.12,0.14 0.15,0.16,0.19,0.23,0.25 0.28,0.31,0.34,0.42), mean=0.197, stddev=0.0444], bias-{mean,stddev}=-0.01195,0.01574, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.87e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.22 0.24,0.26,0.29,0.32,0.34 0.36,0.37,0.38,0.44), mean=0.292, stddev=0.0408], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.34,0.36 0.37,0.39,0.42,0.45,0.46 0.48,0.49,0.50,0.52), mean=0.417, stddev=0.0357], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0264, stddev=0.00281], oderiv-count=981760
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28566.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.20,0.22 0.24,0.26,0.29,0.32,0.34 0.36,0.38,0.40,0.46), mean=0.289, stddev=0.0429], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.43,0.46 0.48,0.51,0.57,0.64,0.68 0.71,0.74,0.76,0.94), mean=0.574, stddev=0.0781]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000211644, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01956, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.24 0.31,0.36,0.43,0.62,0.75 0.80,0.84,0.86,1.4), mean=0.471, stddev=0.165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.58,0.60 0.62,0.65,0.73,1.0,1.4 1.4,1.5,1.5,1.7), mean=0.847, stddev=0.28], bias-{mean,stddev}=0.007652,0.02296, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000211644, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03184, w_fc-rms=0.04494, w_oc-rms=0.06316, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638389, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.48 0.50,0.52,0.58,0.64,0.66 0.69,0.70,0.71,0.80), mean=0.584, stddev=0.0651], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.20,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.204, stddev=0.01] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638389, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.47,0.49 0.50,0.53,0.59,0.64,0.67 0.71,0.75,0.77,0.88), mean=0.591, stddev=0.0673], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.17,0.18 0.19,0.19,0.21,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.203, stddev=0.014] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0101192, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.83,-0.74,-0.55 -0.36,-0.21,-0.01,0.23,0.31 0.45,0.71,0.82,0.88), mean=-0.00651, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.24,0.27,0.30 0.35,0.39,0.44,0.47,0.49 0.50,0.52,0.53,0.54), mean=0.428, stddev=0.0584] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00708205, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.55,0.55,0.58 0.59,0.62,0.66,0.70,0.72 0.74,0.76,0.78,0.95), mean=0.66, stddev=0.0532], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.14,0.15,0.16 0.17,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.182, stddev=0.0153] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0303326, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.89,-0.79,-0.54 -0.34,-0.20,-0.01,0.20,0.32 0.46,0.75,0.88,0.98), mean=-0.00612, stddev=0.309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.15,0.19,0.35 0.45,0.53,0.63,0.68,0.69 0.71,0.73,0.73,0.75), mean=0.597, stddev=0.119] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.47e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=220319
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000211644, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06998, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.6,1.9,2.0 2.0,2.1,2.1,2.2), mean=1.56, stddev=0.326], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.62,0.79,0.88 0.93,1.0,1.1,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.12, stddev=0.153], bias-{mean,stddev}=0.003251,0.0834, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000211644, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03992, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.51,0.52,0.54 0.56,0.58,0.63,0.69,0.72 0.75,0.81,0.83,1.9), mean=0.638, stddev=0.0845], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.3,1.3,1.3 1.4,1.4,1.8,2.1,2.2 2.3,2.3,2.4,2.6), mean=1.8, stddev=0.336], bias-{mean,stddev}=4.979e-09,0.02255, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0167, stddev=0.0139], oderiv-count=504320
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/110.mdl exp/nnet3/tdnn_lstm1c_sp/111.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.05637 tdnn2.affine:8.10789 lstm1.W_all:6.88046 lstm1.lstm_nonlin:0.133213 lstm1.W_rp:2.81541 tdnn3.affine:4.98449 tdnn4.affine:5.75178 lstm2.W_all:4.51428 lstm2.lstm_nonlin:0.0573013 lstm2.W_rp:1.89401 tdnn5.affine:4.0644 tdnn6.affine:4.82167 lstm3.W_all:6.18007 lstm3.lstm_nonlin:0.13114 lstm3.W_rp:2.41986 output.affine:5.31617 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.0794 tdnn2.affine:11.2071 lstm1.W_all:19.9356 lstm1.lstm_nonlin:1.45486 lstm1.W_rp:11.3377 tdnn3.affine:8.00423 tdnn4.affine:8.28805 lstm2.W_all:15.6903 lstm2.lstm_nonlin:0.716197 lstm2.W_rp:10.5011 tdnn5.affine:7.41716 tdnn6.affine:7.97551 lstm3.W_all:22.7741 lstm3.lstm_nonlin:1.91105 lstm3.W_rp:25.7647 output.affine:29.5402 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.675438 tdnn2.affine:0.733964 lstm1.W_all:0.345911 lstm1.lstm_nonlin:0.0926671 lstm1.W_rp:0.248156 tdnn3.affine:0.625673 tdnn4.affine:0.695736 lstm2.W_all:0.28775 lstm2.lstm_nonlin:0.0798023 lstm2.W_rp:0.180369 tdnn5.affine:0.554495 tdnn6.affine:0.610434 lstm3.W_all:0.271715 lstm3.lstm_nonlin:0.0685805 lstm3.W_rp:0.0939522 output.affine:0.179872 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:44:59 KST 2020, elapsed time 0 seconds
