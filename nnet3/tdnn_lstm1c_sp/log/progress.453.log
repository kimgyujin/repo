# nnet3-info exp/nnet3/tdnn_lstm1c_sp/453.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/452.mdl exp/nnet3/tdnn_lstm1c_sp/453.mdl 
# Started at Thu Jul 30 13:00:45 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/453.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=7.35031e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03255, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.007 0.009,0.02,0.58,0.73,0.80 0.86,0.93,0.96,1.3), mean=0.471, stddev=0.309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.19,0.23,0.69,0.93,1.1 1.3,1.4,1.4,1.4), mean=0.65, stddev=0.358], bias-{mean,stddev}=-0.007373,0.06073, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0.165909, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,2e-05,2e-05,4e-05 7e-05,0.0002,0.04,0.09,0.11 0.12,0.14,0.15,0.18), mean=0.0434, stddev=0.0443], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.05,0.07,0.35,0.60,0.71 0.78,0.88,0.92,0.97), mean=0.342, stddev=0.265], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.009,0.01 0.02,0.05,0.43,0.63,0.76 0.86,0.97,1.1,1.8), mean=0.412, stddev=0.288], oderiv-count=1.12736e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=41326.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,1e-05,2e-05,3e-05 7e-05,0.0002,0.04,0.08,0.11 0.12,0.15,0.15,0.19), mean=0.0432, stddev=0.0443], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0001,0.0002 0.0003,0.001,0.07,0.11,0.12 0.13,0.14,0.15,0.16), mean=0.0603, stddev=0.0502]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.35031e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01145, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.34,0.35 0.37,0.39,0.44,0.49,0.54 0.58,0.61,0.64,0.71), mean=0.447, stddev=0.0684], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.005,0.01,0.27,0.33,0.37 0.39,0.42,0.50,0.77), mean=0.217, stddev=0.145], bias-{mean,stddev}=-0.0357,0.03768, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.63e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.18 0.19,0.21,0.24,0.28,0.30 0.31,0.33,0.36,0.42), mean=0.246, stddev=0.0418], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.35,0.37,0.39 0.40,0.41,0.44,0.47,0.49 0.51,0.52,0.52,0.56), mean=0.443, stddev=0.0375], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.05,0.07,0.07 0.08,0.09,0.10,0.11), mean=0.0583, stddev=0.012], oderiv-count=1.16045e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40445.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.18 0.20,0.21,0.25,0.28,0.30 0.32,0.34,0.37,0.43), mean=0.249, stddev=0.0431], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.32,0.34,0.36 0.38,0.40,0.45,0.50,0.53 0.56,0.58,0.60,0.66), mean=0.45, stddev=0.0599]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.35031e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01737, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,5e-07,1e-06,8e-06 0.0002,0.18,0.40,0.58,0.65 0.72,0.80,0.88,1.1), mean=0.38, stddev=0.228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.38,0.41 0.48,0.69,0.80,0.89,0.95 1.0,1.1,1.2,1.3), mean=0.774, stddev=0.171], bias-{mean,stddev}=0.0006533,0.02273, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.35031e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04913, w_fc-rms=0.02145, w_oc-rms=0.03991, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.43 0.44,0.45,0.48,0.50,0.54 0.64,0.72,0.73,0.79), mean=0.491, stddev=0.0636], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0157] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.46,0.47,0.50,0.51,0.55 0.61,0.67,0.71,0.77), mean=0.501, stddev=0.0513], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0135] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0064663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.82,-0.77,-0.44 -0.28,-0.13,0.0008,0.15,0.28 0.59,0.75,0.81,0.86), mean=0.014, stddev=0.282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.27,0.30,0.33 0.41,0.46,0.57,0.71,1.0 1.0,1.0,1.0,1.0), mean=0.615, stddev=0.202] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.55,0.58,0.65), mean=0.461, stddev=0.0413], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0185] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00864871, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.79,-0.74,-0.38 -0.21,-0.11,0.0004,0.13,0.23 0.45,0.66,0.79,0.89), mean=0.0109, stddev=0.25], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.28,0.34,0.48 0.67,0.76,0.84,0.91,1.0 1.0,1.0,1.0,1.0), mean=0.821, stddev=0.15] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.53879e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.86312e-05, count-zeroing-boundaries=295203
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0528926
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.35031e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0384, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.44,0.46 0.51,0.56,0.84,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.835, stddev=0.264], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0005,0.0008,0.002 0.006,0.40,0.55,0.71,0.88 1.1,1.3,1.4,1.6), mean=0.536, stddev=0.309], bias-{mean,stddev}=0.0113,0.2541, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=7.35031e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01225, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.23,0.24,0.26 0.27,0.29,0.33,0.38,0.41 0.44,0.47,0.48,0.55), mean=0.338, stddev=0.0546], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.26,0.35,0.38 0.40,0.43,0.44,0.47), mean=0.266, stddev=0.0867], bias-{mean,stddev}=0.0009029,0.01032, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.69e+05, self-repaired-proportion=0.00025641, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.03,0.05,0.08,0.12,0.13 0.14,0.16,0.16,0.18), mean=0.0813, stddev=0.037], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.16 0.21,0.29,0.43,0.54,0.60 0.65,0.67,0.70,0.82), mean=0.419, stddev=0.145], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.09,0.10,0.12,0.15,0.18 0.21,0.24,0.25,0.32), mean=0.129, stddev=0.0388], oderiv-count=1.0928e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37803.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.13 0.14,0.15,0.16,0.19), mean=0.0812, stddev=0.0363], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.07 0.09,0.11,0.14,0.16,0.18 0.18,0.20,0.20,0.22), mean=0.135, stddev=0.0331]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.35031e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008075, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.26,0.27 0.28,0.29,0.31,0.34,0.36 0.38,0.40,0.41,0.43), mean=0.317, stddev=0.0349], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.13,0.13,0.14 0.15,0.15,0.17,0.20,0.22 0.24,0.27,0.29,0.37), mean=0.181, stddev=0.0339], bias-{mean,stddev}=-0.02888,0.01705, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.20,0.21,0.24,0.27,0.28 0.30,0.31,0.33,0.35), mean=0.239, stddev=0.0323], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.36,0.36,0.37 0.38,0.39,0.42,0.44,0.46 0.47,0.48,0.48,0.50), mean=0.418, stddev=0.0301], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.0386, stddev=0.00276], oderiv-count=1.04749e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35162, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.20,0.21,0.24,0.27,0.29 0.30,0.32,0.33,0.37), mean=0.243, stddev=0.0328], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.35,0.39,0.40 0.42,0.43,0.47,0.52,0.54 0.57,0.61,0.63,0.80), mean=0.477, stddev=0.0548]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.35031e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01415, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,5e-06,1e-05 5e-05,0.001,0.32,0.50,0.58 0.63,0.67,0.70,0.85), mean=0.279, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.34 0.40,0.59,0.66,0.72,0.76 0.79,0.85,0.89,1.3), mean=0.632, stddev=0.132], bias-{mean,stddev}=0.002869,0.0268, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.35031e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03077, w_fc-rms=0.01403, w_oc-rms=0.03664, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652058, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.45 0.46,0.48,0.50,0.51,0.54 0.57,0.62,0.64,0.72), mean=0.5, stddev=0.0373], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0134] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652058, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.45,0.46 0.47,0.48,0.50,0.51,0.53 0.56,0.60,0.61,0.67), mean=0.5, stddev=0.0312], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0118] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00652058, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.72,-0.66,-0.35 -0.21,-0.09,0.0002,0.10,0.26 0.42,0.56,0.62,0.72), mean=0.00538, stddev=0.225], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.38,0.41,0.45 0.49,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.724, stddev=0.212] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652058, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.42,0.43 0.45,0.46,0.50,0.50,0.51 0.52,0.56,0.56,0.72), mean=0.486, stddev=0.0304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0174] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00652058, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.60,-0.56,-0.29 -0.18,-0.08,0.0002,0.09,0.21 0.37,0.47,0.54,0.69), mean=0.00505, stddev=0.195], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.52,0.58,0.64 0.72,0.79,0.87,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.874, stddev=0.119] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.89754e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.92022e-06, count-zeroing-boundaries=260386
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0528926
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.35031e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03629, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.46,0.52 0.54,0.59,0.79,1.0,1.1 1.1,1.1,1.2,1.3), mean=0.8, stddev=0.211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.004,0.01,0.58,0.77,0.86 0.97,1.1,1.1,1.3), mean=0.465, stddev=0.355], bias-{mean,stddev}=-0.003086,0.2005, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=7.35031e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01144, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.21,0.23 0.25,0.26,0.30,0.36,0.39 0.43,0.46,0.48,0.51), mean=0.314, stddev=0.0588], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.23,0.33,0.36 0.38,0.40,0.41,0.44), mean=0.25, stddev=0.076], bias-{mean,stddev}=0.001514,0.00753, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.73e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.03,0.04,0.06,0.09,0.10 0.12,0.13,0.14,0.16), mean=0.0643, stddev=0.0292], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.15 0.20,0.27,0.40,0.50,0.55 0.60,0.61,0.63,0.66), mean=0.39, stddev=0.13], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.09 0.10,0.10,0.12,0.14,0.18 0.20,0.22,0.23,0.28), mean=0.127, stddev=0.033], oderiv-count=958016
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32520.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.03,0.04,0.06,0.09,0.10 0.12,0.13,0.14,0.16), mean=0.0658, stddev=0.0293], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.08,0.09,0.12,0.14,0.15 0.16,0.17,0.17,0.20), mean=0.116, stddev=0.0281]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.35031e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008145, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.16,0.23 0.26,0.28,0.32,0.36,0.38 0.40,0.41,0.41,0.44), mean=0.317, stddev=0.055], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.12,0.13 0.14,0.15,0.17,0.21,0.24 0.26,0.30,0.34,0.39), mean=0.181, stddev=0.0427], bias-{mean,stddev}=-0.02437,0.02108, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.31e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.18 0.20,0.22,0.25,0.28,0.29 0.30,0.33,0.34,0.37), mean=0.249, stddev=0.0401], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.35,0.36 0.37,0.39,0.41,0.44,0.45 0.46,0.48,0.49,0.51), mean=0.411, stddev=0.0305], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0317, stddev=0.00337], oderiv-count=920000
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29878.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.18 0.20,0.22,0.26,0.28,0.30 0.31,0.33,0.35,0.37), mean=0.253, stddev=0.0406], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.24,0.35 0.40,0.44,0.50,0.57,0.59 0.62,0.65,0.67,0.74), mean=0.498, stddev=0.0863]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.35031e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02039, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.26 0.28,0.33,0.47,0.67,0.73 0.78,0.82,0.86,0.94), mean=0.493, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.51,0.57,0.66 0.73,0.76,0.83,1.1,1.2 1.3,1.4,1.6,1.8), mean=0.906, stddev=0.21], bias-{mean,stddev}=0.01459,0.01727, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.35031e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.08388, w_fc-rms=0.04077, w_oc-rms=0.06085, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00658608, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.56,0.58,0.60 0.61,0.64,0.69,0.73,0.75 0.77,0.80,0.80,0.83), mean=0.685, stddev=0.0527], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.22), mean=0.18, stddev=0.0154] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00658608, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.53,0.54 0.56,0.58,0.62,0.66,0.72 0.76,0.79,0.81,0.85), mean=0.624, stddev=0.0628], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.17,0.18,0.20,0.21,0.21 0.21,0.22,0.22,0.22), mean=0.194, stddev=0.0181] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00844773, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.81,-0.71,-0.54 -0.42,-0.28,-0.02,0.26,0.40 0.55,0.69,0.74,0.87), mean=-0.00978, stddev=0.326], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.24,0.28 0.31,0.36,0.41,0.44,0.47 0.48,0.51,0.52,0.53), mean=0.398, stddev=0.0606] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00658608, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.52,0.54 0.56,0.59,0.63,0.67,0.69 0.71,0.75,0.79,0.89), mean=0.632, stddev=0.0541], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.13,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.19,0.19,0.19,0.20), mean=0.174, stddev=0.0152] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0177134, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.84,-0.73,-0.59 -0.40,-0.28,0.0008,0.24,0.36 0.54,0.70,0.76,0.89), mean=-0.0124, stddev=0.324], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.22,0.30 0.37,0.45,0.56,0.61,0.63 0.65,0.66,0.67,0.70), mean=0.527, stddev=0.103] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.1288e-05, count-zeroing-boundaries=221475
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0528926
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.35031e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08635, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.1,1.1 1.1,1.2,1.7,2.5,2.6 2.6,2.7,2.8,3.0), mean=1.87, stddev=0.612], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.99,1.1,1.1 1.2,1.2,1.3,1.5,1.7 1.8,1.9,2.0,2.0), mean=1.38, stddev=0.213], bias-{mean,stddev}=-0.0411,0.4352, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=7.35031e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04081, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.55,0.56,0.58 0.59,0.61,0.64,0.69,0.71 0.75,0.79,0.85,2.2), mean=0.653, stddev=0.0825], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.98,1.0,1.1 1.1,1.2,1.6,2.4,2.5 2.5,2.6,2.6,2.6), mean=1.78, stddev=0.58], bias-{mean,stddev}=2.953e-09,0.02536, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0168, stddev=0.0137], oderiv-count=580800
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/452.mdl exp/nnet3/tdnn_lstm1c_sp/453.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.78593 tdnn2.affine:2.53096 lstm1.W_all:1.88339 lstm1.lstm_nonlin:0.0391991 lstm1.W_rp:0.863396 tdnn3.affine:1.73723 tdnn4.affine:1.77036 lstm2.W_all:1.27371 lstm2.lstm_nonlin:0.0205784 lstm2.W_rp:0.582025 tdnn5.affine:1.45713 tdnn6.affine:1.57357 lstm3.W_all:1.79594 lstm3.lstm_nonlin:0.0398555 lstm3.W_rp:0.6296 output.affine:1.38622 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.93 tdnn2.affine:10.378 lstm1.W_all:20.2263 lstm1.lstm_nonlin:1.52404 lstm1.W_rp:14.7021 tdnn3.affine:7.80459 tdnn4.affine:7.31289 lstm2.W_all:16.5037 lstm2.lstm_nonlin:1.13702 lstm2.W_rp:13.731 tdnn5.affine:7.2877 tdnn6.affine:7.37238 lstm3.W_all:23.7285 lstm3.lstm_nonlin:2.53939 lstm3.W_rp:32.5244 output.affine:30.2049 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.215399 tdnn2.affine:0.24394 lstm1.W_all:0.0931205 lstm1.lstm_nonlin:0.0256351 lstm1.W_rp:0.0586945 tdnn3.affine:0.222637 tdnn4.affine:0.241819 lstm2.W_all:0.0771672 lstm2.lstm_nonlin:0.0180028 lstm2.W_rp:0.0423426 tdnn5.affine:0.199627 tdnn6.affine:0.213383 lstm3.W_all:0.0756548 lstm3.lstm_nonlin:0.0156077 lstm3.W_rp:0.0193459 output.affine:0.0458711 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 13:00:45 KST 2020, elapsed time 0 seconds
