# nnet3-info exp/nnet3/tdnn_lstm1c_sp/257.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/256.mdl exp/nnet3/tdnn_lstm1c_sp/257.mdl 
# Started at Thu Jul 30 11:42:41 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/257.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00025483, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.035, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.03,0.10,0.61,0.75,0.83 0.95,1.0,1.0,1.3), mean=0.527, stddev=0.299], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.19,0.23,0.66,0.94,1.3 1.6,1.7,1.8,1.8), mean=0.675, stddev=0.426], bias-{mean,stddev}=0.0005166,0.06523, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.12e+06, self-repaired-proportion=0.222126, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-06,8e-06,3e-05 9e-05,0.0004,0.07,0.10,0.12 0.15,0.16,0.17,0.24), mean=0.0637, stddev=0.0487], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.001,0.002,0.01 0.02,0.05,0.45,0.61,0.69 0.78,0.86,0.89,0.99), mean=0.394, stddev=0.255], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.15,0.26,0.34,0.39 0.48,0.58,0.66,1.4), mean=0.258, stddev=0.15], oderiv-count=1.17997e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35562.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,2e-06,4e-06,2e-05 6e-05,0.0005,0.06,0.10,0.12 0.14,0.17,0.18,0.27), mean=0.0607, stddev=0.0478], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0001,0.0001,0.0003 0.0005,0.003,0.11,0.13,0.14 0.15,0.16,0.17,0.18), mean=0.0859, stddev=0.0542]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00025483, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0132, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.40,0.42 0.44,0.46,0.50,0.57,0.61 0.65,0.69,0.72,0.80), mean=0.517, stddev=0.0693], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.006,0.007,0.01 0.02,0.06,0.31,0.37,0.40 0.43,0.47,0.49,0.83), mean=0.264, stddev=0.145], bias-{mean,stddev}=-0.01939,0.04045, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.29 0.31,0.32,0.35,0.40,0.42 0.46,0.49,0.52,0.57), mean=0.36, stddev=0.0505], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.38,0.40 0.41,0.43,0.45,0.48,0.49 0.51,0.53,0.53,0.55), mean=0.451, stddev=0.0335], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.07), mean=0.0376, stddev=0.00704], oderiv-count=1.23219e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34814.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.28,0.29 0.31,0.32,0.36,0.41,0.44 0.47,0.51,0.54,0.59), mean=0.367, stddev=0.0541], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.52,0.53,0.55 0.57,0.59,0.65,0.72,0.77 0.79,0.83,0.85,1.1), mean=0.661, stddev=0.0763]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00025483, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01869, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,4e-06,2e-05,9e-05 0.002,0.17,0.42,0.63,0.73 0.79,0.86,0.93,1.2), mean=0.405, stddev=0.251], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.40,0.46 0.54,0.74,0.86,0.96,1.0 1.1,1.2,1.2,1.3), mean=0.834, stddev=0.177], bias-{mean,stddev}=0.000451,0.02726, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00025483, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04792, w_fc-rms=0.02799, w_oc-rms=0.04146, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625032, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.42 0.44,0.45,0.47,0.50,0.54 0.66,0.79,0.81,0.84), mean=0.49, stddev=0.0753], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.18 0.19,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0234] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625032, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.41,0.42,0.44 0.45,0.47,0.50,0.52,0.57 0.64,0.74,0.77,0.83), mean=0.504, stddev=0.0636], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0208] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0363088, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.90,-0.85,-0.51 -0.30,-0.16,0.002,0.18,0.34 0.54,0.84,0.88,0.91), mean=0.0134, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.18,0.25 0.34,0.41,0.54,0.78,1.0 1.0,1.0,1.0,1.0), mean=0.586, stddev=0.226] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625032, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.39 0.40,0.42,0.44,0.50,0.50 0.50,0.53,0.55,0.63), mean=0.45, stddev=0.0406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.216, stddev=0.0223] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00625032, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.78,-0.66,-0.38 -0.20,-0.09,0.001,0.12,0.23 0.34,0.64,0.75,0.81), mean=0.0102, stddev=0.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.34,0.36,0.53 0.72,0.80,0.88,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.851, stddev=0.136] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.75323e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.00768e-05, count-zeroing-boundaries=299233
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.171901
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00025483, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04064, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.31,0.34 0.38,0.43,0.84,1.2,1.3 1.4,1.4,1.5,1.5), mean=0.841, stddev=0.389], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.002,0.004 0.01,0.29,0.54,0.75,0.89 1.2,1.6,1.8,2.0), mean=0.549, stddev=0.358], bias-{mean,stddev}=0.01346,0.2797, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00025483, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0138, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.20,0.21,0.24 0.27,0.30,0.37,0.45,0.50 0.53,0.57,0.57,0.71), mean=0.375, stddev=0.0889], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.12,0.14,0.28,0.42,0.45 0.48,0.49,0.51,0.54), mean=0.285, stddev=0.134], bias-{mean,stddev}=0.004352,0.01512, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.11e+05, self-repaired-proportion=0.00348331, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.03,0.04,0.06 0.08,0.09,0.12,0.15,0.16 0.19,0.20,0.22,0.24), mean=0.122, stddev=0.0372], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.17,0.19,0.26 0.32,0.38,0.49,0.59,0.63 0.66,0.68,0.71,0.77), mean=0.482, stddev=0.124], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.07,0.07,0.08,0.10,0.11 0.13,0.15,0.15,0.25), mean=0.0886, stddev=0.0215], oderiv-count=1.04442e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32571.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.03,0.04,0.06 0.07,0.09,0.12,0.15,0.16 0.18,0.21,0.22,0.25), mean=0.121, stddev=0.0371], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.11,0.13,0.15 0.16,0.17,0.19,0.22,0.24 0.25,0.27,0.28,0.34), mean=0.194, stddev=0.0337]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00025483, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009753, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.30,0.31,0.32 0.33,0.34,0.38,0.42,0.45 0.47,0.50,0.52,0.61), mean=0.382, stddev=0.0473], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.13,0.14,0.15 0.17,0.18,0.21,0.25,0.28 0.30,0.33,0.35,0.41), mean=0.218, stddev=0.0462], bias-{mean,stddev}=-0.02115,0.0189, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.92e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.26 0.27,0.29,0.33,0.36,0.38 0.39,0.41,0.42,0.53), mean=0.326, stddev=0.0405], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.38,0.38 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.50,0.51), mean=0.434, stddev=0.0297], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0302, stddev=0.00245], oderiv-count=1.10416e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30327.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.27 0.28,0.29,0.33,0.36,0.39 0.40,0.42,0.42,0.53), mean=0.329, stddev=0.0428], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.50,0.51,0.53 0.55,0.57,0.62,0.69,0.74 0.79,0.82,0.84,1.1), mean=0.634, stddev=0.0789]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00025483, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01548, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,8e-07,1e-06,3e-06 1e-05,0.0003,0.34,0.56,0.64 0.68,0.73,0.77,1.0), mean=0.301, stddev=0.255], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.32,0.35,0.39 0.49,0.63,0.70,0.78,0.82 0.88,0.95,1.0,1.4), mean=0.692, stddev=0.138], bias-{mean,stddev}=0.0006296,0.04787, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00025483, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02311, w_fc-rms=0.01212, w_oc-rms=0.02904, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630602, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.42,0.43 0.44,0.45,0.50,0.51,0.57 0.61,0.67,0.71,0.81), mean=0.499, stddev=0.0581], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.019] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630602, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.41,0.42 0.44,0.46,0.50,0.50,0.54 0.57,0.62,0.64,0.75), mean=0.494, stddev=0.0454], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0172] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0115912, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.80,-0.69,-0.48 -0.29,-0.15,0.0006,0.15,0.34 0.54,0.75,0.78,0.88), mean=0.00889, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.26,0.38 0.44,0.50,0.60,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.698, stddev=0.24] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630602, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.41 0.42,0.44,0.50,0.50,0.51 0.55,0.56,0.58,0.75), mean=0.479, stddev=0.0416], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0203] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00630602, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.53,-0.46,-0.30 -0.19,-0.10,0.0002,0.10,0.23 0.37,0.53,0.59,0.70), mean=0.00817, stddev=0.196], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.49,0.56,0.68 0.75,0.82,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.894, stddev=0.111] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.75e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.14375e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.89489e-05, count-zeroing-boundaries=263868
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.171901
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00025483, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03923, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.44,0.47,0.52 0.56,0.58,0.85,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.856, stddev=0.261], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0008,0.001 0.002,0.007,0.59,0.84,0.95 1.1,1.3,1.4,1.6), mean=0.49, stddev=0.4], bias-{mean,stddev}=-0.0003155,0.2138, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00025483, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01314, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.26 0.28,0.30,0.34,0.41,0.47 0.51,0.56,0.57,0.61), mean=0.359, stddev=0.0758], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.39,0.42 0.44,0.45,0.46,0.52), mean=0.284, stddev=0.0962], bias-{mean,stddev}=0.001361,0.007882, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.97e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.03,0.04 0.05,0.07,0.10,0.12,0.14 0.14,0.16,0.17,0.21), mean=0.0955, stddev=0.0329], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.18,0.19,0.23 0.28,0.34,0.47,0.57,0.61 0.63,0.66,0.67,0.72), mean=0.456, stddev=0.123], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.08,0.09,0.10,0.12 0.14,0.15,0.16,0.19), mean=0.0949, stddev=0.0188], oderiv-count=1.07507e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28083.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.07,0.10,0.13,0.14 0.15,0.16,0.17,0.20), mean=0.0968, stddev=0.0335], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.14,0.16,0.18,0.20 0.21,0.23,0.23,0.25), mean=0.161, stddev=0.0298]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00025483, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009698, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.23,0.28 0.30,0.33,0.38,0.43,0.46 0.48,0.49,0.50,0.59), mean=0.378, stddev=0.0627], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.15 0.16,0.17,0.20,0.25,0.28 0.32,0.35,0.38,0.46), mean=0.215, stddev=0.0522], bias-{mean,stddev}=-0.02166,0.02449, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.16e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.22,0.26 0.28,0.30,0.34,0.37,0.39 0.40,0.42,0.44,0.55), mean=0.335, stddev=0.0455], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.37 0.38,0.40,0.42,0.44,0.45 0.46,0.47,0.49,0.51), mean=0.418, stddev=0.0284], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0251, stddev=0.00212], oderiv-count=969760
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25839.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.23,0.26 0.28,0.30,0.34,0.38,0.40 0.41,0.44,0.44,0.59), mean=0.341, stddev=0.0498], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.40,0.41,0.49 0.55,0.60,0.67,0.76,0.82 0.85,0.89,0.91,1.2), mean=0.675, stddev=0.112]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00025483, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02221, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.29,0.30,0.32 0.34,0.38,0.51,0.71,0.80 0.85,0.88,0.91,1.4), mean=0.541, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.63,0.67,0.73 0.77,0.80,0.88,1.2,1.4 1.5,1.7,1.8,2.1), mean=0.979, stddev=0.258], bias-{mean,stddev}=0.02097,0.02489, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00025483, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0797, w_fc-rms=0.05078, w_oc-rms=0.05597, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063733, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.57,0.59 0.61,0.64,0.69,0.73,0.76 0.79,0.81,0.82,0.86), mean=0.688, stddev=0.0574], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.14 0.15,0.17,0.18,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.178, stddev=0.0195] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063733, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.49,0.51,0.54 0.56,0.59,0.65,0.69,0.74 0.78,0.83,0.84,0.88), mean=0.649, stddev=0.0709], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.14 0.15,0.17,0.19,0.20,0.20 0.21,0.21,0.21,0.22), mean=0.182, stddev=0.021] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.027201, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.81,-0.71,-0.59 -0.41,-0.28,-0.01,0.27,0.38 0.54,0.71,0.77,0.90), mean=-0.00674, stddev=0.327], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.20,0.24 0.28,0.35,0.42,0.46,0.49 0.50,0.51,0.52,0.59), mean=0.401, stddev=0.0761] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063733, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.50,0.51,0.54 0.56,0.59,0.62,0.66,0.68 0.70,0.73,0.76,0.82), mean=0.619, stddev=0.0494], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.17,0.19,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.182, stddev=0.0162] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0063733, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.73,-0.66,-0.53 -0.34,-0.23,-0.01,0.23,0.31 0.50,0.66,0.69,0.85), mean=-0.00678, stddev=0.286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.31,0.35,0.40 0.48,0.56,0.65,0.69,0.71 0.73,0.75,0.75,0.77), mean=0.622, stddev=0.0951] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.6864e-06, count-zeroing-boundaries=224336
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.171901
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00025483, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08299, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.1,1.1 1.2,1.2,1.6,2.4,2.5 2.5,2.6,2.7,2.8), mean=1.81, stddev=0.549], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.99,1.0,1.0 1.1,1.1,1.3,1.5,1.7 1.8,1.9,1.9,2.1), mean=1.32, stddev=0.228], bias-{mean,stddev}=-0.03855,0.4658, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00025483, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04388, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.62 0.63,0.65,0.69,0.74,0.77 0.80,0.87,0.92,2.4), mean=0.702, stddev=0.0906], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.6,2.7,2.7,2.8), mean=1.94, stddev=0.533], bias-{mean,stddev}=7.011e-09,0.02967, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=560320
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/256.mdl exp/nnet3/tdnn_lstm1c_sp/257.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.43561 tdnn2.affine:5.32692 lstm1.W_all:4.37725 lstm1.lstm_nonlin:0.104119 lstm1.W_rp:1.73589 tdnn3.affine:3.54368 tdnn4.affine:3.98833 lstm2.W_all:3.08324 lstm2.lstm_nonlin:0.0561834 lstm2.W_rp:1.24682 tdnn5.affine:2.90049 tdnn6.affine:3.32982 lstm3.W_all:3.77714 lstm3.lstm_nonlin:0.0964988 lstm3.W_rp:1.67426 output.affine:3.72657 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.9024 tdnn2.affine:11.9372 lstm1.W_all:21.7645 lstm1.lstm_nonlin:1.57957 lstm1.W_rp:15.6105 tdnn3.affine:8.79357 tdnn4.affine:8.80789 lstm2.W_all:18.127 lstm2.lstm_nonlin:0.890219 lstm2.W_rp:14.8311 tdnn5.affine:8.36771 tdnn6.affine:8.7664 lstm3.W_all:25.8626 lstm3.lstm_nonlin:2.50469 lstm3.W_rp:31.4322 output.affine:32.48 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.386773 tdnn2.affine:0.440315 lstm1.W_all:0.201 lstm1.lstm_nonlin:0.0664005 lstm1.W_rp:0.111325 tdnn3.affine:0.397751 tdnn4.affine:0.446387 lstm2.W_all:0.170059 lstm2.lstm_nonlin:0.0643322 lstm2.W_rp:0.0843277 tdnn5.affine:0.341612 tdnn6.affine:0.373122 lstm3.W_all:0.14617 lstm3.lstm_nonlin:0.0388928 lstm3.W_rp:0.0534441 output.affine:0.115003 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:42:41 KST 2020, elapsed time 0 seconds
