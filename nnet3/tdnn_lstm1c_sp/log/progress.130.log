# nnet3-info exp/nnet3/tdnn_lstm1c_sp/130.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/129.mdl exp/nnet3/tdnn_lstm1c_sp/130.mdl 
# Started at Thu Jul 30 10:52:28 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/130.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000199267, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02985, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.009,0.01,0.02 0.04,0.40,0.53,0.61,0.66 0.71,0.76,0.85,1.1), mean=0.471, stddev=0.213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.17,0.21,0.58,0.79,1.1 1.4,1.5,1.5,1.7), mean=0.579, stddev=0.358], bias-{mean,stddev}=0.003671,0.05904, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0.123496, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-07,3e-06,9e-06,4e-05 0.0002,0.007,0.06,0.09,0.10 0.11,0.13,0.15,0.24), mean=0.0589, stddev=0.0389], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.003,0.02 0.04,0.15,0.48,0.62,0.73 0.81,0.86,0.89,0.98), mean=0.437, stddev=0.239], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.08,0.27,0.37,0.46,0.51 0.57,0.69,0.73,1.7), mean=0.353, stddev=0.164], oderiv-count=1.06342e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36917.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-06,3e-06,1e-05 7e-05,0.009,0.06,0.09,0.10 0.12,0.14,0.16,0.23), mean=0.0576, stddev=0.0393], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,4e-05,8e-05,0.0002 0.0006,0.03,0.09,0.11,0.12 0.12,0.13,0.14,0.15), mean=0.079, stddev=0.0417]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000199267, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01217, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.37,0.40 0.42,0.44,0.47,0.52,0.55 0.58,0.60,0.63,0.74), mean=0.478, stddev=0.0537], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.01 0.02,0.22,0.29,0.32,0.34 0.36,0.38,0.40,0.80), mean=0.254, stddev=0.112], bias-{mean,stddev}=-0.002406,0.02726, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.13e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.29,0.31,0.34,0.37,0.39 0.41,0.44,0.46,0.52), mean=0.341, stddev=0.0404], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.40,0.41 0.42,0.43,0.46,0.49,0.50 0.51,0.52,0.53,0.55), mean=0.459, stddev=0.0293], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.07,0.07,0.07), mean=0.0438, stddev=0.00857], oderiv-count=1.11827e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36143.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.29,0.31,0.34,0.37,0.39 0.42,0.45,0.46,0.52), mean=0.34, stddev=0.042], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.48,0.49 0.51,0.54,0.59,0.64,0.68 0.72,0.75,0.76,0.88), mean=0.593, stddev=0.0669]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000199267, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01692, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.001,0.003,0.02 0.08,0.20,0.37,0.55,0.65 0.72,0.82,0.89,1.1), mean=0.378, stddev=0.208], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.36,0.41,0.45 0.50,0.67,0.79,0.86,0.91 0.95,1.0,1.1,1.2), mean=0.757, stddev=0.15], bias-{mean,stddev}=-0.002051,0.02175, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000199267, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0213, w_fc-rms=0.03325, w_oc-rms=0.04914, count=1.46e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621947, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.42,0.43,0.44 0.45,0.46,0.49,0.52,0.56 0.59,0.65,0.67,0.71), mean=0.497, stddev=0.0481], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.20,0.21 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0147] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621947, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.38,0.40 0.42,0.44,0.48,0.52,0.59 0.65,0.74,0.81,0.86), mean=0.495, stddev=0.0794], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.18,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0195] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00827329, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.76,-0.70,-0.52 -0.36,-0.18,-0.01,0.18,0.30 0.57,0.71,0.78,0.83), mean=-0.00281, stddev=0.289], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.30,0.32,0.36 0.42,0.47,0.60,0.73,0.93 0.99,1.0,1.0,1.0), mean=0.618, stddev=0.175] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621947, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.44,0.47,0.51,0.52 0.55,0.58,0.59,0.63), mean=0.476, stddev=0.0405], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0171] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0160377, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.80,-0.67,-0.48 -0.31,-0.16,-0.008,0.15,0.28 0.51,0.73,0.84,0.89), mean=-0.00135, stddev=0.278], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.21,0.27,0.46 0.62,0.73,0.83,0.89,0.97 1.0,1.0,1.0,1.0), mean=0.797, stddev=0.155] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.37146e-06, count-zeroing-boundaries=296607
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000199267, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0308, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.16,0.19 0.21,0.24,0.43,0.97,1.0 1.1,1.1,1.2,1.2), mean=0.603, stddev=0.361], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.03,0.06 0.14,0.31,0.47,0.59,0.68 0.78,0.90,0.99,1.2), mean=0.453, stddev=0.204], bias-{mean,stddev}=-0.001643,0.04321, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000199267, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0124, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.19,0.20,0.22 0.25,0.27,0.33,0.40,0.44 0.47,0.52,0.53,0.71), mean=0.337, stddev=0.0796], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.09,0.18,0.39,0.44 0.47,0.51,0.53,0.61), mean=0.239, stddev=0.151], bias-{mean,stddev}=-0.004134,0.02988, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.21e+05, self-repaired-proportion=0.00551839, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.02,0.04,0.06 0.07,0.09,0.12,0.16,0.17 0.19,0.20,0.22,0.25), mean=0.123, stddev=0.0399], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.13,0.20,0.25 0.30,0.37,0.51,0.60,0.64 0.66,0.68,0.69,0.72), mean=0.488, stddev=0.129], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.06,0.07 0.07,0.07,0.08,0.10,0.11 0.12,0.13,0.14,0.24), mean=0.0848, stddev=0.0186], oderiv-count=1.04717e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33820.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.02,0.04,0.06 0.07,0.09,0.12,0.15,0.17 0.19,0.21,0.22,0.28), mean=0.122, stddev=0.0405], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.06,0.11,0.15 0.16,0.17,0.20,0.22,0.24 0.26,0.27,0.29,0.37), mean=0.196, stddev=0.039]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000199267, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009029, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.29,0.30 0.31,0.32,0.35,0.38,0.40 0.42,0.44,0.45,0.59), mean=0.355, stddev=0.0389], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.14,0.14,0.15 0.16,0.17,0.20,0.23,0.25 0.26,0.28,0.29,0.38), mean=0.203, stddev=0.0364], bias-{mean,stddev}=-0.009091,0.01737, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.34e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.22,0.23 0.24,0.25,0.28,0.32,0.34 0.36,0.37,0.39,0.45), mean=0.287, stddev=0.0403], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.50,0.50,0.51,0.53), mean=0.441, stddev=0.0317], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0318, stddev=0.00267], oderiv-count=1.13363e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31498.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.21,0.22 0.23,0.25,0.28,0.32,0.34 0.36,0.38,0.39,0.43), mean=0.286, stddev=0.0422], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.44,0.46 0.47,0.49,0.54,0.60,0.63 0.65,0.71,0.76,0.87), mean=0.549, stddev=0.0683]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000199267, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01329, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,7e-06,1e-05,3e-05 0.0001,0.002,0.28,0.47,0.55 0.60,0.65,0.67,1.1), mean=0.26, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.27,0.31 0.37,0.51,0.62,0.68,0.71 0.74,0.79,0.81,1.2), mean=0.592, stddev=0.129], bias-{mean,stddev}=-0.003529,0.02482, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000199267, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01286, w_fc-rms=0.0166, w_oc-rms=0.02094, count=1.34e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627243, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.44,0.45 0.46,0.47,0.50,0.50,0.53 0.55,0.59,0.60,0.64), mean=0.495, stddev=0.0312], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0154] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627243, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.42 0.43,0.45,0.50,0.50,0.51 0.54,0.60,0.64,0.70), mean=0.485, stddev=0.0402], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.21,0.22 0.23,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0121] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00784162, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.62,-0.51,-0.33 -0.22,-0.10,0.0006,0.10,0.24 0.35,0.47,0.57,0.71), mean=0.00393, stddev=0.199], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.44,0.47,0.52 0.55,0.58,0.65,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.747, stddev=0.194] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627243, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.42,0.44 0.45,0.46,0.50,0.50,0.52 0.54,0.57,0.58,0.61), mean=0.488, stddev=0.0315], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0161] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00627243, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.62,-0.49,-0.31 -0.20,-0.10,0.0003,0.11,0.24 0.32,0.46,0.57,0.75), mean=0.00499, stddev=0.195], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.57,0.71 0.77,0.82,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.889, stddev=0.109] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=261633
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000199267, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02806, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.30,0.33,0.35 0.36,0.39,0.54,0.83,0.88 0.92,0.95,0.96,0.98), mean=0.603, stddev=0.213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.002 0.004,0.01,0.45,0.60,0.66 0.75,0.81,0.87,1.0), mean=0.361, stddev=0.273], bias-{mean,stddev}=-0.006554,0.1025, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000199267, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01145, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.18,0.21 0.23,0.25,0.30,0.36,0.43 0.47,0.52,0.54,0.64), mean=0.31, stddev=0.0802], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.13 0.14,0.16,0.23,0.34,0.37 0.39,0.42,0.43,0.51), mean=0.245, stddev=0.0893], bias-{mean,stddev}=0.001706,0.01669, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8e+05, self-repaired-proportion=0.000147929, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.03 0.04,0.05,0.08,0.10,0.11 0.13,0.14,0.14,0.17), mean=0.0764, stddev=0.029], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.14,0.15,0.18 0.23,0.29,0.42,0.53,0.58 0.62,0.65,0.65,0.76), mean=0.413, stddev=0.131], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.08,0.09,0.12,0.13 0.14,0.16,0.16,0.24), mean=0.0995, stddev=0.0216], oderiv-count=1.02182e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29175.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.03 0.04,0.05,0.08,0.10,0.12 0.13,0.14,0.14,0.17), mean=0.0773, stddev=0.0299], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.09 0.11,0.12,0.14,0.16,0.17 0.18,0.19,0.21,0.24), mean=0.138, stddev=0.0302]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000199267, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008641, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.28,0.29,0.33,0.38,0.40 0.42,0.43,0.45,0.53), mean=0.338, stddev=0.0469], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.11,0.14 0.15,0.16,0.19,0.22,0.25 0.27,0.31,0.33,0.41), mean=0.192, stddev=0.0437], bias-{mean,stddev}=-0.01125,0.01549, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.26e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.22 0.23,0.25,0.29,0.32,0.33 0.34,0.36,0.39,0.51), mean=0.286, stddev=0.0396], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.36,0.37 0.38,0.39,0.41,0.45,0.47 0.48,0.49,0.50,0.53), mean=0.42, stddev=0.0352], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0268, stddev=0.00274], oderiv-count=939200
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26853.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.21 0.23,0.25,0.29,0.32,0.33 0.35,0.38,0.39,0.60), mean=0.288, stddev=0.044], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.43,0.44,0.45 0.47,0.50,0.56,0.63,0.67 0.72,0.78,0.82,1.2), mean=0.572, stddev=0.0883]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000199267, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0195, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.17,0.24 0.31,0.36,0.43,0.63,0.75 0.79,0.84,0.86,1.4), mean=0.469, stddev=0.165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.58,0.60 0.61,0.64,0.73,1.0,1.4 1.4,1.5,1.5,1.6), mean=0.843, stddev=0.283], bias-{mean,stddev}=0.00708,0.0218, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000199267, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03181, w_fc-rms=0.04459, w_oc-rms=0.06294, count=1.21e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633633, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.47,0.49 0.50,0.52,0.58,0.65,0.67 0.69,0.71,0.72,0.81), mean=0.585, stddev=0.066], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.19,0.20,0.20,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.204, stddev=0.0102] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633633, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.47,0.48 0.50,0.54,0.59,0.65,0.68 0.72,0.75,0.77,0.88), mean=0.595, stddev=0.0696], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.16,0.17,0.18 0.19,0.19,0.20,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.202, stddev=0.0145] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0118733, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.84,-0.76,-0.51 -0.35,-0.22,-0.01,0.21,0.36 0.51,0.75,0.81,0.89), mean=-0.00693, stddev=0.306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.26,0.27,0.31 0.34,0.38,0.44,0.47,0.49 0.50,0.52,0.53,0.57), mean=0.425, stddev=0.0592] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00857246, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.53,0.55,0.58 0.60,0.62,0.66,0.70,0.73 0.75,0.76,0.78,0.95), mean=0.665, stddev=0.0547], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.15,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.21,0.21), mean=0.181, stddev=0.0162] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0310649, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.90,-0.79,-0.51 -0.36,-0.21,-0.005,0.21,0.34 0.49,0.80,0.89,0.99), mean=-0.00701, stddev=0.313], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.14,0.19,0.31 0.44,0.53,0.63,0.68,0.69 0.70,0.72,0.72,0.75), mean=0.591, stddev=0.121] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222525
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000199267, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07049, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.6,1.9,2.0 2.0,2.1,2.1,2.2), mean=1.57, stddev=0.342], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.53,0.77,0.90 0.95,1.0,1.1,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.13, stddev=0.157], bias-{mean,stddev}=0.003582,0.08121, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000199267, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03979, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.50,0.52,0.54 0.56,0.58,0.63,0.68,0.72 0.75,0.80,0.85,1.9), mean=0.636, stddev=0.0864], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.3 1.4,1.4,1.8,2.1,2.2 2.3,2.3,2.3,2.5), mean=1.79, stddev=0.35], bias-{mean,stddev}=6.041e-09,0.02208, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.40), mean=0.0171, stddev=0.0135], oderiv-count=609280
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/129.mdl exp/nnet3/tdnn_lstm1c_sp/130.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.55521 tdnn2.affine:7.6554 lstm1.W_all:6.40866 lstm1.lstm_nonlin:0.118067 lstm1.W_rp:2.59919 tdnn3.affine:4.7849 tdnn4.affine:5.47994 lstm2.W_all:4.26947 lstm2.lstm_nonlin:0.0542492 lstm2.W_rp:1.79374 tdnn5.affine:3.84845 tdnn6.affine:4.55498 lstm3.W_all:5.87827 lstm3.lstm_nonlin:0.143327 lstm3.W_rp:2.30597 output.affine:5.05358 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.8667 tdnn2.affine:10.9804 lstm1.W_all:19.7033 lstm1.lstm_nonlin:1.43751 lstm1.W_rp:11.3468 tdnn3.affine:7.92648 tdnn4.affine:8.1448 lstm2.W_all:15.4985 lstm2.lstm_nonlin:0.676282 lstm2.W_rp:10.4481 tdnn5.affine:7.30492 tdnn6.affine:7.79479 lstm3.W_all:22.6956 lstm3.lstm_nonlin:1.90252 lstm3.W_rp:25.9532 output.affine:29.444 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.636376 tdnn2.affine:0.697007 lstm1.W_all:0.325161 lstm1.lstm_nonlin:0.0828967 lstm1.W_rp:0.229851 tdnn3.affine:0.602291 tdnn4.affine:0.672306 lstm2.W_all:0.274566 lstm2.lstm_nonlin:0.0795744 lstm2.W_rp:0.171505 tdnn5.affine:0.529557 tdnn6.affine:0.58732 lstm3.W_all:0.259218 lstm3.lstm_nonlin:0.0750264 lstm3.W_rp:0.0889779 output.affine:0.171762 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:52:28 KST 2020, elapsed time 0 seconds
