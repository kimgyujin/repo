# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/149.mdl exp/nnet3/tdnn_lstm1c_sp/150.mdl 
# Started at Thu Jul 30 11:00:22 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/149.mdl exp/nnet3/tdnn_lstm1c_sp/150.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000187614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01865, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.01 0.03,0.23,0.33,0.38,0.41 0.44,0.47,0.51,0.73), mean=0.295, stddev=0.133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.10 0.12,0.14,0.38,0.51,0.61 0.78,0.88,0.93,1.1), mean=0.37, stddev=0.209], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.07,0.23,0.53,0.74 0.91,1.1,1.2,1.3), mean=0.316, stddev=0.284], bias-{mean,stddev}=0.001476,0.0243, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-4616.67, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000187614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008247, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.27 0.28,0.30,0.32,0.35,0.36 0.37,0.39,0.40,0.48), mean=0.324, stddev=0.0314], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.006 0.02,0.14,0.19,0.22,0.24 0.25,0.27,0.27,0.34), mean=0.172, stddev=0.0769], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.09,0.19,0.40,0.55 0.69,0.83,0.90,1.0), mean=0.254, stddev=0.203], bias-{mean,stddev}=0.0001229,0.01243, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.62e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.20,-0.05,-0.03,0.04 0.10,0.20,0.38,0.55,0.65 0.75,0.82,0.86,1.1), mean=0.38, stddev=0.207], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.18,-0.04,0.06,0.14 0.23,0.31,0.47,0.62,0.70 0.76,0.83,0.87,1.0), mean=0.465, stddev=0.188], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.20,0.30,0.37 0.41,0.46,0.51,0.67), mean=0.181, stddev=0.145], oderiv-count=3392
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-4616.67, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000187614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005219, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.0002,0.0007,0.003 0.02,0.05,0.10,0.17,0.21 0.25,0.28,0.30,0.42), mean=0.113, stddev=0.0709], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.10,0.14,0.25,0.28,0.29 0.30,0.31,0.32,0.39), mean=0.228, stddev=0.0697], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,2e-07 9e-07,0.05,0.12,0.27,0.39 0.52,0.68,0.74,0.92), mean=0.172, stddev=0.165], bias-{mean,stddev}=-0.000106,0.002142, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000187614, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001705, w_fc-rms=0.002259, w_oc-rms=0.004388, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000462159, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.34,-0.24,-0.03 0.16,0.31,0.50,0.75,0.94 1.1,1.3,1.4,2.0), mean=0.529, stddev=0.343], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.53,-0.21,-0.12,-0.01 0.05,0.14,0.25,0.31,0.37 0.41,0.53,0.56,0.87), mean=0.225, stddev=0.14] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000462159, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.38,-0.25,0.02 0.13,0.28,0.49,0.68,0.86 1.0,1.2,1.4,1.8), mean=0.488, stddev=0.311], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.28,-0.06,-0.03,0.02 0.09,0.17,0.25,0.28,0.32 0.38,0.45,0.48,0.68), mean=0.226, stddev=0.102] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0760483, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.7,-4.7,-4.0,-3.3 -2.4,-1.4,0.04,1.3,2.3 3.1,4.1,4.5,7.8), mean=0.000161, stddev=1.89], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.8,-3.1,-2.5,-1.8 -1.1,-0.43,0.73,1.5,2.0 2.5,3.2,3.4,4.3), mean=0.551, stddev=1.29] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000462159, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.88,-0.41,-0.18 0.02,0.23,0.49,0.74,0.90 1.1,1.3,1.5,2.2), mean=0.467, stddev=0.395], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.51,-0.29,-0.20,-0.04 0.03,0.11,0.25,0.34,0.42 0.51,0.56,0.62,0.81), mean=0.229, stddev=0.166] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.148727, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.0,-4.1,-3.4,-2.5 -1.8,-1.2,0.01,1.0,1.8 2.5,3.1,3.6,5.8), mean=-0.00856, stddev=1.49], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.9,-1.4,-1.1,-0.68 -0.24,0.18,0.90,1.4,1.7 2.0,2.3,2.5,3.8), mean=0.792, stddev=0.803] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.88e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2823
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00385675
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000187614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006762, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.07,0.13,0.21,0.23 0.24,0.25,0.26,0.26), mean=0.138, stddev=0.0694], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.003,0.006,0.01 0.03,0.07,0.11,0.13,0.15 0.16,0.18,0.18,0.21), mean=0.101, stddev=0.0421], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,6e-08,7e-08,8e-08 1e-07,2e-07,2e-06,0.02,0.30 0.42,0.50,0.56,0.66), mean=0.0603, stddev=0.142], bias-{mean,stddev}=0.0002486,0.007772, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000187614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007278, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.14,0.15,0.16 0.16,0.17,0.20,0.23,0.25 0.26,0.28,0.28,0.33), mean=0.2, stddev=0.0338], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.06,0.10,0.23,0.25 0.26,0.27,0.28,0.32), mean=0.143, stddev=0.0846], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,8e-08,9e-08,1e-07 2e-07,4e-07,7e-05,0.13,0.38 0.54,0.68,0.76,0.87), mean=0.0872, stddev=0.184], bias-{mean,stddev}=-0.0009726,0.01467, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.10,0.15,0.18 0.20,0.26,0.30,0.53), mean=0.0973, stddev=0.0759], oderiv-count=89728
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-4616.67, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000187614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005879, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.26,0.28,0.28,0.31), mean=0.231, stddev=0.0183], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.09,0.10,0.10 0.11,0.12,0.13,0.15,0.16 0.17,0.18,0.19,0.21), mean=0.132, stddev=0.0206], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.07,0.09,0.15,0.28,0.38 0.47,0.56,0.61,0.68), mean=0.192, stddev=0.13], bias-{mean,stddev}=-0.0001009,0.006936, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=5.94e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.38,-0.14,-0.10,-0.007 0.06,0.14,0.28,0.42,0.52 0.63,0.71,0.75,0.94), mean=0.287, stddev=0.186], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.56,-0.21,-0.09,0.01 0.15,0.26,0.47,0.68,0.79 0.87,0.97,1.0,1.4), mean=0.466, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.09,0.10 0.11,0.12,0.13,0.16), mean=0.0552, stddev=0.0375], oderiv-count=19392
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-4616.67, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000187614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003509, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,3e-07,6e-07,1e-06 6e-06,0.0001,0.06,0.12,0.16 0.18,0.20,0.20,0.30), mean=0.0657, stddev=0.0608], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.09,0.17,0.19,0.19 0.20,0.21,0.22,0.26), mean=0.152, stddev=0.0502], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-08,1e-07,1e-07,1e-07 8e-06,0.03,0.08,0.18,0.26 0.35,0.48,0.53,0.63), mean=0.112, stddev=0.114], bias-{mean,stddev}=-0.0002335,0.00244, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000187614, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001029, w_fc-rms=0.001162, w_oc-rms=0.00174, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000516415, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.19,-0.12,-0.05,0.12 0.23,0.36,0.50,0.66,0.85 1.0,1.1,1.2,1.5), mean=0.518, stddev=0.249], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,-0.01,0.005,0.06 0.11,0.18,0.25,0.29,0.33 0.38,0.47,0.54,0.70), mean=0.239, stddev=0.0967] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000516415, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.39,-0.19,-0.02,0.12 0.26,0.38,0.50,0.58,0.76 0.87,1.1,1.2,1.7), mean=0.498, stddev=0.233], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.23,-0.06,0.003,0.10 0.14,0.19,0.25,0.26,0.30 0.33,0.36,0.38,0.55), mean=0.23, stddev=0.0767] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0356827, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.8,-3.8,-3.5,-2.7 -1.9,-0.92,0.0002,0.89,1.8 2.6,3.8,4.2,6.8), mean=0.0201, stddev=1.52], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-2.6,-2.3,-1.4 -0.87,-0.08,1.0,1.2,1.7 2.2,2.7,2.9,4.8), mean=0.673, stddev=1.06] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000516415, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.52,-0.27,-0.15,-0.02 0.12,0.29,0.50,0.63,0.84 1.0,1.3,1.3,1.4), mean=0.486, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.24,-0.10,-0.06,0.03 0.09,0.15,0.25,0.29,0.35 0.41,0.48,0.50,0.83), mean=0.23, stddev=0.114] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000516415, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-3.2,-2.8,-2.1 -1.4,-0.73,-0.0006,0.61,1.5 2.1,2.6,3.1,4.4), mean=-0.0124, stddev=1.17], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.92,-0.64,-0.22 0.13,0.51,1.0,1.2,1.4 1.8,2.1,2.6,3.2), mean=0.888, stddev=0.585] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.57e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2376
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00385675
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000187614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004557, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.06,0.07,0.09,0.13,0.14 0.15,0.15,0.15,0.17), mean=0.0989, stddev=0.0319], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.0002,0.0002,0.0003 0.0006,0.001,0.08,0.10,0.11 0.12,0.13,0.13,0.16), mean=0.0585, stddev=0.0445], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,6e-08 9e-08,1e-07,9e-06,0.09,0.21 0.26,0.30,0.33,0.39), mean=0.0468, stddev=0.0928], bias-{mean,stddev}=-0.0008114,0.006706, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000187614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00586, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.11 0.12,0.13,0.16,0.19,0.21 0.22,0.23,0.24,0.31), mean=0.16, stddev=0.0328], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.07,0.08,0.12,0.17,0.18 0.19,0.20,0.21,0.23), mean=0.126, stddev=0.0449], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,6e-08,7e-08,1e-07 1e-07,6e-07,0.001,0.15,0.30 0.42,0.53,0.58,0.65), mean=0.0785, stddev=0.144], bias-{mean,stddev}=-0.0009033,0.007826, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.29e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.3,-1.2,-0.94 -0.65,-0.42,-0.001,0.42,0.72 0.93,1.2,1.3,1.6), mean=0.00156, stddev=0.536], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.1,-5.6,-5.1,-4.0 -3.0,-1.8,0.28,2.2,3.4 4.2,5.0,5.3,8.0), mean=0.239, stddev=2.44], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.13,0.19,0.24 0.28,0.34,0.36,0.62), mean=0.122, stddev=0.0954], oderiv-count=54144
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-4616.67, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000187614, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004852, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.17,0.17,0.19,0.21,0.22 0.23,0.23,0.24,0.26), mean=0.19, stddev=0.0208], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.08 0.09,0.09,0.11,0.12,0.14 0.15,0.16,0.17,0.19), mean=0.108, stddev=0.0219], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.11,0.23,0.32 0.41,0.49,0.53,0.60), mean=0.154, stddev=0.115], bias-{mean,stddev}=-9.409e-06,0.006223, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.009,0.05,0.08,0.09 0.11,0.11,0.12,0.14), mean=0.0511, stddev=0.0337], oderiv-count=14720
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-4616.67, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000187614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004837, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.06,0.07,0.09,0.17,0.21 0.23,0.24,0.25,0.29), mean=0.109, stddev=0.0573], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.14,0.15,0.19,0.28,0.33 0.35,0.37,0.37,0.39), mean=0.21, stddev=0.0687], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,2e-05,3e-05,0.0005 0.03,0.04,0.09,0.22,0.40 0.54,0.67,0.72,0.79), mean=0.149, stddev=0.163], bias-{mean,stddev}=-0.0008457,0.00177, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000187614, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.002127, w_fc-rms=0.003539, w_oc-rms=0.004083, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000599941, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.9,-0.92,-0.70,-0.26 0.10,0.41,1.1,1.7,2.0 2.3,2.7,2.9,4.1), mean=1.07, stddev=0.803], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.64,-0.34,-0.29,-0.16 -0.10,-0.02,0.15,0.29,0.39 0.45,0.54,0.58,0.70), mean=0.139, stddev=0.195] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000599941, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.0,-2.0,-1.8,-1.3 -0.87,-0.45,0.34,1.2,1.6 1.9,2.5,2.6,3.1), mean=0.368, stddev=0.987], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.52,-0.35,-0.25,-0.14 -0.05,0.04,0.23,0.42,0.53 0.61,0.73,0.75,0.94), mean=0.235, stddev=0.233] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0315797, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-13,-9.9,-8.5,-6.7 -5.1,-3.4,-0.22,3.3,4.7 6.4,8.4,9.2,14), mean=-0.127, stddev=4], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.5,-4.3,-4.1,-2.8 -2.4,-1.5,0.04,1.3,2.0 2.6,3.7,3.9,4.9), mean=-0.103, stddev=1.74] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.108508, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-1.2,-0.99,-0.54 -0.28,0.10,0.80,1.3,1.6 1.9,2.2,2.3,2.8), mean=0.731, stddev=0.763], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.66,-0.43,-0.33,-0.26 -0.17,-0.07,0.16,0.35,0.46 0.54,0.64,0.67,0.87), mean=0.146, stddev=0.245] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.182269, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-10,-7.6,-7.1,-5.2 -4.1,-2.6,-0.11,2.3,3.7 5.0,6.4,6.9,10), mean=-0.203, stddev=3.09], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.6,-3.1,-2.9,-2.3 -1.6,-0.87,0.21,1.4,2.0 2.7,3.7,3.9,6.6), mean=0.252, stddev=1.49] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.27e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1893
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00385675
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000187614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005972, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.08,0.08,0.11,0.18,0.18 0.19,0.20,0.20,0.21), mean=0.128, stddev=0.0459], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.07,0.08,0.10,0.11,0.12 0.12,0.13,0.13,0.20), mean=0.094, stddev=0.0208], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,3e-06,4e-06,6e-06 1e-05,6e-05,0.03,0.18,0.25 0.32,0.36,0.39,0.45), mean=0.0835, stddev=0.108], bias-{mean,stddev}=-0.0008058,0.01676, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000187614, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00661, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.06,0.07,0.09,0.13,0.15 0.17,0.19,0.21,0.39), mean=0.0994, stddev=0.0384], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.19,0.21 0.21,0.22,0.30,0.36,0.38 0.39,0.40,0.40,0.41), mean=0.296, stddev=0.0676], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,3e-06,4e-06,6e-06 1e-05,6e-05,0.01,0.44,0.59 0.69,0.76,0.80,0.83), mean=0.171, stddev=0.251], bias-{mean,stddev}=-4.692e-11,0.002362, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.03,0.04 0.04,0.05,0.05,0.27), mean=0.0174, stddev=0.0173], oderiv-count=54400

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.38885 tdnn2.affine:7.43284 lstm1.W_all:6.06942 lstm1.lstm_nonlin:0.119075 lstm1.W_rp:2.48958 tdnn3.affine:4.64707 tdnn4.affine:5.29707 lstm2.W_all:4.08218 lstm2.lstm_nonlin:0.0531726 lstm2.W_rp:1.67929 tdnn5.affine:3.73651 tdnn6.affine:4.37197 lstm3.W_all:5.62495 lstm3.lstm_nonlin:0.132413 lstm3.W_rp:2.21265 output.affine:4.89008 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.7521 tdnn2.affine:10.8126 lstm1.W_all:19.2907 lstm1.lstm_nonlin:1.44589 lstm1.W_rp:11.2617 tdnn3.affine:7.75149 tdnn4.affine:8.05904 lstm2.W_all:15.3765 lstm2.lstm_nonlin:0.630791 lstm2.W_rp:10.4058 tdnn5.affine:7.18495 tdnn6.affine:7.66136 lstm3.W_all:22.4304 lstm3.lstm_nonlin:1.97311 lstm3.W_rp:26.1815 output.affine:29.315 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.620934 tdnn2.affine:0.678516 lstm1.W_all:0.313535 lstm1.lstm_nonlin:0.0822273 lstm1.W_rp:0.221282 tdnn3.affine:0.591308 tdnn4.affine:0.648566 lstm2.W_all:0.264991 lstm2.lstm_nonlin:0.0837266 lstm2.W_rp:0.161688 tdnn5.affine:0.517196 tdnn6.affine:0.566891 lstm3.W_all:0.251084 lstm3.lstm_nonlin:0.0667758 lstm3.W_rp:0.0847591 output.affine:0.166782 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:00:23 KST 2020, elapsed time 1 seconds
