# nnet3-info exp/nnet3/tdnn_lstm1c_sp/339.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/338.mdl exp/nnet3/tdnn_lstm1c_sp/339.mdl 
# Started at Thu Jul 30 12:15:19 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/339.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00015148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03237, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.008 0.01,0.02,0.57,0.72,0.80 0.88,0.93,0.99,1.2), mean=0.47, stddev=0.305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.22,0.65,0.91,1.2 1.4,1.5,1.5,1.5), mean=0.636, stddev=0.374], bias-{mean,stddev}=-0.002982,0.06304, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.17e+06, self-repaired-proportion=0.214078, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,2e-05,3e-05,4e-05 7e-05,0.0001,0.05,0.09,0.11 0.12,0.14,0.16,0.18), mean=0.049, stddev=0.0449], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.03 0.04,0.06,0.40,0.60,0.71 0.81,0.87,0.91,0.99), mean=0.359, stddev=0.266], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.02,0.04,0.32,0.44,0.53 0.63,0.72,0.87,1.6), mean=0.304, stddev=0.212], oderiv-count=1.21709e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32570.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,1e-05,1e-05,2e-05 6e-05,0.0002,0.05,0.09,0.11 0.13,0.15,0.17,0.20), mean=0.0485, stddev=0.0455], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0001,0.0002,0.0002 0.0004,0.001,0.09,0.11,0.13 0.14,0.15,0.16,0.17), mean=0.0684, stddev=0.0517]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00015148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01184, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.35,0.37 0.39,0.41,0.45,0.51,0.55 0.59,0.64,0.66,0.74), mean=0.463, stddev=0.0667], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.005 0.006,0.01,0.28,0.34,0.37 0.40,0.43,0.49,0.73), mean=0.227, stddev=0.146], bias-{mean,stddev}=-0.03373,0.04036, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.13e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.24,0.27,0.31,0.32 0.35,0.37,0.39,0.46), mean=0.275, stddev=0.0425], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.36,0.37,0.39 0.40,0.41,0.44,0.47,0.49 0.50,0.51,0.53,0.56), mean=0.442, stddev=0.0359], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0477, stddev=0.00835], oderiv-count=1.15427e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31849, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.23,0.24,0.28,0.32,0.35 0.37,0.42,0.44,0.53), mean=0.287, stddev=0.0515], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.41,0.42 0.44,0.46,0.52,0.58,0.61 0.65,0.68,0.70,0.77), mean=0.524, stddev=0.0682]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00015148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0177, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,9e-07,2e-06,1e-05 0.0005,0.17,0.42,0.60,0.67 0.73,0.79,0.84,1.1), mean=0.387, stddev=0.232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.37,0.42 0.51,0.70,0.81,0.90,0.97 1.0,1.1,1.2,1.3), mean=0.79, stddev=0.168], bias-{mean,stddev}=0.003286,0.0285, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00015148, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0908, w_fc-rms=0.02892, w_oc-rms=0.04814, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638521, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.55 0.70,0.78,0.81,0.86), mean=0.497, stddev=0.0783], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0222] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638521, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.46,0.47,0.48 0.49,0.50,0.50,0.54,0.59 0.68,0.77,0.80,0.86), mean=0.526, stddev=0.0634], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0225] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0228337, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.88,-0.86,-0.46 -0.27,-0.13,0.001,0.16,0.30 0.58,0.85,0.88,0.91), mean=0.0184, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.21,0.25 0.38,0.45,0.58,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.612, stddev=0.217] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638521, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.42,0.43,0.46,0.50,0.50 0.51,0.56,0.59,0.73), mean=0.463, stddev=0.0409], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.02] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00638521, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.71,-0.65,-0.30 -0.16,-0.08,0.0009,0.09,0.20 0.36,0.63,0.70,0.77), mean=0.0119, stddev=0.217], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.45,0.55 0.77,0.83,0.89,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.871, stddev=0.123] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=7.84565e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00019586, count-zeroing-boundaries=296130
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.241322
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00015148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04029, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.41,0.44 0.48,0.55,0.86,1.2,1.2 1.3,1.3,1.4,1.4), mean=0.867, stddev=0.304], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0008,0.001,0.002 0.009,0.33,0.54,0.73,0.94 1.2,1.5,1.6,1.9), mean=0.547, stddev=0.35], bias-{mean,stddev}=0.01282,0.2619, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00015148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01331, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.21,0.24,0.26 0.28,0.31,0.36,0.42,0.45 0.49,0.52,0.54,0.58), mean=0.365, stddev=0.0725], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.18,0.29,0.39,0.42 0.44,0.46,0.48,0.51), mean=0.285, stddev=0.105], bias-{mean,stddev}=0.001634,0.008683, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.49e+05, self-repaired-proportion=0.00220326, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.01,0.02,0.02 0.03,0.05,0.08,0.10,0.12 0.13,0.14,0.15,0.17), mean=0.0794, stddev=0.0308], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.16,0.20 0.24,0.37,0.50,0.61,0.64 0.69,0.72,0.73,0.83), mean=0.478, stddev=0.146], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.09,0.10,0.10 0.10,0.11,0.13,0.16,0.20 0.23,0.26,0.28,0.37), mean=0.14, stddev=0.0418], oderiv-count=1.0832e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29683.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.02,0.03 0.04,0.06,0.09,0.11,0.12 0.13,0.14,0.15,0.18), mean=0.084, stddev=0.0308], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.07,0.07,0.08 0.10,0.11,0.13,0.15,0.17 0.20,0.23,0.26,0.34), mean=0.134, stddev=0.0367]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00015148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008665, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.27,0.27,0.28 0.29,0.31,0.33,0.37,0.40 0.42,0.44,0.45,0.49), mean=0.34, stddev=0.0411], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.12,0.13,0.14 0.15,0.16,0.18,0.23,0.25 0.27,0.30,0.31,0.38), mean=0.193, stddev=0.0432], bias-{mean,stddev}=-0.02549,0.01976, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.63e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.22,0.23,0.25,0.28,0.30 0.31,0.32,0.33,0.36), mean=0.256, stddev=0.0304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.37,0.39 0.40,0.41,0.43,0.45,0.46 0.47,0.48,0.49,0.50), mean=0.43, stddev=0.0272], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0366, stddev=0.00298], oderiv-count=1.08483e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27518.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.23,0.24,0.27,0.30,0.32 0.36,0.39,0.41,0.49), mean=0.274, stddev=0.043], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.40,0.41,0.42 0.44,0.46,0.51,0.60,0.69 0.81,1.1,1.2,1.5), mean=0.551, stddev=0.147]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00015148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01457, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,5e-06,1e-05 5e-05,0.001,0.33,0.52,0.59 0.63,0.68,0.70,0.93), mean=0.287, stddev=0.236], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.31,0.36 0.45,0.60,0.66,0.73,0.78 0.82,0.91,1.0,1.3), mean=0.651, stddev=0.133], bias-{mean,stddev}=0.006358,0.03388, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00015148, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05857, w_fc-rms=0.01721, w_oc-rms=0.04079, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644049, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.46 0.47,0.48,0.50,0.51,0.56 0.60,0.68,0.71,0.79), mean=0.506, stddev=0.0502], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0172] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644049, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.47,0.48 0.49,0.50,0.50,0.54,0.58 0.62,0.67,0.68,0.75), mean=0.522, stddev=0.0452], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0194] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00653193, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.80,-0.77,-0.45 -0.25,-0.10,0.0004,0.13,0.33 0.53,0.69,0.74,0.81), mean=0.0108, stddev=0.266], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.32,0.41 0.46,0.53,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.719, stddev=0.221] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644049, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.45 0.46,0.47,0.50,0.50,0.51 0.53,0.56,0.59,0.68), mean=0.491, stddev=0.0274], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0186] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644049, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.71,-0.59,-0.50,-0.29 -0.16,-0.07,0.0006,0.09,0.19 0.35,0.47,0.53,0.61), mean=0.00769, stddev=0.183], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.57,0.60,0.70 0.78,0.84,0.92,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.904, stddev=0.0998] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.15565e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.78655e-05, count-zeroing-boundaries=261148
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.241322
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00015148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03874, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.51,0.53 0.57,0.61,0.85,1.1,1.1 1.2,1.2,1.3,1.3), mean=0.852, stddev=0.235], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.002,0.002 0.004,0.01,0.56,0.82,0.96 1.1,1.3,1.5,1.6), mean=0.486, stddev=0.392], bias-{mean,stddev}=0.0008254,0.2121, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00015148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01268, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.27 0.28,0.30,0.34,0.39,0.44 0.47,0.50,0.52,0.59), mean=0.349, stddev=0.0621], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.16 0.17,0.19,0.26,0.37,0.40 0.42,0.43,0.44,0.47), mean=0.276, stddev=0.0866], bias-{mean,stddev}=0.0005663,0.00598, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.23e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.0651, stddev=0.0274], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.14,0.18 0.23,0.32,0.49,0.59,0.63 0.65,0.68,0.69,0.76), mean=0.459, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.14,0.17,0.19 0.21,0.24,0.25,0.28), mean=0.145, stddev=0.0331], oderiv-count=998016
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25353.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.12,0.13,0.14,0.17), mean=0.0694, stddev=0.0283], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.09,0.11,0.13,0.14 0.15,0.15,0.16,0.18), mean=0.11, stddev=0.0227]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00015148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008622, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.16,0.21 0.27,0.30,0.34,0.39,0.41 0.42,0.44,0.46,0.49), mean=0.335, stddev=0.0612], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.15,0.18,0.23,0.25 0.28,0.31,0.33,0.40), mean=0.191, stddev=0.0462], bias-{mean,stddev}=-0.01792,0.02528, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.02e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.19 0.21,0.24,0.28,0.30,0.32 0.33,0.34,0.35,0.40), mean=0.27, stddev=0.0437], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.36 0.38,0.39,0.42,0.45,0.46 0.48,0.49,0.49,0.53), mean=0.422, stddev=0.0335], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0302, stddev=0.00305], oderiv-count=976800
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23188.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.17,0.21 0.23,0.26,0.29,0.32,0.34 0.36,0.37,0.38,0.57), mean=0.29, stddev=0.0462], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.29,0.37 0.44,0.49,0.56,0.62,0.66 0.70,0.74,0.75,1.3), mean=0.553, stddev=0.101]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00015148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02073, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.28,0.29 0.31,0.35,0.49,0.65,0.71 0.76,0.86,0.89,1.0), mean=0.506, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.62,0.65,0.73 0.78,0.82,0.89,1.0,1.1 1.2,1.4,1.4,1.6), mean=0.932, stddev=0.161], bias-{mean,stddev}=0.01224,0.0166, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00015148, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1035, w_fc-rms=0.0449, w_oc-rms=0.07452, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650723, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.59,0.61,0.63 0.65,0.68,0.72,0.77,0.80 0.82,0.84,0.85,0.89), mean=0.723, stddev=0.0562], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.22), mean=0.167, stddev=0.0228] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650723, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.53,0.56,0.59 0.61,0.64,0.68,0.72,0.77 0.81,0.84,0.85,0.88), mean=0.685, stddev=0.0646], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.174, stddev=0.0237] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.027668, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.81,-0.75,-0.62 -0.44,-0.32,-0.01,0.29,0.43 0.60,0.80,0.86,0.91), mean=-0.00384, stddev=0.359], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.20,0.24 0.30,0.36,0.46,0.51,0.54 0.56,0.57,0.58,0.64), mean=0.436, stddev=0.0933] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650723, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.49,0.52 0.55,0.59,0.63,0.67,0.70 0.72,0.77,0.80,0.89), mean=0.631, stddev=0.0615], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.178, stddev=0.0183] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00650723, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.69,-0.65,-0.52 -0.36,-0.26,-0.005,0.24,0.36 0.54,0.69,0.73,0.75), mean=-0.00475, stddev=0.301], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.40,0.44 0.50,0.58,0.68,0.72,0.75 0.77,0.78,0.79,0.83), mean=0.65, stddev=0.0954] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=6.73114e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.2518e-06, count-zeroing-boundaries=222044
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.241322
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00015148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09088, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.6,2.7 2.8,2.9,3.0,3.1), mean=1.97, stddev=0.64], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.94,1.0,1.1 1.1,1.2,1.4,1.6,1.9 2.1,2.2,2.2,2.3), mean=1.44, stddev=0.295], bias-{mean,stddev}=-0.01079,0.6901, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00015148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04369, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.60,0.62 0.63,0.65,0.69,0.73,0.77 0.80,0.85,0.92,2.1), mean=0.7, stddev=0.0835], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.5,2.6 2.7,2.8,2.8,2.8), mean=1.91, stddev=0.594], bias-{mean,stddev}=5.128e-09,0.02121, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=600960
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/338.mdl exp/nnet3/tdnn_lstm1c_sp/339.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.98395 tdnn2.affine:3.80426 lstm1.W_all:3.03686 lstm1.lstm_nonlin:0.0707203 lstm1.W_rp:1.36124 tdnn3.affine:2.74379 tdnn4.affine:2.81311 lstm2.W_all:2.10201 lstm2.lstm_nonlin:0.035294 lstm2.W_rp:0.880664 tdnn5.affine:2.23985 tdnn6.affine:2.38858 lstm3.W_all:2.22763 lstm3.lstm_nonlin:0.0701685 lstm3.W_rp:0.869514 output.affine:2.32502 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8647 tdnn2.affine:10.7267 lstm1.W_all:20.6196 lstm1.lstm_nonlin:2.43452 lstm1.W_rp:15.4042 tdnn3.affine:8.48224 tdnn4.affine:7.8384 lstm2.W_all:17.0149 lstm2.lstm_nonlin:1.67418 lstm2.W_rp:14.65 tdnn5.affine:8.07424 tdnn6.affine:7.79805 lstm3.W_all:24.1204 lstm3.lstm_nonlin:3.08411 lstm3.W_rp:35.221 output.affine:32.3293 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.312528 tdnn2.affine:0.358698 lstm1.W_all:0.147758 lstm1.lstm_nonlin:0.0289909 lstm1.W_rp:0.0888032 tdnn3.affine:0.329179 tdnn4.affine:0.363391 lstm2.W_all:0.123885 lstm2.lstm_nonlin:0.021124 lstm2.W_rp:0.0603888 tdnn5.affine:0.28171 tdnn6.affine:0.312321 lstm3.W_all:0.0925492 lstm3.lstm_nonlin:0.0227802 lstm3.W_rp:0.0246928 output.affine:0.0718517 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:15:19 KST 2020, elapsed time 0 seconds
