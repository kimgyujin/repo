# nnet3-info exp/nnet3/tdnn_lstm1c_sp/263.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/262.mdl exp/nnet3/tdnn_lstm1c_sp/263.mdl 
# Started at Thu Jul 30 11:45:06 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/263.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000245314, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03449, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.01,0.02 0.03,0.07,0.60,0.74,0.82 0.94,1.0,1.0,1.2), mean=0.517, stddev=0.3], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.19,0.23,0.67,0.93,1.3 1.5,1.7,1.7,1.7), mean=0.668, stddev=0.415], bias-{mean,stddev}=0.0008554,0.06564, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0.196951, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,5e-06,1e-05,4e-05 0.0001,0.0005,0.07,0.10,0.12 0.14,0.15,0.17,0.25), mean=0.0618, stddev=0.0484], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.001,0.005,0.01 0.03,0.06,0.45,0.61,0.73 0.80,0.87,0.89,0.99), mean=0.394, stddev=0.26], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.12,0.27,0.35,0.40 0.49,0.64,0.68,1.1), mean=0.26, stddev=0.15], oderiv-count=1.18944e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32878.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-07,4e-06,7e-06,3e-05 6e-05,0.0005,0.06,0.10,0.12 0.14,0.16,0.17,0.25), mean=0.0591, stddev=0.0476], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0001,0.0002,0.0003 0.0006,0.003,0.10,0.13,0.14 0.15,0.16,0.16,0.17), mean=0.0829, stddev=0.0538]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000245314, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01302, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.39,0.41 0.43,0.45,0.50,0.56,0.60 0.64,0.68,0.70,0.77), mean=0.51, stddev=0.0691], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.008,0.01 0.02,0.04,0.31,0.36,0.40 0.43,0.46,0.49,0.76), mean=0.259, stddev=0.145], bias-{mean,stddev}=-0.02107,0.03975, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.27,0.28 0.30,0.31,0.34,0.38,0.41 0.43,0.47,0.50,0.60), mean=0.348, stddev=0.0493], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.38,0.40 0.41,0.43,0.45,0.48,0.49 0.51,0.52,0.53,0.55), mean=0.45, stddev=0.0336], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0385, stddev=0.00711], oderiv-count=1.15974e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32157.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.27,0.29 0.30,0.31,0.34,0.39,0.42 0.44,0.48,0.50,0.59), mean=0.352, stddev=0.0499], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.50,0.51,0.53 0.55,0.57,0.63,0.69,0.72 0.76,0.79,0.81,0.88), mean=0.633, stddev=0.0682]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000245314, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01873, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,4e-06,1e-05,7e-05 0.002,0.17,0.43,0.63,0.73 0.79,0.86,0.91,1.1), mean=0.407, stddev=0.25], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.39,0.40,0.46 0.56,0.74,0.86,0.96,1.0 1.1,1.2,1.2,1.3), mean=0.836, stddev=0.174], bias-{mean,stddev}=0.001038,0.02738, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000245314, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0515, w_fc-rms=0.02861, w_oc-rms=0.04309, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629597, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.42 0.44,0.45,0.47,0.50,0.54 0.67,0.79,0.81,0.84), mean=0.491, stddev=0.0767], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.19,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0235] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629597, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.42,0.43,0.45 0.45,0.47,0.50,0.52,0.57 0.64,0.75,0.77,0.83), mean=0.508, stddev=0.0638], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.18 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0212] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0366626, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.90,-0.84,-0.53 -0.29,-0.16,0.0008,0.17,0.33 0.54,0.84,0.88,0.91), mean=0.0139, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.25 0.35,0.41,0.54,0.77,1.0 1.0,1.0,1.0,1.0), mean=0.585, stddev=0.226] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629597, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.39 0.40,0.42,0.45,0.50,0.50 0.50,0.54,0.55,0.64), mean=0.451, stddev=0.041], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.217, stddev=0.0222] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00629597, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.77,-0.66,-0.37 -0.18,-0.09,0.0008,0.11,0.22 0.34,0.67,0.74,0.80), mean=0.0106, stddev=0.226], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.38,0.55 0.73,0.80,0.88,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.854, stddev=0.133] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=7.55926e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.53883e-05, count-zeroing-boundaries=297433
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.18843
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000245314, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04102, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.32,0.36 0.39,0.45,0.86,1.2,1.3 1.4,1.5,1.5,1.5), mean=0.853, stddev=0.385], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.002,0.004 0.01,0.31,0.55,0.76,0.90 1.2,1.6,1.8,2.1), mean=0.555, stddev=0.36], bias-{mean,stddev}=0.01273,0.2805, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000245314, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01364, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.21,0.21,0.24 0.27,0.30,0.37,0.44,0.49 0.53,0.55,0.57,0.70), mean=0.371, stddev=0.0859], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.11 0.13,0.15,0.29,0.42,0.44 0.46,0.48,0.50,0.55), mean=0.283, stddev=0.13], bias-{mean,stddev}=0.004556,0.01365, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0.000452489, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.03,0.04,0.05 0.07,0.09,0.12,0.15,0.16 0.18,0.20,0.22,0.24), mean=0.118, stddev=0.0376], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.16,0.19,0.24 0.31,0.39,0.50,0.60,0.65 0.67,0.69,0.71,0.76), mean=0.488, stddev=0.127], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.07,0.08,0.09,0.10,0.12 0.13,0.15,0.16,0.25), mean=0.0923, stddev=0.0224], oderiv-count=1.1689e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29991.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.03,0.04,0.05 0.07,0.09,0.12,0.14,0.16 0.18,0.19,0.21,0.23), mean=0.116, stddev=0.0368], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.12,0.13,0.14 0.15,0.16,0.18,0.21,0.22 0.24,0.25,0.26,0.30), mean=0.184, stddev=0.0319]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000245314, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009612, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.30,0.31 0.33,0.34,0.37,0.41,0.44 0.46,0.49,0.51,0.61), mean=0.377, stddev=0.0471], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.13,0.14,0.15 0.16,0.18,0.21,0.25,0.28 0.30,0.32,0.34,0.38), mean=0.214, stddev=0.0457], bias-{mean,stddev}=-0.02177,0.01906, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.76e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.25,0.26 0.27,0.28,0.31,0.35,0.37 0.38,0.40,0.41,0.50), mean=0.317, stddev=0.0391], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.37,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.49,0.52), mean=0.433, stddev=0.0303], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.031, stddev=0.00243], oderiv-count=1.16544e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27826.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.25,0.26 0.27,0.28,0.32,0.35,0.38 0.39,0.40,0.41,0.54), mean=0.32, stddev=0.0408], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.48,0.50,0.52 0.53,0.55,0.60,0.67,0.71 0.75,0.79,0.81,1.1), mean=0.614, stddev=0.0763]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000245314, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01544, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,9e-07,1e-06,3e-06 2e-05,0.0003,0.35,0.56,0.63 0.68,0.73,0.77,0.97), mean=0.301, stddev=0.254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.33,0.35,0.39 0.49,0.63,0.70,0.77,0.82 0.87,0.97,1.1,1.4), mean=0.691, stddev=0.136], bias-{mean,stddev}=0.002101,0.04345, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000245314, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02626, w_fc-rms=0.01292, w_oc-rms=0.03173, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634865, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.45,0.46,0.50,0.52,0.57 0.62,0.66,0.70,0.80), mean=0.501, stddev=0.056], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0188] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634865, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.42,0.44 0.45,0.47,0.50,0.51,0.54 0.58,0.64,0.64,0.74), mean=0.499, stddev=0.0434], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0176] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00700423, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.80,-0.68,-0.47 -0.29,-0.14,0.0002,0.16,0.34 0.55,0.74,0.79,0.88), mean=0.0108, stddev=0.277], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.28,0.38 0.44,0.49,0.60,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.699, stddev=0.239] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634865, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.43,0.45,0.50,0.50,0.52 0.54,0.56,0.58,0.73), mean=0.482, stddev=0.0385], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0203] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00634865, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.54,-0.44,-0.29 -0.19,-0.09,-5e-05,0.10,0.23 0.36,0.53,0.56,0.68), mean=0.00887, stddev=0.193], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.53,0.58,0.69 0.75,0.83,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.896, stddev=0.108] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.43797e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=9.52936e-06, count-zeroing-boundaries=262347
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.18843
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000245314, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03956, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.44,0.48,0.53 0.57,0.59,0.86,1.1,1.2 1.3,1.3,1.3,1.4), mean=0.864, stddev=0.261], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0007,0.0009,0.001 0.002,0.007,0.58,0.84,0.96 1.1,1.3,1.4,1.6), mean=0.494, stddev=0.403], bias-{mean,stddev}=0.0003185,0.2176, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000245314, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01311, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.24,0.26 0.28,0.30,0.34,0.41,0.46 0.50,0.55,0.56,0.61), mean=0.359, stddev=0.0733], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.16 0.17,0.19,0.27,0.39,0.42 0.44,0.45,0.47,0.50), mean=0.283, stddev=0.0956], bias-{mean,stddev}=0.001486,0.007624, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.05,0.06,0.09,0.12,0.13 0.14,0.16,0.18,0.20), mean=0.092, stddev=0.0332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.17,0.21 0.27,0.33,0.47,0.57,0.61 0.64,0.66,0.68,0.73), mean=0.455, stddev=0.129], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.09,0.11,0.13 0.15,0.16,0.16,0.18), mean=0.0991, stddev=0.0201], oderiv-count=1.01715e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25661.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.06,0.09,0.12,0.13 0.15,0.16,0.17,0.20), mean=0.0936, stddev=0.0335], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.13,0.16,0.18,0.19 0.20,0.21,0.22,0.23), mean=0.154, stddev=0.0276]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000245314, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009522, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.21,0.22,0.27 0.29,0.33,0.37,0.42,0.45 0.47,0.49,0.51,0.56), mean=0.371, stddev=0.0617], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.16,0.17,0.20,0.25,0.28 0.31,0.35,0.37,0.46), mean=0.211, stddev=0.0513], bias-{mean,stddev}=-0.02129,0.02407, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.21e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.23,0.25 0.27,0.29,0.33,0.36,0.38 0.40,0.41,0.41,0.53), mean=0.326, stddev=0.0436], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.35,0.37 0.38,0.39,0.42,0.44,0.45 0.46,0.47,0.48,0.51), mean=0.418, stddev=0.0283], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0256, stddev=0.00217], oderiv-count=896960
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23496.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.22,0.24,0.26 0.27,0.29,0.33,0.36,0.38 0.40,0.42,0.45,0.60), mean=0.331, stddev=0.0467], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.41,0.48 0.54,0.58,0.65,0.72,0.77 0.81,0.86,0.90,1.3), mean=0.651, stddev=0.103]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000245314, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02223, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.29,0.30,0.32 0.34,0.39,0.52,0.70,0.80 0.84,0.88,0.91,1.4), mean=0.543, stddev=0.162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.64,0.67,0.74 0.77,0.81,0.88,1.1,1.4 1.5,1.7,1.9,2.1), mean=0.982, stddev=0.251], bias-{mean,stddev}=0.02019,0.02463, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000245314, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0878, w_fc-rms=0.05089, w_oc-rms=0.06006, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641221, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.56,0.59 0.61,0.64,0.69,0.74,0.77 0.79,0.82,0.82,0.87), mean=0.693, stddev=0.0614], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.14 0.15,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.24), mean=0.177, stddev=0.0208] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641221, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.50,0.52,0.55 0.57,0.60,0.66,0.71,0.75 0.79,0.83,0.85,0.89), mean=0.661, stddev=0.0711], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.15,0.17,0.18,0.20,0.20 0.21,0.21,0.21,0.22), mean=0.18, stddev=0.0216] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0250214, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.75,-0.59 -0.42,-0.30,-0.002,0.27,0.42 0.56,0.72,0.80,0.91), mean=-0.00617, stddev=0.341], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.20,0.23 0.29,0.35,0.42,0.47,0.49 0.50,0.52,0.53,0.61), mean=0.405, stddev=0.0789] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641221, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.49,0.51,0.54 0.56,0.59,0.62,0.66,0.68 0.71,0.73,0.75,0.82), mean=0.62, stddev=0.0507], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.17,0.19,0.19,0.20 0.20,0.20,0.21,0.22), mean=0.181, stddev=0.0164] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00641221, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.74,-0.67,-0.52 -0.35,-0.24,-0.006,0.22,0.34 0.49,0.65,0.71,0.84), mean=-0.0069, stddev=0.293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.34,0.36,0.41 0.49,0.57,0.65,0.70,0.72 0.74,0.77,0.77,0.83), mean=0.628, stddev=0.0956] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223115
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.18843
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000245314, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08456, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.6,2.4,2.5 2.6,2.6,2.7,2.8), mean=1.84, stddev=0.563], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.97,1.0,1.1 1.1,1.2,1.3,1.5,1.7 1.9,2.0,2.0,2.1), mean=1.34, stddev=0.238], bias-{mean,stddev}=-0.03474,0.4904, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000245314, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04408, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.61,0.62 0.64,0.65,0.69,0.74,0.78 0.81,0.87,0.93,2.3), mean=0.705, stddev=0.0905], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.7,2.7,2.7,2.8), mean=1.95, stddev=0.544], bias-{mean,stddev}=7.111e-09,0.0302, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0135], oderiv-count=591040
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/262.mdl exp/nnet3/tdnn_lstm1c_sp/263.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.28379 tdnn2.affine:5.19369 lstm1.W_all:4.15545 lstm1.lstm_nonlin:0.096438 lstm1.W_rp:1.64651 tdnn3.affine:3.41647 tdnn4.affine:3.8535 lstm2.W_all:2.95522 lstm2.lstm_nonlin:0.0476948 lstm2.W_rp:1.21137 tdnn5.affine:2.89172 tdnn6.affine:3.2563 lstm3.W_all:3.56544 lstm3.lstm_nonlin:0.0992167 lstm3.W_rp:1.569 output.affine:3.53779 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.7057 tdnn2.affine:11.7734 lstm1.W_all:21.8156 lstm1.lstm_nonlin:1.66436 lstm1.W_rp:15.747 tdnn3.affine:8.69564 tdnn4.affine:8.68208 lstm2.W_all:18.0633 lstm2.lstm_nonlin:0.984317 lstm2.W_rp:14.9616 tdnn5.affine:8.34921 tdnn6.affine:8.60734 lstm3.W_all:25.8891 lstm3.lstm_nonlin:2.68904 lstm3.W_rp:32.087 output.affine:32.6328 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.382954 tdnn2.affine:0.438433 lstm1.W_all:0.190432 lstm1.lstm_nonlin:0.0583551 lstm1.W_rp:0.104852 tdnn3.affine:0.389544 tdnn4.affine:0.440259 lstm2.W_all:0.163432 lstm2.lstm_nonlin:0.0490658 lstm2.W_rp:0.0810961 tdnn5.affine:0.344024 tdnn6.affine:0.374538 lstm3.W_all:0.137659 lstm3.lstm_nonlin:0.0372468 lstm3.W_rp:0.0491257 output.affine:0.108641 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:45:07 KST 2020, elapsed time 1 seconds
