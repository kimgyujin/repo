# nnet3-info exp/nnet3/tdnn_lstm1c_sp/29.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/28.mdl exp/nnet3/tdnn_lstm1c_sp/29.mdl 
# Started at Thu Jul 30 10:12:37 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/29.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000274507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03125, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.02 0.03,0.22,0.55,0.66,0.71 0.76,0.84,0.89,1.2), mean=0.486, stddev=0.239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.22,0.60,0.82,1.2 1.4,1.6,1.6,1.8), mean=0.603, stddev=0.38], bias-{mean,stddev}=-0.00592,0.05817, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.1e+06, self-repaired-proportion=0.1538, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,4e-06,9e-06,3e-05 0.0001,0.002,0.07,0.09,0.10 0.11,0.13,0.13,0.18), mean=0.0564, stddev=0.038], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.001,0.004,0.01 0.03,0.07,0.46,0.59,0.67 0.74,0.81,0.84,0.90), mean=0.399, stddev=0.236], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.06,0.25,0.35,0.45,0.49 0.57,0.64,0.73,0.86), mean=0.337, stddev=0.153], oderiv-count=1.21498e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37906.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,4e-07,8e-07,4e-06 4e-05,0.001,0.06,0.08,0.10 0.11,0.13,0.14,0.18), mean=0.0531, stddev=0.0375], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,3e-05,7e-05,0.0001 0.0005,0.007,0.10,0.11,0.12 0.13,0.14,0.14,0.16), mean=0.0802, stddev=0.046]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000274507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.013, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.39,0.40,0.42 0.44,0.46,0.51,0.56,0.58 0.60,0.63,0.64,0.70), mean=0.51, stddev=0.0544], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.01 0.02,0.14,0.31,0.35,0.38 0.40,0.43,0.45,0.65), mean=0.268, stddev=0.126], bias-{mean,stddev}=-0.000709,0.02868, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.94e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.28,0.29 0.31,0.32,0.35,0.38,0.40 0.42,0.44,0.45,0.55), mean=0.354, stddev=0.0376], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.41 0.42,0.43,0.46,0.49,0.50 0.51,0.52,0.53,0.55), mean=0.461, stddev=0.0303], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.08), mean=0.0402, stddev=0.00765], oderiv-count=1.21062e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37132.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.27,0.29 0.30,0.32,0.35,0.38,0.40 0.42,0.45,0.46,0.54), mean=0.35, stddev=0.0424], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.49,0.50,0.53 0.55,0.57,0.62,0.67,0.71 0.73,0.78,0.80,0.87), mean=0.624, stddev=0.0639]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000274507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01767, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.10 0.15,0.22,0.38,0.58,0.68 0.76,0.85,0.92,1.1), mean=0.403, stddev=0.202], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.39,0.43 0.48,0.70,0.83,0.91,0.96 0.98,1.0,1.1,1.3), mean=0.789, stddev=0.166], bias-{mean,stddev}=-0.001313,0.04167, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000274507, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04436, w_fc-rms=0.05646, w_oc-rms=0.05817, count=1.46e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00602009, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.44 0.45,0.46,0.49,0.53,0.58 0.62,0.65,0.68,0.73), mean=0.501, stddev=0.0539], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0147] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00602009, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.36,0.38 0.40,0.42,0.47,0.54,0.62 0.68,0.76,0.81,0.87), mean=0.49, stddev=0.0929], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.16,0.19 0.20,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0217] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00984309, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.80,-0.78,-0.67 -0.42,-0.25,0.01,0.29,0.42 0.63,0.72,0.77,0.86), mean=0.012, stddev=0.344], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.25,0.29,0.34 0.39,0.45,0.57,0.69,0.79 0.87,0.93,0.94,1.0), mean=0.581, stddev=0.153] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00602009, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.40,0.41 0.42,0.44,0.47,0.50,0.53 0.55,0.60,0.62,0.70), mean=0.476, stddev=0.0461], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.20,0.21,0.22,0.24,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.017] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0168698, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.81,-0.78,-0.63 -0.35,-0.20,-0.0004,0.23,0.36 0.60,0.70,0.77,0.91), mean=0.00639, stddev=0.319], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.21,0.27,0.40 0.53,0.71,0.83,0.88,0.91 0.94,0.97,0.98,1.0), mean=0.775, stddev=0.161] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2.01e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=301176
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000274507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03181, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.40 0.43,0.46,0.65,0.92,0.99 1.0,1.1,1.1,1.2), mean=0.691, stddev=0.22], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.16 0.25,0.34,0.48,0.61,0.70 0.79,0.89,0.98,1.2), mean=0.479, stddev=0.182], bias-{mean,stddev}=0.003183,0.05509, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000274507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01338, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.26 0.28,0.30,0.35,0.43,0.47 0.50,0.54,0.57,0.70), mean=0.366, stddev=0.0753], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.17,0.19,0.28,0.39,0.42 0.44,0.48,0.49,0.52), mean=0.289, stddev=0.0983], bias-{mean,stddev}=-0.002092,0.01574, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.6e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.08 0.09,0.12,0.15,0.19,0.21 0.23,0.26,0.27,0.30), mean=0.156, stddev=0.0468], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.23,0.27 0.31,0.38,0.49,0.59,0.62 0.64,0.68,0.69,0.74), mean=0.48, stddev=0.117], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.06,0.06,0.07,0.08 0.09,0.10,0.10,0.14), mean=0.0653, stddev=0.0129], oderiv-count=1.1607e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34810.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.11,0.15,0.18,0.20 0.22,0.25,0.27,0.34), mean=0.148, stddev=0.0463], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.18 0.19,0.21,0.24,0.27,0.29 0.31,0.32,0.33,0.37), mean=0.243, stddev=0.0375]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000274507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009701, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.30,0.31,0.32 0.33,0.35,0.38,0.41,0.43 0.45,0.47,0.49,0.52), mean=0.381, stddev=0.0401], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.18,0.19,0.21,0.25,0.27 0.28,0.30,0.32,0.36), mean=0.218, stddev=0.0356], bias-{mean,stddev}=-0.009156,0.01581, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.23e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.25 0.26,0.28,0.31,0.34,0.37 0.38,0.40,0.42,0.48), mean=0.312, stddev=0.0407], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.38,0.40 0.41,0.42,0.44,0.47,0.48 0.50,0.50,0.51,0.54), mean=0.445, stddev=0.0298], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.0286, stddev=0.00255], oderiv-count=1.00486e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32487.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.26,0.27,0.31,0.34,0.36 0.38,0.42,0.43,0.48), mean=0.311, stddev=0.0432], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.44,0.45,0.48 0.51,0.54,0.59,0.66,0.69 0.72,0.75,0.78,0.87), mean=0.596, stddev=0.0722]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000274507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01371, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.06,0.10,0.27,0.47,0.57 0.62,0.68,0.72,1.2), mean=0.295, stddev=0.188], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.28,0.31 0.36,0.52,0.64,0.71,0.75 0.78,0.84,0.88,0.95), mean=0.609, stddev=0.14], bias-{mean,stddev}=-0.001585,0.04154, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000274507, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04193, w_fc-rms=0.04512, w_oc-rms=0.04457, count=1.34e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00607632, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.42,0.43,0.45 0.46,0.47,0.49,0.52,0.55 0.57,0.61,0.63,0.65), mean=0.495, stddev=0.0388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0149] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00607632, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.40,0.41 0.42,0.44,0.48,0.51,0.54 0.60,0.67,0.69,0.75), mean=0.485, stddev=0.0595], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.237, stddev=0.0139] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00798771, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.73,-0.65,-0.49 -0.35,-0.20,0.009,0.21,0.36 0.53,0.61,0.69,0.79), mean=0.00591, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.40,0.44,0.48 0.53,0.56,0.65,0.84,0.93 0.97,0.98,0.99,1.0), mean=0.687, stddev=0.151] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00607632, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.42,0.43 0.44,0.46,0.48,0.51,0.53 0.56,0.59,0.61,0.64), mean=0.485, stddev=0.0377], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0154] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00607632, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.71,-0.66,-0.43 -0.30,-0.16,0.008,0.17,0.32 0.48,0.61,0.70,0.86), mean=0.00948, stddev=0.261], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.38,0.40,0.61 0.74,0.80,0.87,0.93,0.97 0.98,0.99,0.99,1.0), mean=0.848, stddev=0.118] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.76e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=265536
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000274507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02857, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.46 0.48,0.51,0.60,0.76,0.82 0.87,0.91,0.92,0.96), mean=0.638, stddev=0.132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.08 0.11,0.18,0.40,0.60,0.68 0.75,0.89,0.93,1.1), mean=0.405, stddev=0.219], bias-{mean,stddev}=1.471e-05,0.08274, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000274507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01258, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.20,0.21,0.22 0.24,0.26,0.32,0.40,0.45 0.53,0.59,0.64,0.68), mean=0.339, stddev=0.0932], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.19 0.20,0.22,0.27,0.34,0.37 0.39,0.42,0.44,0.47), mean=0.279, stddev=0.0654], bias-{mean,stddev}=-0.001227,0.01862, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.19e+05, self-repaired-proportion=0.00486705, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.02,0.05 0.06,0.08,0.11,0.14,0.16 0.18,0.19,0.20,0.23), mean=0.11, stddev=0.0405], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.12,0.13,0.19 0.24,0.30,0.42,0.55,0.59 0.62,0.66,0.67,0.71), mean=0.42, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.05,0.05 0.06,0.06,0.07,0.08,0.10 0.12,0.13,0.13,0.17), mean=0.0743, stddev=0.019], oderiv-count=1.01158e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30165.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.02,0.04 0.06,0.07,0.11,0.14,0.16 0.19,0.20,0.21,0.23), mean=0.109, stddev=0.042], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.07,0.07,0.13 0.15,0.16,0.19,0.22,0.24 0.25,0.27,0.28,0.35), mean=0.192, stddev=0.0417]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000274507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009581, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.30,0.31 0.32,0.34,0.37,0.41,0.44 0.47,0.50,0.52,0.62), mean=0.375, stddev=0.0492], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.11,0.13,0.15 0.16,0.17,0.21,0.25,0.27 0.30,0.34,0.38,0.49), mean=0.212, stddev=0.051], bias-{mean,stddev}=-0.0125,0.01618, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.7e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.23,0.24,0.25 0.26,0.28,0.32,0.35,0.37 0.38,0.41,0.42,0.58), mean=0.318, stddev=0.0427], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.35,0.38 0.38,0.40,0.42,0.45,0.47 0.48,0.49,0.49,0.51), mean=0.424, stddev=0.0318], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0249, stddev=0.00246], oderiv-count=952320
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27843, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.24,0.25 0.26,0.28,0.32,0.36,0.38 0.40,0.41,0.42,0.63), mean=0.32, stddev=0.0473], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.49,0.51 0.53,0.55,0.61,0.68,0.72 0.77,0.80,0.83,1.1), mean=0.62, stddev=0.0804]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000274507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01918, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.21 0.27,0.33,0.43,0.60,0.73 0.79,0.84,0.87,1.6), mean=0.458, stddev=0.171], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.60,0.61,0.65 0.66,0.68,0.75,1.0,1.3 1.3,1.4,1.4,1.6), mean=0.845, stddev=0.225], bias-{mean,stddev}=0.008396,0.04852, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000274507, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04743, w_fc-rms=0.05881, w_oc-rms=0.06671, count=1.21e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614431, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.46 0.49,0.52,0.57,0.62,0.64 0.66,0.68,0.69,0.70), mean=0.568, stddev=0.0603], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.21,0.22,0.22 0.23,0.23,0.23,0.24), mean=0.207, stddev=0.0136] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614431, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.46,0.47 0.49,0.52,0.58,0.63,0.65 0.69,0.71,0.73,0.82), mean=0.578, stddev=0.0659], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.17,0.18 0.19,0.19,0.21,0.22,0.23 0.23,0.24,0.24,0.25), mean=0.208, stddev=0.0175] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00779996, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.77,-0.70,-0.48 -0.34,-0.22,0.006,0.21,0.34 0.49,0.61,0.71,0.82), mean=-0.000137, stddev=0.287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.28,0.29,0.33 0.37,0.41,0.46,0.51,0.55 0.58,0.61,0.64,0.72), mean=0.461, stddev=0.0729] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614431, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.51,0.52,0.54 0.56,0.58,0.64,0.68,0.70 0.72,0.74,0.75,0.77), mean=0.634, stddev=0.0539], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.16,0.17 0.17,0.18,0.19,0.20,0.21 0.21,0.22,0.22,0.23), mean=0.19, stddev=0.014] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00832286, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.79,-0.71,-0.46 -0.33,-0.18,0.008,0.19,0.34 0.49,0.62,0.72,0.85), mean=0.00129, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.29,0.34,0.44 0.52,0.58,0.66,0.70,0.73 0.74,0.76,0.77,0.83), mean=0.637, stddev=0.0938] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.51e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.43068e-06, count-zeroing-boundaries=225699
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000274507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06573, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.5,1.7,1.7 1.8,1.8,1.9,2.0), mean=1.49, stddev=0.191], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.56,0.66,0.74 0.80,0.87,1.1,1.2,1.3 1.3,1.4,1.4,1.7), mean=1.04, stddev=0.186], bias-{mean,stddev}=0.002957,0.1148, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000274507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04113, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.52,0.55 0.57,0.59,0.64,0.70,0.75 0.78,0.85,0.90,2.4), mean=0.655, stddev=0.103], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.6,1.7,1.9,2.0,2.1 2.2,2.3,2.4,2.5), mean=1.88, stddev=0.204], bias-{mean,stddev}=5.269e-09,0.03137, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0138], oderiv-count=589440
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/28.mdl exp/nnet3/tdnn_lstm1c_sp/29.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.2223 tdnn2.affine:9.48824 lstm1.W_all:8.26399 lstm1.lstm_nonlin:0.233405 lstm1.W_rp:3.34874 tdnn3.affine:5.69385 tdnn4.affine:6.74123 lstm2.W_all:5.49063 lstm2.lstm_nonlin:0.188031 lstm2.W_rp:2.33364 tdnn5.affine:4.75744 tdnn6.affine:5.85281 lstm3.W_all:7.0983 lstm3.lstm_nonlin:0.233423 lstm3.W_rp:2.92216 output.affine:6.44145 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.4138 tdnn2.affine:11.7241 lstm1.W_all:20.6372 lstm1.lstm_nonlin:2.10719 lstm1.W_rp:11.7293 tdnn3.affine:8.53014 tdnn4.affine:8.74714 lstm2.W_all:16.0526 lstm2.lstm_nonlin:1.73378 lstm2.W_rp:10.5902 tdnn5.affine:8.02218 tdnn6.affine:8.64215 lstm3.W_all:22.4173 lstm3.lstm_nonlin:2.29826 lstm3.W_rp:24.2383 output.affine:30.4549 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.742396 tdnn2.affine:0.80859 lstm1.W_all:0.400971 lstm1.lstm_nonlin:0.105404 lstm1.W_rp:0.287206 tdnn3.affine:0.669034 tdnn4.affine:0.769611 lstm2.W_all:0.342655 lstm2.lstm_nonlin:0.0994819 lstm2.W_rp:0.221425 tdnn5.affine:0.596222 tdnn6.affine:0.68151 lstm3.W_all:0.318433 lstm3.lstm_nonlin:0.0977252 lstm3.W_rp:0.121461 output.affine:0.211466 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:12:37 KST 2020, elapsed time 0 seconds
