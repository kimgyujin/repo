# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/39.mdl exp/nnet3/tdnn_lstm1c_sp/40.mdl 
# Started at Thu Jul 30 10:16:57 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/39.mdl exp/nnet3/tdnn_lstm1c_sp/40.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000265938, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02303, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.01,0.02 0.05,0.33,0.41,0.48,0.50 0.53,0.58,0.62,0.67), mean=0.368, stddev=0.155], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.15,0.17,0.49,0.63,0.75 0.96,1.1,1.1,1.4), mean=0.458, stddev=0.257], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.05,0.08,0.29,0.67,0.93 1.1,1.3,1.4,1.6), mean=0.393, stddev=0.349], bias-{mean,stddev}=0.001283,0.03083, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.99e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.26,-0.24,-0.17 -0.11,-0.05,0.02,0.16,0.23 0.28,0.36,0.41,0.56), mean=0.0464, stddev=0.138], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.9,-1.8,-1.5,-1.0 -0.69,-0.25,0.37,0.94,1.4 1.6,1.9,2.1,3.1), mean=0.345, stddev=0.809], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.30,1.0,1.3 1.6,2.2,2.3,3.4), mean=0.514, stddev=0.597], oderiv-count=33024
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=645.741, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-2.2,-1.8,-1.4 -0.94,-0.42,0.02,0.77,1.3 1.8,2.3,2.8,4.0), mean=0.166, stddev=0.945], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0.16 0.28,0.36,0.42,0.85), mean=0.0339, stddev=0.101]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000265938, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01033, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.32,0.34 0.36,0.37,0.41,0.44,0.46 0.47,0.49,0.49,0.53), mean=0.406, stddev=0.0388], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.007,0.01 0.03,0.19,0.24,0.28,0.30 0.31,0.33,0.34,0.39), mean=0.217, stddev=0.0907], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.11,0.24,0.50,0.69 0.85,1.0,1.1,1.2), mean=0.323, stddev=0.249], bias-{mean,stddev}=0.0007637,0.01639, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=698.17, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.2,-3.5,-3.1,-2.4 -1.5,-0.66,0.46,1.8,2.3 2.9,3.5,3.9,5.7), mean=0.471, stddev=1.57], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,1.3,1.8 2.1,2.3,2.6,3.7), mean=0.525, stddev=0.776]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000265938, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006898, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.003,0.006,0.02 0.05,0.08,0.14,0.22,0.28 0.33,0.37,0.40,0.48), mean=0.152, stddev=0.0891], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.12 0.13,0.19,0.33,0.37,0.38 0.40,0.41,0.41,0.48), mean=0.301, stddev=0.09], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.002,0.08,0.17,0.36,0.51 0.67,0.88,0.96,1.2), mean=0.232, stddev=0.213], bias-{mean,stddev}=1.561e-05,0.002777, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000265938, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.002467, w_fc-rms=0.003544, w_oc-rms=0.005755, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=2.48632e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-1.7,-1.4,-0.86 -0.52,-0.03,0.53,1.1,1.4 1.6,2.0,2.4,3.8), mean=0.493, stddev=0.795], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.60,-0.45,-0.26 -0.10,0.04,0.24,0.43,0.56 0.70,0.81,0.91,1.2), mean=0.232, stddev=0.282] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=2.48632e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-1.2,-1.1,-0.74 -0.39,-0.05,0.52,1.1,1.5 1.8,2.3,2.6,4.2), mean=0.533, stddev=0.778], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.46,-0.42,-0.23 -0.07,0.07,0.25,0.35,0.48 0.58,0.74,0.87,1.3), mean=0.218, stddev=0.247] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.568378, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-20,-14,-11,-7.9 -6.4,-4.0,-0.19,3.9,6.6 8.9,10,11,15), mean=-0.103, stddev=5.14], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-6.7,-6.1,-4.7 -3.5,-1.9,0.74,2.6,3.7 4.8,5.8,7.1,11), mean=0.42, stddev=2.91] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=2.48632e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.1,-1.7,-1.6,-1.2 -0.77,-0.26,0.44,1.1,1.7 2.1,2.5,2.8,3.9), mean=0.451, stddev=0.962], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.78,-0.65,-0.46 -0.28,-0.08,0.23,0.41,0.56 0.70,0.84,0.88,1.5), mean=0.172, stddev=0.353] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.370257, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-17,-10,-9.2,-6.1 -4.7,-3.2,-0.04,3.0,4.8 6.1,8.1,8.8,12), mean=-0.102, stddev=3.92], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.6,-4.2,-3.8,-2.7 -1.7,-0.68,0.79,1.9,2.6 3.4,4.5,5.4,7.8), mean=0.631, stddev=1.86] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.09e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1638
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000265938, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.008836, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.13,0.19,0.25,0.28 0.29,0.30,0.30,0.31), mean=0.192, stddev=0.061], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.07,0.10,0.14,0.17,0.19 0.21,0.23,0.24,0.25), mean=0.134, stddev=0.0486], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0005,0.0006 0.0008,0.001,0.004,0.08,0.39 0.55,0.66,0.74,0.80), mean=0.0875, stddev=0.181], bias-{mean,stddev}=-3.447e-06,0.00581, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000265938, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008801, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.20,0.21,0.24,0.27,0.29 0.31,0.34,0.35,0.42), mean=0.243, stddev=0.0395], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.18,0.26,0.28 0.29,0.31,0.31,0.35), mean=0.187, stddev=0.0726], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0003,0.0003,0.0004 0.0006,0.001,0.006,0.16,0.45 0.65,0.81,0.90,1.1), mean=0.111, stddev=0.219], bias-{mean,stddev}=-0.001487,0.01194, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.03,0.07,0.10,0.11 0.13,0.16,0.17,0.33), mean=0.0676, stddev=0.0414], oderiv-count=151040
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=855.456, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.2,-1.9,-1.6,-1.2 -0.82,-0.43,0.38,1.1,1.5 1.8,2.2,2.3,2.9), mean=0.335, stddev=0.915], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.36,0.55 0.67,0.79,0.81,1.1), mean=0.141, stddev=0.243]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000265938, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007407, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.25 0.26,0.27,0.29,0.31,0.32 0.33,0.34,0.35,0.36), mean=0.292, stddev=0.0232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.15,0.17,0.19,0.20 0.21,0.22,0.23,0.27), mean=0.167, stddev=0.024], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.09,0.11,0.19,0.36,0.48 0.59,0.70,0.75,0.85), mean=0.244, stddev=0.162], bias-{mean,stddev}=7.838e-05,0.009526, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1012.74, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-1.2,-1.1,-0.78 -0.37,-0.07,0.45,0.98,1.3 1.5,1.7,1.8,2.4), mean=0.441, stddev=0.673], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.43,1.2,1.4 1.6,1.7,1.8,2.1), mean=0.558, stddev=0.583]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000265938, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004583, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.005,0.02,0.08,0.15,0.20 0.23,0.26,0.27,0.37), mean=0.0913, stddev=0.0729], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.12,0.22,0.24,0.25 0.27,0.28,0.29,0.31), mean=0.199, stddev=0.065], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.04,0.10,0.23,0.34 0.45,0.61,0.67,0.82), mean=0.149, stddev=0.147], bias-{mean,stddev}=1.858e-05,0.002566, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000265938, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001944, w_fc-rms=0.002104, w_oc-rms=0.002657, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=2.26176e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.1,-0.80,-0.50 -0.17,0.12,0.50,0.74,1.0 1.2,1.7,1.8,2.4), mean=0.449, stddev=0.52], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.61,-0.38,-0.28,-0.15 -0.01,0.08,0.25,0.28,0.35 0.45,0.57,0.73,0.92), mean=0.199, stddev=0.182] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=2.26176e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-0.76,-0.58,-0.35 -0.19,0.09,0.47,0.65,0.89 1.1,1.4,1.6,4.0), mean=0.408, stddev=0.481], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.71,-0.19,-0.14,0.02 0.08,0.17,0.25,0.29,0.37 0.42,0.54,0.64,0.91), mean=0.236, stddev=0.139] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0661447, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-10,-8.1,-6.5,-5.2 -3.8,-2.2,-0.15,1.8,3.5 5.0,6.6,7.3,13), mean=-0.128, stddev=2.98], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.7,-4.8,-3.6,-2.9 -2.2,-1.0,0.99,1.9,2.7 3.7,4.8,5.1,7.7), mean=0.648, stddev=1.98] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=2.26176e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-1.2,-1.1,-0.57 -0.28,0.11,0.54,0.81,1.1 1.4,1.8,2.0,2.6), mean=0.479, stddev=0.584], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.67,-0.45,-0.33,-0.16 -0.03,0.09,0.25,0.30,0.39 0.48,0.61,0.67,0.77), mean=0.209, stddev=0.192] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=2.26176e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.1,-7.4,-5.2,-4.0 -3.0,-1.8,-0.14,1.5,2.6 3.7,5.3,5.7,9.6), mean=-0.124, stddev=2.42], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.6,-2.8,-1.9,-1.2 -0.62,-0.07,1.0,1.6,2.1 2.8,3.2,3.5,4.4), mean=0.855, stddev=1.18] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.02e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1536
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000265938, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006088, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.10,0.11,0.13,0.16,0.17 0.18,0.19,0.19,0.21), mean=0.136, stddev=0.0258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.01 0.02,0.03,0.10,0.13,0.15 0.16,0.17,0.17,0.21), mean=0.0852, stddev=0.0488], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0005,0.0006 0.0007,0.0009,0.003,0.10,0.28 0.36,0.41,0.45,0.51), mean=0.0645, stddev=0.123], bias-{mean,stddev}=-0.0006431,0.008617, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000265938, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007342, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.16,0.17,0.19,0.23,0.25 0.27,0.30,0.31,0.34), mean=0.201, stddev=0.0398], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.13,0.16,0.20,0.22 0.23,0.24,0.25,0.27), mean=0.163, stddev=0.0378], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0002,0.0002,0.0003 0.0004,0.0007,0.004,0.18,0.38 0.54,0.66,0.73,0.84), mean=0.0984, stddev=0.18], bias-{mean,stddev}=0.001573,0.00999, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2.3e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-15,-12,-10,-7.5 -5.7,-3.6,0.20,3.8,6.3 8.1,9.5,10,15), mean=0.185, stddev=4.72], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-53,-34,-31,-26 -21,-12,0.83,14,22 27,31,35,44), mean=0.907, stddev=15.7]
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1170.03, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.94,-0.83,-0.54 -0.38,-0.18,0.15,0.49,0.65 0.88,1.1,1.2,1.8), mean=0.156, stddev=0.435], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.30,0.37 0.44,0.51,0.56,0.68), mean=0.128, stddev=0.164]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000265938, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006338, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.20,0.21 0.22,0.23,0.25,0.27,0.28 0.29,0.31,0.31,0.37), mean=0.249, stddev=0.0257], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.11 0.11,0.12,0.14,0.16,0.18 0.19,0.21,0.22,0.25), mean=0.142, stddev=0.0271], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.07,0.09,0.15,0.30,0.41 0.52,0.63,0.68,0.80), mean=0.202, stddev=0.148], bias-{mean,stddev}=0.000334,0.008144, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1327.32, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.76,-0.68,-0.37 -0.16,0.11,0.51,0.90,1.1 1.3,1.5,1.6,1.9), mean=0.497, stddev=0.505], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.71,1.1,1.3 1.4,1.6,1.7,1.9), mean=0.665, stddev=0.517]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000265938, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006037, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.05 0.07,0.08,0.12,0.21,0.26 0.28,0.30,0.32,0.52), mean=0.137, stddev=0.0709], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.18 0.20,0.21,0.25,0.33,0.38 0.40,0.43,0.43,0.46), mean=0.267, stddev=0.0691], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.006 0.04,0.06,0.12,0.28,0.47 0.67,0.83,0.89,1.0), mean=0.191, stddev=0.199], bias-{mean,stddev}=7.194e-05,0.002835, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000265938, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.002936, w_fc-rms=0.004373, w_oc-rms=0.005115, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=2.05431e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-1.7,-1.4,-0.97 -0.46,0.20,1.2,2.0,2.6 3.0,3.5,3.6,7.8), mean=1.12, stddev=1.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.45,-0.40,-0.30 -0.22,-0.10,0.08,0.28,0.42 0.55,0.63,0.70,0.96), mean=0.0921, stddev=0.251] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=2.05431e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.8,-2.4,-1.8,-1.4 -0.87,-0.19,1.0,2.2,2.7 3.1,3.5,3.7,5.5), mean=0.97, stddev=1.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.72,-0.54,-0.42 -0.30,-0.16,0.07,0.31,0.44 0.60,0.74,0.86,1.3), mean=0.0771, stddev=0.308] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.147679, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-21,-14,-13,-9.8 -7.5,-4.5,-0.16,4.5,6.9 8.9,11,14,21), mean=-0.179, stddev=5.76], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.0,-5.3,-4.9,-4.0 -3.3,-2.4,-0.37,1.7,2.9 3.7,4.8,5.2,6.6), mean=-0.278, stddev=2.37] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=2.05431e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-2.1,-1.3,-0.78 -0.13,0.40,1.4,2.4,2.9 3.3,3.8,4.4,5.5), mean=1.36, stddev=1.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.74,-0.69,-0.59 -0.43,-0.27,-0.008,0.26,0.43 0.55,0.69,0.81,1.0), mean=-0.00856, stddev=0.338] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0856985, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-18,-12,-9.5,-7.8 -5.7,-3.6,0.10,3.3,5.2 7.1,9.3,10.0,18), mean=-0.147, stddev=4.5], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.3,-4.8,-4.2,-3.5 -2.8,-1.9,-0.37,1.4,2.2 2.9,3.5,4.2,4.8), mean=-0.276, stddev=1.94] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-9.41e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1409
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000265938, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007686, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.11,0.12 0.12,0.13,0.17,0.22,0.22 0.23,0.24,0.25,0.26), mean=0.17, stddev=0.0427], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.08,0.10,0.12,0.14,0.15 0.16,0.17,0.17,0.24), mean=0.121, stddev=0.0284], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.004,0.05,0.23,0.32 0.40,0.46,0.49,0.55), mean=0.111, stddev=0.135], bias-{mean,stddev}=-1.467e-05,0.005251, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000265938, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.008436, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.08,0.09,0.12,0.16,0.19 0.21,0.24,0.27,0.43), mean=0.128, stddev=0.0471], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.29,0.30 0.31,0.33,0.38,0.44,0.46 0.47,0.49,0.51,0.52), mean=0.383, stddev=0.058], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.002 0.003,0.004,0.03,0.53,0.78 0.93,1.0,1.1,1.1), mean=0.215, stddev=0.322], bias-{mean,stddev}=-9.871e-11,0.002253, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.12493 tdnn2.affine:9.31117 lstm1.W_all:8.02199 lstm1.lstm_nonlin:0.164059 lstm1.W_rp:3.25043 tdnn3.affine:5.61151 tdnn4.affine:6.6748 lstm2.W_all:5.32987 lstm2.lstm_nonlin:0.0890975 lstm2.W_rp:2.24297 tdnn5.affine:4.68176 tdnn6.affine:5.71146 lstm3.W_all:7.02108 lstm3.lstm_nonlin:0.167435 lstm3.W_rp:2.8273 output.affine:6.24014 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.4461 tdnn2.affine:11.7082 lstm1.W_all:20.6004 lstm1.lstm_nonlin:1.64014 lstm1.W_rp:11.8178 tdnn3.affine:8.4461 tdnn4.affine:8.7353 lstm2.W_all:15.9999 lstm2.lstm_nonlin:0.947075 lstm2.W_rp:10.7163 tdnn5.affine:7.92818 tdnn6.affine:8.53003 lstm3.W_all:22.6157 lstm3.lstm_nonlin:1.78821 lstm3.W_rp:24.5451 output.affine:30.3139 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.737516 tdnn2.affine:0.791192 lstm1.W_all:0.389353 lstm1.lstm_nonlin:0.0988842 lstm1.W_rp:0.27597 tdnn3.affine:0.661914 tdnn4.affine:0.761941 lstm2.W_all:0.333278 lstm2.lstm_nonlin:0.0913443 lstm2.W_rp:0.209533 tdnn5.affine:0.591167 tdnn6.affine:0.669754 lstm3.W_all:0.31076 lstm3.lstm_nonlin:0.0934796 lstm3.W_rp:0.115148 output.affine:0.206045 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:16:57 KST 2020, elapsed time 0 seconds
