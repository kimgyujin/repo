# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/439.mdl exp/nnet3/tdnn_lstm1c_sp/440.mdl 
# Started at Thu Jul 30 12:55:33 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/439.mdl exp/nnet3/tdnn_lstm1c_sp/440.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=8.03291e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007393, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.003,0.008,0.13,0.16,0.18 0.19,0.21,0.22,0.26), mean=0.108, stddev=0.0681], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.05,0.15,0.21,0.24 0.30,0.34,0.38,0.47), mean=0.146, stddev=0.0839], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.006,0.009 0.01,0.02,0.08,0.21,0.29 0.37,0.45,0.47,0.55), mean=0.121, stddev=0.118], bias-{mean,stddev}=-0.0004409,0.01032, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.82,1.8 2.3,3.4,4.2,5.5), mean=0.446, stddev=0.912], oderiv-count=5760
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-8009.21, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=8.03291e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002909, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.10 0.10,0.11,0.11,0.12,0.13 0.13,0.14,0.14,0.16), mean=0.114, stddev=0.0102], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0007,0.001 0.001,0.004,0.07,0.08,0.09 0.10,0.10,0.11,0.13), mean=0.0562, stddev=0.0352], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.06,0.14,0.20 0.25,0.30,0.33,0.36), mean=0.086, stddev=0.0761], bias-{mean,stddev}=0.0003604,0.005008, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-7850.28, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=8.03291e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001704, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-09,4e-08,7e-08,5e-07 1e-05,0.02,0.04,0.06,0.07 0.08,0.09,0.09,0.11), mean=0.0362, stddev=0.024], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.08,0.09,0.10 0.11,0.11,0.12,0.14), mean=0.0728, stddev=0.0273], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,7e-08,9e-08 1e-07,0.02,0.04,0.08,0.13 0.18,0.23,0.25,0.30), mean=0.0549, stddev=0.0551], bias-{mean,stddev}=2.037e-05,0.0005774, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=8.03291e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0006209, w_fc-rms=0.000594, w_oc-rms=0.001451, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000116883, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.60,-0.53,-0.26 -0.07,0.11,0.50,0.75,0.97 1.2,1.4,1.5,1.8), mean=0.456, stddev=0.422], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.72,-0.42,-0.24 -0.08,0.07,0.25,0.44,0.60 0.69,0.78,0.93,1.7), mean=0.246, stddev=0.286] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000116883, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.69,-0.49,-0.28 -0.11,0.12,0.47,0.61,0.79 0.94,1.1,1.2,2.3), mean=0.386, stddev=0.372], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.43,-0.26,-0.15,-0.05 0.05,0.14,0.25,0.36,0.48 0.59,0.69,0.77,1.0), mean=0.258, stddev=0.186] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00779566, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.4,-6.4,-5.9,-4.8 -2.9,-1.7,0.004,2.2,3.4 4.3,6.0,7.3,11), mean=0.12, stddev=2.67], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.2,-4.6,-3.9,-3.1 -2.1,-0.93,1.0,2.4,3.6 4.9,5.8,6.0,9.5), mean=0.853, stddev=2.27] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000116883, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.96,-0.66,-0.47 -0.22,0.11,0.50,0.84,1.1 1.3,1.6,1.9,2.5), mean=0.477, stddev=0.526], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.57,-0.50,-0.28 -0.11,0.06,0.25,0.44,0.61 0.73,0.90,1.0,1.5), mean=0.243, stddev=0.304] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.290958, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.8,-5.2,-4.6,-3.3 -2.3,-1.3,0.004,1.5,2.6 3.2,4.3,4.9,6.7), mean=0.103, stddev=1.97], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.5,-2.2,-1.8,-1.3 -0.82,-0.09,0.92,1.5,2.0 2.3,2.9,3.3,4.3), mean=0.691, stddev=1.1] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-4.9e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-730
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0760331
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=8.03291e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00242, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.05,0.07,0.07 0.08,0.08,0.08,0.09), mean=0.0527, stddev=0.0164], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,4e-05,6e-05,0.0001 0.0005,0.03,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0348, stddev=0.0176], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,6e-08 8e-08,1e-07,3e-07,0.06,0.11 0.14,0.16,0.19,0.22), mean=0.0252, stddev=0.0491], bias-{mean,stddev}=0.0001536,0.002619, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=8.03291e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00283, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.06 0.06,0.07,0.08,0.09,0.09 0.10,0.11,0.11,0.13), mean=0.0781, stddev=0.0123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.04,0.06,0.08,0.09 0.09,0.10,0.10,0.10), mean=0.0612, stddev=0.0205], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-08,3e-08,4e-08 5e-08,8e-08,1e-05,0.08,0.15 0.20,0.25,0.26,0.30), mean=0.0402, stddev=0.0681], bias-{mean,stddev}=0.0002131,0.002095, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.04,0.13,0.20,0.26 0.30,0.37,0.45,0.55), mean=0.134, stddev=0.1], oderiv-count=56192
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-7373.51, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=8.03291e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002065, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.07 0.07,0.08,0.08,0.09,0.09 0.09,0.09,0.10,0.10), mean=0.0813, stddev=0.00612], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.04 0.04,0.04,0.05,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0467, stddev=0.00636], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.05,0.10,0.14 0.17,0.20,0.21,0.24), mean=0.0667, stddev=0.0469], bias-{mean,stddev}=0.0001132,0.002266, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=3.03e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.22,-0.15,-0.04,0.02 0.07,0.14,0.26,0.39,0.46 0.52,0.60,0.68,0.84), mean=0.266, stddev=0.16], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.34,-0.18,-0.12,-0.004 0.09,0.22,0.42,0.60,0.71 0.80,0.92,0.96,1.2), mean=0.412, stddev=0.242], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.02 0.02,0.03,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0395, stddev=0.0125], oderiv-count=85952
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-6896.74, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=8.03291e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001146, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,2e-07,3e-07,9e-07 3e-06,6e-05,0.02,0.04,0.05 0.06,0.06,0.07,0.08), mean=0.0218, stddev=0.0194], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.03,0.05,0.06,0.07 0.07,0.07,0.07,0.08), mean=0.0492, stddev=0.0174], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,6e-08,7e-08 1e-05,0.009,0.02,0.05,0.09 0.12,0.16,0.18,0.21), mean=0.0357, stddev=0.0382], bias-{mean,stddev}=5.715e-05,0.0005403, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=8.03291e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0004165, w_fc-rms=0.0004043, w_oc-rms=0.0007729, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000154538, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.58,-0.46,-0.21 -0.02,0.24,0.50,0.65,0.89 1.0,1.2,1.2,1.8), mean=0.455, stddev=0.353], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.52,-0.35,-0.25,-0.13 0.01,0.12,0.25,0.37,0.48 0.61,0.69,0.78,0.86), mean=0.244, stddev=0.2] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000154538, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.55,-0.41,-0.24 -0.009,0.18,0.50,0.56,0.79 0.98,1.1,1.2,2.0), mean=0.418, stddev=0.344], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.37,-0.23,-0.17,0.002 0.10,0.18,0.25,0.34,0.45 0.55,0.66,0.75,1.2), mean=0.26, stddev=0.168] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.000154538, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.0,-6.4,-5.6,-4.7 -3.4,-1.7,-0.01,1.3,3.0 4.2,5.8,6.3,8.3), mean=-0.0716, stddev=2.49], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.8,-4.9,-4.1,-3.2 -2.1,-0.64,1.0,1.9,3.3 4.9,6.0,7.0,9.2), mean=0.815, stddev=2.23] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000154538, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.73,-0.42,-0.28 -0.08,0.23,0.50,0.74,0.98 1.2,1.4,1.6,2.7), mean=0.481, stddev=0.436], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.59,-0.44,-0.26 -0.10,0.09,0.25,0.36,0.53 0.67,0.78,0.84,1.4), mean=0.227, stddev=0.264] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.000154538, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.7,-5.3,-4.7,-3.8 -2.8,-1.4,-0.005,1.1,2.1 3.4,4.0,4.5,6.1), mean=-0.141, stddev=1.96], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.1,-2.5,-1.9,-1.3 -0.76,-0.04,1.0,1.3,1.8 2.3,3.0,3.5,4.4), mean=0.729, stddev=1.08] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-3.74e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-564
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0760331
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=8.03291e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001653, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.05,0.05 0.05,0.05,0.05,0.06), mean=0.0363, stddev=0.0101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,9e-05,0.0001,0.0002 0.0003,0.0009,0.03,0.03,0.04 0.04,0.04,0.04,0.06), mean=0.0216, stddev=0.0155], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 6e-08,1e-07,1e-06,0.05,0.07 0.09,0.10,0.11,0.12), mean=0.0191, stddev=0.0325], bias-{mean,stddev}=0.0001379,0.002113, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=8.03291e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002361, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.07,0.08 0.09,0.09,0.10,0.11), mean=0.065, stddev=0.0113], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.05,0.07,0.07 0.07,0.08,0.08,0.08), mean=0.0518, stddev=0.0147], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,3e-08,4e-08 5e-08,9e-08,0.001,0.07,0.12 0.16,0.20,0.23,0.25), mean=0.0353, stddev=0.0557], bias-{mean,stddev}=3.988e-05,0.001353, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-6419.96, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=8.03291e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.001819, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.08,0.08 0.08,0.09,0.09,0.09), mean=0.0714, stddev=0.00792], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.05,0.06,0.06), mean=0.0411, stddev=0.00586], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.04,0.08,0.12 0.15,0.18,0.20,0.23), mean=0.0572, stddev=0.0435], bias-{mean,stddev}=-2.452e-05,0.00192, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-5943.19, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=8.03291e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001585, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.008,0.01 0.01,0.02,0.03,0.06,0.07 0.08,0.09,0.09,0.11), mean=0.0335, stddev=0.0225], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.05,0.06,0.09,0.11 0.12,0.13,0.13,0.14), mean=0.0674, stddev=0.026], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,8e-06 0.007,0.01,0.02,0.07,0.12 0.18,0.23,0.25,0.28), mean=0.046, stddev=0.0557], bias-{mean,stddev}=-1.824e-05,0.0003797, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=8.03291e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0007043, w_fc-rms=0.0008521, w_oc-rms=0.001511, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000249169, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.1,-5.2,-4.4,-3.2 -2.4,-1.7,-0.66,0.68,1.4 2.2,3.2,3.9,6.6), mean=-0.55, stddev=1.72], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.3,-0.91,-0.53 -0.28,-0.06,0.46,0.88,1.1 1.4,1.6,1.7,2.0), mean=0.428, stddev=0.59] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000249169, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.4,-4.9,-4.5,-3.6 -3.0,-1.8,-0.10,1.5,2.3 3.1,3.9,4.3,7.2), mean=-0.193, stddev=2.05], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-1.0,-0.82,-0.59 -0.39,-0.11,0.37,0.87,1.1 1.4,1.6,1.8,2.6), mean=0.38, stddev=0.61] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=2.33337, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-51,-33,-28,-21 -16,-9.0,1.0,11,16 21,26,29,56), mean=0.598, stddev=13.4], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-20,-15,-14,-10 -7.6,-4.6,0.42,5.7,8.3 11,14,15,20), mean=0.568, stddev=6.46] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000249169, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.9,-6.0,-5.2,-4.1 -3.1,-1.9,0.009,2.2,3.2 4.6,5.6,5.9,9.2), mean=0.114, stddev=2.56], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.8,-1.5,-1.1 -0.69,-0.36,0.28,0.87,1.2 1.4,1.7,1.9,2.5), mean=0.248, stddev=0.761] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=3.01659, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-40,-27,-24,-17 -12,-6.9,0.36,7.8,13 17,20,27,52), mean=0.383, stddev=10.6], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-14,-8.6,-8.0,-6.2 -4.6,-2.8,0.22,3.7,5.4 6.9,8.3,8.9,12), mean=0.401, stddev=3.89] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-2.59e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-396
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0760331
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=8.03291e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001771, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.03,0.06,0.06 0.06,0.06,0.06,0.06), mean=0.0363, stddev=0.0178], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0278, stddev=0.0065], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-07,2e-07,2e-07 3e-07,5e-07,0.005,0.05,0.08 0.09,0.11,0.12,0.14), mean=0.0235, stddev=0.0328], bias-{mean,stddev}=0.0001499,0.004312, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=8.03291e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002015, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.01 0.02,0.02,0.03,0.04,0.05 0.05,0.06,0.07,0.13), mean=0.0301, stddev=0.0121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.05,0.07,0.12,0.12 0.13,0.13,0.13,0.14), mean=0.0868, stddev=0.0317], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 3e-07,6e-07,0.002,0.13,0.18 0.21,0.23,0.24,0.26), mean=0.052, stddev=0.0764], bias-{mean,stddev}=4.798e-10,0.0003863, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.03,0.04 0.04,0.05,0.06,0.36), mean=0.0168, stddev=0.018], oderiv-count=39360

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.92956 tdnn2.affine:2.62224 lstm1.W_all:1.982 lstm1.lstm_nonlin:0.0384565 lstm1.W_rp:0.890812 tdnn3.affine:1.80318 tdnn4.affine:1.86035 lstm2.W_all:1.3322 lstm2.lstm_nonlin:0.0220419 lstm2.W_rp:0.608667 tdnn5.affine:1.50424 tdnn6.affine:1.63875 lstm3.W_all:1.84259 lstm3.lstm_nonlin:0.0426855 lstm3.W_rp:0.654837 output.affine:1.49036 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.9442 tdnn2.affine:10.4093 lstm1.W_all:20.2897 lstm1.lstm_nonlin:1.61646 lstm1.W_rp:14.8212 tdnn3.affine:7.81603 tdnn4.affine:7.3084 lstm2.W_all:16.5454 lstm2.lstm_nonlin:1.1977 lstm2.W_rp:13.8345 tdnn5.affine:7.31008 tdnn6.affine:7.37728 lstm3.W_all:23.8649 lstm3.lstm_nonlin:2.71323 lstm3.W_rp:32.88 output.affine:30.4373 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.227094 tdnn2.affine:0.251961 lstm1.W_all:0.0976909 lstm1.lstm_nonlin:0.0236595 lstm1.W_rp:0.0600744 tdnn3.affine:0.230521 tdnn4.affine:0.254499 lstm2.W_all:0.0805159 lstm2.lstm_nonlin:0.018344 lstm2.W_rp:0.0439572 tdnn5.affine:0.205497 tdnn6.affine:0.22213 lstm3.W_all:0.0772023 lstm3.lstm_nonlin:0.0156679 lstm3.W_rp:0.0199048 output.affine:0.0489466 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:55:33 KST 2020, elapsed time 0 seconds
