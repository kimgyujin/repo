# nnet3-info exp/nnet3/tdnn_lstm1c_sp/273.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/272.mdl exp/nnet3/tdnn_lstm1c_sp/273.mdl 
# Started at Thu Jul 30 11:49:03 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/273.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000230236, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03361, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.01 0.02,0.05,0.58,0.73,0.82 0.92,0.98,1.0,1.2), mean=0.498, stddev=0.301], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.22,0.65,0.92,1.3 1.5,1.6,1.6,1.7), mean=0.653, stddev=0.402], bias-{mean,stddev}=0.0001407,0.0641, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.09e+06, self-repaired-proportion=0.219995, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,4e-06,1e-05,5e-05 9e-05,0.0003,0.06,0.10,0.12 0.13,0.15,0.17,0.22), mean=0.0584, stddev=0.0475], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.002,0.004,0.01 0.03,0.06,0.43,0.61,0.73 0.80,0.87,0.88,0.99), mean=0.385, stddev=0.263], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.02,0.02,0.02 0.03,0.09,0.26,0.35,0.41 0.50,0.59,0.67,1.3), mean=0.255, stddev=0.157], oderiv-count=1.14867e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33816.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,3e-06,6e-06,2e-05 6e-05,0.0003,0.06,0.10,0.12 0.13,0.16,0.17,0.23), mean=0.0565, stddev=0.0468], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,8e-05,0.0001,0.0003 0.0005,0.002,0.10,0.13,0.14 0.15,0.16,0.16,0.17), mean=0.079, stddev=0.0538]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000230236, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01259, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.38,0.39 0.41,0.44,0.49,0.54,0.59 0.62,0.67,0.69,0.75), mean=0.492, stddev=0.0683], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.007,0.009 0.01,0.03,0.30,0.35,0.39 0.42,0.45,0.50,0.77), mean=0.247, stddev=0.145], bias-{mean,stddev}=-0.02278,0.03905, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.26 0.28,0.29,0.32,0.36,0.38 0.41,0.43,0.45,0.51), mean=0.328, stddev=0.0441], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.38,0.39 0.41,0.42,0.45,0.48,0.49 0.51,0.52,0.53,0.55), mean=0.448, stddev=0.0335], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0398, stddev=0.00718], oderiv-count=1.04752e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33089.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.26 0.28,0.29,0.33,0.36,0.39 0.42,0.44,0.47,0.50), mean=0.332, stddev=0.0466], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.47,0.48,0.50 0.51,0.54,0.59,0.65,0.69 0.72,0.76,0.77,0.81), mean=0.598, stddev=0.0664]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000230236, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01852, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,9e-06,5e-05 0.001,0.17,0.42,0.62,0.72 0.78,0.83,0.88,1.1), mean=0.404, stddev=0.245], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.40,0.42,0.47 0.56,0.73,0.85,0.94,1.0 1.1,1.1,1.2,1.3), mean=0.828, stddev=0.169], bias-{mean,stddev}=0.001874,0.02771, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000230236, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05701, w_fc-rms=0.02962, w_oc-rms=0.04279, count=1.48e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637018, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.69,0.79,0.80,0.85), mean=0.493, stddev=0.0779], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0234] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637018, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.43,0.44,0.46 0.47,0.48,0.50,0.53,0.58 0.64,0.77,0.78,0.85), mean=0.514, stddev=0.0635], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.15,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0216] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.034097, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.89,-0.85,-0.54 -0.27,-0.13,0.0006,0.16,0.32 0.55,0.85,0.89,0.91), mean=0.0146, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.19,0.26 0.36,0.42,0.55,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.591, stddev=0.223] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637018, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.38,0.40 0.41,0.42,0.45,0.50,0.50 0.50,0.53,0.57,0.69), mean=0.454, stddev=0.0409], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.217, stddev=0.0218] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00637018, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.73,-0.65,-0.37 -0.17,-0.08,0.0005,0.11,0.20 0.35,0.67,0.72,0.78), mean=0.0108, stddev=0.221], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.40,0.55 0.75,0.82,0.89,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.862, stddev=0.127] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.05355e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.13009e-05, count-zeroing-boundaries=294526
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.215978
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000230236, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04084, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.33,0.36 0.40,0.47,0.88,1.2,1.3 1.4,1.4,1.5,1.5), mean=0.855, stddev=0.369], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.002,0.004 0.01,0.31,0.55,0.75,0.92 1.2,1.5,1.7,2.0), mean=0.553, stddev=0.358], bias-{mean,stddev}=0.01275,0.2785, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000230236, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01346, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.21,0.23,0.24 0.26,0.29,0.36,0.44,0.48 0.51,0.54,0.57,0.67), mean=0.366, stddev=0.0842], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.13,0.15,0.29,0.41,0.43 0.46,0.47,0.49,0.52), mean=0.281, stddev=0.124], bias-{mean,stddev}=0.00315,0.01226, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.56e+05, self-repaired-proportion=0.0039886, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.03,0.03,0.04 0.06,0.08,0.11,0.13,0.15 0.16,0.18,0.19,0.23), mean=0.106, stddev=0.0349], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.14,0.19,0.24 0.30,0.39,0.50,0.60,0.65 0.67,0.70,0.71,0.82), mean=0.491, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.07,0.08 0.08,0.08,0.09,0.11,0.13 0.15,0.18,0.19,0.26), mean=0.101, stddev=0.0262], oderiv-count=1.0951e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30908.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.03,0.03,0.05 0.06,0.08,0.11,0.13,0.15 0.16,0.18,0.19,0.24), mean=0.105, stddev=0.0347], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.10,0.11,0.12 0.13,0.14,0.16,0.19,0.20 0.21,0.23,0.24,0.28), mean=0.165, stddev=0.0301]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000230236, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009342, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.30 0.32,0.33,0.36,0.40,0.43 0.46,0.48,0.49,0.56), mean=0.366, stddev=0.0469], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.13,0.14,0.14 0.16,0.17,0.20,0.24,0.27 0.29,0.31,0.34,0.39), mean=0.208, stddev=0.046], bias-{mean,stddev}=-0.02339,0.01972, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.66e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.25,0.27,0.30,0.33,0.35 0.36,0.38,0.38,0.51), mean=0.301, stddev=0.0368], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.49,0.50), mean=0.434, stddev=0.0279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0322, stddev=0.00269], oderiv-count=940320
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28727.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.26,0.27,0.30,0.33,0.35 0.36,0.38,0.39,0.53), mean=0.302, stddev=0.0385], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.47,0.48,0.50 0.51,0.52,0.57,0.63,0.67 0.70,0.74,0.79,1.1), mean=0.579, stddev=0.0701]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000230236, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0153, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,1e-06,2e-06,4e-06 2e-05,0.0004,0.35,0.55,0.62 0.66,0.71,0.75,0.94), mean=0.299, stddev=0.25], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.33,0.35,0.40 0.50,0.63,0.69,0.76,0.81 0.88,0.95,1.0,1.4), mean=0.685, stddev=0.134], bias-{mean,stddev}=0.003588,0.03905, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000230236, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03156, w_fc-rms=0.01435, w_oc-rms=0.03414, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642464, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.44 0.45,0.46,0.50,0.52,0.57 0.61,0.67,0.71,0.80), mean=0.503, stddev=0.0538], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0185] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642464, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.43,0.45 0.46,0.48,0.50,0.52,0.55 0.59,0.63,0.66,0.74), mean=0.506, stddev=0.0421], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0181] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00648026, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.71,-0.47 -0.29,-0.13,8e-05,0.15,0.32 0.54,0.73,0.77,0.86), mean=0.0114, stddev=0.276], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.29,0.38 0.45,0.51,0.61,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.704, stddev=0.234] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642464, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.44,0.45,0.50,0.50,0.52 0.54,0.56,0.58,0.69), mean=0.486, stddev=0.0341], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.02] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00642464, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.72,-0.57,-0.43,-0.32 -0.18,-0.08,0.0002,0.10,0.21 0.39,0.50,0.55,0.65), mean=0.00933, stddev=0.188], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.55,0.60,0.71 0.76,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.901, stddev=0.103] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=5.80898e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.11727e-05, count-zeroing-boundaries=259768
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.215978
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000230236, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03958, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.44,0.49,0.53 0.56,0.60,0.87,1.1,1.2 1.2,1.3,1.3,1.4), mean=0.865, stddev=0.258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0007,0.0009,0.001 0.002,0.008,0.59,0.83,0.97 1.1,1.3,1.5,1.6), mean=0.495, stddev=0.403], bias-{mean,stddev}=0.000913,0.2189, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000230236, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01298, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.26 0.27,0.30,0.34,0.41,0.46 0.49,0.54,0.56,0.61), mean=0.355, stddev=0.0723], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.38,0.41 0.44,0.45,0.46,0.54), mean=0.28, stddev=0.0944], bias-{mean,stddev}=0.001091,0.006647, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.74e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.06,0.09,0.11,0.12 0.13,0.15,0.16,0.18), mean=0.0853, stddev=0.0313], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.17,0.22 0.27,0.34,0.48,0.59,0.62 0.65,0.69,0.70,0.71), mean=0.466, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.12,0.14 0.15,0.17,0.18,0.21), mean=0.108, stddev=0.0215], oderiv-count=980928
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26546.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.06,0.08,0.11,0.13 0.14,0.15,0.16,0.19), mean=0.0865, stddev=0.0315], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.10 0.11,0.12,0.14,0.16,0.17 0.18,0.19,0.20,0.22), mean=0.141, stddev=0.025]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000230236, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009236, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.21,0.26 0.29,0.31,0.36,0.41,0.44 0.46,0.48,0.50,0.52), mean=0.36, stddev=0.0618], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.15,0.16,0.19,0.24,0.27 0.30,0.34,0.36,0.45), mean=0.205, stddev=0.0501], bias-{mean,stddev}=-0.02027,0.02437, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.22,0.24 0.26,0.28,0.31,0.34,0.36 0.37,0.40,0.40,0.50), mean=0.311, stddev=0.0429], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.37 0.38,0.40,0.42,0.44,0.46 0.47,0.48,0.49,0.52), mean=0.421, stddev=0.0301], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0265, stddev=0.00213], oderiv-count=940000
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24365.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.22,0.24 0.26,0.28,0.32,0.34,0.36 0.38,0.40,0.41,0.55), mean=0.313, stddev=0.0438], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.34,0.37,0.46 0.50,0.55,0.62,0.69,0.74 0.77,0.83,0.85,1.2), mean=0.618, stddev=0.0991]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000230236, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02202, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.30,0.32 0.34,0.39,0.52,0.69,0.77 0.82,0.86,0.89,1.3), mean=0.539, stddev=0.155], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.69,0.75 0.78,0.82,0.89,1.1,1.3 1.4,1.7,1.8,2.2), mean=0.976, stddev=0.234], bias-{mean,stddev}=0.01881,0.0241, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000230236, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.09779, w_fc-rms=0.05007, w_oc-rms=0.06522, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00649036, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.57,0.60 0.62,0.65,0.70,0.76,0.78 0.81,0.83,0.84,0.87), mean=0.704, stddev=0.0621], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.21), mean=0.173, stddev=0.0219] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00649036, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.53,0.56 0.59,0.62,0.68,0.72,0.77 0.81,0.84,0.85,0.88), mean=0.676, stddev=0.0708], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.13 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.176, stddev=0.0225] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0331263, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.84,-0.80,-0.61 -0.44,-0.31,-0.009,0.30,0.42 0.55,0.70,0.82,0.89), mean=-0.00702, stddev=0.352], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.23 0.28,0.36,0.43,0.48,0.50 0.52,0.54,0.55,0.60), mean=0.414, stddev=0.0833] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00649036, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.49,0.51,0.54 0.57,0.59,0.63,0.67,0.69 0.72,0.74,0.77,0.83), mean=0.628, stddev=0.0537], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.15,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.18, stddev=0.0168] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00649036, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.73,-0.67,-0.53 -0.37,-0.25,-0.006,0.24,0.34 0.47,0.62,0.70,0.81), mean=-0.00772, stddev=0.296], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.35,0.38,0.42 0.50,0.58,0.67,0.71,0.74 0.76,0.77,0.78,0.80), mean=0.641, stddev=0.0945] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.26341e-06, count-zeroing-boundaries=220906
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.215978
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000230236, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08671, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.5,2.6 2.6,2.7,2.8,2.9), mean=1.89, stddev=0.581], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.97,1.0,1.1 1.1,1.2,1.3,1.5,1.8 1.9,2.1,2.1,2.2), mean=1.37, stddev=0.257], bias-{mean,stddev}=-0.02493,0.5406, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000230236, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04421, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.61,0.62 0.64,0.66,0.70,0.74,0.78 0.81,0.86,0.91,2.3), mean=0.708, stddev=0.0873], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.7,2.7,2.8,2.9), mean=1.95, stddev=0.556], bias-{mean,stddev}=7.281e-09,0.02907, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0135], oderiv-count=568960
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/272.mdl exp/nnet3/tdnn_lstm1c_sp/273.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.90087 tdnn2.affine:4.78506 lstm1.W_all:3.79798 lstm1.lstm_nonlin:0.0925979 lstm1.W_rp:1.51648 tdnn3.affine:3.2702 tdnn4.affine:3.616 lstm2.W_all:2.73295 lstm2.lstm_nonlin:0.0470845 lstm2.W_rp:1.08327 tdnn5.affine:2.72271 tdnn6.affine:3.02228 lstm3.W_all:3.14573 lstm3.lstm_nonlin:0.0851997 lstm3.W_rp:1.35373 output.affine:3.23344 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.3543 tdnn2.affine:11.3823 lstm1.W_all:21.5755 lstm1.lstm_nonlin:1.76028 lstm1.W_rp:15.6764 tdnn3.affine:8.57598 tdnn4.affine:8.44309 lstm2.W_all:17.8799 lstm2.lstm_nonlin:1.10958 lstm2.W_rp:14.9751 tdnn5.affine:8.26576 tdnn6.affine:8.34979 lstm3.W_all:25.6364 lstm3.lstm_nonlin:2.9135 lstm3.W_rp:33.0567 output.affine:32.7262 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.364007 tdnn2.affine:0.416485 lstm1.W_all:0.175586 lstm1.lstm_nonlin:0.0526593 lstm1.W_rp:0.0966248 tdnn3.affine:0.377307 tdnn4.affine:0.424136 lstm2.W_all:0.152477 lstm2.lstm_nonlin:0.0429111 lstm2.W_rp:0.0722457 tdnn5.affine:0.326324 tdnn6.affine:0.357921 lstm3.W_all:0.122537 lstm3.lstm_nonlin:0.0293939 lstm3.W_rp:0.0411087 output.affine:0.098933 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:49:04 KST 2020, elapsed time 1 seconds
