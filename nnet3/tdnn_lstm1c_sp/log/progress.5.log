# nnet3-info exp/nnet3/tdnn_lstm1c_sp/5.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/4.mdl exp/nnet3/tdnn_lstm1c_sp/5.mdl 
# Started at Thu Jul 30 10:03:09 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/5.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000296218, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02883, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.05,0.52,0.64,0.72 0.77,0.87,0.89,1.0), mean=0.418, stddev=0.272], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.15 0.16,0.19,0.53,0.75,0.98 1.3,1.5,1.5,1.6), mean=0.553, stddev=0.356], bias-{mean,stddev}=0.006199,0.08262, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.92e+05, self-repaired-proportion=0.350157, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,9e-08,0.08,0.12,0.15 0.17,0.19,0.19,0.24), mean=0.0698, stddev=0.0602], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,2e-05,0.48,0.76,0.86 0.90,0.92,0.94,0.97), mean=0.416, stddev=0.337], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.06,0.07,0.28,0.37,0.44 0.49,0.60,0.71,1.2), mean=0.262, stddev=0.165], oderiv-count=1.23482e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38991.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,7e-08,0.07,0.12,0.14 0.15,0.17,0.18,0.19), mean=0.0638, stddev=0.0553], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,2e-05,0.10,0.12,0.13 0.14,0.15,0.15,0.17), mean=0.0761, stddev=0.0566]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000296218, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01257, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.45,0.46,0.49,0.53,0.55 0.57,0.60,0.61,0.62), mean=0.495, stddev=0.0421], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.31,0.37,0.40 0.42,0.46,0.47,0.58), mean=0.242, stddev=0.154], bias-{mean,stddev}=-0.003404,0.07623, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.22,0.23,0.26 0.28,0.30,0.34,0.38,0.41 0.42,0.44,0.45,0.50), mean=0.341, stddev=0.0504], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.37,0.38 0.40,0.42,0.47,0.52,0.54 0.56,0.58,0.60,0.62), mean=0.473, stddev=0.0548], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.08), mean=0.0397, stddev=0.00579], oderiv-count=1.18118e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38152.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.23,0.25 0.27,0.30,0.33,0.37,0.39 0.41,0.42,0.44,0.48), mean=0.333, stddev=0.0462], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.46,0.48 0.50,0.52,0.56,0.61,0.64 0.66,0.69,0.72,0.79), mean=0.566, stddev=0.0551]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000296218, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02471, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.52,0.53,0.54 0.55,0.56,0.60,0.68,0.75 0.80,0.85,0.89,1.0), mean=0.624, stddev=0.084], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,0.97,0.98,0.99 1.0,1.1,1.1,1.2,1.2 1.2,1.2,1.2,1.3), mean=1.12, stddev=0.0663], bias-{mean,stddev}=0.002091,0.5393, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000296218, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.5622, w_fc-rms=0.5433, w_oc-rms=0.5323, count=1.41e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00812618, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.23,0.25,0.28 0.33,0.38,0.50,0.63,0.70 0.74,0.78,0.82,0.92), mean=0.509, stddev=0.139], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.14,0.16 0.18,0.19,0.21,0.23,0.23 0.23,0.23,0.24,0.24), mean=0.207, stddev=0.0239] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00812618, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.19,0.26 0.29,0.36,0.47,0.60,0.70 0.77,0.81,0.84,0.90), mean=0.486, stddev=0.151], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.11,0.12,0.14 0.17,0.19,0.22,0.23,0.23 0.23,0.24,0.24,0.24), mean=0.207, stddev=0.0297] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0127371, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.83,-0.80,-0.71 -0.58,-0.41,0.01,0.45,0.62 0.74,0.77,0.79,0.89), mean=0.0182, stddev=0.438], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.23,0.26,0.30 0.36,0.41,0.52,0.63,0.69 0.73,0.77,0.78,0.82), mean=0.52, stddev=0.128] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621505, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.21,0.24,0.27 0.33,0.38,0.48,0.59,0.66 0.72,0.78,0.79,0.88), mean=0.49, stddev=0.131], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.16 0.18,0.19,0.21,0.22,0.23 0.23,0.23,0.23,0.24), mean=0.205, stddev=0.0216] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0154687, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.84,-0.79,-0.60 -0.45,-0.28,0.008,0.33,0.48 0.61,0.72,0.81,0.89), mean=0.0128, stddev=0.36], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.20,0.27,0.36 0.50,0.63,0.78,0.87,0.91 0.94,0.96,0.97,0.98), mean=0.741, stddev=0.168] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.94e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=291186
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000296218, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03584, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.67,0.69,0.70 0.73,0.75,0.81,0.87,0.91 0.93,0.94,0.97,1.0), mean=0.814, stddev=0.0683], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.42 0.45,0.48,0.56,0.65,0.70 0.76,0.83,0.85,0.96), mean=0.569, stddev=0.102], bias-{mean,stddev}=0.05425,0.5522, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000296218, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01547, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.09,0.19 0.27,0.32,0.41,0.50,0.57 0.63,0.68,0.73,0.85), mean=0.413, stddev=0.127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.27 0.29,0.31,0.35,0.39,0.41 0.43,0.45,0.46,0.51), mean=0.349, stddev=0.0474], bias-{mean,stddev}=0.0003952,0.05012, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.69e+05, self-repaired-proportion=0.0697573, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,6e-05,0.0001,0.009 0.05,0.11,0.24,0.36,0.42 0.45,0.47,0.49,0.58), mean=0.242, stddev=0.131], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.002,0.004,0.05 0.14,0.24,0.47,0.68,0.77 0.81,0.85,0.86,0.90), mean=0.463, stddev=0.229], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.06,0.07 0.10,0.14,0.19,0.28), mean=0.0508, stddev=0.0296], oderiv-count=1.07302e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35633.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,4e-06,2e-05,0.04 0.08,0.12,0.23,0.35,0.39 0.42,0.45,0.47,0.59), mean=0.232, stddev=0.118], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.0002,0.0006,0.14 0.23,0.29,0.35,0.41,0.45 0.47,0.50,0.52,0.63), mean=0.34, stddev=0.103]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000296218, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01051, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.28,0.31 0.35,0.38,0.42,0.45,0.47 0.48,0.50,0.50,0.54), mean=0.412, stddev=0.0505], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.10 0.14,0.17,0.23,0.28,0.31 0.35,0.37,0.39,0.46), mean=0.229, stddev=0.0707], bias-{mean,stddev}=-0.01107,0.06291, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.21,0.25 0.27,0.29,0.34,0.38,0.40 0.42,0.43,0.46,0.48), mean=0.336, stddev=0.0523], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.31,0.33,0.36 0.38,0.40,0.44,0.48,0.50 0.52,0.54,0.55,0.59), mean=0.441, stddev=0.0492], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0269, stddev=0.00444], oderiv-count=1.06918e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33114.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.22,0.25 0.27,0.29,0.33,0.36,0.39 0.41,0.43,0.44,0.48), mean=0.329, stddev=0.048], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.45,0.46,0.49 0.52,0.54,0.59,0.63,0.67 0.68,0.72,0.76,0.84), mean=0.59, stddev=0.0607]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000296218, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02351, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.52,0.52,0.53 0.54,0.55,0.58,0.64,0.69 0.73,0.77,0.79,0.91), mean=0.596, stddev=0.0608], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,0.97,0.97,0.98 1.0,1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.07, stddev=0.0494], bias-{mean,stddev}=0.0173,0.5417, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000296218, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.5794, w_fc-rms=0.5553, w_oc-rms=0.5577, count=1.29e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00655838, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.26,0.29 0.32,0.39,0.51,0.64,0.70 0.75,0.81,0.84,0.92), mean=0.517, stddev=0.142], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.12,0.13,0.15 0.18,0.19,0.21,0.23,0.23 0.23,0.23,0.24,0.24), mean=0.206, stddev=0.0251] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00899821, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.23,0.24,0.30 0.34,0.38,0.48,0.62,0.70 0.79,0.86,0.89,0.96), mean=0.501, stddev=0.147], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.08,0.10,0.13 0.17,0.20,0.22,0.23,0.23 0.23,0.24,0.24,0.24), mean=0.208, stddev=0.0317] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0179532, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.85,-0.79,-0.70 -0.57,-0.42,0.01,0.41,0.61 0.71,0.79,0.83,0.92), mean=0.00864, stddev=0.435], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.26,0.32 0.37,0.43,0.54,0.65,0.70 0.75,0.79,0.79,0.84), mean=0.537, stddev=0.129] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00708409, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.23,0.26 0.30,0.37,0.50,0.63,0.69 0.74,0.82,0.86,0.93), mean=0.502, stddev=0.148], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.12,0.15 0.17,0.19,0.21,0.22,0.23 0.23,0.23,0.23,0.24), mean=0.204, stddev=0.0266] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0271288, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.94,-0.87,-0.82,-0.61 -0.45,-0.30,0.01,0.31,0.48 0.64,0.79,0.83,0.97), mean=0.0076, stddev=0.368], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.22,0.31 0.52,0.63,0.78,0.88,0.91 0.94,0.95,0.96,0.98), mean=0.736, stddev=0.179] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.7e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=256758
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000296218, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03425, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.67,0.67,0.69 0.70,0.73,0.78,0.83,0.85 0.88,0.90,0.93,0.95), mean=0.779, stddev=0.0576], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.39,0.41 0.43,0.45,0.52,0.62,0.69 0.75,0.81,0.85,0.95), mean=0.542, stddev=0.106], bias-{mean,stddev}=-0.01982,0.5399, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000296218, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01429, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.09 0.19,0.27,0.39,0.48,0.54 0.60,0.65,0.68,0.84), mean=0.374, stddev=0.138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.25 0.26,0.28,0.32,0.36,0.39 0.41,0.44,0.46,0.53), mean=0.322, stddev=0.0492], bias-{mean,stddev}=0.001065,0.04861, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.96e+05, self-repaired-proportion=0.107127, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,5e-06,2e-05,0.0003 0.02,0.09,0.26,0.38,0.43 0.47,0.50,0.53,0.61), mean=0.244, stddev=0.146], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.0006,0.001,0.005 0.08,0.21,0.43,0.62,0.68 0.73,0.78,0.79,0.85), mean=0.416, stddev=0.217], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.05,0.09 0.12,0.15,0.18,0.25), mean=0.0491, stddev=0.0325], oderiv-count=984320
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30595.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,3e-06,5e-06,6e-05 0.03,0.09,0.24,0.33,0.39 0.43,0.47,0.49,0.56), mean=0.226, stddev=0.13], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,0.0002,0.0004,0.002 0.12,0.26,0.38,0.44,0.47 0.50,0.53,0.54,0.58), mean=0.344, stddev=0.137]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000296218, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01049, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.29,0.31 0.36,0.38,0.41,0.45,0.46 0.48,0.51,0.52,0.58), mean=0.412, stddev=0.0478], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.07 0.11,0.15,0.23,0.29,0.32 0.36,0.40,0.43,0.66), mean=0.224, stddev=0.0847], bias-{mean,stddev}=0.001599,0.06787, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.98e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.21,0.23 0.27,0.30,0.35,0.40,0.42 0.45,0.48,0.49,0.55), mean=0.35, stddev=0.0625], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.31,0.33 0.35,0.38,0.43,0.48,0.50 0.52,0.54,0.55,0.59), mean=0.43, stddev=0.0566], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0251, stddev=0.00297], oderiv-count=918720
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28076.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.21,0.24 0.27,0.29,0.34,0.39,0.42 0.44,0.46,0.47,0.56), mean=0.343, stddev=0.0586], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.42,0.45,0.52 0.54,0.57,0.63,0.67,0.70 0.72,0.74,0.76,0.82), mean=0.622, stddev=0.0643]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000296218, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02522, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.52,0.53,0.54 0.55,0.57,0.61,0.70,0.76 0.82,0.87,0.90,1.0), mean=0.637, stddev=0.0858], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.0,1.0,1.1 1.1,1.1,1.1,1.2,1.2 1.3,1.3,1.3,1.5), mean=1.15, stddev=0.0654], bias-{mean,stddev}=-0.000552,0.5403, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000296218, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.5143, w_fc-rms=0.5317, w_oc-rms=0.5546, count=1.17e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.006339, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.27,0.30,0.35 0.40,0.46,0.56,0.66,0.71 0.74,0.78,0.82,0.87), mean=0.555, stddev=0.121], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.14,0.15 0.16,0.17,0.19,0.21,0.22 0.22,0.23,0.23,0.23), mean=0.191, stddev=0.022] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.006339, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.25,0.27,0.31 0.36,0.43,0.55,0.66,0.72 0.77,0.85,0.88,0.89), mean=0.548, stddev=0.14], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.13 0.16,0.18,0.20,0.21,0.22 0.22,0.23,0.23,0.23), mean=0.193, stddev=0.0271] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00961145, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.96,-0.85,-0.79,-0.70 -0.54,-0.31,0.02,0.30,0.51 0.64,0.77,0.81,0.84), mean=-0.00302, stddev=0.384], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.24,0.25,0.30 0.32,0.37,0.47,0.55,0.60 0.63,0.68,0.70,0.74), mean=0.463, stddev=0.104] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.006339, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.24,0.28,0.35 0.39,0.47,0.59,0.70,0.76 0.79,0.83,0.84,0.91), mean=0.583, stddev=0.137], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.14 0.15,0.16,0.18,0.20,0.21 0.21,0.22,0.22,0.23), mean=0.178, stddev=0.023] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0160768, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.82,-0.76,-0.63 -0.43,-0.26,0.004,0.24,0.40 0.54,0.74,0.80,0.92), mean=-0.00349, stddev=0.332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.21,0.25,0.35 0.46,0.56,0.67,0.77,0.84 0.87,0.91,0.92,0.95), mean=0.653, stddev=0.15] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.46e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=218270
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000296218, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06032, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.2,1.3,1.4,1.5,1.5 1.5,1.6,1.6,1.7), mean=1.37, stddev=0.107], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.45,0.52 0.63,0.75,0.96,1.2,1.2 1.3,1.4,1.4,1.8), mean=0.945, stddev=0.228], bias-{mean,stddev}=0.04995,0.5069, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000296218, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03993, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.45,0.48,0.51 0.53,0.55,0.62,0.70,0.75 0.81,0.90,0.97,2.1), mean=0.634, stddev=0.114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.5 1.6,1.7,1.8,2.0,2.1 2.1,2.2,2.2,2.3), mean=1.82, stddev=0.173], bias-{mean,stddev}=1.204e-09,0.006683, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=568320
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/4.mdl exp/nnet3/tdnn_lstm1c_sp/5.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.9834 tdnn2.affine:9.57326 lstm1.W_all:9.18895 lstm1.lstm_nonlin:2.71123 lstm1.W_rp:4.48635 tdnn3.affine:6.88755 tdnn4.affine:7.53153 lstm2.W_all:7.24361 lstm2.lstm_nonlin:2.79076 lstm2.W_rp:3.45666 tdnn5.affine:5.70562 tdnn6.affine:7.02739 lstm3.W_all:8.12602 lstm3.lstm_nonlin:2.64104 lstm3.W_rp:3.35563 output.affine:7.18848 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.5417 tdnn2.affine:11.457 lstm1.W_all:37.8217 lstm1.lstm_nonlin:21.5667 lstm1.W_rp:15.9274 tdnn3.affine:9.91621 tdnn4.affine:9.57382 lstm2.W_all:36.8514 lstm2.lstm_nonlin:22.2855 lstm2.W_rp:15.3145 tdnn5.affine:9.1668 tdnn6.affine:9.57336 lstm3.W_all:38.3051 lstm3.lstm_nonlin:21.0821 lstm3.W_rp:23.651 output.affine:29.5343 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.782019 tdnn2.affine:0.823848 lstm1.W_all:0.22134 lstm1.lstm_nonlin:0.111717 lstm1.W_rp:0.264898 tdnn3.affine:0.658267 tdnn4.affine:0.764491 lstm2.W_all:0.177548 lstm2.lstm_nonlin:0.111313 lstm2.W_rp:0.21178 tdnn5.affine:0.594231 tdnn6.affine:0.716995 lstm3.W_all:0.193945 lstm3.lstm_nonlin:0.111406 lstm3.W_rp:0.139608 output.affine:0.248931 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:03:09 KST 2020, elapsed time 0 seconds
