# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/459.mdl exp/nnet3/tdnn_lstm1c_sp/460.mdl 
# Started at Thu Jul 30 13:03:31 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/459.mdl exp/nnet3/tdnn_lstm1c_sp/460.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=7.07582e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006794, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.003,0.007,0.12,0.15,0.16 0.17,0.20,0.21,0.25), mean=0.0997, stddev=0.0626], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.05,0.14,0.19,0.22 0.29,0.34,0.36,0.43), mean=0.134, stddev=0.0784], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.008 0.01,0.02,0.07,0.19,0.27 0.34,0.41,0.43,0.51), mean=0.11, stddev=0.109], bias-{mean,stddev}=-6.413e-05,0.009487, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.57e+04, self-repaired-proportion=0.22753, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,-0.04,-0.03,-0.01 -0.002,-0.0002,0.02,0.11,0.14 0.17,0.21,0.22,0.29), mean=0.0492, stddev=0.0625], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.93,-0.73,-0.51 -0.24,-0.02,0.40,0.72,0.87 1.0,1.1,1.3,2.6), mean=0.349, stddev=0.474], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.01,0.04,0.49,0.75,0.98 1.2,1.3,1.5,2.5), mean=0.478, stddev=0.393], oderiv-count=105792
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-584.749, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.07582e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002689, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.09,0.10,0.11,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.106, stddev=0.00941], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0006,0.0007,0.001 0.001,0.004,0.07,0.08,0.09 0.09,0.10,0.10,0.12), mean=0.052, stddev=0.0324], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.02,0.02,0.05,0.13,0.18 0.24,0.28,0.30,0.36), mean=0.0789, stddev=0.0711], bias-{mean,stddev}=5.137e-06,0.004716, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.53e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.08,0.13 0.16,0.19,0.26,0.34,0.39 0.44,0.50,0.52,0.74), mean=0.272, stddev=0.0969], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.15,0.21,0.25 0.31,0.36,0.45,0.53,0.58 0.62,0.65,0.66,0.75), mean=0.445, stddev=0.108], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.03,0.07,0.11,0.15,0.18 0.20,0.23,0.24,0.28), mean=0.111, stddev=0.0566], oderiv-count=23360
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-584.749, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.07582e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001563, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-09,3e-08,7e-08,5e-07 1e-05,0.02,0.03,0.05,0.06 0.07,0.08,0.09,0.11), mean=0.0333, stddev=0.0219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.07,0.09,0.09 0.10,0.10,0.11,0.12), mean=0.0668, stddev=0.0249], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,7e-08,9e-08 1e-07,0.01,0.03,0.08,0.12 0.16,0.21,0.23,0.28), mean=0.0501, stddev=0.0507], bias-{mean,stddev}=2.494e-05,0.0005, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.07582e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0006465, w_fc-rms=0.0005692, w_oc-rms=0.001245, count=1.14e+04, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000154293, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.03,0.16,0.18,0.26 0.30,0.38,0.50,0.58,0.67 0.81,0.91,0.97,1.1), mean=0.494, stddev=0.156], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.10,-0.02,0.03,0.09 0.12,0.16,0.24,0.27,0.31 0.34,0.39,0.42,0.45), mean=0.222, stddev=0.0791] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000154293, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.27,0.31,0.35 0.39,0.44,0.50,0.60,0.66 0.74,0.84,0.93,1.0), mean=0.523, stddev=0.121], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.07,0.03,0.07,0.11 0.16,0.19,0.25,0.26,0.29 0.32,0.35,0.36,0.43), mean=0.231, stddev=0.0605] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000154293, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.8,-1.6,-1.4 -1.1,-0.69,0.0004,0.68,1.2 1.6,1.8,1.9,3.0), mean=0.0228, stddev=0.857], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.6,-1.5,-1.3,-0.82 -0.47,-0.15,0.58,1.0,1.3 1.6,2.0,2.2,3.4), mean=0.496, stddev=0.78] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000154293, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.11,0.01,0.06,0.14 0.24,0.34,0.49,0.56,0.64 0.70,0.78,0.86,1.0), mean=0.455, stddev=0.164], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,-0.04,-0.02,0.04 0.09,0.16,0.24,0.28,0.33 0.37,0.40,0.45,0.62), mean=0.223, stddev=0.0973] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.116678, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.7,-1.5,-1.1 -0.84,-0.50,0.0002,0.56,0.92 1.2,1.4,1.6,2.1), mean=0.0222, stddev=0.672], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.59,-0.09,0.007,0.15 0.34,0.51,0.92,1.1,1.2 1.4,1.5,1.6,2.2), mean=0.835, stddev=0.375] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.52e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0.000329641, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000880088, count-zeroing-boundaries=2272
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0429752
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.07582e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002281, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.05,0.07,0.07 0.07,0.08,0.08,0.08), mean=0.0496, stddev=0.0157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,3e-05,5e-05,0.0001 0.0004,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0329, stddev=0.0164], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.06,0.10 0.13,0.16,0.17,0.20), mean=0.0237, stddev=0.0463], bias-{mean,stddev}=-0.0001356,0.002355, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=7.07582e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002658, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.06,0.07,0.08,0.09 0.09,0.10,0.11,0.12), mean=0.0733, stddev=0.012], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.04,0.06,0.08,0.08 0.09,0.09,0.09,0.10), mean=0.0577, stddev=0.0184], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-08,3e-08,4e-08 5e-08,7e-08,1e-05,0.08,0.14 0.18,0.23,0.25,0.30), mean=0.0373, stddev=0.0642], bias-{mean,stddev}=8.333e-05,0.002077, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.16e+04, self-repaired-proportion=-0.000678733, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.12,-0.06,-0.04,-0.03 -0.002,0.02,0.07,0.13,0.16 0.20,0.24,0.25,0.31), mean=0.0787, stddev=0.0677], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.40,-0.23,-0.15,-0.003 0.08,0.22,0.45,0.69,0.80 0.89,0.96,1.0,1.2), mean=0.447, stddev=0.273]
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-584.749, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.07582e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.001912, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.07,0.07,0.07,0.08,0.08 0.09,0.09,0.09,0.09), mean=0.0753, stddev=0.00608], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0432, stddev=0.006], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.03,0.05,0.09,0.12 0.16,0.19,0.21,0.23), mean=0.061, stddev=0.0445], bias-{mean,stddev}=-7.382e-05,0.00197, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.02,0.02,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0432, stddev=0.00978], oderiv-count=89920
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-584.749, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.07582e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001064, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,1e-07,2e-07,7e-07 3e-06,5e-05,0.02,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0202, stddev=0.0181], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.03,0.05,0.06,0.06 0.06,0.07,0.07,0.08), mean=0.0458, stddev=0.0161], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,7e-08 1e-05,0.008,0.02,0.05,0.08 0.11,0.15,0.17,0.19), mean=0.0328, stddev=0.0357], bias-{mean,stddev}=3.373e-05,0.0004916, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.07582e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0003769, w_fc-rms=0.0004028, w_oc-rms=0.0006181, count=1.09e+04, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000148811, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.32,0.35,0.39 0.42,0.46,0.50,0.56,0.62 0.69,0.74,0.76,0.90), mean=0.51, stddev=0.085], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.12,0.15 0.17,0.21,0.25,0.25,0.28 0.30,0.32,0.33,0.36), mean=0.236, stddev=0.0437] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000148811, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.35,0.37,0.40 0.44,0.48,0.50,0.57,0.62 0.67,0.70,0.73,0.81), mean=0.52, stddev=0.0747], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.13,0.14,0.16 0.19,0.22,0.25,0.26,0.28 0.29,0.31,0.34,0.38), mean=0.24, stddev=0.0385] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000148811, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.1,-1.5,-1.4,-1.2 -0.74,-0.36,0.001,0.36,0.69 1.0,1.3,1.5,1.9), mean=-0.00649, stddev=0.583], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.75,-0.50,-0.33 -0.04,0.27,0.92,1.0,1.1 1.3,1.5,1.8,2.7), mean=0.692, stddev=0.512] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000148811, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.25,0.27,0.33 0.38,0.44,0.50,0.54,0.62 0.66,0.70,0.72,0.87), mean=0.498, stddev=0.09], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.0004,0.05,0.07,0.13 0.16,0.20,0.25,0.26,0.29 0.31,0.34,0.37,0.45), mean=0.234, stddev=0.0563] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000148811, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.4,-1.2,-0.92 -0.63,-0.27,3e-05,0.32,0.63 0.86,1.0,1.1,1.4), mean=-0.00226, stddev=0.491], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.49,0.08,0.23,0.39 0.53,0.70,1.0,1.0,1.1 1.3,1.4,1.4,1.6), mean=0.903, stddev=0.263] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.36e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=7.33568e-05, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=2058
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0429752
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.07582e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001556, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.04,0.05 0.05,0.05,0.05,0.05), mean=0.0343, stddev=0.00914], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,8e-05,9e-05,0.0001 0.0002,0.0008,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0204, stddev=0.0146], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 6e-08,1e-07,1e-06,0.04,0.07 0.09,0.10,0.11,0.12), mean=0.018, stddev=0.0306], bias-{mean,stddev}=0.000109,0.00205, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=7.07582e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002207, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.07,0.08 0.08,0.09,0.09,0.10), mean=0.0607, stddev=0.0107], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.05,0.06,0.07 0.07,0.07,0.07,0.08), mean=0.0484, stddev=0.0138], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,3e-08,4e-08 5e-08,9e-08,0.001,0.06,0.11 0.16,0.19,0.21,0.24), mean=0.0324, stddev=0.0524], bias-{mean,stddev}=0.0001353,0.001528, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.03,-0.008,-0.002,0.008 0.02,0.03,0.06,0.10,0.12 0.14,0.16,0.16,0.20), mean=0.067, stddev=0.0394], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.07,0.02,0.06,0.11 0.18,0.26,0.42,0.56,0.63 0.68,0.70,0.72,0.85), mean=0.411, stddev=0.17], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.07,0.16,0.23,0.29 0.35,0.41,0.44,0.59), mean=0.163, stddev=0.107], oderiv-count=36992
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-584.749, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.07582e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.001719, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.07,0.08 0.08,0.08,0.09,0.09), mean=0.0675, stddev=0.00744], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.05,0.06), mean=0.0388, stddev=0.00591], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.04,0.08,0.11 0.15,0.18,0.19,0.22), mean=0.0534, stddev=0.042], bias-{mean,stddev}=3.592e-05,0.001811, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-584.749, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.07582e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001522, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.008,0.01 0.01,0.02,0.03,0.05,0.07 0.08,0.08,0.09,0.10), mean=0.0324, stddev=0.0214], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.06,0.08,0.11 0.12,0.12,0.13,0.13), mean=0.0642, stddev=0.0264], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,8e-06 0.007,0.01,0.02,0.06,0.12 0.17,0.22,0.24,0.27), mean=0.0437, stddev=0.0539], bias-{mean,stddev}=9.267e-06,0.0003794, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.07582e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0007171, w_fc-rms=0.0008296, w_oc-rms=0.001489, count=1.03e+04, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000143065, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.33,-0.10,0.009,0.30 0.49,0.63,0.84,1.0,1.1 1.2,1.3,1.4,1.7), mean=0.813, stddev=0.276], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,-0.06,-0.03,0.008 0.04,0.07,0.14,0.21,0.26 0.31,0.34,0.38,0.42), mean=0.144, stddev=0.0885] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000143065, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.30,-0.11,0.05,0.22 0.37,0.47,0.74,1.0,1.1 1.2,1.4,1.4,1.7), mean=0.733, stddev=0.313], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.15,-0.06,-0.05,-0.0003 0.04,0.08,0.15,0.21,0.26 0.30,0.34,0.37,0.39), mean=0.151, stddev=0.0871] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0680578, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.7,-5.0,-4.2,-3.2 -2.5,-1.7,-0.01,1.5,2.3 3.1,4.1,5.0,7.4), mean=-0.0695, stddev=2.04], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-1.6,-1.4,-0.90 -0.72,-0.40,0.25,0.94,1.3 1.6,1.9,2.1,2.9), mean=0.275, stddev=0.806] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000143065, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.52,-0.23,-0.12,0.08 0.21,0.33,0.66,0.99,1.2 1.3,1.4,1.7,2.2), mean=0.672, stddev=0.387], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,-0.06,-0.04,-0.01 0.02,0.07,0.14,0.23,0.28 0.32,0.37,0.39,0.52), mean=0.147, stddev=0.101] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00284966, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.7,-4.0,-3.3,-2.7 -2.0,-1.4,-0.06,1.2,1.8 2.5,3.2,3.9,5.0), mean=-0.0683, stddev=1.63], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.79,-0.61,-0.39 -0.21,0.04,0.49,1.0,1.3 1.6,1.8,2.0,2.8), mean=0.531, stddev=0.6] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.21e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00055325, count-zeroing-boundaries=1807
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0429752
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.07582e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001676, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.03,0.05,0.05 0.06,0.06,0.06,0.06), mean=0.0341, stddev=0.0172], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.03,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.0264, stddev=0.0059], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-07,2e-07,2e-07 3e-07,5e-07,0.004,0.05,0.07 0.09,0.11,0.11,0.13), mean=0.0222, stddev=0.0311], bias-{mean,stddev}=-5.074e-05,0.003403, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=7.07582e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001833, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.009,0.01,0.01 0.02,0.02,0.03,0.04,0.04 0.05,0.05,0.06,0.13), mean=0.0273, stddev=0.0114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.07,0.11,0.11 0.12,0.12,0.12,0.12), mean=0.0791, stddev=0.0286], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 3e-07,5e-07,0.002,0.12,0.16 0.19,0.21,0.22,0.24), mean=0.0473, stddev=0.0695], bias-{mean,stddev}=9.03e-11,0.0003701, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.03,0.03 0.04,0.04,0.05,0.43), mean=0.0148, stddev=0.0185], oderiv-count=53760

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.69195 tdnn2.affine:2.42438 lstm1.W_all:1.81801 lstm1.lstm_nonlin:0.0345243 lstm1.W_rp:0.839447 tdnn3.affine:1.69326 tdnn4.affine:1.72231 lstm2.W_all:1.23719 lstm2.lstm_nonlin:0.0188926 lstm2.W_rp:0.573025 tdnn5.affine:1.40626 tdnn6.affine:1.54884 lstm3.W_all:1.76957 lstm3.lstm_nonlin:0.0421622 lstm3.W_rp:0.618759 output.affine:1.35614 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.9062 tdnn2.affine:10.3418 lstm1.W_all:20.1907 lstm1.lstm_nonlin:1.47711 lstm1.W_rp:14.6221 tdnn3.affine:7.7963 tdnn4.affine:7.30379 lstm2.W_all:16.4925 lstm2.lstm_nonlin:1.10805 lstm2.W_rp:13.6659 tdnn5.affine:7.26159 tdnn6.affine:7.34717 lstm3.W_all:23.6324 lstm3.lstm_nonlin:2.44062 lstm3.W_rp:32.297 output.affine:30.0753 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.208169 tdnn2.affine:0.233721 lstm1.W_all:0.0899816 lstm1.lstm_nonlin:0.0232429 lstm1.W_rp:0.0573636 tdnn3.affine:0.216857 tdnn4.affine:0.23547 lstm2.W_all:0.0749887 lstm2.lstm_nonlin:0.0169716 lstm2.W_rp:0.0418938 tdnn5.affine:0.193533 tdnn6.affine:0.210772 lstm3.W_all:0.0748275 lstm3.lstm_nonlin:0.0171829 lstm3.W_rp:0.0191366 output.affine:0.0450635 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 13:03:32 KST 2020, elapsed time 1 seconds
