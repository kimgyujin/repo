# nnet3-info exp/nnet3/tdnn_lstm1c_sp/88.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/87.mdl exp/nnet3/tdnn_lstm1c_sp/88.mdl 
# Started at Thu Jul 30 10:35:55 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/88.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00022766, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03019, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.01,0.02 0.07,0.42,0.53,0.61,0.67 0.72,0.81,0.91,1.1), mean=0.481, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.15 0.17,0.21,0.58,0.80,1.1 1.4,1.5,1.6,1.7), mean=0.584, stddev=0.364], bias-{mean,stddev}=0.002351,0.05335, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.68e+05, self-repaired-proportion=0.095724, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,1e-05,2e-05,7e-05 0.0004,0.03,0.06,0.08,0.10 0.11,0.13,0.14,0.17), mean=0.0586, stddev=0.0353], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.004,0.01,0.03 0.06,0.23,0.47,0.61,0.73 0.79,0.85,0.88,0.94), mean=0.442, stddev=0.226], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.04 0.12,0.27,0.35,0.45,0.50 0.54,0.62,0.69,1.1), mean=0.346, stddev=0.145], oderiv-count=1.12768e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31297, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,2e-06,6e-06,2e-05 0.0001,0.03,0.06,0.08,0.10 0.11,0.13,0.14,0.18), mean=0.0545, stddev=0.0343], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,6e-05,0.0001,0.0004 0.001,0.07,0.09,0.11,0.11 0.12,0.12,0.13,0.14), mean=0.0784, stddev=0.0373]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00022766, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01251, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.39,0.41 0.42,0.44,0.49,0.53,0.56 0.60,0.62,0.65,0.71), mean=0.491, stddev=0.0561], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.007,0.01 0.04,0.24,0.29,0.33,0.35 0.37,0.39,0.42,0.75), mean=0.264, stddev=0.108], bias-{mean,stddev}=-0.0001219,0.02747, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.29,0.30 0.31,0.32,0.35,0.38,0.41 0.43,0.47,0.48,0.51), mean=0.355, stddev=0.042], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.40,0.41 0.42,0.43,0.46,0.48,0.50 0.50,0.52,0.53,0.58), mean=0.458, stddev=0.0288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.07,0.08), mean=0.0412, stddev=0.00835], oderiv-count=1.12832e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30617.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.28 0.29,0.31,0.34,0.38,0.41 0.43,0.48,0.49,0.56), mean=0.345, stddev=0.0474], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.47,0.50,0.51 0.52,0.55,0.60,0.67,0.71 0.75,0.81,0.84,0.97), mean=0.613, stddev=0.0764]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00022766, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01737, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.002,0.005,0.03 0.12,0.22,0.39,0.57,0.66 0.74,0.83,0.88,1.1), mean=0.392, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.38,0.41,0.45 0.51,0.70,0.81,0.89,0.93 0.98,1.0,1.1,1.2), mean=0.777, stddev=0.155], bias-{mean,stddev}=-0.001982,0.02087, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00022766, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02339, w_fc-rms=0.03762, w_oc-rms=0.04975, count=1.46e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0061465, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.43,0.44 0.45,0.46,0.49,0.52,0.57 0.61,0.66,0.68,0.70), mean=0.498, stddev=0.0525], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0149] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0061465, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.38,0.40 0.42,0.44,0.48,0.54,0.61 0.68,0.76,0.80,0.86), mean=0.496, stddev=0.0854], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.17,0.19 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0201] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00692013, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.81,-0.73,-0.59 -0.36,-0.19,-0.01,0.22,0.36 0.54,0.73,0.77,0.82), mean=-6.3e-05, stddev=0.31], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.29,0.30,0.35 0.40,0.46,0.58,0.71,0.87 0.99,1.0,1.0,1.0), mean=0.602, stddev=0.17] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0061465, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.40,0.42 0.43,0.44,0.47,0.50,0.52 0.55,0.59,0.60,0.65), mean=0.475, stddev=0.0428], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.19 0.20,0.21,0.22,0.23,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0169] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0195847, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.94,-0.90,-0.76,-0.54 -0.32,-0.18,-0.003,0.18,0.35 0.51,0.73,0.80,0.90), mean=-0.00308, stddev=0.299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.17,0.24,0.42 0.58,0.72,0.83,0.89,0.93 0.99,1.0,1.0,1.0), mean=0.786, stddev=0.164] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=298260
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00022766, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03167, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.23 0.25,0.28,0.43,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.633, stddev=0.347], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.03,0.07 0.21,0.34,0.48,0.59,0.68 0.81,0.96,1.0,1.1), mean=0.471, stddev=0.198], bias-{mean,stddev}=-0.002482,0.05069, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00022766, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01268, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.24 0.26,0.29,0.34,0.40,0.45 0.49,0.52,0.54,0.70), mean=0.346, stddev=0.0752], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.11,0.20,0.40,0.45 0.48,0.51,0.53,0.57), mean=0.25, stddev=0.145], bias-{mean,stddev}=-0.004184,0.0259, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.32e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.07 0.08,0.10,0.14,0.17,0.19 0.21,0.22,0.24,0.26), mean=0.136, stddev=0.0434], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.20,0.27 0.30,0.37,0.49,0.60,0.64 0.67,0.70,0.72,0.76), mean=0.486, stddev=0.128], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.06,0.07,0.07,0.08,0.09 0.10,0.12,0.13,0.15), mean=0.0763, stddev=0.0144], oderiv-count=1.06253e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28577.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.06 0.07,0.09,0.12,0.17,0.19 0.20,0.22,0.23,0.26), mean=0.128, stddev=0.0444], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.13,0.15 0.17,0.18,0.21,0.24,0.26 0.28,0.31,0.32,0.35), mean=0.211, stddev=0.0389]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00022766, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009305, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.30,0.31 0.32,0.34,0.36,0.39,0.41 0.43,0.45,0.47,0.62), mean=0.365, stddev=0.0388], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.16 0.17,0.18,0.21,0.24,0.25 0.27,0.28,0.30,0.40), mean=0.21, stddev=0.0334], bias-{mean,stddev}=-0.01051,0.01643, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.29e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.24 0.25,0.26,0.29,0.32,0.35 0.36,0.38,0.40,0.47), mean=0.296, stddev=0.0389], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.39 0.40,0.42,0.44,0.47,0.48 0.50,0.51,0.51,0.53), mean=0.442, stddev=0.0323], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0302, stddev=0.00272], oderiv-count=1.06726e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26538.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.21,0.23 0.24,0.26,0.29,0.32,0.34 0.36,0.39,0.41,0.46), mean=0.289, stddev=0.0415], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.46,0.47 0.49,0.51,0.55,0.61,0.64 0.69,0.73,0.77,0.86), mean=0.562, stddev=0.0668]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00022766, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01354, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.0001,0.0002,0.0003 0.001,0.01,0.28,0.48,0.56 0.62,0.66,0.69,1.1), mean=0.27, stddev=0.215], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.28,0.31 0.38,0.53,0.64,0.69,0.73 0.76,0.81,0.84,0.99), mean=0.604, stddev=0.13], bias-{mean,stddev}=-0.003194,0.02251, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00022766, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01395, w_fc-rms=0.0177, w_oc-rms=0.0225, count=1.34e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619948, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.50,0.50,0.53 0.56,0.59,0.61,0.64), mean=0.494, stddev=0.0337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0157] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619948, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.41,0.42 0.43,0.45,0.49,0.50,0.52 0.55,0.59,0.63,0.71), mean=0.484, stddev=0.0429], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.20,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0125] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00937864, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.63,-0.56,-0.35 -0.23,-0.12,0.003,0.13,0.26 0.37,0.53,0.61,0.74), mean=0.00972, stddev=0.216], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.44,0.48,0.50 0.54,0.57,0.65,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.734, stddev=0.189] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619948, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.46,0.49,0.50,0.52 0.54,0.58,0.60,0.65), mean=0.486, stddev=0.0345], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0164] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00619948, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.61,-0.54,-0.34 -0.21,-0.11,0.001,0.13,0.25 0.36,0.52,0.59,0.81), mean=0.00946, stddev=0.21], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.44,0.59,0.68 0.76,0.82,0.88,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.882, stddev=0.111] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=263061
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00022766, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0284, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.36,0.38 0.39,0.42,0.57,0.83,0.87 0.89,0.94,0.95,1.0), mean=0.618, stddev=0.193], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.007 0.01,0.03,0.45,0.61,0.68 0.76,0.82,0.87,0.97), mean=0.375, stddev=0.263], bias-{mean,stddev}=-0.007285,0.101, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00022766, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01173, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.22 0.24,0.25,0.30,0.37,0.43 0.48,0.55,0.57,0.62), mean=0.317, stddev=0.0822], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.16,0.17,0.24,0.34,0.37 0.39,0.41,0.43,0.49), mean=0.255, stddev=0.0823], bias-{mean,stddev}=0.001887,0.01725, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.77e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.05,0.06,0.09,0.11,0.13 0.14,0.15,0.16,0.18), mean=0.0866, stddev=0.0316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.18 0.24,0.30,0.43,0.53,0.59 0.62,0.65,0.67,0.72), mean=0.421, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.07,0.08,0.08,0.10,0.11 0.12,0.14,0.15,0.19), mean=0.0893, stddev=0.0185], oderiv-count=1.056e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24499.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.04 0.05,0.06,0.09,0.11,0.13 0.14,0.15,0.16,0.19), mean=0.0863, stddev=0.0324], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.11 0.12,0.13,0.15,0.18,0.19 0.20,0.22,0.23,0.28), mean=0.152, stddev=0.0322]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00022766, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008871, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.28 0.29,0.30,0.34,0.39,0.41 0.43,0.44,0.46,0.51), mean=0.347, stddev=0.0476], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.12,0.14 0.15,0.16,0.19,0.23,0.25 0.28,0.32,0.35,0.45), mean=0.197, stddev=0.0444], bias-{mean,stddev}=-0.0117,0.01543, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.31e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.21,0.23 0.24,0.27,0.30,0.33,0.35 0.37,0.38,0.39,0.43), mean=0.299, stddev=0.0398], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.36 0.37,0.39,0.41,0.45,0.46 0.48,0.49,0.50,0.52), mean=0.417, stddev=0.035], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0258, stddev=0.00262], oderiv-count=974080
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=22459.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.22 0.24,0.26,0.30,0.33,0.35 0.37,0.40,0.41,0.46), mean=0.298, stddev=0.0454], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.45 0.48,0.52,0.58,0.66,0.70 0.73,0.79,0.82,0.91), mean=0.587, stddev=0.0863]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00022766, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01961, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.17,0.25 0.32,0.36,0.43,0.62,0.75 0.80,0.83,0.86,1.3), mean=0.472, stddev=0.165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.58,0.59,0.61 0.62,0.65,0.74,1.0,1.4 1.4,1.5,1.5,1.7), mean=0.851, stddev=0.275], bias-{mean,stddev}=0.007795,0.02326, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00022766, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02977, w_fc-rms=0.04109, w_oc-rms=0.05695, count=1.21e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626344, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.46,0.47 0.49,0.51,0.58,0.63,0.65 0.68,0.70,0.71,0.80), mean=0.575, stddev=0.0648], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.19,0.20,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.205, stddev=0.00993] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626344, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.47,0.48 0.50,0.54,0.59,0.64,0.67 0.70,0.73,0.74,0.89), mean=0.588, stddev=0.0652], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.17,0.17,0.18 0.19,0.19,0.21,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.204, stddev=0.0136] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00626344, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.74,-0.51 -0.33,-0.21,-0.009,0.20,0.31 0.48,0.64,0.80,0.87), mean=-0.00601, stddev=0.291], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.29,0.32 0.36,0.39,0.44,0.48,0.50 0.51,0.53,0.54,0.58), mean=0.434, stddev=0.0571] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626344, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.55,0.57 0.58,0.61,0.65,0.69,0.71 0.73,0.75,0.77,0.95), mean=0.65, stddev=0.0516], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.15,0.15,0.16 0.17,0.17,0.19,0.20,0.20 0.20,0.20,0.21,0.21), mean=0.184, stddev=0.0142] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0216321, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.87,-0.80,-0.52 -0.30,-0.18,-0.002,0.19,0.30 0.48,0.68,0.87,0.96), mean=-0.00404, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.19,0.22,0.37 0.47,0.56,0.64,0.69,0.71 0.72,0.72,0.73,0.76), mean=0.609, stddev=0.111] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223706
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00022766, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06931, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.1 1.2,1.2,1.5,1.9,1.9 2.0,2.0,2.0,2.2), mean=1.55, stddev=0.3], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.64,0.79,0.88 0.92,0.99,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.11, stddev=0.151], bias-{mean,stddev}=0.001767,0.08061, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00022766, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04022, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.52,0.54 0.56,0.58,0.63,0.69,0.73 0.77,0.81,0.84,2.1), mean=0.642, stddev=0.0898], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.3,1.4 1.4,1.5,1.8,2.1,2.2 2.3,2.4,2.4,2.6), mean=1.82, stddev=0.314], bias-{mean,stddev}=3.251e-09,0.02474, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.41), mean=0.0169, stddev=0.0137], oderiv-count=606080
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/87.mdl exp/nnet3/tdnn_lstm1c_sp/88.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.27942 tdnn2.affine:8.40762 lstm1.W_all:7.19273 lstm1.lstm_nonlin:0.146485 lstm1.W_rp:2.95625 tdnn3.affine:5.16734 tdnn4.affine:5.98409 lstm2.W_all:4.71187 lstm2.lstm_nonlin:0.0590583 lstm2.W_rp:1.93613 tdnn5.affine:4.18365 tdnn6.affine:4.96182 lstm3.W_all:6.39625 lstm3.lstm_nonlin:0.145307 lstm3.W_rp:2.55448 output.affine:5.64311 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.9865 tdnn2.affine:11.2876 lstm1.W_all:20.2233 lstm1.lstm_nonlin:1.51898 lstm1.W_rp:11.6743 tdnn3.affine:8.09487 tdnn4.affine:8.39213 lstm2.W_all:15.7818 lstm2.lstm_nonlin:0.726203 lstm2.W_rp:10.5703 tdnn5.affine:7.48075 tdnn6.affine:8.00242 lstm3.W_all:22.8311 lstm3.lstm_nonlin:1.73929 lstm3.W_rp:25.5197 output.affine:29.7713 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.687819 tdnn2.affine:0.741947 lstm1.W_all:0.355046 lstm1.lstm_nonlin:0.0957034 lstm1.W_rp:0.252728 tdnn3.affine:0.628141 tdnn4.affine:0.709286 lstm2.W_all:0.297881 lstm2.lstm_nonlin:0.080944 lstm2.W_rp:0.182556 tdnn5.affine:0.553982 tdnn6.affine:0.614753 lstm3.W_all:0.279434 lstm3.lstm_nonlin:0.0824666 lstm3.W_rp:0.100004 output.affine:0.18925 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:35:56 KST 2020, elapsed time 1 seconds
