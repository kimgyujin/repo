# nnet3-info exp/nnet3/tdnn_lstm1c_sp/434.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/433.mdl exp/nnet3/tdnn_lstm1c_sp/434.mdl 
# Started at Thu Jul 30 12:53:10 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/434.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=8.29177e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03243, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.006 0.009,0.02,0.58,0.73,0.80 0.86,0.93,0.97,1.3), mean=0.469, stddev=0.309], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.17 0.19,0.23,0.68,0.93,1.1 1.3,1.4,1.4,1.5), mean=0.646, stddev=0.359], bias-{mean,stddev}=-0.006233,0.06092, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.21e+05, self-repaired-proportion=0.156704, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,2e-05,2e-05,4e-05 7e-05,0.0002,0.04,0.09,0.11 0.12,0.13,0.15,0.17), mean=0.0441, stddev=0.044], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.03,0.04 0.05,0.07,0.37,0.61,0.71 0.79,0.86,0.89,0.98), mean=0.347, stddev=0.262], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.01,0.01 0.02,0.04,0.40,0.59,0.71 0.82,0.92,1.0,2.0), mean=0.388, stddev=0.277], oderiv-count=1.13933e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37595.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,1e-05,2e-05,4e-05 7e-05,0.0002,0.04,0.08,0.10 0.12,0.14,0.16,0.17), mean=0.0431, stddev=0.0435], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.0001,0.0001,0.0002 0.0004,0.0009,0.07,0.11,0.12 0.13,0.14,0.15,0.15), mean=0.0601, stddev=0.0493]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=8.29177e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01149, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.34,0.35 0.37,0.39,0.44,0.49,0.55 0.57,0.61,0.65,0.74), mean=0.449, stddev=0.0678], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.005,0.01,0.27,0.33,0.37 0.39,0.42,0.48,0.78), mean=0.218, stddev=0.145], bias-{mean,stddev}=-0.03626,0.03873, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.19 0.20,0.21,0.25,0.28,0.30 0.32,0.34,0.36,0.42), mean=0.249, stddev=0.0424], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.35,0.37,0.39 0.40,0.41,0.44,0.47,0.49 0.51,0.52,0.54,0.57), mean=0.441, stddev=0.0378], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.05,0.07,0.07 0.08,0.09,0.09,0.12), mean=0.0568, stddev=0.0118], oderiv-count=1.29203e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36788.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.17,0.19 0.20,0.21,0.25,0.29,0.31 0.33,0.35,0.37,0.45), mean=0.252, stddev=0.0452], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.35,0.37 0.38,0.40,0.45,0.50,0.54 0.56,0.59,0.61,0.69), mean=0.456, stddev=0.0614]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=8.29177e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01743, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,5e-07,1e-06,9e-06 0.0002,0.18,0.40,0.58,0.66 0.72,0.79,0.86,1.1), mean=0.381, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.38,0.41 0.48,0.70,0.80,0.89,0.96 1.0,1.1,1.2,1.3), mean=0.777, stddev=0.17], bias-{mean,stddev}=0.001086,0.02395, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=8.29177e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05637, w_fc-rms=0.02216, w_oc-rms=0.04089, count=1.51e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641989, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.42,0.43 0.44,0.45,0.48,0.50,0.54 0.66,0.74,0.76,0.80), mean=0.492, stddev=0.0671], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.20 0.21,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.227, stddev=0.0169] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641989, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.43,0.44,0.45 0.46,0.47,0.50,0.52,0.55 0.62,0.68,0.72,0.78), mean=0.504, stddev=0.0528], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0147] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00685834, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.84,-0.80,-0.46 -0.27,-0.13,0.0005,0.16,0.27 0.60,0.78,0.83,0.88), mean=0.0149, stddev=0.287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.28,0.33 0.40,0.45,0.58,0.72,1.0 1.0,1.0,1.0,1.0), mean=0.613, stddev=0.206] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641989, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.40 0.41,0.42,0.46,0.50,0.50 0.52,0.56,0.58,0.64), mean=0.461, stddev=0.0415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0188] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00651873, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.78,-0.74,-0.37 -0.20,-0.10,0.0004,0.13,0.23 0.45,0.65,0.79,0.88), mean=0.0113, stddev=0.245], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.29,0.35,0.48 0.69,0.77,0.85,0.92,1.0 1.0,1.0,1.0,1.0), mean=0.83, stddev=0.147] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.26275e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.36976e-05, count-zeroing-boundaries=296757
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0842975
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=8.29177e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03878, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.44,0.46 0.51,0.56,0.84,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.843, stddev=0.268], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0006,0.0008,0.002 0.007,0.39,0.55,0.72,0.87 1.1,1.3,1.4,1.6), mean=0.539, stddev=0.317], bias-{mean,stddev}=0.01231,0.2633, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=8.29177e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01234, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.23,0.25,0.26 0.27,0.29,0.33,0.38,0.41 0.44,0.47,0.49,0.55), mean=0.34, stddev=0.056], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.27,0.35,0.38 0.41,0.42,0.43,0.46), mean=0.267, stddev=0.0878], bias-{mean,stddev}=0.0008109,0.009824, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.000735992, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.13 0.14,0.15,0.16,0.18), mean=0.0807, stddev=0.0359], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.15 0.21,0.30,0.44,0.55,0.61 0.64,0.68,0.71,0.81), mean=0.428, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.09 0.10,0.10,0.12,0.16,0.19 0.22,0.25,0.28,0.36), mean=0.133, stddev=0.042], oderiv-count=1.05632e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34367.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.02,0.02 0.03,0.05,0.08,0.11,0.13 0.14,0.15,0.16,0.19), mean=0.0798, stddev=0.0354], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.05,0.06,0.07 0.09,0.11,0.13,0.16,0.17 0.18,0.19,0.20,0.21), mean=0.132, stddev=0.0318]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=8.29177e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0081, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.27 0.28,0.29,0.31,0.35,0.37 0.38,0.40,0.41,0.43), mean=0.318, stddev=0.0355], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.12,0.13,0.14 0.15,0.15,0.18,0.21,0.23 0.24,0.27,0.30,0.37), mean=0.181, stddev=0.0345], bias-{mean,stddev}=-0.02824,0.0175, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.79e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.21,0.24,0.27,0.29 0.30,0.32,0.33,0.34), mean=0.242, stddev=0.0323], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.35,0.36,0.37 0.38,0.39,0.42,0.44,0.46 0.47,0.48,0.48,0.50), mean=0.42, stddev=0.0298], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.0388, stddev=0.00276], oderiv-count=1.11229e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31947.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.20 0.20,0.22,0.24,0.27,0.29 0.30,0.33,0.33,0.37), mean=0.245, stddev=0.0338], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.36,0.38,0.40 0.41,0.43,0.47,0.52,0.56 0.58,0.61,0.65,0.79), mean=0.479, stddev=0.0592]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=8.29177e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01421, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,5e-06,2e-05 6e-05,0.001,0.32,0.51,0.58 0.63,0.67,0.70,0.88), mean=0.28, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.34 0.41,0.59,0.65,0.72,0.76 0.79,0.86,0.88,1.3), mean=0.635, stddev=0.13], bias-{mean,stddev}=0.003512,0.02816, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=8.29177e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03477, w_fc-rms=0.01419, w_oc-rms=0.03848, count=1.38e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647482, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.46 0.46,0.48,0.50,0.51,0.54 0.58,0.63,0.65,0.73), mean=0.501, stddev=0.0393], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0139] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647482, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.45,0.46 0.47,0.48,0.50,0.51,0.54 0.57,0.61,0.62,0.68), mean=0.503, stddev=0.0319], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.238, stddev=0.0127] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00647482, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.74,-0.68,-0.37 -0.21,-0.08,0.0002,0.10,0.26 0.42,0.57,0.63,0.72), mean=0.00574, stddev=0.229], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.38,0.41,0.45 0.49,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.723, stddev=0.213] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647482, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.45,0.46,0.50,0.50,0.51 0.52,0.55,0.56,0.71), mean=0.487, stddev=0.0301], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0177] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00647482, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.60,-0.56,-0.28 -0.17,-0.07,0.0002,0.10,0.21 0.35,0.46,0.52,0.64), mean=0.00556, stddev=0.192], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.53,0.59,0.65 0.73,0.80,0.88,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.879, stddev=0.116] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=9.55208e-06, count-zeroing-boundaries=261723
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0842975
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=8.29177e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03668, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.47,0.53 0.55,0.59,0.80,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.809, stddev=0.214], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.002 0.004,0.01,0.57,0.78,0.87 0.98,1.1,1.2,1.3), mean=0.469, stddev=0.36], bias-{mean,stddev}=-0.00257,0.2058, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=8.29177e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01152, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.21,0.22,0.24 0.25,0.27,0.31,0.36,0.39 0.43,0.46,0.47,0.52), mean=0.317, stddev=0.058], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.24,0.34,0.36 0.38,0.40,0.41,0.44), mean=0.251, stddev=0.0765], bias-{mean,stddev}=0.0007752,0.00734, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.51e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.13,0.13,0.17), mean=0.0641, stddev=0.0295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.13,0.15 0.20,0.27,0.41,0.52,0.57 0.60,0.63,0.65,0.70), mean=0.401, stddev=0.135], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.09,0.10 0.10,0.11,0.12,0.15,0.18 0.21,0.23,0.24,0.26), mean=0.132, stddev=0.0341], oderiv-count=1.05114e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29526.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.03,0.04,0.06,0.09,0.11 0.12,0.13,0.13,0.17), mean=0.0664, stddev=0.0297], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.09,0.11,0.14,0.15 0.16,0.17,0.18,0.20), mean=0.116, stddev=0.0284]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=8.29177e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008159, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.16,0.22 0.25,0.28,0.32,0.36,0.39 0.40,0.41,0.41,0.44), mean=0.317, stddev=0.0553], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.12,0.13 0.14,0.15,0.17,0.21,0.24 0.27,0.30,0.33,0.38), mean=0.181, stddev=0.0432], bias-{mean,stddev}=-0.02343,0.0212, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=5.96e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.18 0.20,0.22,0.26,0.28,0.29 0.31,0.32,0.34,0.38), mean=0.251, stddev=0.0395], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.37,0.39,0.41,0.44,0.45 0.46,0.47,0.48,0.51), mean=0.412, stddev=0.0307], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.032, stddev=0.00331], oderiv-count=919840
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27105.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.18 0.20,0.23,0.26,0.29,0.30 0.31,0.34,0.35,0.44), mean=0.256, stddev=0.0408], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.25,0.35 0.39,0.44,0.51,0.57,0.60 0.63,0.67,0.70,0.82), mean=0.502, stddev=0.0895]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=8.29177e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02053, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.27 0.29,0.33,0.48,0.66,0.73 0.78,0.83,0.88,0.95), mean=0.498, stddev=0.162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.54,0.58,0.68 0.74,0.78,0.85,1.1,1.2 1.3,1.4,1.5,1.8), mean=0.914, stddev=0.203], bias-{mean,stddev}=0.01454,0.01735, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=8.29177e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.09373, w_fc-rms=0.04177, w_oc-rms=0.06621, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00654111, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.57,0.59,0.60 0.63,0.65,0.70,0.74,0.76 0.78,0.81,0.82,0.84), mean=0.696, stddev=0.0539], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.23), mean=0.175, stddev=0.0173] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00654111, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.51,0.53,0.55 0.57,0.59,0.63,0.67,0.72 0.77,0.81,0.83,0.87), mean=0.639, stddev=0.0637], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.16,0.18,0.19,0.20,0.21 0.21,0.21,0.22,0.22), mean=0.19, stddev=0.0198] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0138412, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.83,-0.74,-0.54 -0.43,-0.29,0.002,0.27,0.40 0.53,0.72,0.76,0.88), mean=-0.00882, stddev=0.333], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.23,0.27 0.31,0.35,0.41,0.45,0.48 0.49,0.51,0.52,0.65), mean=0.403, stddev=0.0667] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00654111, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.49,0.51,0.54 0.56,0.59,0.64,0.67,0.69 0.71,0.75,0.79,0.89), mean=0.632, stddev=0.056], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.19,0.19,0.20,0.20), mean=0.174, stddev=0.016] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0121446, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.82,-0.74,-0.56 -0.40,-0.28,-0.003,0.25,0.35 0.55,0.72,0.76,0.89), mean=-0.0113, stddev=0.323], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.32 0.38,0.47,0.57,0.63,0.65 0.67,0.67,0.68,0.76), mean=0.543, stddev=0.104] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.35783e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.49316e-06, count-zeroing-boundaries=222560
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0842975
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=8.29177e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0873, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.0,1.1,1.1 1.2,1.2,1.7,2.5,2.6 2.7,2.8,2.8,3.0), mean=1.89, stddev=0.621], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,1.0,1.1,1.1 1.2,1.2,1.3,1.5,1.7 1.9,2.0,2.0,2.1), mean=1.39, stddev=0.226], bias-{mean,stddev}=-0.04203,0.4819, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=8.29177e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04125, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.56,0.57,0.58 0.60,0.62,0.65,0.69,0.72 0.75,0.79,0.86,2.2), mean=0.66, stddev=0.0825], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,0.99,1.0,1.1 1.1,1.2,1.6,2.4,2.5 2.6,2.6,2.6,2.7), mean=1.8, stddev=0.585], bias-{mean,stddev}=3.994e-09,0.02467, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.42), mean=0.0168, stddev=0.0137], oderiv-count=588480
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/433.mdl exp/nnet3/tdnn_lstm1c_sp/434.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.93425 tdnn2.affine:2.69876 lstm1.W_all:2.01577 lstm1.lstm_nonlin:0.0397219 lstm1.W_rp:0.909228 tdnn3.affine:1.84482 tdnn4.affine:1.90221 lstm2.W_all:1.36577 lstm2.lstm_nonlin:0.0213688 lstm2.W_rp:0.606711 tdnn5.affine:1.53788 tdnn6.affine:1.66566 lstm3.W_all:1.85051 lstm3.lstm_nonlin:0.0442456 lstm3.W_rp:0.670908 output.affine:1.5212 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8838 tdnn2.affine:10.4182 lstm1.W_all:20.3011 lstm1.lstm_nonlin:1.66652 lstm1.W_rp:14.8777 tdnn3.affine:7.8604 tdnn4.affine:7.33436 lstm2.W_all:16.5771 lstm2.lstm_nonlin:1.22607 lstm2.W_rp:13.889 tdnn5.affine:7.34002 tdnn6.affine:7.384 lstm3.W_all:23.8961 lstm3.lstm_nonlin:2.78489 lstm3.W_rp:33.0341 output.affine:30.5316 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.22808 tdnn2.affine:0.259314 lstm1.W_all:0.0992645 lstm1.lstm_nonlin:0.0237449 lstm1.W_rp:0.0610781 tdnn3.affine:0.235029 tdnn4.affine:0.2597 lstm2.W_all:0.0823802 lstm2.lstm_nonlin:0.0173951 lstm2.W_rp:0.0436713 tdnn5.affine:0.20992 tdnn6.affine:0.226111 lstm3.W_all:0.0774429 lstm3.lstm_nonlin:0.0158289 lstm3.W_rp:0.0202906 output.affine:0.0497903 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:53:10 KST 2020, elapsed time 0 seconds
