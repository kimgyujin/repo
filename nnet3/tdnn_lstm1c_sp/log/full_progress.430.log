# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/429.mdl exp/nnet3/tdnn_lstm1c_sp/430.mdl 
# Started at Thu Jul 30 12:51:35 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/429.mdl exp/nnet3/tdnn_lstm1c_sp/430.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=8.55896e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007364, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.003,0.008,0.13,0.16,0.18 0.19,0.21,0.21,0.25), mean=0.108, stddev=0.0675], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.05,0.16,0.20,0.24 0.31,0.35,0.36,0.46), mean=0.146, stddev=0.0835], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.007,0.009 0.01,0.02,0.08,0.21,0.30 0.37,0.43,0.46,0.55), mean=0.121, stddev=0.117], bias-{mean,stddev}=7.733e-05,0.0102, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3485.29, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.20,-0.09,-0.07,-0.04 -0.02,-0.002,0.01,0.12,0.16 0.19,0.21,0.23,0.30), mean=0.0465, stddev=0.0746], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.004,0.11,0.14 0.16,0.18,0.19,0.23), mean=0.0473, stddev=0.0578]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=8.55896e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00302, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.11,0.11,0.12,0.13,0.13 0.14,0.14,0.15,0.16), mean=0.119, stddev=0.0106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0006,0.0008,0.001 0.002,0.004,0.07,0.09,0.09 0.10,0.11,0.12,0.13), mean=0.0583, stddev=0.0366], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.03,0.06,0.14,0.21 0.26,0.32,0.35,0.38), mean=0.0892, stddev=0.0791], bias-{mean,stddev}=6.912e-05,0.005382, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.25e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.14,0.16 0.18,0.20,0.25,0.31,0.34 0.37,0.41,0.43,0.56), mean=0.257, stddev=0.067], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.30,0.31,0.34 0.36,0.39,0.44,0.50,0.53 0.55,0.58,0.60,0.64), mean=0.442, stddev=0.0666], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.11,0.13 0.15,0.17,0.19,0.25), mean=0.0514, stddev=0.057], oderiv-count=15424
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3426.31, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.02,0.01,0.04,0.08 0.12,0.17,0.26,0.35,0.42 0.47,0.53,0.60,0.79), mean=0.268, stddev=0.12], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.23,0.43,0.60,0.69 0.78,0.83,0.88,0.96), mean=0.409, stddev=0.225]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=8.55896e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001737, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-09,3e-08,8e-08,5e-07 1e-05,0.02,0.04,0.06,0.07 0.08,0.09,0.09,0.11), mean=0.037, stddev=0.0243], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.08,0.09,0.10 0.11,0.11,0.12,0.13), mean=0.0742, stddev=0.0278], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,7e-08,9e-08 1e-07,0.02,0.04,0.09,0.13 0.17,0.23,0.25,0.30), mean=0.0561, stddev=0.0559], bias-{mean,stddev}=1.587e-05,0.000537, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=8.55896e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0007008, w_fc-rms=0.0006748, w_oc-rms=0.001631, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00147397, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.3,-5.1,-4.3,-3.1 -2.3,-1.2,0.50,1.9,3.0 4.1,5.4,5.7,8.1), mean=0.388, stddev=2.17], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.4,-3.2,-2.7,-2.0 -1.3,-0.67,0.25,1.1,2.0 2.7,3.6,4.2,5.5), mean=0.303, stddev=1.39] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00147397, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.1,-4.7,-4.1,-3.1 -2.3,-1.3,0.50,1.5,2.6 3.8,4.8,5.9,11), mean=0.266, stddev=2.04], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.9,-2.0,-1.6,-1.1 -0.65,-0.22,0.25,0.84,1.3 1.7,2.1,2.2,3.7), mean=0.294, stddev=0.822] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.4206, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-36,-33,-27,-21 -15,-9.0,0.005,8.9,15 20,26,26,51), mean=0.0428, stddev=11.9], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-50,-27,-24,-17 -12,-7.2,1.0,8.8,15 22,28,33,43), mean=1.2, stddev=11.6] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00147397, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.6,-6.1,-5.7,-4.5 -2.7,-1.4,0.50,2.0,3.2 4.7,6.4,7.0,10), mean=0.31, stddev=2.59], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.0,-3.9,-3.6,-2.4 -1.7,-0.80,0.25,1.1,1.9 2.7,3.4,3.6,5.3), mean=0.102, stddev=1.48] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0151933, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-26,-23,-21,-17 -11,-6.3,-0.02,6.5,11 14,21,23,35), mean=-0.042, stddev=9.1], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-23,-19,-14,-10 -7.3,-4.3,0.65,3.3,5.8 8.4,11,12,17), mean=-0.386, stddev=5.51] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-960, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-147
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.092562
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=8.55896e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002453, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.05,0.07,0.07 0.08,0.08,0.08,0.09), mean=0.0534, stddev=0.0166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,5e-05,7e-05,0.0001 0.0005,0.03,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0355, stddev=0.0175], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.06,0.11 0.14,0.17,0.19,0.21), mean=0.0255, stddev=0.0498], bias-{mean,stddev}=0.0001002,0.002913, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=8.55896e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002911, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.06,0.06 0.07,0.07,0.08,0.09,0.10 0.10,0.11,0.11,0.13), mean=0.0802, stddev=0.0135], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.06,0.08,0.09 0.09,0.10,0.10,0.11), mean=0.0629, stddev=0.0213], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-08,3e-08,4e-08 5e-08,8e-08,1e-05,0.09,0.15 0.20,0.25,0.27,0.33), mean=0.0414, stddev=0.07], bias-{mean,stddev}=-0.0001424,0.002112, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.10,0.21,0.27 0.35,0.53,0.59,0.95), mean=0.119, stddev=0.136], oderiv-count=29888
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3249.36, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.07,-0.04,-0.03,-0.01 0.004,0.03,0.08,0.15,0.18 0.21,0.22,0.23,0.27), mean=0.0879, stddev=0.0664], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.04,0.13,0.18,0.20 0.22,0.23,0.24,0.32), mean=0.116, stddev=0.0708]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=8.55896e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002119, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.08,0.08,0.09,0.09 0.09,0.10,0.10,0.10), mean=0.0835, stddev=0.00635], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.04,0.04 0.04,0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.07), mean=0.0479, stddev=0.00649], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.05,0.10,0.14 0.18,0.21,0.22,0.25), mean=0.0686, stddev=0.048], bias-{mean,stddev}=6.546e-05,0.002151, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3072.42, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.06,0.06,0.08,0.12 0.15,0.19,0.25,0.33,0.37 0.41,0.44,0.47,0.51), mean=0.258, stddev=0.0878], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.08,0.29,0.47,0.61,0.67 0.74,0.81,0.83,0.94), mean=0.441, stddev=0.208]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=8.55896e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001181, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,2e-07,3e-07,1e-06 4e-06,7e-05,0.02,0.04,0.05 0.06,0.07,0.07,0.09), mean=0.0225, stddev=0.02], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.03,0.06,0.06,0.07 0.07,0.07,0.08,0.08), mean=0.0508, stddev=0.0179], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,5e-08,6e-08,8e-08 1e-05,0.009,0.02,0.06,0.09 0.12,0.17,0.18,0.22), mean=0.0367, stddev=0.0394], bias-{mean,stddev}=4.521e-05,0.0005391, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=8.55896e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0004482, w_fc-rms=0.0003987, w_oc-rms=0.0008502, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0011793, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.4,-2.6,-2.1,-1.4 -0.67,-0.09,0.50,1.2,1.9 2.4,2.8,3.5,5.2), mean=0.53, stddev=1.07], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.9,-1.4,-1.1,-0.83 -0.47,-0.09,0.25,0.65,1.2 1.5,2.2,2.3,3.0), mean=0.297, stddev=0.676] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0011793, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.0,-2.1,-1.8,-1.2 -0.89,-0.20,0.50,0.93,1.5 2.1,2.7,3.1,4.1), mean=0.431, stddev=1.02], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-1.0,-0.82,-0.59 -0.27,0.06,0.25,0.57,0.90 1.3,1.7,2.2,2.9), mean=0.311, stddev=0.547] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0011793, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-19,-17,-16,-13 -8.8,-4.0,-0.02,3.2,6.2 9.6,16,18,23), mean=-0.363, stddev=6.31], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-29,-17,-14,-11 -7.3,-3.5,1.0,4.6,8.7 13,17,18,28), mean=0.671, stddev=6.66] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0011793, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.1,-3.0,-2.2,-1.3 -0.56,0.12,0.50,1.6,2.4 3.0,3.8,4.0,5.8), mean=0.737, stddev=1.26], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.0,-2.3,-1.8,-1.1 -0.72,-0.11,0.25,0.80,1.2 1.6,2.1,2.6,3.8), mean=0.268, stddev=0.834] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0011793, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-18,-14,-12,-10 -6.9,-3.5,-0.02,2.4,5.5 8.8,11,12,18), mean=-0.345, stddev=5.08], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-13,-8.4,-7.0,-5.4 -3.3,-1.6,1.0,1.9,4.1 5.8,7.6,8.7,14), mean=0.557, stddev=3.2] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-960, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-147
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.092562
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=8.55896e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00167, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.05,0.05 0.05,0.05,0.05,0.06), mean=0.0366, stddev=0.0104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,9e-05,0.0001,0.0002 0.0003,0.0009,0.03,0.04,0.04 0.04,0.04,0.04,0.06), mean=0.0219, stddev=0.0157], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,1e-06,0.05,0.07 0.09,0.11,0.12,0.13), mean=0.0192, stddev=0.0329], bias-{mean,stddev}=0.0001185,0.002303, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=8.55896e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002406, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.07,0.08 0.09,0.09,0.10,0.10), mean=0.0663, stddev=0.0109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.05,0.07,0.07 0.08,0.08,0.08,0.09), mean=0.0527, stddev=0.0153], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,3e-08,4e-08 5e-08,9e-08,0.001,0.07,0.12 0.17,0.21,0.22,0.26), mean=0.0361, stddev=0.0566], bias-{mean,stddev}=5.032e-05,0.001316, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.37e+05, self-repaired-proportion=-0.00230769, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.009,0.0005,0.005,0.01 0.02,0.03,0.06,0.09,0.11 0.13,0.15,0.17,0.20), mean=0.061, stddev=0.037], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.04,0.03,0.06,0.11 0.16,0.24,0.40,0.54,0.60 0.65,0.71,0.74,0.81), mean=0.391, stddev=0.169]
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2895.47, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,-0.04,-0.04,-0.02 -0.003,0.02,0.07,0.12,0.15 0.18,0.23,0.24,0.29), mean=0.072, stddev=0.0626], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.03,0.11,0.16,0.19 0.21,0.24,0.26,0.31), mean=0.105, stddev=0.0683]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=8.55896e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.001846, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.08,0.08 0.09,0.09,0.09,0.09), mean=0.0724, stddev=0.00864], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.06), mean=0.0417, stddev=0.00596], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.04,0.09,0.12 0.16,0.18,0.20,0.22), mean=0.0583, stddev=0.0438], bias-{mean,stddev}=-1.791e-05,0.002048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.19e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.16 0.18,0.21,0.25,0.29,0.31 0.33,0.35,0.37,0.44), mean=0.249, stddev=0.0532], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.26,0.29 0.32,0.35,0.40,0.46,0.50 0.52,0.55,0.57,0.61), mean=0.407, stddev=0.0691]
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2718.52, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.03,0.03,0.05,0.10 0.14,0.18,0.27,0.35,0.40 0.45,0.50,0.52,0.60), mean=0.267, stddev=0.106], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.24,0.47,0.66,0.76 0.84,0.91,0.95,1.2), mean=0.455, stddev=0.249]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=8.55896e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00157, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.009 0.01,0.02,0.03,0.05,0.07 0.08,0.09,0.09,0.10), mean=0.0331, stddev=0.0226], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.05,0.06,0.08,0.11 0.12,0.12,0.13,0.13), mean=0.0671, stddev=0.025], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,8e-06 0.007,0.01,0.02,0.07,0.13 0.18,0.23,0.25,0.28), mean=0.0458, stddev=0.0551], bias-{mean,stddev}=-2.226e-05,0.0004204, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=8.55896e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0006225, w_fc-rms=0.000787, w_oc-rms=0.001639, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000953145, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.1,-5.8,-4.2,-2.1 -0.76,0.83,2.8,4.5,5.7 6.3,8.0,11,14), mean=2.65, stddev=2.81], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.8,-2.5,-2.2,-1.7 -1.4,-1.1,-0.31,0.42,0.87 1.2,1.5,1.7,3.2), mean=-0.308, stddev=0.923] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000953145, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-13,-11,-8.7,-6.8 -5.5,-3.5,-0.21,2.5,3.9 5.0,6.5,7.6,12), mean=-0.451, stddev=3.74], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-1.9,-1.6,-1.2 -0.89,-0.41,0.33,1.2,1.6 2.2,2.7,2.8,3.6), mean=0.397, stddev=1.01] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0494858, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-95,-49,-40,-33 -28,-18,0.53,17,28 33,42,45,63), mean=-0.267, stddev=20.7], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-29,-23,-20,-18 -14,-11,-3.1,5.5,9.9 14,17,19,27), mean=-2.44, stddev=9.32] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000953145, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-18,-10,-7.6,-4.8 -3.2,-0.85,2.6,6.3,7.8 9.5,11,12,15), mean=2.51, stddev=4.5], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.2,-3.3,-2.9,-2.2 -1.8,-1.2,-0.31,0.63,1.2 1.5,2.1,2.4,4.0), mean=-0.311, stddev=1.2] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=2.74521, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-89,-37,-32,-27 -22,-15,-0.09,12,21 26,34,38,56), mean=-0.621, stddev=16.7], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-28,-17,-16,-13 -11,-8.4,-3.1,1.9,4.9 6.7,8.7,9.4,22), mean=-3.13, stddev=6.14] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-960, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-137
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.092562
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=8.55896e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001783, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.02,0.03,0.05,0.06 0.06,0.06,0.06,0.07), mean=0.0366, stddev=0.0178], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.028, stddev=0.00642], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,2e-07 3e-07,6e-07,0.004,0.05,0.08 0.10,0.11,0.12,0.14), mean=0.0236, stddev=0.0331], bias-{mean,stddev}=-0.0001446,0.005496, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=8.55896e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002079, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.01 0.02,0.02,0.03,0.04,0.05 0.05,0.06,0.07,0.12), mean=0.0312, stddev=0.0123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.05,0.06,0.07,0.12,0.13 0.13,0.13,0.14,0.14), mean=0.0897, stddev=0.0325], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 3e-07,6e-07,0.002,0.14,0.19 0.22,0.23,0.25,0.26), mean=0.0537, stddev=0.0788], bias-{mean,stddev}=4.781e-11,0.0004335, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.03,0.04 0.04,0.05,0.06,0.52), mean=0.0165, stddev=0.0201], oderiv-count=32320

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.91782 tdnn2.affine:2.72237 lstm1.W_all:2.02041 lstm1.lstm_nonlin:0.0433012 lstm1.W_rp:0.903262 tdnn3.affine:1.85443 tdnn4.affine:1.90926 lstm2.W_all:1.37313 lstm2.lstm_nonlin:0.0237273 lstm2.W_rp:0.615142 tdnn5.affine:1.53257 tdnn6.affine:1.66351 lstm3.W_all:1.82585 lstm3.lstm_nonlin:0.0438186 lstm3.W_rp:0.661479 output.affine:1.53775 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8765 tdnn2.affine:10.4188 lstm1.W_all:20.3193 lstm1.lstm_nonlin:1.70692 lstm1.W_rp:14.895 tdnn3.affine:7.8625 tdnn4.affine:7.35445 lstm2.W_all:16.589 lstm2.lstm_nonlin:1.24034 lstm2.W_rp:13.9185 tdnn5.affine:7.36201 tdnn6.affine:7.38537 lstm3.W_all:23.9272 lstm3.lstm_nonlin:2.83104 lstm3.W_rp:33.1501 output.affine:30.622 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.226942 tdnn2.affine:0.261466 lstm1.W_all:0.0993867 lstm1.lstm_nonlin:0.0252483 lstm1.W_rp:0.060601 tdnn3.affine:0.235999 tdnn4.affine:0.259945 lstm2.W_all:0.0827364 lstm2.lstm_nonlin:0.0190442 lstm2.W_rp:0.0441789 tdnn5.affine:0.208139 tdnn6.affine:0.22523 lstm3.W_all:0.0762917 lstm3.lstm_nonlin:0.0154037 lstm3.W_rp:0.0199426 output.affine:0.0502022 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:51:36 KST 2020, elapsed time 1 seconds
