# nnet3-info exp/nnet3/tdnn_lstm1c_sp/226.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/225.mdl exp/nnet3/tdnn_lstm1c_sp/226.mdl 
# Started at Thu Jul 30 11:30:25 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/226.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000146962, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02804, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.009,0.01 0.02,0.12,0.50,0.59,0.64 0.72,0.78,0.82,0.95), mean=0.429, stddev=0.228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.16,0.20,0.55,0.75,1.0 1.3,1.3,1.4,1.4), mean=0.547, stddev=0.332], bias-{mean,stddev}=0.002583,0.05118, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.11e+06, self-repaired-proportion=0.148371, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,1e-05,2e-05,4e-05 0.0001,0.0008,0.05,0.08,0.10 0.11,0.12,0.14,0.19), mean=0.0499, stddev=0.037], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.009,0.01,0.02 0.04,0.09,0.45,0.62,0.72 0.79,0.88,0.92,0.99), mean=0.412, stddev=0.248], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.02,0.03 0.04,0.21,0.35,0.47,0.54 0.62,0.72,0.85,1.6), mean=0.344, stddev=0.194], oderiv-count=1.18566e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33827.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,3e-06,7e-06,2e-05 8e-05,0.0007,0.05,0.08,0.10 0.11,0.13,0.15,0.18), mean=0.0479, stddev=0.0379], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,6e-05,0.0001,0.0002 0.0006,0.004,0.08,0.10,0.11 0.12,0.13,0.13,0.16), mean=0.0664, stddev=0.0407]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000146962, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01103, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.34,0.36 0.37,0.39,0.43,0.47,0.50 0.52,0.54,0.59,0.66), mean=0.433, stddev=0.0512], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.006,0.008 0.01,0.07,0.26,0.30,0.32 0.35,0.37,0.42,0.66), mean=0.223, stddev=0.116], bias-{mean,stddev}=-0.005685,0.03033, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.67e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.23 0.24,0.25,0.28,0.31,0.33 0.35,0.38,0.40,0.52), mean=0.283, stddev=0.039], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.41 0.42,0.43,0.45,0.48,0.50 0.51,0.53,0.53,0.57), mean=0.457, stddev=0.0325], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.06,0.06 0.07,0.07,0.07,0.08), mean=0.0491, stddev=0.0096], oderiv-count=1.26413e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33105.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.23,0.25,0.28,0.31,0.33 0.37,0.40,0.42,0.51), mean=0.282, stddev=0.0458], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.41 0.43,0.45,0.49,0.55,0.58 0.61,0.65,0.68,0.82), mean=0.499, stddev=0.0629]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000146962, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01534, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,2e-05,6e-05,0.0005 0.004,0.14,0.34,0.52,0.61 0.66,0.73,0.76,1.1), mean=0.333, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.30,0.35 0.41,0.61,0.71,0.79,0.83 0.88,0.95,0.98,1.2), mean=0.682, stddev=0.155], bias-{mean,stddev}=-0.0003244,0.02233, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000146962, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03107, w_fc-rms=0.02515, w_oc-rms=0.03125, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631612, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.44,0.45 0.46,0.46,0.48,0.50,0.53 0.60,0.72,0.75,0.78), mean=0.496, stddev=0.0553], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0162] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631612, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.42,0.42,0.44 0.45,0.47,0.49,0.51,0.54 0.61,0.69,0.72,0.77), mean=0.498, stddev=0.0526], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.237, stddev=0.0147] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0114346, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.85,-0.81,-0.42 -0.27,-0.14,0.002,0.16,0.31 0.41,0.74,0.82,0.89), mean=0.00686, stddev=0.272], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.23,0.26,0.37 0.43,0.49,0.63,0.80,1.0 1.0,1.0,1.0,1.0), mean=0.648, stddev=0.197] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631612, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.42 0.43,0.44,0.46,0.50,0.50 0.51,0.54,0.55,0.60), mean=0.467, stddev=0.0299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.226, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00631612, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.77,-0.67,-0.34 -0.20,-0.10,0.002,0.12,0.22 0.33,0.59,0.72,0.82), mean=0.00479, stddev=0.222], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.33,0.39,0.58 0.73,0.80,0.87,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.852, stddev=0.13] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=5.08163e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.05117e-05, count-zeroing-boundaries=294969
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.109917
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000146962, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03164, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.23 0.25,0.30,0.57,0.98,1.1 1.1,1.1,1.2,1.2), mean=0.64, stddev=0.333], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.002,0.004 0.02,0.24,0.43,0.59,0.70 0.91,1.2,1.4,1.5), mean=0.43, stddev=0.274], bias-{mean,stddev}=0.01347,0.2541, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000146962, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01145, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.19,0.20,0.21 0.23,0.25,0.30,0.37,0.41 0.44,0.46,0.48,0.59), mean=0.312, stddev=0.0714], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.11,0.22,0.36,0.38 0.40,0.44,0.45,0.48), mean=0.231, stddev=0.121], bias-{mean,stddev}=0.002713,0.01781, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.33e+05, self-repaired-proportion=0.00185005, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.02,0.03,0.04 0.05,0.06,0.08,0.10,0.12 0.13,0.14,0.14,0.17), mean=0.0815, stddev=0.0263], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.16,0.19,0.26 0.32,0.37,0.49,0.61,0.66 0.70,0.72,0.76,0.84), mean=0.489, stddev=0.134], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.11,0.11,0.13,0.15,0.18 0.20,0.22,0.25,0.37), mean=0.137, stddev=0.0338], oderiv-count=1.15558e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30940.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.02,0.03,0.04 0.04,0.06,0.08,0.10,0.11 0.12,0.14,0.14,0.18), mean=0.0778, stddev=0.0268], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.08,0.09,0.09 0.10,0.11,0.12,0.14,0.15 0.16,0.17,0.17,0.20), mean=0.125, stddev=0.0208]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000146962, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008168, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.28,0.29,0.32,0.35,0.36 0.38,0.40,0.42,0.50), mean=0.321, stddev=0.0341], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.12,0.13,0.13 0.14,0.15,0.18,0.21,0.23 0.24,0.26,0.27,0.35), mean=0.183, stddev=0.0345], bias-{mean,stddev}=-0.0147,0.0154, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.25,0.27,0.28 0.29,0.31,0.32,0.36), mean=0.247, stddev=0.0293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.37,0.38 0.40,0.41,0.44,0.46,0.48 0.49,0.50,0.52,0.54), mean=0.437, stddev=0.0334], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04,0.04 0.05,0.05,0.05,0.05), mean=0.0395, stddev=0.00349], oderiv-count=1.00045e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28775.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.20 0.20,0.21,0.24,0.27,0.28 0.29,0.31,0.33,0.35), mean=0.242, stddev=0.0309], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.38,0.40 0.41,0.43,0.47,0.51,0.53 0.56,0.60,0.64,0.74), mean=0.471, stddev=0.0527]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000146962, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01292, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,5e-07,9e-07,2e-06 9e-06,0.0002,0.28,0.47,0.54 0.58,0.62,0.65,1.1), mean=0.249, stddev=0.216], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.25,0.27,0.32 0.44,0.52,0.59,0.64,0.68 0.72,0.80,0.91,1.5), mean=0.577, stddev=0.12], bias-{mean,stddev}=-0.003133,0.04831, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000146962, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01161, w_fc-rms=0.008931, w_oc-rms=0.01768, count=1.34e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637318, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.43,0.44 0.45,0.46,0.50,0.51,0.55 0.60,0.64,0.66,0.75), mean=0.5, stddev=0.047], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.22,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0141] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637318, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.40,0.42 0.43,0.45,0.50,0.50,0.51 0.53,0.57,0.59,0.73), mean=0.483, stddev=0.0418], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0122] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00808728, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.78,-0.57,-0.34 -0.27,-0.13,-0.0001,0.13,0.27 0.40,0.64,0.71,0.85), mean=0.0035, stddev=0.236], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.29,0.36,0.47 0.53,0.59,0.67,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.749, stddev=0.204] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637318, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.41,0.42 0.44,0.45,0.50,0.50,0.52 0.54,0.57,0.59,0.64), mean=0.484, stddev=0.0365], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0148] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00637318, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.49,-0.39,-0.26 -0.20,-0.09,-6e-06,0.09,0.21 0.31,0.45,0.54,0.69), mean=0.00342, stddev=0.177], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.53,0.62,0.72 0.79,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.905, stddev=0.101] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.84472e-06, count-zeroing-boundaries=260097
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.109917
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000146962, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03004, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.34,0.38 0.40,0.42,0.60,0.87,0.92 0.96,0.99,1.0,1.1), mean=0.649, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0006,0.0008 0.002,0.005,0.46,0.64,0.74 0.82,0.96,1.0,1.2), mean=0.376, stddev=0.305], bias-{mean,stddev}=0.0003027,0.1744, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000146962, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01025, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.20 0.21,0.23,0.27,0.33,0.37 0.40,0.44,0.45,0.47), mean=0.28, stddev=0.0619], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.14,0.20,0.30,0.33 0.34,0.36,0.37,0.42), mean=0.221, stddev=0.0775], bias-{mean,stddev}=0.0005598,0.009262, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.15e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.04,0.06,0.07,0.08 0.09,0.10,0.10,0.12), mean=0.0565, stddev=0.0189], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.19,0.23 0.28,0.35,0.47,0.57,0.62 0.64,0.67,0.69,0.71), mean=0.458, stddev=0.124], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.13,0.13,0.15,0.17,0.20 0.22,0.24,0.26,0.30), mean=0.156, stddev=0.0315], oderiv-count=957568
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26610.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.04,0.06,0.07,0.08 0.09,0.10,0.10,0.12), mean=0.0569, stddev=0.0191], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.08,0.09,0.11,0.11 0.12,0.13,0.13,0.15), mean=0.0934, stddev=0.0155]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000146962, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007625, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.20,0.23 0.24,0.26,0.30,0.34,0.36 0.37,0.39,0.39,0.44), mean=0.298, stddev=0.0459], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.14,0.16,0.20,0.22 0.24,0.27,0.29,0.35), mean=0.17, stddev=0.0376], bias-{mean,stddev}=-0.01191,0.02132, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.2e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.17,0.19 0.20,0.22,0.25,0.27,0.28 0.29,0.31,0.32,0.37), mean=0.245, stddev=0.0333], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.37 0.38,0.40,0.42,0.45,0.46 0.47,0.48,0.48,0.49), mean=0.421, stddev=0.0298], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0324, stddev=0.00283], oderiv-count=971200
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24445.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.17,0.18 0.20,0.22,0.25,0.28,0.29 0.30,0.31,0.32,0.41), mean=0.247, stddev=0.0359], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.28,0.36 0.40,0.43,0.48,0.54,0.57 0.60,0.64,0.65,0.75), mean=0.483, stddev=0.0746]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000146962, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01839, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.22,0.24,0.26 0.28,0.32,0.42,0.59,0.67 0.70,0.73,0.75,1.2), mean=0.447, stddev=0.14], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.59,0.62 0.64,0.66,0.72,0.97,1.2 1.3,1.4,1.5,1.8), mean=0.808, stddev=0.224], bias-{mean,stddev}=0.02325,0.0232, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000146962, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05144, w_fc-rms=0.04268, w_oc-rms=0.04048, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644212, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.59,0.62 0.63,0.65,0.70,0.73,0.76 0.78,0.81,0.81,0.86), mean=0.698, stddev=0.0499], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.16,0.17,0.18,0.20,0.20 0.20,0.21,0.21,0.23), mean=0.182, stddev=0.0168] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644212, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.47,0.50,0.53 0.55,0.58,0.62,0.67,0.72 0.77,0.81,0.82,0.85), mean=0.628, stddev=0.0682], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.17,0.19,0.20,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.195, stddev=0.0191] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0129723, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.80,-0.69,-0.53 -0.36,-0.23,0.003,0.22,0.34 0.54,0.70,0.74,0.91), mean=0.00033, stddev=0.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.22,0.24,0.29 0.35,0.41,0.47,0.51,0.53 0.54,0.56,0.58,0.60), mean=0.455, stddev=0.0749] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644212, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.54,0.55,0.58 0.61,0.64,0.68,0.71,0.73 0.74,0.77,0.79,0.86), mean=0.673, stddev=0.0499], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.15 0.16,0.17,0.18,0.19,0.19 0.19,0.20,0.20,0.21), mean=0.176, stddev=0.0153] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00856857, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.80,-0.67,-0.49 -0.33,-0.19,-0.004,0.20,0.31 0.51,0.67,0.71,0.89), mean=-0.00123, stddev=0.281], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.26,0.30,0.37 0.45,0.55,0.63,0.67,0.69 0.70,0.72,0.73,0.75), mean=0.602, stddev=0.101] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221116
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.109917
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000146962, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07595, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.0,1.0,1.1 1.1,1.2,1.6,2.1,2.2 2.3,2.4,2.4,2.5), mean=1.67, stddev=0.456], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.82,0.93,0.97 1.0,1.1,1.2,1.4,1.5 1.6,1.6,1.7,1.8), mean=1.21, stddev=0.184], bias-{mean,stddev}=-0.02309,0.422, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000146962, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03778, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.50,0.51,0.53 0.54,0.56,0.59,0.64,0.67 0.70,0.75,0.81,2.2), mean=0.603, stddev=0.0837], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.1,1.1 1.1,1.2,1.6,2.1,2.2 2.3,2.3,2.3,2.5), mean=1.68, stddev=0.436], bias-{mean,stddev}=5.383e-09,0.02738, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.42), mean=0.0168, stddev=0.0138], oderiv-count=544000
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/225.mdl exp/nnet3/tdnn_lstm1c_sp/226.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.04976 tdnn2.affine:5.9098 lstm1.W_all:4.57679 lstm1.lstm_nonlin:0.0892655 lstm1.W_rp:1.91976 tdnn3.affine:3.88723 tdnn4.affine:4.30305 lstm2.W_all:3.17949 lstm2.lstm_nonlin:0.0396119 lstm2.W_rp:1.32626 tdnn5.affine:3.05817 tdnn6.affine:3.48108 lstm3.W_all:3.87042 lstm3.lstm_nonlin:0.0825552 lstm3.W_rp:1.48935 output.affine:3.58369 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.135 tdnn2.affine:9.95965 lstm1.W_all:17.8626 lstm1.lstm_nonlin:1.15708 lstm1.W_rp:12.3353 tdnn3.affine:7.30228 tdnn4.affine:7.37257 lstm2.W_all:15.1878 lstm2.lstm_nonlin:0.52352 lstm2.W_rp:11.3968 tdnn5.affine:6.53418 tdnn6.affine:6.89035 lstm3.W_all:21.4305 lstm3.lstm_nonlin:1.78186 lstm3.W_rp:28.7466 output.affine:27.9695 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.547951 tdnn2.affine:0.598282 lstm1.W_all:0.256673 lstm1.lstm_nonlin:0.0768651 lstm1.W_rp:0.15652 tdnn3.affine:0.53746 tdnn4.affine:0.585658 lstm2.W_all:0.209687 lstm2.lstm_nonlin:0.0759978 lstm2.W_rp:0.116821 tdnn5.affine:0.470411 tdnn6.affine:0.507064 lstm3.W_all:0.180325 lstm3.lstm_nonlin:0.0464505 lstm3.W_rp:0.0518292 output.affine:0.128008 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:30:26 KST 2020, elapsed time 1 seconds
