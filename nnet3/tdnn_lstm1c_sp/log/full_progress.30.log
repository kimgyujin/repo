# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/29.mdl exp/nnet3/tdnn_lstm1c_sp/30.mdl 
# Started at Thu Jul 30 10:13:00 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/29.mdl exp/nnet3/tdnn_lstm1c_sp/30.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000274507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02311, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.03,0.26,0.42,0.48,0.51 0.55,0.58,0.61,0.72), mean=0.365, stddev=0.165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.15,0.17,0.47,0.62,0.77 0.97,1.1,1.1,1.4), mean=0.458, stddev=0.261], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.05,0.08,0.29,0.67,0.91 1.1,1.3,1.4,1.6), mean=0.393, stddev=0.351], bias-{mean,stddev}=-0.002141,0.03415, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.41,0.72,0.88 1.1,1.5,1.6,2.1), mean=0.419, stddev=0.392], oderiv-count=97280
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=4761.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.59,-0.27,-0.24,-0.17 -0.11,-0.03,0.02,0.14,0.21 0.28,0.32,0.38,0.57), mean=0.0452, stddev=0.132], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.0004,0.12,0.15 0.17,0.20,0.21,0.26), mean=0.0501, stddev=0.0651]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000274507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01056, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.32,0.33,0.35 0.36,0.38,0.41,0.45,0.47 0.48,0.49,0.49,0.53), mean=0.415, stddev=0.0403], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.01 0.02,0.16,0.25,0.29,0.31 0.32,0.33,0.35,0.40), mean=0.22, stddev=0.0976], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.09,0.12,0.25,0.52,0.70 0.87,1.0,1.1,1.3), mean=0.33, stddev=0.255], bias-{mean,stddev}=0.0008428,0.01639, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=3.28e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.87,-0.71,-0.56 -0.33,-0.09,0.33,0.74,0.96 1.1,1.4,1.5,1.8), mean=0.334, stddev=0.508], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.50,-0.37,-0.24 -0.07,0.10,0.48,0.84,1.0 1.2,1.4,1.6,2.3), mean=0.493, stddev=0.445], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.05,0.06 0.07,0.08,0.09,0.11), mean=0.0281, stddev=0.0248], oderiv-count=96320
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=4709.07, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.28,-0.13,-0.09,-0.04 0.06,0.18,0.37,0.55,0.64 0.73,0.79,0.83,0.99), mean=0.359, stddev=0.223], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.60,0.91,1.0 1.1,1.2,1.2,1.4), mean=0.533, stddev=0.39]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000274507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007095, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.01,0.03 0.05,0.08,0.14,0.23,0.28 0.33,0.38,0.41,0.50), mean=0.156, stddev=0.091], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.12 0.13,0.20,0.34,0.38,0.39 0.41,0.42,0.43,0.45), mean=0.31, stddev=0.0936], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.007,0.08,0.18,0.37,0.52 0.69,0.90,1.0,1.2), mean=0.239, stddev=0.218], bias-{mean,stddev}=3.61e-05,0.004366, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000274507, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.004304, w_fc-rms=0.005054, w_oc-rms=0.007533, count=1.81e+04, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00101807, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-0.56,-0.42,-0.14 0.009,0.20,0.47,0.79,1.0 1.1,1.4,1.5,1.7), mean=0.489, stddev=0.406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.25,-0.14,-0.11,0.0001 0.06,0.14,0.23,0.31,0.35 0.43,0.47,0.53,0.76), mean=0.224, stddev=0.129] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00101807, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.49,-0.36,-0.16 -0.01,0.18,0.45,0.72,0.87 1.0,1.3,1.4,1.6), mean=0.452, stddev=0.368], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.36,-0.20,-0.14,0.02 0.07,0.15,0.24,0.29,0.36 0.43,0.45,0.50,0.63), mean=0.224, stddev=0.123] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00283213, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.7,-5.1,-4.7,-3.8 -2.5,-1.6,0.03,1.7,2.7 3.6,4.8,5.0,8.5), mean=0.0659, stddev=2.15], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-2.7,-2.1,-1.5 -1.1,-0.52,0.46,1.4,2.0 2.3,2.6,2.9,4.8), mean=0.425, stddev=1.19] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00101807, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.60,-0.47,-0.18 -0.05,0.13,0.46,0.80,0.99 1.2,1.4,1.5,2.0), mean=0.468, stddev=0.421], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.44,-0.13,-0.06,-0.005 0.07,0.14,0.24,0.33,0.40 0.47,0.52,0.55,0.77), mean=0.234, stddev=0.14] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0675751, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.7,-4.0,-3.8,-3.0 -2.1,-1.2,0.02,1.5,2.3 2.8,3.6,4.0,6.3), mean=0.0647, stddev=1.72], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.6,-1.1,-1.0,-0.70 -0.31,0.12,0.73,1.3,1.7 1.9,2.2,2.4,4.4), mean=0.705, stddev=0.798] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2.59e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=3885
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000274507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.009137, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.15,0.20,0.25,0.27 0.28,0.30,0.30,0.31), mean=0.202, stddev=0.0508], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.05 0.07,0.10,0.14,0.18,0.20 0.22,0.24,0.25,0.28), mean=0.139, stddev=0.05], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.002,0.003,0.01,0.10,0.39 0.56,0.68,0.75,0.82), mean=0.0958, stddev=0.185], bias-{mean,stddev}=0.0002605,0.008427, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000274507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009071, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.21,0.24,0.28,0.30 0.33,0.36,0.37,0.43), mean=0.25, stddev=0.0434], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.18,0.26,0.28 0.30,0.31,0.31,0.33), mean=0.197, stddev=0.063], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.0009,0.001 0.002,0.003,0.01,0.17,0.46 0.67,0.85,0.94,1.1), mean=0.118, stddev=0.224], bias-{mean,stddev}=-0.0001135,0.01222, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=4551.79, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.41,-0.33,-0.30,-0.24 -0.11,-0.02,0.16,0.32,0.38 0.46,0.55,0.60,0.69), mean=0.148, stddev=0.201], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.21,0.33,0.39 0.42,0.47,0.48,0.53), mean=0.189, stddev=0.152]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000274507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007587, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.26 0.27,0.28,0.30,0.32,0.33 0.34,0.35,0.36,0.39), mean=0.299, stddev=0.0248], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.14,0.15,0.17,0.19,0.21 0.22,0.23,0.24,0.27), mean=0.171, stddev=0.0251], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.09,0.11,0.20,0.36,0.49 0.60,0.71,0.78,0.91), mean=0.25, stddev=0.166], bias-{mean,stddev}=-0.0005403,0.009595, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=4394.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.27,-0.10,-0.05,0.02 0.08,0.15,0.30,0.44,0.53 0.58,0.67,0.70,0.98), mean=0.303, stddev=0.172], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.25,0.58,0.78,0.88 0.96,1.0,1.1,1.3), mean=0.524, stddev=0.306]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000274507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004728, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.006 0.01,0.02,0.08,0.16,0.21 0.24,0.27,0.28,0.40), mean=0.0952, stddev=0.0739], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.12,0.23,0.25,0.26 0.27,0.28,0.29,0.33), mean=0.205, stddev=0.0671], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.005 0.006,0.04,0.11,0.24,0.34 0.47,0.64,0.69,0.86), mean=0.153, stddev=0.152], bias-{mean,stddev}=-2.655e-05,0.004518, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000274507, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.004049, w_fc-rms=0.003878, w_oc-rms=0.004468, count=1.55e+04, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00109425, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.58,-0.36,-0.22,-0.04 0.17,0.27,0.43,0.65,0.86 1.0,1.2,1.2,2.1), mean=0.465, stddev=0.306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.38,-0.06,-0.02,0.08 0.12,0.17,0.24,0.29,0.33 0.36,0.43,0.47,0.60), mean=0.231, stddev=0.0947] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00109425, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.57,-0.28,-0.13,0.01 0.15,0.27,0.44,0.62,0.81 1.1,1.3,1.4,2.0), mean=0.468, stddev=0.309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,-0.02,0.02,0.08 0.13,0.18,0.24,0.25,0.30 0.33,0.38,0.41,0.51), mean=0.223, stddev=0.0751] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.000830861, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.3,-4.6,-4.0,-2.9 -2.3,-1.6,-0.04,1.5,2.2 2.8,3.6,4.5,7.4), mean=-0.0204, stddev=1.87], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-2.7,-2.4,-2.0 -1.4,-0.66,0.35,1.0,1.5 2.0,2.6,3.0,4.3), mean=0.206, stddev=1.15] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00109425, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.39,-0.33,-0.09 0.09,0.21,0.39,0.64,0.92 1.0,1.2,1.3,2.4), mean=0.425, stddev=0.354], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.42,-0.16,-0.08,0.03 0.10,0.16,0.23,0.27,0.33 0.37,0.41,0.46,0.62), mean=0.218, stddev=0.104] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00109425, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.5,-3.6,-3.1,-2.6 -1.9,-1.3,-0.02,1.2,1.8 2.5,3.0,3.4,4.8), mean=-0.031, stddev=1.52], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.9,-2.4,-2.0,-1.1 -0.53,0.04,0.69,1.1,1.3 1.5,1.8,2.1,3.3), mean=0.522, stddev=0.821] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2.21e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=3336
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000274507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006228, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.11,0.12,0.13,0.16,0.18 0.19,0.19,0.20,0.21), mean=0.14, stddev=0.0259], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.02,0.04,0.10,0.13,0.15 0.16,0.17,0.17,0.21), mean=0.0889, stddev=0.0468], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.003,0.006,0.11,0.28 0.38,0.43,0.46,0.52), mean=0.0683, stddev=0.125], bias-{mean,stddev}=-0.0005366,0.007465, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000274507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007506, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.13,0.14,0.15 0.16,0.17,0.20,0.24,0.26 0.29,0.32,0.32,0.35), mean=0.205, stddev=0.0428], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.12,0.13,0.16,0.20,0.22 0.23,0.24,0.25,0.28), mean=0.167, stddev=0.0353], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0005,0.0005,0.0007 0.001,0.002,0.007,0.18,0.38 0.54,0.69,0.75,0.89), mean=0.102, stddev=0.183], bias-{mean,stddev}=0.0001499,0.009956, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.12,0.15 0.18,0.22,0.27,0.37), mean=0.0666, stddev=0.0665], oderiv-count=66944
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=4237.21, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.46,-0.25,-0.17,-0.09 -0.03,0.02,0.14,0.27,0.34 0.43,0.50,0.53,0.61), mean=0.144, stddev=0.157], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.21,0.29,0.33 0.36,0.39,0.40,0.49), mean=0.184, stddev=0.119]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000274507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006519, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.22 0.23,0.23,0.25,0.28,0.29 0.30,0.31,0.33,0.40), mean=0.256, stddev=0.0258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.08,0.09,0.11 0.12,0.12,0.14,0.17,0.18 0.20,0.21,0.22,0.27), mean=0.146, stddev=0.0282], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.07,0.09,0.16,0.30,0.42 0.54,0.64,0.69,0.90), mean=0.208, stddev=0.151], bias-{mean,stddev}=-0.0004185,0.008678, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=4.03e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.69,-0.41,-0.32,-0.17 -0.06,0.07,0.34,0.57,0.74 0.93,1.1,1.2,1.4), mean=0.345, stddev=0.328], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.61,-0.47,-0.26 -0.09,0.10,0.42,0.80,0.98 1.1,1.3,1.4,2.2), mean=0.439, stddev=0.424]
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=4079.93, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.09,-0.03,0.02,0.07 0.11,0.18,0.32,0.47,0.56 0.63,0.70,0.78,0.91), mean=0.329, stddev=0.173], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.20,0.59,0.81,0.93 1.0,1.1,1.2,1.6), mean=0.539, stddev=0.329]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000274507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006073, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.05 0.07,0.08,0.12,0.20,0.26 0.29,0.31,0.32,0.49), mean=0.137, stddev=0.0726], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.21,0.25,0.34,0.38 0.40,0.43,0.44,0.46), mean=0.269, stddev=0.067], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.01 0.04,0.06,0.12,0.28,0.47 0.66,0.84,0.92,1.1), mean=0.192, stddev=0.2], bias-{mean,stddev}=0.0001244,0.004478, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000274507, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.004406, w_fc-rms=0.00553, w_oc-rms=0.00613, count=1.29e+04, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00120083, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.3,-0.79,-0.49 -0.23,0.17,0.73,1.3,1.6 1.9,2.2,2.3,3.0), mean=0.726, stddev=0.72], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.30,-0.15,-0.12,-0.05 0.03,0.09,0.22,0.33,0.40 0.46,0.52,0.55,0.71), mean=0.215, stddev=0.153] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00120083, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.4,-1.6,-1.1,-0.80 -0.41,-0.008,0.69,1.4,1.8 2.1,2.5,2.6,3.4), mean=0.677, stddev=0.894], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.62,-0.44,-0.27,-0.14 -0.04,0.08,0.23,0.35,0.43 0.51,0.60,0.66,0.85), mean=0.215, stddev=0.196] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0287436, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-12,-8.6,-7.1,-5.6 -4.2,-2.7,-0.13,2.8,4.3 5.8,7.0,8.5,11), mean=-0.00223, stddev=3.45], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.3,-3.2,-2.6,-2.1 -1.6,-0.93,0.44,1.7,2.3 2.8,3.4,3.5,5.4), mean=0.417, stddev=1.5] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00120083, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.2,-0.75,-0.31 -0.02,0.26,0.84,1.4,1.7 2.0,2.4,2.5,4.2), mean=0.849, stddev=0.731], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.65,-0.38,-0.27,-0.19 -0.09,0.02,0.19,0.33,0.43 0.51,0.59,0.62,0.83), mean=0.179, stddev=0.208] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000367202, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.7,-6.2,-5.7,-4.6 -3.7,-2.2,0.04,2.3,3.6 4.5,5.5,6.5,9.1), mean=0.0181, stddev=2.74], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-2.6,-2.2,-1.6 -1.0,-0.49,0.50,1.5,2.0 2.5,3.0,3.4,4.1), mean=0.476, stddev=1.23] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.82e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000366838, count-zeroing-boundaries=2726
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000274507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007768, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.12,0.13,0.17,0.21,0.22 0.23,0.24,0.25,0.26), mean=0.172, stddev=0.0406], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.08,0.10,0.12,0.14,0.15 0.16,0.18,0.18,0.23), mean=0.122, stddev=0.0295], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.003,0.004 0.005,0.008,0.05,0.22,0.33 0.40,0.47,0.50,0.61), mean=0.113, stddev=0.136], bias-{mean,stddev}=0.0006444,0.0076, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000274507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.008648, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.08,0.09,0.12,0.16,0.19 0.22,0.25,0.29,0.54), mean=0.131, stddev=0.0485], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.30,0.32 0.32,0.34,0.39,0.44,0.46 0.48,0.50,0.51,0.54), mean=0.393, stddev=0.0537], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.004 0.005,0.008,0.03,0.53,0.81 0.98,1.1,1.1,1.2), mean=0.22, stddev=0.33], bias-{mean,stddev}=-2.461e-10,0.002528, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.16095 tdnn2.affine:9.51421 lstm1.W_all:8.25218 lstm1.lstm_nonlin:0.228966 lstm1.W_rp:3.36234 tdnn3.affine:5.78369 tdnn4.affine:6.8373 lstm2.W_all:5.50098 lstm2.lstm_nonlin:0.163477 lstm2.W_rp:2.29336 tdnn5.affine:4.7858 tdnn6.affine:5.87476 lstm3.W_all:7.06457 lstm3.lstm_nonlin:0.213381 lstm3.W_rp:2.85903 output.affine:6.39729 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.3819 tdnn2.affine:11.8272 lstm1.W_all:20.6521 lstm1.lstm_nonlin:2.02451 lstm1.W_rp:11.7704 tdnn3.affine:8.59761 tdnn4.affine:8.84125 lstm2.W_all:16.0301 lstm2.lstm_nonlin:1.60535 lstm2.W_rp:10.5295 tdnn5.affine:8.01742 tdnn6.affine:8.64197 lstm3.W_all:22.4321 lstm3.lstm_nonlin:2.19172 lstm3.W_rp:24.2369 output.affine:30.4519 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.737964 tdnn2.affine:0.811507 lstm1.W_all:0.399869 lstm1.lstm_nonlin:0.10866 lstm1.W_rp:0.286662 tdnn3.affine:0.678029 tdnn4.affine:0.781662 lstm2.W_all:0.342684 lstm2.lstm_nonlin:0.0942892 lstm2.W_rp:0.216555 tdnn5.affine:0.596571 tdnn6.affine:0.67978 lstm3.W_all:0.315139 lstm3.lstm_nonlin:0.0928444 lstm3.W_rp:0.117955 output.affine:0.210058 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:13:01 KST 2020, elapsed time 1 seconds
