# nnet3-info exp/nnet3/tdnn_lstm1c_sp/47.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/46.mdl exp/nnet3/tdnn_lstm1c_sp/47.mdl 
# Started at Thu Jul 30 10:19:45 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/47.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000259275, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03093, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.01,0.03 0.07,0.41,0.54,0.63,0.69 0.75,0.84,0.92,1.0), mean=0.493, stddev=0.21], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.15 0.17,0.21,0.59,0.81,1.1 1.5,1.6,1.6,1.7), mean=0.597, stddev=0.376], bias-{mean,stddev}=0.001228,0.05829, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.1e+06, self-repaired-proportion=0.105999, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-06,8e-06,7e-05 0.0004,0.02,0.06,0.09,0.10 0.11,0.12,0.13,0.18), mean=0.0593, stddev=0.035], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.001,0.005,0.01 0.05,0.23,0.48,0.62,0.69 0.77,0.83,0.85,0.91), mean=0.438, stddev=0.224], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.05 0.12,0.25,0.34,0.43,0.49 0.56,0.62,0.67,1.2), mean=0.335, stddev=0.14], oderiv-count=1.15597e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33746.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,9e-07,2e-06,8e-06 0.0001,0.02,0.06,0.08,0.10 0.12,0.12,0.14,0.20), mean=0.0569, stddev=0.0361], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,4e-05,7e-05,0.0002 0.0007,0.05,0.10,0.11,0.12 0.13,0.13,0.14,0.14), mean=0.082, stddev=0.0406]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000259275, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0128, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.40,0.41 0.43,0.46,0.50,0.54,0.58 0.60,0.62,0.65,0.80), mean=0.502, stddev=0.0568], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.009,0.02 0.04,0.24,0.30,0.34,0.36 0.38,0.42,0.45,0.76), mean=0.27, stddev=0.11], bias-{mean,stddev}=4.551e-05,0.0283, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.64e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.29,0.31 0.32,0.33,0.36,0.39,0.41 0.43,0.45,0.49,0.64), mean=0.363, stddev=0.0412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.40,0.41 0.42,0.43,0.46,0.49,0.50 0.51,0.52,0.53,0.55), mean=0.46, stddev=0.0294], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0394, stddev=0.00771], oderiv-count=1.14163e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33024.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.29,0.30 0.31,0.32,0.35,0.39,0.41 0.43,0.45,0.49,0.61), mean=0.357, stddev=0.0448], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.50,0.51,0.53 0.54,0.57,0.62,0.68,0.71 0.74,0.80,0.82,0.94), mean=0.626, stddev=0.0686]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000259275, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01757, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.07 0.14,0.23,0.39,0.57,0.67 0.74,0.84,0.90,1.1), mean=0.4, stddev=0.202], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.39,0.45 0.51,0.69,0.82,0.90,0.94 0.99,1.0,1.1,1.4), mean=0.785, stddev=0.161], bias-{mean,stddev}=-0.001702,0.02048, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000259275, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02539, w_fc-rms=0.04053, w_oc-rms=0.05238, count=1.44e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616725, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.43,0.44 0.45,0.46,0.49,0.53,0.57 0.62,0.67,0.68,0.72), mean=0.501, stddev=0.0548], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0145] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616725, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.37,0.40 0.41,0.43,0.47,0.53,0.63 0.71,0.75,0.79,0.86), mean=0.495, stddev=0.0914], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.17,0.19 0.20,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0212] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00827829, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.82,-0.79,-0.60 -0.38,-0.24,0.01,0.22,0.37 0.64,0.74,0.78,0.83), mean=-0.000201, stddev=0.327], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.26,0.29,0.34 0.40,0.46,0.57,0.68,0.80 0.94,0.99,0.99,1.0), mean=0.584, stddev=0.162] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616725, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.41 0.42,0.44,0.47,0.51,0.53 0.55,0.58,0.60,0.66), mean=0.476, stddev=0.0449], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0168] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0151073, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.94,-0.87,-0.81,-0.59 -0.31,-0.21,-0.002,0.19,0.34 0.58,0.74,0.81,0.89), mean=-0.00325, stddev=0.313], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.21,0.22,0.34 0.55,0.71,0.82,0.88,0.91 0.97,0.99,1.0,1.0), mean=0.775, stddev=0.168] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=295446
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000259275, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03228, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.30,0.32 0.34,0.38,0.61,0.98,1.0 1.1,1.1,1.2,1.2), mean=0.677, stddev=0.289], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.11 0.26,0.36,0.48,0.62,0.71 0.78,0.88,1.0,1.1), mean=0.485, stddev=0.188], bias-{mean,stddev}=-0.002281,0.03879, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000259275, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0131, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.23,0.25 0.27,0.29,0.35,0.42,0.47 0.50,0.52,0.53,0.59), mean=0.358, stddev=0.0742], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.13,0.15,0.24,0.40,0.44 0.47,0.50,0.51,0.56), mean=0.272, stddev=0.124], bias-{mean,stddev}=-0.002895,0.01856, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.36e+05, self-repaired-proportion=0.00137019, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.04,0.05,0.07 0.09,0.11,0.15,0.19,0.21 0.22,0.24,0.25,0.27), mean=0.149, stddev=0.0445], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.17,0.21,0.25 0.32,0.38,0.50,0.59,0.63 0.66,0.69,0.71,0.76), mean=0.482, stddev=0.122], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.06,0.07,0.08,0.09 0.10,0.11,0.12,0.19), mean=0.0696, stddev=0.0145], oderiv-count=1.0423e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30859.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.04,0.05,0.07 0.08,0.11,0.14,0.18,0.21 0.22,0.23,0.24,0.29), mean=0.143, stddev=0.0459], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.14,0.16,0.17 0.19,0.20,0.23,0.26,0.28 0.30,0.32,0.33,0.38), mean=0.234, stddev=0.0391]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000259275, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009586, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.30,0.31,0.32 0.33,0.35,0.38,0.40,0.42 0.44,0.46,0.47,0.61), mean=0.377, stddev=0.0369], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.17 0.17,0.19,0.21,0.24,0.26 0.28,0.30,0.30,0.34), mean=0.216, stddev=0.034], bias-{mean,stddev}=-0.008777,0.0158, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.15e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.26,0.27,0.31,0.34,0.36 0.38,0.40,0.41,0.47), mean=0.307, stddev=0.0404], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.37,0.38,0.40 0.41,0.42,0.45,0.47,0.48 0.50,0.51,0.52,0.54), mean=0.445, stddev=0.0306], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.029, stddev=0.00259], oderiv-count=1.0793e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28694.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.23,0.24 0.25,0.26,0.30,0.34,0.36 0.39,0.40,0.42,0.46), mean=0.303, stddev=0.0431], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.47,0.47,0.49 0.50,0.52,0.57,0.63,0.66 0.70,0.74,0.74,0.95), mean=0.578, stddev=0.0662]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000259275, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01365, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.009 0.02,0.06,0.27,0.47,0.57 0.62,0.67,0.70,1.1), mean=0.284, stddev=0.201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.26,0.27,0.31 0.37,0.54,0.64,0.70,0.74 0.77,0.83,0.85,0.94), mean=0.608, stddev=0.133], bias-{mean,stddev}=-0.002608,0.02121, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000259275, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01643, w_fc-rms=0.02125, w_oc-rms=0.02485, count=1.32e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622074, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.44 0.45,0.47,0.49,0.51,0.53 0.56,0.60,0.62,0.64), mean=0.494, stddev=0.0358], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0155] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622074, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.40,0.40,0.41 0.42,0.44,0.49,0.51,0.53 0.56,0.63,0.67,0.76), mean=0.484, stddev=0.0514], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.238, stddev=0.0133] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00920003, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.65,-0.60,-0.43 -0.30,-0.17,0.002,0.18,0.33 0.45,0.57,0.65,0.74), mean=0.0064, stddev=0.253], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.44,0.47,0.51 0.53,0.56,0.65,0.90,0.98 0.99,1.0,1.0,1.0), mean=0.706, stddev=0.165] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622074, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.46,0.49,0.50,0.52 0.55,0.57,0.59,0.66), mean=0.486, stddev=0.0356], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0159] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00622074, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.66,-0.55,-0.38 -0.26,-0.14,0.007,0.16,0.29 0.42,0.56,0.66,0.81), mean=0.00868, stddev=0.239], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.43,0.50,0.67 0.76,0.81,0.88,0.95,0.99 1.0,1.0,1.0,1.0), mean=0.864, stddev=0.108] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=260583
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000259275, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02889, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.42,0.43 0.45,0.48,0.60,0.80,0.86 0.88,0.93,0.97,1.0), mean=0.639, stddev=0.16], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.05,0.12,0.43,0.61,0.69 0.76,0.87,0.93,1.0), mean=0.398, stddev=0.242], bias-{mean,stddev}=0.001576,0.09112, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000259275, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01215, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.24,0.26,0.31,0.39,0.43 0.51,0.58,0.60,0.63), mean=0.328, stddev=0.0869], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.18,0.20,0.26,0.34,0.37 0.39,0.42,0.43,0.49), mean=0.267, stddev=0.0731], bias-{mean,stddev}=0.001987,0.01826, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.05,0.07,0.10,0.13,0.15 0.16,0.17,0.18,0.22), mean=0.101, stddev=0.0376], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.19 0.25,0.30,0.43,0.55,0.59 0.63,0.66,0.68,0.69), mean=0.423, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.06,0.07,0.09,0.10 0.11,0.12,0.14,0.18), mean=0.0772, stddev=0.0175], oderiv-count=991872
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26529, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.03,0.04 0.05,0.07,0.10,0.13,0.15 0.16,0.18,0.18,0.24), mean=0.0996, stddev=0.0384], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.08,0.11 0.13,0.15,0.17,0.20,0.22 0.24,0.25,0.26,0.30), mean=0.175, stddev=0.036]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000259275, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009254, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.28,0.29 0.31,0.32,0.35,0.40,0.43 0.45,0.48,0.49,0.55), mean=0.362, stddev=0.0488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.14 0.16,0.17,0.20,0.24,0.27 0.29,0.33,0.37,0.46), mean=0.206, stddev=0.0475], bias-{mean,stddev}=-0.009829,0.01469, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.83e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.24 0.25,0.28,0.31,0.34,0.36 0.37,0.39,0.40,0.46), mean=0.309, stddev=0.0412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.35,0.36,0.37 0.38,0.39,0.42,0.45,0.46 0.48,0.49,0.50,0.51), mean=0.418, stddev=0.034], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.025, stddev=0.00259], oderiv-count=880000
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24363.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.21,0.23 0.25,0.28,0.31,0.35,0.37 0.39,0.40,0.41,0.52), mean=0.311, stddev=0.0462], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.46,0.48 0.51,0.54,0.60,0.68,0.72 0.76,0.78,0.82,1.0), mean=0.609, stddev=0.0854]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000259275, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01955, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.17,0.24 0.30,0.35,0.43,0.62,0.75 0.79,0.85,0.88,1.5), mean=0.47, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.59,0.61,0.63 0.65,0.68,0.75,1.1,1.3 1.4,1.5,1.5,1.7), mean=0.855, stddev=0.251], bias-{mean,stddev}=0.00838,0.02726, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000259275, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03007, w_fc-rms=0.04072, w_oc-rms=0.05532, count=1.19e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628531, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.45,0.47 0.48,0.51,0.57,0.63,0.65 0.67,0.69,0.70,0.77), mean=0.569, stddev=0.0628], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.19,0.20,0.21,0.22,0.22 0.22,0.23,0.23,0.23), mean=0.206, stddev=0.0113] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628531, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.48 0.50,0.53,0.59,0.63,0.66 0.67,0.71,0.72,0.86), mean=0.582, stddev=0.0608], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.17,0.18,0.18 0.19,0.19,0.21,0.22,0.22 0.23,0.23,0.23,0.24), mean=0.206, stddev=0.0144] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00741619, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.82,-0.76,-0.47 -0.31,-0.19,0.0009,0.20,0.32 0.48,0.65,0.75,0.86), mean=0.00363, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.25,0.28,0.33 0.37,0.41,0.46,0.50,0.52 0.54,0.57,0.58,0.65), mean=0.45, stddev=0.0644] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628531, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.53,0.54,0.55 0.57,0.59,0.64,0.68,0.70 0.72,0.75,0.76,0.90), mean=0.638, stddev=0.0513], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.16,0.16,0.17 0.17,0.18,0.19,0.20,0.20 0.21,0.21,0.21,0.22), mean=0.188, stddev=0.0129] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0128699, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.98,-0.84,-0.76,-0.49 -0.27,-0.17,-0.005,0.20,0.31 0.51,0.68,0.77,0.91), mean=0.00638, stddev=0.282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.23,0.31,0.42 0.50,0.58,0.65,0.70,0.72 0.73,0.74,0.75,0.77), mean=0.628, stddev=0.101] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221593
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000259275, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06741, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.5,1.7,1.8 1.9,1.9,1.9,2.1), mean=1.52, stddev=0.234], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.65,0.73,0.82 0.87,0.94,1.1,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.07, stddev=0.161], bias-{mean,stddev}=0.001229,0.09075, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000259275, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04081, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.51,0.53,0.55 0.57,0.59,0.64,0.70,0.74 0.78,0.83,0.87,2.2), mean=0.651, stddev=0.0976], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.5,1.6,1.8,2.1,2.2 2.2,2.3,2.4,2.6), mean=1.86, stddev=0.249], bias-{mean,stddev}=4.54e-09,0.02965, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.42), mean=0.0168, stddev=0.0138], oderiv-count=604160
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/46.mdl exp/nnet3/tdnn_lstm1c_sp/47.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.95849 tdnn2.affine:9.11688 lstm1.W_all:7.79004 lstm1.lstm_nonlin:0.139828 lstm1.W_rp:3.25393 tdnn3.affine:5.5333 tdnn4.affine:6.4973 lstm2.W_all:5.14211 lstm2.lstm_nonlin:0.0708579 lstm2.W_rp:2.11481 tdnn5.affine:4.52122 tdnn6.affine:5.48654 lstm3.W_all:6.83135 lstm3.lstm_nonlin:0.165251 lstm3.W_rp:2.72146 output.affine:6.17443 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.2875 tdnn2.affine:11.5496 lstm1.W_all:20.4481 lstm1.lstm_nonlin:1.61746 lstm1.W_rp:11.8849 tdnn3.affine:8.35687 tdnn4.affine:8.6438 lstm2.W_all:15.9071 lstm2.lstm_nonlin:0.83442 lstm2.W_rp:10.7238 tdnn5.affine:7.7485 tdnn6.affine:8.34445 lstm3.W_all:22.7675 lstm3.lstm_nonlin:1.70981 lstm3.W_rp:24.8293 output.affine:30.2142 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.72739 tdnn2.affine:0.786376 lstm1.W_all:0.380248 lstm1.lstm_nonlin:0.0871687 lstm1.W_rp:0.274137 tdnn3.affine:0.664286 tdnn4.affine:0.753694 lstm2.W_all:0.322482 lstm2.lstm_nonlin:0.0838069 lstm2.W_rp:0.196264 tdnn5.affine:0.580854 tdnn6.affine:0.657767 lstm3.W_all:0.299185 lstm3.lstm_nonlin:0.0973038 lstm3.W_rp:0.109587 output.affine:0.204344 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:19:45 KST 2020, elapsed time 0 seconds
