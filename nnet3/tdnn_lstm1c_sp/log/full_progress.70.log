# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/69.mdl exp/nnet3/tdnn_lstm1c_sp/70.mdl 
# Started at Thu Jul 30 10:28:49 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/69.mdl exp/nnet3/tdnn_lstm1c_sp/70.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000241801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02197, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.02 0.05,0.31,0.39,0.45,0.48 0.51,0.56,0.57,0.73), mean=0.354, stddev=0.14], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.13 0.14,0.17,0.45,0.61,0.72 0.94,1.0,1.1,1.3), mean=0.437, stddev=0.245], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.05,0.08,0.28,0.63,0.87 1.1,1.2,1.3,1.5), mean=0.376, stddev=0.331], bias-{mean,stddev}=0.0006137,0.02807, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,3.8,5.6 7.7,9.2,10,14), mean=1.79, stddev=2.69], oderiv-count=1280
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=348.783, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.4,-3.9,-3.2,-2.4 -1.5,-0.85,0.02,1.2,2.0 2.4,3.1,3.9,5.2), mean=0.144, stddev=1.45], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0.002 0.24,0.36,0.43,0.70), mean=0.0234, stddev=0.0863]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000241801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009894, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.31,0.32 0.34,0.36,0.39,0.42,0.44 0.45,0.46,0.47,0.50), mean=0.389, stddev=0.0389], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.008,0.01 0.03,0.20,0.23,0.26,0.28 0.29,0.32,0.34,0.42), mean=0.21, stddev=0.0819], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.11,0.23,0.48,0.66 0.83,0.95,1.1,1.2), mean=0.31, stddev=0.238], bias-{mean,stddev}=0.0004062,0.01523, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.73e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.0,-3.1,-2.9,-2.1 -1.4,-0.63,0.90,2.6,3.4 4.1,5.0,5.4,6.5), mean=0.943, stddev=1.87], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.4,-3.3,-2.7,-2.2 -1.6,-1.1,0.25,1.5,2.1 2.6,3.2,3.4,6.0), mean=0.245, stddev=1.51]
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=348.783, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-6.5,-5.8,-4.5 -3.4,-2.2,0.15,2.3,3.6 4.5,4.9,5.2,8.1), mean=0.0449, stddev=2.72], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,1.4,1.9 2.2,2.5,2.9,3.7), mean=0.489, stddev=0.83]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000241801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006538, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.0007,0.002,0.01 0.04,0.07,0.13,0.21,0.27 0.30,0.34,0.37,0.50), mean=0.144, stddev=0.0847], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.12 0.13,0.19,0.32,0.35,0.36 0.37,0.38,0.40,0.45), mean=0.286, stddev=0.0847], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,7e-05,7e-05,8e-05 0.0002,0.07,0.16,0.34,0.48 0.64,0.84,0.93,1.1), mean=0.22, stddev=0.202], bias-{mean,stddev}=-9.438e-05,0.002354, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000241801, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.002148, w_fc-rms=0.002872, w_oc-rms=0.00515, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00031897, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.1,-1.0,-0.86,-0.55 -0.21,0.04,0.53,1.1,1.4 1.7,2.1,2.3,3.6), mean=0.551, stddev=0.672], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.35,-0.26,-0.15 -0.0003,0.10,0.25,0.43,0.53 0.67,0.76,0.86,1.7), mean=0.268, stddev=0.246] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00031897, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.86,-0.67,-0.44 -0.15,0.08,0.50,0.92,1.3 1.5,1.8,2.2,3.9), mean=0.526, stddev=0.614], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.60,-0.18,-0.12,-0.04 0.06,0.16,0.26,0.40,0.53 0.62,0.77,0.87,1.2), mean=0.282, stddev=0.199] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0488434, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-9.2,-7.6,-6.4 -5.1,-3.3,0.30,2.9,5.0 6.6,7.8,8.7,12), mean=-0.0112, stddev=3.85], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.3,-4.4,-4.1,-3.4 -2.4,-1.2,0.76,2.7,3.9 4.9,5.7,6.3,7.1), mean=0.787, stddev=2.37] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00031897, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.9,-1.4,-1.1,-0.73 -0.40,-0.08,0.52,1.0,1.4 1.8,2.1,2.2,2.8), mean=0.506, stddev=0.732], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.65,-0.43,-0.25 -0.12,0.03,0.25,0.49,0.63 0.78,0.92,1.0,1.5), mean=0.254, stddev=0.312] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.456526, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.7,-7.4,-6.8,-4.8 -3.8,-2.2,0.08,2.4,4.0 5.0,5.8,6.6,8.7), mean=0.0448, stddev=3.01], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.1,-3.3,-2.9,-1.7 -1.1,-0.33,0.90,2.1,2.7 3.3,3.9,4.4,6.0), mean=0.848, stddev=1.54] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.23e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1839
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000241801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.008411, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.09,0.10,0.17,0.25,0.27 0.29,0.30,0.31,0.33), mean=0.177, stddev=0.0743], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.02 0.05,0.09,0.13,0.17,0.19 0.20,0.22,0.24,0.28), mean=0.126, stddev=0.0495], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,2e-05,2e-05,3e-05 3e-05,6e-05,0.0004,0.05,0.36 0.52,0.63,0.71,0.81), mean=0.078, stddev=0.175], bias-{mean,stddev}=0.0002198,0.006063, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000241801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008459, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.18 0.19,0.20,0.23,0.26,0.28 0.30,0.33,0.34,0.47), mean=0.233, stddev=0.0397], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.09,0.14,0.27,0.28 0.30,0.31,0.32,0.33), mean=0.173, stddev=0.0859], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,2e-05,2e-05,3e-05 4e-05,9e-05,0.002,0.15,0.43 0.62,0.81,0.89,0.99), mean=0.103, stddev=0.213], bias-{mean,stddev}=0.0002613,0.01566, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.09,0.12 0.13,0.16,0.18,0.72), mean=0.0433, stddev=0.0593], oderiv-count=84096
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=348.783, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.2,-4.9,-3.9,-3.3 -2.3,-1.2,0.40,1.8,2.6 3.2,4.2,4.6,7.3), mean=0.249, stddev=1.94], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0.52 0.72,0.93,1.0,1.2), mean=0.101, stddev=0.246]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000241801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006996, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.23,0.24 0.25,0.26,0.27,0.29,0.30 0.31,0.32,0.33,0.38), mean=0.275, stddev=0.0223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.12,0.13 0.13,0.14,0.15,0.18,0.19 0.20,0.21,0.22,0.25), mean=0.158, stddev=0.0229], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.09,0.11,0.18,0.33,0.45 0.56,0.66,0.71,0.81), mean=0.23, stddev=0.153], bias-{mean,stddev}=0.0006341,0.008804, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=348.783, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.7,-3.9,-3.3,-2.7 -2.0,-1.2,0.22,1.4,2.1 2.7,3.2,3.4,6.2), mean=0.127, stddev=1.62], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,1.3,1.7 2.0,2.3,2.4,3.2), mean=0.544, stddev=0.746]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000241801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004303, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,7e-05,9e-05,0.0002 0.0006,0.005,0.08,0.14,0.19 0.22,0.24,0.25,0.45), mean=0.0833, stddev=0.0714], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.07,0.10,0.21,0.23,0.24 0.25,0.26,0.26,0.31), mean=0.187, stddev=0.0603], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,6e-05,7e-05,8e-05 0.0002,0.04,0.10,0.22,0.31 0.43,0.58,0.66,0.74), mean=0.139, stddev=0.139], bias-{mean,stddev}=7.218e-05,0.002754, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000241801, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0012, w_fc-rms=0.001417, w_oc-rms=0.002149, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000320561, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.82,-0.55,-0.23 -0.06,0.18,0.50,0.68,0.93 1.1,1.5,1.6,2.0), mean=0.454, stddev=0.416], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.35,-0.25,-0.21,-0.09 0.03,0.14,0.25,0.32,0.40 0.47,0.53,0.57,0.75), mean=0.232, stddev=0.156] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000320561, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.34,-0.29,-0.05 0.12,0.32,0.50,0.77,1.0 1.4,1.7,1.8,2.7), mean=0.548, stddev=0.423], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.43,-0.11,-0.03,0.05 0.14,0.19,0.25,0.30,0.36 0.44,0.56,0.66,0.99), mean=0.251, stddev=0.125] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0709775, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.4,-7.0,-5.8,-4.3 -3.4,-2.1,0.08,1.6,3.0 4.3,5.3,6.3,8.1), mean=-0.0488, stddev=2.53], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.6,-3.3,-3.0,-2.2 -1.5,-0.40,1.0,1.7,2.6 3.4,4.3,4.7,6.1), mean=0.762, stddev=1.62] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000320561, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-0.91,-0.78,-0.46 -0.15,0.12,0.50,0.69,1.0 1.2,1.5,1.6,2.1), mean=0.436, stddev=0.477], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.45,-0.21,-0.14,-0.03 0.05,0.16,0.25,0.32,0.42 0.50,0.64,0.74,1.0), mean=0.247, stddev=0.165] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000320561, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.0,-4.8,-3.9,-3.4 -2.7,-1.6,0.02,1.6,2.7 3.4,3.8,4.5,7.1), mean=-0.000676, stddev=2.01], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-1.3,-1.0,-0.73 -0.32,0.31,1.0,1.5,2.0 2.4,3.1,3.3,4.5), mean=0.967, stddev=0.915] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.08e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1629
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000241801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005597, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.12,0.15,0.17 0.17,0.18,0.18,0.19), mean=0.124, stddev=0.0312], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.005,0.01,0.09,0.12,0.13 0.14,0.15,0.16,0.19), mean=0.0755, stddev=0.0494], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,2e-05,2e-05,2e-05 3e-05,4e-05,0.0004,0.09,0.26 0.33,0.38,0.41,0.47), mean=0.0576, stddev=0.114], bias-{mean,stddev}=0.0004789,0.007594, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000241801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00691, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.13 0.14,0.16,0.18,0.22,0.24 0.27,0.29,0.31,0.35), mean=0.189, stddev=0.0411], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.10 0.10,0.11,0.15,0.19,0.21 0.23,0.23,0.24,0.26), mean=0.152, stddev=0.0429], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,9e-06,1e-05,1e-05 2e-05,6e-05,0.002,0.17,0.35 0.50,0.63,0.70,0.78), mean=0.0918, stddev=0.17], bias-{mean,stddev}=0.0007084,0.009582, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.78e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.22,-0.11,-0.09,-0.06 -0.03,0.02,0.12,0.22,0.29 0.33,0.40,0.44,0.52), mean=0.126, stddev=0.122], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.56,-0.39,-0.25 -0.10,0.06,0.50,0.87,1.0 1.2,1.4,1.6,2.1), mean=0.485, stddev=0.453]
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=348.783, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.5,-2.4,-2.3,-1.8 -1.4,-0.63,0.24,0.91,1.4 1.7,2.4,2.8,3.6), mean=0.141, stddev=1.08], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.15,0.34 0.45,0.51,0.65,0.82), mean=0.074, stddev=0.157]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000241801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005865, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.21,0.23,0.25,0.26 0.27,0.28,0.29,0.31), mean=0.23, stddev=0.0257], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.10 0.10,0.11,0.13,0.15,0.16 0.18,0.19,0.20,0.24), mean=0.131, stddev=0.0263], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.08,0.14,0.28,0.39 0.49,0.59,0.62,0.71), mean=0.187, stddev=0.137], bias-{mean,stddev}=0.0003644,0.007018, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=3.46e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.60,-0.38,-0.33,-0.19 -0.06,0.08,0.35,0.61,0.76 0.91,1.0,1.1,1.5), mean=0.351, stddev=0.328], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.46,-0.34,-0.23 -0.13,0.06,0.41,0.75,0.92 1.1,1.3,1.4,1.7), mean=0.416, stddev=0.411], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.02,0.04 0.04,0.05,0.06,0.07), mean=0.00906, stddev=0.0156], oderiv-count=35200
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=348.783, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.4,-2.8,-2.7,-2.0 -1.5,-0.80,0.36,1.6,2.3 2.9,3.7,4.1,5.6), mean=0.371, stddev=1.49], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,1.1,1.6 2.0,2.2,2.3,3.1), mean=0.455, stddev=0.7]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000241801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005798, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.05 0.07,0.08,0.11,0.20,0.25 0.26,0.29,0.30,0.42), mean=0.132, stddev=0.0674], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.19,0.23,0.32,0.39 0.40,0.42,0.43,0.48), mean=0.253, stddev=0.0758], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0004,0.0006,0.003 0.04,0.05,0.11,0.27,0.46 0.64,0.79,0.85,1.0), mean=0.181, stddev=0.193], bias-{mean,stddev}=2.341e-05,0.001955, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000241801, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.002633, w_fc-rms=0.004039, w_oc-rms=0.005205, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000322283, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-1.6,-1.4,-1.0 -0.63,-0.04,0.89,1.9,2.5 3.0,3.7,4.3,7.3), mean=0.956, stddev=1.25], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.69,-0.36,-0.28,-0.17 -0.10,-0.005,0.23,0.44,0.57 0.71,0.82,1.0,1.2), mean=0.237, stddev=0.274] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000322283, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.0,-2.7,-2.1,-1.4 -0.96,-0.42,0.74,1.7,2.3 2.6,3.1,3.4,4.6), mean=0.648, stddev=1.26], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.53,-0.40,-0.33,-0.20 -0.12,0.007,0.23,0.47,0.62 0.76,0.93,1.1,1.3), mean=0.248, stddev=0.299] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0637079, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-17,-13,-13,-9.2 -7.4,-4.9,-0.15,4.3,6.7 8.4,10,11,17), mean=-0.257, stddev=5.42], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.7,-6.1,-4.5,-3.3 -2.2,-0.96,0.98,3.0,4.1 4.9,6.1,6.4,8.8), mean=0.965, stddev=2.5] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0665773, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.4,-2.2,-1.6,-1.1 -0.80,-0.29,0.67,1.5,2.1 2.8,3.3,3.6,7.1), mean=0.692, stddev=1.21], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.62,-0.50,-0.32 -0.22,-0.08,0.18,0.45,0.60 0.73,0.88,1.0,1.3), mean=0.187, stddev=0.333] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0613855, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-12,-10,-9.6,-7.7 -5.7,-3.6,-0.17,3.3,5.3 7.3,8.8,9.5,14), mean=-0.146, stddev=4.34], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.7,-5.5,-3.9,-2.8 -1.8,-0.98,0.58,2.3,3.0 3.5,4.2,4.8,7.6), mean=0.547, stddev=2.01] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-9.22e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1374
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000241801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007286, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.10 0.11,0.11,0.15,0.21,0.22 0.22,0.23,0.23,0.25), mean=0.159, stddev=0.047], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.08,0.10,0.12,0.13,0.14 0.15,0.16,0.17,0.20), mean=0.115, stddev=0.0262], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0002,0.0002,0.0003 0.0004,0.001,0.04,0.22,0.31 0.38,0.43,0.46,0.52), mean=0.104, stddev=0.129], bias-{mean,stddev}=1.386e-06,0.004394, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000241801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007919, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.05,0.06 0.07,0.08,0.11,0.15,0.18 0.20,0.23,0.24,0.44), mean=0.12, stddev=0.0443], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.27 0.28,0.29,0.35,0.43,0.44 0.46,0.48,0.48,0.51), mean=0.357, stddev=0.0665], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0002,0.0003,0.0003 0.0005,0.001,0.02,0.51,0.73 0.85,0.94,0.98,1.1), mean=0.203, stddev=0.301], bias-{mean,stddev}=1.93e-10,0.001723, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.03,0.04 0.04,0.05,0.06,0.32), mean=0.0177, stddev=0.0175], oderiv-count=46720

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.70102 tdnn2.affine:8.91764 lstm1.W_all:7.60331 lstm1.lstm_nonlin:0.143111 lstm1.W_rp:3.09433 tdnn3.affine:5.39916 tdnn4.affine:6.30455 lstm2.W_all:5.0051 lstm2.lstm_nonlin:0.0647589 lstm2.W_rp:2.06171 tdnn5.affine:4.40596 tdnn6.affine:5.28513 lstm3.W_all:6.74236 lstm3.lstm_nonlin:0.16179 lstm3.W_rp:2.67994 output.affine:5.85764 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.2672 tdnn2.affine:11.5636 lstm1.W_all:20.5034 lstm1.lstm_nonlin:1.66868 lstm1.W_rp:11.7938 tdnn3.affine:8.24119 tdnn4.affine:8.56162 lstm2.W_all:15.9478 lstm2.lstm_nonlin:0.760701 lstm2.W_rp:10.6689 tdnn5.affine:7.64932 tdnn6.affine:8.24731 lstm3.W_all:22.9891 lstm3.lstm_nonlin:1.74222 lstm3.W_rp:25.3979 output.affine:30.0605 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.721974 tdnn2.affine:0.779068 lstm1.W_all:0.370169 lstm1.lstm_nonlin:0.0854223 lstm1.W_rp:0.261723 tdnn3.affine:0.660638 tdnn4.affine:0.742465 lstm2.W_all:0.314118 lstm2.lstm_nonlin:0.0852995 lstm2.W_rp:0.193346 tdnn5.affine:0.584798 tdnn6.affine:0.646986 lstm3.W_all:0.293942 lstm3.lstm_nonlin:0.0927369 lstm3.W_rp:0.105996 output.affine:0.195007 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:28:50 KST 2020, elapsed time 1 seconds
