# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/109.mdl exp/nnet3/tdnn_lstm1c_sp/110.mdl 
# Started at Thu Jul 30 10:44:36 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/109.mdl exp/nnet3/tdnn_lstm1c_sp/110.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000212991, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01995, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.009,0.02 0.04,0.29,0.35,0.40,0.43 0.46,0.50,0.55,0.57), mean=0.32, stddev=0.13], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.13,0.16,0.41,0.55,0.66 0.84,0.94,1.0,1.1), mean=0.397, stddev=0.222], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.07,0.25,0.58,0.80 0.95,1.1,1.2,1.3), mean=0.341, stddev=0.301], bias-{mean,stddev}=1.921e-05,0.02683, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.45e+05, self-repaired-proportion=-0.0971154, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.23,-0.15,-0.12,-0.07 -0.03,-0.001,0.05,0.13,0.18 0.21,0.26,0.29,0.35), mean=0.0593, stddev=0.0876], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.1,-0.66,-0.41 -0.23,0.01,0.43,0.83,1.1 1.2,1.4,1.5,2.0), mean=0.415, stddev=0.524], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.33,0.79,1.0 1.2,1.5,2.0,3.2), mean=0.434, stddev=0.474], oderiv-count=55808
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1418.72, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.94,-0.76,-0.53 -0.37,-0.20,0.01,0.35,0.53 0.74,0.92,0.98,1.9), mean=0.072, stddev=0.385], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.02,0.15 0.20,0.24,0.28,0.36), mean=0.0302, stddev=0.0692]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000212991, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008858, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.28,0.29 0.31,0.32,0.35,0.38,0.39 0.40,0.41,0.42,0.44), mean=0.348, stddev=0.0329], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.005,0.009 0.02,0.17,0.21,0.24,0.25 0.27,0.28,0.29,0.38), mean=0.187, stddev=0.0759], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.07,0.10,0.21,0.43,0.59 0.74,0.88,0.93,1.0), mean=0.276, stddev=0.215], bias-{mean,stddev}=-0.0005617,0.01358, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1366.29, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-1.1,-0.87,-0.52 -0.30,-0.11,0.44,1.0,1.4 1.6,1.8,2.1,2.6), mean=0.472, stddev=0.661], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.52,1.1,1.3 1.5,1.6,1.7,2.1), mean=0.563, stddev=0.556]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000212991, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005771, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.0003,0.001,0.006 0.03,0.06,0.12,0.19,0.23 0.27,0.30,0.32,0.39), mean=0.126, stddev=0.0766], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.10 0.11,0.16,0.28,0.30,0.32 0.33,0.34,0.35,0.38), mean=0.252, stddev=0.076], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,2e-06,2e-06,2e-06 1e-05,0.06,0.14,0.30,0.43 0.57,0.73,0.83,0.96), mean=0.192, stddev=0.18], bias-{mean,stddev}=-1.544e-05,0.002316, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000212991, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001968, w_fc-rms=0.002395, w_oc-rms=0.004653, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000495773, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.97,-0.62,-0.57,-0.33 -0.07,0.21,0.53,0.91,1.1 1.3,1.6,1.8,2.7), mean=0.548, stddev=0.49], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.57,-0.21,-0.14,-0.02 0.07,0.15,0.25,0.38,0.49 0.63,0.77,0.82,1.2), mean=0.275, stddev=0.194] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000495773, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.68,-0.63,-0.32 -0.06,0.22,0.50,0.83,1.0 1.3,1.5,1.6,2.9), mean=0.507, stddev=0.459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.48,-0.18,-0.13,-0.01 0.09,0.16,0.25,0.35,0.44 0.54,0.67,0.77,0.97), mean=0.26, stddev=0.166] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00653077, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.9,-7.5,-6.6,-4.7 -3.6,-2.2,0.04,2.4,3.7 4.5,6.0,6.8,9.8), mean=0.0279, stddev=2.89], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.7,-3.8,-3.4,-2.7 -2.0,-0.87,0.79,2.0,3.0 4.0,4.5,5.3,8.6), mean=0.659, stddev=1.97] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000495773, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-1.1,-0.89,-0.52 -0.16,0.04,0.50,0.87,1.2 1.5,1.8,1.8,2.8), mean=0.473, stddev=0.577], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.63,-0.42,-0.29,-0.16 -0.07,0.07,0.25,0.40,0.52 0.65,0.81,0.91,1.2), mean=0.244, stddev=0.244] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.36264, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.4,-6.2,-5.3,-3.6 -2.9,-1.8,0.05,1.8,2.9 3.7,5.7,6.4,6.9), mean=0.0669, stddev=2.33], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.8,-2.1,-1.9,-1.4 -0.73,-0.08,0.92,1.6,2.0 2.5,3.2,3.7,6.1), mean=0.776, stddev=1.21] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.43e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2139
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000212991, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007487, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.07,0.08,0.13,0.23,0.25 0.26,0.27,0.28,0.30), mean=0.153, stddev=0.0754], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.004,0.005,0.01 0.04,0.08,0.12,0.15,0.17 0.18,0.20,0.20,0.24), mean=0.112, stddev=0.0463], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,4e-07,4e-07,6e-07 9e-07,2e-06,2e-05,0.03,0.34 0.46,0.56,0.63,0.73), mean=0.0672, stddev=0.157], bias-{mean,stddev}=-0.0001313,0.005878, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000212991, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007795, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.15,0.15,0.16 0.17,0.18,0.21,0.24,0.26 0.28,0.30,0.32,0.37), mean=0.214, stddev=0.038], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.07,0.12,0.25,0.26 0.28,0.29,0.30,0.36), mean=0.155, stddev=0.0873], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,6e-07,7e-07,1e-06 2e-06,4e-06,0.0003,0.13,0.40 0.58,0.72,0.80,0.96), mean=0.0935, stddev=0.197], bias-{mean,stddev}=0.0003425,0.01593, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=4.76e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.59,-0.49,-0.35 -0.25,-0.11,0.11,0.37,0.48 0.58,0.72,0.88,1.0), mean=0.122, stddev=0.291], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.6,-1.7,-1.4,-0.99 -0.70,-0.32,0.31,1.1,1.6 1.9,2.2,2.4,3.3), mean=0.385, stddev=0.884]
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1209.01, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.1,-0.95,-0.71 -0.47,-0.21,0.18,0.59,0.76 0.85,1.0,1.3,2.5), mean=0.171, stddev=0.498], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.28,0.37 0.43,0.51,0.54,0.75), mean=0.108, stddev=0.162]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000212991, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006382, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.22 0.23,0.24,0.25,0.27,0.27 0.28,0.30,0.30,0.33), mean=0.251, stddev=0.0196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.10,0.11,0.11 0.12,0.12,0.14,0.16,0.17 0.18,0.19,0.20,0.24), mean=0.144, stddev=0.022], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.08,0.10,0.16,0.30,0.41 0.52,0.62,0.66,0.73), mean=0.209, stddev=0.141], bias-{mean,stddev}=-0.000164,0.007637, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.16e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.10,0.13 0.16,0.20,0.27,0.35,0.39 0.43,0.47,0.49,0.66), mean=0.278, stddev=0.0921], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.11,0.15,0.20 0.25,0.31,0.41,0.51,0.56 0.60,0.65,0.67,0.80), mean=0.407, stddev=0.121], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.04,0.05 0.05,0.06,0.06,0.08), mean=0.0231, stddev=0.0194], oderiv-count=64640
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1051.72, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.93,-0.87,-0.58 -0.44,-0.16,0.28,0.78,1.0 1.2,1.4,1.5,2.5), mean=0.298, stddev=0.556], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.33,0.96,1.2 1.3,1.4,1.6,2.3), mean=0.462, stddev=0.494]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000212991, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003864, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,3e-06,5e-06,1e-05 4e-05,0.0007,0.07,0.13,0.17 0.20,0.22,0.23,0.38), mean=0.073, stddev=0.0661], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.09,0.19,0.20,0.21 0.22,0.23,0.24,0.29), mean=0.168, stddev=0.0545], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,2e-06,2e-06 4e-05,0.03,0.09,0.19,0.28 0.39,0.53,0.59,0.68), mean=0.124, stddev=0.125], bias-{mean,stddev}=-0.0001017,0.002457, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000212991, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001136, w_fc-rms=0.001426, w_oc-rms=0.00194, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000547197, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.48,-0.28,-0.15 0.01,0.24,0.50,0.79,1.1 1.2,1.4,1.5,1.8), mean=0.519, stddev=0.398], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.27,-0.14,-0.10,0.02 0.09,0.18,0.25,0.34,0.43 0.50,0.57,0.60,1.0), mean=0.255, stddev=0.142] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000547197, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.70,-0.38,-0.23,-0.03 0.14,0.36,0.50,0.73,0.92 1.2,1.4,1.6,2.0), mean=0.537, stddev=0.348], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.68,-0.09,-0.009,0.07 0.13,0.21,0.25,0.30,0.37 0.44,0.51,0.58,0.88), mean=0.255, stddev=0.116] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.22281, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.4,-5.9,-5.3,-3.2 -2.3,-1.3,4e-05,1.4,2.6 3.7,4.3,4.8,11), mean=0.0219, stddev=2.05], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.9,-3.1,-2.7,-2.0 -1.2,-0.17,1.0,2.0,2.8 3.3,3.9,4.1,5.3), mean=0.866, stddev=1.51] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000547197, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.56,-0.35,-0.17 0.03,0.29,0.50,0.80,1.1 1.3,1.6,1.7,2.0), mean=0.537, stddev=0.416], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.50,-0.19,-0.11,-0.02 0.06,0.18,0.25,0.36,0.44 0.53,0.66,0.71,0.93), mean=0.26, stddev=0.164] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000547197, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.1,-4.0,-3.7,-2.9 -1.8,-1.1,-0.002,1.1,2.2 2.9,3.7,4.1,6.7), mean=0.0266, stddev=1.62], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.2,-1.1,-0.52 -0.12,0.37,1.0,1.6,2.2 2.6,3.1,3.4,5.6), mean=1.03, stddev=0.929] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.2e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1812
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000212991, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005019, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.07,0.08,0.11,0.14,0.15 0.16,0.17,0.17,0.19), mean=0.11, stddev=0.0328], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0004,0.0005,0.0008 0.001,0.003,0.08,0.11,0.12 0.13,0.14,0.15,0.20), mean=0.0654, stddev=0.0477], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,4e-07,5e-07,5e-07 7e-07,1e-06,4e-05,0.09,0.23 0.30,0.33,0.37,0.39), mean=0.0516, stddev=0.102], bias-{mean,stddev}=-0.0005095,0.006275, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000212991, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006202, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.12 0.13,0.14,0.17,0.20,0.22 0.23,0.25,0.25,0.28), mean=0.17, stddev=0.0341], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.09,0.13,0.18,0.19 0.21,0.21,0.22,0.26), mean=0.134, stddev=0.0443], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,4e-07,5e-07 1e-06,4e-06,0.002,0.15,0.31 0.45,0.57,0.62,0.74), mean=0.0823, stddev=0.152], bias-{mean,stddev}=0.0002317,0.008877, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=894.435, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.89,-0.78,-0.63 -0.40,-0.22,0.07,0.37,0.57 0.72,1.0,1.1,1.8), mean=0.073, stddev=0.407], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.21,0.28 0.37,0.42,0.46,0.57), mean=0.082, stddev=0.13]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000212991, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005284, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.17 0.18,0.19,0.21,0.23,0.24 0.25,0.25,0.26,0.28), mean=0.207, stddev=0.0229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.09 0.10,0.10,0.12,0.14,0.15 0.16,0.17,0.18,0.21), mean=0.118, stddev=0.0238], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.07,0.12,0.25,0.35 0.45,0.54,0.57,0.66), mean=0.167, stddev=0.125], bias-{mean,stddev}=0.0009611,0.006438, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=737.148, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-1.4,-1.2,-0.88 -0.50,-0.26,0.37,0.86,1.2 1.5,1.9,2.0,4.2), mean=0.348, stddev=0.733], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.38,1.1,1.3 1.5,1.8,1.9,2.3), mean=0.529, stddev=0.578]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000212991, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005267, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.04 0.06,0.08,0.10,0.19,0.23 0.24,0.26,0.27,0.32), mean=0.119, stddev=0.062], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.14 0.16,0.17,0.21,0.29,0.36 0.38,0.39,0.40,0.44), mean=0.229, stddev=0.0734], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,7e-05,0.0001,0.001 0.03,0.05,0.10,0.24,0.43 0.58,0.71,0.77,0.89), mean=0.163, stddev=0.176], bias-{mean,stddev}=-7.087e-06,0.001749, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000212991, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.002436, w_fc-rms=0.003923, w_oc-rms=0.004594, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000623679, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.1,-1.9,-1.7,-0.89 -0.46,0.17,1.2,2.2,2.9 3.3,4.0,4.3,6.2), mean=1.2, stddev=1.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.54,-0.46,-0.32 -0.21,-0.06,0.13,0.38,0.47 0.58,0.74,0.82,1.4), mean=0.146, stddev=0.285] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000623679, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.6,-3.0,-2.5,-1.6 -1.1,-0.47,0.74,2.0,2.7 3.1,3.6,4.1,4.7), mean=0.761, stddev=1.48], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.81,-0.67,-0.44 -0.28,-0.10,0.16,0.39,0.52 0.65,0.85,0.97,1.2), mean=0.143, stddev=0.343] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0668975, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-25,-16,-13,-10 -8.2,-5.0,0.11,5.1,8.8 11,14,16,27), mean=0.154, stddev=6.61], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.1,-6.0,-5.8,-4.9 -3.6,-2.3,-0.13,1.8,2.8 3.7,4.8,5.7,9.6), mean=-0.232, stddev=2.6] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00130062, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.9,-1.6,-1.4,-0.84 -0.34,0.26,1.2,2.3,2.8 3.3,3.8,4.1,5.2), mean=1.26, stddev=1.25], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.84,-0.77,-0.55 -0.40,-0.24,0.07,0.31,0.45 0.59,0.73,0.80,1.0), mean=0.0482, stddev=0.347] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.275564, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-17,-12,-11,-8.0 -6.5,-4.2,-0.35,4.1,6.6 8.0,11,13,20), mean=-0.0345, stddev=5.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.8,-6.7,-5.0,-4.0 -3.1,-2.0,-0.30,1.7,2.5 3.3,4.4,4.9,6.2), mean=-0.255, stddev=2.27] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-9.66e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1438
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000212991, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006575, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.09,0.12,0.19,0.20 0.21,0.21,0.22,0.23), mean=0.142, stddev=0.0478], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.07,0.09,0.11,0.12,0.13 0.13,0.14,0.14,0.18), mean=0.103, stddev=0.0239], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,2e-05,3e-05,4e-05 7e-05,0.0002,0.04,0.20,0.28 0.34,0.40,0.42,0.47), mean=0.093, stddev=0.118], bias-{mean,stddev}=-0.0002567,0.003877, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000212991, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.06 0.06,0.07,0.10,0.14,0.16 0.18,0.21,0.23,0.33), mean=0.109, stddev=0.0397], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.24,0.25,0.32,0.39,0.41 0.42,0.43,0.43,0.46), mean=0.323, stddev=0.0679], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,2e-05,3e-05,4e-05 6e-05,0.0002,0.02,0.48,0.65 0.76,0.84,0.86,0.92), mean=0.186, stddev=0.273], bias-{mean,stddev}=1.771e-11,0.001351, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.90213 tdnn2.affine:7.98451 lstm1.W_all:6.71121 lstm1.lstm_nonlin:0.127505 lstm1.W_rp:2.7546 tdnn3.affine:4.97747 tdnn4.affine:5.75094 lstm2.W_all:4.49398 lstm2.lstm_nonlin:0.0607097 lstm2.W_rp:1.84839 tdnn5.affine:3.95504 tdnn6.affine:4.76124 lstm3.W_all:6.12432 lstm3.lstm_nonlin:0.14853 lstm3.W_rp:2.41857 output.affine:5.32114 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.9276 tdnn2.affine:11.0467 lstm1.W_all:19.8909 lstm1.lstm_nonlin:1.43754 lstm1.W_rp:11.3453 tdnn3.affine:7.9666 tdnn4.affine:8.26719 lstm2.W_all:15.6882 lstm2.lstm_nonlin:0.71804 lstm2.W_rp:10.5007 tdnn5.affine:7.32992 tdnn6.affine:7.89875 lstm3.W_all:22.7447 lstm3.lstm_nonlin:1.9122 lstm3.W_rp:25.7563 output.affine:29.5553 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.662442 tdnn2.affine:0.718415 lstm1.W_all:0.335824 lstm1.lstm_nonlin:0.0883643 lstm1.W_rp:0.242392 tdnn3.affine:0.623832 tdnn4.affine:0.694951 lstm2.W_all:0.286102 lstm2.lstm_nonlin:0.0840817 lstm2.W_rp:0.175335 tdnn5.affine:0.535851 tdnn6.affine:0.60134 lstm3.W_all:0.268798 lstm3.lstm_nonlin:0.0777054 lstm3.W_rp:0.0938293 output.affine:0.179896 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:44:37 KST 2020, elapsed time 1 seconds
