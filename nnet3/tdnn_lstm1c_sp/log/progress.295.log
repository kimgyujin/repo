# nnet3-info exp/nnet3/tdnn_lstm1c_sp/295.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/294.mdl exp/nnet3/tdnn_lstm1c_sp/295.mdl 
# Started at Thu Jul 30 11:57:49 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/295.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000200248, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.008,0.01 0.02,0.03,0.55,0.70,0.78 0.86,0.92,1.0,1.1), mean=0.47, stddev=0.292], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.15 0.17,0.21,0.63,0.89,1.2 1.4,1.5,1.5,1.6), mean=0.623, stddev=0.378], bias-{mean,stddev}=-0.001058,0.0598, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.11e+06, self-repaired-proportion=0.197876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,1e-05,2e-05,5e-05 8e-05,0.0002,0.05,0.09,0.11 0.12,0.14,0.15,0.18), mean=0.0527, stddev=0.0444], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.006,0.009,0.02 0.04,0.07,0.42,0.61,0.71 0.82,0.87,0.93,1.0), mean=0.377, stddev=0.261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.01,0.02 0.02,0.06,0.27,0.36,0.43 0.50,0.59,0.73,1.5), mean=0.257, stddev=0.167], oderiv-count=1.19962e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33981.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,6e-06,1e-05,4e-05 8e-05,0.0003,0.05,0.09,0.11 0.13,0.14,0.16,0.20), mean=0.0501, stddev=0.0434], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.0001,0.0001,0.0003 0.0005,0.001,0.09,0.11,0.13 0.14,0.15,0.15,0.15), mean=0.0707, stddev=0.0495]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000200248, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.36,0.37 0.39,0.41,0.46,0.52,0.55 0.60,0.63,0.64,0.72), mean=0.467, stddev=0.0652], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.006 0.009,0.02,0.28,0.34,0.37 0.40,0.44,0.53,0.73), mean=0.232, stddev=0.142], bias-{mean,stddev}=-0.02526,0.03926, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.42e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.22,0.24 0.25,0.26,0.29,0.33,0.35 0.38,0.40,0.45,0.55), mean=0.298, stddev=0.0449], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.37,0.39 0.41,0.42,0.45,0.48,0.49 0.51,0.53,0.54,0.55), mean=0.448, stddev=0.0361], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.07,0.07), mean=0.0426, stddev=0.00737], oderiv-count=1.0967e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33259.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.22,0.24 0.25,0.26,0.29,0.33,0.36 0.38,0.42,0.45,0.56), mean=0.3, stddev=0.047], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.43,0.46 0.47,0.49,0.54,0.59,0.62 0.65,0.69,0.71,0.76), mean=0.543, stddev=0.0598]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000200248, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.018, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-06,5e-06,3e-05 0.0008,0.16,0.42,0.61,0.69 0.74,0.80,0.85,1.1), mean=0.394, stddev=0.236], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.40,0.46 0.53,0.72,0.83,0.91,0.98 1.0,1.1,1.1,1.3), mean=0.804, stddev=0.164], bias-{mean,stddev}=0.003315,0.02853, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000200248, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.07113, w_fc-rms=0.0325, w_oc-rms=0.04625, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631536, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.72,0.79,0.82,0.86), mean=0.496, stddev=0.0798], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.0234] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631536, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.44,0.46,0.47 0.48,0.49,0.50,0.54,0.59 0.67,0.78,0.81,0.86), mean=0.527, stddev=0.0658], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.17 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0237] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0342, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.89,-0.86,-0.51 -0.27,-0.12,0.0005,0.15,0.32 0.55,0.87,0.89,0.92), mean=0.0168, stddev=0.305], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.20,0.23 0.37,0.44,0.57,0.75,1.0 1.0,1.0,1.0,1.0), mean=0.603, stddev=0.221] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631536, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.42,0.43,0.46,0.50,0.50 0.51,0.54,0.58,0.74), mean=0.461, stddev=0.0409], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.22, stddev=0.0209] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00631536, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.67,-0.62,-0.33 -0.15,-0.07,0.0007,0.09,0.21 0.33,0.62,0.70,0.74), mean=0.0111, stddev=0.209], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.48,0.57 0.78,0.84,0.90,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.879, stddev=0.116] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=9.81565e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000186379, count-zeroing-boundaries=297780
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.276584
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000200248, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04034, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.37,0.40 0.44,0.51,0.87,1.2,1.3 1.3,1.4,1.4,1.5), mean=0.856, stddev=0.337], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0009,0.001,0.003 0.01,0.33,0.54,0.74,0.92 1.2,1.6,1.7,1.9), mean=0.546, stddev=0.353], bias-{mean,stddev}=0.01337,0.2711, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000200248, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01347, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.22,0.23,0.25 0.27,0.30,0.36,0.43,0.47 0.50,0.54,0.56,0.63), mean=0.368, stddev=0.0805], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.13 0.14,0.17,0.28,0.40,0.43 0.45,0.47,0.49,0.51), mean=0.284, stddev=0.116], bias-{mean,stddev}=0.001922,0.01046, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.89e+05, self-repaired-proportion=0.00383443, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.02,0.02,0.03 0.04,0.06,0.09,0.11,0.12 0.14,0.15,0.15,0.18), mean=0.0857, stddev=0.0308], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.11,0.18,0.22 0.27,0.39,0.52,0.62,0.65 0.69,0.71,0.73,0.84), mean=0.495, stddev=0.142], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.09,0.09,0.09 0.10,0.10,0.12,0.15,0.17 0.20,0.24,0.26,0.30), mean=0.128, stddev=0.0358], oderiv-count=1.10816e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31094.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.01,0.02,0.03 0.04,0.06,0.08,0.11,0.12 0.13,0.15,0.16,0.19), mean=0.0851, stddev=0.0304], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.06,0.08,0.09 0.10,0.11,0.13,0.15,0.16 0.17,0.18,0.19,0.23), mean=0.131, stddev=0.0259]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000200248, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008938, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.30,0.31,0.34,0.38,0.41 0.44,0.47,0.47,0.54), mean=0.35, stddev=0.0449], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.12,0.13,0.14 0.15,0.16,0.19,0.23,0.26 0.28,0.31,0.33,0.39), mean=0.199, stddev=0.0459], bias-{mean,stddev}=-0.0231,0.01985, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.59e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.23,0.25,0.27,0.30,0.32 0.33,0.35,0.36,0.45), mean=0.275, stddev=0.0343], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.38,0.39 0.40,0.42,0.44,0.46,0.47 0.48,0.49,0.50,0.51), mean=0.437, stddev=0.0275], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0351, stddev=0.00305], oderiv-count=1.01613e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28929.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.23 0.24,0.25,0.28,0.31,0.32 0.33,0.35,0.37,0.49), mean=0.278, stddev=0.0354], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.43,0.44 0.46,0.48,0.52,0.58,0.61 0.65,0.71,0.73,1.1), mean=0.532, stddev=0.0689]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000200248, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01498, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-06,3e-06,7e-06 3e-05,0.0006,0.34,0.54,0.60 0.65,0.69,0.71,0.90), mean=0.294, stddev=0.243], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.31,0.34,0.39 0.49,0.61,0.68,0.75,0.79 0.85,0.95,1.0,1.4), mean=0.67, stddev=0.133], bias-{mean,stddev}=0.005832,0.03594, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000200248, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04391, w_fc-rms=0.01696, w_oc-rms=0.03741, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637158, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.50,0.52,0.57 0.60,0.69,0.73,0.80), mean=0.507, stddev=0.0532], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0182] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637158, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.45,0.46,0.47 0.49,0.50,0.50,0.54,0.58 0.62,0.67,0.68,0.76), mean=0.52, stddev=0.0461], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0201] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00736746, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.83,-0.74,-0.48 -0.27,-0.13,0.001,0.15,0.33 0.56,0.73,0.76,0.85), mean=0.0125, stddev=0.28], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.28,0.40 0.45,0.52,0.63,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.712, stddev=0.229] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637158, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.44 0.46,0.47,0.50,0.50,0.52 0.54,0.57,0.59,0.61), mean=0.492, stddev=0.0288], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0192] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00637158, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.68,-0.57,-0.44,-0.30 -0.17,-0.07,0.0002,0.09,0.20 0.36,0.47,0.53,0.61), mean=0.00865, stddev=0.178], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.59,0.63,0.74 0.78,0.85,0.92,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.911, stddev=0.0932] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=4.31011e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.61674e-05, count-zeroing-boundaries=262579
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.276584
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000200248, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03937, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.50,0.54 0.57,0.60,0.87,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.862, stddev=0.251], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.001,0.002 0.003,0.01,0.57,0.82,0.95 1.1,1.3,1.5,1.7), mean=0.492, stddev=0.401], bias-{mean,stddev}=0.002699,0.2189, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000200248, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.013, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.27 0.28,0.30,0.35,0.41,0.45 0.49,0.53,0.54,0.61), mean=0.357, stddev=0.0673], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.16 0.17,0.19,0.27,0.38,0.41 0.43,0.45,0.46,0.51), mean=0.282, stddev=0.0923], bias-{mean,stddev}=0.0004505,0.006263, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.1e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.05,0.07,0.09,0.10 0.12,0.12,0.13,0.19), mean=0.0698, stddev=0.0275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.15,0.20 0.25,0.33,0.50,0.60,0.63 0.67,0.70,0.70,0.78), mean=0.474, stddev=0.143], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.10 0.11,0.12,0.13,0.16,0.18 0.20,0.22,0.24,0.27), mean=0.138, stddev=0.0297], oderiv-count=1.01747e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26764.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.05,0.07,0.10,0.11 0.12,0.13,0.13,0.19), mean=0.0726, stddev=0.0275], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.08 0.09,0.10,0.11,0.13,0.14 0.15,0.16,0.16,0.19), mean=0.115, stddev=0.022]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000200248, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008799, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.23 0.27,0.30,0.34,0.40,0.42 0.43,0.46,0.48,0.51), mean=0.342, stddev=0.0613], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.15,0.18,0.23,0.26 0.29,0.32,0.34,0.42), mean=0.195, stddev=0.0473], bias-{mean,stddev}=-0.01817,0.02531, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.72e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.18,0.21 0.23,0.25,0.29,0.32,0.33 0.34,0.37,0.38,0.44), mean=0.286, stddev=0.0427], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.35,0.35,0.37 0.39,0.40,0.43,0.46,0.47 0.48,0.49,0.50,0.53), mean=0.428, stddev=0.032], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0288, stddev=0.00255], oderiv-count=926880
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24599.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.19,0.22 0.24,0.26,0.29,0.33,0.34 0.35,0.38,0.40,0.54), mean=0.293, stddev=0.0452], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.27,0.31,0.39 0.45,0.49,0.57,0.64,0.69 0.73,0.77,0.80,1.2), mean=0.566, stddev=0.105]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000200248, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02133, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.29,0.29,0.31 0.33,0.37,0.51,0.66,0.73 0.78,0.85,0.88,1.1), mean=0.523, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.68,0.70,0.75 0.78,0.82,0.89,1.1,1.2 1.3,1.5,1.6,2.0), mean=0.954, stddev=0.191], bias-{mean,stddev}=0.0155,0.02053, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000200248, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1028, w_fc-rms=0.0483, w_oc-rms=0.07283, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643949, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.57,0.59,0.63 0.64,0.67,0.72,0.78,0.80 0.83,0.85,0.87,0.89), mean=0.725, stddev=0.0623], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.15,0.17,0.19,0.20 0.20,0.20,0.21,0.21), mean=0.166, stddev=0.0245] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643949, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.49,0.56,0.60 0.61,0.65,0.70,0.75,0.80 0.82,0.86,0.88,0.89), mean=0.702, stddev=0.0712], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.12 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.23), mean=0.168, stddev=0.0246] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0350091, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.86,-0.79,-0.62 -0.46,-0.33,-0.004,0.32,0.46 0.58,0.77,0.85,0.92), mean=-0.00776, stddev=0.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.18,0.24 0.29,0.36,0.45,0.51,0.54 0.56,0.58,0.59,0.62), mean=0.434, stddev=0.0969] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643949, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.51,0.53 0.56,0.60,0.65,0.69,0.71 0.74,0.77,0.81,0.87), mean=0.642, stddev=0.0614], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0184] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00643949, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.71,-0.64,-0.49 -0.37,-0.26,0.0002,0.23,0.36 0.46,0.65,0.68,0.77), mean=-0.00752, stddev=0.294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.41,0.47 0.53,0.62,0.70,0.75,0.77 0.79,0.80,0.81,0.84), mean=0.675, stddev=0.0933] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.34769e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.23985e-06, count-zeroing-boundaries=223229
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.276584
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000200248, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09013, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.6,2.7 2.7,2.8,2.9,3.1), mean=1.96, stddev=0.615], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.93,0.99,1.1 1.1,1.2,1.4,1.6,1.9 2.0,2.2,2.2,2.3), mean=1.42, stddev=0.288], bias-{mean,stddev}=-0.004817,0.6618, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000200248, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04432, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.61,0.62 0.64,0.66,0.70,0.75,0.78 0.81,0.87,0.93,2.1), mean=0.71, stddev=0.0839], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.3,1.3,1.7,2.5,2.6 2.7,2.8,2.8,2.9), mean=1.95, stddev=0.576], bias-{mean,stddev}=6.119e-09,0.02549, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0136], oderiv-count=637440
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/294.mdl exp/nnet3/tdnn_lstm1c_sp/295.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.3342 tdnn2.affine:4.2595 lstm1.W_all:3.36562 lstm1.lstm_nonlin:0.0716123 lstm1.W_rp:1.36426 tdnn3.affine:3.08072 tdnn4.affine:3.29629 lstm2.W_all:2.4317 lstm2.lstm_nonlin:0.0419041 lstm2.W_rp:0.973632 tdnn5.affine:2.60676 tdnn6.affine:2.73519 lstm3.W_all:2.54234 lstm3.lstm_nonlin:0.0748333 lstm3.W_rp:1.07235 output.affine:2.80841 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.6883 tdnn2.affine:10.8108 lstm1.W_all:20.9662 lstm1.lstm_nonlin:2.07169 lstm1.W_rp:15.4665 tdnn3.affine:8.5836 tdnn4.affine:8.08004 lstm2.W_all:17.4949 lstm2.lstm_nonlin:1.37116 lstm2.W_rp:14.901 tdnn5.affine:8.2818 tdnn6.affine:7.95652 lstm3.W_all:24.8337 lstm3.lstm_nonlin:3.07727 lstm3.W_rp:34.816 output.affine:32.8021 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.340143 tdnn2.affine:0.391405 lstm1.W_all:0.160159 lstm1.lstm_nonlin:0.0348208 lstm1.W_rp:0.0879568 tdnn3.affine:0.357521 tdnn4.affine:0.40612 lstm2.W_all:0.138784 lstm2.lstm_nonlin:0.0307623 lstm2.W_rp:0.0653102 tdnn5.affine:0.313951 tdnn6.affine:0.341972 lstm3.W_all:0.102207 lstm3.lstm_nonlin:0.0242698 lstm3.W_rp:0.0308719 output.affine:0.0856361 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:57:50 KST 2020, elapsed time 1 seconds
