# nnet3-info exp/nnet3/tdnn_lstm1c_sp/261.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/260.mdl exp/nnet3/tdnn_lstm1c_sp/261.mdl 
# Started at Thu Jul 30 11:44:19 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/261.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000248445, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03443, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.02,0.08,0.60,0.74,0.82 0.92,1.0,1.0,1.3), mean=0.516, stddev=0.298], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.18,0.23,0.66,0.92,1.3 1.6,1.7,1.7,1.7), mean=0.666, stddev=0.416], bias-{mean,stddev}=0.00197,0.06506, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.13e+06, self-repaired-proportion=0.207801, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,1e-05,5e-05 9e-05,0.0004,0.07,0.10,0.12 0.14,0.15,0.16,0.24), mean=0.0619, stddev=0.0475], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.001,0.004,0.01 0.03,0.06,0.45,0.62,0.71 0.80,0.86,0.89,0.99), mean=0.395, stddev=0.258], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.04,0.13,0.26,0.35,0.40 0.47,0.57,0.65,1.1), mean=0.255, stddev=0.148], oderiv-count=1.12288e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30788, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,2e-06,8e-06,2e-05 8e-05,0.0004,0.06,0.09,0.12 0.14,0.16,0.18,0.24), mean=0.0583, stddev=0.0472], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,8e-05,0.0002,0.0003 0.0007,0.002,0.10,0.13,0.14 0.15,0.16,0.16,0.18), mean=0.0825, stddev=0.0533]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000248445, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01294, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.41 0.43,0.45,0.50,0.56,0.60 0.63,0.68,0.70,0.79), mean=0.506, stddev=0.0693], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.01 0.01,0.05,0.31,0.36,0.39 0.43,0.47,0.49,0.76), mean=0.258, stddev=0.144], bias-{mean,stddev}=-0.02031,0.04013, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.09e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.27,0.28 0.29,0.31,0.34,0.38,0.41 0.44,0.47,0.49,0.57), mean=0.349, stddev=0.0484], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.37,0.39,0.40 0.41,0.43,0.45,0.48,0.49 0.51,0.52,0.53,0.55), mean=0.451, stddev=0.0336], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.06), mean=0.0383, stddev=0.0069], oderiv-count=1.18659e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30087.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.28 0.30,0.31,0.34,0.38,0.42 0.45,0.50,0.51,0.57), mean=0.351, stddev=0.0522], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.51,0.52,0.53 0.55,0.57,0.63,0.69,0.73 0.77,0.80,0.82,0.91), mean=0.634, stddev=0.0717]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000248445, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01867, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,4e-06,1e-05,8e-05 0.002,0.17,0.42,0.63,0.73 0.79,0.85,0.92,1.1), mean=0.405, stddev=0.249], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.39,0.40,0.46 0.55,0.74,0.86,0.95,1.0 1.1,1.2,1.2,1.3), mean=0.833, stddev=0.174], bias-{mean,stddev}=0.0008216,0.02731, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000248445, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0502, w_fc-rms=0.02816, w_oc-rms=0.04213, count=1.48e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063509, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.42 0.44,0.45,0.47,0.50,0.54 0.67,0.79,0.81,0.84), mean=0.491, stddev=0.0764], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.19,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0234] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063509, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.41,0.42,0.44 0.46,0.47,0.50,0.52,0.57 0.64,0.75,0.77,0.83), mean=0.507, stddev=0.064], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.021] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0385773, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.90,-0.84,-0.52 -0.28,-0.15,0.002,0.18,0.33 0.54,0.84,0.89,0.91), mean=0.0134, stddev=0.304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.25 0.34,0.41,0.54,0.77,1.0 1.0,1.0,1.0,1.0), mean=0.586, stddev=0.225] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063509, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.38,0.39 0.40,0.42,0.45,0.50,0.50 0.50,0.54,0.55,0.64), mean=0.451, stddev=0.041], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.217, stddev=0.0222] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0063509, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.77,-0.67,-0.37 -0.19,-0.09,0.001,0.12,0.22 0.35,0.66,0.75,0.80), mean=0.0104, stddev=0.228], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.37,0.55 0.73,0.80,0.88,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.853, stddev=0.134] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.27084e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.40872e-05, count-zeroing-boundaries=294870
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.18292
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000248445, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04072, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.31,0.35 0.38,0.44,0.86,1.2,1.3 1.4,1.4,1.5,1.5), mean=0.845, stddev=0.384], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.002,0.004 0.01,0.30,0.55,0.75,0.88 1.2,1.6,1.8,2.0), mean=0.551, stddev=0.357], bias-{mean,stddev}=0.01306,0.2795, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000248445, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01354, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.20,0.21,0.24 0.26,0.29,0.36,0.44,0.48 0.52,0.55,0.57,0.71), mean=0.368, stddev=0.0876], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.14,0.28,0.41,0.44 0.46,0.48,0.50,0.53), mean=0.28, stddev=0.129], bias-{mean,stddev}=0.004451,0.01341, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.93e+05, self-repaired-proportion=0.00384615, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.04,0.06 0.07,0.09,0.12,0.14,0.16 0.18,0.20,0.21,0.25), mean=0.117, stddev=0.0381], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.16,0.18,0.24 0.31,0.39,0.50,0.60,0.64 0.67,0.69,0.72,0.76), mean=0.487, stddev=0.129], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.07 0.07,0.08,0.09,0.10,0.12 0.13,0.16,0.17,0.24), mean=0.0921, stddev=0.0229], oderiv-count=1.04448e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27985, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.03,0.04,0.05 0.07,0.09,0.11,0.14,0.16 0.18,0.20,0.21,0.26), mean=0.114, stddev=0.0378], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.10,0.12,0.14 0.15,0.16,0.18,0.21,0.22 0.23,0.26,0.27,0.32), mean=0.181, stddev=0.0326]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000248445, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009561, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.30,0.31 0.32,0.33,0.37,0.41,0.44 0.46,0.49,0.50,0.60), mean=0.375, stddev=0.0471], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.13,0.14,0.15 0.16,0.18,0.21,0.25,0.27 0.30,0.32,0.34,0.40), mean=0.213, stddev=0.046], bias-{mean,stddev}=-0.02121,0.0187, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.02e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.26 0.27,0.28,0.31,0.35,0.37 0.38,0.39,0.40,0.51), mean=0.314, stddev=0.0391], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.37,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.50,0.52), mean=0.434, stddev=0.0288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0313, stddev=0.00242], oderiv-count=1.02592e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25882.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.25 0.26,0.28,0.31,0.35,0.37 0.38,0.41,0.41,0.53), mean=0.318, stddev=0.0417], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.49,0.50,0.51 0.52,0.55,0.59,0.66,0.70 0.75,0.77,0.81,1.1), mean=0.607, stddev=0.0745]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000248445, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0154, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,8e-07,1e-06,3e-06 2e-05,0.0003,0.34,0.55,0.63 0.67,0.73,0.76,0.95), mean=0.3, stddev=0.253], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.33,0.35,0.39 0.49,0.63,0.70,0.77,0.82 0.87,0.96,1.0,1.4), mean=0.689, stddev=0.136], bias-{mean,stddev}=0.001597,0.04465, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000248445, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02512, w_fc-rms=0.01257, w_oc-rms=0.03094, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640492, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.45,0.46,0.50,0.52,0.57 0.61,0.67,0.70,0.80), mean=0.5, stddev=0.0563], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.19,0.20 0.21,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0187] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640492, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.42,0.43 0.45,0.47,0.50,0.51,0.54 0.58,0.63,0.64,0.74), mean=0.497, stddev=0.0435], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0173] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00873026, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.81,-0.70,-0.47 -0.29,-0.14,0.0002,0.14,0.33 0.53,0.74,0.78,0.88), mean=0.00997, stddev=0.278], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.28,0.39 0.44,0.50,0.60,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.699, stddev=0.238] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640492, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.40,0.42 0.43,0.44,0.50,0.50,0.51 0.54,0.56,0.58,0.73), mean=0.481, stddev=0.039], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0201] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00640492, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.53,-0.44,-0.30 -0.19,-0.09,0.0001,0.09,0.23 0.37,0.54,0.57,0.69), mean=0.00871, stddev=0.194], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.52,0.58,0.69 0.75,0.82,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.896, stddev=0.108] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.69064e-06, count-zeroing-boundaries=260056
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.18292
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000248445, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03931, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.43,0.47,0.52 0.56,0.58,0.86,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.858, stddev=0.261], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0007,0.0009,0.001 0.002,0.007,0.58,0.84,0.95 1.1,1.3,1.4,1.6), mean=0.491, stddev=0.401], bias-{mean,stddev}=0.0001299,0.2168, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000248445, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01294, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.24,0.26 0.27,0.29,0.34,0.41,0.46 0.50,0.55,0.57,0.62), mean=0.354, stddev=0.0741], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.17,0.19,0.26,0.38,0.42 0.43,0.45,0.46,0.51), mean=0.279, stddev=0.0953], bias-{mean,stddev}=0.001541,0.007291, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.57e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.06,0.09,0.12,0.13 0.14,0.15,0.17,0.19), mean=0.0909, stddev=0.0327], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.18,0.23 0.27,0.34,0.47,0.57,0.61 0.65,0.67,0.69,0.72), mean=0.457, stddev=0.128], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.09,0.11,0.12 0.14,0.16,0.16,0.20), mean=0.0989, stddev=0.0196], oderiv-count=1.0535e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23780.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.07,0.09,0.12,0.14 0.15,0.16,0.17,0.19), mean=0.0942, stddev=0.0331], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.13,0.15,0.18,0.19 0.20,0.22,0.23,0.26), mean=0.155, stddev=0.0293]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000248445, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009469, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.22,0.27 0.29,0.32,0.37,0.42,0.45 0.47,0.49,0.49,0.55), mean=0.369, stddev=0.0623], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.16,0.17,0.20,0.25,0.28 0.31,0.35,0.37,0.46), mean=0.21, stddev=0.0514], bias-{mean,stddev}=-0.02117,0.0237, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.67e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.23,0.25 0.26,0.29,0.32,0.35,0.37 0.39,0.41,0.42,0.52), mean=0.321, stddev=0.0443], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.36,0.37 0.38,0.39,0.42,0.44,0.45 0.46,0.48,0.49,0.51), mean=0.417, stddev=0.028], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0257, stddev=0.00203], oderiv-count=965600
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=21678.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.21,0.23,0.25 0.27,0.29,0.33,0.37,0.39 0.40,0.42,0.45,0.63), mean=0.331, stddev=0.0503], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.40,0.47 0.53,0.58,0.66,0.75,0.79 0.83,0.89,0.92,1.3), mean=0.658, stddev=0.114]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000248445, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0222, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.29,0.30,0.32 0.34,0.39,0.52,0.70,0.80 0.84,0.88,0.90,1.4), mean=0.542, stddev=0.163], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.64,0.67,0.74 0.77,0.81,0.88,1.1,1.4 1.5,1.6,1.8,2.1), mean=0.98, stddev=0.253], bias-{mean,stddev}=0.02053,0.0248, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000248445, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.08516, w_fc-rms=0.05092, w_oc-rms=0.05846, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.55,0.56,0.59 0.61,0.64,0.69,0.74,0.77 0.79,0.81,0.82,0.87), mean=0.69, stddev=0.0598], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.14 0.15,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.24), mean=0.177, stddev=0.0203] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.49,0.52,0.54 0.57,0.60,0.66,0.70,0.74 0.78,0.83,0.84,0.88), mean=0.656, stddev=0.0706], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.12,0.14 0.15,0.17,0.19,0.20,0.20 0.21,0.21,0.21,0.22), mean=0.181, stddev=0.0212] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0247605, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.76,-0.58 -0.41,-0.28,-0.004,0.27,0.38 0.54,0.73,0.79,0.90), mean=-0.00662, stddev=0.331], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.21,0.23 0.29,0.36,0.42,0.47,0.49 0.50,0.52,0.53,0.68), mean=0.405, stddev=0.0779] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.49,0.52,0.54 0.56,0.59,0.62,0.66,0.68 0.71,0.74,0.76,0.82), mean=0.619, stddev=0.0502], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.17,0.19,0.19,0.20 0.20,0.20,0.21,0.22), mean=0.181, stddev=0.0166] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00647011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.74,-0.68,-0.52 -0.34,-0.24,-0.01,0.21,0.32 0.48,0.65,0.69,0.84), mean=-0.00701, stddev=0.287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.33,0.35,0.41 0.48,0.56,0.65,0.70,0.72 0.74,0.76,0.77,0.85), mean=0.628, stddev=0.0959] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.52232e-06, count-zeroing-boundaries=221125
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.18292
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000248445, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08397, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.1,1.1 1.2,1.2,1.6,2.4,2.5 2.6,2.6,2.7,2.8), mean=1.83, stddev=0.558], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.99,1.0,1.0 1.1,1.2,1.3,1.5,1.7 1.8,2.0,2.0,2.1), mean=1.33, stddev=0.235], bias-{mean,stddev}=-0.03548,0.481, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000248445, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04408, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.62 0.63,0.65,0.69,0.74,0.78 0.81,0.87,0.91,2.4), mean=0.705, stddev=0.0906], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.7,2.7,2.7,2.8), mean=1.95, stddev=0.541], bias-{mean,stddev}=6.926e-09,0.02998, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=621760
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/260.mdl exp/nnet3/tdnn_lstm1c_sp/261.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.26128 tdnn2.affine:5.15477 lstm1.W_all:4.16777 lstm1.lstm_nonlin:0.0945048 lstm1.W_rp:1.64149 tdnn3.affine:3.45612 tdnn4.affine:3.85546 lstm2.W_all:2.93862 lstm2.lstm_nonlin:0.0514859 lstm2.W_rp:1.17734 tdnn5.affine:2.82062 tdnn6.affine:3.21684 lstm3.W_all:3.54396 lstm3.lstm_nonlin:0.106075 lstm3.W_rp:1.52937 output.affine:3.57463 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.6788 tdnn2.affine:11.6978 lstm1.W_all:21.7404 lstm1.lstm_nonlin:1.62649 lstm1.W_rp:15.6372 tdnn3.affine:8.63003 tdnn4.affine:8.63544 lstm2.W_all:18.0261 lstm2.lstm_nonlin:0.952879 lstm2.W_rp:14.8725 tdnn5.affine:8.243 tdnn6.affine:8.5595 lstm3.W_all:25.8595 lstm3.lstm_nonlin:2.62617 lstm3.W_rp:31.8389 output.affine:32.6303 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.383528 tdnn2.affine:0.437685 lstm1.W_all:0.191375 lstm1.lstm_nonlin:0.0585026 lstm1.W_rp:0.104892 tdnn3.affine:0.398384 tdnn4.affine:0.443664 lstm2.W_all:0.1628 lstm2.lstm_nonlin:0.0549594 lstm2.W_rp:0.0791219 tdnn5.affine:0.340027 tdnn6.affine:0.373739 lstm3.W_all:0.136962 lstm3.lstm_nonlin:0.0408364 lstm3.W_rp:0.0481936 output.affine:0.109637 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:44:19 KST 2020, elapsed time 0 seconds
