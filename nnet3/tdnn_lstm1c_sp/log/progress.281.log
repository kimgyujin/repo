# nnet3-info exp/nnet3/tdnn_lstm1c_sp/281.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/280.mdl exp/nnet3/tdnn_lstm1c_sp/281.mdl 
# Started at Thu Jul 30 11:52:18 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/281.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000218844, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03323, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.009,0.01,0.01 0.02,0.05,0.58,0.72,0.80 0.91,0.97,1.0,1.2), mean=0.49, stddev=0.301], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.22,0.63,0.92,1.3 1.4,1.6,1.6,1.7), mean=0.646, stddev=0.396], bias-{mean,stddev}=0.0003338,0.06176, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.82e+05, self-repaired-proportion=0.237572, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,1e-05,2e-05,3e-05 7e-05,0.0003,0.06,0.10,0.11 0.13,0.15,0.16,0.20), mean=0.0558, stddev=0.0463], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.006,0.01 0.02,0.05,0.43,0.61,0.71 0.81,0.87,0.90,0.99), mean=0.379, stddev=0.265], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.02 0.03,0.08,0.26,0.35,0.41 0.50,0.61,0.66,1.5), mean=0.253, stddev=0.16], oderiv-count=1.23469e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34958.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,5e-06,9e-06,3e-05 6e-05,0.0002,0.06,0.09,0.12 0.13,0.15,0.17,0.21), mean=0.0542, stddev=0.0461], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0002,0.0003 0.0005,0.002,0.10,0.12,0.13 0.14,0.15,0.16,0.16), mean=0.0756, stddev=0.0524]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000218844, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01236, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.38,0.39 0.40,0.43,0.47,0.53,0.57 0.60,0.65,0.67,0.76), mean=0.483, stddev=0.0668], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.007,0.008 0.01,0.03,0.29,0.35,0.38 0.41,0.45,0.53,0.77), mean=0.242, stddev=0.145], bias-{mean,stddev}=-0.02366,0.04074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.25 0.26,0.28,0.31,0.35,0.38 0.41,0.42,0.45,0.54), mean=0.317, stddev=0.0467], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.38,0.40 0.41,0.42,0.45,0.48,0.49 0.51,0.52,0.53,0.55), mean=0.448, stddev=0.0346], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0402, stddev=0.00721], oderiv-count=1.19926e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34199, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.25 0.26,0.28,0.32,0.35,0.38 0.41,0.43,0.46,0.55), mean=0.319, stddev=0.0484], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.46,0.48 0.49,0.52,0.57,0.63,0.66 0.70,0.74,0.75,0.78), mean=0.576, stddev=0.0661]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000218844, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01837, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,7e-06,4e-05 0.001,0.17,0.42,0.62,0.71 0.76,0.82,0.88,1.1), mean=0.401, stddev=0.242], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.42,0.46 0.55,0.73,0.84,0.94,1.0 1.1,1.1,1.2,1.3), mean=0.821, stddev=0.168], bias-{mean,stddev}=0.00247,0.02785, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000218844, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0618, w_fc-rms=0.03092, w_oc-rms=0.04477, count=1.48e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639176, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.42 0.44,0.45,0.47,0.50,0.54 0.70,0.79,0.80,0.85), mean=0.494, stddev=0.0785], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.18 0.19,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0235] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639176, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.44,0.45,0.46 0.47,0.48,0.50,0.53,0.58 0.65,0.76,0.79,0.85), mean=0.519, stddev=0.064], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.17 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0224] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0332571, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.89,-0.85,-0.53 -0.27,-0.13,0.0007,0.17,0.31 0.55,0.85,0.88,0.90), mean=0.0158, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.20,0.23 0.36,0.42,0.55,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.595, stddev=0.223] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639176, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.42,0.45,0.50,0.50 0.50,0.53,0.57,0.72), mean=0.457, stddev=0.0407], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.218, stddev=0.0214] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00639176, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.71,-0.65,-0.34 -0.17,-0.07,0.0004,0.11,0.22 0.34,0.66,0.71,0.75), mean=0.0111, stddev=0.216], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.41,0.44,0.55 0.76,0.82,0.89,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.868, stddev=0.123] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.5509e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000110618, count-zeroing-boundaries=293803
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.238017
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000218844, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04069, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.35,0.37 0.42,0.48,0.89,1.2,1.3 1.4,1.4,1.4,1.5), mean=0.856, stddev=0.358], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.001,0.003 0.01,0.33,0.55,0.75,0.91 1.2,1.6,1.7,2.0), mean=0.551, stddev=0.356], bias-{mean,stddev}=0.01312,0.277, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000218844, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01344, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.22,0.23,0.24 0.26,0.29,0.36,0.44,0.48 0.51,0.54,0.57,0.62), mean=0.366, stddev=0.0835], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.13,0.16,0.29,0.40,0.43 0.46,0.47,0.48,0.52), mean=0.282, stddev=0.121], bias-{mean,stddev}=0.00317,0.01251, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.83e+05, self-repaired-proportion=0.00423977, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.03,0.04 0.05,0.07,0.10,0.12,0.14 0.15,0.17,0.18,0.21), mean=0.098, stddev=0.0335], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.14,0.18,0.23 0.30,0.38,0.51,0.60,0.65 0.68,0.71,0.72,0.81), mean=0.493, stddev=0.135], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.08,0.08 0.08,0.09,0.10,0.13,0.14 0.16,0.20,0.22,0.27), mean=0.11, stddev=0.0284], oderiv-count=1.11053e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31919.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.02,0.03,0.04 0.05,0.07,0.10,0.12,0.14 0.15,0.17,0.18,0.22), mean=0.097, stddev=0.0333], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.08,0.10,0.11 0.12,0.13,0.15,0.17,0.18 0.20,0.21,0.22,0.26), mean=0.151, stddev=0.0281]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000218844, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009188, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.30 0.31,0.32,0.35,0.39,0.42 0.45,0.47,0.49,0.56), mean=0.36, stddev=0.046], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.13,0.13,0.15 0.15,0.17,0.20,0.24,0.26 0.29,0.31,0.34,0.39), mean=0.204, stddev=0.0459], bias-{mean,stddev}=-0.02315,0.01956, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.59e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.23,0.24 0.24,0.26,0.29,0.32,0.34 0.35,0.37,0.37,0.48), mean=0.29, stddev=0.0362], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.38,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.49,0.52), mean=0.434, stddev=0.0286], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.04), mean=0.0331, stddev=0.00281], oderiv-count=1.0225e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29640.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.25,0.26,0.29,0.32,0.34 0.36,0.37,0.39,0.49), mean=0.293, stddev=0.0377], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.47 0.48,0.50,0.55,0.61,0.64 0.69,0.71,0.77,1.1), mean=0.561, stddev=0.0699]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000218844, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01521, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,1e-06,2e-06,5e-06 2e-05,0.0005,0.35,0.55,0.61 0.66,0.71,0.74,0.95), mean=0.298, stddev=0.248], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.35,0.40 0.49,0.62,0.69,0.76,0.81 0.88,0.96,1.0,1.4), mean=0.681, stddev=0.133], bias-{mean,stddev}=0.004551,0.03716, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000218844, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03581, w_fc-rms=0.0152, w_oc-rms=0.03564, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644733, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.45 0.46,0.47,0.50,0.52,0.57 0.61,0.68,0.72,0.80), mean=0.505, stddev=0.053], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0183] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644733, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.46 0.47,0.49,0.50,0.53,0.56 0.60,0.65,0.67,0.74), mean=0.512, stddev=0.0427], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.18,0.19 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0188] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00673739, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.81,-0.71,-0.50 -0.27,-0.12,0.0008,0.16,0.33 0.56,0.73,0.77,0.86), mean=0.0117, stddev=0.277], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.28,0.39 0.45,0.51,0.62,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.707, stddev=0.232] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644733, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.44 0.45,0.46,0.50,0.50,0.52 0.54,0.57,0.58,0.66), mean=0.489, stddev=0.0313], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0196] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644733, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.70,-0.57,-0.44,-0.31 -0.17,-0.08,0.0003,0.10,0.22 0.38,0.48,0.54,0.62), mean=0.00918, stddev=0.184], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.56,0.61,0.72 0.77,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.904, stddev=0.0991] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.16481e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.47363e-05, count-zeroing-boundaries=259095
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.238017
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000218844, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03962, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.45,0.49,0.54 0.57,0.60,0.88,1.1,1.2 1.2,1.3,1.3,1.4), mean=0.866, stddev=0.257], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0008,0.001,0.001 0.003,0.009,0.59,0.83,0.98 1.1,1.3,1.5,1.6), mean=0.495, stddev=0.404], bias-{mean,stddev}=0.002041,0.2212, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000218844, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01298, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.26 0.28,0.30,0.35,0.41,0.45 0.49,0.54,0.55,0.62), mean=0.356, stddev=0.0701], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.38,0.41 0.44,0.45,0.46,0.52), mean=0.281, stddev=0.0939], bias-{mean,stddev}=0.0009294,0.00662, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.95e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.08,0.11,0.12 0.13,0.14,0.15,0.18), mean=0.0812, stddev=0.0312], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.17,0.21 0.26,0.34,0.50,0.59,0.64 0.67,0.69,0.71,0.73), mean=0.474, stddev=0.139], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.09,0.10,0.11,0.13,0.15 0.17,0.19,0.20,0.21), mean=0.116, stddev=0.0243], oderiv-count=1.01178e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27361.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.05,0.08,0.11,0.12 0.13,0.14,0.15,0.17), mean=0.0822, stddev=0.0311], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.08,0.09 0.10,0.11,0.13,0.15,0.16 0.17,0.18,0.19,0.21), mean=0.131, stddev=0.0241]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000218844, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009071, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.20,0.25 0.28,0.31,0.35,0.41,0.43 0.45,0.47,0.48,0.52), mean=0.353, stddev=0.0616], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.16,0.19,0.24,0.27 0.30,0.33,0.36,0.43), mean=0.201, stddev=0.0491], bias-{mean,stddev}=-0.01938,0.02449, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.22e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.19,0.22 0.25,0.27,0.31,0.34,0.35 0.36,0.38,0.39,0.50), mean=0.302, stddev=0.0432], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.37 0.39,0.40,0.42,0.45,0.46 0.47,0.48,0.49,0.53), mean=0.424, stddev=0.0296], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0271, stddev=0.00214], oderiv-count=950560
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25082.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.19,0.22 0.25,0.27,0.31,0.34,0.35 0.37,0.39,0.41,0.58), mean=0.306, stddev=0.0464], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.32,0.33,0.43 0.47,0.53,0.60,0.67,0.71 0.74,0.80,0.84,1.1), mean=0.598, stddev=0.1]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000218844, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02179, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.30,0.32 0.34,0.39,0.52,0.68,0.76 0.81,0.85,0.89,1.2), mean=0.534, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.67,0.69,0.75 0.78,0.82,0.89,1.1,1.3 1.4,1.6,1.8,2.1), mean=0.969, stddev=0.22], bias-{mean,stddev}=0.01766,0.02289, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000218844, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1022, w_fc-rms=0.04925, w_oc-rms=0.06921, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651443, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.57,0.60 0.63,0.66,0.72,0.76,0.79 0.81,0.83,0.85,0.88), mean=0.712, stddev=0.0623], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.14,0.15,0.17,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.17, stddev=0.0227] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651443, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.51,0.55,0.58 0.60,0.63,0.69,0.74,0.78 0.81,0.85,0.86,0.88), mean=0.688, stddev=0.0711], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.173, stddev=0.0232] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0344194, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.86,-0.81,-0.61 -0.44,-0.32,-0.02,0.32,0.43 0.56,0.73,0.84,0.92), mean=-0.00937, stddev=0.361], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.18,0.19,0.22 0.29,0.36,0.44,0.49,0.52 0.54,0.55,0.57,0.60), mean=0.42, stddev=0.0883] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651443, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.50,0.54 0.57,0.59,0.63,0.68,0.70 0.72,0.76,0.78,0.86), mean=0.634, stddev=0.0574], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.178, stddev=0.0175] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00651443, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.72,-0.69,-0.50 -0.38,-0.26,-0.02,0.24,0.34 0.46,0.63,0.70,0.78), mean=-0.00902, stddev=0.297], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.39,0.44 0.51,0.60,0.68,0.72,0.75 0.77,0.78,0.79,0.81), mean=0.652, stddev=0.0939] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.47e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.26962e-06, count-zeroing-boundaries=220301
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.238017
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000218844, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08822, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.5,2.6 2.7,2.8,2.9,3.0), mean=1.92, stddev=0.595], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.99,1.0,1.1 1.1,1.2,1.3,1.6,1.8 2.0,2.1,2.2,2.3), mean=1.4, stddev=0.269], bias-{mean,stddev}=-0.017,0.5847, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000218844, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04421, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.61,0.62 0.64,0.66,0.70,0.74,0.78 0.81,0.87,0.93,2.2), mean=0.708, stddev=0.0868], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.7,2.8,2.8,2.9), mean=1.95, stddev=0.564], bias-{mean,stddev}=6.926e-09,0.02824, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=600960
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/280.mdl exp/nnet3/tdnn_lstm1c_sp/281.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.719 tdnn2.affine:4.56682 lstm1.W_all:3.63925 lstm1.lstm_nonlin:0.0820107 lstm1.W_rp:1.46108 tdnn3.affine:3.19762 tdnn4.affine:3.51155 lstm2.W_all:2.619 lstm2.lstm_nonlin:0.0476728 lstm2.W_rp:1.05684 tdnn5.affine:2.68496 tdnn6.affine:2.91898 lstm3.W_all:2.89826 lstm3.lstm_nonlin:0.0775813 lstm3.W_rp:1.25221 output.affine:3.0757 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.1983 tdnn2.affine:11.1809 lstm1.W_all:21.4029 lstm1.lstm_nonlin:1.87766 lstm1.W_rp:15.6169 tdnn3.affine:8.56648 tdnn4.affine:8.30414 lstm2.W_all:17.767 lstm2.lstm_nonlin:1.20312 lstm2.W_rp:14.9981 tdnn5.affine:8.26699 tdnn6.affine:8.20063 lstm3.W_all:25.3694 lstm3.lstm_nonlin:3.03094 lstm3.W_rp:33.7832 output.affine:32.7279 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.35646 tdnn2.affine:0.404473 lstm1.W_all:0.169566 lstm1.lstm_nonlin:0.0439493 lstm1.W_rp:0.0934018 tdnn3.affine:0.370564 tdnn4.affine:0.420536 lstm2.W_all:0.147176 lstm2.lstm_nonlin:0.0401501 lstm2.W_rp:0.0704793 tdnn5.affine:0.323615 tdnn6.affine:0.353931 lstm3.W_all:0.114084 lstm3.lstm_nonlin:0.025675 lstm3.W_rp:0.037226 output.affine:0.0940937 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:52:18 KST 2020, elapsed time 0 seconds
