# nnet3-info exp/nnet3/tdnn_lstm1c_sp/154.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/153.mdl exp/nnet3/tdnn_lstm1c_sp/154.mdl 
# Started at Thu Jul 30 11:01:57 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/154.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000184662, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02938, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.02 0.03,0.29,0.52,0.60,0.67 0.72,0.79,0.88,1.2), mean=0.459, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.15 0.17,0.21,0.58,0.80,1.1 1.3,1.4,1.5,1.6), mean=0.572, stddev=0.349], bias-{mean,stddev}=0.004844,0.05496, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.22e+06, self-repaired-proportion=0.142466, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,5e-06,1e-05,4e-05 0.0002,0.002,0.06,0.09,0.10 0.11,0.12,0.14,0.19), mean=0.0561, stddev=0.0368], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.002,0.008,0.02 0.05,0.11,0.48,0.63,0.71 0.79,0.84,0.86,0.97), mean=0.432, stddev=0.242], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.07,0.26,0.36,0.45,0.52 0.58,0.68,0.74,1.5), mean=0.351, stddev=0.172], oderiv-count=1.19309e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=42615.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,2e-06,4e-06,3e-05 7e-05,0.001,0.06,0.08,0.10 0.11,0.13,0.14,0.16), mean=0.0533, stddev=0.0369], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,6e-05,0.0001,0.0002 0.0007,0.007,0.09,0.10,0.11 0.12,0.12,0.13,0.14), mean=0.0732, stddev=0.0406]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000184662, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01185, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.40,0.42,0.46,0.50,0.53 0.56,0.59,0.61,0.73), mean=0.465, stddev=0.0532], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.01 0.02,0.16,0.28,0.32,0.34 0.36,0.39,0.41,0.74), mean=0.245, stddev=0.114], bias-{mean,stddev}=-0.002797,0.02722, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.26,0.27 0.28,0.30,0.32,0.36,0.38 0.40,0.42,0.43,0.60), mean=0.329, stddev=0.04], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.42,0.43,0.46,0.48,0.50 0.50,0.51,0.53,0.54), mean=0.459, stddev=0.0275], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.044, stddev=0.00902], oderiv-count=1.1737e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=41694.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.26 0.27,0.29,0.32,0.35,0.38 0.40,0.42,0.44,0.69), mean=0.324, stddev=0.0457], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.47 0.49,0.51,0.57,0.63,0.66 0.69,0.72,0.75,0.99), mean=0.571, stddev=0.0703]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000184662, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01645, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0007,0.003,0.01 0.06,0.19,0.37,0.54,0.63 0.70,0.79,0.84,1.1), mean=0.367, stddev=0.203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.36,0.38,0.43 0.48,0.65,0.76,0.84,0.89 0.94,0.99,1.0,1.4), mean=0.735, stddev=0.151], bias-{mean,stddev}=-0.001494,0.02439, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000184662, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02218, w_fc-rms=0.03446, w_oc-rms=0.04521, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622425, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.43,0.44,0.44 0.45,0.47,0.49,0.52,0.55 0.59,0.64,0.67,0.76), mean=0.498, stddev=0.0482], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0144] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622425, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.39,0.40 0.42,0.44,0.49,0.52,0.58 0.66,0.75,0.78,0.86), mean=0.495, stddev=0.0765], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.18,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0184] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00622425, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.78,-0.74,-0.52 -0.34,-0.19,0.001,0.18,0.34 0.52,0.68,0.80,0.85), mean=0.000489, stddev=0.288], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.31,0.37 0.42,0.48,0.60,0.74,0.97 1.0,1.0,1.0,1.0), mean=0.625, stddev=0.18] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622425, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.45,0.47,0.51,0.52 0.55,0.57,0.58,0.64), mean=0.477, stddev=0.0387], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0138807, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.81,-0.70,-0.48 -0.30,-0.17,0.004,0.16,0.29 0.51,0.65,0.82,0.90), mean=0.000894, stddev=0.273], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.22,0.29,0.48 0.61,0.73,0.83,0.90,0.98 1.0,1.0,1.0,1.0), mean=0.803, stddev=0.154] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=297198
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0107438
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000184662, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03097, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.19 0.21,0.23,0.43,0.99,1.1 1.1,1.1,1.2,1.2), mean=0.604, stddev=0.365], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.02,0.05 0.11,0.32,0.46,0.60,0.68 0.78,0.93,1.0,1.2), mean=0.454, stddev=0.207], bias-{mean,stddev}=-0.0005958,0.07623, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000184662, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01222, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.20,0.20,0.23 0.25,0.27,0.32,0.39,0.43 0.46,0.51,0.54,0.72), mean=0.333, stddev=0.075], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.09,0.17,0.39,0.44 0.47,0.50,0.52,0.56), mean=0.236, stddev=0.149], bias-{mean,stddev}=0.0009918,0.0292, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.00192308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.03,0.04,0.05 0.06,0.08,0.12,0.15,0.16 0.18,0.19,0.20,0.22), mean=0.116, stddev=0.0372], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.14,0.18,0.24 0.29,0.35,0.51,0.60,0.65 0.68,0.71,0.72,0.78), mean=0.484, stddev=0.136], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.07,0.08,0.09,0.10,0.11 0.13,0.14,0.15,0.25), mean=0.0918, stddev=0.0205], oderiv-count=1.2023e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38929.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.02,0.04,0.05 0.06,0.08,0.11,0.14,0.16 0.17,0.19,0.19,0.21), mean=0.109, stddev=0.0373], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.09,0.11,0.13 0.14,0.16,0.18,0.20,0.22 0.23,0.24,0.26,0.29), mean=0.18, stddev=0.0318]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000184662, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008864, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.30 0.31,0.32,0.35,0.37,0.39 0.40,0.42,0.45,0.60), mean=0.348, stddev=0.0372], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.13,0.14,0.15 0.16,0.17,0.20,0.23,0.24 0.26,0.28,0.30,0.41), mean=0.199, stddev=0.0345], bias-{mean,stddev}=-0.01073,0.01642, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.91e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.23,0.25,0.28,0.31,0.32 0.34,0.36,0.38,0.46), mean=0.279, stddev=0.0367], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.37,0.39 0.40,0.41,0.44,0.47,0.48 0.49,0.51,0.52,0.53), mean=0.44, stddev=0.0327], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.04), mean=0.0339, stddev=0.0029], oderiv-count=1.02778e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36164.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.23,0.24,0.27,0.30,0.32 0.33,0.36,0.37,0.47), mean=0.273, stddev=0.0372], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.43,0.45 0.46,0.49,0.53,0.58,0.61 0.64,0.69,0.74,0.94), mean=0.536, stddev=0.0635]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000184662, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01314, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,2e-06,4e-06,1e-05 4e-05,0.0008,0.28,0.47,0.55 0.60,0.64,0.67,1.0), mean=0.255, stddev=0.217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.26,0.30 0.36,0.51,0.62,0.67,0.70 0.73,0.77,0.81,1.3), mean=0.585, stddev=0.13], bias-{mean,stddev}=-0.002118,0.02569, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000184662, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01146, w_fc-rms=0.01429, w_oc-rms=0.01885, count=1.34e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628255, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.45,0.46 0.46,0.47,0.50,0.51,0.53 0.56,0.58,0.60,0.65), mean=0.497, stddev=0.0298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0149] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628255, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.41,0.43 0.44,0.46,0.50,0.50,0.51 0.53,0.58,0.62,0.69), mean=0.486, stddev=0.0366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.21,0.22 0.23,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0114] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00628255, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.62,-0.52,-0.31 -0.22,-0.09,0.0004,0.11,0.21 0.30,0.48,0.58,0.74), mean=0.00301, stddev=0.193], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.43,0.48,0.52 0.56,0.59,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.755, stddev=0.192] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628255, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.42,0.43,0.44 0.45,0.47,0.50,0.50,0.52 0.55,0.57,0.57,0.61), mean=0.491, stddev=0.0296], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0155] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00628255, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.60,-0.47,-0.30 -0.20,-0.10,0.0005,0.12,0.20 0.28,0.42,0.56,0.76), mean=0.00371, stddev=0.185], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.52,0.61,0.72 0.78,0.83,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.894, stddev=0.104] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.81685e-06, count-zeroing-boundaries=261996
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0107438
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000184662, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02806, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.32,0.34 0.35,0.38,0.51,0.83,0.88 0.92,0.95,0.96,1.0), mean=0.601, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0008,0.001,0.001 0.003,0.007,0.46,0.60,0.67 0.76,0.81,0.84,0.96), mean=0.358, stddev=0.277], bias-{mean,stddev}=0.001466,0.1002, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000184662, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0111, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.17,0.20 0.22,0.24,0.29,0.35,0.40 0.46,0.50,0.53,0.56), mean=0.3, stddev=0.0765], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.15,0.22,0.33,0.36 0.38,0.40,0.42,0.46), mean=0.237, stddev=0.0883], bias-{mean,stddev}=0.006449,0.01478, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.45e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.01,0.03 0.04,0.05,0.07,0.10,0.11 0.12,0.13,0.13,0.16), mean=0.075, stddev=0.028], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.18 0.23,0.31,0.45,0.56,0.60 0.63,0.66,0.68,0.74), mean=0.432, stddev=0.138], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.08,0.09,0.10,0.12,0.14 0.16,0.18,0.19,0.26), mean=0.108, stddev=0.0266], oderiv-count=1.0071e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33399.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.009,0.01,0.03 0.04,0.05,0.08,0.10,0.11 0.12,0.13,0.14,0.18), mean=0.075, stddev=0.0295], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.08 0.10,0.11,0.13,0.15,0.16 0.17,0.18,0.19,0.21), mean=0.13, stddev=0.0282]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000184662, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008389, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.26 0.27,0.29,0.32,0.37,0.39 0.41,0.42,0.42,0.52), mean=0.328, stddev=0.0458], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.12,0.13 0.14,0.15,0.18,0.22,0.24 0.27,0.31,0.33,0.39), mean=0.186, stddev=0.0432], bias-{mean,stddev}=-0.01175,0.01838, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.42e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.21 0.23,0.24,0.27,0.30,0.31 0.33,0.35,0.36,0.56), mean=0.272, stddev=0.0382], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.37 0.38,0.39,0.42,0.45,0.46 0.48,0.49,0.49,0.52), mean=0.422, stddev=0.0315], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0277, stddev=0.00259], oderiv-count=914880
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30635.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.23,0.24,0.27,0.30,0.32 0.34,0.35,0.37,0.62), mean=0.272, stddev=0.0415], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.41,0.43 0.45,0.48,0.53,0.61,0.64 0.67,0.70,0.71,1.1), mean=0.543, stddev=0.0765]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000184662, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01913, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.17,0.24 0.31,0.35,0.42,0.60,0.73 0.77,0.81,0.83,1.4), mean=0.461, stddev=0.159], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.58,0.60 0.61,0.64,0.71,1.0,1.3 1.4,1.5,1.5,1.6), mean=0.829, stddev=0.272], bias-{mean,stddev}=0.01323,0.02273, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000184662, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03537, w_fc-rms=0.04622, w_oc-rms=0.06282, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635303, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.49,0.51 0.53,0.55,0.60,0.65,0.68 0.69,0.71,0.72,0.81), mean=0.601, stddev=0.0589], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.18 0.19,0.20,0.20,0.21,0.21 0.21,0.22,0.22,0.22), mean=0.202, stddev=0.01] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635303, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.48,0.49 0.51,0.54,0.58,0.63,0.68 0.72,0.73,0.75,0.86), mean=0.586, stddev=0.0649], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.17,0.18 0.19,0.20,0.20,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.203, stddev=0.0129] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0100273, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.82,-0.67,-0.53 -0.34,-0.22,-0.02,0.20,0.34 0.48,0.74,0.80,0.89), mean=-0.00711, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.24,0.27,0.32 0.36,0.39,0.44,0.47,0.49 0.50,0.51,0.52,0.54), mean=0.429, stddev=0.0567] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635303, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.56,0.58 0.60,0.62,0.66,0.70,0.72 0.74,0.76,0.79,0.94), mean=0.661, stddev=0.0514], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.13,0.14,0.16 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.181, stddev=0.0153] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.017924, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.97,-0.87,-0.71,-0.49 -0.33,-0.20,-0.01,0.17,0.32 0.47,0.79,0.85,0.97), mean=-0.00728, stddev=0.299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.19,0.24,0.34 0.43,0.54,0.63,0.67,0.69 0.71,0.72,0.72,0.73), mean=0.594, stddev=0.115] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222670
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0107438
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000184662, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07116, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.1,1.1 1.1,1.2,1.5,2.0,2.0 2.1,2.1,2.2,2.2), mean=1.58, stddev=0.366], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.49,0.81,0.91 0.96,1.0,1.1,1.3,1.3 1.4,1.4,1.5,1.6), mean=1.14, stddev=0.163], bias-{mean,stddev}=0.007496,0.1848, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000184662, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0395, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.50,0.52,0.54 0.55,0.58,0.62,0.67,0.70 0.74,0.79,0.82,2.1), mean=0.631, stddev=0.0896], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.3,1.4,1.8,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.77, stddev=0.37], bias-{mean,stddev}=5.262e-09,0.03267, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0167, stddev=0.0139], oderiv-count=586240
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/153.mdl exp/nnet3/tdnn_lstm1c_sp/154.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.15796 tdnn2.affine:7.14966 lstm1.W_all:5.86958 lstm1.lstm_nonlin:0.105614 lstm1.W_rp:2.43936 tdnn3.affine:4.53195 tdnn4.affine:5.16851 lstm2.W_all:3.99 lstm2.lstm_nonlin:0.0491463 lstm2.W_rp:1.6267 tdnn5.affine:3.6142 tdnn6.affine:4.22374 lstm3.W_all:5.39742 lstm3.lstm_nonlin:0.12441 lstm3.W_rp:2.12459 output.affine:4.72561 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.6718 tdnn2.affine:10.6897 lstm1.W_all:19.1601 lstm1.lstm_nonlin:1.39138 lstm1.W_rp:11.4526 tdnn3.affine:7.80898 tdnn4.affine:7.99583 lstm2.W_all:15.32 lstm2.lstm_nonlin:0.599318 lstm2.W_rp:10.4418 tdnn5.affine:7.07879 tdnn6.affine:7.57186 lstm3.W_all:22.2781 lstm3.lstm_nonlin:1.95286 lstm3.W_rp:26.3355 output.affine:29.2516 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.611951 tdnn2.affine:0.664228 lstm1.W_all:0.305746 lstm1.lstm_nonlin:0.0748115 lstm1.W_rp:0.214571 tdnn3.affine:0.584587 tdnn4.affine:0.644419 lstm2.W_all:0.26038 lstm2.lstm_nonlin:0.0804259 lstm2.W_rp:0.156111 tdnn5.affine:0.509145 tdnn6.affine:0.557146 lstm3.W_all:0.24234 lstm3.lstm_nonlin:0.0628008 lstm3.W_rp:0.0806995 output.affine:0.161251 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:01:57 KST 2020, elapsed time 0 seconds
