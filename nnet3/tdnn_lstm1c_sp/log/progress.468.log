# nnet3-info exp/nnet3/tdnn_lstm1c_sp/468.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/467.mdl exp/nnet3/tdnn_lstm1c_sp/468.mdl 
# Started at Thu Jul 30 13:06:45 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/468.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=6.68318e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03234, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.007 0.009,0.02,0.57,0.72,0.79 0.86,0.91,0.98,1.3), mean=0.469, stddev=0.306], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.19,0.23,0.70,0.93,1.1 1.3,1.3,1.4,1.4), mean=0.647, stddev=0.353], bias-{mean,stddev}=-0.008049,0.05917, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0.150914, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,2e-05,3e-05,5e-05 7e-05,0.0002,0.04,0.08,0.11 0.12,0.13,0.15,0.20), mean=0.0422, stddev=0.0434], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.03,0.04 0.06,0.08,0.35,0.60,0.70 0.79,0.87,0.91,0.99), mean=0.343, stddev=0.261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.01 0.02,0.05,0.45,0.65,0.78 0.90,1.0,1.1,1.8), mean=0.431, stddev=0.294], oderiv-count=1.24429e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34765.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,2e-05,2e-05,4e-05 9e-05,0.0002,0.04,0.08,0.10 0.12,0.15,0.16,0.20), mean=0.0404, stddev=0.0422], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.0001,0.0001,0.0002 0.0004,0.001,0.07,0.10,0.12 0.13,0.13,0.14,0.15), mean=0.0567, stddev=0.0469]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.68318e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01138, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.33,0.35 0.36,0.39,0.43,0.49,0.54 0.57,0.61,0.63,0.71), mean=0.444, stddev=0.0675], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.005,0.01,0.27,0.33,0.36 0.39,0.42,0.49,0.75), mean=0.216, stddev=0.143], bias-{mean,stddev}=-0.03519,0.03703, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.14e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.18 0.19,0.21,0.24,0.28,0.30 0.31,0.33,0.35,0.42), mean=0.245, stddev=0.0415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.36,0.37,0.39 0.40,0.42,0.44,0.47,0.49 0.51,0.52,0.53,0.57), mean=0.444, stddev=0.0378], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.05,0.06,0.07,0.08 0.08,0.09,0.11,0.11), mean=0.0595, stddev=0.0127], oderiv-count=1.21763e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34005.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.18 0.19,0.21,0.25,0.28,0.30 0.32,0.34,0.37,0.45), mean=0.247, stddev=0.0454], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.31,0.33,0.35 0.37,0.39,0.44,0.50,0.53 0.55,0.58,0.59,0.68), mean=0.446, stddev=0.0627]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.68318e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0173, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,5e-07,1e-06,8e-06 0.0002,0.18,0.39,0.58,0.65 0.72,0.80,0.87,1.1), mean=0.378, stddev=0.227], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.38,0.41 0.47,0.68,0.80,0.89,0.95 1.0,1.1,1.2,1.3), mean=0.77, stddev=0.172], bias-{mean,stddev}=0.0003125,0.02171, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.68318e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04408, w_fc-rms=0.02156, w_oc-rms=0.03871, count=1.52e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640968, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.43 0.44,0.45,0.48,0.50,0.54 0.64,0.71,0.73,0.77), mean=0.49, stddev=0.0614], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0148] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640968, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.43,0.44 0.45,0.47,0.50,0.51,0.55 0.61,0.66,0.70,0.76), mean=0.499, stddev=0.0509], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0128] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00642201, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.81,-0.77,-0.43 -0.28,-0.12,0.0004,0.16,0.27 0.58,0.74,0.80,0.85), mean=0.0135, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.29,0.32,0.35 0.41,0.46,0.58,0.72,1.0 1.0,1.0,1.0,1.0), mean=0.617, stddev=0.2] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640968, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.40 0.41,0.42,0.46,0.50,0.50 0.52,0.55,0.59,0.65), mean=0.462, stddev=0.0419], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0182] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00974389, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.80,-0.76,-0.39 -0.21,-0.12,0.0002,0.13,0.23 0.46,0.67,0.79,0.90), mean=0.0108, stddev=0.254], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.27,0.33,0.45 0.66,0.74,0.84,0.90,1.0 1.0,1.0,1.0,1.0), mean=0.814, stddev=0.153] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.0078e-05, count-zeroing-boundaries=297679
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0280992
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.68318e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03805, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.44,0.45 0.50,0.55,0.82,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.827, stddev=0.261], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0005,0.0008,0.002 0.006,0.39,0.56,0.71,0.86 1.0,1.2,1.3,1.6), mean=0.534, stddev=0.302], bias-{mean,stddev}=0.01089,0.2364, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=6.68318e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01221, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.23,0.24,0.26 0.27,0.29,0.33,0.37,0.41 0.44,0.47,0.48,0.55), mean=0.337, stddev=0.0547], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.16,0.18,0.26,0.35,0.38 0.41,0.43,0.44,0.47), mean=0.265, stddev=0.0864], bias-{mean,stddev}=0.001436,0.01044, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.61e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.02 0.03,0.05,0.08,0.12,0.13 0.15,0.16,0.16,0.19), mean=0.0828, stddev=0.0382], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.12,0.16 0.20,0.28,0.42,0.55,0.60 0.63,0.66,0.69,0.83), mean=0.415, stddev=0.145], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.10,0.11,0.15,0.18 0.21,0.24,0.25,0.28), mean=0.126, stddev=0.0377], oderiv-count=1.03155e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31726.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.02 0.03,0.05,0.08,0.11,0.13 0.15,0.16,0.16,0.18), mean=0.0815, stddev=0.0373], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.08 0.09,0.11,0.14,0.17,0.18 0.19,0.20,0.21,0.23), mean=0.137, stddev=0.0348]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.68318e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008061, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.26,0.27 0.27,0.29,0.31,0.34,0.36 0.38,0.40,0.40,0.43), mean=0.317, stddev=0.0343], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.13,0.13,0.14 0.15,0.15,0.17,0.20,0.22 0.24,0.27,0.29,0.37), mean=0.181, stddev=0.0334], bias-{mean,stddev}=-0.02896,0.01637, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.24,0.27,0.28 0.30,0.31,0.33,0.35), mean=0.239, stddev=0.0334], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.34,0.36,0.37 0.38,0.40,0.42,0.44,0.45 0.47,0.48,0.48,0.51), mean=0.419, stddev=0.0296], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.0385, stddev=0.00294], oderiv-count=1.0433e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29447, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.21,0.24,0.27,0.29 0.30,0.32,0.33,0.40), mean=0.241, stddev=0.0352], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.36,0.37,0.39 0.40,0.42,0.47,0.52,0.54 0.57,0.61,0.63,0.73), mean=0.473, stddev=0.0581]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.68318e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01412, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-06,5e-06,1e-05 5e-05,0.0009,0.32,0.50,0.58 0.63,0.68,0.71,0.84), mean=0.278, stddev=0.228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.30,0.33 0.39,0.58,0.65,0.72,0.76 0.79,0.85,0.89,1.3), mean=0.63, stddev=0.133], bias-{mean,stddev}=0.002351,0.02577, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.68318e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02794, w_fc-rms=0.01403, w_oc-rms=0.03554, count=1.39e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646437, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.46 0.46,0.48,0.50,0.51,0.54 0.57,0.61,0.64,0.70), mean=0.5, stddev=0.036], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0131] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646437, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.45,0.46 0.46,0.47,0.50,0.51,0.53 0.55,0.59,0.61,0.67), mean=0.498, stddev=0.031], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0112] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00646437, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.72,-0.64,-0.35 -0.21,-0.09,0.0002,0.10,0.25 0.41,0.54,0.60,0.73), mean=0.00482, stddev=0.221], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.38,0.42,0.45 0.49,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.724, stddev=0.212] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646437, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.45,0.46,0.50,0.50,0.51 0.52,0.55,0.56,0.73), mean=0.486, stddev=0.0305], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0173] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00646437, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.60,-0.57,-0.31 -0.18,-0.08,6e-05,0.10,0.23 0.38,0.48,0.54,0.72), mean=0.00463, stddev=0.198], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.51,0.56,0.64 0.71,0.78,0.87,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.87, stddev=0.123] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=262533
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0280992
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.68318e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03594, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.52 0.54,0.59,0.78,1.0,1.1 1.1,1.1,1.1,1.3), mean=0.793, stddev=0.207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.004,0.01,0.58,0.76,0.86 0.95,1.1,1.1,1.3), mean=0.462, stddev=0.35], bias-{mean,stddev}=-0.003573,0.1897, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=6.68318e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01137, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.22,0.23 0.25,0.26,0.30,0.36,0.39 0.43,0.45,0.47,0.50), mean=0.312, stddev=0.058], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.14,0.15 0.16,0.18,0.23,0.32,0.35 0.38,0.40,0.42,0.44), mean=0.248, stddev=0.0757], bias-{mean,stddev}=0.001589,0.007608, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.68e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.03,0.04,0.06,0.09,0.10 0.12,0.14,0.15,0.17), mean=0.0643, stddev=0.0298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.15 0.20,0.28,0.39,0.49,0.54 0.57,0.61,0.63,0.67), mean=0.381, stddev=0.126], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.09,0.10,0.12,0.14,0.17 0.20,0.22,0.23,0.26), mean=0.124, stddev=0.0322], oderiv-count=962624
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27167.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.03,0.04,0.06,0.09,0.11 0.12,0.14,0.15,0.16), mean=0.0677, stddev=0.0298], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.07 0.08,0.09,0.12,0.15,0.16 0.17,0.18,0.19,0.21), mean=0.12, stddev=0.0303]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.68318e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008097, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.18,0.23 0.26,0.28,0.31,0.36,0.38 0.40,0.41,0.41,0.44), mean=0.315, stddev=0.0528], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.11,0.12,0.13 0.14,0.15,0.17,0.20,0.23 0.26,0.30,0.33,0.39), mean=0.18, stddev=0.0421], bias-{mean,stddev}=-0.02441,0.02058, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.63e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.18 0.20,0.22,0.25,0.28,0.30 0.30,0.33,0.34,0.36), mean=0.248, stddev=0.039], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.35,0.35,0.36 0.37,0.38,0.41,0.44,0.45 0.47,0.48,0.49,0.50), mean=0.412, stddev=0.0307], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0317, stddev=0.00364], oderiv-count=1.0504e+06
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24888.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.18 0.20,0.22,0.25,0.28,0.30 0.31,0.34,0.35,0.40), mean=0.254, stddev=0.041], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.28,0.35 0.39,0.43,0.50,0.56,0.59 0.62,0.67,0.71,0.83), mean=0.494, stddev=0.0866]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.68318e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02021, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.25 0.27,0.32,0.46,0.67,0.74 0.78,0.82,0.85,0.93), mean=0.487, stddev=0.169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.49,0.55,0.65 0.72,0.75,0.82,1.1,1.3 1.3,1.4,1.5,1.8), mean=0.896, stddev=0.215], bias-{mean,stddev}=0.01421,0.01691, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.68318e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.07502, w_fc-rms=0.03936, w_oc-rms=0.05632, count=1.26e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00653038, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.55,0.56,0.58 0.61,0.63,0.68,0.72,0.74 0.76,0.78,0.79,0.82), mean=0.675, stddev=0.0525], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.16 0.16,0.17,0.19,0.19,0.20 0.20,0.20,0.21,0.21), mean=0.184, stddev=0.014] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00653038, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.52,0.53 0.55,0.57,0.60,0.65,0.71 0.75,0.78,0.79,0.84), mean=0.615, stddev=0.0621], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.16 0.17,0.19,0.20,0.21,0.21 0.22,0.22,0.22,0.22), mean=0.197, stddev=0.0168] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0086739, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.79,-0.71,-0.54 -0.41,-0.28,-0.01,0.26,0.39 0.53,0.65,0.75,0.86), mean=-0.00859, stddev=0.32], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.28 0.31,0.35,0.40,0.44,0.46 0.48,0.49,0.51,0.54), mean=0.394, stddev=0.0578] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00653038, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.51,0.52,0.54 0.56,0.59,0.63,0.67,0.69 0.71,0.75,0.79,0.91), mean=0.631, stddev=0.0537], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.13,0.14,0.14 0.15,0.16,0.18,0.18,0.19 0.19,0.19,0.19,0.20), mean=0.174, stddev=0.0146] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0240322, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.83,-0.74,-0.60 -0.40,-0.27,-0.02,0.24,0.36 0.53,0.70,0.77,0.89), mean=-0.0115, stddev=0.324], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.21,0.28 0.36,0.44,0.54,0.59,0.62 0.64,0.65,0.66,0.69), mean=0.514, stddev=0.104] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.34747e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223247
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0280992
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.68318e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08537, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.0,1.1,1.1 1.1,1.2,1.7,2.5,2.6 2.6,2.7,2.8,3.0), mean=1.85, stddev=0.603], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,1.0,1.1,1.1 1.2,1.2,1.3,1.5,1.6 1.8,1.8,1.9,2.0), mean=1.36, stddev=0.202], bias-{mean,stddev}=-0.03852,0.3953, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=6.68318e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04044, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.55,0.57 0.58,0.60,0.64,0.68,0.71 0.74,0.78,0.84,2.2), mean=0.647, stddev=0.0832], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.97,1.0,1.0 1.1,1.2,1.6,2.4,2.4 2.5,2.5,2.6,2.6), mean=1.76, stddev=0.574], bias-{mean,stddev}=2.875e-09,0.0258, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.42), mean=0.0168, stddev=0.0138], oderiv-count=596480
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/467.mdl exp/nnet3/tdnn_lstm1c_sp/468.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.6682 tdnn2.affine:2.41483 lstm1.W_all:1.80346 lstm1.lstm_nonlin:0.0367889 lstm1.W_rp:0.821799 tdnn3.affine:1.64999 tdnn4.affine:1.68372 lstm2.W_all:1.21526 lstm2.lstm_nonlin:0.0204488 lstm2.W_rp:0.558769 tdnn5.affine:1.38315 tdnn6.affine:1.50239 lstm3.W_all:1.75256 lstm3.lstm_nonlin:0.041341 lstm3.W_rp:0.610456 output.affine:1.31826 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8438 tdnn2.affine:10.316 lstm1.W_all:20.1389 lstm1.lstm_nonlin:1.42532 lstm1.W_rp:14.5004 tdnn3.affine:7.77888 tdnn4.affine:7.30022 lstm2.W_all:16.4552 lstm2.lstm_nonlin:1.0795 lstm2.W_rp:13.5632 tdnn5.affine:7.24545 tdnn6.affine:7.32867 lstm3.W_all:23.5198 lstm3.lstm_nonlin:2.31976 lstm3.W_rp:32.0379 output.affine:29.9341 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.208041 tdnn2.affine:0.234324 lstm1.W_all:0.0895811 lstm1.lstm_nonlin:0.0257184 lstm1.W_rp:0.0566361 tdnn3.affine:0.212179 tdnn4.affine:0.23061 lstm2.W_all:0.0738381 lstm2.lstm_nonlin:0.0188873 lstm2.W_rp:0.0411695 tdnn5.affine:0.1909 tdnn6.affine:0.204906 lstm3.W_all:0.0744688 lstm3.lstm_nonlin:0.0176947 lstm3.W_rp:0.0190315 output.affine:0.0440117 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 13:06:45 KST 2020, elapsed time 0 seconds
