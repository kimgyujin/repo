# nnet3-info exp/nnet3/tdnn_lstm1c_sp/293.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/292.mdl exp/nnet3/tdnn_lstm1c_sp/293.mdl 
# Started at Thu Jul 30 11:57:01 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/293.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000202804, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03207, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.008,0.01 0.02,0.03,0.56,0.70,0.77 0.88,0.93,0.99,1.2), mean=0.471, stddev=0.294], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.17,0.21,0.63,0.89,1.2 1.4,1.5,1.5,1.6), mean=0.625, stddev=0.38], bias-{mean,stddev}=-0.000386,0.05961, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0.1881, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,9e-06,3e-05,4e-05 8e-05,0.0003,0.06,0.09,0.11 0.13,0.14,0.15,0.22), mean=0.0532, stddev=0.0449], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.01,0.01,0.02 0.04,0.06,0.42,0.60,0.71 0.81,0.87,0.90,1.0), mean=0.379, stddev=0.26], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.02,0.06,0.27,0.36,0.42 0.49,0.64,0.72,1.4), mean=0.258, stddev=0.167], oderiv-count=1.11872e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32631.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,8e-06,1e-05,3e-05 8e-05,0.0003,0.05,0.09,0.11 0.13,0.15,0.15,0.21), mean=0.0502, stddev=0.0437], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0001,0.0002,0.0003 0.0005,0.002,0.09,0.11,0.13 0.14,0.14,0.15,0.16), mean=0.071, stddev=0.0495]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000202804, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01198, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.38 0.39,0.41,0.46,0.52,0.56 0.59,0.63,0.64,0.73), mean=0.468, stddev=0.0658], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.006 0.009,0.02,0.29,0.34,0.37 0.40,0.45,0.53,0.71), mean=0.233, stddev=0.143], bias-{mean,stddev}=-0.02561,0.0395, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.32e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.22,0.24 0.25,0.26,0.30,0.33,0.35 0.38,0.40,0.45,0.52), mean=0.3, stddev=0.044], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.38,0.39 0.41,0.42,0.45,0.47,0.49 0.51,0.53,0.53,0.54), mean=0.448, stddev=0.0354], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.07,0.07), mean=0.0424, stddev=0.00742], oderiv-count=1.1607e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31909.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.24 0.25,0.27,0.29,0.33,0.36 0.38,0.41,0.45,0.50), mean=0.3, stddev=0.0456], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.42,0.43,0.46 0.47,0.49,0.54,0.59,0.62 0.65,0.69,0.70,0.81), mean=0.544, stddev=0.0592]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000202804, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01805, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-06,5e-06,3e-05 0.0009,0.16,0.43,0.61,0.69 0.74,0.80,0.85,1.1), mean=0.395, stddev=0.237], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.40,0.46 0.53,0.72,0.83,0.92,0.99 1.0,1.1,1.1,1.3), mean=0.807, stddev=0.164], bias-{mean,stddev}=0.003195,0.02841, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000202804, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06952, w_fc-rms=0.03219, w_oc-rms=0.04611, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632671, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.71,0.79,0.81,0.86), mean=0.495, stddev=0.0796], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.0233] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632671, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.44,0.46,0.47 0.48,0.49,0.50,0.54,0.59 0.67,0.78,0.80,0.86), mean=0.526, stddev=0.0654], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.18 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0235] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.034482, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.89,-0.87,-0.51 -0.27,-0.12,0.001,0.15,0.33 0.56,0.87,0.89,0.91), mean=0.0173, stddev=0.305], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.20,0.24 0.36,0.44,0.57,0.75,1.0 1.0,1.0,1.0,1.0), mean=0.603, stddev=0.221] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632671, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.43,0.45,0.50,0.50 0.51,0.54,0.58,0.74), mean=0.46, stddev=0.041], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.219, stddev=0.021] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00632671, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.67,-0.62,-0.33 -0.15,-0.07,0.0003,0.09,0.21 0.34,0.62,0.69,0.74), mean=0.0116, stddev=0.21], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.44,0.47,0.57 0.78,0.84,0.90,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.878, stddev=0.116] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=8.82199e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000198428, count-zeroing-boundaries=297337
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.271074
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000202804, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04044, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.36,0.40 0.43,0.51,0.87,1.2,1.3 1.3,1.4,1.4,1.5), mean=0.857, stddev=0.34], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.001,0.001,0.003 0.01,0.32,0.54,0.74,0.91 1.2,1.6,1.7,2.0), mean=0.548, stddev=0.354], bias-{mean,stddev}=0.01315,0.2719, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000202804, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01345, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.22,0.23,0.25 0.27,0.30,0.36,0.44,0.47 0.50,0.54,0.57,0.63), mean=0.367, stddev=0.0813], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.13 0.14,0.16,0.28,0.40,0.43 0.45,0.47,0.48,0.52), mean=0.284, stddev=0.116], bias-{mean,stddev}=0.002126,0.01073, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.09e+06, self-repaired-proportion=0.00289474, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.02,0.03 0.04,0.06,0.09,0.11,0.13 0.14,0.15,0.16,0.18), mean=0.0878, stddev=0.0314], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.12,0.17,0.22 0.27,0.39,0.53,0.61,0.66 0.68,0.71,0.72,0.84), mean=0.496, stddev=0.141], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.09,0.09,0.09 0.10,0.10,0.12,0.14,0.17 0.20,0.23,0.25,0.30), mean=0.125, stddev=0.0343], oderiv-count=1.14221e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29744.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.01,0.03,0.03 0.05,0.06,0.09,0.11,0.13 0.14,0.15,0.16,0.18), mean=0.0871, stddev=0.0306], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.07,0.08,0.10 0.11,0.12,0.13,0.15,0.17 0.17,0.19,0.19,0.22), mean=0.133, stddev=0.026]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000202804, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00894, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.28,0.29 0.30,0.31,0.34,0.38,0.41 0.44,0.46,0.47,0.55), mean=0.35, stddev=0.0451], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.12,0.13,0.14 0.15,0.16,0.19,0.24,0.26 0.28,0.31,0.33,0.39), mean=0.199, stddev=0.0458], bias-{mean,stddev}=-0.02312,0.02009, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.44e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.24,0.25,0.27,0.31,0.32 0.34,0.35,0.36,0.47), mean=0.277, stddev=0.0347], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.38,0.39 0.40,0.41,0.44,0.46,0.47 0.48,0.49,0.50,0.52), mean=0.435, stddev=0.0281], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0347, stddev=0.00304], oderiv-count=1.14634e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27579.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.24,0.25,0.28,0.31,0.32 0.34,0.35,0.37,0.48), mean=0.28, stddev=0.0355], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.42,0.43,0.45 0.46,0.48,0.52,0.58,0.62 0.66,0.70,0.72,1.0), mean=0.534, stddev=0.0689]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000202804, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01501, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-06,3e-06,7e-06 3e-05,0.0006,0.34,0.54,0.60 0.65,0.70,0.73,0.90), mean=0.295, stddev=0.244], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.31,0.34,0.39 0.49,0.61,0.68,0.75,0.80 0.86,0.95,1.0,1.4), mean=0.671, stddev=0.133], bias-{mean,stddev}=0.005674,0.03594, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000202804, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04273, w_fc-rms=0.01662, w_oc-rms=0.03716, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638048, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.50,0.52,0.57 0.61,0.68,0.72,0.80), mean=0.506, stddev=0.0531], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0183] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638048, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.46,0.47 0.49,0.50,0.50,0.54,0.58 0.62,0.67,0.68,0.75), mean=0.519, stddev=0.0455], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.18,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.02] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00833429, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.83,-0.74,-0.49 -0.27,-0.12,0.001,0.15,0.33 0.57,0.74,0.76,0.85), mean=0.0121, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.28,0.39 0.45,0.52,0.63,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.71, stddev=0.23] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638048, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.44 0.46,0.47,0.50,0.50,0.52 0.54,0.57,0.59,0.61), mean=0.492, stddev=0.0291], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0192] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00638048, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.68,-0.58,-0.44,-0.30 -0.17,-0.07,0.0003,0.09,0.20 0.36,0.47,0.53,0.61), mean=0.00862, stddev=0.179], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.58,0.63,0.73 0.78,0.85,0.92,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.909, stddev=0.0943] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.4524e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=8.96088e-05, count-zeroing-boundaries=262251
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.271074
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000202804, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03936, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.45,0.49,0.53 0.57,0.60,0.87,1.1,1.2 1.2,1.3,1.3,1.4), mean=0.862, stddev=0.252], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.001,0.002 0.003,0.01,0.57,0.83,0.96 1.1,1.3,1.5,1.7), mean=0.492, stddev=0.401], bias-{mean,stddev}=0.002357,0.2188, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000202804, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01294, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.25,0.26 0.28,0.30,0.34,0.40,0.45 0.49,0.53,0.54,0.63), mean=0.355, stddev=0.0681], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.38,0.41 0.43,0.45,0.46,0.51), mean=0.28, stddev=0.0923], bias-{mean,stddev}=0.0007176,0.006274, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.35e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.05,0.07,0.10,0.11 0.12,0.13,0.13,0.17), mean=0.0723, stddev=0.0285], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.15,0.20 0.25,0.34,0.51,0.60,0.64 0.67,0.70,0.72,0.75), mean=0.477, stddev=0.144], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.10 0.11,0.11,0.13,0.15,0.17 0.20,0.21,0.23,0.27), mean=0.134, stddev=0.0285], oderiv-count=954176
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25414.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.05,0.07,0.10,0.11 0.12,0.13,0.13,0.18), mean=0.0743, stddev=0.0285], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.09,0.10,0.12,0.14,0.15 0.15,0.16,0.17,0.20), mean=0.117, stddev=0.0228]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000202804, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008823, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.18,0.24 0.27,0.30,0.34,0.39,0.42 0.44,0.46,0.48,0.51), mean=0.343, stddev=0.061], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.16,0.18,0.23,0.26 0.29,0.32,0.34,0.42), mean=0.195, stddev=0.0477], bias-{mean,stddev}=-0.01787,0.02488, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.38e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.19,0.21 0.24,0.26,0.29,0.32,0.34 0.35,0.36,0.38,0.47), mean=0.288, stddev=0.0424], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.36,0.37 0.39,0.40,0.43,0.45,0.47 0.47,0.49,0.49,0.53), mean=0.426, stddev=0.032], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.0285, stddev=0.00248], oderiv-count=950080
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23249.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.19,0.21 0.24,0.26,0.30,0.33,0.34 0.36,0.38,0.40,0.55), mean=0.294, stddev=0.0468], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.32,0.39 0.45,0.50,0.57,0.64,0.69 0.73,0.76,0.79,1.3), mean=0.57, stddev=0.106]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000202804, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02139, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.29,0.29,0.31 0.33,0.38,0.51,0.66,0.74 0.79,0.85,0.89,1.1), mean=0.524, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.68,0.69,0.75 0.78,0.82,0.89,1.1,1.2 1.3,1.5,1.7,2.0), mean=0.956, stddev=0.195], bias-{mean,stddev}=0.01573,0.02097, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000202804, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1032, w_fc-rms=0.04834, w_oc-rms=0.07274, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644537, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.57,0.59,0.62 0.64,0.67,0.72,0.78,0.80 0.83,0.85,0.87,0.89), mean=0.723, stddev=0.0626], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.15,0.17,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.167, stddev=0.0243] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644537, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.49,0.56,0.59 0.61,0.65,0.70,0.75,0.79 0.82,0.86,0.87,0.89), mean=0.7, stddev=0.071], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.12 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.22), mean=0.169, stddev=0.0245] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0355236, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.86,-0.81,-0.62 -0.44,-0.33,-0.0006,0.31,0.47 0.57,0.77,0.86,0.92), mean=-0.00841, stddev=0.366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.19,0.23 0.29,0.36,0.45,0.51,0.54 0.55,0.58,0.59,0.62), mean=0.433, stddev=0.0967] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644537, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.51,0.54 0.56,0.60,0.65,0.68,0.71 0.73,0.77,0.81,0.87), mean=0.642, stddev=0.0609], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0182] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644537, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.71,-0.66,-0.50 -0.36,-0.26,0.007,0.24,0.35 0.44,0.65,0.68,0.77), mean=-0.00785, stddev=0.293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.41,0.46 0.53,0.61,0.69,0.74,0.77 0.79,0.80,0.81,0.84), mean=0.672, stddev=0.0938] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223019
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.271074
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000202804, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0899, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.6,2.7 2.7,2.8,2.9,3.1), mean=1.96, stddev=0.613], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.94,1.0,1.1 1.1,1.2,1.4,1.6,1.9 2.0,2.2,2.2,2.3), mean=1.42, stddev=0.285], bias-{mean,stddev}=-0.00555,0.6491, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000202804, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04431, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.61,0.62 0.64,0.66,0.70,0.75,0.78 0.81,0.86,0.94,2.1), mean=0.709, stddev=0.0849], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.3,1.3,1.8,2.5,2.6 2.7,2.8,2.8,2.9), mean=1.95, stddev=0.575], bias-{mean,stddev}=6.388e-09,0.026, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=591680
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/292.mdl exp/nnet3/tdnn_lstm1c_sp/293.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.35899 tdnn2.affine:4.3119 lstm1.W_all:3.37214 lstm1.lstm_nonlin:0.0727371 lstm1.W_rp:1.38449 tdnn3.affine:3.10356 tdnn4.affine:3.31224 lstm2.W_all:2.45625 lstm2.lstm_nonlin:0.0431218 lstm2.W_rp:0.967976 tdnn5.affine:2.6033 tdnn6.affine:2.74938 lstm3.W_all:2.58269 lstm3.lstm_nonlin:0.0666653 lstm3.W_rp:1.09614 output.affine:2.81548 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.7375 tdnn2.affine:10.8402 lstm1.W_all:21.0325 lstm1.lstm_nonlin:2.03897 lstm1.W_rp:15.5047 tdnn3.affine:8.57005 tdnn4.affine:8.08259 lstm2.W_all:17.5276 lstm2.lstm_nonlin:1.34577 lstm2.W_rp:14.8973 tdnn5.affine:8.23973 tdnn6.affine:7.97747 lstm3.W_all:24.9029 lstm3.lstm_nonlin:3.08228 lstm3.W_rp:34.6733 output.affine:32.7946 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.341335 tdnn2.affine:0.396463 lstm1.W_all:0.160071 lstm1.lstm_nonlin:0.0358768 lstm1.W_rp:0.0891885 tdnn3.affine:0.3614 tdnn4.affine:0.408438 lstm2.W_all:0.139951 lstm2.lstm_nonlin:0.0323282 lstm2.W_rp:0.06489 tdnn5.affine:0.314721 tdnn6.affine:0.342956 lstm3.W_all:0.103596 lstm3.lstm_nonlin:0.0216033 lstm3.W_rp:0.0317143 output.affine:0.0859487 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:57:02 KST 2020, elapsed time 1 seconds
