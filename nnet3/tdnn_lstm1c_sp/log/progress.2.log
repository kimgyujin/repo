# nnet3-info exp/nnet3/tdnn_lstm1c_sp/2.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/1.mdl exp/nnet3/tdnn_lstm1c_sp/2.mdl 
# Started at Thu Jul 30 10:02:00 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/2.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00029905, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02924, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.27,0.28,0.28 0.29,0.30,0.50,0.61,0.68 0.74,0.82,0.87,1.2), mean=0.48, stddev=0.161], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.37,0.38,0.39 0.40,0.41,0.58,0.74,0.89 1.2,1.3,1.4,1.5), mean=0.62, stddev=0.245], bias-{mean,stddev}=0.002978,0.3076, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.42e+05, self-repaired-proportion=0.648397, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,4e-07,0.10,0.34,0.53 0.69,0.86,0.97,1.3), mean=0.187, stddev=0.241], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,1e-05,0.56,0.98,1.0 1.0,1.0,1.0,1.0), mean=0.502, stddev=0.426], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.14,0.16 0.17,0.19,0.30,0.36,0.43 0.54,0.61,0.73,1.0), mean=0.301, stddev=0.125], oderiv-count=1.21664e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40481.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,4e-08,0.09,0.25,0.39 0.52,0.63,0.71,0.96), mean=0.144, stddev=0.176], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,2e-05,0.12,0.13,0.15 0.15,0.16,0.16,0.20), mean=0.0821, stddev=0.0625]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00029905, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01349, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.46,0.46,0.47 0.48,0.50,0.53,0.57,0.59 0.61,0.63,0.64,0.71), mean=0.531, stddev=0.043], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.16 0.17,0.17,0.30,0.38,0.43 0.46,0.49,0.51,0.57), mean=0.291, stddev=0.101], bias-{mean,stddev}=0.01334,0.321, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.86e+05, self-repaired-proportion=0.0130769, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.03,0.06,0.10 0.14,0.21,0.36,0.57,0.71 0.84,0.93,0.99,1.1), mean=0.397, stddev=0.221], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.06,0.12,0.17 0.22,0.31,0.50,0.69,0.77 0.82,0.86,0.88,0.92), mean=0.497, stddev=0.201], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.04,0.05 0.06,0.07,0.09,0.52), mean=0.0388, stddev=0.0302], oderiv-count=1.16288e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39642, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,0.05,0.09,0.13 0.17,0.24,0.36,0.50,0.60 0.67,0.74,0.78,0.91), mean=0.372, stddev=0.162], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.23,0.31,0.36 0.43,0.49,0.57,0.63,0.67 0.69,0.71,0.73,0.78), mean=0.555, stddev=0.0998]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00029905, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03157, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.74,0.74,0.75 0.76,0.77,0.80,0.83,0.86 0.88,0.92,0.95,1.1), mean=0.804, stddev=0.0417], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.4 1.4,1.4,1.4,1.5,1.5 1.5,1.5,1.5,1.5), mean=1.44, stddev=0.034], bias-{mean,stddev}=0.003525,0.7718, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00029905, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.8037, w_fc-rms=0.7763, w_oc-rms=0.764, count=1.42e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0108801, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.15,0.18,0.21 0.27,0.34,0.52,0.67,0.77 0.82,0.88,0.89,0.97), mean=0.513, stddev=0.182], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.09,0.11 0.14,0.16,0.20,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.187, stddev=0.0349] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0146543, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.12,0.20 0.26,0.34,0.49,0.66,0.76 0.82,0.88,0.92,0.95), mean=0.499, stddev=0.186], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.07,0.10 0.13,0.16,0.20,0.22,0.22 0.22,0.23,0.23,0.23), mean=0.188, stddev=0.0387] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0568925, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.97,-0.90,-0.88,-0.76 -0.65,-0.48,0.02,0.53,0.71 0.79,0.86,0.90,0.97), mean=0.0209, stddev=0.491], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.13,0.15,0.21 0.28,0.37,0.49,0.61,0.66 0.69,0.72,0.73,0.75), mean=0.483, stddev=0.143] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00882563, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.13,0.16,0.20 0.28,0.34,0.50,0.66,0.74 0.81,0.85,0.87,0.92), mean=0.501, stddev=0.178], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.08,0.09,0.11 0.14,0.16,0.20,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.186, stddev=0.0338] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0300348, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.87,-0.80,-0.66 -0.48,-0.33,0.01,0.36,0.53 0.65,0.81,0.83,0.94), mean=0.0152, stddev=0.391], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.19,0.29 0.44,0.58,0.76,0.87,0.92 0.95,0.97,0.98,0.99), mean=0.715, stddev=0.191] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=297099
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00029905, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03925, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.81,0.82,0.83 0.84,0.86,0.89,0.92,0.94 0.96,0.98,0.99,1.0), mean=0.894, stddev=0.0399], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.52,0.54,0.55 0.56,0.58,0.62,0.68,0.71 0.73,0.77,0.79,0.88), mean=0.63, stddev=0.059], bias-{mean,stddev}=0.0757,0.7891, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00029905, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01917, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.28,0.29,0.29 0.30,0.33,0.55,0.62,0.66 0.70,0.73,0.76,0.83), mean=0.519, stddev=0.131], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.37,0.38 0.39,0.40,0.43,0.47,0.49 0.51,0.54,0.55,0.59), mean=0.435, stddev=0.0407], bias-{mean,stddev}=0.0004088,0.3024, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.58e+05, self-repaired-proportion=0.324891, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 7e-07,0.0003,0.33,0.64,0.79 0.88,1.1,1.1,1.4), mean=0.353, stddev=0.313], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 4e-05,0.003,0.45,0.79,0.88 0.92,0.94,0.96,0.99), mean=0.434, stddev=0.336], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.23,0.25 0.26,0.28,0.29,0.42), mean=0.0995, stddev=0.0946], oderiv-count=1.10272e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37123, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 3e-07,4e-05,0.33,0.57,0.67 0.74,0.82,0.84,0.93), mean=0.321, stddev=0.26], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 7e-05,0.002,0.47,0.55,0.59 0.63,0.66,0.69,0.79), mean=0.368, stddev=0.227]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00029905, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01217, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.39,0.40,0.42 0.44,0.45,0.48,0.51,0.52 0.54,0.56,0.56,0.59), mean=0.479, stddev=0.0362], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.16,0.17 0.17,0.19,0.28,0.32,0.35 0.37,0.39,0.40,0.49), mean=0.27, stddev=0.0627], bias-{mean,stddev}=-0.01653,0.2907, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.92e+05, self-repaired-proportion=0.0157736, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,0.04,0.07,0.11 0.15,0.20,0.35,0.54,0.64 0.75,0.91,1.0,1.1), mean=0.379, stddev=0.204], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.06,0.12,0.17 0.22,0.28,0.45,0.62,0.70 0.76,0.82,0.85,0.90), mean=0.452, stddev=0.183], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.04 0.04,0.07,0.12,0.37), mean=0.0296, stddev=0.0261], oderiv-count=1.03859e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34604, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,0.08,0.11,0.15 0.17,0.23,0.34,0.48,0.55 0.62,0.74,0.78,0.86), mean=0.359, stddev=0.151], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.27,0.32,0.40 0.45,0.50,0.58,0.66,0.69 0.73,0.76,0.78,0.84), mean=0.575, stddev=0.105]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00029905, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03119, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.70,0.73,0.74,0.75 0.76,0.77,0.79,0.82,0.84 0.86,0.88,0.89,0.93), mean=0.795, stddev=0.032], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.4 1.4,1.4,1.4,1.4,1.5 1.5,1.5,1.5,1.5), mean=1.42, stddev=0.0269], bias-{mean,stddev}=0.02533,0.7754, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00029905, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.8279, w_fc-rms=0.7939, w_oc-rms=0.7978, count=1.3e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0164208, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.19,0.23 0.27,0.36,0.52,0.70,0.77 0.83,0.90,0.92,0.96), mean=0.526, stddev=0.184], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.07,0.11 0.14,0.16,0.20,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.185, stddev=0.0367] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.024041, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.15,0.18,0.24 0.30,0.36,0.49,0.66,0.76 0.85,0.92,0.95,0.98), mean=0.514, stddev=0.181], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.06,0.09 0.13,0.17,0.20,0.22,0.22 0.22,0.23,0.23,0.23), mean=0.187, stddev=0.0406] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.052902, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.98,-0.92,-0.87,-0.78 -0.67,-0.47,0.03,0.49,0.69 0.81,0.87,0.90,0.96), mean=0.0109, stddev=0.49], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.09,0.13,0.22 0.28,0.35,0.49,0.59,0.64 0.67,0.70,0.72,0.75), mean=0.472, stddev=0.139] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0159333, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.15,0.19 0.24,0.34,0.51,0.69,0.78 0.83,0.88,0.90,0.99), mean=0.512, stddev=0.194], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.07,0.10 0.12,0.15,0.19,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.181, stddev=0.0386] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0485779, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.89,-0.85,-0.65 -0.52,-0.33,0.01,0.35,0.55 0.68,0.82,0.86,0.98), mean=0.00832, stddev=0.4], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.16,0.22 0.43,0.55,0.72,0.86,0.91 0.94,0.96,0.97,0.99), mean=0.689, stddev=0.199] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=262005
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00029905, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03833, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.80,0.80,0.81 0.82,0.84,0.87,0.91,0.92 0.94,0.95,0.97,0.99), mean=0.873, stddev=0.0387], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.53,0.53,0.54 0.56,0.57,0.60,0.66,0.69 0.73,0.76,0.77,0.88), mean=0.616, stddev=0.0557], bias-{mean,stddev}=-0.02922,0.772, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00029905, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01751, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.29,0.31,0.50,0.57,0.61 0.64,0.66,0.68,0.81), mean=0.475, stddev=0.117], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.33,0.34 0.35,0.36,0.39,0.43,0.45 0.47,0.50,0.51,0.58), mean=0.397, stddev=0.0391], bias-{mean,stddev}=0.008594,0.2955, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.04e+05, self-repaired-proportion=0.335061, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 4e-07,7e-05,0.35,0.70,0.83 0.97,1.1,1.2,1.5), mean=0.379, stddev=0.338], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 2e-05,0.001,0.45,0.77,0.86 0.90,0.92,0.94,0.99), mean=0.423, stddev=0.332], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.20,0.22 0.22,0.25,0.25,0.31), mean=0.0897, stddev=0.0847], oderiv-count=1.0697e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32084.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 4e-08,8e-06,0.35,0.61,0.74 0.81,0.87,0.94,0.99), mean=0.343, stddev=0.282], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 2e-05,0.0006,0.52,0.61,0.65 0.69,0.73,0.75,0.81), mean=0.4, stddev=0.258]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00029905, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0118, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.38,0.40 0.43,0.44,0.46,0.49,0.51 0.52,0.54,0.54,0.60), mean=0.464, stddev=0.0362], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.16,0.16,0.17 0.17,0.18,0.27,0.31,0.34 0.36,0.40,0.41,0.55), mean=0.261, stddev=0.0643], bias-{mean,stddev}=0.007653,0.302, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.65e+05, self-repaired-proportion=0.0282933, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.001,0.03,0.10 0.16,0.23,0.38,0.57,0.68 0.80,0.92,1.0,1.4), mean=0.405, stddev=0.215], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.005,0.05,0.14 0.19,0.29,0.45,0.61,0.70 0.77,0.81,0.85,0.92), mean=0.45, stddev=0.188], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.04,0.22,0.25,0.31), mean=0.0299, stddev=0.0397], oderiv-count=990080
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29565.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,0.007,0.08,0.12 0.19,0.25,0.37,0.50,0.59 0.67,0.77,0.81,1.0), mean=0.383, stddev=0.163], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.06,0.28,0.41 0.49,0.55,0.62,0.69,0.73 0.76,0.80,0.83,0.87), mean=0.61, stddev=0.118]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00029905, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03173, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.71,0.74,0.74,0.75 0.76,0.78,0.80,0.84,0.86 0.88,0.91,0.93,1.0), mean=0.808, stddev=0.0404], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.4 1.4,1.4,1.4,1.5,1.5 1.5,1.5,1.5,1.6), mean=1.45, stddev=0.03], bias-{mean,stddev}=-0.002641,0.7731, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00029905, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.736, w_fc-rms=0.7594, w_oc-rms=0.7945, count=1.18e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00792757, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.20,0.26 0.33,0.40,0.55,0.70,0.76 0.81,0.87,0.88,0.92), mean=0.548, stddev=0.166], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.09,0.12 0.14,0.15,0.18,0.20,0.21 0.21,0.22,0.22,0.23), mean=0.176, stddev=0.0302] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.014918, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.16,0.19,0.24 0.30,0.39,0.55,0.70,0.77 0.82,0.90,0.92,0.95), mean=0.542, stddev=0.177], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.10 0.14,0.16,0.19,0.20,0.21 0.21,0.22,0.22,0.23), mean=0.179, stddev=0.0351] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0646161, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.94,-0.89,-0.79 -0.65,-0.43,0.0008,0.40,0.61 0.76,0.85,0.89,0.93), mean=-0.00534, stddev=0.458], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.11,0.14,0.19 0.25,0.33,0.46,0.54,0.58 0.61,0.63,0.65,0.76), mean=0.435, stddev=0.123] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00955048, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.15,0.18,0.27 0.33,0.41,0.57,0.72,0.79 0.85,0.88,0.90,0.96), mean=0.565, stddev=0.176], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.09,0.10 0.12,0.14,0.17,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.164, stddev=0.0309] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0367421, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.94,-0.89,-0.83,-0.64 -0.47,-0.31,0.007,0.29,0.46 0.59,0.75,0.84,0.97), mean=-0.00383, stddev=0.368], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.14,0.18,0.28 0.41,0.51,0.67,0.80,0.87 0.90,0.94,0.95,0.98), mean=0.646, stddev=0.179] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222788
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00029905, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.05833, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.2,1.2,1.3,1.4,1.4 1.5,1.5,1.6,1.7), mean=1.33, stddev=0.0914], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.56,0.60 0.66,0.76,0.91,1.1,1.2 1.2,1.3,1.3,1.7), mean=0.921, stddev=0.19], bias-{mean,stddev}=0.07181,0.7252, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00029905, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03388, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.31,0.35,0.39 0.42,0.45,0.52,0.60,0.66 0.72,0.81,0.92,1.9), mean=0.532, stddev=0.123], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.3 1.3,1.4,1.5,1.7,1.8 1.8,1.9,1.9,2.1), mean=1.55, stddev=0.167], bias-{mean,stddev}=7.472e-10,0.004034, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0168, stddev=0.0137], oderiv-count=625280
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/1.mdl exp/nnet3/tdnn_lstm1c_sp/2.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:11.3858 tdnn2.affine:12.2262 lstm1.W_all:10.5562 lstm1.lstm_nonlin:4.00651 lstm1.W_rp:6.11175 tdnn3.affine:11.577 tdnn4.affine:11.0533 lstm2.W_all:9.401 lstm2.lstm_nonlin:4.11741 lstm2.W_rp:5.22563 tdnn5.affine:10.4111 tdnn6.affine:10.6767 lstm3.W_all:10.0993 lstm3.lstm_nonlin:3.95172 lstm3.W_rp:5.68637 output.affine:11.2272 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.5132 tdnn2.affine:14.1864 lstm1.W_all:50.858 lstm1.lstm_nonlin:30.8665 lstm1.W_rp:19.2781 tdnn3.affine:14.0198 tdnn4.affine:12.8161 lstm2.W_all:50.6689 lstm2.lstm_nonlin:31.8615 lstm2.W_rp:18.8091 tdnn5.affine:13.032 tdnn6.affine:12.6616 lstm3.W_all:51.0308 lstm3.lstm_nonlin:30.1617 lstm3.W_rp:24.4552 output.affine:25.0617 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.60067 tdnn2.affine:0.622796 lstm1.W_all:0.186177 lstm1.lstm_nonlin:0.114925 lstm1.W_rp:0.294839 tdnn3.affine:0.585506 tdnn4.affine:0.601605 lstm2.W_all:0.165785 lstm2.lstm_nonlin:0.11446 lstm2.W_rp:0.257006 tdnn5.affine:0.550311 tdnn6.affine:0.580195 lstm3.W_all:0.177872 lstm3.lstm_nonlin:0.115939 lstm3.W_rp:0.239553 output.affine:0.574154 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:02:00 KST 2020, elapsed time 0 seconds
