# nnet3-info exp/nnet3/tdnn_lstm1c_sp/179.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/178.mdl exp/nnet3/tdnn_lstm1c_sp/179.mdl 
# Started at Thu Jul 30 11:11:48 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/179.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000170586, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02908, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.009,0.01,0.02 0.03,0.25,0.51,0.60,0.66 0.73,0.79,0.82,1.0), mean=0.452, stddev=0.223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.16,0.20,0.57,0.78,1.0 1.3,1.4,1.5,1.5), mean=0.566, stddev=0.346], bias-{mean,stddev}=0.004922,0.05399, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.77e+05, self-repaired-proportion=0.147182, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,6e-06,9e-06,3e-05 0.0001,0.001,0.06,0.08,0.10 0.12,0.13,0.14,0.22), mean=0.0552, stddev=0.0381], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.002,0.004,0.01 0.04,0.12,0.48,0.63,0.73 0.82,0.88,0.90,0.99), mean=0.429, stddev=0.249], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.07,0.26,0.35,0.46,0.52 0.58,0.71,0.75,1.4), mean=0.343, stddev=0.173], oderiv-count=1.20934e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39464.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,2e-06,4e-06,1e-05 7e-05,0.001,0.06,0.08,0.10 0.11,0.13,0.14,0.21), mean=0.0531, stddev=0.0377], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,8e-05,9e-05,0.0002 0.0005,0.006,0.09,0.10,0.11 0.12,0.13,0.14,0.15), mean=0.073, stddev=0.0413]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000170586, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01162, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.37,0.38 0.40,0.41,0.45,0.50,0.52 0.55,0.58,0.59,0.70), mean=0.456, stddev=0.0515], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.007,0.01 0.02,0.14,0.28,0.31,0.34 0.36,0.38,0.41,0.70), mean=0.239, stddev=0.115], bias-{mean,stddev}=-0.002534,0.02784, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.27,0.29,0.31,0.34,0.36 0.38,0.40,0.41,0.56), mean=0.315, stddev=0.0362], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.41 0.42,0.44,0.46,0.49,0.50 0.51,0.52,0.52,0.54), mean=0.461, stddev=0.0289], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.045, stddev=0.00842], oderiv-count=1.12454e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38624.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.25 0.26,0.28,0.31,0.34,0.36 0.38,0.41,0.43,0.56), mean=0.311, stddev=0.0404], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.45 0.47,0.49,0.53,0.59,0.62 0.65,0.69,0.73,0.84), mean=0.542, stddev=0.0635]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000170586, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01595, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.0002,0.0009,0.005 0.03,0.18,0.35,0.53,0.62 0.69,0.76,0.81,1.0), mean=0.352, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.32,0.35,0.40 0.45,0.63,0.74,0.82,0.87 0.90,0.96,0.98,1.3), mean=0.711, stddev=0.153], bias-{mean,stddev}=0.0001133,0.02281, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000170586, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0242, w_fc-rms=0.0306, w_oc-rms=0.03316, count=1.46e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631875, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.45 0.46,0.47,0.49,0.52,0.55 0.60,0.69,0.71,0.75), mean=0.501, stddev=0.0497], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0146] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631875, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.39,0.40,0.42 0.43,0.45,0.49,0.52,0.56 0.65,0.72,0.74,0.79), mean=0.496, stddev=0.0668], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0159] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00631875, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.83,-0.77,-0.56 -0.37,-0.21,0.005,0.21,0.35 0.48,0.66,0.77,0.84), mean=-0.0034, stddev=0.298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.28,0.36 0.42,0.48,0.60,0.74,0.99 1.0,1.0,1.0,1.0), mean=0.627, stddev=0.187] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631875, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.41,0.42 0.44,0.45,0.47,0.50,0.51 0.53,0.56,0.57,0.62), mean=0.475, stddev=0.0333], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00822967, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.82,-0.73,-0.46 -0.30,-0.16,0.004,0.16,0.27 0.40,0.58,0.75,0.87), mean=-0.00438, stddev=0.263], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.27,0.30,0.50 0.66,0.76,0.84,0.91,0.99 1.0,1.0,1.0,1.0), mean=0.817, stddev=0.145] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.40146e-06, count-zeroing-boundaries=293991
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0451791
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000170586, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03164, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.19 0.22,0.25,0.44,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.623, stddev=0.364], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.005,0.01,0.02 0.05,0.30,0.45,0.60,0.72 0.86,1.0,1.2,1.4), mean=0.45, stddev=0.24], bias-{mean,stddev}=-0.0001733,0.2125, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000170586, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01194, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.22 0.24,0.26,0.32,0.39,0.42 0.45,0.48,0.49,0.61), mean=0.326, stddev=0.0723], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.09,0.19,0.38,0.42 0.45,0.47,0.50,0.52), mean=0.233, stddev=0.14], bias-{mean,stddev}=0.00619,0.02283, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.56e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.05,0.06 0.07,0.08,0.11,0.14,0.15 0.16,0.18,0.18,0.20), mean=0.109, stddev=0.0329], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.16,0.23,0.27 0.33,0.38,0.49,0.63,0.66 0.69,0.73,0.74,0.80), mean=0.497, stddev=0.131], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.09,0.11,0.12 0.14,0.15,0.16,0.29), mean=0.0994, stddev=0.0208], oderiv-count=1.08275e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36105.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.05 0.06,0.08,0.10,0.13,0.15 0.16,0.17,0.18,0.19), mean=0.105, stddev=0.0331], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.12,0.13 0.14,0.15,0.16,0.19,0.20 0.21,0.22,0.23,0.28), mean=0.166, stddev=0.0261]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000170586, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008606, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.27,0.29 0.30,0.31,0.34,0.36,0.38 0.40,0.42,0.43,0.56), mean=0.338, stddev=0.0357], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.16,0.19,0.22,0.24 0.25,0.27,0.29,0.33), mean=0.193, stddev=0.0336], bias-{mean,stddev}=-0.01063,0.01526, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.21e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.20,0.21,0.22 0.23,0.24,0.27,0.30,0.32 0.33,0.34,0.36,0.43), mean=0.273, stddev=0.0338], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.38,0.39 0.40,0.41,0.44,0.46,0.48 0.49,0.51,0.52,0.53), mean=0.44, stddev=0.031], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0352, stddev=0.00293], oderiv-count=1.1001e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33586.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.23,0.24,0.26,0.30,0.31 0.32,0.34,0.35,0.42), mean=0.267, stddev=0.0341], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.45,0.47,0.51,0.55,0.58 0.61,0.66,0.69,0.81), mean=0.514, stddev=0.0568]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000170586, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01315, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,9e-07,2e-06,4e-06 2e-05,0.0003,0.27,0.47,0.55 0.59,0.64,0.67,1.1), mean=0.254, stddev=0.219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.24,0.26,0.32 0.39,0.54,0.61,0.66,0.69 0.73,0.80,0.84,1.4), mean=0.587, stddev=0.124], bias-{mean,stddev}=-0.003671,0.03904, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000170586, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.009256, w_fc-rms=0.01044, w_oc-rms=0.01492, count=1.33e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637072, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.43,0.44,0.45 0.46,0.47,0.50,0.51,0.54 0.58,0.61,0.62,0.69), mean=0.498, stddev=0.0387], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0143] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637072, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.40 0.42,0.44,0.49,0.50,0.50 0.53,0.55,0.57,0.77), mean=0.476, stddev=0.0425], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0116] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00977448, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.64,-0.57,-0.34 -0.23,-0.12,0.0004,0.10,0.23 0.35,0.55,0.66,0.83), mean=-0.000915, stddev=0.212], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.36,0.41,0.49 0.54,0.58,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.75, stddev=0.201] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637072, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.43 0.44,0.45,0.50,0.50,0.51 0.55,0.58,0.58,0.63), mean=0.485, stddev=0.0346], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0155] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00637072, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.59,-0.43,-0.29 -0.18,-0.08,0.0001,0.09,0.19 0.28,0.42,0.55,0.68), mean=0.000163, stddev=0.175], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.52,0.61,0.72 0.79,0.83,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.9, stddev=0.103] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=259335
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0451791
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000170586, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02881, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.30,0.31,0.35 0.37,0.39,0.53,0.85,0.90 0.94,0.96,0.98,1.0), mean=0.619, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0006,0.0007,0.001 0.002,0.005,0.46,0.61,0.70 0.77,0.87,0.93,0.99), mean=0.364, stddev=0.289], bias-{mean,stddev}=0.003379,0.1387, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000170586, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01064, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.22,0.23,0.27,0.34,0.39 0.42,0.46,0.49,0.53), mean=0.289, stddev=0.068], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.14,0.21,0.32,0.34 0.36,0.38,0.40,0.44), mean=0.227, stddev=0.0845], bias-{mean,stddev}=0.0046,0.0114, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.77e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.07,0.09,0.10 0.11,0.12,0.12,0.14), mean=0.0669, stddev=0.023], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.17,0.18,0.21 0.25,0.34,0.46,0.56,0.60 0.63,0.67,0.70,0.74), mean=0.445, stddev=0.127], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.09 0.10,0.10,0.12,0.14,0.16 0.19,0.20,0.21,0.23), mean=0.125, stddev=0.0269], oderiv-count=977408
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31067.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.04,0.07,0.09,0.09 0.10,0.11,0.12,0.14), mean=0.0657, stddev=0.0228], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.07,0.08 0.09,0.10,0.11,0.13,0.13 0.14,0.15,0.15,0.19), mean=0.111, stddev=0.0184]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000170586, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00804, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.24 0.26,0.27,0.31,0.36,0.38 0.39,0.41,0.42,0.51), mean=0.314, stddev=0.0458], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.14,0.15,0.17,0.21,0.23 0.25,0.29,0.32,0.36), mean=0.179, stddev=0.0391], bias-{mean,stddev}=-0.01083,0.01997, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.77e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.24,0.27,0.30,0.31 0.32,0.34,0.35,0.45), mean=0.27, stddev=0.0349], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.37 0.39,0.40,0.42,0.45,0.46 0.47,0.48,0.49,0.51), mean=0.422, stddev=0.0304], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.0286, stddev=0.00256], oderiv-count=942400
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28548.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.22,0.23,0.26,0.29,0.30 0.32,0.33,0.34,0.44), mean=0.262, stddev=0.0348], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.37,0.42 0.43,0.46,0.51,0.56,0.61 0.64,0.67,0.70,0.80), mean=0.517, stddev=0.071]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000170586, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01894, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.19,0.21,0.26 0.29,0.34,0.42,0.61,0.71 0.75,0.79,0.82,1.3), mean=0.458, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.59,0.61 0.63,0.64,0.71,0.98,1.3 1.4,1.5,1.5,1.6), mean=0.824, stddev=0.258], bias-{mean,stddev}=0.0242,0.02612, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000170586, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04401, w_fc-rms=0.0475, w_oc-rms=0.04938, count=1.21e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064334, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.55,0.56 0.57,0.60,0.65,0.69,0.71 0.73,0.75,0.76,0.79), mean=0.646, stddev=0.0522], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.16,0.17 0.18,0.19,0.20,0.20,0.21 0.21,0.21,0.22,0.24), mean=0.195, stddev=0.0122] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064334, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.46,0.48,0.49 0.51,0.54,0.58,0.63,0.69 0.73,0.77,0.78,0.86), mean=0.59, stddev=0.0686], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.15,0.16,0.17 0.18,0.19,0.20,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.202, stddev=0.0152] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00835648, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.74,-0.66,-0.53 -0.35,-0.21,-0.01,0.20,0.33 0.49,0.67,0.73,0.82), mean=-0.00933, stddev=0.287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.26,0.30,0.32 0.36,0.39,0.44,0.48,0.49 0.51,0.53,0.54,0.61), mean=0.431, stddev=0.056] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064334, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.55,0.56,0.58 0.59,0.62,0.66,0.69,0.71 0.73,0.76,0.77,0.86), mean=0.656, stddev=0.0478], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.16 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.22), mean=0.181, stddev=0.0131] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00848657, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.78,-0.71,-0.48 -0.32,-0.20,-0.01,0.18,0.32 0.46,0.69,0.76,0.85), mean=-0.00938, stddev=0.282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.28,0.31,0.35 0.43,0.54,0.62,0.66,0.69 0.70,0.71,0.72,0.73), mean=0.589, stddev=0.102] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.53289e-06, count-zeroing-boundaries=220610
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0451791
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000170586, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07317, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.0,1.1,1.1 1.1,1.2,1.6,2.0,2.1 2.2,2.2,2.3,2.3), mean=1.62, stddev=0.402], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.65,0.80,0.95 1.0,1.1,1.2,1.3,1.4 1.4,1.4,1.5,1.6), mean=1.17, stddev=0.153], bias-{mean,stddev}=0.01331,0.3092, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000170586, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03854, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.50,0.51,0.53 0.54,0.56,0.60,0.65,0.68 0.72,0.78,0.83,2.3), mean=0.615, stddev=0.0911], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.7,2.1,2.2 2.3,2.3,2.4,2.4), mean=1.72, stddev=0.394], bias-{mean,stddev}=4.929e-09,0.0332, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0167, stddev=0.0138], oderiv-count=566400
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/178.mdl exp/nnet3/tdnn_lstm1c_sp/179.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.6941 tdnn2.affine:6.64993 lstm1.W_all:5.25868 lstm1.lstm_nonlin:0.0908575 lstm1.W_rp:2.18199 tdnn3.affine:4.33741 tdnn4.affine:4.81332 lstm2.W_all:3.6194 lstm2.lstm_nonlin:0.0420623 lstm2.W_rp:1.47369 tdnn5.affine:3.36943 tdnn6.affine:3.90515 lstm3.W_all:4.79653 lstm3.lstm_nonlin:0.102604 lstm3.W_rp:1.91294 output.affine:4.21397 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.5537 tdnn2.affine:10.4828 lstm1.W_all:18.576 lstm1.lstm_nonlin:1.16766 lstm1.W_rp:12.1294 tdnn3.affine:7.62325 tdnn4.affine:7.76254 lstm2.W_all:15.3903 lstm2.lstm_nonlin:0.465883 lstm2.W_rp:10.8276 tdnn5.affine:6.7831 tdnn6.affine:7.25993 lstm3.W_all:22.0777 lstm3.lstm_nonlin:1.85697 lstm3.W_rp:27.3624 output.affine:28.5469 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.580458 tdnn2.affine:0.629106 lstm1.W_all:0.282584 lstm1.lstm_nonlin:0.0774061 lstm1.W_rp:0.179706 tdnn3.affine:0.56049 tdnn4.affine:0.612089 lstm2.W_all:0.234756 lstm2.lstm_nonlin:0.0902947 lstm2.W_rp:0.135874 tdnn5.affine:0.487986 tdnn6.affine:0.529264 lstm3.W_all:0.216961 lstm3.lstm_nonlin:0.0551948 lstm3.W_rp:0.0699413 output.affine:0.147465 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:11:49 KST 2020, elapsed time 1 seconds
