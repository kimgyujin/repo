# nnet3-info exp/nnet3/tdnn_lstm1c_sp/253.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/252.mdl exp/nnet3/tdnn_lstm1c_sp/253.mdl 
# Started at Thu Jul 30 11:41:05 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/253.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000261378, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03518, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.03,0.11,0.62,0.75,0.84 0.94,1.0,1.0,1.3), mean=0.532, stddev=0.298], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.19,0.23,0.66,0.95,1.3 1.6,1.7,1.7,1.8), mean=0.677, stddev=0.43], bias-{mean,stddev}=-0.0008376,0.06659, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.34e+05, self-repaired-proportion=0.218079, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,2e-06,1e-05,3e-05 8e-05,0.0006,0.07,0.10,0.12 0.14,0.16,0.17,0.21), mean=0.0626, stddev=0.0473], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0006,0.003,0.009 0.02,0.06,0.44,0.61,0.69 0.79,0.87,0.89,0.99), mean=0.394, stddev=0.255], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.05,0.16,0.27,0.35,0.40 0.46,0.57,0.64,1.4), mean=0.263, stddev=0.148], oderiv-count=1.10426e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34320.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,2e-06,3e-06,1e-05 9e-05,0.0007,0.06,0.10,0.12 0.14,0.16,0.18,0.24), mean=0.0598, stddev=0.047], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,8e-05,0.0001,0.0002 0.0008,0.004,0.10,0.13,0.14 0.15,0.16,0.17,0.18), mean=0.0858, stddev=0.0535]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000261378, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01324, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.41,0.42 0.44,0.46,0.51,0.57,0.62 0.65,0.70,0.72,0.79), mean=0.518, stddev=0.0702], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.009,0.01 0.02,0.06,0.31,0.37,0.40 0.43,0.47,0.49,0.85), mean=0.265, stddev=0.144], bias-{mean,stddev}=-0.01965,0.04221, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.29 0.31,0.32,0.35,0.39,0.42 0.45,0.47,0.49,0.58), mean=0.36, stddev=0.0476], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.39,0.40 0.41,0.42,0.45,0.48,0.49 0.50,0.52,0.53,0.55), mean=0.45, stddev=0.0324], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0378, stddev=0.00722], oderiv-count=1.13939e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33546.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.29,0.30 0.31,0.32,0.36,0.40,0.43 0.47,0.49,0.51,0.63), mean=0.366, stddev=0.0517], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.52,0.53,0.55 0.57,0.60,0.65,0.71,0.76 0.79,0.83,0.84,1.0), mean=0.659, stddev=0.0739]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000261378, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01844, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,5e-06,2e-05,0.0001 0.002,0.16,0.41,0.62,0.72 0.79,0.86,0.90,1.2), mean=0.399, stddev=0.248], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.39,0.45 0.52,0.73,0.85,0.94,1.0 1.1,1.1,1.2,1.2), mean=0.822, stddev=0.178], bias-{mean,stddev}=7.947e-05,0.02731, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000261378, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04552, w_fc-rms=0.02777, w_oc-rms=0.03989, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629493, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.66,0.79,0.81,0.84), mean=0.49, stddev=0.0736], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.0228] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629493, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.40,0.41,0.44 0.45,0.46,0.49,0.52,0.56 0.62,0.74,0.77,0.82), mean=0.502, stddev=0.0632], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0202] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.037561, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.90,-0.87,-0.52 -0.30,-0.16,0.002,0.18,0.32 0.51,0.84,0.88,0.90), mean=0.0129, stddev=0.301], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.18,0.26 0.35,0.42,0.55,0.80,1.0 1.0,1.0,1.0,1.0), mean=0.589, stddev=0.224] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629493, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.38,0.39 0.40,0.42,0.45,0.50,0.50 0.50,0.54,0.55,0.62), mean=0.451, stddev=0.0394], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.217, stddev=0.0219] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00629493, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.79,-0.65,-0.35 -0.20,-0.09,0.001,0.12,0.22 0.34,0.64,0.76,0.82), mean=0.00968, stddev=0.231], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.32,0.35,0.54 0.72,0.80,0.87,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.849, stddev=0.137] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.52301e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.35651e-05, count-zeroing-boundaries=297049
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.160882
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000261378, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03972, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.29,0.32 0.36,0.42,0.82,1.2,1.3 1.4,1.4,1.4,1.5), mean=0.819, stddev=0.387], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.002,0.003 0.01,0.29,0.53,0.73,0.87 1.2,1.6,1.8,2.0), mean=0.536, stddev=0.351], bias-{mean,stddev}=0.01324,0.2789, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000261378, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01369, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.21,0.21,0.23 0.26,0.30,0.37,0.45,0.49 0.53,0.56,0.58,0.75), mean=0.372, stddev=0.0895], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.14,0.29,0.42,0.45 0.47,0.50,0.52,0.53), mean=0.282, stddev=0.134], bias-{mean,stddev}=0.004616,0.01513, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.27e+05, self-repaired-proportion=0.00347395, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.03,0.04,0.06 0.07,0.09,0.12,0.15,0.17 0.18,0.20,0.21,0.26), mean=0.12, stddev=0.0375], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.15,0.18,0.24 0.31,0.38,0.50,0.59,0.63 0.67,0.69,0.71,0.76), mean=0.483, stddev=0.125], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.07,0.08,0.09,0.10,0.11 0.13,0.15,0.17,0.25), mean=0.0916, stddev=0.0223], oderiv-count=998208
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31224.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.03,0.04,0.06 0.07,0.09,0.12,0.14,0.16 0.18,0.20,0.21,0.27), mean=0.118, stddev=0.0372], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.12,0.13,0.14 0.16,0.17,0.19,0.21,0.23 0.24,0.26,0.27,0.31), mean=0.189, stddev=0.0328]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000261378, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00977, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.32 0.33,0.35,0.37,0.42,0.44 0.47,0.49,0.51,0.61), mean=0.383, stddev=0.0472], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.13,0.14,0.15 0.16,0.18,0.21,0.25,0.28 0.30,0.33,0.34,0.43), mean=0.218, stddev=0.0463], bias-{mean,stddev}=-0.02163,0.01932, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.87e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.27 0.27,0.29,0.32,0.35,0.37 0.39,0.40,0.41,0.51), mean=0.321, stddev=0.0396], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.38,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.50,0.52), mean=0.435, stddev=0.0288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.031, stddev=0.00236], oderiv-count=1.13789e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28901.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.27 0.28,0.29,0.32,0.36,0.38 0.40,0.41,0.42,0.56), mean=0.326, stddev=0.0424], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.50,0.51,0.53 0.54,0.57,0.61,0.68,0.72 0.76,0.82,0.85,1.2), mean=0.625, stddev=0.0765]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000261378, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01535, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,7e-07,1e-06,3e-06 1e-05,0.0003,0.34,0.56,0.63 0.68,0.73,0.76,1.1), mean=0.298, stddev=0.254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.32,0.34,0.39 0.49,0.63,0.70,0.77,0.81 0.87,0.94,1.0,1.5), mean=0.686, stddev=0.138], bias-{mean,stddev}=-0.0005112,0.05169, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000261378, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02077, w_fc-rms=0.0114, w_oc-rms=0.02669, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634972, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.44,0.45,0.50,0.51,0.57 0.61,0.67,0.71,0.80), mean=0.498, stddev=0.0596], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0188] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634972, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.40,0.42 0.43,0.46,0.50,0.50,0.53 0.57,0.62,0.65,0.75), mean=0.491, stddev=0.0471], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0168] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.011029, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.81,-0.71,-0.47 -0.31,-0.16,0.0002,0.16,0.35 0.51,0.77,0.80,0.88), mean=0.00771, stddev=0.283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.26,0.37 0.44,0.50,0.59,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.698, stddev=0.241] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634972, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.40 0.42,0.44,0.49,0.50,0.51 0.54,0.56,0.59,0.75), mean=0.477, stddev=0.0438], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.02] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00634972, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.54,-0.48,-0.31 -0.19,-0.10,0.0004,0.10,0.23 0.38,0.56,0.61,0.72), mean=0.00756, stddev=0.199], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.47,0.55,0.67 0.75,0.82,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.893, stddev=0.113] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.88018e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=5.72603e-06, count-zeroing-boundaries=261961
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.160882
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000261378, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03836, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.43,0.46,0.51 0.54,0.57,0.81,1.1,1.1 1.2,1.3,1.3,1.3), mean=0.836, stddev=0.257], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0006,0.0008,0.001 0.002,0.006,0.57,0.81,0.93 1.1,1.2,1.4,1.6), mean=0.479, stddev=0.392], bias-{mean,stddev}=-0.0007789,0.2078, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000261378, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01298, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.22,0.24,0.25 0.28,0.29,0.34,0.41,0.46 0.51,0.55,0.57,0.63), mean=0.354, stddev=0.0765], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.16 0.17,0.19,0.27,0.38,0.42 0.44,0.45,0.46,0.50), mean=0.28, stddev=0.0952], bias-{mean,stddev}=0.001387,0.008378, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.97e+05, self-repaired-proportion=0.00111619, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.03,0.03,0.04 0.05,0.07,0.09,0.12,0.13 0.14,0.15,0.16,0.19), mean=0.0917, stddev=0.0311], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.16,0.18,0.23 0.28,0.34,0.47,0.56,0.60 0.62,0.65,0.66,0.68), mean=0.452, stddev=0.121], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.08,0.09,0.09,0.11,0.13 0.14,0.16,0.17,0.22), mean=0.0992, stddev=0.02], oderiv-count=919936
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26579.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.03,0.04 0.05,0.07,0.09,0.12,0.14 0.15,0.16,0.17,0.20), mean=0.0944, stddev=0.0317], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.11 0.12,0.13,0.16,0.18,0.19 0.20,0.22,0.23,0.25), mean=0.158, stddev=0.0281]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000261378, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009666, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.23,0.27 0.30,0.33,0.37,0.43,0.46 0.48,0.50,0.51,0.59), mean=0.377, stddev=0.0632], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.15 0.16,0.17,0.20,0.25,0.28 0.32,0.35,0.39,0.46), mean=0.214, stddev=0.0518], bias-{mean,stddev}=-0.0224,0.0245, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.95e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.23,0.25 0.27,0.29,0.32,0.36,0.38 0.39,0.41,0.42,0.53), mean=0.324, stddev=0.0453], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.37 0.38,0.39,0.42,0.44,0.45 0.46,0.48,0.48,0.51), mean=0.416, stddev=0.0283], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0257, stddev=0.00198], oderiv-count=978400
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24257, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.22,0.23,0.25 0.27,0.30,0.34,0.37,0.39 0.42,0.43,0.47,0.67), mean=0.337, stddev=0.054], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.41,0.49 0.54,0.59,0.67,0.75,0.80 0.85,0.92,1.0,1.3), mean=0.67, stddev=0.12]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000261378, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02189, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.28,0.29,0.31 0.33,0.38,0.51,0.70,0.79 0.84,0.88,0.91,1.4), mean=0.533, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.62,0.67,0.72 0.75,0.79,0.86,1.1,1.4 1.5,1.7,1.7,2.1), mean=0.965, stddev=0.257], bias-{mean,stddev}=0.02132,0.02452, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000261378, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.07322, w_fc-rms=0.04977, w_oc-rms=0.05242, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641588, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.57,0.59 0.61,0.64,0.68,0.72,0.76 0.78,0.80,0.81,0.85), mean=0.684, stddev=0.0551], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.16,0.17,0.18,0.20,0.20 0.21,0.21,0.21,0.21), mean=0.181, stddev=0.0186] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641588, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.48,0.50,0.53 0.55,0.58,0.64,0.68,0.73 0.77,0.82,0.84,0.87), mean=0.639, stddev=0.0696], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.16,0.17,0.19,0.20,0.20 0.21,0.21,0.21,0.22), mean=0.185, stddev=0.0201] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0218818, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.77,-0.71,-0.56 -0.39,-0.26,-0.02,0.25,0.38 0.52,0.71,0.78,0.90), mean=-0.00599, stddev=0.318], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.21,0.25 0.30,0.36,0.42,0.47,0.48 0.49,0.51,0.52,0.54), mean=0.407, stddev=0.0719] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641588, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.52,0.54 0.57,0.59,0.62,0.65,0.68 0.71,0.73,0.76,0.84), mean=0.62, stddev=0.048], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.16,0.17,0.19,0.20,0.20 0.20,0.20,0.20,0.21), mean=0.183, stddev=0.016] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00641588, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.72,-0.66,-0.50 -0.33,-0.22,-0.01,0.21,0.31 0.47,0.66,0.69,0.85), mean=-0.0061, stddev=0.282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.31,0.35,0.40 0.48,0.56,0.65,0.69,0.71 0.72,0.74,0.75,0.76), mean=0.622, stddev=0.0949] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.24482e-06, count-zeroing-boundaries=222735
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.160882
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000261378, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08178, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.1,1.1 1.2,1.2,1.6,2.3,2.4 2.5,2.6,2.6,2.7), mean=1.79, stddev=0.535], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.91,0.99,1.0 1.1,1.1,1.3,1.5,1.6 1.8,1.9,1.9,2.0), mean=1.3, stddev=0.223], bias-{mean,stddev}=-0.03955,0.4562, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000261378, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04358, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.58,0.59,0.61 0.62,0.64,0.69,0.74,0.77 0.80,0.86,0.91,2.4), mean=0.697, stddev=0.092], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.5 2.6,2.6,2.7,2.8), mean=1.93, stddev=0.525], bias-{mean,stddev}=6.218e-09,0.02949, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0135], oderiv-count=579520
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/252.mdl exp/nnet3/tdnn_lstm1c_sp/253.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.62208 tdnn2.affine:5.51554 lstm1.W_all:4.56667 lstm1.lstm_nonlin:0.102493 lstm1.W_rp:1.78801 tdnn3.affine:3.57814 tdnn4.affine:4.08973 lstm2.W_all:3.17838 lstm2.lstm_nonlin:0.0535424 lstm2.W_rp:1.28746 tdnn5.affine:2.93196 tdnn6.affine:3.41189 lstm3.W_all:3.91254 lstm3.lstm_nonlin:0.112335 lstm3.W_rp:1.66281 output.affine:3.81355 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.9793 tdnn2.affine:11.9705 lstm1.W_all:21.4733 lstm1.lstm_nonlin:1.51855 lstm1.W_rp:15.2832 tdnn3.affine:8.72697 tdnn4.affine:8.82473 lstm2.W_all:18.0056 lstm2.lstm_nonlin:0.813958 lstm2.W_rp:14.4971 tdnn5.affine:8.26873 tdnn6.affine:8.73898 lstm3.W_all:25.4926 lstm3.lstm_nonlin:2.34623 lstm3.W_rp:30.9632 output.affine:32.2584 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.402333 tdnn2.affine:0.460346 lstm1.W_all:0.213438 lstm1.lstm_nonlin:0.0673858 lstm1.W_rp:0.117583 tdnn3.affine:0.410338 tdnn4.affine:0.462515 lstm2.W_all:0.176603 lstm2.lstm_nonlin:0.0669188 lstm2.W_rp:0.0892925 tdnn5.affine:0.354555 tdnn6.affine:0.389819 lstm3.W_all:0.153892 lstm3.lstm_nonlin:0.0487135 lstm3.W_rp:0.0538831 output.affine:0.118623 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:41:05 KST 2020, elapsed time 0 seconds
