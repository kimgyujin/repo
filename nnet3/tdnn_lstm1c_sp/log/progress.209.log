# nnet3-info exp/nnet3/tdnn_lstm1c_sp/209.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/208.mdl exp/nnet3/tdnn_lstm1c_sp/209.mdl 
# Started at Thu Jul 30 11:23:42 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/209.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000155103, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02837, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.009,0.01 0.03,0.14,0.50,0.59,0.66 0.71,0.79,0.87,1.2), mean=0.436, stddev=0.227], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.16,0.20,0.55,0.76,1.0 1.3,1.4,1.4,1.5), mean=0.552, stddev=0.338], bias-{mean,stddev}=0.001943,0.05144, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.39e+05, self-repaired-proportion=0.158186, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,3e-06,9e-06,4e-05 0.0001,0.0008,0.06,0.08,0.09 0.11,0.12,0.13,0.18), mean=0.0511, stddev=0.0366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.001,0.004,0.02 0.03,0.09,0.47,0.62,0.69 0.78,0.85,0.90,0.98), mean=0.414, stddev=0.247], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.02,0.03 0.06,0.22,0.35,0.45,0.52 0.63,0.76,0.85,1.4), mean=0.342, stddev=0.184], oderiv-count=1.17018e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30327.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,1e-06,3e-06,1e-05 4e-05,0.0007,0.05,0.07,0.09 0.11,0.13,0.15,0.20), mean=0.0471, stddev=0.0362], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,4e-05,8e-05,0.0002 0.0005,0.003,0.08,0.10,0.11 0.11,0.12,0.12,0.14), mean=0.0659, stddev=0.0396]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000155103, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01112, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.35,0.37 0.38,0.40,0.43,0.47,0.50 0.52,0.55,0.58,0.69), mean=0.437, stddev=0.0495], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.006,0.008 0.02,0.08,0.27,0.30,0.33 0.35,0.38,0.40,0.59), mean=0.227, stddev=0.113], bias-{mean,stddev}=-0.005781,0.02945, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.15e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.25,0.26,0.29,0.32,0.33 0.36,0.38,0.39,0.53), mean=0.29, stddev=0.0367], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.41 0.42,0.44,0.46,0.48,0.50 0.51,0.52,0.53,0.55), mean=0.46, stddev=0.0296], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.06,0.06 0.06,0.07,0.07,0.08), mean=0.0479, stddev=0.00902], oderiv-count=1.14771e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29647.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.22,0.23 0.24,0.25,0.28,0.31,0.34 0.37,0.38,0.40,0.54), mean=0.285, stddev=0.0411], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.40,0.42 0.44,0.46,0.50,0.54,0.58 0.61,0.63,0.66,0.78), mean=0.504, stddev=0.0573]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000155103, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01554, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,5e-05,0.0002,0.001 0.009,0.15,0.34,0.52,0.61 0.67,0.74,0.78,1.0), mean=0.339, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.31,0.33,0.37 0.42,0.62,0.72,0.80,0.84 0.89,0.94,0.99,1.2), mean=0.692, stddev=0.154], bias-{mean,stddev}=-0.0002828,0.02184, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000155103, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02871, w_fc-rms=0.0266, w_oc-rms=0.03207, count=1.48e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623682, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.44,0.45 0.46,0.47,0.48,0.51,0.53 0.61,0.70,0.74,0.76), mean=0.497, stddev=0.0533], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0157] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623682, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.41,0.42,0.43 0.45,0.46,0.49,0.51,0.54 0.61,0.70,0.73,0.75), mean=0.497, stddev=0.0564], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0147] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00720165, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.85,-0.81,-0.48 -0.27,-0.15,0.0001,0.17,0.29 0.43,0.70,0.79,0.86), mean=0.000903, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.26,0.34 0.43,0.49,0.61,0.78,1.0 1.0,1.0,1.0,1.0), mean=0.641, stddev=0.192] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623682, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.43,0.44,0.46,0.50,0.50 0.52,0.53,0.55,0.59), mean=0.469, stddev=0.0299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00623682, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.79,-0.72,-0.37 -0.22,-0.11,-0.0003,0.12,0.22 0.36,0.59,0.69,0.83), mean=-0.000691, stddev=0.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.38,0.55 0.72,0.79,0.86,0.93,1.0 1.0,1.0,1.0,1.0), mean=0.842, stddev=0.134] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.00583e-05, count-zeroing-boundaries=298260
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0865014
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000155103, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03158, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.21 0.23,0.29,0.50,1.0,1.1 1.1,1.1,1.2,1.2), mean=0.632, stddev=0.345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.002,0.003,0.006 0.02,0.27,0.44,0.59,0.71 0.90,1.2,1.4,1.5), mean=0.436, stddev=0.264], bias-{mean,stddev}=0.00971,0.2455, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000155103, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01143, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.25,0.30,0.37,0.41 0.45,0.47,0.48,0.60), mean=0.311, stddev=0.0716], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.08,0.10,0.21,0.36,0.39 0.41,0.44,0.45,0.50), mean=0.228, stddev=0.126], bias-{mean,stddev}=0.002939,0.01891, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.35e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.05 0.05,0.07,0.09,0.11,0.12 0.14,0.15,0.15,0.18), mean=0.0895, stddev=0.0271], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.22,0.27 0.31,0.38,0.50,0.61,0.65 0.70,0.75,0.77,0.80), mean=0.496, stddev=0.13], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.12,0.14,0.16 0.17,0.19,0.21,0.36), mean=0.123, stddev=0.0279], oderiv-count=1.09658e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27608.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.06,0.08,0.11,0.12 0.13,0.14,0.15,0.20), mean=0.0857, stddev=0.028], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.10 0.11,0.12,0.13,0.15,0.16 0.17,0.18,0.19,0.21), mean=0.135, stddev=0.021]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000155103, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008243, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.28 0.29,0.30,0.32,0.35,0.37 0.38,0.40,0.42,0.52), mean=0.324, stddev=0.0337], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.14,0.16,0.18,0.21,0.23 0.24,0.26,0.27,0.34), mean=0.185, stddev=0.0332], bias-{mean,stddev}=-0.01193,0.01459, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.06e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.20,0.21 0.22,0.23,0.25,0.28,0.29 0.31,0.32,0.34,0.40), mean=0.256, stddev=0.0306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.38,0.39 0.40,0.42,0.44,0.47,0.48 0.49,0.51,0.51,0.54), mean=0.442, stddev=0.0313], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.04,0.04,0.05,0.05), mean=0.0379, stddev=0.00325], oderiv-count=1.04454e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25568.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.20 0.21,0.22,0.25,0.27,0.30 0.31,0.33,0.34,0.40), mean=0.252, stddev=0.0338], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.41 0.42,0.44,0.48,0.52,0.55 0.59,0.63,0.65,0.79), mean=0.485, stddev=0.058]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000155103, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01297, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,7e-07,1e-06,3e-06 1e-05,0.0002,0.27,0.46,0.54 0.59,0.62,0.65,1.1), mean=0.25, stddev=0.216], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.24,0.27,0.32 0.42,0.53,0.59,0.64,0.68 0.72,0.81,0.89,1.5), mean=0.579, stddev=0.121], bias-{mean,stddev}=-0.003901,0.04652, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000155103, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01075, w_fc-rms=0.009411, w_oc-rms=0.01679, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628925, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.43,0.43,0.44 0.45,0.46,0.50,0.51,0.55 0.60,0.63,0.67,0.74), mean=0.499, stddev=0.0461], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.22,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0143] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628925, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.41 0.42,0.44,0.49,0.50,0.50 0.53,0.57,0.59,0.75), mean=0.479, stddev=0.0441], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.012] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00823654, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.77,-0.60,-0.37 -0.27,-0.12,0.0007,0.12,0.26 0.41,0.57,0.70,0.85), mean=0.000678, stddev=0.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.29,0.37,0.48 0.54,0.58,0.68,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.748, stddev=0.204] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628925, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.42 0.44,0.45,0.50,0.50,0.52 0.54,0.56,0.58,0.68), mean=0.484, stddev=0.0368], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.015] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00628925, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.55,-0.41,-0.27 -0.20,-0.09,0.0005,0.08,0.18 0.29,0.45,0.54,0.71), mean=0.00106, stddev=0.177], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.51,0.61,0.72 0.79,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.903, stddev=0.103] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=263061
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0865014
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000155103, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02977, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.34,0.37 0.39,0.42,0.58,0.88,0.92 0.96,0.98,0.99,1.1), mean=0.642, stddev=0.22], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0005,0.0006,0.0008 0.001,0.004,0.46,0.63,0.73 0.82,0.93,1.0,1.1), mean=0.373, stddev=0.302], bias-{mean,stddev}=0.003032,0.1671, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000155103, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01025, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.20 0.21,0.23,0.27,0.33,0.37 0.41,0.44,0.45,0.49), mean=0.279, stddev=0.0629], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.14,0.21,0.30,0.33 0.34,0.36,0.37,0.42), mean=0.22, stddev=0.0784], bias-{mean,stddev}=0.001209,0.009327, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.73e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.06,0.08,0.09 0.10,0.11,0.11,0.13), mean=0.0614, stddev=0.0215], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.19,0.23 0.28,0.34,0.47,0.57,0.61 0.64,0.67,0.69,0.73), mean=0.46, stddev=0.125], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.14,0.16,0.18 0.21,0.24,0.25,0.29), mean=0.142, stddev=0.0311], oderiv-count=1.02246e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23529.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.06,0.08,0.09 0.10,0.11,0.11,0.14), mean=0.0604, stddev=0.0214], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.08,0.10,0.11,0.12 0.13,0.14,0.14,0.15), mean=0.0988, stddev=0.0177]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000155103, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007699, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.21,0.23 0.25,0.26,0.30,0.34,0.36 0.38,0.39,0.40,0.50), mean=0.301, stddev=0.0459], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.14,0.16,0.20,0.22 0.24,0.27,0.30,0.35), mean=0.171, stddev=0.0377], bias-{mean,stddev}=-0.0112,0.02043, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.3e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.18,0.20 0.21,0.23,0.26,0.28,0.30 0.31,0.33,0.34,0.41), mean=0.257, stddev=0.0333], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.37 0.38,0.39,0.42,0.44,0.46 0.47,0.48,0.48,0.52), mean=0.419, stddev=0.0291], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0303, stddev=0.00265], oderiv-count=912960
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=21490.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.20 0.21,0.23,0.25,0.28,0.29 0.31,0.32,0.35,0.47), mean=0.254, stddev=0.0352], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.29,0.32,0.39 0.41,0.45,0.50,0.55,0.59 0.61,0.65,0.67,0.84), mean=0.498, stddev=0.0735]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000155103, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01862, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.22,0.23,0.26 0.28,0.33,0.42,0.60,0.68 0.72,0.76,0.78,1.2), mean=0.452, stddev=0.144], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.59,0.62 0.64,0.66,0.71,0.99,1.2 1.3,1.4,1.5,2.0), mean=0.815, stddev=0.238], bias-{mean,stddev}=0.02398,0.02434, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000155103, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04946, w_fc-rms=0.04433, w_oc-rms=0.04126, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063525, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.55,0.57,0.59 0.61,0.63,0.69,0.73,0.75 0.77,0.79,0.80,0.82), mean=0.682, stddev=0.0537], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.14,0.16 0.17,0.18,0.19,0.20,0.20 0.21,0.21,0.22,0.24), mean=0.187, stddev=0.016] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063525, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.47,0.50,0.52 0.54,0.57,0.61,0.65,0.70 0.76,0.80,0.81,0.84), mean=0.618, stddev=0.0681], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.14,0.16 0.17,0.19,0.20,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.197, stddev=0.0179] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0118291, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.81,-0.72,-0.50 -0.37,-0.23,-0.003,0.22,0.36 0.51,0.70,0.74,0.87), mean=-0.000921, stddev=0.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.25,0.29 0.34,0.39,0.45,0.50,0.51 0.52,0.54,0.55,0.67), mean=0.44, stddev=0.0709] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063525, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.54,0.55,0.58 0.61,0.63,0.67,0.70,0.73 0.74,0.76,0.77,0.86), mean=0.666, stddev=0.0487], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.17,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.178, stddev=0.015] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0077301, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.76,-0.47 -0.34,-0.21,-0.005,0.20,0.32 0.48,0.69,0.73,0.85), mean=-0.0029, stddev=0.285], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.28,0.34 0.43,0.53,0.62,0.67,0.69 0.70,0.71,0.72,0.74), mean=0.59, stddev=0.104] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.47015e-06, count-zeroing-boundaries=223706
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0865014
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000155103, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07502, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.0,1.0,1.1 1.1,1.2,1.6,2.1,2.2 2.2,2.3,2.3,2.4), mean=1.65, stddev=0.437], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.85,0.92,0.97 1.0,1.1,1.2,1.3,1.4 1.5,1.6,1.6,1.7), mean=1.2, stddev=0.168], bias-{mean,stddev}=-0.007721,0.3886, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000155103, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03794, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.50,0.51,0.52 0.54,0.56,0.60,0.64,0.67 0.70,0.75,0.81,2.2), mean=0.606, stddev=0.0851], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.6,2.1,2.2 2.3,2.3,2.3,2.5), mean=1.69, stddev=0.423], bias-{mean,stddev}=4.66e-09,0.02891, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0169, stddev=0.0137], oderiv-count=542080
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/208.mdl exp/nnet3/tdnn_lstm1c_sp/209.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.21498 tdnn2.affine:6.07752 lstm1.W_all:4.78758 lstm1.lstm_nonlin:0.0889658 lstm1.W_rp:1.95072 tdnn3.affine:3.95951 tdnn4.affine:4.45591 lstm2.W_all:3.30463 lstm2.lstm_nonlin:0.039295 lstm2.W_rp:1.35519 tdnn5.affine:3.09641 tdnn6.affine:3.56715 lstm3.W_all:4.1932 lstm3.lstm_nonlin:0.0772545 lstm3.W_rp:1.6391 output.affine:3.83911 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.2669 tdnn2.affine:10.043 lstm1.W_all:18.0986 lstm1.lstm_nonlin:1.15385 lstm1.W_rp:12.2679 tdnn3.affine:7.2924 tdnn4.affine:7.43663 lstm2.W_all:15.2274 lstm2.lstm_nonlin:0.50264 lstm2.W_rp:11.2739 tdnn5.affine:6.52893 tdnn6.affine:6.95478 lstm3.W_all:21.7077 lstm3.lstm_nonlin:1.7831 lstm3.W_rp:28.2867 output.affine:28.0901 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.553543 tdnn2.affine:0.604252 lstm1.W_all:0.264516 lstm1.lstm_nonlin:0.0772839 lstm1.W_rp:0.159226 tdnn3.affine:0.543332 tdnn4.affine:0.598884 lstm2.W_all:0.216959 lstm2.lstm_nonlin:0.0780765 lstm2.W_rp:0.12057 tdnn5.affine:0.473129 tdnn6.affine:0.511092 lstm3.W_all:0.193114 lstm3.lstm_nonlin:0.043073 lstm3.W_rp:0.0579496 output.affine:0.136461 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:23:42 KST 2020, elapsed time 0 seconds
