# nnet3-info exp/nnet3/tdnn_lstm1c_sp/27.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/26.mdl exp/nnet3/tdnn_lstm1c_sp/27.mdl 
# Started at Thu Jul 30 10:11:49 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/27.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000276254, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03156, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.01,0.02 0.03,0.20,0.56,0.66,0.72 0.78,0.85,0.89,1.3), mean=0.488, stddev=0.247], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.17,0.22,0.61,0.86,1.2 1.5,1.6,1.6,1.8), mean=0.609, stddev=0.383], bias-{mean,stddev}=-0.004743,0.05825, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.38e+05, self-repaired-proportion=0.158594, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,2e-06,4e-06,2e-05 0.0001,0.001,0.06,0.09,0.10 0.11,0.13,0.14,0.17), mean=0.056, stddev=0.0379], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0007,0.003,0.01 0.03,0.09,0.45,0.60,0.67 0.74,0.79,0.85,0.91), mean=0.396, stddev=0.234], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.06,0.23,0.36,0.44,0.51 0.57,0.71,0.78,0.88), mean=0.337, stddev=0.163], oderiv-count=1.14918e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31733.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,6e-07,1e-06,7e-06 4e-05,0.0008,0.06,0.08,0.10 0.11,0.12,0.13,0.19), mean=0.0532, stddev=0.0374], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,3e-05,6e-05,0.0001 0.0004,0.004,0.10,0.12,0.12 0.13,0.14,0.14,0.16), mean=0.0803, stddev=0.0463]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000276254, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01311, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.40,0.41,0.43 0.45,0.47,0.51,0.56,0.58 0.61,0.63,0.65,0.72), mean=0.515, stddev=0.0543], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.01 0.02,0.11,0.31,0.36,0.38 0.40,0.43,0.45,0.68), mean=0.269, stddev=0.13], bias-{mean,stddev}=0.0004473,0.03028, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.23e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.29,0.30 0.31,0.32,0.35,0.38,0.40 0.41,0.43,0.45,0.52), mean=0.354, stddev=0.0364], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.41 0.42,0.43,0.46,0.49,0.50 0.52,0.52,0.53,0.54), mean=0.461, stddev=0.0315], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.08), mean=0.0407, stddev=0.00794], oderiv-count=1.23706e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31053.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.28,0.29 0.30,0.32,0.35,0.39,0.40 0.42,0.45,0.46,0.52), mean=0.352, stddev=0.0416], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.50,0.51,0.53 0.55,0.57,0.63,0.67,0.71 0.74,0.77,0.78,0.85), mean=0.626, stddev=0.063]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000276254, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01764, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.10 0.15,0.22,0.38,0.58,0.67 0.76,0.86,0.91,1.1), mean=0.402, stddev=0.201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.38,0.43 0.48,0.71,0.83,0.91,0.95 0.98,1.0,1.1,1.3), mean=0.787, stddev=0.167], bias-{mean,stddev}=-0.001294,0.04944, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000276254, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05181, w_fc-rms=0.06263, w_oc-rms=0.06214, count=1.46e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00604375, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.44 0.45,0.46,0.49,0.53,0.58 0.62,0.66,0.67,0.71), mean=0.5, stddev=0.053], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0146] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00604375, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.33,0.36,0.38 0.40,0.42,0.47,0.54,0.61 0.68,0.75,0.81,0.86), mean=0.489, stddev=0.0914], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.17,0.19 0.20,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.021] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00855571, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.78,-0.77,-0.67 -0.42,-0.27,0.02,0.30,0.41 0.61,0.70,0.77,0.85), mean=0.0111, stddev=0.347], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.30,0.35 0.40,0.45,0.58,0.69,0.79 0.87,0.93,0.94,0.99), mean=0.583, stddev=0.15] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00604375, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.41 0.42,0.44,0.47,0.50,0.53 0.56,0.60,0.61,0.70), mean=0.476, stddev=0.0458], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.20,0.21,0.22,0.24,0.24 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0168] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0155868, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.94,-0.82,-0.76,-0.62 -0.36,-0.22,0.005,0.24,0.39 0.57,0.68,0.77,0.91), mean=0.00541, stddev=0.319], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.23,0.26,0.42 0.55,0.70,0.82,0.88,0.90 0.94,0.97,0.97,1.0), mean=0.776, stddev=0.156] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=300198
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000276254, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03167, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.41 0.45,0.47,0.67,0.91,0.97 1.0,1.0,1.1,1.1), mean=0.691, stddev=0.208], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.10,0.17 0.25,0.35,0.47,0.61,0.70 0.77,0.90,0.95,1.1), mean=0.478, stddev=0.179], bias-{mean,stddev}=0.004739,0.06103, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000276254, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01339, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.27,0.29,0.36,0.42,0.47 0.52,0.55,0.58,0.63), mean=0.366, stddev=0.0783], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.16 0.18,0.20,0.28,0.39,0.42 0.44,0.47,0.48,0.52), mean=0.29, stddev=0.0939], bias-{mean,stddev}=-0.002081,0.01491, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.8e+05, self-repaired-proportion=0.000468442, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.07,0.08 0.09,0.11,0.15,0.19,0.21 0.23,0.25,0.27,0.32), mean=0.155, stddev=0.047], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.21,0.22,0.28 0.32,0.38,0.49,0.59,0.63 0.65,0.68,0.70,0.73), mean=0.48, stddev=0.116], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.07,0.08 0.09,0.10,0.11,0.19), mean=0.0661, stddev=0.0136], oderiv-count=1.0999e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29014.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.09,0.11,0.15,0.19,0.21 0.23,0.25,0.27,0.31), mean=0.148, stddev=0.0477], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.18 0.20,0.21,0.24,0.28,0.29 0.31,0.32,0.34,0.37), mean=0.242, stddev=0.0383]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000276254, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009772, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.30,0.30,0.32 0.33,0.35,0.38,0.41,0.44 0.45,0.47,0.49,0.54), mean=0.384, stddev=0.0409], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.18,0.19,0.22,0.25,0.27 0.28,0.30,0.32,0.36), mean=0.22, stddev=0.0356], bias-{mean,stddev}=-0.00844,0.0166, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.96e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.25 0.26,0.28,0.31,0.35,0.37 0.39,0.41,0.43,0.46), mean=0.313, stddev=0.0418], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.39,0.40 0.41,0.42,0.44,0.47,0.48 0.49,0.50,0.51,0.53), mean=0.445, stddev=0.0282], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.028, stddev=0.00251], oderiv-count=1.01114e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26975.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.23,0.24 0.25,0.27,0.30,0.35,0.37 0.38,0.40,0.42,0.46), mean=0.308, stddev=0.0434], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.43,0.45,0.48 0.50,0.53,0.58,0.64,0.68 0.70,0.75,0.78,0.86), mean=0.586, stddev=0.0716]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000276254, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0137, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.07,0.11,0.27,0.47,0.57 0.62,0.68,0.71,1.1), mean=0.297, stddev=0.184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.28,0.30 0.36,0.53,0.64,0.71,0.75 0.78,0.82,0.89,0.95), mean=0.609, stddev=0.141], bias-{mean,stddev}=-0.001074,0.04873, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000276254, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05068, w_fc-rms=0.05336, w_oc-rms=0.05279, count=1.33e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00609548, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.42,0.43,0.45 0.46,0.47,0.49,0.52,0.55 0.57,0.62,0.63,0.65), mean=0.496, stddev=0.0388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0148] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00609548, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.40,0.41 0.42,0.44,0.48,0.51,0.55 0.61,0.67,0.70,0.75), mean=0.486, stddev=0.0606], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.237, stddev=0.014] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00800684, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.72,-0.63,-0.49 -0.35,-0.21,0.002,0.21,0.37 0.52,0.63,0.69,0.80), mean=0.00357, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.40,0.43,0.50 0.52,0.56,0.65,0.83,0.92 0.96,0.98,0.98,0.99), mean=0.684, stddev=0.148] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00609548, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.41,0.42,0.43 0.45,0.46,0.48,0.51,0.53 0.56,0.60,0.61,0.64), mean=0.486, stddev=0.0383], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0151] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00609548, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.73,-0.64,-0.43 -0.30,-0.17,0.01,0.17,0.31 0.48,0.63,0.71,0.86), mean=0.00753, stddev=0.261], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.39,0.42,0.61 0.73,0.80,0.87,0.92,0.96 0.98,0.99,0.99,1.0), mean=0.846, stddev=0.118] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.75e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=264780
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000276254, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02854, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.45,0.46 0.49,0.52,0.61,0.76,0.81 0.86,0.90,0.91,0.95), mean=0.639, stddev=0.126], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.09 0.12,0.19,0.40,0.59,0.68 0.75,0.90,0.92,1.1), mean=0.407, stddev=0.215], bias-{mean,stddev}=-0.0003093,0.08097, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000276254, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01249, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.15,0.20,0.22 0.24,0.26,0.32,0.40,0.46 0.51,0.60,0.63,0.70), mean=0.336, stddev=0.0943], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.19 0.20,0.22,0.27,0.34,0.36 0.39,0.41,0.43,0.45), mean=0.278, stddev=0.0621], bias-{mean,stddev}=-0.0001992,0.01791, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.62e+05, self-repaired-proportion=0.00488879, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.01,0.02,0.05 0.06,0.08,0.11,0.14,0.16 0.17,0.19,0.20,0.23), mean=0.109, stddev=0.0398], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.13,0.13,0.20 0.24,0.30,0.43,0.54,0.57 0.61,0.64,0.66,0.71), mean=0.419, stddev=0.13], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.06,0.07,0.08,0.10 0.11,0.12,0.13,0.16), mean=0.0725, stddev=0.018], oderiv-count=987136
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24935.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.01,0.02,0.04 0.06,0.07,0.10,0.14,0.16 0.17,0.19,0.19,0.23), mean=0.107, stddev=0.0407], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.04,0.06,0.13 0.14,0.16,0.19,0.22,0.24 0.25,0.27,0.29,0.33), mean=0.19, stddev=0.0431]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000276254, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009525, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.30,0.31 0.32,0.33,0.37,0.41,0.44 0.46,0.50,0.52,0.58), mean=0.373, stddev=0.0484], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.11,0.13,0.15 0.16,0.17,0.20,0.24,0.27 0.30,0.34,0.38,0.48), mean=0.211, stddev=0.0506], bias-{mean,stddev}=-0.01225,0.01585, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.46e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.24,0.25 0.27,0.28,0.32,0.35,0.37 0.38,0.41,0.41,0.57), mean=0.319, stddev=0.0424], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.37,0.37 0.38,0.40,0.42,0.44,0.46 0.47,0.49,0.49,0.50), mean=0.422, stddev=0.0287], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0244, stddev=0.0026], oderiv-count=961600
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=22896.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.22,0.23,0.25 0.26,0.28,0.32,0.36,0.38 0.40,0.41,0.42,0.66), mean=0.32, stddev=0.0479], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.48,0.51 0.54,0.56,0.61,0.68,0.72 0.76,0.79,0.81,0.97), mean=0.619, stddev=0.077]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000276254, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01904, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.16,0.20 0.26,0.32,0.42,0.59,0.73 0.79,0.83,0.86,1.3), mean=0.455, stddev=0.17], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.60,0.62,0.64 0.66,0.68,0.74,1.0,1.2 1.3,1.4,1.4,1.6), mean=0.84, stddev=0.219], bias-{mean,stddev}=0.008165,0.05494, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000276254, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05376, w_fc-rms=0.06535, w_oc-rms=0.07143, count=1.21e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615792, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.44,0.44,0.46 0.48,0.51,0.57,0.62,0.64 0.66,0.68,0.69,0.70), mean=0.567, stddev=0.0612], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.18 0.19,0.20,0.21,0.22,0.23 0.23,0.23,0.24,0.24), mean=0.207, stddev=0.014] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615792, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.46,0.47 0.49,0.52,0.58,0.63,0.65 0.69,0.71,0.73,0.83), mean=0.577, stddev=0.0664], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.16,0.18 0.19,0.19,0.21,0.22,0.23 0.23,0.24,0.24,0.25), mean=0.208, stddev=0.0181] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00806915, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.76,-0.73,-0.47 -0.36,-0.20,0.002,0.21,0.37 0.49,0.62,0.71,0.82), mean=0.00187, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.27,0.30,0.34 0.38,0.40,0.46,0.52,0.55 0.59,0.62,0.66,0.73), mean=0.463, stddev=0.0747] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615792, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.51,0.52,0.54 0.55,0.58,0.63,0.68,0.70 0.72,0.74,0.75,0.76), mean=0.631, stddev=0.0552], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.16,0.17 0.17,0.18,0.19,0.20,0.21 0.21,0.22,0.22,0.23), mean=0.191, stddev=0.0144] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0103298, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.78,-0.73,-0.46 -0.32,-0.18,-0.0007,0.19,0.34 0.49,0.63,0.71,0.84), mean=0.0019, stddev=0.28], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.29,0.35,0.44 0.52,0.59,0.66,0.71,0.73 0.75,0.77,0.78,0.83), mean=0.64, stddev=0.0954] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.51e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=225179
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000276254, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06519, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.5,1.6,1.7 1.8,1.8,1.8,2.0), mean=1.48, stddev=0.184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.51,0.62,0.72 0.79,0.86,1.0,1.2,1.3 1.3,1.4,1.4,1.7), mean=1.03, stddev=0.19], bias-{mean,stddev}=0.004604,0.1129, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000276254, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04113, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.52,0.53,0.55 0.57,0.59,0.64,0.71,0.75 0.79,0.84,0.88,2.4), mean=0.655, stddev=0.103], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.6,1.7,1.9,2.0,2.1 2.2,2.3,2.3,2.5), mean=1.88, stddev=0.199], bias-{mean,stddev}=4.816e-09,0.03018, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0167, stddev=0.0139], oderiv-count=580480
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/26.mdl exp/nnet3/tdnn_lstm1c_sp/27.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.34887 tdnn2.affine:9.61375 lstm1.W_all:8.37807 lstm1.lstm_nonlin:0.268161 lstm1.W_rp:3.42701 tdnn3.affine:5.71203 tdnn4.affine:6.8353 lstm2.W_all:5.47757 lstm2.lstm_nonlin:0.222849 lstm2.W_rp:2.32553 tdnn5.affine:4.73329 tdnn6.affine:5.82656 lstm3.W_all:7.00348 lstm3.lstm_nonlin:0.25669 lstm3.W_rp:2.87347 output.affine:6.43366 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.5356 tdnn2.affine:11.8269 lstm1.W_all:20.6378 lstm1.lstm_nonlin:2.33317 lstm1.W_rp:11.6852 tdnn3.affine:8.53203 tdnn4.affine:8.8117 lstm2.W_all:16.0799 lstm2.lstm_nonlin:2.06535 lstm2.W_rp:10.5765 tdnn5.affine:7.96178 tdnn6.affine:8.59104 lstm3.W_all:22.2876 lstm3.lstm_nonlin:2.52514 lstm3.W_rp:24.0407 output.affine:30.4485 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.757233 tdnn2.affine:0.823913 lstm1.W_all:0.407847 lstm1.lstm_nonlin:0.107662 lstm1.W_rp:0.295002 tdnn3.affine:0.675907 tdnn4.affine:0.779987 lstm2.W_all:0.339827 lstm2.lstm_nonlin:0.0984717 lstm2.W_rp:0.220594 tdnn5.affine:0.597272 tdnn6.affine:0.680455 lstm3.W_all:0.314437 lstm3.lstm_nonlin:0.0959938 lstm3.W_rp:0.119402 output.affine:0.210942 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:11:50 KST 2020, elapsed time 1 seconds
