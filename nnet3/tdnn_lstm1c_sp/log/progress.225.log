# nnet3-info exp/nnet3/tdnn_lstm1c_sp/225.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/224.mdl exp/nnet3/tdnn_lstm1c_sp/225.mdl 
# Started at Thu Jul 30 11:30:02 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/225.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000147428, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0278, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.01,0.01 0.02,0.11,0.49,0.59,0.64 0.71,0.78,0.83,1.0), mean=0.425, stddev=0.227], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.16,0.19,0.56,0.74,0.99 1.2,1.3,1.4,1.4), mean=0.542, stddev=0.329], bias-{mean,stddev}=0.003668,0.05082, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.65e+05, self-repaired-proportion=0.143453, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,9e-06,1e-05,4e-05 0.0001,0.0009,0.05,0.08,0.10 0.11,0.13,0.14,0.15), mean=0.0502, stddev=0.0367], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.007,0.02 0.04,0.10,0.46,0.62,0.74 0.79,0.87,0.90,0.96), mean=0.415, stddev=0.249], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.03 0.04,0.19,0.35,0.46,0.53 0.62,0.73,0.91,1.6), mean=0.338, stddev=0.195], oderiv-count=1.25722e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35780.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,4e-06,6e-06,1e-05 5e-05,0.0006,0.05,0.08,0.10 0.11,0.13,0.14,0.18), mean=0.0483, stddev=0.0369], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,7e-05,0.0001,0.0002 0.0004,0.004,0.08,0.10,0.11 0.12,0.13,0.13,0.14), mean=0.067, stddev=0.0407]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000147428, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01094, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.34,0.35 0.37,0.39,0.42,0.47,0.49 0.52,0.55,0.58,0.65), mean=0.429, stddev=0.0514], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.006,0.008 0.01,0.07,0.26,0.30,0.32 0.35,0.38,0.43,0.63), mean=0.221, stddev=0.115], bias-{mean,stddev}=-0.006434,0.02921, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.24,0.25,0.28,0.31,0.33 0.35,0.37,0.39,0.55), mean=0.283, stddev=0.0382], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.39,0.41 0.42,0.43,0.46,0.48,0.50 0.51,0.52,0.53,0.54), mean=0.458, stddev=0.0314], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.05,0.06 0.07,0.07,0.07,0.08), mean=0.0476, stddev=0.00916], oderiv-count=1.10982e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35006.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.23,0.25,0.27,0.31,0.33 0.35,0.39,0.41,0.59), mean=0.28, stddev=0.0425], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.40,0.42 0.43,0.45,0.49,0.54,0.57 0.60,0.63,0.65,0.88), mean=0.498, stddev=0.0589]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000147428, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01531, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,2e-05,7e-05,0.0005 0.004,0.14,0.34,0.52,0.60 0.66,0.73,0.76,0.97), mean=0.332, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.29,0.30,0.35 0.40,0.61,0.71,0.79,0.83 0.88,0.94,0.99,1.2), mean=0.681, stddev=0.155], bias-{mean,stddev}=-0.0003054,0.02221, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000147428, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03125, w_fc-rms=0.02534, w_oc-rms=0.03123, count=1.51e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616173, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.44,0.45 0.46,0.46,0.48,0.50,0.53 0.60,0.72,0.75,0.78), mean=0.496, stddev=0.0554], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0161] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616173, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.42,0.42,0.44 0.45,0.47,0.49,0.51,0.54 0.61,0.69,0.72,0.77), mean=0.498, stddev=0.053], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.237, stddev=0.0147] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00998419, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.85,-0.81,-0.43 -0.27,-0.14,0.003,0.16,0.30 0.42,0.74,0.83,0.89), mean=0.00709, stddev=0.272], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.23,0.26,0.36 0.43,0.49,0.62,0.81,1.0 1.0,1.0,1.0,1.0), mean=0.647, stddev=0.196] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616173, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.44,0.46,0.50,0.50 0.51,0.54,0.55,0.60), mean=0.467, stddev=0.03], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.226, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00616173, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.78,-0.67,-0.34 -0.20,-0.10,0.002,0.12,0.22 0.33,0.58,0.72,0.83), mean=0.00474, stddev=0.222], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.33,0.38,0.58 0.73,0.80,0.87,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.852, stddev=0.131] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2.02e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.30767e-06, count-zeroing-boundaries=302328
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.10854
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000147428, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03149, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.23 0.24,0.30,0.55,0.98,1.0 1.1,1.1,1.2,1.2), mean=0.636, stddev=0.333], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.002,0.004 0.02,0.24,0.43,0.59,0.70 0.89,1.2,1.4,1.5), mean=0.429, stddev=0.272], bias-{mean,stddev}=0.01306,0.2505, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000147428, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.19,0.19,0.21 0.22,0.24,0.30,0.37,0.41 0.43,0.46,0.47,0.56), mean=0.309, stddev=0.0703], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.11,0.21,0.35,0.38 0.40,0.43,0.44,0.47), mean=0.229, stddev=0.12], bias-{mean,stddev}=0.003005,0.01709, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.2e+06, self-repaired-proportion=0.00113636, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.03,0.04 0.05,0.06,0.08,0.10,0.11 0.13,0.14,0.14,0.15), mean=0.081, stddev=0.0263], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.15,0.17,0.25 0.31,0.38,0.50,0.62,0.67 0.71,0.74,0.76,0.83), mean=0.496, stddev=0.138], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.10 0.11,0.11,0.13,0.15,0.18 0.20,0.22,0.25,0.39), mean=0.136, stddev=0.0339], oderiv-count=1.12051e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32684, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.02,0.03,0.04 0.04,0.06,0.08,0.10,0.11 0.13,0.14,0.14,0.16), mean=0.0792, stddev=0.0264], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.08,0.09,0.09 0.10,0.11,0.13,0.14,0.15 0.16,0.17,0.17,0.21), mean=0.125, stddev=0.0209]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000147428, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008142, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.26,0.28 0.28,0.29,0.32,0.34,0.36 0.38,0.40,0.43,0.50), mean=0.32, stddev=0.0337], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.12,0.13,0.13 0.14,0.15,0.18,0.21,0.23 0.24,0.26,0.28,0.33), mean=0.182, stddev=0.0342], bias-{mean,stddev}=-0.01382,0.01476, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.67e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.22,0.24,0.27,0.28 0.29,0.30,0.32,0.37), mean=0.246, stddev=0.0292], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.49,0.51,0.51,0.54), mean=0.44, stddev=0.0322], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.0389, stddev=0.00313], oderiv-count=1.14054e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30361.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.21,0.22,0.24,0.27,0.28 0.29,0.30,0.32,0.37), mean=0.244, stddev=0.0305], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.40 0.41,0.43,0.47,0.51,0.53 0.55,0.59,0.63,0.77), mean=0.471, stddev=0.0508]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000147428, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0129, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,6e-07,9e-07,2e-06 9e-06,0.0002,0.27,0.46,0.54 0.58,0.62,0.65,1.1), mean=0.249, stddev=0.215], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.25,0.26,0.32 0.44,0.52,0.59,0.64,0.67 0.72,0.81,0.90,1.5), mean=0.576, stddev=0.12], bias-{mean,stddev}=-0.003231,0.04818, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000147428, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01159, w_fc-rms=0.008922, w_oc-rms=0.01756, count=1.38e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621235, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.43,0.44 0.45,0.46,0.50,0.51,0.55 0.60,0.64,0.67,0.75), mean=0.5, stddev=0.0471], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.22,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0141] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621235, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.40,0.42 0.43,0.45,0.50,0.50,0.51 0.53,0.57,0.59,0.73), mean=0.483, stddev=0.0421], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0122] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00812348, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.79,-0.58,-0.35 -0.27,-0.12,-3e-05,0.13,0.26 0.40,0.65,0.71,0.85), mean=0.003, stddev=0.235], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.29,0.35,0.48 0.53,0.58,0.67,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.748, stddev=0.204] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621235, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.44,0.45,0.50,0.50,0.51 0.54,0.57,0.59,0.65), mean=0.484, stddev=0.0368], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0149] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00621235, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.51,-0.40,-0.25 -0.19,-0.09,3e-05,0.09,0.19 0.30,0.46,0.54,0.70), mean=0.00321, stddev=0.177], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.52,0.62,0.72 0.80,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.905, stddev=0.102] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.77e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.4994e-06, count-zeroing-boundaries=266688
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.10854
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000147428, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02992, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.34,0.38 0.40,0.42,0.60,0.87,0.92 0.95,0.99,1.0,1.1), mean=0.647, stddev=0.217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0006,0.0008 0.002,0.004,0.46,0.64,0.73 0.81,0.96,1.0,1.2), mean=0.375, stddev=0.304], bias-{mean,stddev}=0.0003515,0.1741, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000147428, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0102, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.20 0.21,0.23,0.26,0.33,0.37 0.40,0.44,0.45,0.48), mean=0.278, stddev=0.0624], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.14,0.20,0.30,0.33 0.34,0.36,0.37,0.41), mean=0.219, stddev=0.0777], bias-{mean,stddev}=0.0008157,0.008826, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.6e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.04,0.06,0.07,0.08 0.09,0.09,0.10,0.12), mean=0.0558, stddev=0.0189], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.19,0.23 0.28,0.34,0.47,0.57,0.61 0.63,0.67,0.69,0.72), mean=0.457, stddev=0.124], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.13,0.13,0.15,0.18,0.20 0.22,0.24,0.26,0.32), mean=0.155, stddev=0.0315], oderiv-count=990848
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28039.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.04,0.06,0.07,0.08 0.09,0.10,0.10,0.12), mean=0.0556, stddev=0.0191], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.07,0.08,0.09,0.10,0.11 0.11,0.12,0.12,0.14), mean=0.0915, stddev=0.0151]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000147428, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007597, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.22 0.24,0.26,0.29,0.34,0.36 0.37,0.39,0.39,0.45), mean=0.296, stddev=0.0467], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.14,0.16,0.20,0.22 0.24,0.27,0.29,0.35), mean=0.169, stddev=0.0377], bias-{mean,stddev}=-0.01174,0.02166, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.13e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.17,0.19 0.20,0.22,0.24,0.27,0.28 0.29,0.30,0.32,0.39), mean=0.242, stddev=0.033], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.35,0.37 0.38,0.40,0.42,0.44,0.46 0.47,0.48,0.49,0.50), mean=0.42, stddev=0.029], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.032, stddev=0.00276], oderiv-count=996160
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25716.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.16,0.17,0.19 0.20,0.22,0.24,0.27,0.28 0.29,0.31,0.32,0.48), mean=0.243, stddev=0.0353], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.29,0.36 0.39,0.43,0.48,0.53,0.56 0.59,0.60,0.62,0.86), mean=0.477, stddev=0.0716]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000147428, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01841, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.22,0.24,0.26 0.28,0.32,0.42,0.60,0.67 0.71,0.74,0.75,1.2), mean=0.448, stddev=0.141], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.59,0.62 0.64,0.66,0.71,0.97,1.2 1.3,1.4,1.5,1.8), mean=0.809, stddev=0.226], bias-{mean,stddev}=0.02334,0.02325, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000147428, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05125, w_fc-rms=0.04275, w_oc-rms=0.04025, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627341, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.59,0.62 0.63,0.65,0.70,0.73,0.76 0.78,0.80,0.81,0.85), mean=0.697, stddev=0.0495], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.16,0.17,0.18,0.20,0.20 0.20,0.21,0.21,0.23), mean=0.182, stddev=0.0166] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627341, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.47,0.50,0.53 0.55,0.58,0.62,0.67,0.72 0.76,0.82,0.82,0.84), mean=0.627, stddev=0.0685], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.17,0.19,0.20,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.195, stddev=0.0189] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0120547, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.80,-0.68,-0.52 -0.36,-0.22,0.002,0.22,0.34 0.52,0.69,0.74,0.91), mean=0.00224, stddev=0.297], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.22,0.24,0.29 0.34,0.41,0.47,0.51,0.53 0.54,0.56,0.57,0.60), mean=0.455, stddev=0.0747] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627341, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.54,0.55,0.58 0.61,0.64,0.67,0.71,0.73 0.74,0.77,0.79,0.86), mean=0.672, stddev=0.0497], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.15 0.16,0.17,0.18,0.19,0.19 0.19,0.20,0.20,0.21), mean=0.176, stddev=0.0151] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00871424, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.78,-0.67,-0.47 -0.33,-0.19,0.005,0.20,0.31 0.50,0.67,0.71,0.89), mean=0.000297, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.27,0.28,0.37 0.45,0.55,0.63,0.68,0.69 0.71,0.72,0.73,0.75), mean=0.601, stddev=0.102] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.52e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=226851
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.10854
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000147428, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07594, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.0,1.0,1.1 1.1,1.2,1.6,2.1,2.2 2.3,2.4,2.4,2.5), mean=1.67, stddev=0.456], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.83,0.93,0.97 1.0,1.1,1.2,1.4,1.5 1.6,1.6,1.7,1.7), mean=1.21, stddev=0.183], bias-{mean,stddev}=-0.02244,0.4202, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000147428, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03781, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.51,0.53 0.54,0.56,0.59,0.64,0.67 0.70,0.75,0.81,2.1), mean=0.604, stddev=0.0838], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.1,1.1 1.2,1.2,1.6,2.1,2.2 2.3,2.3,2.3,2.5), mean=1.68, stddev=0.436], bias-{mean,stddev}=4.972e-09,0.02741, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=624000
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/224.mdl exp/nnet3/tdnn_lstm1c_sp/225.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.99693 tdnn2.affine:5.8327 lstm1.W_all:4.51859 lstm1.lstm_nonlin:0.0887697 lstm1.W_rp:1.87404 tdnn3.affine:3.84809 tdnn4.affine:4.29054 lstm2.W_all:3.15212 lstm2.lstm_nonlin:0.0404738 lstm2.W_rp:1.31727 tdnn5.affine:3.0827 tdnn6.affine:3.49532 lstm3.W_all:3.90127 lstm3.lstm_nonlin:0.0770961 lstm3.W_rp:1.5039 output.affine:3.58896 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.0407 tdnn2.affine:9.87794 lstm1.W_all:17.8312 lstm1.lstm_nonlin:1.16133 lstm1.W_rp:12.2653 tdnn3.affine:7.23259 tdnn4.affine:7.34737 lstm2.W_all:15.163 lstm2.lstm_nonlin:0.521224 lstm2.W_rp:11.353 tdnn5.affine:6.50105 tdnn6.affine:6.86518 lstm3.W_all:21.4636 lstm3.lstm_nonlin:1.77727 lstm3.W_rp:28.7357 output.affine:27.9958 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.540341 tdnn2.affine:0.585516 lstm1.W_all:0.252695 lstm1.lstm_nonlin:0.077084 lstm1.W_rp:0.152832 tdnn3.affine:0.531926 tdnn4.affine:0.583244 lstm2.W_all:0.207862 lstm2.lstm_nonlin:0.0783492 lstm2.W_rp:0.116199 tdnn5.affine:0.476321 tdnn6.affine:0.509486 lstm3.W_all:0.181691 lstm3.lstm_nonlin:0.0433126 lstm3.W_rp:0.0524442 output.affine:0.128183 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:30:02 KST 2020, elapsed time 0 seconds
