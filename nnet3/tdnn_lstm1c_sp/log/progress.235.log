# nnet3-info exp/nnet3/tdnn_lstm1c_sp/235.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/234.mdl exp/nnet3/tdnn_lstm1c_sp/235.mdl 
# Started at Thu Jul 30 11:33:57 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/235.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000142826, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0275, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.008,0.01 0.02,0.13,0.49,0.58,0.64 0.70,0.76,0.77,1.1), mean=0.421, stddev=0.222], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.14 0.15,0.18,0.54,0.75,1.0 1.2,1.3,1.4,1.4), mean=0.535, stddev=0.327], bias-{mean,stddev}=0.002424,0.05003, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0.124072, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,8e-06,2e-05,4e-05 0.0001,0.001,0.05,0.08,0.09 0.11,0.12,0.14,0.17), mean=0.0492, stddev=0.0364], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.002,0.008,0.02 0.05,0.12,0.45,0.61,0.71 0.80,0.89,0.90,0.98), mean=0.414, stddev=0.244], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.02 0.03,0.23,0.35,0.45,0.51 0.57,0.69,0.86,1.7), mean=0.332, stddev=0.189], oderiv-count=1.19398e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38416.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,3e-06,7e-06,2e-05 9e-05,0.0007,0.05,0.07,0.10 0.11,0.13,0.14,0.17), mean=0.0471, stddev=0.0366], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,6e-05,0.0001,0.0002 0.0005,0.003,0.08,0.10,0.10 0.11,0.12,0.13,0.14), mean=0.0655, stddev=0.0394]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000142826, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01076, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.34,0.35 0.37,0.38,0.42,0.46,0.49 0.51,0.55,0.56,0.62), mean=0.422, stddev=0.0497], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.007 0.01,0.07,0.26,0.29,0.32 0.34,0.37,0.41,0.65), mean=0.218, stddev=0.113], bias-{mean,stddev}=-0.007723,0.03002, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.83e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.22,0.23 0.24,0.25,0.27,0.30,0.32 0.34,0.37,0.38,0.49), mean=0.278, stddev=0.0365], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.40,0.41 0.42,0.43,0.46,0.48,0.50 0.51,0.52,0.53,0.56), mean=0.457, stddev=0.0322], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.06,0.06 0.07,0.07,0.07,0.08), mean=0.0481, stddev=0.00863], oderiv-count=1.15648e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37576.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.23,0.24,0.27,0.30,0.33 0.35,0.38,0.41,0.47), mean=0.274, stddev=0.0412], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.41 0.42,0.44,0.48,0.53,0.56 0.59,0.62,0.65,0.74), mean=0.488, stddev=0.0553]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000142826, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01521, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,1e-05,4e-05,0.0003 0.003,0.13,0.33,0.51,0.60 0.65,0.72,0.77,1.0), mean=0.329, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.29,0.34 0.40,0.61,0.70,0.78,0.82 0.88,0.93,0.99,1.2), mean=0.676, stddev=0.155], bias-{mean,stddev}=-0.0002792,0.02265, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000142826, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03188, w_fc-rms=0.02429, w_oc-rms=0.03097, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623518, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.44,0.45 0.46,0.47,0.48,0.50,0.53 0.60,0.72,0.75,0.78), mean=0.496, stddev=0.0554], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0162] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623518, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.42,0.43,0.44 0.46,0.47,0.49,0.51,0.54 0.60,0.68,0.71,0.77), mean=0.5, stddev=0.0509], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.237, stddev=0.0146] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00837336, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.84,-0.81,-0.43 -0.26,-0.14,0.001,0.16,0.30 0.42,0.74,0.81,0.88), mean=0.00909, stddev=0.268], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.25,0.35 0.44,0.49,0.62,0.81,1.0 1.0,1.0,1.0,1.0), mean=0.651, stddev=0.196] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623518, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.41,0.42 0.43,0.44,0.46,0.50,0.50 0.51,0.52,0.54,0.59), mean=0.468, stddev=0.029], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.226, stddev=0.0168] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00623518, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.75,-0.65,-0.36 -0.18,-0.09,0.002,0.11,0.21 0.31,0.58,0.71,0.81), mean=0.00695, stddev=0.216], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.34,0.38,0.59 0.75,0.81,0.88,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.858, stddev=0.126] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.67203e-05, count-zeroing-boundaries=299037
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.122314
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000142826, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03164, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.22,0.24 0.26,0.31,0.60,0.98,1.0 1.1,1.1,1.2,1.2), mean=0.643, stddev=0.326], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.002,0.003 0.02,0.23,0.43,0.59,0.69 0.91,1.2,1.4,1.6), mean=0.43, stddev=0.275], bias-{mean,stddev}=0.01318,0.2467, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000142826, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01121, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.18,0.19,0.21 0.22,0.24,0.30,0.36,0.40 0.43,0.46,0.47,0.54), mean=0.306, stddev=0.0681], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.11,0.22,0.35,0.37 0.39,0.41,0.43,0.46), mean=0.228, stddev=0.116], bias-{mean,stddev}=0.002654,0.01572, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.00192308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.02,0.03,0.04 0.05,0.06,0.08,0.10,0.11 0.12,0.13,0.13,0.16), mean=0.0779, stddev=0.0248], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.18,0.21,0.25 0.32,0.39,0.51,0.61,0.66 0.69,0.72,0.73,0.80), mean=0.497, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.11,0.12,0.13,0.16,0.18 0.20,0.23,0.25,0.38), mean=0.141, stddev=0.0337], oderiv-count=1.15853e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35057.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.03,0.04 0.04,0.05,0.07,0.10,0.11 0.12,0.13,0.13,0.16), mean=0.0756, stddev=0.0248], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.08,0.08,0.09 0.09,0.10,0.12,0.14,0.15 0.15,0.17,0.18,0.19), mean=0.119, stddev=0.0216]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000142826, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007957, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.27 0.27,0.29,0.31,0.34,0.35 0.37,0.39,0.41,0.50), mean=0.312, stddev=0.0336], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.12,0.12,0.13 0.14,0.15,0.18,0.20,0.22 0.24,0.25,0.27,0.34), mean=0.178, stddev=0.0333], bias-{mean,stddev}=-0.01363,0.01453, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.08e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.25,0.27,0.28 0.29,0.31,0.32,0.37), mean=0.247, stddev=0.0298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.39 0.40,0.42,0.44,0.46,0.48 0.49,0.50,0.51,0.54), mean=0.439, stddev=0.03], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.039, stddev=0.0031], oderiv-count=1.1367e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32538.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.22,0.24,0.27,0.28 0.30,0.31,0.32,0.43), mean=0.243, stddev=0.0325], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.37,0.39 0.41,0.42,0.46,0.51,0.53 0.55,0.61,0.62,0.78), mean=0.467, stddev=0.0563]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000142826, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01288, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,5e-07,9e-07,2e-06 9e-06,0.0002,0.27,0.47,0.54 0.58,0.62,0.64,1.1), mean=0.248, stddev=0.215], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.24,0.26,0.32 0.43,0.53,0.58,0.64,0.68 0.72,0.78,0.92,1.5), mean=0.575, stddev=0.12], bias-{mean,stddev}=-0.002418,0.04906, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000142826, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01227, w_fc-rms=0.008985, w_oc-rms=0.01808, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628944, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.43,0.43,0.44 0.45,0.46,0.50,0.51,0.56 0.60,0.64,0.66,0.75), mean=0.5, stddev=0.0466], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0141] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628944, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.39,0.41,0.42 0.44,0.45,0.50,0.50,0.52 0.54,0.58,0.61,0.73), mean=0.487, stddev=0.0406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0123] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0079729, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.79,-0.57,-0.35 -0.26,-0.13,-0.0002,0.14,0.27 0.41,0.64,0.72,0.85), mean=0.00455, stddev=0.237], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.27,0.36,0.48 0.53,0.57,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.745, stddev=0.206] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628944, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.39,0.40,0.43 0.44,0.45,0.50,0.50,0.51 0.54,0.57,0.58,0.64), mean=0.485, stddev=0.0354], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0148] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00628944, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.48,-0.39,-0.25 -0.18,-0.09,-1e-05,0.10,0.19 0.30,0.49,0.54,0.67), mean=0.00414, stddev=0.176], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.55,0.63,0.72 0.79,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.905, stddev=0.1] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.75e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.58369e-06, count-zeroing-boundaries=263724
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.122314
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000142826, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03031, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.32,0.35,0.40 0.41,0.43,0.62,0.88,0.92 0.96,0.99,1.0,1.1), mean=0.657, stddev=0.215], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0006,0.0009 0.002,0.005,0.47,0.64,0.74 0.83,0.98,1.1,1.2), mean=0.379, stddev=0.308], bias-{mean,stddev}=-0.0003987,0.1717, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000142826, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0101, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.20 0.21,0.23,0.26,0.32,0.36 0.39,0.43,0.44,0.47), mean=0.276, stddev=0.0591], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.14,0.21,0.30,0.32 0.34,0.35,0.36,0.42), mean=0.218, stddev=0.0753], bias-{mean,stddev}=0.0004842,0.008367, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.77e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.02,0.02 0.03,0.04,0.06,0.07,0.08 0.09,0.10,0.10,0.11), mean=0.0564, stddev=0.0193], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.17,0.19,0.23 0.28,0.36,0.48,0.57,0.62 0.65,0.67,0.68,0.72), mean=0.463, stddev=0.125], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.12 0.13,0.13,0.15,0.18,0.20 0.23,0.25,0.27,0.31), mean=0.159, stddev=0.0337], oderiv-count=1.0135e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30019.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.02 0.03,0.04,0.06,0.07,0.08 0.09,0.10,0.10,0.11), mean=0.056, stddev=0.0195], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.06,0.06 0.07,0.08,0.09,0.10,0.11 0.12,0.13,0.13,0.15), mean=0.0917, stddev=0.0162]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000142826, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007519, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.21 0.23,0.26,0.29,0.33,0.36 0.37,0.38,0.39,0.45), mean=0.293, stddev=0.0474], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.14,0.16,0.19,0.22 0.24,0.27,0.29,0.34), mean=0.167, stddev=0.0371], bias-{mean,stddev}=-0.0114,0.02049, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.74e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.17,0.19 0.20,0.22,0.25,0.28,0.29 0.30,0.31,0.33,0.38), mean=0.247, stddev=0.0344], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.35,0.37 0.38,0.39,0.42,0.45,0.46 0.47,0.48,0.48,0.51), mean=0.42, stddev=0.0318], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0315, stddev=0.00267], oderiv-count=946560
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27500.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.18 0.20,0.21,0.24,0.27,0.29 0.30,0.31,0.33,0.41), mean=0.244, stddev=0.0362], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.28,0.35 0.39,0.43,0.48,0.55,0.59 0.62,0.65,0.66,0.89), mean=0.487, stddev=0.0837]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000142826, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01834, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.22,0.24,0.26 0.28,0.31,0.42,0.59,0.66 0.70,0.73,0.76,1.3), mean=0.446, stddev=0.14], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.59,0.62 0.64,0.66,0.72,0.96,1.2 1.2,1.4,1.5,1.9), mean=0.808, stddev=0.217], bias-{mean,stddev}=0.02264,0.0223, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000142826, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05154, w_fc-rms=0.04103, w_oc-rms=0.03935, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635495, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.61,0.63 0.64,0.67,0.71,0.74,0.77 0.78,0.81,0.83,0.85), mean=0.706, stddev=0.0481], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.21,0.23), mean=0.179, stddev=0.017] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635495, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.47,0.51,0.53 0.55,0.58,0.63,0.67,0.72 0.77,0.82,0.83,0.85), mean=0.633, stddev=0.0691], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.15 0.17,0.18,0.20,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.194, stddev=0.0195] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0130057, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.80,-0.71,-0.49 -0.36,-0.23,0.005,0.22,0.35 0.55,0.70,0.76,0.89), mean=0.00118, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.21,0.23,0.29 0.33,0.41,0.47,0.51,0.53 0.55,0.57,0.57,0.72), mean=0.455, stddev=0.0778] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635495, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.53,0.55,0.58 0.61,0.64,0.68,0.71,0.73 0.75,0.78,0.79,0.85), mean=0.675, stddev=0.0509], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.15 0.16,0.17,0.18,0.19,0.19 0.19,0.20,0.20,0.21), mean=0.175, stddev=0.0153] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00697866, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.77,-0.66,-0.48 -0.33,-0.20,0.001,0.20,0.30 0.50,0.65,0.73,0.88), mean=-0.000154, stddev=0.281], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.30,0.37 0.46,0.55,0.63,0.68,0.69 0.71,0.72,0.72,0.77), mean=0.604, stddev=0.0999] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.33296e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.45909e-06, count-zeroing-boundaries=224261
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.122314
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000142826, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07626, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.0,1.1 1.1,1.2,1.6,2.2,2.2 2.3,2.4,2.4,2.6), mean=1.68, stddev=0.467], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.73,0.92,0.97 1.0,1.1,1.2,1.4,1.5 1.6,1.7,1.7,1.8), mean=1.21, stddev=0.193], bias-{mean,stddev}=-0.03187,0.4398, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000142826, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03763, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.50,0.51,0.52 0.54,0.56,0.59,0.64,0.67 0.70,0.75,0.80,2.1), mean=0.601, stddev=0.0832], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.1,1.1 1.1,1.2,1.6,2.1,2.2 2.2,2.3,2.3,2.4), mean=1.67, stddev=0.441], bias-{mean,stddev}=4.788e-09,0.02648, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0136], oderiv-count=571520
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/234.mdl exp/nnet3/tdnn_lstm1c_sp/235.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.76269 tdnn2.affine:5.56373 lstm1.W_all:4.3037 lstm1.lstm_nonlin:0.0763167 lstm1.W_rp:1.78726 tdnn3.affine:3.69927 tdnn4.affine:4.08217 lstm2.W_all:3.01627 lstm2.lstm_nonlin:0.0367413 lstm2.W_rp:1.23812 tdnn5.affine:2.90378 tdnn6.affine:3.30729 lstm3.W_all:3.66516 lstm3.lstm_nonlin:0.0655875 lstm3.W_rp:1.41247 output.affine:3.4904 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:10.9199 tdnn2.affine:9.71764 lstm1.W_all:17.711 lstm1.lstm_nonlin:1.15488 lstm1.W_rp:12.2956 tdnn3.affine:7.15101 tdnn4.affine:7.18105 lstm2.W_all:15.1381 lstm2.lstm_nonlin:0.538813 lstm2.W_rp:11.4828 tdnn5.affine:6.43822 tdnn6.affine:6.7935 lstm3.W_all:21.3745 lstm3.lstm_nonlin:1.74969 lstm3.W_rp:28.9273 output.affine:27.8596 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.525418 tdnn2.affine:0.570918 lstm1.W_all:0.242893 lstm1.lstm_nonlin:0.0659651 lstm1.W_rp:0.145618 tdnn3.affine:0.51549 tdnn4.affine:0.565894 lstm2.W_all:0.199309 lstm2.lstm_nonlin:0.0680448 lstm2.W_rp:0.107843 tdnn5.affine:0.449271 tdnn6.affine:0.486176 lstm3.W_all:0.171388 lstm3.lstm_nonlin:0.0373459 lstm3.W_rp:0.0488611 output.affine:0.125271 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:33:57 KST 2020, elapsed time 0 seconds
