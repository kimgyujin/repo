# nnet3-info exp/nnet3/tdnn_lstm1c_sp/407.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/406.mdl exp/nnet3/tdnn_lstm1c_sp/407.mdl 
# Started at Thu Jul 30 12:42:27 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/407.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=9.84073e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03247, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.005,0.006 0.008,0.02,0.57,0.72,0.80 0.86,0.94,1.0,1.3), mean=0.469, stddev=0.311], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.19,0.23,0.68,0.93,1.1 1.3,1.4,1.4,1.5), mean=0.645, stddev=0.364], bias-{mean,stddev}=-0.005588,0.05991, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.64e+05, self-repaired-proportion=0.180318, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,2e-05,2e-05,3e-05 5e-05,0.0001,0.04,0.09,0.11 0.12,0.14,0.14,0.18), mean=0.0454, stddev=0.0447], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.02,0.03 0.05,0.06,0.36,0.59,0.70 0.79,0.88,0.91,0.98), mean=0.346, stddev=0.263], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.009,0.01 0.02,0.03,0.37,0.53,0.65 0.74,0.82,0.93,1.7), mean=0.352, stddev=0.252], oderiv-count=1.2416e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30346.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,1e-05,2e-05,3e-05 5e-05,0.0002,0.04,0.08,0.11 0.13,0.14,0.16,0.18), mean=0.0433, stddev=0.0438], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,9e-05,0.0001,0.0002 0.0003,0.0007,0.07,0.11,0.12 0.13,0.14,0.15,0.16), mean=0.0609, stddev=0.0495]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.84073e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01158, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.35,0.36 0.37,0.40,0.44,0.50,0.54 0.57,0.63,0.65,0.76), mean=0.453, stddev=0.0674], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.004,0.009,0.28,0.33,0.37 0.39,0.43,0.45,0.75), mean=0.22, stddev=0.147], bias-{mean,stddev}=-0.0357,0.03844, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.20,0.22,0.25,0.29,0.31 0.33,0.35,0.38,0.46), mean=0.255, stddev=0.0433], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.36,0.37,0.39 0.40,0.41,0.44,0.47,0.49 0.50,0.52,0.52,0.58), mean=0.442, stddev=0.0366], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.05,0.05,0.06,0.07 0.07,0.08,0.09,0.11), mean=0.0534, stddev=0.0107], oderiv-count=1.08899e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29666.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.22,0.25,0.29,0.31 0.33,0.36,0.38,0.48), mean=0.256, stddev=0.0465], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.35,0.35,0.37 0.39,0.42,0.46,0.51,0.55 0.58,0.60,0.62,0.70), mean=0.466, stddev=0.0625]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.84073e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01753, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,5e-07,1e-06,9e-06 0.0002,0.17,0.41,0.58,0.65 0.73,0.79,0.86,1.1), mean=0.383, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.37,0.42 0.49,0.70,0.80,0.90,0.95 1.0,1.1,1.2,1.3), mean=0.781, stddev=0.17], bias-{mean,stddev}=0.001779,0.02561, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.84073e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06797, w_fc-rms=0.02365, w_oc-rms=0.04414, count=1.51e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641474, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.48,0.50,0.54 0.68,0.75,0.77,0.83), mean=0.493, stddev=0.0708], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.19 0.21,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.226, stddev=0.0185] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641474, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.44,0.45,0.46 0.47,0.48,0.50,0.52,0.56 0.63,0.70,0.75,0.80), mean=0.509, stddev=0.0553], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.20 0.21,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0167] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00926579, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.86,-0.82,-0.44 -0.28,-0.13,0.0003,0.15,0.28 0.62,0.79,0.85,0.89), mean=0.0149, stddev=0.291], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.25,0.31 0.40,0.45,0.58,0.73,1.0 1.0,1.0,1.0,1.0), mean=0.614, stddev=0.208] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641474, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.40 0.41,0.42,0.46,0.50,0.50 0.52,0.56,0.58,0.64), mean=0.461, stddev=0.0416], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0192] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00641474, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.76,-0.72,-0.35 -0.19,-0.10,0.0003,0.10,0.22 0.44,0.64,0.76,0.85), mean=0.0107, stddev=0.237], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.31,0.37,0.50 0.71,0.78,0.87,0.93,1.0 1.0,1.0,1.0,1.0), mean=0.843, stddev=0.14] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.26461e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.21838e-05, count-zeroing-boundaries=296322
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.128926
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.84073e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03925, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.44,0.46 0.51,0.57,0.86,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.852, stddev=0.276], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0006,0.0008,0.002 0.007,0.38,0.55,0.72,0.92 1.2,1.4,1.4,1.7), mean=0.542, stddev=0.327], bias-{mean,stddev}=0.0125,0.2578, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=9.84073e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01251, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.23,0.24,0.26 0.28,0.30,0.34,0.39,0.42 0.45,0.48,0.51,0.55), mean=0.344, stddev=0.0591], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.16,0.18,0.27,0.36,0.39 0.41,0.43,0.44,0.47), mean=0.27, stddev=0.0909], bias-{mean,stddev}=0.000875,0.009529, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0.0013101, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.01,0.02,0.02 0.03,0.05,0.08,0.11,0.13 0.14,0.15,0.16,0.18), mean=0.0791, stddev=0.0344], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.13,0.17 0.22,0.31,0.45,0.56,0.62 0.66,0.70,0.71,0.83), mean=0.438, stddev=0.145], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.09,0.09 0.10,0.10,0.12,0.15,0.18 0.22,0.26,0.28,0.34), mean=0.132, stddev=0.0406], oderiv-count=1.15834e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27627.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.01,0.02,0.02 0.03,0.05,0.08,0.11,0.12 0.14,0.15,0.16,0.19), mean=0.0784, stddev=0.0342], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.06,0.08 0.09,0.11,0.13,0.15,0.16 0.18,0.19,0.20,0.22), mean=0.128, stddev=0.0297]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.84073e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008193, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.26,0.27 0.28,0.29,0.32,0.35,0.37 0.39,0.41,0.41,0.45), mean=0.321, stddev=0.037], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.12,0.13,0.14 0.15,0.16,0.18,0.21,0.23 0.25,0.28,0.30,0.37), mean=0.183, stddev=0.0367], bias-{mean,stddev}=-0.02784,0.01778, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.59e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.22,0.24,0.27,0.29 0.30,0.32,0.33,0.36), mean=0.246, stddev=0.0317], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.34,0.36,0.37 0.38,0.40,0.42,0.45,0.46 0.47,0.48,0.48,0.50), mean=0.422, stddev=0.0294], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.037, stddev=0.00265], oderiv-count=1.07123e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25588, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.25,0.28,0.29 0.31,0.33,0.34,0.38), mean=0.249, stddev=0.034], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.37,0.38,0.40 0.41,0.43,0.48,0.53,0.57 0.60,0.63,0.66,0.75), mean=0.485, stddev=0.0616]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.84073e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0143, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,6e-06,2e-05 6e-05,0.001,0.33,0.51,0.58 0.63,0.67,0.71,0.89), mean=0.282, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.31,0.34 0.42,0.60,0.66,0.72,0.76 0.80,0.87,0.92,1.3), mean=0.639, stddev=0.13], bias-{mean,stddev}=0.004462,0.03009, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.84073e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04137, w_fc-rms=0.01442, w_oc-rms=0.03998, count=1.38e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646884, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.45 0.46,0.48,0.50,0.51,0.55 0.59,0.64,0.67,0.76), mean=0.502, stddev=0.0423], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0148] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646884, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.46,0.47 0.48,0.49,0.50,0.52,0.55 0.58,0.62,0.63,0.69), mean=0.508, stddev=0.0345], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.237, stddev=0.0143] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00646884, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.79,-0.72,-0.37 -0.23,-0.08,0.0003,0.11,0.29 0.50,0.61,0.66,0.75), mean=0.00686, stddev=0.24], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.33,0.40,0.43 0.48,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.722, stddev=0.215] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646884, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.44 0.45,0.47,0.50,0.50,0.51 0.52,0.56,0.56,0.69), mean=0.488, stddev=0.0296], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.018] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00646884, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.61,-0.56,-0.28 -0.18,-0.07,0.0002,0.10,0.21 0.36,0.47,0.55,0.61), mean=0.00611, stddev=0.19], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.55,0.59,0.67 0.75,0.81,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.887, stddev=0.111] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.14792e-05, count-zeroing-boundaries=261342
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.128926
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.84073e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03722, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.48,0.52 0.56,0.60,0.82,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.82, stddev=0.22], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.003 0.005,0.01,0.56,0.79,0.89 1.0,1.2,1.3,1.4), mean=0.474, stddev=0.368], bias-{mean,stddev}=-0.001433,0.2028, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=9.84073e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01173, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.26,0.27,0.31,0.37,0.40 0.44,0.47,0.48,0.52), mean=0.323, stddev=0.0582], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.24,0.34,0.37 0.38,0.40,0.41,0.44), mean=0.256, stddev=0.0787], bias-{mean,stddev}=0.0009809,0.007191, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.18e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.03,0.04,0.06,0.09,0.10 0.12,0.13,0.13,0.15), mean=0.0637, stddev=0.0293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.13,0.17 0.20,0.28,0.43,0.54,0.59 0.63,0.66,0.68,0.72), mean=0.414, stddev=0.141], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.15,0.18 0.20,0.23,0.23,0.26), mean=0.133, stddev=0.032], oderiv-count=952576
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23548.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.03,0.04,0.06,0.09,0.11 0.12,0.13,0.14,0.16), mean=0.0668, stddev=0.0296], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.09,0.11,0.14,0.15 0.16,0.17,0.17,0.20), mean=0.114, stddev=0.0276]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.84073e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008221, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.15,0.22 0.26,0.28,0.32,0.37,0.39 0.40,0.41,0.42,0.47), mean=0.319, stddev=0.0581], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.14,0.15,0.17,0.21,0.24 0.27,0.30,0.32,0.38), mean=0.182, stddev=0.044], bias-{mean,stddev}=-0.02216,0.02226, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.81e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.15,0.18 0.20,0.23,0.26,0.29,0.30 0.31,0.33,0.36,0.40), mean=0.257, stddev=0.042], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.34,0.36 0.37,0.39,0.41,0.44,0.45 0.47,0.48,0.49,0.52), mean=0.413, stddev=0.0329], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.031, stddev=0.00322], oderiv-count=924800
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=21509.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.16,0.18 0.21,0.23,0.26,0.29,0.31 0.32,0.34,0.37,0.48), mean=0.263, stddev=0.0438], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.26,0.35 0.40,0.45,0.52,0.58,0.61 0.65,0.70,0.73,1.1), mean=0.513, stddev=0.0973]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.84073e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02068, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.26,0.28 0.30,0.34,0.49,0.66,0.73 0.77,0.84,0.90,0.97), mean=0.503, stddev=0.159], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.57,0.61,0.69 0.76,0.79,0.86,1.1,1.2 1.3,1.4,1.6,2.0), mean=0.923, stddev=0.192], bias-{mean,stddev}=0.01388,0.01707, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.84073e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1043, w_fc-rms=0.04318, w_oc-rms=0.07184, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00653413, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.57,0.59,0.61 0.64,0.67,0.71,0.75,0.77 0.80,0.83,0.84,0.86), mean=0.707, stddev=0.0549], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.13 0.15,0.16,0.17,0.19,0.19 0.20,0.20,0.20,0.23), mean=0.172, stddev=0.0193] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00653413, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.52,0.55,0.57 0.58,0.61,0.65,0.69,0.75 0.79,0.82,0.84,0.88), mean=0.657, stddev=0.0642], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.14 0.15,0.17,0.19,0.20,0.21 0.21,0.21,0.22,0.22), mean=0.184, stddev=0.0215] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0187219, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.82,-0.75,-0.56 -0.43,-0.31,-0.01,0.27,0.41 0.54,0.73,0.82,0.90), mean=-0.00925, stddev=0.341], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.24 0.30,0.36,0.43,0.47,0.49 0.51,0.53,0.54,0.57), mean=0.413, stddev=0.0754] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00653413, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.50,0.53 0.56,0.59,0.63,0.67,0.69 0.71,0.77,0.80,0.89), mean=0.632, stddev=0.0578], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.14 0.15,0.16,0.18,0.19,0.19 0.19,0.20,0.20,0.21), mean=0.175, stddev=0.0169] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00942419, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.76,-0.70,-0.55 -0.41,-0.28,-0.01,0.24,0.36 0.55,0.72,0.78,0.88), mean=-0.0104, stddev=0.32], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.27,0.34 0.42,0.50,0.60,0.65,0.68 0.69,0.70,0.71,0.76), mean=0.57, stddev=0.103] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.36267e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.24989e-06, count-zeroing-boundaries=222233
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.128926
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.84073e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08845, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.1,1.1 1.2,1.2,1.7,2.6,2.6 2.7,2.8,2.9,3.1), mean=1.92, stddev=0.63], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.94,1.0,1.1 1.2,1.2,1.4,1.6,1.8 1.9,2.0,2.1,2.2), mean=1.4, stddev=0.246], bias-{mean,stddev}=-0.04038,0.5436, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=9.84073e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04191, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.57,0.58,0.59 0.61,0.63,0.66,0.71,0.74 0.77,0.81,0.88,2.1), mean=0.671, stddev=0.0809], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.1,1.1 1.1,1.2,1.6,2.4,2.5 2.6,2.7,2.7,2.7), mean=1.83, stddev=0.591], bias-{mean,stddev}=3.994e-09,0.0233, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.42), mean=0.0168, stddev=0.0138], oderiv-count=558720
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/406.mdl exp/nnet3/tdnn_lstm1c_sp/407.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.13355 tdnn2.affine:2.91171 lstm1.W_all:2.18916 lstm1.lstm_nonlin:0.0455371 lstm1.W_rp:0.96219 tdnn3.affine:1.9833 tdnn4.affine:2.04573 lstm2.W_all:1.48814 lstm2.lstm_nonlin:0.0254898 lstm2.W_rp:0.662757 tdnn5.affine:1.65873 tdnn6.affine:1.78611 lstm3.W_all:1.90496 lstm3.lstm_nonlin:0.0443208 lstm3.W_rp:0.713365 output.affine:1.72578 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8993 tdnn2.affine:10.5019 lstm1.W_all:20.4161 lstm1.lstm_nonlin:1.92532 lstm1.W_rp:15.0207 tdnn3.affine:7.96845 tdnn4.affine:7.41782 lstm2.W_all:16.6901 lstm2.lstm_nonlin:1.35254 lstm2.W_rp:14.0715 tdnn5.affine:7.47464 tdnn6.affine:7.43898 lstm3.W_all:24.0658 lstm3.lstm_nonlin:3.05042 lstm3.W_rp:33.6882 output.affine:31.0134 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.242902 tdnn2.affine:0.277371 lstm1.W_all:0.107234 lstm1.lstm_nonlin:0.0235495 lstm1.W_rp:0.064129 tdnn3.affine:0.249365 tdnn4.affine:0.27582 lstm2.W_all:0.0891569 lstm2.lstm_nonlin:0.0188034 lstm2.W_rp:0.0471203 tdnn5.affine:0.222153 tdnn6.affine:0.240527 lstm3.W_all:0.0791552 lstm3.lstm_nonlin:0.014498 lstm3.W_rp:0.0211589 output.affine:0.0556113 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:42:27 KST 2020, elapsed time 0 seconds
