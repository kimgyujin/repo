# nnet3-info exp/nnet3/tdnn_lstm1c_sp/170.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/169.mdl exp/nnet3/tdnn_lstm1c_sp/170.mdl 
# Started at Thu Jul 30 11:08:17 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/170.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000175525, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02937, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.01,0.01 0.03,0.25,0.51,0.61,0.67 0.72,0.78,0.89,1.1), mean=0.457, stddev=0.223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.16,0.20,0.56,0.80,1.1 1.3,1.4,1.5,1.6), mean=0.57, stddev=0.352], bias-{mean,stddev}=0.005504,0.05461, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0.13543, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,8e-06,1e-05,4e-05 0.0002,0.002,0.06,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.0556, stddev=0.0361], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.003,0.008,0.02 0.04,0.11,0.48,0.63,0.71 0.78,0.85,0.86,0.92), mean=0.432, stddev=0.241], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.03 0.06,0.26,0.37,0.46,0.51 0.58,0.66,0.70,1.7), mean=0.349, stddev=0.171], oderiv-count=1.20371e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35431.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,2e-06,3e-06,2e-05 8e-05,0.001,0.06,0.08,0.10 0.11,0.12,0.13,0.16), mean=0.0546, stddev=0.0368], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,5e-05,9e-05,0.0002 0.0008,0.007,0.09,0.11,0.12 0.12,0.13,0.14,0.15), mean=0.076, stddev=0.0425]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000175525, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01187, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.39 0.40,0.43,0.46,0.50,0.53 0.55,0.57,0.61,0.77), mean=0.466, stddev=0.0522], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.006,0.009 0.02,0.14,0.28,0.32,0.34 0.37,0.39,0.41,0.78), mean=0.245, stddev=0.116], bias-{mean,stddev}=-0.002585,0.02757, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.28,0.29,0.32,0.35,0.36 0.38,0.40,0.42,0.52), mean=0.321, stddev=0.0362], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.42 0.42,0.43,0.46,0.48,0.50 0.51,0.52,0.53,0.56), mean=0.46, stddev=0.029], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0461, stddev=0.00889], oderiv-count=1.14074e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34657.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.26 0.27,0.28,0.32,0.35,0.37 0.38,0.41,0.44,0.55), mean=0.318, stddev=0.0414], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.45,0.47 0.48,0.51,0.56,0.61,0.64 0.67,0.71,0.72,0.84), mean=0.562, stddev=0.063]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000175525, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01615, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.0004,0.002,0.007 0.04,0.18,0.36,0.53,0.62 0.70,0.78,0.83,1.1), mean=0.358, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.33,0.36,0.41 0.46,0.62,0.75,0.83,0.87 0.92,0.97,1.0,1.4), mean=0.72, stddev=0.153], bias-{mean,stddev}=-8.107e-05,0.02356, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000175525, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02286, w_fc-rms=0.03151, w_oc-rms=0.03555, count=1.48e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620765, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.45 0.46,0.47,0.49,0.52,0.55 0.59,0.67,0.69,0.75), mean=0.5, stddev=0.0483], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0145] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620765, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.39,0.41 0.43,0.45,0.49,0.53,0.57 0.63,0.73,0.75,0.82), mean=0.495, stddev=0.0704], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.18,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0165] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00673691, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.80,-0.76,-0.57 -0.36,-0.21,0.007,0.22,0.34 0.47,0.64,0.77,0.85), mean=-0.000206, stddev=0.298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.30,0.38 0.42,0.48,0.60,0.74,0.98 1.0,1.0,1.0,1.0), mean=0.627, stddev=0.183] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620765, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.44,0.45,0.47,0.50,0.52 0.54,0.56,0.57,0.59), mean=0.476, stddev=0.0352], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0168] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00990838, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.79,-0.72,-0.49 -0.31,-0.17,0.005,0.18,0.28 0.42,0.58,0.76,0.89), mean=-0.00104, stddev=0.269], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.25,0.33,0.52 0.65,0.75,0.84,0.91,0.99 1.0,1.0,1.0,1.0), mean=0.813, stddev=0.146] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.35062e-06, count-zeroing-boundaries=298452
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0327824
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000175525, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03153, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.19 0.21,0.24,0.43,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.617, stddev=0.368], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.008,0.01,0.03 0.07,0.31,0.46,0.61,0.73 0.83,1.0,1.1,1.3), mean=0.454, stddev=0.23], bias-{mean,stddev}=-0.002366,0.1781, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000175525, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01216, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.22 0.24,0.27,0.32,0.39,0.42 0.45,0.49,0.52,0.63), mean=0.332, stddev=0.0731], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.09,0.18,0.38,0.43 0.46,0.49,0.51,0.56), mean=0.236, stddev=0.146], bias-{mean,stddev}=0.007669,0.02395, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=6.70841e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.04,0.05,0.05 0.07,0.08,0.11,0.14,0.16 0.17,0.18,0.19,0.22), mean=0.113, stddev=0.0356], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.19,0.21,0.25 0.31,0.37,0.51,0.62,0.66 0.69,0.72,0.74,0.77), mean=0.493, stddev=0.134], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.09,0.11,0.12 0.14,0.15,0.16,0.31), mean=0.099, stddev=0.0231], oderiv-count=1.07443e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32335.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.04,0.04,0.05 0.06,0.08,0.11,0.14,0.16 0.17,0.19,0.20,0.23), mean=0.11, stddev=0.0369], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.10,0.12,0.13 0.14,0.15,0.18,0.20,0.22 0.23,0.23,0.25,0.27), mean=0.177, stddev=0.0298]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000175525, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008783, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.29 0.30,0.32,0.34,0.37,0.38 0.40,0.42,0.44,0.59), mean=0.345, stddev=0.0363], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.16,0.17,0.19,0.23,0.24 0.25,0.27,0.29,0.36), mean=0.197, stddev=0.0339], bias-{mean,stddev}=-0.01105,0.01694, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.6e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.23,0.24,0.27,0.30,0.31 0.33,0.35,0.36,0.44), mean=0.272, stddev=0.0345], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.50,0.51,0.52,0.53), mean=0.44, stddev=0.0332], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0355, stddev=0.0029], oderiv-count=1.04045e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30012.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.23,0.24,0.27,0.30,0.32 0.33,0.35,0.36,0.44), mean=0.272, stddev=0.0356], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.43,0.45 0.46,0.48,0.52,0.57,0.60 0.63,0.68,0.71,0.89), mean=0.53, stddev=0.0606]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000175525, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01313, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,1e-06,2e-06,6e-06 2e-05,0.0005,0.28,0.47,0.55 0.60,0.64,0.67,1.2), mean=0.254, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.26,0.31 0.38,0.52,0.61,0.67,0.70 0.73,0.78,0.83,1.2), mean=0.585, stddev=0.126], bias-{mean,stddev}=-0.002175,0.03331, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000175525, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.009515, w_fc-rms=0.01085, w_oc-rms=0.01531, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625941, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.45 0.46,0.47,0.50,0.51,0.54 0.57,0.60,0.61,0.65), mean=0.498, stddev=0.0332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0145] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625941, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.42 0.43,0.45,0.49,0.50,0.50 0.53,0.56,0.58,0.71), mean=0.48, stddev=0.0374], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.21,0.21,0.22 0.23,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0113] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00698246, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.62,-0.51,-0.33 -0.22,-0.10,0.0005,0.10,0.21 0.29,0.47,0.59,0.77), mean=0.000115, stddev=0.196], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.42,0.46,0.50 0.55,0.59,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.754, stddev=0.196] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625941, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.44 0.45,0.46,0.50,0.50,0.52 0.54,0.57,0.59,0.61), mean=0.489, stddev=0.0315], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0155] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00625941, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.55,-0.47,-0.27 -0.17,-0.08,0.0003,0.09,0.17 0.28,0.40,0.53,0.66), mean=0.00112, stddev=0.171], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.58,0.62,0.73 0.78,0.83,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.9, stddev=0.0992] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.79867e-06, count-zeroing-boundaries=263250
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0327824
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000175525, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02853, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.30,0.31,0.34 0.36,0.39,0.51,0.85,0.89 0.93,0.96,0.98,1.0), mean=0.611, stddev=0.223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0007,0.0008,0.001 0.002,0.005,0.46,0.61,0.70 0.77,0.86,0.90,0.95), mean=0.362, stddev=0.284], bias-{mean,stddev}=0.004233,0.1304, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000175525, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01083, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.21 0.22,0.23,0.28,0.35,0.40 0.45,0.49,0.51,0.54), mean=0.294, stddev=0.0727], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.15,0.21,0.32,0.35 0.37,0.39,0.41,0.47), mean=0.231, stddev=0.0865], bias-{mean,stddev}=0.006116,0.01261, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.7e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.03,0.03,0.03 0.04,0.05,0.07,0.09,0.10 0.11,0.11,0.12,0.14), mean=0.071, stddev=0.0226], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.17,0.19,0.23 0.27,0.35,0.46,0.56,0.60 0.63,0.66,0.68,0.74), mean=0.452, stddev=0.121], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.09,0.10,0.11,0.13,0.15 0.17,0.19,0.20,0.24), mean=0.119, stddev=0.0258], oderiv-count=1.07162e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27690.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.03,0.03 0.04,0.05,0.07,0.09,0.10 0.11,0.12,0.12,0.13), mean=0.0714, stddev=0.0238], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.07,0.08,0.09 0.09,0.10,0.12,0.14,0.14 0.15,0.16,0.17,0.18), mean=0.12, stddev=0.0202]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000175525, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008179, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.25 0.26,0.28,0.31,0.36,0.39 0.40,0.42,0.43,0.49), mean=0.32, stddev=0.0464], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.13 0.14,0.15,0.18,0.21,0.23 0.26,0.29,0.32,0.37), mean=0.182, stddev=0.0406], bias-{mean,stddev}=-0.01137,0.01969, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.92e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.22 0.23,0.24,0.27,0.30,0.31 0.33,0.33,0.34,0.46), mean=0.27, stddev=0.0336], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.36,0.37 0.38,0.39,0.42,0.45,0.46 0.47,0.49,0.49,0.51), mean=0.42, stddev=0.0295], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0283, stddev=0.00271], oderiv-count=912960
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25367.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.23,0.24,0.27,0.30,0.32 0.33,0.35,0.36,0.46), mean=0.273, stddev=0.0371], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.40,0.43 0.46,0.48,0.53,0.59,0.62 0.66,0.70,0.72,0.90), mean=0.537, stddev=0.072]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000175525, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01899, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.17,0.19,0.26 0.30,0.35,0.42,0.61,0.71 0.76,0.81,0.83,1.3), mean=0.459, stddev=0.154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.59,0.61 0.62,0.64,0.71,1.0,1.3 1.4,1.5,1.5,1.6), mean=0.825, stddev=0.264], bias-{mean,stddev}=0.02253,0.02555, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000175525, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04111, w_fc-rms=0.04759, w_oc-rms=0.05286, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632184, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.52,0.53,0.55 0.56,0.58,0.63,0.68,0.70 0.71,0.73,0.74,0.75), mean=0.63, stddev=0.0516], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.17,0.18 0.18,0.19,0.20,0.21,0.21 0.21,0.22,0.22,0.24), mean=0.198, stddev=0.0106] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632184, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.46,0.47,0.49 0.51,0.54,0.58,0.62,0.68 0.72,0.76,0.77,0.85), mean=0.587, stddev=0.0665], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.16,0.18 0.18,0.19,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.203, stddev=0.0137] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00823276, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.76,-0.64,-0.51 -0.33,-0.22,-0.02,0.20,0.32 0.48,0.66,0.74,0.82), mean=-0.00758, stddev=0.285], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.25,0.27,0.32 0.36,0.39,0.44,0.47,0.48 0.50,0.51,0.52,0.59), mean=0.429, stddev=0.0554] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632184, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.55,0.56,0.57 0.60,0.62,0.65,0.69,0.71 0.73,0.76,0.77,0.87), mean=0.655, stddev=0.0473], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.16 0.17,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.182, stddev=0.013] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00897532, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.79,-0.70,-0.50 -0.32,-0.19,-0.02,0.18,0.31 0.48,0.69,0.77,0.88), mean=-0.0074, stddev=0.282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.30,0.36 0.43,0.54,0.62,0.67,0.68 0.70,0.71,0.72,0.73), mean=0.591, stddev=0.103] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.46618e-06, count-zeroing-boundaries=223905
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0327824
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000175525, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07257, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.1,1.1 1.1,1.2,1.5,2.0,2.1 2.1,2.2,2.2,2.3), mean=1.61, stddev=0.389], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.54,0.75,0.95 1.0,1.1,1.2,1.3,1.3 1.4,1.4,1.5,1.6), mean=1.16, stddev=0.155], bias-{mean,stddev}=0.01252,0.2797, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000175525, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03884, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.50,0.51,0.53 0.55,0.57,0.61,0.66,0.69 0.72,0.78,0.82,2.3), mean=0.62, stddev=0.0915], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.3,1.3,1.7,2.1,2.2 2.3,2.3,2.4,2.4), mean=1.74, stddev=0.386], bias-{mean,stddev}=4.037e-09,0.0338, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=618240
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/169.mdl exp/nnet3/tdnn_lstm1c_sp/170.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.93088 tdnn2.affine:7.01865 lstm1.W_all:5.60449 lstm1.lstm_nonlin:0.101031 lstm1.W_rp:2.25086 tdnn3.affine:4.43211 tdnn4.affine:5.02567 lstm2.W_all:3.81322 lstm2.lstm_nonlin:0.045498 lstm2.W_rp:1.56244 tdnn5.affine:3.47139 tdnn6.affine:4.03445 lstm3.W_all:5.04559 lstm3.lstm_nonlin:0.106082 lstm3.W_rp:1.97861 output.affine:4.43148 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.6663 tdnn2.affine:10.7115 lstm1.W_all:18.81 lstm1.lstm_nonlin:1.20219 lstm1.W_rp:11.9453 tdnn3.affine:7.7676 tdnn4.affine:7.92367 lstm2.W_all:15.341 lstm2.lstm_nonlin:0.479827 lstm2.W_rp:10.6979 tdnn5.affine:6.90421 tdnn6.affine:7.385 lstm3.W_all:22.1387 lstm3.lstm_nonlin:1.87333 lstm3.W_rp:27.0622 output.affine:28.7678 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.593585 tdnn2.affine:0.660187 lstm1.W_all:0.298494 lstm1.lstm_nonlin:0.0833953 lstm1.W_rp:0.189254 tdnn3.affine:0.574508 tdnn4.affine:0.638069 lstm2.W_all:0.249144 lstm2.lstm_nonlin:0.0934429 lstm2.W_rp:0.14665 tdnn5.affine:0.50567 tdnn6.affine:0.549118 lstm3.W_all:0.228281 lstm3.lstm_nonlin:0.0568073 lstm3.W_rp:0.0732385 output.affine:0.154065 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:08:17 KST 2020, elapsed time 0 seconds
