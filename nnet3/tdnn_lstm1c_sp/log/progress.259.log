# nnet3-info exp/nnet3/tdnn_lstm1c_sp/259.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/258.mdl exp/nnet3/tdnn_lstm1c_sp/259.mdl 
# Started at Thu Jul 30 11:43:28 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/259.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000251617, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03494, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.03,0.09,0.61,0.74,0.83 0.94,1.0,1.0,1.2), mean=0.526, stddev=0.3], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.17 0.18,0.23,0.67,0.94,1.3 1.6,1.7,1.7,1.8), mean=0.675, stddev=0.423], bias-{mean,stddev}=0.000321,0.06564, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.62e+05, self-repaired-proportion=0.208022, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,6e-06,9e-06,3e-05 8e-05,0.0005,0.07,0.10,0.12 0.14,0.16,0.16,0.26), mean=0.0623, stddev=0.0478], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.002,0.003,0.01 0.03,0.05,0.45,0.61,0.71 0.79,0.86,0.91,1.0), mean=0.395, stddev=0.258], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.14,0.27,0.35,0.41 0.48,0.61,0.65,1.4), mean=0.262, stddev=0.151], oderiv-count=1.22112e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37523.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-09,4e-06,6e-06,2e-05 5e-05,0.0004,0.06,0.10,0.12 0.14,0.17,0.17,0.24), mean=0.0593, stddev=0.0471], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,0.0001,0.0001,0.0003 0.0005,0.003,0.10,0.13,0.14 0.15,0.16,0.16,0.17), mean=0.0844, stddev=0.054]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000251617, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0131, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.39,0.40,0.42 0.43,0.45,0.50,0.57,0.60 0.64,0.69,0.72,0.80), mean=0.513, stddev=0.0702], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.01 0.02,0.06,0.31,0.36,0.40 0.43,0.47,0.49,0.83), mean=0.262, stddev=0.144], bias-{mean,stddev}=-0.01982,0.04064, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.14e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.27,0.28 0.30,0.32,0.35,0.39,0.42 0.45,0.48,0.51,0.59), mean=0.355, stddev=0.0501], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.38,0.40 0.41,0.42,0.45,0.48,0.50 0.51,0.52,0.53,0.56), mean=0.451, stddev=0.0341], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0385, stddev=0.00719], oderiv-count=1.13418e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36701.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.29 0.30,0.32,0.35,0.40,0.43 0.46,0.52,0.53,0.60), mean=0.36, stddev=0.0535], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.52,0.53,0.55 0.56,0.59,0.64,0.70,0.75 0.79,0.82,0.85,0.96), mean=0.647, stddev=0.0738]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000251617, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0187, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,4e-06,1e-05,8e-05 0.002,0.17,0.42,0.63,0.73 0.79,0.86,0.93,1.1), mean=0.406, stddev=0.25], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.40,0.46 0.55,0.74,0.86,0.95,1.0 1.1,1.2,1.2,1.3), mean=0.834, stddev=0.176], bias-{mean,stddev}=0.0006306,0.02736, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000251617, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.049, w_fc-rms=0.02818, w_oc-rms=0.04206, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627683, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.67,0.79,0.81,0.84), mean=0.49, stddev=0.0755], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.18 0.19,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0233] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627683, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.41,0.42,0.44 0.45,0.47,0.50,0.52,0.56 0.64,0.74,0.77,0.83), mean=0.505, stddev=0.0636], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0208] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0367563, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.89,-0.86,-0.53 -0.28,-0.16,0.002,0.18,0.34 0.54,0.84,0.88,0.91), mean=0.0134, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.25 0.34,0.41,0.54,0.78,1.0 1.0,1.0,1.0,1.0), mean=0.586, stddev=0.225] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627683, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.39 0.40,0.42,0.44,0.50,0.50 0.50,0.53,0.55,0.63), mean=0.451, stddev=0.0406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.217, stddev=0.0222] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00627683, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.77,-0.66,-0.38 -0.19,-0.09,0.001,0.12,0.22 0.34,0.64,0.76,0.81), mean=0.01, stddev=0.228], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.34,0.37,0.54 0.72,0.80,0.88,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.852, stddev=0.135] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.7592e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.52097e-05, count-zeroing-boundaries=298213
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.17741
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000251617, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04071, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.31,0.35 0.38,0.44,0.85,1.2,1.3 1.4,1.4,1.5,1.5), mean=0.844, stddev=0.387], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.002,0.004 0.01,0.30,0.55,0.75,0.88 1.2,1.6,1.8,2.0), mean=0.551, stddev=0.357], bias-{mean,stddev}=0.01253,0.2794, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000251617, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01362, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.20,0.21,0.24 0.26,0.29,0.36,0.44,0.49 0.52,0.56,0.57,0.72), mean=0.37, stddev=0.0886], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.14,0.29,0.42,0.44 0.47,0.49,0.50,0.53), mean=0.282, stddev=0.131], bias-{mean,stddev}=0.004319,0.01433, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.00378643, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.03,0.04,0.06 0.07,0.09,0.12,0.15,0.16 0.18,0.20,0.22,0.25), mean=0.119, stddev=0.0375], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.16,0.18,0.24 0.31,0.39,0.51,0.60,0.64 0.66,0.68,0.70,0.76), mean=0.488, stddev=0.126], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.07 0.07,0.08,0.09,0.10,0.12 0.13,0.15,0.16,0.26), mean=0.0915, stddev=0.0223], oderiv-count=1.03245e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34236.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.03,0.04,0.05 0.07,0.09,0.12,0.14,0.16 0.18,0.20,0.21,0.26), mean=0.117, stddev=0.0372], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.12,0.12,0.14 0.15,0.16,0.19,0.21,0.23 0.24,0.27,0.28,0.31), mean=0.188, stddev=0.0329]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000251617, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009643, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.31,0.32 0.33,0.34,0.37,0.41,0.44 0.46,0.49,0.51,0.61), mean=0.378, stddev=0.0474], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.13,0.14,0.15 0.16,0.18,0.21,0.25,0.28 0.30,0.33,0.34,0.41), mean=0.215, stddev=0.0465], bias-{mean,stddev}=-0.0212,0.01943, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.25e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.26 0.27,0.28,0.32,0.35,0.37 0.38,0.40,0.41,0.51), mean=0.317, stddev=0.0399], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.37,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.50,0.52), mean=0.433, stddev=0.0288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0314, stddev=0.00242], oderiv-count=1.13632e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31771.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.26 0.27,0.29,0.32,0.36,0.38 0.40,0.41,0.42,0.55), mean=0.323, stddev=0.0425], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.50,0.51,0.52 0.53,0.56,0.60,0.68,0.72 0.76,0.81,0.85,1.2), mean=0.618, stddev=0.0778]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000251617, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01545, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,8e-07,1e-06,3e-06 1e-05,0.0003,0.34,0.56,0.63 0.68,0.73,0.77,1.0), mean=0.3, stddev=0.255], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.32,0.35,0.39 0.49,0.63,0.70,0.77,0.82 0.88,0.95,1.0,1.4), mean=0.691, stddev=0.137], bias-{mean,stddev}=0.001138,0.04605, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000251617, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02422, w_fc-rms=0.01241, w_oc-rms=0.03024, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633244, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.46,0.50,0.51,0.57 0.61,0.67,0.70,0.80), mean=0.5, stddev=0.0571], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.19,0.20 0.21,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0188] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633244, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.41,0.43 0.44,0.47,0.50,0.51,0.54 0.57,0.63,0.64,0.75), mean=0.496, stddev=0.0445], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0172] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00961111, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.81,-0.69,-0.47 -0.29,-0.14,0.0006,0.15,0.34 0.54,0.73,0.79,0.87), mean=0.00956, stddev=0.278], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.23,0.28,0.38 0.44,0.50,0.60,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.699, stddev=0.239] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633244, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.41 0.43,0.44,0.50,0.50,0.51 0.55,0.56,0.58,0.74), mean=0.48, stddev=0.0403], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0202] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00633244, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.53,-0.44,-0.31 -0.18,-0.10,0.0002,0.10,0.23 0.38,0.53,0.58,0.69), mean=0.00838, stddev=0.195], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.51,0.57,0.69 0.75,0.82,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.895, stddev=0.11] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=8.60771e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=9.50724e-06, count-zeroing-boundaries=262957
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.17741
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000251617, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03933, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.44,0.47,0.52 0.56,0.58,0.86,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.858, stddev=0.261], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0007,0.0009,0.001 0.002,0.007,0.58,0.83,0.96 1.1,1.3,1.4,1.6), mean=0.491, stddev=0.401], bias-{mean,stddev}=0.0001283,0.2145, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000251617, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01302, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.26 0.27,0.30,0.34,0.41,0.46 0.51,0.55,0.57,0.62), mean=0.356, stddev=0.075], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.26,0.38,0.42 0.44,0.45,0.46,0.52), mean=0.281, stddev=0.0952], bias-{mean,stddev}=0.001243,0.007771, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.52e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.06,0.09,0.12,0.13 0.14,0.16,0.17,0.20), mean=0.0928, stddev=0.032], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.19,0.24 0.28,0.35,0.48,0.57,0.61 0.64,0.67,0.68,0.71), mean=0.459, stddev=0.124], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.09,0.11,0.12 0.14,0.15,0.17,0.18), mean=0.0983, stddev=0.0191], oderiv-count=1.0345e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29306.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.07,0.09,0.13,0.14 0.15,0.16,0.18,0.20), mean=0.0963, stddev=0.0327], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.13,0.16,0.18,0.19 0.21,0.22,0.22,0.24), mean=0.159, stddev=0.028]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000251617, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009544, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.23,0.27 0.29,0.32,0.37,0.43,0.45 0.47,0.49,0.51,0.57), mean=0.372, stddev=0.0625], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.16,0.17,0.20,0.25,0.28 0.32,0.35,0.38,0.46), mean=0.211, stddev=0.0514], bias-{mean,stddev}=-0.0216,0.02448, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.01e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.22,0.25 0.27,0.29,0.33,0.36,0.37 0.39,0.41,0.43,0.54), mean=0.325, stddev=0.046], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.37 0.38,0.40,0.42,0.44,0.45 0.46,0.48,0.49,0.51), mean=0.416, stddev=0.0282], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.026, stddev=0.00205], oderiv-count=1.00048e+06
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26841.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.23,0.25 0.27,0.30,0.34,0.37,0.39 0.41,0.44,0.46,0.63), mean=0.337, stddev=0.0522], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.38,0.40,0.47 0.53,0.59,0.66,0.75,0.81 0.84,0.91,0.98,1.4), mean=0.667, stddev=0.116]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000251617, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02222, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.29,0.30,0.32 0.34,0.39,0.51,0.71,0.80 0.84,0.88,0.91,1.4), mean=0.542, stddev=0.164], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.63,0.67,0.74 0.77,0.80,0.88,1.2,1.4 1.5,1.7,1.8,2.1), mean=0.98, stddev=0.256], bias-{mean,stddev}=0.02083,0.02499, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000251617, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.08254, w_fc-rms=0.05089, w_oc-rms=0.05777, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063996, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.56,0.57,0.60 0.61,0.64,0.69,0.73,0.76 0.79,0.81,0.82,0.87), mean=0.689, stddev=0.0581], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.14 0.15,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.24), mean=0.178, stddev=0.0199] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063996, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.49,0.51,0.54 0.56,0.60,0.65,0.70,0.74 0.78,0.83,0.84,0.88), mean=0.653, stddev=0.0708], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.14 0.15,0.17,0.19,0.20,0.20 0.21,0.21,0.21,0.22), mean=0.182, stddev=0.0212] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0256465, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.81,-0.72,-0.58 -0.40,-0.28,-0.01,0.27,0.39 0.54,0.72,0.79,0.90), mean=-0.00461, stddev=0.328], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.21,0.24 0.29,0.36,0.42,0.47,0.49 0.50,0.53,0.53,0.66), mean=0.405, stddev=0.0777] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0063996, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.49,0.52,0.54 0.56,0.58,0.62,0.65,0.68 0.70,0.74,0.76,0.83), mean=0.62, stddev=0.0498], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.17,0.19,0.19,0.20 0.20,0.20,0.21,0.21), mean=0.181, stddev=0.0165] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0063996, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.72,-0.66,-0.52 -0.35,-0.23,-0.01,0.22,0.32 0.47,0.66,0.70,0.85), mean=-0.00572, stddev=0.286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.33,0.35,0.41 0.48,0.56,0.65,0.70,0.72 0.74,0.75,0.76,0.81), mean=0.625, stddev=0.0952] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=8.94622e-06, count-zeroing-boundaries=223558
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.17741
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000251617, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08351, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.1,1.1 1.2,1.2,1.6,2.4,2.5 2.5,2.6,2.7,2.8), mean=1.82, stddev=0.554], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.99,1.0,1.0 1.1,1.1,1.3,1.5,1.7 1.8,2.0,2.0,2.1), mean=1.33, stddev=0.233], bias-{mean,stddev}=-0.0377,0.476, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000251617, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04399, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.62 0.63,0.65,0.69,0.74,0.78 0.81,0.87,0.91,2.4), mean=0.703, stddev=0.091], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.7,2.7,2.7,2.8), mean=1.94, stddev=0.538], bias-{mean,stddev}=7.054e-09,0.02999, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.41), mean=0.0168, stddev=0.0138], oderiv-count=576960
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/258.mdl exp/nnet3/tdnn_lstm1c_sp/259.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.42042 tdnn2.affine:5.32933 lstm1.W_all:4.33441 lstm1.lstm_nonlin:0.0970716 lstm1.W_rp:1.70063 tdnn3.affine:3.5144 tdnn4.affine:3.95334 lstm2.W_all:3.03826 lstm2.lstm_nonlin:0.0494844 lstm2.W_rp:1.22772 tdnn5.affine:2.86806 tdnn6.affine:3.29769 lstm3.W_all:3.66614 lstm3.lstm_nonlin:0.10356 lstm3.W_rp:1.5766 output.affine:3.64532 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.8811 tdnn2.affine:11.8448 lstm1.W_all:21.776 lstm1.lstm_nonlin:1.60675 lstm1.W_rp:15.6319 tdnn3.affine:8.68268 tdnn4.affine:8.70971 lstm2.W_all:18.0826 lstm2.lstm_nonlin:0.927705 lstm2.W_rp:14.8685 tdnn5.affine:8.291 tdnn6.affine:8.62805 lstm3.W_all:25.8743 lstm3.lstm_nonlin:2.57397 lstm3.W_rp:31.657 output.affine:32.5668 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.390448 tdnn2.affine:0.448666 lstm1.W_all:0.19907 lstm1.lstm_nonlin:0.0605031 lstm1.W_rp:0.108921 tdnn3.affine:0.403267 tdnn4.affine:0.452859 lstm2.W_all:0.167874 lstm2.lstm_nonlin:0.0544576 lstm2.W_rp:0.0827131 tdnn5.affine:0.345515 tdnn6.affine:0.380208 lstm3.W_all:0.141731 lstm3.lstm_nonlin:0.040742 lstm3.W_rp:0.0500226 output.affine:0.112097 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:43:28 KST 2020, elapsed time 0 seconds
