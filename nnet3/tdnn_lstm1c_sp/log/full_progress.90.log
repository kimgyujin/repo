# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/89.mdl exp/nnet3/tdnn_lstm1c_sp/90.mdl 
# Started at Thu Jul 30 10:36:43 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/89.mdl exp/nnet3/tdnn_lstm1c_sp/90.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000226939, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02109, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.009,0.01,0.02 0.06,0.30,0.37,0.43,0.46 0.50,0.55,0.57,0.71), mean=0.339, stddev=0.137], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.13,0.16,0.43,0.58,0.68 0.91,0.98,1.0,1.3), mean=0.418, stddev=0.237], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.08,0.26,0.61,0.84 1.0,1.2,1.3,1.6), mean=0.36, stddev=0.319], bias-{mean,stddev}=-0.0009216,0.02575, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.49,2.3,3.0 3.7,4.9,5.7,8.2), mean=1.14, stddev=1.44], oderiv-count=5632
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-630.646, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000226939, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009462, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.30,0.31 0.33,0.34,0.37,0.40,0.42 0.43,0.44,0.45,0.46), mean=0.372, stddev=0.036], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.007,0.01 0.03,0.18,0.22,0.25,0.27 0.28,0.30,0.31,0.37), mean=0.201, stddev=0.0796], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.10,0.22,0.46,0.64 0.78,0.92,0.99,1.1), mean=0.296, stddev=0.228], bias-{mean,stddev}=0.0003283,0.0143, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.22e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.8,-4.2,-3.9,-2.8 -1.8,-1.2,0.47,2.3,3.0 3.7,4.9,5.8,8.0), mean=0.553, stddev=2.03], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.1,-3.6,-3.2,-2.5 -1.6,-0.86,0.64,2.1,2.9 3.6,4.1,4.5,5.4), mean=0.635, stddev=1.78], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.10,0.12 0.13,0.16,0.17,0.23), mean=0.0556, stddev=0.0488], oderiv-count=31296
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-548.726, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000226939, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006213, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.0005,0.001,0.007 0.04,0.07,0.13,0.20,0.25 0.29,0.33,0.35,0.47), mean=0.136, stddev=0.0816], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.11 0.12,0.19,0.30,0.33,0.35 0.35,0.37,0.38,0.42), mean=0.272, stddev=0.0812], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,1e-05,1e-05,1e-05 4e-05,0.07,0.15,0.32,0.46 0.60,0.80,0.90,1.0), mean=0.208, stddev=0.192], bias-{mean,stddev}=6.495e-05,0.002389, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000226939, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.002003, w_fc-rms=0.00248, w_oc-rms=0.005247, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000190088, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.8,-4.3,-3.3,-2.5 -1.6,-0.72,0.50,1.4,2.1 2.8,3.5,4.0,5.8), mean=0.336, stddev=1.6], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.2,-1.5,-1.2,-0.63 -0.43,-0.13,0.25,0.67,0.99 1.3,1.6,1.7,2.4), mean=0.285, stddev=0.617] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000190088, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-3.6,-3.0,-2.1 -1.3,-0.45,0.55,1.5,2.3 2.7,3.2,3.5,7.1), mean=0.49, stddev=1.52], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.93,-0.80,-0.51 -0.21,0.03,0.27,0.62,0.92 1.2,1.7,2.1,2.5), mean=0.331, stddev=0.516] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0424712, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-37,-25,-20,-16 -11,-6.6,0.23,7.4,11 15,19,22,26), mean=0.145, stddev=9.32], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-19,-13,-11,-8.8 -5.6,-2.4,1.4,6.4,8.8 11,14,15,20), mean=1.68, stddev=5.83] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000190088, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.7,-4.9,-4.0,-2.8 -1.8,-0.87,0.50,1.6,2.5 3.3,3.8,4.5,6.7), mean=0.375, stddev=1.77], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.2,-1.8,-1.3,-0.84 -0.55,-0.24,0.25,0.82,1.1 1.4,1.9,2.2,3.4), mean=0.272, stddev=0.748] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.12373, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-25,-21,-17,-13 -8.4,-5.0,0.28,5.7,9.1 12,15,16,22), mean=0.23, stddev=7.17], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.1,-7.9,-6.8,-4.4 -2.8,-1.0,1.4,4.4,6.2 7.5,9.2,10,16), mean=1.58, stddev=3.63] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.98e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-294
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000226939, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007884, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.08,0.09,0.16,0.24,0.25 0.27,0.29,0.29,0.31), mean=0.165, stddev=0.072], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.009,0.02 0.05,0.09,0.12,0.15,0.17 0.19,0.20,0.20,0.22), mean=0.119, stddev=0.0452], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,2e-06,3e-06,4e-06 5e-06,1e-05,8e-05,0.04,0.36 0.48,0.59,0.64,0.79), mean=0.0718, stddev=0.165], bias-{mean,stddev}=0.0003136,0.006483, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000226939, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008106, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.17 0.18,0.19,0.22,0.25,0.28 0.29,0.31,0.34,0.39), mean=0.223, stddev=0.0376], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.07,0.13,0.26,0.27 0.29,0.30,0.31,0.32), mean=0.163, stddev=0.0869], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,3e-06,4e-06,5e-06 8e-06,2e-05,0.0006,0.13,0.42 0.61,0.76,0.84,0.94), mean=0.0977, stddev=0.204], bias-{mean,stddev}=0.001261,0.01626, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.13,0.41,0.52 0.64,0.74,0.85,1.6), mean=0.203, stddev=0.236], oderiv-count=5632
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-302.966, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000226939, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006684, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.22,0.23 0.24,0.25,0.26,0.28,0.29 0.30,0.31,0.31,0.37), mean=0.263, stddev=0.021], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.15,0.17,0.18 0.19,0.20,0.21,0.25), mean=0.151, stddev=0.0219], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.08,0.10,0.17,0.32,0.43 0.53,0.63,0.68,0.79), mean=0.22, stddev=0.146], bias-{mean,stddev}=0.0001717,0.008445, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,0.08,0.09 0.10,0.11,0.12,0.14), mean=0.0449, stddev=0.0361], oderiv-count=18112
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-57.2056, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000226939, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004078, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,1e-05,2e-05,4e-05 0.0001,0.002,0.07,0.14,0.18 0.20,0.22,0.24,0.46), mean=0.0779, stddev=0.0688], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.07,0.10,0.20,0.22,0.23 0.23,0.24,0.25,0.30), mean=0.177, stddev=0.0572], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,9e-06,9e-06,1e-05 7e-05,0.04,0.09,0.21,0.29 0.40,0.54,0.61,0.76), mean=0.131, stddev=0.132], bias-{mean,stddev}=-4.469e-05,0.002428, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000226939, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001153, w_fc-rms=0.001323, w_oc-rms=0.001985, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000226027, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.7,-2.7,-2.1,-1.3 -0.77,-0.19,0.50,1.2,2.1 2.8,3.4,4.6,6.2), mean=0.575, stddev=1.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-1.1,-0.95,-0.59 -0.35,-0.03,0.25,0.45,0.83 1.0,1.3,1.4,2.1), mean=0.237, stddev=0.486] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000226027, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.0,-2.9,-2.4,-1.5 -1.1,-0.37,0.49,0.89,1.4 1.9,2.8,3.3,5.4), mean=0.299, stddev=1.11], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.83,-0.62,-0.34 -0.16,0.07,0.25,0.38,0.61 0.80,0.98,1.1,1.4), mean=0.236, stddev=0.331] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.521861, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-32,-25,-18,-14 -11,-5.7,-0.02,5.2,9.6 12,16,18,33), mean=-0.352, stddev=7.88], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-14,-12,-11,-8.7 -5.8,-2.7,1.0,3.8,6.9 9.3,11,13,22), mean=0.752, stddev=5.02] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000226027, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.5,-3.3,-3.0,-2.1 -1.3,-0.45,0.50,1.2,2.2 2.9,3.9,4.2,6.1), mean=0.424, stddev=1.44], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.9,-1.6,-1.2,-0.66 -0.32,0.04,0.25,0.57,0.88 1.2,1.4,1.7,2.4), mean=0.267, stddev=0.562] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.000226027, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-29,-19,-15,-11 -8.0,-3.8,-0.005,4.0,7.2 10,12,16,20), mean=-0.186, stddev=6.35], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-6.5,-6.0,-4.8 -3.3,-1.1,1.0,2.4,3.9 5.1,6.9,8.1,13), mean=0.703, stddev=2.88] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.22e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-192
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000226939, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005275, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.08,0.08,0.11,0.15,0.16 0.17,0.17,0.18,0.19), mean=0.116, stddev=0.0326], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0009,0.001,0.001 0.002,0.007,0.09,0.11,0.12 0.13,0.14,0.15,0.17), mean=0.07, stddev=0.0483], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,3e-06,3e-06,3e-06 4e-06,6e-06,0.0001,0.09,0.25 0.32,0.36,0.39,0.42), mean=0.0542, stddev=0.107], bias-{mean,stddev}=0.0003348,0.006225, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000226939, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00656, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.11,0.12,0.13 0.14,0.15,0.18,0.20,0.22 0.24,0.26,0.28,0.32), mean=0.18, stddev=0.0338], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.09,0.10,0.13,0.19,0.20 0.21,0.22,0.23,0.25), mean=0.143, stddev=0.0446], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,2e-06,3e-06 5e-06,1e-05,0.002,0.16,0.34 0.48,0.60,0.65,0.76), mean=0.087, stddev=0.161], bias-{mean,stddev}=0.0004532,0.009238, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.39e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.29,-0.17,-0.14,-0.09 -0.06,-0.004,0.08,0.17,0.24 0.27,0.32,0.37,0.43), mean=0.0838, stddev=0.113], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.81,-0.54,-0.29 -0.05,0.08,0.40,0.82,1.0 1.2,1.4,1.4,1.9), mean=0.436, stddev=0.453]
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=188.554, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.9,-6.2,-4.9,-3.9 -2.8,-1.8,-0.005,1.7,2.6 3.6,4.5,4.8,7.0), mean=-0.027, stddev=2.24], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0,0 0.32,0.56,0.64,0.76), mean=0.0286, stddev=0.121]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000226939, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005482, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.18 0.18,0.19,0.21,0.23,0.25 0.26,0.27,0.27,0.31), mean=0.215, stddev=0.0246], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.09 0.10,0.11,0.12,0.14,0.15 0.17,0.18,0.19,0.21), mean=0.123, stddev=0.0242], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.06,0.07,0.13,0.26,0.36 0.46,0.55,0.59,0.69), mean=0.174, stddev=0.129], bias-{mean,stddev}=0.0007676,0.007206, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.05,0.06 0.07,0.07,0.08,0.10), mean=0.0321, stddev=0.0233], oderiv-count=27840
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=434.314, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.8,-3.5,-3.2,-2.3 -1.7,-0.98,0.24,1.4,2.1 2.5,3.2,3.7,4.5), mean=0.236, stddev=1.49], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.89,1.4 1.7,2.1,2.4,3.7), mean=0.355, stddev=0.64]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000226939, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005494, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.05 0.06,0.08,0.10,0.20,0.24 0.25,0.27,0.29,0.33), mean=0.125, stddev=0.0641], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.15 0.17,0.18,0.22,0.30,0.37 0.39,0.41,0.42,0.46), mean=0.239, stddev=0.0738], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.0002,0.0002,0.002 0.03,0.05,0.10,0.25,0.44 0.61,0.76,0.81,0.91), mean=0.17, stddev=0.184], bias-{mean,stddev}=0.0001411,0.002051, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000226939, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.002564, w_fc-rms=0.003739, w_oc-rms=0.004376, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000291143, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-10.0,-8.2,-6.7 -5.2,-3.3,0.15,4.5,7.1 8.9,12,13,18), mean=0.614, stddev=4.79], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.0,-1.8,-1.6,-1.2 -0.87,-0.47,0.45,1.2,1.6 1.9,2.3,2.5,4.5), mean=0.399, stddev=0.971] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000291143, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-16,-14,-12,-10 -8.3,-5.9,-1.2,3.4,5.5 8.3,10,11,13), mean=-1.25, stddev=5.45], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-1.9,-1.8,-1.3 -0.83,-0.31,0.61,1.7,2.3 2.9,3.5,4.1,4.6), mean=0.685, stddev=1.25] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=1.97727, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-64,-54,-45,-34 -27,-18,0.66,17,28 38,51,55,65), mean=0.68, stddev=21.9], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-27,-19,-17,-12 -8.1,-3.9,3.3,11,15 19,23,26,32), mean=3.51, stddev=9.36] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00221369, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-17,-13,-12,-9.5 -7.5,-5.4,-1.8,2.3,4.5 6.6,8.3,9.8,29), mean=-1.54, stddev=4.87], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.2,-2.9,-2.4,-1.7 -1.1,-0.53,0.53,1.6,2.3 2.9,3.4,3.7,5.6), mean=0.551, stddev=1.38] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=2.20559, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-57,-43,-37,-30 -22,-15,-0.46,14,23 30,36,39,73), mean=0.0102, stddev=17.7], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-21,-15,-13,-10 -7.4,-3.4,3.1,10,14 17,20,22,27), mean=3.28, stddev=8.26] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-448, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-65
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000226939, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006868, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.09,0.10,0.13,0.20,0.21 0.22,0.22,0.22,0.23), mean=0.149, stddev=0.0477], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.08,0.09,0.11,0.13,0.13 0.14,0.15,0.16,0.19), mean=0.108, stddev=0.0242], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,5e-05,7e-05,0.0001 0.0002,0.0005,0.04,0.20,0.29 0.36,0.41,0.44,0.48), mean=0.0975, stddev=0.123], bias-{mean,stddev}=-1.231e-05,0.004918, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000226939, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00757, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.06 0.07,0.08,0.11,0.14,0.17 0.19,0.23,0.25,0.44), mean=0.114, stddev=0.0433], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.26,0.27,0.34,0.41,0.42 0.44,0.45,0.46,0.50), mean=0.341, stddev=0.0679], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,6e-05,7e-05,0.0001 0.0002,0.0004,0.02,0.49,0.70 0.80,0.87,0.90,0.98), mean=0.195, stddev=0.287], bias-{mean,stddev}=5.754e-12,0.00193, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.03,0.04 0.05,0.06,0.06,0.33), mean=0.0183, stddev=0.0209], oderiv-count=33920

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.34964 tdnn2.affine:8.52834 lstm1.W_all:7.22539 lstm1.lstm_nonlin:0.139996 lstm1.W_rp:2.90087 tdnn3.affine:5.17581 tdnn4.affine:6.02331 lstm2.W_all:4.74358 lstm2.lstm_nonlin:0.0604172 lstm2.W_rp:1.94209 tdnn5.affine:4.18329 tdnn6.affine:4.94018 lstm3.W_all:6.38841 lstm3.lstm_nonlin:0.143683 lstm3.W_rp:2.52674 output.affine:5.59928 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.1486 tdnn2.affine:11.4228 lstm1.W_all:20.2252 lstm1.lstm_nonlin:1.48555 lstm1.W_rp:11.6205 tdnn3.affine:8.15385 tdnn4.affine:8.44324 lstm2.W_all:15.7951 lstm2.lstm_nonlin:0.733177 lstm2.W_rp:10.572 tdnn5.affine:7.51724 tdnn6.affine:8.03817 lstm3.W_all:22.788 lstm3.lstm_nonlin:1.7652 lstm3.W_rp:25.5277 output.affine:29.7737 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.690106 tdnn2.affine:0.751743 lstm1.W_all:0.357946 lstm1.lstm_nonlin:0.092954 lstm1.W_rp:0.249442 tdnn3.affine:0.637949 tdnn4.affine:0.71564 lstm2.W_all:0.300667 lstm2.lstm_nonlin:0.0830027 lstm2.W_rp:0.184241 tdnn5.affine:0.560364 tdnn6.affine:0.616595 lstm3.W_all:0.280341 lstm3.lstm_nonlin:0.0819394 lstm3.W_rp:0.0990674 output.affine:0.187956 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:36:43 KST 2020, elapsed time 0 seconds
