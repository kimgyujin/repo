# nnet3-info exp/nnet3/tdnn_lstm1c_sp/228.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/227.mdl exp/nnet3/tdnn_lstm1c_sp/228.mdl 
# Started at Thu Jul 30 11:31:13 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/228.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000146032, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02765, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.009,0.01 0.02,0.10,0.49,0.58,0.64 0.71,0.77,0.79,1.0), mean=0.423, stddev=0.224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.13 0.16,0.20,0.55,0.75,1.0 1.2,1.3,1.4,1.4), mean=0.538, stddev=0.328], bias-{mean,stddev}=0.002885,0.05094, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0.139701, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,8e-06,2e-05,6e-05 0.0001,0.0008,0.05,0.08,0.10 0.11,0.12,0.13,0.18), mean=0.0499, stddev=0.0366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.006,0.009,0.02 0.04,0.09,0.46,0.62,0.73 0.80,0.87,0.90,0.99), mean=0.414, stddev=0.251], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.02 0.04,0.21,0.35,0.45,0.52 0.60,0.68,0.85,1.7), mean=0.338, stddev=0.187], oderiv-count=1.14893e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34717, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,2e-06,4e-06,1e-05 3e-05,0.0004,0.05,0.08,0.09 0.11,0.13,0.14,0.22), mean=0.0468, stddev=0.0366], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,6e-05,8e-05,0.0002 0.0004,0.003,0.08,0.10,0.11 0.11,0.12,0.12,0.15), mean=0.0645, stddev=0.0392]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000146032, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01089, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.34,0.35 0.37,0.39,0.42,0.46,0.49 0.52,0.55,0.59,0.66), mean=0.427, stddev=0.0516], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.007 0.01,0.07,0.26,0.30,0.32 0.34,0.37,0.41,0.65), mean=0.221, stddev=0.114], bias-{mean,stddev}=-0.005895,0.0296, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.24,0.25,0.28,0.31,0.33 0.35,0.37,0.41,0.51), mean=0.285, stddev=0.0387], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.39,0.40,0.41 0.42,0.43,0.46,0.48,0.50 0.51,0.52,0.53,0.55), mean=0.459, stddev=0.0319], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.05,0.06 0.07,0.07,0.07,0.08), mean=0.0476, stddev=0.00925], oderiv-count=1.14874e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33942.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.23,0.24,0.27,0.31,0.33 0.35,0.39,0.42,0.54), mean=0.278, stddev=0.0435], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.41 0.42,0.44,0.48,0.53,0.57 0.59,0.61,0.63,0.82), mean=0.489, stddev=0.0574]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000146032, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01529, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,2e-05,6e-05,0.0004 0.004,0.14,0.34,0.52,0.60 0.66,0.73,0.76,1.0), mean=0.331, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.30,0.35 0.41,0.61,0.71,0.78,0.83 0.88,0.95,1.0,1.2), mean=0.68, stddev=0.155], bias-{mean,stddev}=-0.0003304,0.02208, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000146032, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0311, w_fc-rms=0.02489, w_oc-rms=0.03082, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633227, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.44,0.45 0.46,0.46,0.48,0.50,0.53 0.60,0.72,0.75,0.78), mean=0.496, stddev=0.0554], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0161] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633227, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.42,0.43,0.44 0.45,0.47,0.49,0.51,0.54 0.61,0.69,0.71,0.77), mean=0.499, stddev=0.0524], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.237, stddev=0.0146] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00942179, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.86,-0.80,-0.42 -0.26,-0.14,0.001,0.16,0.31 0.42,0.74,0.80,0.88), mean=0.0083, stddev=0.273], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.25,0.36 0.43,0.49,0.62,0.81,1.0 1.0,1.0,1.0,1.0), mean=0.648, stddev=0.197] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633227, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.41,0.42 0.43,0.44,0.46,0.50,0.50 0.51,0.53,0.54,0.60), mean=0.467, stddev=0.0293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.226, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00633227, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.77,-0.67,-0.33 -0.19,-0.10,0.002,0.12,0.22 0.32,0.59,0.71,0.83), mean=0.00564, stddev=0.221], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.35,0.39,0.58 0.73,0.80,0.88,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.854, stddev=0.129] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.7917e-06, count-zeroing-boundaries=294477
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.112672
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000146032, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03159, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.23 0.25,0.30,0.57,0.98,1.0 1.1,1.1,1.2,1.2), mean=0.64, stddev=0.331], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.002,0.003 0.02,0.24,0.43,0.58,0.70 0.90,1.2,1.4,1.5), mean=0.43, stddev=0.273], bias-{mean,stddev}=0.01308,0.25, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000146032, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01127, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.18,0.20,0.21 0.23,0.25,0.30,0.37,0.40 0.44,0.45,0.46,0.56), mean=0.307, stddev=0.0683], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.11,0.21,0.35,0.38 0.40,0.42,0.44,0.46), mean=0.228, stddev=0.119], bias-{mean,stddev}=0.003447,0.0161, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.95e+05, self-repaired-proportion=0.000753638, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.02,0.03,0.04 0.05,0.06,0.08,0.10,0.11 0.12,0.14,0.14,0.16), mean=0.0803, stddev=0.0257], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.16,0.20,0.25 0.32,0.39,0.51,0.61,0.65 0.68,0.73,0.75,0.83), mean=0.494, stddev=0.131], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.10 0.11,0.11,0.13,0.15,0.17 0.19,0.21,0.24,0.40), mean=0.136, stddev=0.0335], oderiv-count=1.13997e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31620.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.03,0.04 0.04,0.06,0.08,0.10,0.11 0.12,0.13,0.14,0.17), mean=0.0774, stddev=0.026], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.07,0.08,0.09 0.10,0.11,0.12,0.14,0.15 0.16,0.17,0.18,0.20), mean=0.122, stddev=0.0213]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000146032, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008054, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.27 0.28,0.29,0.31,0.34,0.36 0.37,0.39,0.41,0.51), mean=0.316, stddev=0.0337], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.12,0.13,0.13 0.14,0.15,0.18,0.21,0.23 0.24,0.26,0.27,0.34), mean=0.18, stddev=0.034], bias-{mean,stddev}=-0.01395,0.01483, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.91e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.21,0.22,0.25,0.27,0.29 0.30,0.31,0.32,0.38), mean=0.248, stddev=0.0301], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.39 0.40,0.41,0.44,0.47,0.48 0.49,0.51,0.51,0.53), mean=0.44, stddev=0.0315], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.0384, stddev=0.00312], oderiv-count=996928
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29298, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.21,0.22,0.24,0.27,0.28 0.30,0.32,0.33,0.37), mean=0.245, stddev=0.0322], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.37,0.39 0.41,0.43,0.46,0.51,0.54 0.57,0.60,0.64,0.74), mean=0.47, stddev=0.0561]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000146032, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01291, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,5e-07,9e-07,2e-06 9e-06,0.0002,0.28,0.47,0.54 0.58,0.62,0.65,1.1), mean=0.249, stddev=0.215], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.25,0.27,0.32 0.44,0.53,0.59,0.64,0.68 0.72,0.80,0.91,1.5), mean=0.576, stddev=0.12], bias-{mean,stddev}=-0.003106,0.04835, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000146032, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01172, w_fc-rms=0.009026, w_oc-rms=0.01766, count=1.34e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638668, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.43,0.43,0.44 0.45,0.46,0.50,0.51,0.55 0.60,0.64,0.67,0.75), mean=0.5, stddev=0.0467], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.22,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0141] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638668, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.40,0.42 0.43,0.45,0.50,0.50,0.51 0.53,0.57,0.60,0.74), mean=0.484, stddev=0.0408], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0122] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00829748, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.79,-0.56,-0.35 -0.28,-0.12,4e-05,0.13,0.27 0.40,0.64,0.71,0.85), mean=0.00283, stddev=0.236], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.30,0.37,0.48 0.53,0.58,0.67,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.747, stddev=0.204] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638668, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.42 0.44,0.45,0.50,0.50,0.51 0.54,0.57,0.59,0.64), mean=0.485, stddev=0.0356], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0149] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00638668, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.50,-0.37,-0.25 -0.19,-0.09,-4e-05,0.08,0.20 0.30,0.46,0.54,0.69), mean=0.00283, stddev=0.177], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.53,0.62,0.72 0.79,0.85,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.905, stddev=0.101] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.85027e-06, count-zeroing-boundaries=259722
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.112672
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000146032, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03002, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.32,0.34,0.38 0.40,0.42,0.61,0.87,0.92 0.95,0.99,1.0,1.1), mean=0.649, stddev=0.217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0006,0.0008 0.002,0.005,0.46,0.63,0.73 0.82,0.96,1.0,1.2), mean=0.376, stddev=0.305], bias-{mean,stddev}=-1.234e-05,0.1741, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000146032, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01008, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.21,0.23,0.26,0.32,0.36 0.40,0.43,0.44,0.47), mean=0.275, stddev=0.0612], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.13,0.14,0.21,0.29,0.32 0.34,0.35,0.36,0.41), mean=0.217, stddev=0.0762], bias-{mean,stddev}=0.0009505,0.008972, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.65e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.04,0.06,0.07,0.08 0.09,0.10,0.10,0.13), mean=0.0557, stddev=0.0189], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.24 0.28,0.34,0.47,0.57,0.62 0.64,0.67,0.69,0.75), mean=0.459, stddev=0.125], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.12 0.12,0.13,0.14,0.17,0.19 0.22,0.24,0.24,0.28), mean=0.152, stddev=0.0296], oderiv-count=968704
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26975.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.04,0.06,0.07,0.08 0.09,0.10,0.11,0.12), mean=0.0568, stddev=0.0196], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.07,0.08,0.09,0.11,0.11 0.12,0.13,0.14,0.16), mean=0.0924, stddev=0.0175]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000146032, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007546, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.19,0.21 0.24,0.26,0.29,0.33,0.36 0.37,0.39,0.40,0.43), mean=0.294, stddev=0.0478], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.14,0.16,0.20,0.22 0.24,0.27,0.29,0.34), mean=0.168, stddev=0.0374], bias-{mean,stddev}=-0.01148,0.02111, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.04e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.17,0.19 0.20,0.22,0.25,0.27,0.28 0.30,0.31,0.33,0.40), mean=0.246, stddev=0.0339], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.37 0.38,0.40,0.42,0.45,0.46 0.47,0.48,0.48,0.53), mean=0.42, stddev=0.03], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0309, stddev=0.0025], oderiv-count=918080
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24653.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.16,0.19 0.20,0.22,0.25,0.28,0.29 0.31,0.32,0.33,0.47), mean=0.249, stddev=0.037], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.28,0.36 0.39,0.43,0.49,0.55,0.58 0.63,0.67,0.69,0.78), mean=0.49, stddev=0.0815]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000146032, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01838, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.22,0.24,0.26 0.28,0.32,0.42,0.59,0.67 0.70,0.74,0.76,1.1), mean=0.447, stddev=0.14], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.59,0.62 0.64,0.66,0.72,0.96,1.2 1.3,1.4,1.5,1.8), mean=0.808, stddev=0.223], bias-{mean,stddev}=0.02307,0.02287, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000146032, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05144, w_fc-rms=0.04229, w_oc-rms=0.04011, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645237, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.60,0.62 0.64,0.66,0.70,0.74,0.76 0.78,0.81,0.82,0.86), mean=0.702, stddev=0.05], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.181, stddev=0.017] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645237, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.50,0.53 0.55,0.58,0.63,0.67,0.72 0.77,0.82,0.83,0.85), mean=0.63, stddev=0.0696], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.15 0.17,0.18,0.20,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.194, stddev=0.0195] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0128192, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.82,-0.69,-0.51 -0.37,-0.24,0.003,0.23,0.34 0.55,0.69,0.72,0.91), mean=0.0025, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.23,0.29 0.34,0.41,0.47,0.51,0.53 0.55,0.56,0.56,0.60), mean=0.454, stddev=0.075] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645237, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.54,0.55,0.58 0.61,0.64,0.68,0.71,0.73 0.75,0.78,0.80,0.86), mean=0.674, stddev=0.0509], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.15 0.16,0.17,0.18,0.19,0.19 0.19,0.20,0.20,0.21), mean=0.176, stddev=0.0153] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00842515, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.80,-0.67,-0.49 -0.33,-0.21,-0.0003,0.20,0.31 0.52,0.66,0.69,0.89), mean=0.000893, stddev=0.283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.27,0.29,0.37 0.44,0.55,0.63,0.67,0.69 0.70,0.72,0.72,0.75), mean=0.6, stddev=0.101] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=220860
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.112672
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000146032, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07596, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.95,1.0,1.0,1.1 1.1,1.2,1.6,2.1,2.2 2.3,2.4,2.4,2.5), mean=1.67, stddev=0.458], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.81,0.93,0.97 1.0,1.1,1.2,1.4,1.5 1.6,1.7,1.7,1.8), mean=1.21, stddev=0.186], bias-{mean,stddev}=-0.02466,0.4275, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000146032, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03771, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.50,0.51,0.53 0.54,0.56,0.59,0.64,0.66 0.70,0.75,0.80,2.1), mean=0.603, stddev=0.082], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.0,1.1,1.1 1.1,1.2,1.6,2.1,2.2 2.2,2.3,2.3,2.5), mean=1.67, stddev=0.437], bias-{mean,stddev}=4.745e-09,0.0269, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0135], oderiv-count=631040
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/227.mdl exp/nnet3/tdnn_lstm1c_sp/228.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.76251 tdnn2.affine:5.65785 lstm1.W_all:4.38902 lstm1.lstm_nonlin:0.0829769 lstm1.W_rp:1.8142 tdnn3.affine:3.74447 tdnn4.affine:4.14 lstm2.W_all:3.07628 lstm2.lstm_nonlin:0.0366205 lstm2.W_rp:1.26669 tdnn5.affine:2.93979 tdnn6.affine:3.32317 lstm3.W_all:3.78713 lstm3.lstm_nonlin:0.0739826 lstm3.W_rp:1.45601 output.affine:3.53043 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:10.982 tdnn2.affine:9.82885 lstm1.W_all:17.8113 lstm1.lstm_nonlin:1.14861 lstm1.W_rp:12.2969 tdnn3.affine:7.18855 tdnn4.affine:7.26859 lstm2.W_all:15.1734 lstm2.lstm_nonlin:0.525301 lstm2.W_rp:11.3906 tdnn5.affine:6.42151 tdnn6.affine:6.81838 lstm3.W_all:21.417 lstm3.lstm_nonlin:1.77277 lstm3.W_rp:28.7704 output.affine:27.9216 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.522862 tdnn2.affine:0.571383 lstm1.W_all:0.246074 lstm1.lstm_nonlin:0.0718065 lstm1.W_rp:0.147528 tdnn3.affine:0.519466 tdnn4.affine:0.565586 lstm2.W_all:0.202728 lstm2.lstm_nonlin:0.0698428 lstm2.W_rp:0.111176 tdnn5.affine:0.453721 tdnn6.affine:0.484039 lstm3.W_all:0.176763 lstm3.lstm_nonlin:0.0415297 lstm3.W_rp:0.0506019 output.affine:0.1263 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:31:13 KST 2020, elapsed time 0 seconds
