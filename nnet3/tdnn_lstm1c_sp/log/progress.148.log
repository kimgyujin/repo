# nnet3-info exp/nnet3/tdnn_lstm1c_sp/148.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/147.mdl exp/nnet3/tdnn_lstm1c_sp/148.mdl 
# Started at Thu Jul 30 10:59:34 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/148.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00018821, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02984, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.009,0.01,0.01 0.03,0.37,0.52,0.61,0.67 0.72,0.78,0.82,1.1), mean=0.468, stddev=0.219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.17,0.21,0.58,0.80,1.1 1.4,1.4,1.5,1.6), mean=0.58, stddev=0.355], bias-{mean,stddev}=0.003279,0.05873, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0.128022, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,5e-06,1e-05,4e-05 0.0002,0.004,0.06,0.09,0.10 0.11,0.14,0.14,0.18), mean=0.0572, stddev=0.0379], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.003,0.005,0.02 0.04,0.11,0.48,0.64,0.74 0.80,0.86,0.88,0.95), mean=0.435, stddev=0.243], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.06,0.28,0.37,0.47,0.53 0.63,0.74,0.84,1.4), mean=0.364, stddev=0.178], oderiv-count=1.15469e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30392.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,2e-06,5e-06,1e-05 7e-05,0.004,0.06,0.08,0.10 0.12,0.14,0.16,0.18), mean=0.0536, stddev=0.038], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,5e-05,9e-05,0.0002 0.0005,0.02,0.09,0.10,0.11 0.12,0.12,0.13,0.15), mean=0.0732, stddev=0.0398]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00018821, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01214, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.37,0.40 0.41,0.43,0.47,0.52,0.55 0.57,0.60,0.62,0.75), mean=0.476, stddev=0.0556], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.009 0.02,0.22,0.29,0.32,0.35 0.37,0.40,0.41,0.72), mean=0.252, stddev=0.115], bias-{mean,stddev}=-0.002,0.02858, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.21e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.27 0.29,0.30,0.33,0.36,0.38 0.40,0.44,0.45,0.54), mean=0.332, stddev=0.0399], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.40,0.41 0.42,0.44,0.46,0.48,0.50 0.50,0.51,0.52,0.54), mean=0.458, stddev=0.0276], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0453, stddev=0.00903], oderiv-count=1.21491e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29713, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.28,0.29,0.32,0.36,0.38 0.40,0.44,0.47,0.54), mean=0.328, stddev=0.0434], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.48 0.50,0.52,0.57,0.63,0.66 0.69,0.75,0.78,0.85), mean=0.578, stddev=0.0667]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00018821, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01663, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0008,0.003,0.01 0.07,0.20,0.37,0.54,0.63 0.72,0.80,0.88,1.1), mean=0.371, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.37,0.38,0.44 0.49,0.65,0.77,0.85,0.90 0.94,1.0,1.0,1.3), mean=0.743, stddev=0.151], bias-{mean,stddev}=-0.002093,0.02342, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00018821, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02203, w_fc-rms=0.03445, w_oc-rms=0.0486, count=1.48e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615328, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.44 0.45,0.46,0.49,0.52,0.55 0.59,0.65,0.67,0.75), mean=0.497, stddev=0.0468], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.20,0.21 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0142] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615328, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.39,0.41 0.42,0.45,0.49,0.53,0.57 0.66,0.74,0.79,0.88), mean=0.496, stddev=0.0759], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.18,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0187] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00662313, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.77,-0.69,-0.51 -0.32,-0.17,-0.003,0.18,0.31 0.51,0.71,0.78,0.83), mean=0.00338, stddev=0.281], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.29,0.31,0.38 0.43,0.49,0.61,0.74,0.95 0.99,1.0,1.0,1.0), mean=0.627, stddev=0.177] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615328, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.41,0.42 0.43,0.45,0.47,0.51,0.53 0.54,0.57,0.58,0.63), mean=0.477, stddev=0.0384], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.0169] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0166123, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.96,-0.80,-0.65,-0.47 -0.29,-0.16,-0.003,0.17,0.28 0.46,0.70,0.81,0.89), mean=0.00314, stddev=0.271], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.20,0.30,0.49 0.62,0.74,0.83,0.90,0.98 1.0,1.0,1.0,1.0), mean=0.802, stddev=0.154] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=300198
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00247934
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00018821, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03035, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.18 0.20,0.23,0.40,0.97,1.0 1.1,1.1,1.1,1.2), mean=0.592, stddev=0.359], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.02,0.03,0.05 0.12,0.32,0.45,0.59,0.66 0.79,0.93,0.96,1.1), mean=0.446, stddev=0.202], bias-{mean,stddev}=0.0003151,0.04614, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00018821, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01221, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.19,0.20,0.23 0.25,0.27,0.33,0.39,0.43 0.46,0.49,0.50,0.69), mean=0.333, stddev=0.0727], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.06 0.07,0.09,0.18,0.39,0.44 0.47,0.50,0.52,0.55), mean=0.235, stddev=0.15], bias-{mean,stddev}=-0.002068,0.03068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.32e+05, self-repaired-proportion=0.00547337, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.04,0.05 0.07,0.08,0.12,0.15,0.16 0.17,0.19,0.20,0.24), mean=0.116, stddev=0.0387], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.11,0.17,0.25 0.30,0.37,0.50,0.60,0.65 0.67,0.70,0.71,0.76), mean=0.484, stddev=0.135], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.07,0.07 0.07,0.08,0.09,0.10,0.12 0.13,0.14,0.19,0.29), mean=0.0935, stddev=0.0238], oderiv-count=1.0432e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27673.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.02,0.03,0.05 0.06,0.08,0.11,0.14,0.16 0.17,0.18,0.21,0.25), mean=0.11, stddev=0.0386], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.07,0.10,0.13 0.15,0.16,0.18,0.20,0.22 0.23,0.25,0.27,0.31), mean=0.18, stddev=0.0346]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00018821, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008982, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.30 0.31,0.32,0.35,0.38,0.39 0.41,0.43,0.47,0.60), mean=0.353, stddev=0.0382], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.14,0.15,0.15 0.16,0.17,0.20,0.23,0.25 0.26,0.28,0.29,0.37), mean=0.202, stddev=0.0336], bias-{mean,stddev}=-0.01065,0.01739, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.61e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.23,0.24,0.28,0.31,0.32 0.34,0.37,0.38,0.45), mean=0.28, stddev=0.0383], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.38,0.39 0.40,0.42,0.44,0.47,0.48 0.49,0.51,0.51,0.52), mean=0.443, stddev=0.0308], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.04), mean=0.0331, stddev=0.00286], oderiv-count=1.01645e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25634.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.21 0.23,0.24,0.27,0.30,0.32 0.34,0.37,0.39,0.44), mean=0.275, stddev=0.0391], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.43,0.45 0.47,0.49,0.53,0.58,0.61 0.65,0.67,0.71,0.83), mean=0.536, stddev=0.0616]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00018821, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01317, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,3e-06,5e-06,1e-05 5e-05,0.0009,0.28,0.47,0.55 0.60,0.64,0.67,1.1), mean=0.256, stddev=0.217], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.26,0.30 0.37,0.50,0.62,0.67,0.70 0.73,0.79,0.83,1.3), mean=0.587, stddev=0.129], bias-{mean,stddev}=-0.003422,0.02505, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00018821, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0121, w_fc-rms=0.01528, w_oc-rms=0.01999, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620466, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.44,0.45 0.46,0.47,0.50,0.50,0.53 0.55,0.58,0.60,0.65), mean=0.495, stddev=0.0306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0151] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620466, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.44,0.45,0.50,0.50,0.51 0.53,0.59,0.64,0.70), mean=0.485, stddev=0.0393], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.21,0.22 0.23,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0117] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00620466, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.62,-0.55,-0.33 -0.23,-0.10,0.0004,0.12,0.23 0.30,0.45,0.62,0.78), mean=0.00179, stddev=0.199], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.43,0.46,0.51 0.55,0.58,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.749, stddev=0.195] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620466, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.42,0.44 0.45,0.46,0.50,0.50,0.52 0.55,0.57,0.58,0.62), mean=0.489, stddev=0.0313], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0158] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00620466, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.61,-0.52,-0.32 -0.21,-0.10,0.0003,0.12,0.21 0.29,0.41,0.60,0.80), mean=0.00256, stddev=0.193], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.46,0.59,0.70 0.77,0.83,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.89, stddev=0.11] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.75e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=264780
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00247934
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00018821, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02786, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.31,0.34 0.35,0.37,0.52,0.83,0.88 0.91,0.94,0.98,0.99), mean=0.596, stddev=0.22], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0009,0.001,0.002 0.003,0.007,0.46,0.60,0.66 0.75,0.83,0.84,0.94), mean=0.356, stddev=0.274], bias-{mean,stddev}=-0.002327,0.09431, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00018821, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01127, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.20 0.22,0.24,0.29,0.36,0.41 0.47,0.51,0.53,0.59), mean=0.304, stddev=0.0797], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.14,0.15,0.23,0.34,0.37 0.38,0.41,0.43,0.48), mean=0.241, stddev=0.0898], bias-{mean,stddev}=0.002736,0.01568, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.81e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.03 0.04,0.05,0.08,0.10,0.11 0.12,0.13,0.14,0.15), mean=0.0762, stddev=0.0292], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.16 0.23,0.29,0.43,0.56,0.60 0.62,0.65,0.67,0.71), mean=0.423, stddev=0.141], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.09,0.10,0.12,0.14 0.15,0.17,0.18,0.23), mean=0.104, stddev=0.0243], oderiv-count=991488
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23595, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.03,0.05,0.07,0.10,0.11 0.12,0.13,0.13,0.16), mean=0.0735, stddev=0.0293], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.09 0.10,0.11,0.13,0.15,0.16 0.17,0.18,0.19,0.21), mean=0.13, stddev=0.0282]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00018821, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008498, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.28,0.29,0.33,0.38,0.40 0.41,0.43,0.44,0.54), mean=0.332, stddev=0.0474], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.13 0.14,0.16,0.18,0.22,0.24 0.27,0.30,0.33,0.40), mean=0.189, stddev=0.0439], bias-{mean,stddev}=-0.01239,0.01593, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.81e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.21 0.23,0.24,0.28,0.31,0.32 0.34,0.36,0.38,0.51), mean=0.277, stddev=0.0398], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.36 0.37,0.38,0.41,0.44,0.46 0.47,0.49,0.49,0.52), mean=0.415, stddev=0.0341], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0275, stddev=0.00273], oderiv-count=978880
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=21555.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.19,0.20 0.22,0.24,0.27,0.30,0.32 0.34,0.36,0.38,0.53), mean=0.272, stddev=0.0421], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.40,0.42 0.44,0.47,0.54,0.60,0.64 0.67,0.71,0.74,0.98), mean=0.542, stddev=0.079]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00018821, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01927, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.17,0.25 0.31,0.35,0.42,0.62,0.74 0.78,0.83,0.85,1.3), mean=0.464, stddev=0.162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.56,0.57,0.59 0.61,0.64,0.71,1.0,1.4 1.4,1.5,1.5,1.6), mean=0.834, stddev=0.279], bias-{mean,stddev}=0.008018,0.02165, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00018821, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03287, w_fc-rms=0.04517, w_oc-rms=0.06497, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626665, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.46,0.47,0.49 0.51,0.53,0.60,0.65,0.67 0.69,0.72,0.73,0.82), mean=0.591, stddev=0.0656], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.17,0.18 0.19,0.20,0.20,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.203, stddev=0.0104] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626665, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.47,0.49 0.51,0.54,0.59,0.64,0.68 0.72,0.75,0.78,0.89), mean=0.596, stddev=0.0698], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.16,0.17,0.18 0.19,0.19,0.20,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.202, stddev=0.015] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.011758, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.84,-0.70,-0.54 -0.36,-0.23,-0.03,0.21,0.36 0.50,0.78,0.82,0.90), mean=-0.00791, stddev=0.309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.24,0.26,0.30 0.35,0.38,0.43,0.47,0.49 0.50,0.52,0.52,0.56), mean=0.423, stddev=0.0595] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0100887, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.57,0.58 0.60,0.63,0.67,0.71,0.74 0.75,0.78,0.81,0.95), mean=0.672, stddev=0.0544], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.12,0.14,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.179, stddev=0.017] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0353796, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.91,-0.75,-0.52 -0.36,-0.21,-0.02,0.19,0.35 0.51,0.84,0.89,0.99), mean=-0.00742, stddev=0.316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.13,0.18,0.30 0.42,0.52,0.63,0.67,0.69 0.70,0.72,0.72,0.75), mean=0.587, stddev=0.124] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.51e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.44091e-06, count-zeroing-boundaries=225179
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00247934
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00018821, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07071, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.0,1.1,1.1 1.1,1.2,1.6,1.9,2.0 2.1,2.1,2.1,2.2), mean=1.57, stddev=0.353], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.57,0.79,0.89 0.95,1.0,1.1,1.3,1.3 1.4,1.4,1.4,1.6), mean=1.13, stddev=0.161], bias-{mean,stddev}=0.003669,0.09179, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00018821, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0396, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.51,0.52,0.54 0.56,0.58,0.62,0.68,0.71 0.75,0.79,0.83,1.9), mean=0.633, stddev=0.084], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.3 1.3,1.4,1.8,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.78, stddev=0.362], bias-{mean,stddev}=5.361e-09,0.02285, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0168, stddev=0.0138], oderiv-count=581120
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/147.mdl exp/nnet3/tdnn_lstm1c_sp/148.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.51871 tdnn2.affine:7.55301 lstm1.W_all:6.21036 lstm1.lstm_nonlin:0.115203 lstm1.W_rp:2.52082 tdnn3.affine:4.6938 tdnn4.affine:5.3706 lstm2.W_all:4.09435 lstm2.lstm_nonlin:0.0528872 lstm2.W_rp:1.72259 tdnn5.affine:3.77678 tdnn6.affine:4.42377 lstm3.W_all:5.69564 lstm3.lstm_nonlin:0.121371 lstm3.W_rp:2.23424 output.affine:4.92804 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.86 tdnn2.affine:10.9568 lstm1.W_all:19.3682 lstm1.lstm_nonlin:1.44828 lstm1.W_rp:11.1845 tdnn3.affine:7.80913 tdnn4.affine:8.10315 lstm2.W_all:15.3565 lstm2.lstm_nonlin:0.636614 lstm2.W_rp:10.3547 tdnn5.affine:7.1842 tdnn6.affine:7.66751 lstm3.W_all:22.4362 lstm3.lstm_nonlin:1.95383 lstm3.W_rp:26.0432 output.affine:29.3079 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.638498 tdnn2.affine:0.694692 lstm1.W_all:0.320722 lstm1.lstm_nonlin:0.0796458 lstm1.W_rp:0.22663 tdnn3.affine:0.604986 tdnn4.affine:0.6645 lstm2.W_all:0.26617 lstm2.lstm_nonlin:0.0824306 lstm2.W_rp:0.166187 tdnn5.affine:0.520559 tdnn6.affine:0.5745 lstm3.W_all:0.253349 lstm3.lstm_nonlin:0.061849 lstm3.W_rp:0.0857566 output.affine:0.168087 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:59:35 KST 2020, elapsed time 1 seconds
