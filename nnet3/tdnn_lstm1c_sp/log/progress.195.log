# nnet3-info exp/nnet3/tdnn_lstm1c_sp/195.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/194.mdl exp/nnet3/tdnn_lstm1c_sp/195.mdl 
# Started at Thu Jul 30 11:18:09 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/195.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000162145, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02857, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.007,0.01 0.02,0.14,0.51,0.59,0.66 0.71,0.79,0.85,1.1), mean=0.439, stddev=0.228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.16,0.19,0.55,0.78,1.0 1.3,1.4,1.4,1.5), mean=0.555, stddev=0.342], bias-{mean,stddev}=0.00204,0.05174, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0.124949, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,5e-06,2e-05,5e-05 0.0001,0.0007,0.06,0.08,0.10 0.11,0.12,0.13,0.19), mean=0.0523, stddev=0.0368], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.004,0.008,0.02 0.05,0.09,0.47,0.62,0.72 0.78,0.85,0.89,0.98), mean=0.418, stddev=0.245], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.04,0.24,0.35,0.45,0.53 0.58,0.71,0.80,1.5), mean=0.34, stddev=0.185], oderiv-count=1.19053e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32321.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,3e-06,5e-06,2e-05 5e-05,0.0006,0.05,0.08,0.10 0.11,0.13,0.14,0.17), mean=0.0484, stddev=0.0364], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,6e-05,0.0001,0.0002 0.0004,0.003,0.08,0.10,0.11 0.12,0.12,0.13,0.14), mean=0.0685, stddev=0.0401]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000162145, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01131, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.36,0.37 0.38,0.40,0.44,0.48,0.51 0.53,0.56,0.59,0.72), mean=0.444, stddev=0.0512], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.004,0.007 0.01,0.09,0.27,0.31,0.33 0.36,0.38,0.40,0.66), mean=0.23, stddev=0.116], bias-{mean,stddev}=-0.004136,0.02822, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.72e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.24,0.25 0.26,0.27,0.30,0.33,0.35 0.37,0.39,0.39,0.53), mean=0.302, stddev=0.0361], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.41 0.42,0.43,0.46,0.48,0.50 0.51,0.52,0.53,0.56), mean=0.46, stddev=0.03], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0464, stddev=0.0087], oderiv-count=1.16314e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31600, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.25,0.26,0.29,0.32,0.34 0.36,0.39,0.41,0.56), mean=0.294, stddev=0.0403], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.42,0.43 0.45,0.47,0.52,0.57,0.59 0.62,0.68,0.69,0.85), mean=0.52, stddev=0.0606]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000162145, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01581, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,0.0001,0.0004,0.002 0.02,0.17,0.35,0.53,0.62 0.69,0.75,0.80,1.0), mean=0.347, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.32,0.33,0.38 0.43,0.63,0.73,0.81,0.86 0.90,0.95,0.99,1.3), mean=0.704, stddev=0.155], bias-{mean,stddev}=-0.000253,0.02181, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000162145, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02644, w_fc-rms=0.02858, w_oc-rms=0.03394, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629101, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.44,0.45 0.46,0.47,0.49,0.51,0.54 0.59,0.70,0.73,0.76), mean=0.499, stddev=0.0518], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0152] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629101, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.41,0.42 0.44,0.46,0.49,0.51,0.55 0.63,0.70,0.72,0.77), mean=0.496, stddev=0.0605], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.015] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00643658, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.85,-0.81,-0.49 -0.32,-0.18,0.001,0.17,0.33 0.44,0.69,0.75,0.88), mean=-0.00206, stddev=0.283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.26,0.34 0.42,0.48,0.60,0.75,1.0 1.0,1.0,1.0,1.0), mean=0.632, stddev=0.192] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629101, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.45,0.47,0.50,0.50 0.53,0.55,0.57,0.61), mean=0.47, stddev=0.0324], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00629101, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.79,-0.75,-0.39 -0.26,-0.13,0.0002,0.13,0.25 0.37,0.55,0.69,0.87), mean=-0.00325, stddev=0.243], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.29,0.34,0.54 0.70,0.77,0.85,0.92,1.0 1.0,1.0,1.0,1.0), mean=0.831, stddev=0.14] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=5.07503e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=295353
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0672176
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000162145, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03168, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.20 0.23,0.28,0.48,0.99,1.1 1.1,1.1,1.2,1.2), mean=0.63, stddev=0.353], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.003,0.006,0.01 0.03,0.29,0.45,0.60,0.71 0.88,1.1,1.3,1.5), mean=0.442, stddev=0.256], bias-{mean,stddev}=0.006469,0.2404, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000162145, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01162, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.21 0.22,0.25,0.31,0.37,0.41 0.45,0.48,0.49,0.58), mean=0.316, stddev=0.0725], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.10,0.20,0.36,0.40 0.42,0.45,0.47,0.52), mean=0.23, stddev=0.131], bias-{mean,stddev}=0.002759,0.02059, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0.000913462, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.03,0.04,0.05 0.06,0.07,0.10,0.12,0.13 0.15,0.16,0.17,0.20), mean=0.0976, stddev=0.0304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.19,0.22,0.26 0.32,0.38,0.50,0.60,0.65 0.69,0.72,0.72,0.78), mean=0.492, stddev=0.127], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.09,0.11,0.13,0.14 0.16,0.17,0.18,0.41), mean=0.113, stddev=0.0265], oderiv-count=1.00723e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29434.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.03,0.04,0.04 0.05,0.07,0.09,0.12,0.13 0.15,0.16,0.17,0.24), mean=0.0929, stddev=0.0311], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.10,0.10,0.11 0.12,0.13,0.15,0.17,0.18 0.20,0.20,0.21,0.23), mean=0.149, stddev=0.0252]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000162145, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008453, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.28 0.29,0.30,0.33,0.36,0.37 0.39,0.41,0.42,0.53), mean=0.332, stddev=0.0349], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.15,0.16,0.19,0.22,0.23 0.25,0.27,0.29,0.34), mean=0.19, stddev=0.0342], bias-{mean,stddev}=-0.01305,0.01566, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.34e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.22,0.23,0.26,0.28,0.30 0.31,0.33,0.34,0.39), mean=0.26, stddev=0.0299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.50,0.51,0.51,0.53), mean=0.439, stddev=0.0315], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05), mean=0.037, stddev=0.00317], oderiv-count=1.06176e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27269.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.23,0.25,0.28,0.30 0.31,0.33,0.35,0.40), mean=0.256, stddev=0.0337], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.41,0.43 0.44,0.46,0.49,0.54,0.57 0.60,0.65,0.69,0.78), mean=0.501, stddev=0.0574]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000162145, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01314, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,8e-07,1e-06,4e-06 1e-05,0.0003,0.28,0.47,0.55 0.59,0.63,0.65,1.2), mean=0.254, stddev=0.219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.26,0.32 0.40,0.53,0.60,0.65,0.68 0.74,0.79,0.87,1.5), mean=0.587, stddev=0.123], bias-{mean,stddev}=-0.004728,0.04418, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000162145, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.009827, w_fc-rms=0.009845, w_oc-rms=0.0162, count=1.34e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634446, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.43,0.44 0.45,0.46,0.50,0.51,0.54 0.59,0.63,0.65,0.72), mean=0.497, stddev=0.0444], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.21,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0143] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634446, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.40 0.41,0.44,0.49,0.50,0.50 0.53,0.57,0.59,0.77), mean=0.475, stddev=0.0462], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0121] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00839785, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.75,-0.59,-0.37 -0.26,-0.14,-0.0001,0.13,0.24 0.37,0.58,0.70,0.86), mean=-0.00105, stddev=0.227], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.30,0.37,0.48 0.53,0.58,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.748, stddev=0.204] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634446, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.42 0.43,0.45,0.49,0.50,0.51 0.54,0.56,0.60,0.66), mean=0.482, stddev=0.0373], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0153] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00634446, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.59,-0.45,-0.29 -0.20,-0.09,0.0005,0.09,0.20 0.27,0.43,0.57,0.73), mean=-0.000102, stddev=0.179], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.54,0.58,0.72 0.79,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.902, stddev=0.105] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=260481
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0672176
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000162145, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02961, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.33,0.36 0.38,0.41,0.56,0.87,0.92 0.95,0.97,0.98,1.1), mean=0.638, stddev=0.222], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0005,0.0006,0.0009 0.002,0.004,0.47,0.63,0.73 0.81,0.91,0.96,1.1), mean=0.372, stddev=0.299], bias-{mean,stddev}=0.003121,0.1476, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000162145, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01044, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.19,0.20 0.21,0.23,0.27,0.33,0.37 0.42,0.46,0.47,0.50), mean=0.284, stddev=0.065], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.13,0.14,0.21,0.31,0.34 0.35,0.37,0.39,0.45), mean=0.224, stddev=0.0813], bias-{mean,stddev}=0.003452,0.009769, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.04,0.06,0.08,0.09 0.10,0.10,0.11,0.13), mean=0.0625, stddev=0.0205], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.18,0.20,0.23 0.28,0.34,0.46,0.56,0.60 0.62,0.66,0.68,0.71), mean=0.449, stddev=0.121], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.12,0.13,0.15,0.18 0.20,0.22,0.24,0.27), mean=0.137, stddev=0.0294], oderiv-count=1.00762e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25104.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.04,0.06,0.08,0.09 0.10,0.11,0.11,0.14), mean=0.0628, stddev=0.0214], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.08,0.09,0.10,0.12,0.13 0.13,0.14,0.14,0.16), mean=0.104, stddev=0.0169]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000162145, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007887, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.22,0.24 0.25,0.27,0.30,0.35,0.37 0.38,0.40,0.41,0.49), mean=0.308, stddev=0.0459], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.14,0.15,0.17,0.20,0.22 0.25,0.28,0.31,0.35), mean=0.176, stddev=0.0384], bias-{mean,stddev}=-0.009784,0.01998, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.20,0.21 0.22,0.23,0.26,0.29,0.30 0.31,0.33,0.33,0.42), mean=0.261, stddev=0.0322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.38 0.38,0.40,0.42,0.45,0.46 0.47,0.48,0.49,0.51), mean=0.422, stddev=0.0298], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0298, stddev=0.00275], oderiv-count=954240
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=22939.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.22,0.23,0.26,0.29,0.30 0.32,0.33,0.35,0.48), mean=0.261, stddev=0.0357], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.36,0.40 0.43,0.45,0.51,0.56,0.60 0.62,0.65,0.67,0.86), mean=0.509, stddev=0.0703]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000162145, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01888, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.21,0.22,0.26 0.29,0.34,0.42,0.61,0.69 0.74,0.77,0.80,1.2), mean=0.458, stddev=0.148], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.62 0.63,0.66,0.72,0.99,1.3 1.4,1.5,1.5,1.9), mean=0.824, stddev=0.248], bias-{mean,stddev}=0.0247,0.0253, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000162145, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04738, w_fc-rms=0.04627, w_oc-rms=0.0453, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640897, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.55,0.56,0.57 0.59,0.61,0.67,0.71,0.73 0.75,0.77,0.77,0.79), mean=0.663, stddev=0.0536], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.15,0.17 0.17,0.18,0.19,0.20,0.21 0.21,0.21,0.22,0.24), mean=0.191, stddev=0.0141] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640897, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.47,0.49,0.51 0.53,0.56,0.60,0.65,0.69 0.75,0.78,0.80,0.86), mean=0.607, stddev=0.0677], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.15,0.16 0.18,0.19,0.20,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.199, stddev=0.0168] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00856071, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.77,-0.67,-0.54 -0.36,-0.21,-0.01,0.22,0.33 0.49,0.63,0.70,0.84), mean=-0.00288, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.24,0.26,0.29 0.34,0.39,0.45,0.49,0.50 0.52,0.54,0.55,0.66), mean=0.435, stddev=0.0669] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640897, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.56,0.58 0.60,0.62,0.66,0.70,0.72 0.73,0.75,0.76,0.85), mean=0.659, stddev=0.047], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.15 0.16,0.17,0.18,0.19,0.19 0.20,0.20,0.20,0.22), mean=0.18, stddev=0.0138] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00643364, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.79,-0.68,-0.50 -0.33,-0.19,-0.01,0.20,0.30 0.46,0.65,0.70,0.86), mean=-0.00515, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.27,0.30,0.35 0.43,0.52,0.62,0.66,0.69 0.70,0.71,0.72,0.76), mean=0.589, stddev=0.101] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.51467e-06, count-zeroing-boundaries=221500
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0672176
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000162145, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0743, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.1,1.1 1.1,1.2,1.6,2.1,2.1 2.2,2.3,2.3,2.4), mean=1.64, stddev=0.423], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.77,0.90,0.96 1.0,1.1,1.2,1.3,1.4 1.5,1.5,1.6,1.6), mean=1.19, stddev=0.158], bias-{mean,stddev}=0.005397,0.3567, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000162145, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03811, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.51,0.53 0.54,0.56,0.60,0.64,0.68 0.71,0.75,0.79,2.2), mean=0.608, stddev=0.087], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.7, stddev=0.411], bias-{mean,stddev}=4.688e-09,0.03122, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0168, stddev=0.0137], oderiv-count=630400
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/194.mdl exp/nnet3/tdnn_lstm1c_sp/195.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.38655 tdnn2.affine:6.31131 lstm1.W_all:4.99012 lstm1.lstm_nonlin:0.0916993 lstm1.W_rp:2.02992 tdnn3.affine:4.09202 tdnn4.affine:4.65078 lstm2.W_all:3.45778 lstm2.lstm_nonlin:0.0444507 lstm2.W_rp:1.4257 tdnn5.affine:3.24321 tdnn6.affine:3.74593 lstm3.W_all:4.49026 lstm3.lstm_nonlin:0.0910387 lstm3.W_rp:1.79098 output.affine:4.04616 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.3443 tdnn2.affine:10.2042 lstm1.W_all:18.4071 lstm1.lstm_nonlin:1.17776 lstm1.W_rp:12.2775 tdnn3.affine:7.41796 tdnn4.affine:7.62717 lstm2.W_all:15.4138 lstm2.lstm_nonlin:0.486889 lstm2.W_rp:11.1452 tdnn5.affine:6.65221 tdnn6.affine:7.12183 lstm3.W_all:22.0077 lstm3.lstm_nonlin:1.82953 lstm3.W_rp:27.9199 output.affine:28.2244 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.564016 tdnn2.affine:0.620141 lstm1.W_all:0.270779 lstm1.lstm_nonlin:0.077376 lstm1.W_rp:0.165207 tdnn3.affine:0.554043 tdnn4.affine:0.611123 lstm2.W_all:0.224013 lstm2.lstm_nonlin:0.0916848 lstm2.W_rp:0.12798 tdnn5.affine:0.488877 tdnn6.affine:0.527302 lstm3.W_all:0.203568 lstm3.lstm_nonlin:0.0497816 lstm3.W_rp:0.0641383 output.affine:0.143222 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:18:09 KST 2020, elapsed time 0 seconds
