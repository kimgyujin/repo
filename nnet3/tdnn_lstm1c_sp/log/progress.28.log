# nnet3-info exp/nnet3/tdnn_lstm1c_sp/28.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/27.mdl exp/nnet3/tdnn_lstm1c_sp/28.mdl 
# Started at Thu Jul 30 10:12:13 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/28.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000275379, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03126, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.04,0.23,0.56,0.66,0.71 0.76,0.84,0.87,1.3), mean=0.485, stddev=0.241], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.21,0.60,0.83,1.1 1.4,1.6,1.6,1.8), mean=0.604, stddev=0.379], bias-{mean,stddev}=-0.003881,0.05944, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0.147138, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,2e-06,1e-05,4e-05 0.0001,0.001,0.06,0.09,0.10 0.11,0.12,0.13,0.18), mean=0.0556, stddev=0.0375], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.001,0.004,0.02 0.03,0.09,0.45,0.59,0.67 0.74,0.80,0.81,0.89), mean=0.397, stddev=0.232], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.07,0.23,0.35,0.44,0.50 0.57,0.66,0.68,0.81), mean=0.334, stddev=0.155], oderiv-count=1.20269e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33820.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-09,2e-07,8e-07,4e-06 4e-05,0.0009,0.06,0.08,0.10 0.11,0.13,0.14,0.20), mean=0.0525, stddev=0.0377], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,1e-05,4e-05,0.0002 0.0004,0.005,0.10,0.11,0.12 0.13,0.14,0.14,0.17), mean=0.0782, stddev=0.0452]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000275379, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01301, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.40,0.42 0.44,0.47,0.51,0.56,0.58 0.60,0.62,0.63,0.70), mean=0.511, stddev=0.0545], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.01 0.02,0.14,0.31,0.36,0.38 0.40,0.43,0.46,0.66), mean=0.268, stddev=0.127], bias-{mean,stddev}=0.0004245,0.02966, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.28,0.29 0.31,0.32,0.35,0.38,0.40 0.42,0.44,0.45,0.53), mean=0.354, stddev=0.0385], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.41 0.42,0.43,0.46,0.49,0.50 0.51,0.52,0.53,0.54), mean=0.46, stddev=0.0313], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.08), mean=0.0408, stddev=0.00799], oderiv-count=1.24358e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33046.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.27,0.29 0.30,0.31,0.34,0.38,0.40 0.43,0.46,0.49,0.57), mean=0.349, stddev=0.0452], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.49,0.50,0.53 0.54,0.56,0.61,0.67,0.70 0.73,0.78,0.79,0.87), mean=0.617, stddev=0.0639]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000275379, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01764, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.10 0.15,0.22,0.38,0.58,0.68 0.76,0.85,0.91,1.1), mean=0.402, stddev=0.201], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.38,0.43 0.49,0.70,0.83,0.91,0.95 0.98,1.0,1.1,1.3), mean=0.787, stddev=0.166], bias-{mean,stddev}=-0.001226,0.04537, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000275379, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04788, w_fc-rms=0.05915, w_oc-rms=0.06032, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00608342, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.44 0.45,0.46,0.49,0.53,0.58 0.62,0.65,0.67,0.72), mean=0.5, stddev=0.0538], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0146] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00608342, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.33,0.36,0.38 0.40,0.42,0.47,0.54,0.62 0.68,0.76,0.82,0.87), mean=0.49, stddev=0.0925], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.16,0.19 0.20,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0214] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00867269, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.79,-0.76,-0.66 -0.41,-0.26,0.01,0.31,0.41 0.64,0.71,0.75,0.86), mean=0.0108, stddev=0.345], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.27,0.29,0.34 0.40,0.45,0.57,0.70,0.79 0.87,0.93,0.94,0.99), mean=0.581, stddev=0.152] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00608342, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.41 0.42,0.44,0.47,0.50,0.53 0.55,0.60,0.61,0.70), mean=0.476, stddev=0.0462], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.20,0.21,0.22,0.24,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0169] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0156403, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.94,-0.83,-0.77,-0.63 -0.34,-0.21,-0.002,0.24,0.36 0.59,0.69,0.76,0.92), mean=0.00532, stddev=0.318], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.22,0.27,0.41 0.55,0.70,0.83,0.88,0.91 0.94,0.97,0.98,1.0), mean=0.775, stddev=0.159] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=298353
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000275379, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03161, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.41 0.44,0.47,0.66,0.91,0.98 1.0,1.0,1.1,1.1), mean=0.689, stddev=0.213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.10,0.16 0.26,0.34,0.47,0.61,0.69 0.80,0.88,0.96,1.1), mean=0.477, stddev=0.18], bias-{mean,stddev}=0.003617,0.05783, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000275379, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01335, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.26 0.27,0.30,0.36,0.43,0.46 0.50,0.53,0.57,0.66), mean=0.365, stddev=0.0744], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.16 0.17,0.19,0.28,0.38,0.42 0.45,0.47,0.49,0.52), mean=0.289, stddev=0.096], bias-{mean,stddev}=-0.002094,0.01566, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.09e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.09,0.11,0.15,0.19,0.21 0.23,0.25,0.27,0.30), mean=0.15, stddev=0.0459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.23,0.27 0.31,0.37,0.49,0.58,0.62 0.66,0.69,0.70,0.75), mean=0.477, stddev=0.118], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.06,0.06,0.07,0.08 0.09,0.10,0.10,0.14), mean=0.0659, stddev=0.0133], oderiv-count=1.18925e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30724.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.10,0.14,0.18,0.21 0.23,0.26,0.29,0.32), mean=0.145, stddev=0.0502], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.16,0.17 0.19,0.20,0.23,0.26,0.28 0.30,0.32,0.33,0.37), mean=0.235, stddev=0.0386]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000275379, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009715, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.31,0.32 0.33,0.35,0.38,0.41,0.43 0.45,0.47,0.48,0.52), mean=0.382, stddev=0.0397], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.18,0.19,0.21,0.25,0.26 0.28,0.30,0.32,0.37), mean=0.219, stddev=0.0354], bias-{mean,stddev}=-0.00869,0.01585, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.95e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.25 0.26,0.28,0.31,0.34,0.37 0.38,0.40,0.41,0.46), mean=0.313, stddev=0.0395], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.40 0.41,0.42,0.44,0.47,0.48 0.50,0.51,0.51,0.53), mean=0.444, stddev=0.0295], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0282, stddev=0.00259], oderiv-count=1.04813e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28401.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.25,0.27,0.30,0.34,0.36 0.38,0.40,0.43,0.49), mean=0.305, stddev=0.0443], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.46,0.47 0.49,0.52,0.57,0.63,0.66 0.71,0.75,0.77,0.82), mean=0.579, stddev=0.0682]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000275379, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01367, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.06,0.11,0.27,0.47,0.57 0.62,0.68,0.71,1.1), mean=0.295, stddev=0.186], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.28,0.30 0.36,0.52,0.64,0.71,0.75 0.78,0.83,0.88,0.93), mean=0.607, stddev=0.14], bias-{mean,stddev}=-0.001385,0.0451, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000275379, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04604, w_fc-rms=0.04894, w_oc-rms=0.04853, count=1.33e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613449, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.43,0.45 0.46,0.47,0.49,0.52,0.55 0.57,0.62,0.63,0.65), mean=0.495, stddev=0.0393], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0148] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613449, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.40,0.41 0.42,0.43,0.48,0.51,0.54 0.61,0.67,0.70,0.75), mean=0.485, stddev=0.0609], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.237, stddev=0.014] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00804577, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.74,-0.64,-0.50 -0.35,-0.21,0.007,0.22,0.37 0.54,0.64,0.70,0.81), mean=0.00603, stddev=0.288], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.39,0.43,0.49 0.52,0.56,0.65,0.83,0.93 0.96,0.98,0.98,0.99), mean=0.684, stddev=0.15] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613449, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.41,0.42,0.43 0.44,0.46,0.48,0.51,0.53 0.56,0.60,0.61,0.63), mean=0.486, stddev=0.0385], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0153] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00613449, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.73,-0.66,-0.43 -0.30,-0.17,0.009,0.17,0.32 0.50,0.64,0.71,0.86), mean=0.0093, stddev=0.264], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.37,0.40,0.61 0.73,0.80,0.87,0.93,0.97 0.98,0.99,0.99,1.0), mean=0.846, stddev=0.12] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=263160
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000275379, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02842, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.44,0.46 0.48,0.51,0.60,0.75,0.80 0.86,0.90,0.92,0.95), mean=0.635, stddev=0.128], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.08 0.11,0.19,0.41,0.59,0.67 0.74,0.88,0.91,1.1), mean=0.404, stddev=0.216], bias-{mean,stddev}=0.0002089,0.08445, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000275379, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01251, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.20,0.21,0.23 0.24,0.27,0.32,0.40,0.46 0.52,0.60,0.63,0.71), mean=0.337, stddev=0.0925], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.19 0.20,0.22,0.27,0.34,0.37 0.39,0.41,0.43,0.47), mean=0.278, stddev=0.0633], bias-{mean,stddev}=-0.0003851,0.01818, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.52e+05, self-repaired-proportion=0.00511878, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.01,0.02,0.05 0.06,0.08,0.11,0.15,0.16 0.17,0.19,0.20,0.24), mean=0.11, stddev=0.0403], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.11,0.12,0.19 0.24,0.30,0.43,0.54,0.58 0.61,0.64,0.66,0.70), mean=0.419, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.05,0.05 0.06,0.06,0.07,0.08,0.10 0.12,0.13,0.14,0.16), mean=0.0742, stddev=0.0196], oderiv-count=1.03872e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26079.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.02,0.04 0.05,0.07,0.11,0.14,0.16 0.18,0.20,0.20,0.25), mean=0.107, stddev=0.0432], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.06,0.07,0.13 0.14,0.16,0.19,0.22,0.24 0.25,0.27,0.29,0.35), mean=0.187, stddev=0.0428]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000275379, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009521, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.30,0.30 0.31,0.33,0.36,0.41,0.44 0.47,0.50,0.51,0.59), mean=0.373, stddev=0.0491], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.12,0.13,0.15 0.16,0.17,0.20,0.25,0.27 0.30,0.34,0.37,0.47), mean=0.211, stddev=0.05], bias-{mean,stddev}=-0.01231,0.01675, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.33e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.25 0.26,0.28,0.32,0.35,0.36 0.38,0.40,0.41,0.50), mean=0.316, stddev=0.0399], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.36,0.37 0.38,0.39,0.42,0.45,0.46 0.47,0.48,0.49,0.50), mean=0.42, stddev=0.0301], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0247, stddev=0.00259], oderiv-count=906560
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23756.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.24 0.26,0.27,0.31,0.35,0.37 0.39,0.41,0.43,0.69), mean=0.314, stddev=0.0504], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.48,0.49 0.51,0.53,0.59,0.67,0.71 0.76,0.80,0.82,1.3), mean=0.605, stddev=0.0885]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000275379, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01906, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.21 0.26,0.32,0.42,0.60,0.73 0.79,0.84,0.87,1.4), mean=0.455, stddev=0.169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.60,0.62,0.64 0.66,0.68,0.74,1.0,1.2 1.3,1.4,1.4,1.6), mean=0.841, stddev=0.221], bias-{mean,stddev}=0.008217,0.05181, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000275379, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04999, w_fc-rms=0.06161, w_oc-rms=0.06838, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619611, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.44,0.46 0.48,0.51,0.57,0.63,0.64 0.66,0.68,0.69,0.71), mean=0.568, stddev=0.0615], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.21,0.22,0.22 0.23,0.23,0.23,0.24), mean=0.207, stddev=0.0138] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619611, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.45,0.47 0.49,0.52,0.58,0.63,0.66 0.69,0.71,0.73,0.82), mean=0.579, stddev=0.0666], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.17,0.18 0.19,0.19,0.21,0.22,0.23 0.23,0.24,0.24,0.25), mean=0.208, stddev=0.0178] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00740649, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.76,-0.73,-0.49 -0.35,-0.20,-0.008,0.21,0.36 0.50,0.60,0.72,0.83), mean=0.000617, stddev=0.292], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.27,0.27,0.34 0.37,0.40,0.46,0.51,0.54 0.59,0.61,0.64,0.73), mean=0.461, stddev=0.0735] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619611, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.51,0.52,0.54 0.56,0.58,0.64,0.68,0.70 0.72,0.74,0.75,0.77), mean=0.634, stddev=0.0548], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.16,0.16 0.17,0.18,0.19,0.20,0.21 0.21,0.22,0.22,0.23), mean=0.19, stddev=0.0143] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00982705, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.79,-0.73,-0.47 -0.33,-0.18,0.0006,0.20,0.34 0.51,0.60,0.73,0.85), mean=0.00163, stddev=0.282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.29,0.34,0.44 0.52,0.58,0.66,0.70,0.73 0.75,0.76,0.78,0.83), mean=0.637, stddev=0.0956] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223806
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000275379, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06523, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.5,1.6,1.7 1.8,1.8,1.8,2.0), mean=1.48, stddev=0.185], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.53,0.64,0.73 0.80,0.87,1.0,1.2,1.3 1.3,1.4,1.4,1.7), mean=1.04, stddev=0.186], bias-{mean,stddev}=0.003509,0.1161, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000275379, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04114, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.51,0.53,0.55 0.57,0.59,0.64,0.71,0.75 0.78,0.85,0.89,2.4), mean=0.655, stddev=0.104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.6,1.7,1.9,2.0,2.1 2.2,2.3,2.4,2.5), mean=1.88, stddev=0.202], bias-{mean,stddev}=5.283e-09,0.03117, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0169, stddev=0.0137], oderiv-count=606720
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/27.mdl exp/nnet3/tdnn_lstm1c_sp/28.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.24419 tdnn2.affine:9.46932 lstm1.W_all:8.25037 lstm1.lstm_nonlin:0.24432 lstm1.W_rp:3.41556 tdnn3.affine:5.74423 tdnn4.affine:6.75568 lstm2.W_all:5.43199 lstm2.lstm_nonlin:0.200231 lstm2.W_rp:2.32469 tdnn5.affine:4.76809 tdnn6.affine:5.84564 lstm3.W_all:7.05299 lstm3.lstm_nonlin:0.249422 lstm3.W_rp:2.86466 output.affine:6.43169 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.4223 tdnn2.affine:11.7343 lstm1.W_all:20.6099 lstm1.lstm_nonlin:2.21439 lstm1.W_rp:11.6597 tdnn3.affine:8.51055 tdnn4.affine:8.75928 lstm2.W_all:16.0238 lstm2.lstm_nonlin:1.8901 lstm2.W_rp:10.5392 tdnn5.affine:7.97931 tdnn6.affine:8.58801 lstm3.W_all:22.2913 lstm3.lstm_nonlin:2.38857 lstm3.W_rp:24.0585 output.affine:30.461 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.737434 tdnn2.affine:0.800659 lstm1.W_all:0.39977 lstm1.lstm_nonlin:0.104716 lstm1.W_rp:0.292298 tdnn3.affine:0.673255 tdnn4.affine:0.766671 lstm2.W_all:0.337813 lstm2.lstm_nonlin:0.0969476 lstm2.W_rp:0.219797 tdnn5.affine:0.598873 tdnn6.affine:0.680434 lstm3.W_all:0.316454 lstm3.lstm_nonlin:0.0987754 lstm3.W_rp:0.119159 output.affine:0.211232 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:12:13 KST 2020, elapsed time 0 seconds
