# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/119.mdl exp/nnet3/tdnn_lstm1c_sp/120.mdl 
# Started at Thu Jul 30 10:48:31 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/119.mdl exp/nnet3/tdnn_lstm1c_sp/120.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000206342, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01986, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.01,0.01 0.04,0.28,0.35,0.40,0.43 0.46,0.52,0.55,0.83), mean=0.317, stddev=0.132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.13,0.15,0.41,0.55,0.66 0.84,0.96,1.0,1.1), mean=0.394, stddev=0.223], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.07,0.25,0.57,0.79 0.96,1.2,1.2,1.4), mean=0.337, stddev=0.302], bias-{mean,stddev}=0.0002399,0.02667, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=10560.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.10,-0.05,-0.04,-0.02 -0.0003,0.001,0.06,0.12,0.15 0.17,0.20,0.21,0.30), mean=0.0665, stddev=0.0639], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.09,0.13,0.15 0.16,0.16,0.17,0.20), mean=0.0733, stddev=0.0567]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000206342, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008752, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.28,0.29 0.30,0.31,0.34,0.37,0.39 0.40,0.41,0.42,0.45), mean=0.344, stddev=0.0334], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.006,0.008 0.02,0.17,0.21,0.23,0.25 0.27,0.29,0.30,0.36), mean=0.185, stddev=0.0754], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.10,0.20,0.43,0.59 0.74,0.87,0.93,1.0), mean=0.272, stddev=0.213], bias-{mean,stddev}=-0.001582,0.01323, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.18,0.21 0.24,0.28,0.35,0.43,0.47 0.51,0.55,0.58,0.71), mean=0.355, stddev=0.0905], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.26,0.28,0.32 0.35,0.38,0.45,0.52,0.57 0.59,0.62,0.63,0.67), mean=0.455, stddev=0.0829]
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=10400.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.11,0.13,0.19 0.23,0.27,0.36,0.44,0.49 0.52,0.56,0.57,0.66), mean=0.357, stddev=0.101], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.29,0.42,0.61,0.76,0.83 0.88,0.94,0.97,1.1), mean=0.58, stddev=0.224]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000206342, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005675, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,0.0003,0.0009,0.005 0.02,0.06,0.11,0.18,0.23 0.27,0.30,0.32,0.44), mean=0.123, stddev=0.0762], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.09 0.11,0.15,0.28,0.30,0.31 0.32,0.34,0.35,0.37), mean=0.248, stddev=0.0748], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,7e-07,7e-07,1e-06 6e-06,0.06,0.14,0.29,0.42 0.56,0.73,0.81,0.97), mean=0.188, stddev=0.177], bias-{mean,stddev}=-1.482e-05,0.002338, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000206342, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001766, w_fc-rms=0.002365, w_oc-rms=0.004516, count=905, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00469366, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-17,-14,-11,-9.0 -6.9,-4.3,0.42,3.9,7.8 11,13,14,24), mean=0.15, stddev=5.79], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.9,-5.1,-4.8,-3.7 -2.6,-1.4,0.21,1.5,2.5 3.5,5.0,6.5,13), mean=0.0734, stddev=2.29] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00469366, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-19,-13,-11,-8.8 -6.3,-4.1,0.32,3.8,7.7 11,15,17,22), mean=0.206, stddev=5.74], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.7,-6.3,-5.8,-3.6 -2.4,-1.0,0.23,1.2,2.0 2.9,3.8,4.5,7.3), mean=-0.0327, stddev=2.02] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=2.38258, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-102,-86,-76,-58 -48,-28,-3.6,25,43 55,71,89,115), mean=-2.26, stddev=34.7], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-66,-56,-49,-40 -33,-22,0.17,17,28 38,45,51,73), mean=-1.52, stddev=23.2] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00469366, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-26,-16,-14,-11 -8.7,-5.0,-0.13,3.6,6.3 9.5,12,15,31), mean=-0.62, stddev=6.27], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-6.9,-5.9,-4.8 -3.2,-1.9,0.07,1.6,2.7 3.6,5.1,6.2,10), mean=-0.151, stddev=2.5] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=4.27046, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-88,-67,-60,-46 -34,-22,-3.1,20,30 40,52,60,92), mean=-1.92, stddev=26.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-65,-37,-33,-26 -19,-12,0.60,10,17 23,28,35,65), mean=-0.707, stddev=14.6] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=3.26e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00414079, count-zeroing-boundaries=483
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000206342, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007303, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.07,0.14,0.23,0.24 0.26,0.27,0.28,0.30), mean=0.149, stddev=0.0744], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.004,0.007,0.01 0.04,0.08,0.11,0.14,0.16 0.17,0.20,0.21,0.23), mean=0.109, stddev=0.0451], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 4e-07,8e-07,1e-05,0.03,0.33 0.45,0.57,0.61,0.75), mean=0.0657, stddev=0.153], bias-{mean,stddev}=0.0002931,0.00613, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000206342, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007644, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.17,0.18,0.21,0.24,0.26 0.28,0.30,0.30,0.37), mean=0.21, stddev=0.0358], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.06,0.06,0.12,0.24,0.26 0.27,0.29,0.29,0.33), mean=0.151, stddev=0.0867], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,5e-07 8e-07,2e-06,0.0002,0.12,0.39 0.56,0.72,0.79,0.90), mean=0.0918, stddev=0.193], bias-{mean,stddev}=0.0001186,0.01505, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=5.29e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.55,-0.33,-0.31,-0.23 -0.14,-0.05,0.14,0.33,0.44 0.52,0.67,0.71,0.89), mean=0.145, stddev=0.228], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-1.0,-0.82,-0.59 -0.42,-0.11,0.46,1.1,1.4 1.6,1.9,2.1,2.4), mean=0.495, stddev=0.693], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.15,0.19 0.23,0.31,0.37,0.80), mean=0.0646, stddev=0.0934], oderiv-count=32128
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=9920.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.04,-0.01,0.01,0.04 0.05,0.08,0.14,0.19,0.23 0.24,0.28,0.30,0.34), mean=0.138, stddev=0.0663], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.08 0.12,0.15,0.21,0.26,0.28 0.29,0.32,0.32,0.39), mean=0.203, stddev=0.0661]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000206342, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006177, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.22,0.23,0.24,0.26,0.27 0.28,0.29,0.29,0.32), mean=0.243, stddev=0.0196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.11 0.11,0.12,0.14,0.16,0.17 0.17,0.18,0.19,0.23), mean=0.139, stddev=0.0207], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.07,0.09,0.16,0.29,0.40 0.50,0.60,0.64,0.74), mean=0.202, stddev=0.137], bias-{mean,stddev}=-0.0001778,0.007023, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.47e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-1.6,-1.3,-0.93 -0.68,-0.31,0.29,0.91,1.3 1.6,1.8,2.0,2.5), mean=0.293, stddev=0.749], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.1,-2.0,-1.7,-1.3 -0.89,-0.46,0.34,1.2,1.6 1.8,2.2,2.5,3.4), mean=0.329, stddev=0.973]
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=9441.08, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.16,0.17,0.19 0.22,0.24,0.30,0.36,0.39 0.43,0.46,0.48,0.56), mean=0.303, stddev=0.0713], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.22,0.28,0.34 0.40,0.46,0.57,0.66,0.71 0.77,0.81,0.85,1.0), mean=0.56, stddev=0.134]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000206342, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003745, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,1e-06,3e-06,6e-06 2e-05,0.0005,0.07,0.13,0.17 0.19,0.21,0.22,0.30), mean=0.0707, stddev=0.0642], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.09,0.18,0.20,0.21 0.22,0.23,0.23,0.30), mean=0.163, stddev=0.0526], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,6e-07,6e-07,7e-07 2e-05,0.03,0.08,0.19,0.27 0.37,0.52,0.58,0.68), mean=0.12, stddev=0.122], bias-{mean,stddev}=0.0001445,0.002436, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000206342, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.00107, w_fc-rms=0.001218, w_oc-rms=0.001995, count=183, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.0214344, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-67,-45,-39,-28 -23,-9.5,0.50,11,22 34,44,51,67), mean=0.779, stddev=17.8], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-25,-18,-17,-10 -7.4,-3.8,0.25,3.4,8.3 12,15,18,22), mean=0.149, stddev=6.47] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.0214344, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-68,-45,-40,-28 -17,-7.2,0.50,9.2,18 25,39,45,81), mean=0.626, stddev=16], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-25,-16,-11,-7.7 -4.6,-1.9,0.25,2.2,5.7 8.7,14,16,25), mean=0.378, stddev=5.25] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=2.74272, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-419,-323,-275,-195 -118,-55,-0.35,56,113 165,216,246,303), mean=-2.54, stddev=100], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-232,-195,-151,-117 -77,-39,0.94,36,79 106,150,180,269), mean=-0.0429, stddev=66.5] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.0214344, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-73,-56,-43,-32 -23,-13,0.50,11,25 35,55,62,72), mean=0.257, stddev=20.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-29,-21,-18,-14 -8.1,-3.4,0.25,3.7,8.8 12,15,17,29), mean=-0.0606, stddev=7.16] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0214344, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-369,-272,-233,-163 -101,-47,-0.33,41,98 131,170,198,307), mean=-3.63, stddev=84.8], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-249,-118,-97,-65 -43,-20,0.98,24,45 69,89,101,213), mean=0.958, stddev=40.4] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2.5e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=372
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000206342, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00491, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.07,0.10,0.14,0.15 0.15,0.16,0.17,0.18), mean=0.107, stddev=0.0321], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0003,0.0004,0.0006 0.0009,0.003,0.08,0.11,0.11 0.12,0.13,0.14,0.21), mean=0.0636, stddev=0.0472], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,2e-07 3e-07,4e-07,3e-05,0.09,0.23 0.29,0.33,0.35,0.42), mean=0.0503, stddev=0.1], bias-{mean,stddev}=0.0002483,0.005614, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000206342, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006153, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.12 0.13,0.14,0.17,0.19,0.21 0.23,0.26,0.26,0.30), mean=0.169, stddev=0.0336], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.08,0.09,0.13,0.18,0.19 0.20,0.21,0.22,0.24), mean=0.133, stddev=0.0444], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-07,2e-07,3e-07 5e-07,2e-06,0.002,0.16,0.32 0.45,0.57,0.61,0.69), mean=0.0817, stddev=0.151], bias-{mean,stddev}=2.072e-05,0.008152, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.99e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.24,-0.12,-0.10,-0.06 -0.02,0.01,0.09,0.17,0.23 0.27,0.31,0.33,0.39), mean=0.0944, stddev=0.099], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.67,-0.50,-0.45,-0.25 -0.10,0.09,0.40,0.75,0.94 1.1,1.3,1.4,1.6), mean=0.418, stddev=0.407]
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=8961.35, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.07,-0.04,-0.02,0.004 0.02,0.04,0.08,0.12,0.15 0.17,0.19,0.20,0.24), mean=0.0799, stddev=0.0511], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.03,0.09,0.14,0.18,0.20 0.21,0.23,0.24,0.30), mean=0.129, stddev=0.0602]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000206342, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005145, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.16 0.17,0.18,0.20,0.22,0.23 0.24,0.25,0.26,0.29), mean=0.202, stddev=0.0225], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.09 0.09,0.10,0.11,0.13,0.14 0.15,0.16,0.18,0.19), mean=0.115, stddev=0.0224], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.07,0.12,0.24,0.34 0.43,0.52,0.56,0.63), mean=0.163, stddev=0.122], bias-{mean,stddev}=0.001045,0.006306, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=8481.63, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.12,0.15,0.17 0.19,0.22,0.29,0.35,0.39 0.42,0.46,0.47,0.51), mean=0.289, stddev=0.0779], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.11,0.29 0.39,0.45,0.56,0.68,0.75 0.82,0.88,0.93,1.0), mean=0.561, stddev=0.163]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000206342, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005215, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.06,0.08,0.10,0.19,0.22 0.24,0.26,0.26,0.37), mean=0.118, stddev=0.0611], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.17,0.20,0.29,0.36 0.38,0.39,0.40,0.43), mean=0.226, stddev=0.0728], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,5e-05,7e-05,0.0009 0.03,0.04,0.09,0.24,0.42 0.58,0.72,0.77,0.88), mean=0.161, stddev=0.175], bias-{mean,stddev}=-7.403e-05,0.00156, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000206342, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.002322, w_fc-rms=0.003988, w_oc-rms=0.004261, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00664785, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-46,-40,-28,-22 -15,-5.3,8.2,22,27 35,41,49,56), mean=7.67, stddev=17.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-13,-10,-9.5,-8.2 -6.5,-4.8,-1.9,1.0,2.5 3.7,5.5,6.6,11), mean=-1.88, stddev=3.62] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00664785, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-63,-51,-43,-31 -23,-13,2.6,18,28 34,44,48,69), mean=2.44, stddev=20], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-17,-12,-10,-9.3 -7.2,-5.3,-1.9,1.7,3.6 5.4,8.3,11,16), mean=-1.73, stddev=4.51] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-3.67828, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-235,-176,-151,-130 -98,-67,1.9,62,97 131,164,177,235), mean=0.711, stddev=76.6], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-108,-85,-76,-64 -54,-39,-9.4,17,30 42,56,74,97), mean=-10.2, stddev=33.2] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00855868, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-41,-27,-23,-15 -10,-2.1,14,26,35 42,48,52,68), mean=12.9, stddev=17.5], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-19,-16,-14,-11 -9.1,-6.4,-2.5,1.5,3.5 5.0,7.0,8.1,11), mean=-2.65, stddev=4.99] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=2.54917, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-211,-134,-126,-99 -78,-49,1.0,48,74 101,120,129,215), mean=0.417, stddev=60.5], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-92,-81,-72,-58 -49,-38,-12,11,23 34,49,55,89), mean=-12.7, stddev=29] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=-0.003663, count-zeroing-boundaries=273
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000206342, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006476, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.09,0.09,0.12,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.14, stddev=0.0472], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.08,0.09,0.11,0.12,0.13 0.13,0.14,0.14,0.18), mean=0.102, stddev=0.0227], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,1e-05,1e-05,2e-05 5e-05,0.0002,0.03,0.19,0.28 0.34,0.39,0.41,0.45), mean=0.0914, stddev=0.116], bias-{mean,stddev}=4.701e-05,0.003828, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000206342, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.007085, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.04,0.05,0.05 0.06,0.07,0.10,0.14,0.16 0.18,0.21,0.23,0.42), mean=0.107, stddev=0.0401], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.22 0.23,0.25,0.32,0.39,0.40 0.42,0.43,0.44,0.46), mean=0.318, stddev=0.069], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,1e-05,2e-05,2e-05 4e-05,0.0001,0.02,0.47,0.65 0.74,0.82,0.85,0.88), mean=0.183, stddev=0.268], bias-{mean,stddev}=-4.798e-10,0.001472, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.86586 tdnn2.affine:7.88804 lstm1.W_all:6.59919 lstm1.lstm_nonlin:0.123015 lstm1.W_rp:2.68697 tdnn3.affine:4.88045 tdnn4.affine:5.56603 lstm2.W_all:4.35628 lstm2.lstm_nonlin:0.0586333 lstm2.W_rp:1.80769 tdnn5.affine:3.92318 tdnn6.affine:4.63621 lstm3.W_all:6.06387 lstm3.lstm_nonlin:0.143223 lstm3.W_rp:2.38213 output.affine:5.2408 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.9936 tdnn2.affine:11.0772 lstm1.W_all:19.9038 lstm1.lstm_nonlin:1.43824 lstm1.W_rp:11.3568 tdnn3.affine:7.92766 tdnn4.affine:8.17232 lstm2.W_all:15.6354 lstm2.lstm_nonlin:0.709504 lstm2.W_rp:10.5214 tdnn5.affine:7.3226 tdnn6.affine:7.83634 lstm3.W_all:22.7649 lstm3.lstm_nonlin:1.93198 lstm3.W_rp:25.9017 output.affine:29.5747 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.661812 tdnn2.affine:0.713614 lstm1.W_all:0.330825 lstm1.lstm_nonlin:0.0849597 lstm1.W_rp:0.23609 tdnn3.affine:0.611583 tdnn4.affine:0.679399 lstm2.W_all:0.278253 lstm2.lstm_nonlin:0.0816218 lstm2.W_rp:0.171601 tdnn5.affine:0.537495 tdnn6.affine:0.592172 lstm3.W_all:0.266373 lstm3.lstm_nonlin:0.0743134 lstm3.W_rp:0.0920739 output.affine:0.177253 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:48:32 KST 2020, elapsed time 1 seconds
