# nnet3-info exp/nnet3/tdnn_lstm1c_sp/79.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/78.mdl exp/nnet3/tdnn_lstm1c_sp/79.mdl 
# Started at Thu Jul 30 10:32:21 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/79.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000234252, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03069, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.009,0.02 0.05,0.42,0.53,0.63,0.69 0.75,0.81,0.87,1.2), mean=0.488, stddev=0.212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.15 0.18,0.21,0.59,0.83,1.1 1.4,1.5,1.5,1.7), mean=0.596, stddev=0.367], bias-{mean,stddev}=0.002595,0.05554, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.47e+05, self-repaired-proportion=0.103623, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,8e-06,2e-05,6e-05 0.0002,0.02,0.06,0.09,0.10 0.11,0.12,0.14,0.19), mean=0.0588, stddev=0.0351], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.004,0.006,0.02 0.05,0.23,0.49,0.61,0.71 0.78,0.84,0.86,0.96), mean=0.443, stddev=0.227], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.04 0.11,0.27,0.36,0.44,0.51 0.57,0.68,0.71,1.1), mean=0.35, stddev=0.151], oderiv-count=1.18605e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40190.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,2e-06,2e-06,2e-05 0.0001,0.02,0.06,0.08,0.10 0.11,0.12,0.13,0.18), mean=0.0561, stddev=0.0349], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,5e-05,9e-05,0.0003 0.001,0.06,0.09,0.11,0.11 0.12,0.12,0.13,0.15), mean=0.0793, stddev=0.0382]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000234252, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01261, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.39,0.41 0.43,0.45,0.49,0.54,0.56 0.59,0.63,0.65,0.77), mean=0.495, stddev=0.0581], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.01 0.03,0.24,0.30,0.33,0.35 0.37,0.39,0.43,0.73), mean=0.266, stddev=0.11], bias-{mean,stddev}=-0.001768,0.02755, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.29,0.30 0.31,0.32,0.35,0.38,0.40 0.42,0.44,0.47,0.59), mean=0.355, stddev=0.0403], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.40,0.41 0.42,0.43,0.46,0.48,0.50 0.51,0.51,0.52,0.53), mean=0.459, stddev=0.0279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.06,0.08), mean=0.0412, stddev=0.008], oderiv-count=1.18598e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39350.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.30,0.31,0.34,0.38,0.40 0.42,0.45,0.49,0.61), mean=0.35, stddev=0.0446], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.49,0.50,0.51 0.53,0.56,0.61,0.67,0.71 0.75,0.79,0.82,1.2), mean=0.618, stddev=0.0743]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000234252, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01743, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.002,0.006,0.03 0.12,0.22,0.39,0.57,0.67 0.74,0.83,0.89,1.1), mean=0.394, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.40,0.45 0.52,0.69,0.81,0.89,0.94 0.97,1.0,1.1,1.3), mean=0.779, stddev=0.156], bias-{mean,stddev}=-0.001816,0.02102, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000234252, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02476, w_fc-rms=0.03963, w_oc-rms=0.05357, count=1.46e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615553, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.43,0.44 0.45,0.46,0.49,0.52,0.56 0.61,0.67,0.68,0.71), mean=0.498, stddev=0.0543], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0145] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615553, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.36,0.38,0.40 0.42,0.44,0.48,0.54,0.59 0.70,0.77,0.80,0.86), mean=0.496, stddev=0.0876], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.17,0.19 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0209] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00806677, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.84,-0.78,-0.58 -0.36,-0.21,-0.01,0.23,0.38 0.54,0.75,0.78,0.84), mean=-0.00126, stddev=0.313], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.27,0.29,0.33 0.40,0.46,0.58,0.70,0.84 0.99,1.0,1.0,1.0), mean=0.598, stddev=0.17] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615553, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.40,0.41 0.42,0.44,0.47,0.51,0.53 0.56,0.59,0.61,0.68), mean=0.476, stddev=0.0454], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.20,0.21,0.22,0.23,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0195342, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.87,-0.81,-0.56 -0.32,-0.18,-0.007,0.20,0.34 0.52,0.73,0.82,0.91), mean=-0.00446, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.16,0.22,0.40 0.57,0.71,0.82,0.89,0.93 0.99,1.0,1.0,1.0), mean=0.783, stddev=0.168] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=297768
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000234252, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03176, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.22,0.24 0.26,0.30,0.46,0.98,1.1 1.1,1.2,1.2,1.3), mean=0.64, stddev=0.339], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.03,0.08 0.21,0.34,0.47,0.60,0.70 0.81,0.94,0.99,1.2), mean=0.473, stddev=0.197], bias-{mean,stddev}=-0.00259,0.04429, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000234252, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01285, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.22,0.24,0.25 0.26,0.29,0.34,0.41,0.46 0.49,0.51,0.55,0.70), mean=0.351, stddev=0.0749], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.09 0.10,0.11,0.20,0.41,0.44 0.48,0.51,0.52,0.57), mean=0.256, stddev=0.143], bias-{mean,stddev}=-0.005463,0.02683, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0.00192308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.03,0.05,0.07 0.08,0.10,0.14,0.17,0.19 0.20,0.23,0.23,0.28), mean=0.135, stddev=0.0435], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.15,0.20,0.24 0.30,0.36,0.49,0.59,0.63 0.66,0.69,0.70,0.73), mean=0.475, stddev=0.128], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.06,0.06,0.07,0.09,0.09 0.10,0.11,0.12,0.20), mean=0.0756, stddev=0.0157], oderiv-count=989440
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36831.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.04,0.05,0.06 0.08,0.09,0.13,0.16,0.18 0.21,0.23,0.25,0.29), mean=0.13, stddev=0.0439], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.12,0.14,0.16 0.17,0.19,0.21,0.24,0.26 0.28,0.30,0.31,0.36), mean=0.214, stddev=0.0382]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000234252, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009398, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.31 0.32,0.34,0.37,0.40,0.42 0.43,0.45,0.47,0.60), mean=0.369, stddev=0.0378], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.15,0.16,0.16 0.17,0.18,0.21,0.24,0.26 0.27,0.29,0.30,0.36), mean=0.211, stddev=0.0347], bias-{mean,stddev}=-0.01077,0.01778, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.48e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.24 0.25,0.26,0.30,0.33,0.34 0.36,0.38,0.39,0.46), mean=0.298, stddev=0.0396], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.37,0.39 0.40,0.41,0.44,0.47,0.49 0.50,0.52,0.53,0.54), mean=0.443, stddev=0.0349], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0308, stddev=0.00279], oderiv-count=1.1353e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34312.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.22,0.23 0.24,0.26,0.29,0.33,0.34 0.37,0.38,0.39,0.44), mean=0.294, stddev=0.0405], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.45,0.47 0.49,0.51,0.55,0.61,0.64 0.67,0.71,0.76,0.86), mean=0.561, stddev=0.0649]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000234252, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01365, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0003,0.0003,0.0006 0.002,0.01,0.29,0.48,0.57 0.62,0.67,0.70,1.2), mean=0.274, stddev=0.215], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.28,0.33 0.38,0.53,0.64,0.70,0.74 0.77,0.81,0.84,0.99), mean=0.608, stddev=0.131], bias-{mean,stddev}=-0.003082,0.02207, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000234252, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01427, w_fc-rms=0.01849, w_oc-rms=0.02319, count=1.33e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620576, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.45,0.47,0.50,0.50,0.53 0.56,0.59,0.60,0.65), mean=0.494, stddev=0.0341], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.016] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620576, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.40,0.42 0.43,0.45,0.49,0.50,0.52 0.56,0.60,0.62,0.73), mean=0.484, stddev=0.044], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0129] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.010028, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.72,-0.64,-0.60,-0.36 -0.23,-0.11,0.002,0.14,0.27 0.38,0.55,0.63,0.77), mean=0.0118, stddev=0.222], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.45,0.46,0.50 0.53,0.57,0.65,0.99,1.0 1.0,1.0,1.0,1.0), mean=0.727, stddev=0.188] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620576, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.41,0.43 0.44,0.45,0.49,0.50,0.52 0.54,0.58,0.59,0.66), mean=0.486, stddev=0.0352], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0166] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00620576, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.61,-0.57,-0.34 -0.22,-0.11,0.003,0.13,0.26 0.37,0.51,0.61,0.85), mean=0.0112, stddev=0.217], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.47,0.58,0.67 0.75,0.81,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.878, stddev=0.112] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=262683
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000234252, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02867, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.37,0.40 0.41,0.44,0.60,0.83,0.88 0.90,0.93,0.95,1.1), mean=0.626, stddev=0.187], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.009 0.01,0.04,0.45,0.61,0.68 0.75,0.82,0.88,1.0), mean=0.381, stddev=0.262], bias-{mean,stddev}=-0.004157,0.1004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000234252, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01185, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.23,0.26,0.30,0.38,0.43 0.49,0.56,0.58,0.62), mean=0.32, stddev=0.0835], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.16,0.18,0.24,0.34,0.38 0.39,0.42,0.43,0.48), mean=0.258, stddev=0.0804], bias-{mean,stddev}=0.0005729,0.01783, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.05,0.06,0.09,0.11,0.13 0.14,0.16,0.17,0.20), mean=0.0875, stddev=0.033], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.14,0.20 0.24,0.30,0.43,0.54,0.59 0.62,0.65,0.66,0.71), mean=0.42, stddev=0.131], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.07,0.07,0.08,0.10,0.11 0.12,0.14,0.15,0.22), mean=0.0869, stddev=0.0192], oderiv-count=1.00672e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31793.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.04 0.05,0.06,0.08,0.11,0.13 0.14,0.16,0.17,0.19), mean=0.0849, stddev=0.0332], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.11 0.12,0.13,0.15,0.18,0.19 0.20,0.21,0.22,0.26), mean=0.152, stddev=0.033]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000234252, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008947, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.28 0.29,0.31,0.34,0.40,0.42 0.44,0.45,0.46,0.52), mean=0.35, stddev=0.0487], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.14 0.15,0.16,0.19,0.23,0.25 0.28,0.32,0.35,0.44), mean=0.199, stddev=0.0455], bias-{mean,stddev}=-0.01205,0.01518, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.35e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.23 0.25,0.27,0.30,0.33,0.35 0.36,0.38,0.39,0.44), mean=0.299, stddev=0.0398], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.35,0.36 0.37,0.39,0.42,0.45,0.47 0.48,0.50,0.50,0.52), mean=0.419, stddev=0.0366], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0258, stddev=0.00265], oderiv-count=907840
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29274.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.24,0.26,0.29,0.33,0.35 0.37,0.38,0.39,0.44), mean=0.294, stddev=0.0433], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.45 0.48,0.51,0.58,0.65,0.69 0.73,0.76,0.78,0.84), mean=0.583, stddev=0.0807]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000234252, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01967, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.17,0.25 0.32,0.36,0.43,0.62,0.75 0.79,0.83,0.86,1.3), mean=0.474, stddev=0.164], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.59,0.61 0.63,0.66,0.74,1.1,1.4 1.4,1.5,1.5,1.7), mean=0.855, stddev=0.27], bias-{mean,stddev}=0.007601,0.02412, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000234252, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03056, w_fc-rms=0.0429, w_oc-rms=0.05986, count=1.21e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626634, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.47 0.49,0.51,0.58,0.64,0.65 0.68,0.70,0.70,0.80), mean=0.576, stddev=0.0649], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.19,0.20,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.204, stddev=0.0101] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626634, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.48 0.50,0.54,0.59,0.64,0.66 0.70,0.73,0.74,0.89), mean=0.589, stddev=0.0648], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.17,0.18,0.18 0.19,0.19,0.20,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.203, stddev=0.0135] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00828615, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.82,-0.78,-0.52 -0.33,-0.20,-0.005,0.21,0.32 0.47,0.68,0.82,0.86), mean=-0.0022, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.25,0.28,0.32 0.36,0.39,0.44,0.48,0.50 0.51,0.53,0.54,0.60), mean=0.434, stddev=0.0578] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00817737, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.54,0.55,0.57 0.59,0.61,0.65,0.69,0.71 0.73,0.75,0.77,0.95), mean=0.652, stddev=0.0504], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.15,0.16,0.16 0.17,0.18,0.19,0.19,0.20 0.20,0.20,0.21,0.21), mean=0.184, stddev=0.0134] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0179531, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.88,-0.80,-0.51 -0.29,-0.17,-0.002,0.20,0.30 0.48,0.73,0.88,0.95), mean=-8.48e-05, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.19,0.21,0.36 0.47,0.56,0.64,0.68,0.70 0.72,0.73,0.74,0.75), mean=0.608, stddev=0.111] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223457
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000234252, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06935, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.2,1.6,1.8,1.9 2.0,2.0,2.0,2.2), mean=1.55, stddev=0.291], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.65,0.79,0.89 0.93,0.99,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.11, stddev=0.151], bias-{mean,stddev}=0.0003019,0.08581, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000234252, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04046, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.51,0.53,0.55 0.56,0.59,0.64,0.69,0.73 0.77,0.83,0.85,2.1), mean=0.646, stddev=0.0925], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.4 1.5,1.5,1.8,2.1,2.2 2.3,2.3,2.4,2.6), mean=1.83, stddev=0.304], bias-{mean,stddev}=3.909e-09,0.02588, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=606720
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/78.mdl exp/nnet3/tdnn_lstm1c_sp/79.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.49331 tdnn2.affine:8.57054 lstm1.W_all:7.25683 lstm1.lstm_nonlin:0.142352 lstm1.W_rp:2.97155 tdnn3.affine:5.29948 tdnn4.affine:6.151 lstm2.W_all:4.77465 lstm2.lstm_nonlin:0.0630547 lstm2.W_rp:1.99194 tdnn5.affine:4.2764 tdnn6.affine:5.09158 lstm3.W_all:6.47137 lstm3.lstm_nonlin:0.139729 lstm3.W_rp:2.60521 output.affine:5.73137 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.1883 tdnn2.affine:11.3773 lstm1.W_all:20.2891 lstm1.lstm_nonlin:1.62101 lstm1.W_rp:11.6997 tdnn3.affine:8.21007 tdnn4.affine:8.47758 lstm2.W_all:15.9013 lstm2.lstm_nonlin:0.750531 lstm2.W_rp:10.666 tdnn5.affine:7.55797 tdnn6.affine:8.07074 lstm3.W_all:22.8961 lstm3.lstm_nonlin:1.81818 lstm3.W_rp:25.5388 output.affine:29.9465 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.6989 tdnn2.affine:0.749282 lstm1.W_all:0.355941 lstm1.lstm_nonlin:0.0867134 lstm1.W_rp:0.253605 tdnn3.affine:0.643636 tdnn4.affine:0.722511 lstm2.W_all:0.298607 lstm2.lstm_nonlin:0.0831928 lstm2.W_rp:0.185693 tdnn5.affine:0.558123 tdnn6.affine:0.623704 lstm3.W_all:0.281643 lstm3.lstm_nonlin:0.076785 lstm3.W_rp:0.10187 output.affine:0.191072 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:32:22 KST 2020, elapsed time 1 seconds
