# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/259.mdl exp/nnet3/tdnn_lstm1c_sp/260.mdl 
# Started at Thu Jul 30 11:43:52 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/259.mdl exp/nnet3/tdnn_lstm1c_sp/260.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000251617, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01327, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.008 0.01,0.05,0.24,0.28,0.31 0.34,0.38,0.40,0.45), mean=0.203, stddev=0.109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.10,0.28,0.37,0.44 0.54,0.61,0.67,0.77), mean=0.265, stddev=0.146], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.05,0.16,0.39,0.53 0.65,0.75,0.81,0.90), mean=0.224, stddev=0.204], bias-{mean,stddev}=-0.0001759,0.0185, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.61,1.8,2.4 3.1,4.0,4.7,9.8), mean=0.937, stddev=1.16], oderiv-count=4416
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=4056.42, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.22,-0.13,-0.10,-0.07 -0.04,-0.003,0.02,0.13,0.21 0.28,0.32,0.36,0.48), mean=0.0598, stddev=0.104], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.004,0.13,0.16 0.19,0.20,0.22,0.24), mean=0.0549, stddev=0.0679]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000251617, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005783, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.23,0.25,0.25 0.26,0.27,0.27,0.28), mean=0.228, stddev=0.0202], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.007,0.03,0.14,0.16,0.18 0.19,0.20,0.21,0.25), mean=0.117, stddev=0.0617], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.06,0.13,0.28,0.39 0.49,0.57,0.61,0.69), mean=0.178, stddev=0.143], bias-{mean,stddev}=0.0004164,0.009141, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=5.66e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.31,-0.09,-0.03,0.07 0.15,0.24,0.42,0.62,0.74 0.83,0.92,0.95,1.2), mean=0.428, stddev=0.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.15,-0.01,0.03,0.11 0.20,0.29,0.45,0.60,0.67 0.72,0.80,1.0,1.2), mean=0.443, stddev=0.194], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.04,0.08,0.10 0.11,0.13,0.14,0.17), mean=0.0424, stddev=0.0409], oderiv-count=19808
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3982.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.06,0.05,0.08,0.12 0.19,0.26,0.38,0.53,0.61 0.70,0.81,0.89,1.1), mean=0.397, stddev=0.173], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.36,0.67,0.87,0.99 1.1,1.2,1.2,1.6), mean=0.621, stddev=0.323]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000251617, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003609, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-07,1e-06,6e-06 0.0002,0.03,0.08,0.12,0.14 0.16,0.19,0.20,0.23), mean=0.0763, stddev=0.0514], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.08,0.18,0.19,0.20 0.21,0.22,0.22,0.24), mean=0.156, stddev=0.0514], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,9e-08,1e-07,1e-07 2e-07,0.04,0.09,0.19,0.27 0.37,0.47,0.50,0.58), mean=0.12, stddev=0.112], bias-{mean,stddev}=-9.419e-05,0.001225, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000251617, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001557, w_fc-rms=0.001651, w_oc-rms=0.003507, count=1.09e+04, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000665663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.22,-0.16,-0.04 0.12,0.25,0.50,0.63,0.80 0.90,1.1,1.2,1.4), mean=0.46, stddev=0.28], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.49,-0.19,-0.11,-0.007 0.07,0.15,0.25,0.31,0.35 0.40,0.45,0.47,0.62), mean=0.227, stddev=0.125] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000665663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.29,-0.20,-0.06 0.07,0.20,0.42,0.54,0.66 0.75,0.83,0.93,1.1), mean=0.389, stddev=0.243], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.25,-0.06,0.007,0.06 0.12,0.18,0.25,0.29,0.34 0.40,0.43,0.47,0.56), mean=0.237, stddev=0.0959] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.175818, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.9,-3.9,-3.2,-2.5 -1.7,-1.1,-0.004,1.1,1.9 2.4,3.0,3.5,5.0), mean=0.00716, stddev=1.45], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-1.9,-1.8,-1.2 -0.75,-0.22,0.73,1.2,1.7 2.0,2.5,2.8,4.0), mean=0.563, stddev=0.974] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000665663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.65,-0.52,-0.36,-0.18 0.008,0.18,0.48,0.65,0.87 1.0,1.2,1.3,2.0), mean=0.434, stddev=0.352], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.21,-0.14,-0.12,-0.07 0.01,0.10,0.25,0.31,0.39 0.45,0.52,0.58,0.85), mean=0.219, stddev=0.146] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000665663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.8,-2.2,-2.0,-1.5 -1.1,-0.65,-0.003,0.67,1.1 1.4,1.7,2.1,3.3), mean=-0.00658, stddev=0.87], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.34,-0.16,0.04 0.23,0.46,0.85,1.0,1.2 1.4,1.6,1.6,1.8), mean=0.777, stddev=0.39] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.65e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=-3.0281e-05, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000202265, count-zeroing-boundaries=2472
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.17741
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000251617, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004449, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.05,0.10,0.13,0.14 0.15,0.16,0.16,0.17), mean=0.0933, stddev=0.04], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.0002,0.0003,0.0005 0.002,0.04,0.07,0.09,0.10 0.10,0.11,0.12,0.13), mean=0.0644, stddev=0.0317], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,5e-08,5e-08 7e-08,1e-07,3e-07,0.02,0.21 0.26,0.30,0.34,0.38), mean=0.0432, stddev=0.0918], bias-{mean,stddev}=-0.0002426,0.005451, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000251617, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005439, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.10,0.11,0.12 0.12,0.13,0.15,0.17,0.18 0.19,0.21,0.21,0.23), mean=0.15, stddev=0.0254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.11,0.17,0.18 0.19,0.19,0.20,0.21), mean=0.113, stddev=0.0519], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,4e-08,5e-08 7e-08,1e-07,1e-05,0.16,0.30 0.39,0.46,0.49,0.57), mean=0.0732, stddev=0.133], bias-{mean,stddev}=-2.797e-06,0.004002, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2.57e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.59,-0.48,-0.29 -0.17,-0.06,0.16,0.40,0.54 0.63,0.75,0.76,1.1), mean=0.165, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-1.4,-1.2,-0.88 -0.59,-0.23,0.51,1.2,1.5 1.9,2.3,2.4,3.0), mean=0.49, stddev=0.85]
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3761.51, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,-0.06,-0.05,-0.03 0.009,0.05,0.13,0.20,0.24 0.28,0.34,0.36,0.42), mean=0.128, stddev=0.0924], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.10,0.18,0.25,0.28 0.31,0.34,0.37,0.50), mean=0.175, stddev=0.0956]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000251617, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004344, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.15 0.15,0.16,0.17,0.18,0.19 0.19,0.20,0.20,0.22), mean=0.171, stddev=0.0129], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.07,0.08 0.08,0.09,0.10,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.0979, stddev=0.0151], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.06,0.07,0.12,0.21,0.28 0.34,0.40,0.42,0.48), mean=0.145, stddev=0.0921], bias-{mean,stddev}=2.678e-05,0.005014, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.02,0.02,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.035, stddev=0.0146], oderiv-count=65792
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3540.33, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,0.04,0.10,0.16 0.19,0.24,0.33,0.42,0.50 0.55,0.61,0.64,0.67), mean=0.334, stddev=0.123], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.34,0.60,0.80,0.90 0.98,1.1,1.2,1.5), mean=0.569, stddev=0.294]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000251617, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002576, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,1e-07,2e-07,5e-07 2e-06,5e-05,0.05,0.09,0.11 0.13,0.14,0.15,0.17), mean=0.0484, stddev=0.0444], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.07,0.12,0.14,0.14 0.15,0.16,0.16,0.18), mean=0.112, stddev=0.036], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,8e-08,1e-07 9e-06,0.02,0.06,0.13,0.19 0.26,0.35,0.38,0.44), mean=0.0834, stddev=0.0828], bias-{mean,stddev}=-0.00023,0.001592, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000251617, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001005, w_fc-rms=0.000966, w_oc-rms=0.001687, count=9.56e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00069814, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.28,-0.13,-0.08,0.03 0.11,0.28,0.50,0.52,0.70 0.85,1.0,1.0,1.4), mean=0.442, stddev=0.234], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.22,-0.07,-0.02,0.05 0.10,0.17,0.25,0.26,0.31 0.35,0.39,0.41,0.70), mean=0.224, stddev=0.0946] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00069814, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.45,-0.18,-0.12,-0.02 0.08,0.21,0.49,0.50,0.55 0.64,0.83,0.93,2.3), mean=0.392, stddev=0.232], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.17,0.007,0.06,0.12 0.17,0.21,0.25,0.28,0.31 0.34,0.37,0.39,0.49), mean=0.242, stddev=0.0661] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.180965, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.3,-2.9,-2.5,-1.7 -1.3,-0.71,-2e-05,0.56,1.2 1.8,2.5,2.8,4.2), mean=-0.0258, stddev=1.05], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.5,-1.3,-0.78 -0.31,0.12,1.0,1.1,1.5 1.9,2.2,2.3,2.9), mean=0.717, stddev=0.771] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00069814, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.50,-0.30,-0.23,-0.06 0.02,0.19,0.50,0.50,0.64 0.79,0.96,1.1,1.7), mean=0.401, stddev=0.262], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.38,-0.03,-0.01,0.02 0.09,0.15,0.25,0.28,0.34 0.38,0.45,0.47,0.63), mean=0.225, stddev=0.104] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00069814, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.6,-1.8,-1.6,-1.1 -0.79,-0.39,-0.0008,0.35,0.76 1.3,1.6,1.7,2.7), mean=0.00343, stddev=0.674], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.32,-0.12,0.18 0.42,0.66,1.0,1.1,1.2 1.3,1.5,1.5,1.7), mean=0.88, stddev=0.356] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.42e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0.000105574, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=2143
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.17741
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000251617, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003248, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.07,0.09,0.10 0.10,0.10,0.11,0.11), mean=0.071, stddev=0.0209], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,8e-05,9e-05,0.0001 0.0002,0.0008,0.06,0.07,0.08 0.08,0.08,0.09,0.09), mean=0.0418, stddev=0.0315], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,1e-06,0.10,0.15 0.18,0.21,0.22,0.24), mean=0.0359, stddev=0.0648], bias-{mean,stddev}=4.135e-05,0.003961, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000251617, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004488, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.14,0.15 0.16,0.17,0.17,0.20), mean=0.124, stddev=0.019], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.07,0.10,0.13,0.14 0.14,0.15,0.15,0.18), mean=0.0975, stddev=0.0313], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 8e-08,1e-07,0.001,0.14,0.24 0.31,0.37,0.40,0.45), mean=0.0669, stddev=0.106], bias-{mean,stddev}=-7.503e-05,0.002284, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.02e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-1.8,-1.6,-1.3 -0.91,-0.47,0.26,0.91,1.2 1.5,1.9,2.4,3.6), mean=0.236, stddev=0.866], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.3,-5.9,-5.2,-4.3 -3.2,-1.8,0.89,3.1,4.1 5.0,6.3,6.8,10), mean=0.715, stddev=2.84]
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3319.14, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.12,-0.07,-0.04,-0.009 0.02,0.05,0.12,0.18,0.23 0.27,0.31,0.36,0.44), mean=0.121, stddev=0.0847], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.10,0.17,0.23,0.26 0.29,0.31,0.33,0.40), mean=0.16, stddev=0.0843]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000251617, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003638, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.12 0.13,0.13,0.14,0.15,0.16 0.17,0.17,0.18,0.19), mean=0.143, stddev=0.0149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.07,0.08,0.09,0.10 0.10,0.11,0.11,0.13), mean=0.0822, stddev=0.0114], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.05,0.09,0.18,0.24 0.29,0.34,0.36,0.42), mean=0.119, stddev=0.0803], bias-{mean,stddev}=2.597e-05,0.004326, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=4.8e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.04,0.07,0.09,0.15 0.19,0.24,0.36,0.48,0.53 0.59,0.65,0.69,0.87), mean=0.362, stddev=0.139], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.01,0.05,0.09,0.17 0.23,0.30,0.41,0.53,0.59 0.65,0.72,0.73,0.85), mean=0.411, stddev=0.144], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.02,0.03,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.031, stddev=0.0155], oderiv-count=34720
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3097.96, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.06,0.11,0.14 0.19,0.26,0.38,0.52,0.59 0.64,0.73,0.81,0.91), mean=0.387, stddev=0.156], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.22,0.43,0.69,0.97,1.1 1.2,1.4,1.5,2.3), mean=0.691, stddev=0.352]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000251617, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003107, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.04,0.05,0.11,0.14 0.15,0.16,0.17,0.20), mean=0.0678, stddev=0.0409], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.11,0.13,0.17,0.20 0.21,0.22,0.22,0.24), mean=0.137, stddev=0.0359], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,5e-07,9e-07,3e-05 0.02,0.03,0.06,0.15,0.25 0.34,0.42,0.45,0.50), mean=0.0974, stddev=0.103], bias-{mean,stddev}=0.0001679,0.001065, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000251617, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.00229, w_fc-rms=0.001719, w_oc-rms=0.003413, count=8.25e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000740709, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.29,-0.19,0.06 0.19,0.36,0.63,0.95,1.2 1.4,1.8,1.9,3.0), mean=0.677, stddev=0.452], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.27,-0.14,-0.10,-0.02 0.03,0.09,0.20,0.30,0.35 0.40,0.46,0.53,0.70), mean=0.195, stddev=0.133] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000740709, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.53,-0.46,-0.22 -0.04,0.13,0.49,0.81,1.0 1.1,1.4,1.5,2.1), mean=0.488, stddev=0.432], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.31,-0.19,-0.11,-0.02 0.04,0.09,0.21,0.31,0.37 0.41,0.47,0.48,0.56), mean=0.203, stddev=0.134] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.230524, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-6.9,-6.5,-5.0 -3.6,-2.1,0.18,2.0,3.1 4.1,5.3,6.7,14), mean=-0.0216, stddev=2.79], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.6,-2.7,-2.6,-1.8 -1.3,-0.73,0.28,1.2,1.6 2.0,2.5,2.8,4.0), mean=0.215, stddev=1.18] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000740709, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.80,-0.59,-0.27 -0.03,0.23,0.71,1.2,1.4 1.7,1.9,2.1,3.5), mean=0.704, stddev=0.601], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.19,-0.14,-0.06 -0.008,0.07,0.20,0.31,0.38 0.44,0.49,0.52,0.68), mean=0.188, stddev=0.161] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000740709, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.2,-4.8,-4.6,-3.6 -2.6,-1.5,0.06,1.5,2.2 2.9,4.1,4.8,12), mean=-0.018, stddev=2.04], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.2,-1.7,-1.3,-0.95 -0.61,-0.23,0.34,0.88,1.1 1.3,1.6,1.8,3.5), mean=0.296, stddev=0.741] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.19e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00112108, count-zeroing-boundaries=1784
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.17741
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000251617, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00417, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.05,0.05,0.07,0.12,0.13 0.14,0.14,0.14,0.15), mean=0.0883, stddev=0.0352], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.07,0.08,0.08 0.09,0.09,0.10,0.14), mean=0.066, stddev=0.013], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 5e-07,3e-06,0.01,0.12,0.18 0.22,0.26,0.27,0.30), mean=0.0567, stddev=0.0763], bias-{mean,stddev}=-0.002124,0.02053, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000251617, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004873, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.05,0.07,0.09,0.11 0.12,0.14,0.15,0.24), mean=0.0742, stddev=0.0259], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.12,0.13 0.13,0.14,0.19,0.28,0.29 0.30,0.32,0.32,0.33), mean=0.212, stddev=0.0694], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,4e-07 6e-07,2e-06,0.007,0.33,0.44 0.51,0.55,0.58,0.64), mean=0.126, stddev=0.185], bias-{mean,stddev}=6.197e-12,0.001451, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.25874 tdnn2.affine:5.21292 lstm1.W_all:4.19699 lstm1.lstm_nonlin:0.0952627 lstm1.W_rp:1.63839 tdnn3.affine:3.46488 tdnn4.affine:3.91383 lstm2.W_all:2.99575 lstm2.lstm_nonlin:0.0499108 lstm2.W_rp:1.19603 tdnn5.affine:2.85889 tdnn6.affine:3.2785 lstm3.W_all:3.61281 lstm3.lstm_nonlin:0.101594 lstm3.W_rp:1.56897 output.affine:3.60449 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.7181 tdnn2.affine:11.7773 lstm1.W_all:21.7781 lstm1.lstm_nonlin:1.6154 lstm1.W_rp:15.6493 tdnn3.affine:8.67536 tdnn4.affine:8.69005 lstm2.W_all:18.0505 lstm2.lstm_nonlin:0.936799 lstm2.W_rp:14.88 tdnn5.affine:8.2953 tdnn6.affine:8.60717 lstm3.W_all:25.8755 lstm3.lstm_nonlin:2.59757 lstm3.W_rp:31.7339 output.affine:32.6042 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.378841 tdnn2.affine:0.440102 lstm1.W_all:0.192734 lstm1.lstm_nonlin:0.059289 lstm1.W_rp:0.10481 tdnn3.affine:0.399056 tdnn4.affine:0.449364 lstm2.W_all:0.16567 lstm2.lstm_nonlin:0.0538003 lstm2.W_rp:0.0804406 tdnn5.affine:0.344819 tdnn6.affine:0.379982 lstm3.W_all:0.139629 lstm3.lstm_nonlin:0.03947 lstm3.W_rp:0.0495618 output.affine:0.11068 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:43:52 KST 2020, elapsed time 0 seconds
