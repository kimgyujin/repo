# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/349.mdl exp/nnet3/tdnn_lstm1c_sp/350.mdl 
# Started at Thu Jul 30 12:19:43 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/349.mdl exp/nnet3/tdnn_lstm1c_sp/350.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00014217, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009242, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.003 0.005,0.009,0.17,0.20,0.22 0.23,0.26,0.29,0.31), mean=0.136, stddev=0.0837], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.07,0.19,0.26,0.31 0.37,0.42,0.44,0.52), mean=0.185, stddev=0.101], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.009,0.01,0.01 0.02,0.03,0.10,0.27,0.37 0.46,0.54,0.56,0.63), mean=0.154, stddev=0.144], bias-{mean,stddev}=0.0006972,0.01216, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.20,0.46,0.64 0.80,1.0,1.1,2.4), mean=0.257, stddev=0.296], oderiv-count=99904
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1453.81, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.55,-0.41,-0.31,-0.21 -0.11,-0.02,0.01,0.18,0.29 0.39,0.50,0.63,1.3), mean=0.0635, stddev=0.188], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.08,0.15 0.18,0.21,0.23,0.27), mean=0.0366, stddev=0.0627]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00014217, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003872, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.13 0.14,0.14,0.15,0.16,0.17 0.17,0.18,0.19,0.21), mean=0.152, stddev=0.0134], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.001,0.002 0.002,0.005,0.09,0.11,0.12 0.13,0.14,0.15,0.18), mean=0.0752, stddev=0.0463], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.04,0.08,0.19,0.27 0.33,0.39,0.42,0.47), mean=0.117, stddev=0.0983], bias-{mean,stddev}=0.0006136,0.00674, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.4e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-1.1,-0.94,-0.68 -0.44,-0.20,0.22,0.72,0.98 1.2,1.5,1.7,2.3), mean=0.26, stddev=0.572], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.92,-0.83,-0.54 -0.27,-0.03,0.43,0.92,1.2 1.4,1.6,1.8,2.3), mean=0.442, stddev=0.578]
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1427.59, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.48,-0.35,-0.25 -0.06,0.07,0.35,0.63,0.76 0.93,1.1,1.4,1.7), mean=0.355, stddev=0.355], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.52,0.83,0.98 1.1,1.2,1.2,1.6), mean=0.477, stddev=0.384]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00014217, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00232, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-09,7e-08,2e-07,1e-06 3e-05,0.02,0.05,0.08,0.09 0.11,0.12,0.12,0.16), mean=0.0491, stddev=0.033], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.04,0.11,0.12,0.13 0.14,0.15,0.15,0.18), mean=0.099, stddev=0.0373], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,8e-08,1e-07 2e-07,0.02,0.05,0.12,0.18 0.24,0.30,0.33,0.37), mean=0.0762, stddev=0.0734], bias-{mean,stddev}=3.057e-05,0.0007659, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00014217, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0009854, w_fc-rms=0.0008526, w_oc-rms=0.00195, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=5.38391e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.36,-0.18,-0.09,0.06 0.17,0.28,0.50,0.66,0.82 0.95,1.1,1.2,1.4), mean=0.487, stddev=0.262], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.20,-0.16,-0.08,-0.03 0.04,0.11,0.24,0.30,0.38 0.44,0.51,0.59,0.70), mean=0.217, stddev=0.138] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=5.38391e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.28,-0.04,0.04,0.19 0.27,0.35,0.50,0.61,0.72 0.79,0.94,1.0,1.5), mean=0.491, stddev=0.193], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.21,-0.06,0.002,0.07 0.12,0.17,0.25,0.28,0.34 0.37,0.43,0.45,0.62), mean=0.235, stddev=0.0917] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.189708, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.5,-3.6,-3.0,-2.2 -1.7,-0.93,0.006,1.2,1.9 2.5,3.3,3.8,5.6), mean=0.113, stddev=1.43], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-2.6,-2.1,-1.5 -1.0,-0.38,0.70,1.3,2.0 2.7,3.1,3.3,4.1), mean=0.572, stddev=1.2] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=5.38391e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.57,-0.26,-0.16,-0.08 0.09,0.23,0.49,0.65,0.82 0.92,1.1,1.2,1.7), mean=0.452, stddev=0.288], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.60,-0.24,-0.13,-0.06 0.02,0.11,0.25,0.31,0.38 0.45,0.51,0.61,0.77), mean=0.214, stddev=0.154] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=5.38391e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.9,-2.0,-1.7,-1.4 -1.1,-0.65,0.002,0.68,1.1 1.5,1.9,2.0,3.4), mean=0.0495, stddev=0.847], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.45,-0.33,-0.07 0.21,0.43,0.86,1.1,1.2 1.4,1.6,1.8,2.0), mean=0.771, stddev=0.439] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.07e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1599
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.224793
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00014217, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003105, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.06,0.09,0.09 0.10,0.10,0.11,0.11), mean=0.0668, stddev=0.0235], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,7e-05,0.0001,0.0002 0.0009,0.04,0.05,0.06,0.07 0.07,0.08,0.08,0.09), mean=0.0449, stddev=0.0221], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,6e-08 8e-08,1e-07,3e-07,0.08,0.14 0.18,0.20,0.23,0.26), mean=0.0319, stddev=0.0632], bias-{mean,stddev}=0.0002472,0.002732, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00014217, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003903, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.07,0.08,0.08 0.09,0.09,0.11,0.12,0.13 0.14,0.15,0.15,0.16), mean=0.107, stddev=0.0184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.08,0.12,0.12 0.13,0.13,0.14,0.15), mean=0.0836, stddev=0.0305], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-09,3e-08,4e-08,4e-08 6e-08,9e-08,1e-05,0.13,0.21 0.27,0.32,0.34,0.39), mean=0.0561, stddev=0.0935], bias-{mean,stddev}=-3.949e-05,0.002201, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.15,0.53,0.73 0.89,1.3,1.5,1.9), mean=0.274, stddev=0.341], oderiv-count=4992
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1348.95, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.41,-0.25,-0.20,-0.14 -0.08,-0.03,0.09,0.23,0.30 0.34,0.39,0.41,0.47), mean=0.0995, stddev=0.148], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.09,0.18,0.21 0.24,0.27,0.27,0.36), mean=0.0942, stddev=0.0884]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00014217, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002849, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.10 0.10,0.11,0.11,0.12,0.12 0.13,0.13,0.14,0.14), mean=0.112, stddev=0.00849], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.05,0.05,0.05 0.05,0.06,0.06,0.07,0.08 0.08,0.08,0.09,0.10), mean=0.0642, stddev=0.00977], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.04,0.07,0.14,0.18 0.23,0.26,0.28,0.31), mean=0.0945, stddev=0.0611], bias-{mean,stddev}=0.0002297,0.003024, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=4.94e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,0.03,0.05,0.09 0.12,0.15,0.23,0.31,0.36 0.41,0.44,0.48,0.72), mean=0.235, stddev=0.0989], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,0.03,0.08,0.16 0.24,0.30,0.41,0.53,0.60 0.64,0.69,0.72,0.91), mean=0.415, stddev=0.143]
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1270.31, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.38,-0.21,-0.15,-0.05 0.05,0.14,0.32,0.49,0.60 0.66,0.82,0.94,1.1), mean=0.32, stddev=0.225], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.57,0.82,0.96 1.1,1.2,1.3,1.6), mean=0.524, stddev=0.359]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00014217, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001606, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-07,5e-07,2e-06 5e-06,0.0001,0.03,0.06,0.07 0.08,0.09,0.09,0.11), mean=0.0305, stddev=0.0273], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.04,0.08,0.09,0.09 0.10,0.10,0.10,0.11), mean=0.0689, stddev=0.0249], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,5e-08,6e-08,8e-08 2e-05,0.01,0.03,0.08,0.12 0.16,0.22,0.25,0.27), mean=0.0511, stddev=0.0525], bias-{mean,stddev}=4.134e-05,0.0007288, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00014217, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0005449, w_fc-rms=0.0006097, w_oc-rms=0.001236, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=5.26854e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.14,0.07,0.12,0.24 0.32,0.39,0.50,0.61,0.70 0.76,0.88,0.94,1.1), mean=0.504, stddev=0.158], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.20,-0.03,0.03,0.09 0.14,0.20,0.25,0.28,0.33 0.36,0.39,0.42,0.57), mean=0.239, stddev=0.0813] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=5.26854e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.07,0.13,0.22 0.31,0.40,0.50,0.55,0.66 0.71,0.82,0.85,1.1), mean=0.486, stddev=0.141], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,0.03,0.06,0.13 0.16,0.21,0.25,0.27,0.31 0.36,0.42,0.45,0.56), mean=0.244, stddev=0.0716] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00212259, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.9,-2.3,-2.1,-1.7 -1.2,-0.52,-0.001,0.48,1.0 1.4,1.8,2.2,3.0), mean=-0.0269, stddev=0.856], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-1.7,-1.3,-0.96 -0.52,0.004,0.99,1.0,1.4 2.0,2.3,2.5,3.2), mean=0.654, stddev=0.829] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=5.26854e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.15,-0.003,0.06,0.16 0.26,0.37,0.50,0.59,0.67 0.77,0.92,0.98,1.2), mean=0.487, stddev=0.179], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.30,-0.06,-0.03,0.05 0.10,0.16,0.25,0.28,0.32 0.38,0.43,0.45,0.58), mean=0.227, stddev=0.0993] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=5.26854e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.7,-1.4,-1.1 -0.71,-0.35,-0.001,0.32,0.62 0.99,1.3,1.5,1.9), mean=-0.0176, stddev=0.569], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.67,-0.11,-0.03,0.23 0.42,0.61,0.96,1.0,1.1 1.2,1.4,1.5,1.8), mean=0.835, stddev=0.313] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-9.5e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1431
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.224793
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00014217, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002132, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.06,0.06 0.07,0.07,0.07,0.08), mean=0.0468, stddev=0.0132], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0001,0.0001,0.0002 0.0003,0.001,0.04,0.04,0.05 0.05,0.05,0.05,0.08), mean=0.0279, stddev=0.0201], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,1e-06,0.06,0.10 0.12,0.13,0.14,0.16), mean=0.0245, stddev=0.042], bias-{mean,stddev}=3.457e-05,0.002216, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00014217, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003274, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.08,0.08,0.09,0.10,0.11 0.12,0.12,0.13,0.14), mean=0.0904, stddev=0.0136], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.07,0.09,0.10 0.10,0.11,0.11,0.12), mean=0.0716, stddev=0.021], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,4e-08,5e-08 7e-08,1e-07,0.001,0.11,0.17 0.22,0.27,0.29,0.34), mean=0.0509, stddev=0.076], bias-{mean,stddev}=-8.407e-05,0.001491, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.15,0.24,0.31 0.36,0.40,0.46,0.53), mean=0.146, stddev=0.12], oderiv-count=38144
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1191.66, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.31,-0.21,-0.19,-0.14 -0.09,-0.05,0.05,0.17,0.23 0.30,0.36,0.41,0.47), mean=0.0626, stddev=0.132], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.14,0.17 0.22,0.24,0.26,0.35), mean=0.0629, stddev=0.0783]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00014217, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002444, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.08 0.08,0.09,0.10,0.10,0.11 0.11,0.12,0.12,0.12), mean=0.0959, stddev=0.011], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.05,0.06,0.06 0.07,0.07,0.07,0.08), mean=0.0553, stddev=0.00696], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.04,0.06,0.12,0.16 0.20,0.23,0.25,0.27), mean=0.0797, stddev=0.0544], bias-{mean,stddev}=-1.994e-05,0.00269, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.01,0.03,0.04,0.04 0.05,0.05,0.06,0.06), mean=0.0269, stddev=0.0142], oderiv-count=56160
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1113.02, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.67,-0.38,-0.29,-0.20 -0.10,0.02,0.26,0.51,0.61 0.71,0.85,0.92,1.2), mean=0.269, stddev=0.287], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.53,0.90,1.1 1.2,1.3,1.4,1.9), mean=0.507, stddev=0.433]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00014217, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001819, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.01,0.02,0.03,0.06,0.08 0.09,0.10,0.10,0.12), mean=0.0383, stddev=0.0261], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.06,0.08,0.10,0.12 0.12,0.13,0.13,0.14), mean=0.0801, stddev=0.0214], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,9e-06 0.009,0.01,0.03,0.09,0.15 0.20,0.25,0.27,0.32), mean=0.0555, stddev=0.0616], bias-{mean,stddev}=-5.125e-05,0.0005191, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00014217, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0007659, w_fc-rms=0.0008259, w_oc-rms=0.00193, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=5.10932e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-0.13,0.004,0.22 0.41,0.56,0.81,1.1,1.2 1.4,1.5,1.8,3.7), mean=0.815, stddev=0.395], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.20,-0.14,-0.05 0.002,0.05,0.15,0.25,0.29 0.34,0.41,0.47,0.87), mean=0.149, stddev=0.142] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=5.10932e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.35,0.06,0.13,0.29 0.39,0.51,0.80,1.1,1.2 1.4,1.5,1.5,1.8), mean=0.801, stddev=0.331], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.29,-0.11,-0.09,-0.03 0.004,0.07,0.16,0.25,0.30 0.34,0.39,0.43,0.70), mean=0.16, stddev=0.122] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00432795, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-13,-6.8,-5.8,-4.4 -3.3,-2.3,-0.35,2.0,3.1 4.1,5.7,7.6,8.1), mean=-0.269, stddev=2.77], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.8,-2.8,-2.6,-1.9 -1.4,-0.71,0.36,1.4,1.9 2.5,3.4,3.6,7.1), mean=0.332, stddev=1.36] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=5.10932e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-0.65,-0.43,-0.11 0.18,0.39,0.81,1.2,1.5 1.6,1.8,2.2,4.5), mean=0.801, stddev=0.564], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-0.22,-0.19,-0.11 -0.05,0.009,0.11,0.23,0.30 0.35,0.39,0.40,1.1), mean=0.119, stddev=0.165] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=5.10932e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.7,-5.3,-4.4,-3.1 -2.5,-1.7,-0.22,1.4,2.2 3.1,4.5,5.1,6.4), mean=-0.161, stddev=2.03], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.1,-1.4,-1.2,-0.96 -0.62,-0.26,0.29,0.88,1.2 1.4,1.8,2.1,6.4), mean=0.31, stddev=0.797] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-8.35e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1248
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.224793
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00014217, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002189, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.07,0.07 0.07,0.07,0.07,0.08), mean=0.0459, stddev=0.0196], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.04,0.04 0.05,0.05,0.05,0.08), mean=0.0345, stddev=0.00765], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,2e-07 3e-07,7e-07,0.005,0.06,0.09 0.12,0.14,0.15,0.17), mean=0.0288, stddev=0.0408], bias-{mean,stddev}=8.705e-05,0.01336, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00014217, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002995, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.06,0.07 0.07,0.09,0.09,0.18), mean=0.0453, stddev=0.0168], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.07,0.08,0.11,0.18,0.19 0.19,0.20,0.20,0.21), mean=0.129, stddev=0.0472], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,3e-07 3e-07,7e-07,0.002,0.20,0.27 0.31,0.35,0.35,0.39), mean=0.0766, stddev=0.114], bias-{mean,stddev}=-8.012e-11,0.000671, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.003,0.02,0.02,0.03 0.03,0.04,0.04,0.39), mean=0.0155, stddev=0.0161], oderiv-count=80000

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.66081 tdnn2.affine:3.4908 lstm1.W_all:2.69761 lstm1.lstm_nonlin:0.0534875 lstm1.W_rp:1.14237 tdnn3.affine:2.4861 tdnn4.affine:2.56715 lstm2.W_all:1.86783 lstm2.lstm_nonlin:0.0337925 lstm2.W_rp:0.784865 tdnn5.affine:2.08542 tdnn6.affine:2.20181 lstm3.W_all:2.11464 lstm3.lstm_nonlin:0.0509567 lstm3.W_rp:0.833144 output.affine:2.21506 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.7093 tdnn2.affine:10.5857 lstm1.W_all:20.5402 lstm1.lstm_nonlin:2.40169 lstm1.W_rp:15.2985 tdnn3.affine:8.21303 tdnn4.affine:7.64539 lstm2.W_all:16.9181 lstm2.lstm_nonlin:1.64736 lstm2.W_rp:14.5222 tdnn5.affine:7.85919 tdnn6.affine:7.62538 lstm3.W_all:24.0795 lstm3.lstm_nonlin:3.12147 lstm3.W_rp:34.9952 output.affine:32.089 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.287227 tdnn2.affine:0.329239 lstm1.W_all:0.131319 lstm1.lstm_nonlin:0.0222206 lstm1.W_rp:0.0746293 tdnn3.affine:0.301797 tdnn4.affine:0.334999 lstm2.W_all:0.110347 lstm2.lstm_nonlin:0.0204919 lstm2.W_rp:0.0540462 tdnn5.affine:0.265215 tdnn6.affine:0.288868 lstm3.W_all:0.0878457 lstm3.lstm_nonlin:0.0163431 lstm3.W_rp:0.0238017 output.affine:0.0689972 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:19:44 KST 2020, elapsed time 1 seconds
