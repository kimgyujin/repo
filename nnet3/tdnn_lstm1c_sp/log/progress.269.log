# nnet3-info exp/nnet3/tdnn_lstm1c_sp/269.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/268.mdl exp/nnet3/tdnn_lstm1c_sp/269.mdl 
# Started at Thu Jul 30 11:47:29 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/269.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000236153, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03405, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.02,0.07,0.59,0.74,0.83 0.92,0.98,1.0,1.2), mean=0.507, stddev=0.3], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.18,0.22,0.65,0.92,1.3 1.5,1.6,1.7,1.7), mean=0.66, stddev=0.408], bias-{mean,stddev}=0.0009684,0.06447, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0.210459, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,6e-06,8e-06,4e-05 0.0001,0.0004,0.06,0.10,0.12 0.13,0.15,0.17,0.24), mean=0.0594, stddev=0.0474], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.002,0.003,0.01 0.03,0.06,0.45,0.60,0.71 0.80,0.86,0.89,0.99), mean=0.387, stddev=0.26], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.03 0.04,0.11,0.26,0.36,0.41 0.51,0.63,0.70,1.4), mean=0.261, stddev=0.159], oderiv-count=1.1111e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37157.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,5e-06,7e-06,2e-05 7e-05,0.0004,0.06,0.10,0.12 0.14,0.16,0.17,0.26), mean=0.0584, stddev=0.0478], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.0001,0.0001,0.0003 0.0007,0.003,0.10,0.13,0.14 0.15,0.16,0.17,0.18), mean=0.082, stddev=0.0548]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000236153, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01276, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.42,0.44,0.49,0.55,0.59 0.63,0.67,0.69,0.76), mean=0.499, stddev=0.0689], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.008,0.01 0.01,0.04,0.30,0.36,0.39 0.42,0.46,0.50,0.78), mean=0.252, stddev=0.145], bias-{mean,stddev}=-0.02157,0.03934, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.97e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.26,0.27 0.28,0.30,0.33,0.37,0.40 0.42,0.45,0.46,0.52), mean=0.335, stddev=0.0462], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.38,0.38,0.40 0.41,0.42,0.45,0.48,0.49 0.51,0.52,0.52,0.54), mean=0.449, stddev=0.0333], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0394, stddev=0.00745], oderiv-count=1.06877e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36350.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.26,0.28 0.29,0.30,0.33,0.37,0.40 0.42,0.44,0.47,0.55), mean=0.34, stddev=0.0464], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.49,0.50,0.51 0.53,0.55,0.61,0.66,0.69 0.73,0.76,0.78,0.83), mean=0.61, stddev=0.066]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000236153, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01862, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,4e-06,1e-05,6e-05 0.002,0.17,0.43,0.62,0.72 0.78,0.84,0.89,1.1), mean=0.405, stddev=0.247], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.39,0.41,0.47 0.56,0.74,0.86,0.95,1.0 1.1,1.1,1.2,1.3), mean=0.832, stddev=0.17], bias-{mean,stddev}=0.001537,0.02751, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000236153, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05475, w_fc-rms=0.02905, w_oc-rms=0.04243, count=1.48e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635863, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.68,0.79,0.81,0.85), mean=0.492, stddev=0.0777], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.19,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0234] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635863, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.42,0.43,0.45 0.46,0.48,0.50,0.53,0.57 0.64,0.77,0.78,0.84), mean=0.512, stddev=0.0637], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.15,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0215] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.036596, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.90,-0.84,-0.54 -0.29,-0.14,0.001,0.17,0.32 0.56,0.83,0.88,0.90), mean=0.014, stddev=0.301], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.19,0.26 0.35,0.42,0.55,0.77,1.0 1.0,1.0,1.0,1.0), mean=0.59, stddev=0.224] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635863, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.38,0.39 0.41,0.42,0.45,0.50,0.50 0.50,0.54,0.56,0.66), mean=0.453, stddev=0.0409], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.217, stddev=0.0221] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00635863, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.75,-0.66,-0.36 -0.18,-0.09,0.001,0.11,0.21 0.35,0.67,0.73,0.78), mean=0.0106, stddev=0.222], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.40,0.55 0.74,0.81,0.88,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.859, stddev=0.13] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.54168e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.12189e-05, count-zeroing-boundaries=294865
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.204959
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000236153, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04088, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.32,0.36 0.40,0.46,0.86,1.2,1.3 1.4,1.4,1.5,1.5), mean=0.853, stddev=0.375], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.002,0.004 0.01,0.30,0.55,0.75,0.91 1.2,1.6,1.8,2.1), mean=0.553, stddev=0.358], bias-{mean,stddev}=0.01216,0.2783, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000236153, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01351, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.21,0.21,0.24 0.27,0.30,0.36,0.44,0.49 0.51,0.55,0.56,0.68), mean=0.367, stddev=0.0857], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.13,0.15,0.29,0.41,0.44 0.46,0.48,0.49,0.54), mean=0.281, stddev=0.126], bias-{mean,stddev}=0.003563,0.01296, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.89e+05, self-repaired-proportion=0.00576923, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.03,0.04,0.05 0.06,0.08,0.11,0.14,0.16 0.17,0.19,0.20,0.25), mean=0.111, stddev=0.0371], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.16,0.18,0.23 0.30,0.39,0.51,0.61,0.64 0.68,0.70,0.73,0.80), mean=0.493, stddev=0.134], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.08,0.09,0.11,0.13 0.15,0.17,0.19,0.27), mean=0.1, stddev=0.0264], oderiv-count=1.2087e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33929.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.03,0.04,0.05 0.06,0.08,0.11,0.14,0.16 0.17,0.19,0.20,0.26), mean=0.11, stddev=0.0363], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.11,0.12,0.13 0.14,0.15,0.17,0.19,0.21 0.22,0.24,0.25,0.28), mean=0.172, stddev=0.0303]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000236153, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009451, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.31 0.32,0.33,0.36,0.40,0.44 0.46,0.48,0.50,0.58), mean=0.37, stddev=0.0468], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.13,0.14,0.15 0.16,0.17,0.20,0.25,0.27 0.29,0.32,0.34,0.38), mean=0.211, stddev=0.0457], bias-{mean,stddev}=-0.02229,0.01954, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.81e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.25 0.26,0.27,0.30,0.33,0.35 0.37,0.38,0.39,0.51), mean=0.304, stddev=0.0382], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.37,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.50,0.52), mean=0.434, stddev=0.0289], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0324, stddev=0.00253], oderiv-count=1.02845e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31509, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.25 0.26,0.27,0.31,0.34,0.36 0.37,0.39,0.40,0.53), mean=0.308, stddev=0.0389], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.49,0.50 0.51,0.53,0.58,0.63,0.68 0.72,0.77,0.80,1.1), mean=0.589, stddev=0.0711]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000236153, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01533, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,9e-07,2e-06,4e-06 2e-05,0.0004,0.35,0.55,0.63 0.67,0.71,0.75,0.92), mean=0.299, stddev=0.251], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.33,0.35,0.40 0.50,0.63,0.70,0.77,0.81 0.88,0.96,1.0,1.4), mean=0.686, stddev=0.134], bias-{mean,stddev}=0.003029,0.04038, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000236153, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0293, w_fc-rms=0.01387, w_oc-rms=0.03318, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641335, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.45,0.46,0.50,0.52,0.57 0.61,0.66,0.70,0.80), mean=0.502, stddev=0.0543], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0184] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641335, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.46,0.48,0.50,0.52,0.55 0.59,0.63,0.65,0.74), mean=0.503, stddev=0.0423], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0179] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00845672, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.80,-0.69,-0.46 -0.29,-0.13,9e-05,0.16,0.32 0.53,0.74,0.77,0.87), mean=0.0113, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.30,0.39 0.44,0.51,0.61,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.703, stddev=0.235] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641335, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.43 0.44,0.45,0.50,0.50,0.52 0.54,0.56,0.59,0.70), mean=0.485, stddev=0.0355], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0199] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00641335, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.55,-0.43,-0.31 -0.18,-0.08,6e-05,0.10,0.22 0.38,0.51,0.55,0.67), mean=0.00934, stddev=0.189], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.55,0.60,0.70 0.75,0.83,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.899, stddev=0.104] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.90131e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.69174e-05, count-zeroing-boundaries=260055
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.204959
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000236153, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03945, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.44,0.48,0.54 0.56,0.59,0.87,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.862, stddev=0.258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0007,0.0009,0.001 0.002,0.008,0.58,0.83,0.96 1.1,1.3,1.5,1.6), mean=0.493, stddev=0.402], bias-{mean,stddev}=0.0006991,0.2181, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000236153, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01301, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.25,0.26 0.27,0.30,0.34,0.41,0.46 0.50,0.55,0.56,0.61), mean=0.356, stddev=0.0736], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.38,0.41 0.43,0.45,0.46,0.51), mean=0.281, stddev=0.0945], bias-{mean,stddev}=0.001034,0.007012, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.67e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.06,0.09,0.11,0.13 0.13,0.15,0.16,0.21), mean=0.0867, stddev=0.0316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.18,0.21 0.27,0.34,0.48,0.58,0.61 0.65,0.67,0.68,0.74), mean=0.463, stddev=0.13], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.12,0.13 0.15,0.17,0.18,0.20), mean=0.107, stddev=0.0215], oderiv-count=992128
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29088.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.05,0.06,0.09,0.11,0.13 0.14,0.15,0.16,0.20), mean=0.0876, stddev=0.0317], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.10 0.11,0.12,0.14,0.16,0.18 0.18,0.20,0.20,0.23), mean=0.143, stddev=0.0253]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000236153, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00931, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.21,0.26 0.29,0.31,0.36,0.42,0.44 0.46,0.48,0.50,0.53), mean=0.362, stddev=0.0619], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.15,0.16,0.19,0.24,0.28 0.31,0.34,0.36,0.45), mean=0.206, stddev=0.0503], bias-{mean,stddev}=-0.02088,0.024, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.03e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.21,0.24 0.25,0.28,0.31,0.34,0.36 0.37,0.39,0.40,0.51), mean=0.31, stddev=0.0435], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.36,0.37 0.38,0.40,0.42,0.44,0.46 0.47,0.48,0.49,0.53), mean=0.421, stddev=0.0288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0268, stddev=0.00214], oderiv-count=952960
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26667.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.22,0.24 0.26,0.28,0.32,0.35,0.36 0.38,0.39,0.41,0.52), mean=0.315, stddev=0.0434], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.36,0.38,0.46 0.51,0.56,0.62,0.69,0.73 0.77,0.80,0.82,0.99), mean=0.621, stddev=0.0934]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000236153, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0221, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.29,0.30,0.32 0.35,0.39,0.52,0.69,0.78 0.83,0.86,0.89,1.3), mean=0.541, stddev=0.157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.65,0.68,0.74 0.77,0.81,0.89,1.1,1.3 1.5,1.6,1.8,2.2), mean=0.979, stddev=0.241], bias-{mean,stddev}=0.0194,0.02437, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000236153, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.09441, w_fc-rms=0.05034, w_oc-rms=0.06253, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647941, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.57,0.60 0.62,0.65,0.70,0.75,0.78 0.80,0.82,0.84,0.87), mean=0.701, stddev=0.0612], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.15,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.174, stddev=0.0214] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647941, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.53,0.56 0.58,0.61,0.67,0.72,0.76 0.80,0.84,0.85,0.89), mean=0.671, stddev=0.0711], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.13 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.177, stddev=0.0223] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0309382, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.83,-0.78,-0.62 -0.43,-0.30,-0.002,0.29,0.41 0.55,0.71,0.83,0.89), mean=-0.00908, stddev=0.347], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.24 0.30,0.36,0.43,0.47,0.50 0.51,0.53,0.54,0.57), mean=0.411, stddev=0.0794] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647941, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.49,0.51,0.54 0.56,0.59,0.62,0.67,0.69 0.71,0.75,0.77,0.83), mean=0.626, stddev=0.0528], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.15,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.18, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00647941, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.72,-0.68,-0.52 -0.36,-0.25,-0.01,0.23,0.34 0.48,0.63,0.71,0.82), mean=-0.00877, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.37,0.41 0.49,0.58,0.66,0.71,0.73 0.75,0.77,0.77,0.79), mean=0.635, stddev=0.0944] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221134
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.204959
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000236153, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08592, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.3,1.7,2.5,2.6 2.6,2.7,2.7,2.9), mean=1.87, stddev=0.574], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.98,1.0,1.1 1.1,1.2,1.3,1.5,1.7 1.9,2.0,2.1,2.2), mean=1.36, stddev=0.25], bias-{mean,stddev}=-0.02905,0.5193, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000236153, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0442, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.59,0.60,0.62 0.64,0.66,0.70,0.75,0.78 0.81,0.86,0.93,2.3), mean=0.707, stddev=0.0888], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.7,2.7,2.8,2.9), mean=1.95, stddev=0.552], bias-{mean,stddev}=7.054e-09,0.02974, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0169, stddev=0.0137], oderiv-count=618880
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/268.mdl exp/nnet3/tdnn_lstm1c_sp/269.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.09852 tdnn2.affine:4.96505 lstm1.W_all:3.95712 lstm1.lstm_nonlin:0.089332 lstm1.W_rp:1.54517 tdnn3.affine:3.3446 tdnn4.affine:3.75848 lstm2.W_all:2.83789 lstm2.lstm_nonlin:0.0456435 lstm2.W_rp:1.13316 tdnn5.affine:2.80015 tdnn6.affine:3.11872 lstm3.W_all:3.29261 lstm3.lstm_nonlin:0.084215 lstm3.W_rp:1.40303 output.affine:3.36179 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.5286 tdnn2.affine:11.541 lstm1.W_all:21.6832 lstm1.lstm_nonlin:1.71282 lstm1.W_rp:15.6874 tdnn3.affine:8.60846 tdnn4.affine:8.53874 lstm2.W_all:17.9225 lstm2.lstm_nonlin:1.05781 lstm2.W_rp:14.9263 tdnn5.affine:8.28923 tdnn6.affine:8.41612 lstm3.W_all:25.741 lstm3.lstm_nonlin:2.82595 lstm3.W_rp:32.6858 output.affine:32.7192 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.375004 tdnn2.affine:0.426243 lstm1.W_all:0.18202 lstm1.lstm_nonlin:0.0522883 lstm1.W_rp:0.0983244 tdnn3.affine:0.387322 tdnn4.affine:0.439826 lstm2.W_all:0.158247 lstm2.lstm_nonlin:0.0436103 lstm2.W_rp:0.0759006 tdnn5.affine:0.338343 tdnn6.affine:0.369822 lstm3.W_all:0.127765 lstm3.lstm_nonlin:0.0299735 lstm3.W_rp:0.0430684 output.affine:0.102827 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:47:29 KST 2020, elapsed time 0 seconds
