# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/339.mdl exp/nnet3/tdnn_lstm1c_sp/340.mdl 
# Started at Thu Jul 30 12:15:42 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/339.mdl exp/nnet3/tdnn_lstm1c_sp/340.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00015148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00951, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.005,0.01,0.17,0.21,0.22 0.25,0.28,0.29,0.33), mean=0.14, stddev=0.0862], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.07,0.20,0.26,0.31 0.38,0.43,0.47,0.53), mean=0.19, stddev=0.105], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.009,0.01,0.01 0.02,0.03,0.11,0.27,0.38 0.47,0.56,0.60,0.67), mean=0.158, stddev=0.149], bias-{mean,stddev}=0.0001436,0.0135, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2.15e+05, self-repaired-proportion=5.68654, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.06,-0.02,-0.01,-0.003 -0.0008,-3e-05,0.04,0.09,0.11 0.14,0.16,0.17,0.25), mean=0.0457, stddev=0.0492], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.59,-0.43,-0.30,-0.17 -0.10,0.02,0.39,0.63,0.76 0.86,0.95,0.97,1.2), mean=0.346, stddev=0.331], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.02,0.47,0.84,1.1 1.4,1.7,1.9,2.4), mean=0.501, stddev=0.469], oderiv-count=57728
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-3470.98, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00015148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004007, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.14,0.15,0.16,0.17,0.17 0.18,0.19,0.20,0.21), mean=0.158, stddev=0.014], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.003,0.006,0.10,0.12,0.12 0.13,0.14,0.15,0.17), mean=0.078, stddev=0.0476], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.04,0.09,0.19,0.27 0.34,0.41,0.43,0.51), mean=0.121, stddev=0.102], bias-{mean,stddev}=-0.0006442,0.006828, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.74e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.11,0.15 0.17,0.20,0.25,0.29,0.32 0.35,0.40,0.42,0.57), mean=0.249, stddev=0.063], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.28,0.31,0.33 0.36,0.38,0.44,0.50,0.53 0.56,0.59,0.60,0.71), mean=0.441, stddev=0.0685]
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-3412, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00015148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002436, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-09,7e-08,2e-07,1e-06 3e-05,0.02,0.05,0.08,0.10 0.11,0.12,0.13,0.21), mean=0.0514, stddev=0.0349], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.05,0.12,0.13,0.14 0.15,0.15,0.16,0.19), mean=0.104, stddev=0.039], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,8e-08,1e-07 2e-07,0.02,0.06,0.12,0.18 0.25,0.32,0.35,0.45), mean=0.0795, stddev=0.0776], bias-{mean,stddev}=1.469e-05,0.0009382, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00015148, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0009702, w_fc-rms=0.001, w_oc-rms=0.002529, count=646, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00292651, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-14,-9.1,-7.0,-4.6 -2.4,-0.97,0.50,3.5,6.1 7.7,10,11,21), mean=1.17, stddev=3.72], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.5,-4.0,-3.1,-2.0 -1.2,-0.27,0.32,1.6,2.6 3.9,5.6,6.3,12), mean=0.667, stddev=1.81] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00292651, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-6.1,-4.7,-3.3 -2.2,-0.59,0.64,3.2,4.5 6.1,9.4,11,22), mean=1.31, stddev=3.31], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.7,-4.1,-3.4,-2.2 -1.1,-0.40,0.25,1.1,1.9 2.7,3.8,4.3,5.9), mean=0.328, stddev=1.46] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-3.59211, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-175,-63,-53,-38 -29,-17,-0.07,16,30 42,52,61,93), mean=-0.289, stddev=24.6], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-33,-27,-23,-19 -14,-6.6,1.0,17,26 34,45,62,125), mean=5.74, stddev=17.9] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00292651, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-18,-10,-8.7,-5.5 -3.1,-1.5,0.50,4.0,6.3 9.0,11,14,36), mean=1.31, stddev=4.62], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.4,-4.9,-3.6,-2.0 -1.3,-0.51,0.25,2.0,3.4 4.4,5.8,6.3,14), mean=0.735, stddev=2.08] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00292651, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-97,-39,-30,-23 -17,-8.7,-0.02,8.6,16 24,32,38,58), mean=-0.164, stddev=14.9], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-23,-10,-7.0,-4.4 -3.2,-0.86,1.4,6.3,10 13,16,18,28), mean=2.78, stddev=5.61] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.28e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=-0.00078125, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.046875, count-zeroing-boundaries=192
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.241322
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00015148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003364, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.07,0.10,0.11 0.11,0.12,0.12,0.13), mean=0.072, stddev=0.0265], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0001,0.0001,0.0003 0.001,0.04,0.05,0.07,0.07 0.08,0.09,0.10,0.12), mean=0.0484, stddev=0.0246], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.08,0.15 0.19,0.22,0.23,0.42), mean=0.0336, stddev=0.069], bias-{mean,stddev}=-3.739e-05,0.003388, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00015148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004084, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.08,0.08,0.09 0.09,0.10,0.11,0.13,0.14 0.15,0.16,0.16,0.19), mean=0.112, stddev=0.0199], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.09,0.12,0.13 0.14,0.14,0.15,0.17), mean=0.0871, stddev=0.0329], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-09,3e-08,3e-08,4e-08 6e-08,9e-08,1e-05,0.13,0.22 0.28,0.33,0.35,0.59), mean=0.0578, stddev=0.0983], bias-{mean,stddev}=9.652e-05,0.002394, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-3235.05, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00015148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002966, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.10 0.11,0.11,0.12,0.12,0.13 0.13,0.14,0.14,0.14), mean=0.117, stddev=0.00893], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.05,0.05,0.05 0.06,0.06,0.07,0.07,0.08 0.08,0.09,0.09,0.10), mean=0.0669, stddev=0.0102], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.08,0.14,0.19 0.23,0.27,0.30,0.39), mean=0.0979, stddev=0.0644], bias-{mean,stddev}=-9.43e-05,0.003166, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.92e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,-0.03,0.009,0.04 0.07,0.11,0.17,0.23,0.27 0.30,0.34,0.37,0.51), mean=0.171, stddev=0.0816], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.18,0.21,0.25 0.31,0.35,0.43,0.53,0.58 0.62,0.68,0.69,0.75), mean=0.438, stddev=0.109], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.03,0.03,0.03 0.04,0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.09), mean=0.0464, stddev=0.00878], oderiv-count=111104
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-3058.11, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00015148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001698, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-07,5e-07,2e-06 5e-06,0.0001,0.03,0.06,0.07 0.08,0.09,0.10,0.19), mean=0.0321, stddev=0.0291], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.04,0.08,0.09,0.10 0.10,0.11,0.11,0.12), mean=0.073, stddev=0.0259], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,6e-08,6e-08,9e-08 2e-05,0.01,0.04,0.08,0.13 0.18,0.23,0.26,0.31), mean=0.0538, stddev=0.0557], bias-{mean,stddev}=4.694e-05,0.001017, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00015148, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0005817, w_fc-rms=0.0006332, w_oc-rms=0.001308, count=913, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00190839, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.7,-3.0,-2.5,-1.9 -1.1,-0.18,0.50,1.6,2.6 3.3,4.5,4.8,21), mean=0.703, stddev=1.73], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.0,-1.8,-1.4,-0.82 -0.21,0.15,0.25,0.98,1.4 1.9,2.4,2.8,4.4), mean=0.454, stddev=0.862] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00190839, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.4,-2.4,-1.6,-0.93 -0.35,0.38,0.50,1.7,2.5 3.5,4.3,5.1,10), mean=0.931, stddev=1.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-1.3,-0.84,-0.45 -0.18,0.16,0.25,0.72,1.0 1.4,1.9,2.3,4.2), mean=0.382, stddev=0.613] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.125886, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-100,-28,-21,-16 -9.5,-4.2,0.01,5.3,11 15,21,26,42), mean=0.158, stddev=10.1], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-56,-15,-11,-6.7 -3.5,0.20,1.0,9.7,14 19,23,25,30), mean=3.64, stddev=8.01] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00190839, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.0,-3.7,-3.2,-2.4 -1.6,-0.32,0.50,1.8,2.7 3.5,4.1,4.7,23), mean=0.628, stddev=1.92], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-2.3,-1.4,-0.83 -0.35,0.10,0.25,1.0,1.8 2.3,3.0,3.7,4.7), mean=0.501, stddev=0.959] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00190839, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-81,-15,-12,-8.6 -6.3,-3.1,-0.01,2.8,5.9 9.3,13,14,19), mean=-0.114, stddev=6.25], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-55,-4.3,-3.4,-1.7 -0.42,0.92,1.0,3.8,5.8 6.8,8.4,9.2,14), mean=1.83, stddev=3.6] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.28e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=-0.000390625, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.0103359, count-zeroing-boundaries=193
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.241322
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00015148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002293, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.05,0.07,0.07 0.07,0.07,0.08,0.08), mean=0.0502, stddev=0.0145], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0001,0.0001,0.0002 0.0004,0.001,0.04,0.05,0.05 0.06,0.06,0.06,0.10), mean=0.0299, stddev=0.0217], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,9e-07,0.06,0.10 0.13,0.15,0.16,0.20), mean=0.026, stddev=0.0454], bias-{mean,stddev}=-0.0002611,0.002686, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00015148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003336, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.08,0.09,0.10,0.11 0.12,0.13,0.13,0.14), mean=0.0921, stddev=0.0139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.07,0.09,0.10 0.11,0.11,0.11,0.12), mean=0.073, stddev=0.0216], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,4e-08,5e-08 7e-08,1e-07,0.001,0.11,0.17 0.22,0.27,0.29,0.35), mean=0.0517, stddev=0.0775], bias-{mean,stddev}=-2.255e-05,0.001645, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-2881.16, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00015148, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002487, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.08 0.08,0.09,0.10,0.11,0.11 0.12,0.12,0.12,0.13), mean=0.0976, stddev=0.0111], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.05,0.06,0.06,0.07 0.07,0.07,0.07,0.08), mean=0.0563, stddev=0.00702], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.04,0.06,0.12,0.16 0.20,0.23,0.25,0.31), mean=0.0807, stddev=0.0559], bias-{mean,stddev}=-0.0001678,0.002751, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.35e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.11,-0.06,-0.03,0.02 0.06,0.10,0.17,0.25,0.29 0.32,0.35,0.36,0.45), mean=0.172, stddev=0.0916], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.17,0.21,0.25 0.29,0.34,0.42,0.49,0.52 0.56,0.59,0.60,0.62), mean=0.414, stddev=0.0924]
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-2704.21, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00015148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001858, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.01 0.01,0.02,0.03,0.06,0.09 0.09,0.10,0.11,0.12), mean=0.039, stddev=0.0269], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.06,0.08,0.10,0.12 0.12,0.13,0.13,0.14), mean=0.082, stddev=0.0214], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,1e-05 0.009,0.01,0.03,0.09,0.15 0.20,0.26,0.28,0.33), mean=0.0568, stddev=0.0629], bias-{mean,stddev}=4.757e-05,0.0005303, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00015148, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0007737, w_fc-rms=0.0007602, w_oc-rms=0.002042, count=1.18e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00135138, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.4,-3.8,-3.2,-2.6 -2.1,-1.2,0.20,1.7,2.8 3.6,4.8,5.4,16), mean=0.329, stddev=2.03], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-0.93,-0.83,-0.52 -0.19,0.16,0.71,1.3,1.6 1.8,2.2,2.8,3.6), mean=0.723, stddev=0.738] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00135138, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.7,-3.4,-2.9,-1.8 -1.1,-0.38,1.2,2.8,3.6 4.4,5.4,6.1,10), mean=1.24, stddev=1.96], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.4,-1.5,-1.3,-0.94 -0.54,-0.29,0.27,0.85,1.1 1.4,1.7,1.9,2.4), mean=0.28, stddev=0.702] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=1.06076, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-61,-35,-30,-25 -19,-11,0.31,13,18 27,33,37,137), mean=0.711, stddev=16.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-24,-13,-12,-8.3 -5.1,-1.5,4.0,11,15 17,22,26,38), mean=4.4, stddev=7.95] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00135138, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.2,-5.4,-4.5,-3.7 -2.7,-1.5,0.70,2.8,4.4 5.7,7.4,8.5,11), mean=0.746, stddev=2.86], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.6,-2.0,-1.2,-0.81 -0.43,-0.09,0.63,1.3,1.7 2.0,2.6,2.9,4.2), mean=0.597, stddev=0.902] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00135138, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-43,-24,-20,-17 -13,-8.2,0.72,9.1,13 18,24,29,102), mean=0.73, stddev=11.5], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-4.8,-3.3,-2.2 -0.83,0.54,3.7,6.1,7.9 9.7,11,12,17), mean=3.51, stddev=3.56] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.28e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0.00078125, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=-0.00530504, count-zeroing-boundaries=188
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.241322
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00015148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00227, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.07,0.07 0.07,0.08,0.08,0.08), mean=0.0476, stddev=0.0204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.05,0.09), mean=0.0357, stddev=0.00796], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,2e-07 3e-07,7e-07,0.005,0.06,0.10 0.12,0.14,0.16,0.18), mean=0.0298, stddev=0.0423], bias-{mean,stddev}=9.728e-06,0.01572, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00015148, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003139, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.06,0.07 0.08,0.09,0.10,0.19), mean=0.0474, stddev=0.0177], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.08,0.11,0.18,0.19 0.20,0.21,0.21,0.22), mean=0.135, stddev=0.0494], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,3e-07 4e-07,7e-07,0.003,0.21,0.28 0.33,0.36,0.38,0.42), mean=0.0801, stddev=0.12], bias-{mean,stddev}=1.062e-10,0.0007539, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.03,0.03 0.04,0.05,0.05,0.37), mean=0.0164, stddev=0.0182], oderiv-count=39680

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.76871 tdnn2.affine:3.61265 lstm1.W_all:2.83248 lstm1.lstm_nonlin:0.0658412 lstm1.W_rp:1.23819 tdnn3.affine:2.60159 tdnn4.affine:2.67249 lstm2.W_all:1.97501 lstm2.lstm_nonlin:0.0356907 lstm2.W_rp:0.844222 tdnn5.affine:2.1252 tdnn6.affine:2.24104 lstm3.W_all:2.16065 lstm3.lstm_nonlin:0.0527173 lstm3.W_rp:0.872333 output.affine:2.3221 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8378 tdnn2.affine:10.7184 lstm1.W_all:20.628 lstm1.lstm_nonlin:2.44014 lstm1.W_rp:15.406 tdnn3.affine:8.40613 tdnn4.affine:7.79987 lstm2.W_all:17.0172 lstm2.lstm_nonlin:1.6707 lstm2.W_rp:14.6473 tdnn5.affine:8.00544 tdnn6.affine:7.75525 lstm3.W_all:24.1177 lstm3.lstm_nonlin:3.08456 lstm3.W_rp:35.1875 output.affine:32.2882 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.29295 tdnn2.affine:0.336791 lstm1.W_all:0.137369 lstm1.lstm_nonlin:0.0270449 lstm1.W_rp:0.0803802 tdnn3.affine:0.30671 tdnn4.affine:0.340948 lstm2.W_all:0.116076 lstm2.lstm_nonlin:0.0213182 lstm2.W_rp:0.0576262 tdnn5.affine:0.263207 tdnn6.affine:0.287384 lstm3.W_all:0.0895779 lstm3.lstm_nonlin:0.0170932 lstm3.W_rp:0.0247674 output.affine:0.0718265 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:15:43 KST 2020, elapsed time 1 seconds
