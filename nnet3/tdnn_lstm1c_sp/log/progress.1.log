# nnet3-info exp/nnet3/tdnn_lstm1c_sp/1.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/0.mdl exp/nnet3/tdnn_lstm1c_sp/1.mdl 
# Started at Thu Jul 30 10:01:36 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/1.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.0003, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0355, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.50,0.51,0.51 0.52,0.54,0.61,0.67,0.70 0.74,0.79,0.83,0.93), mean=0.61, stddev=0.0736], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.66,0.67,0.67,0.68 0.69,0.71,0.76,0.83,0.93 1.1,1.3,1.3,1.4), mean=0.798, stddev=0.137], bias-{mean,stddev}=0.009391,0.5594, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0.74677, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,7e-07,0.10,0.62,0.96 1.3,1.6,1.7,2.4), mean=0.325, stddev=0.45], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,1e-05,0.62,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.522, stddev=0.449], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.11 0.12,0.13,0.23,0.41,0.44 0.47,0.48,0.51,0.67), mean=0.269, stddev=0.137], oderiv-count=1.10976e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=18596.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,8e-08,0.09,0.44,0.71 0.93,1.2,1.3,1.7), mean=0.24, stddev=0.326], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,6e-05,0.12,0.15,0.16 0.17,0.17,0.17,0.22), mean=0.0859, stddev=0.0669]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.0003, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01634, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.59,0.60 0.61,0.62,0.64,0.67,0.68 0.70,0.73,0.75,0.80), mean=0.644, stddev=0.0343], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.30 0.30,0.31,0.37,0.41,0.44 0.47,0.49,0.50,0.54), mean=0.369, stddev=0.0533], bias-{mean,stddev}=0.0339,0.5688, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0.200613, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.002,0.007,0.02 0.05,0.10,0.35,0.80,1.1 1.4,1.6,1.7,2.0), mean=0.473, stddev=0.43], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.003,0.02,0.04 0.09,0.20,0.52,0.82,0.92 0.95,0.97,0.98,0.99), mean=0.509, stddev=0.3], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.03,0.04,0.07 0.11,0.23,0.29,0.38), mean=0.0402, stddev=0.0476], oderiv-count=1.14192e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=18176.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.007,0.03,0.05 0.09,0.16,0.35,0.65,0.87 1.0,1.2,1.3,1.5), mean=0.418, stddev=0.303], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.10,0.17,0.25 0.31,0.41,0.54,0.65,0.70 0.75,0.77,0.79,0.84), mean=0.523, stddev=0.152]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.0003, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03479, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.83,0.83,0.84 0.85,0.86,0.88,0.91,0.92 0.94,0.95,0.97,1.0), mean=0.887, stddev=0.0286], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.7), mean=1.59, stddev=0.0266], bias-{mean,stddev}=0.004227,0.8711, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.0003, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.9069, w_fc-rms=0.8769, w_oc-rms=0.8636, count=1.43e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0175071, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.12,0.16,0.19 0.26,0.33,0.52,0.69,0.79 0.84,0.90,0.92,0.98), mean=0.516, stddev=0.199], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.07,0.10 0.13,0.15,0.19,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.18, stddev=0.0398] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0200043, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.09,0.18 0.24,0.34,0.50,0.69,0.80 0.86,0.91,0.93,0.98), mean=0.511, stddev=0.204], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.08 0.11,0.15,0.19,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.179, stddev=0.0435] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0863021, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.98,-0.93,-0.90,-0.84 -0.69,-0.47,0.03,0.57,0.76 0.84,0.90,0.93,0.98), mean=0.0238, stddev=0.519], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.08,0.10,0.16 0.23,0.33,0.53,0.64,0.68 0.69,0.71,0.72,0.74), mean=0.486, stddev=0.165] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0144893, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.10,0.12,0.17 0.25,0.32,0.50,0.69,0.78 0.84,0.88,0.91,0.97), mean=0.506, stddev=0.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.06,0.07,0.09 0.12,0.15,0.19,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.179, stddev=0.04] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0400193, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.97,-0.88,-0.82,-0.67 -0.49,-0.36,0.02,0.38,0.57 0.69,0.83,0.86,0.97), mean=0.0211, stddev=0.411], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.09,0.17,0.25 0.40,0.56,0.75,0.87,0.92 0.95,0.97,0.98,0.99), mean=0.705, stddev=0.203] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=296480
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.0003, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04053, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.81,0.83,0.85,0.87 0.88,0.89,0.92,0.95,0.97 0.98,0.99,1.0,1.0), mean=0.924, stddev=0.0341], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.58,0.60 0.61,0.62,0.65,0.68,0.70 0.72,0.73,0.76,0.81), mean=0.652, stddev=0.0379], bias-{mean,stddev}=0.08545,0.8895, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.0003, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02396, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.52,0.52,0.52 0.53,0.54,0.69,0.74,0.78 0.80,0.82,0.84,0.90), mean=0.663, stddev=0.093], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.48,0.49,0.50 0.51,0.52,0.54,0.57,0.59 0.60,0.62,0.64,0.68), mean=0.545, stddev=0.0324], bias-{mean,stddev}=0.0002632,0.5516, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.6e+05, self-repaired-proportion=0.658754, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,1e-05,0.23,0.89,1.3 1.6,2.1,2.2,2.8), mean=0.459, stddev=0.571], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0002,0.40,0.92,0.97 0.99,1.0,1.0,1.0), mean=0.442, stddev=0.404], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.04,0.26,0.27 0.28,0.29,0.30,0.33), mean=0.123, stddev=0.111], oderiv-count=1.11309e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=16916.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,1e-06,0.29,0.71,0.91 1.1,1.4,1.5,2.0), mean=0.378, stddev=0.396], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0002,0.45,0.57,0.61 0.64,0.67,0.68,0.78), mean=0.337, stddev=0.255]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.0003, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01554, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.56,0.58 0.59,0.59,0.61,0.63,0.64 0.65,0.67,0.68,0.69), mean=0.613, stddev=0.0245], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.30 0.31,0.31,0.36,0.38,0.40 0.41,0.43,0.43,0.47), mean=0.353, stddev=0.0347], bias-{mean,stddev}=-0.02395,0.5215, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.44e+05, self-repaired-proportion=0.146848, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,0.0003,0.004,0.02 0.06,0.11,0.33,0.71,0.93 1.2,1.5,1.7,2.0), mean=0.429, stddev=0.376], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.001,0.01,0.04 0.10,0.19,0.45,0.75,0.85 0.91,0.96,0.98,0.99), mean=0.464, stddev=0.274], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.01,0.01,0.02,0.03,0.06 0.12,0.19,0.24,0.29), mean=0.0313, stddev=0.0426], oderiv-count=1.02458e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=15657.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-11,0.0002,0.008,0.07 0.10,0.16,0.35,0.60,0.75 0.91,1.1,1.3,1.4), mean=0.394, stddev=0.269], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.006,0.09,0.26 0.32,0.42,0.56,0.68,0.74 0.78,0.81,0.84,1.0), mean=0.543, stddev=0.167]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.0003, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03462, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.82,0.83,0.84 0.85,0.86,0.88,0.90,0.91 0.93,0.94,0.95,0.98), mean=0.882, stddev=0.0258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.5,1.6,1.6,1.6,1.6 1.6,1.6,1.6,1.7), mean=1.58, stddev=0.0246], bias-{mean,stddev}=0.02873,0.8753, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.0003, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.9343, w_fc-rms=0.8967, w_oc-rms=0.9008, count=1.31e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0250558, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.17,0.20 0.25,0.34,0.53,0.71,0.80 0.85,0.92,0.94,0.97), mean=0.529, stddev=0.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.10 0.12,0.15,0.19,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.177, stddev=0.0411] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0262461, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.13,0.15,0.23 0.28,0.34,0.50,0.69,0.78 0.87,0.92,0.96,0.98), mean=0.521, stddev=0.195], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.05,0.08 0.12,0.15,0.19,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.179, stddev=0.0432] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0860971, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.93,-0.89,-0.82 -0.70,-0.50,0.03,0.51,0.73 0.85,0.90,0.93,0.98), mean=0.0078, stddev=0.516], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.11,0.16 0.23,0.34,0.51,0.60,0.64 0.67,0.68,0.70,0.77), mean=0.472, stddev=0.154] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0223058, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.13,0.15 0.22,0.32,0.52,0.71,0.82 0.86,0.89,0.92,0.99), mean=0.516, stddev=0.212], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.04,0.06,0.09 0.11,0.13,0.19,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.173, stddev=0.0435] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0434607, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.96,-0.92,-0.83,-0.68 -0.54,-0.36,0.03,0.37,0.56 0.69,0.84,0.87,0.99), mean=0.00584, stddev=0.413], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.08,0.13,0.22 0.41,0.52,0.71,0.85,0.91 0.93,0.96,0.97,0.99), mean=0.677, stddev=0.205] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=261783
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.0003, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03998, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.83,0.84,0.85,0.86 0.87,0.88,0.91,0.94,0.96 0.97,0.98,0.99,1.0), mean=0.911, stddev=0.0333], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.58,0.59 0.60,0.61,0.64,0.67,0.69 0.71,0.73,0.74,0.82), mean=0.644, stddev=0.036], bias-{mean,stddev}=-0.033,0.8706, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.0003, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02253, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.51,0.51,0.52 0.53,0.54,0.64,0.69,0.71 0.73,0.76,0.77,0.80), mean=0.625, stddev=0.0716], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.47 0.48,0.49,0.51,0.53,0.55 0.56,0.57,0.59,0.66), mean=0.513, stddev=0.0265], bias-{mean,stddev}=0.01543,0.5405, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.19e+05, self-repaired-proportion=0.654899, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,4e-06,0.33,0.96,1.3 1.6,2.0,2.1,2.9), mean=0.497, stddev=0.577], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0001,0.53,0.93,0.97 0.99,1.0,1.0,1.0), mean=0.464, stddev=0.412], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.02,0.03,0.21,0.22 0.23,0.24,0.24,0.26), mean=0.0988, stddev=0.0934], oderiv-count=988864
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=14397.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,2e-07,0.33,0.75,0.97 1.1,1.4,1.5,2.0), mean=0.402, stddev=0.414], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,8e-05,0.49,0.60,0.64 0.68,0.73,0.74,0.79), mean=0.353, stddev=0.273]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.0003, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0151, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.53,0.55,0.57 0.57,0.58,0.60,0.61,0.62 0.63,0.64,0.65,0.67), mean=0.596, stddev=0.0203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.30 0.31,0.31,0.34,0.37,0.38 0.39,0.40,0.42,0.49), mean=0.343, stddev=0.0298], bias-{mean,stddev}=0.001552,0.5438, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.42e+05, self-repaired-proportion=0.146154, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,5e-05,0.0003,0.01 0.08,0.17,0.37,0.77,1.0 1.3,1.5,1.8,2.5), mean=0.475, stddev=0.402], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.0003,0.001,0.03 0.11,0.22,0.47,0.74,0.85 0.92,0.95,0.98,0.99), mean=0.472, stddev=0.268], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.008,0.009 0.01,0.01,0.01,0.02,0.05 0.13,0.19,0.20,0.22), mean=0.0261, stddev=0.0401], oderiv-count=939200
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=13138.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-30,6e-06,0.0001,0.06 0.12,0.19,0.38,0.63,0.82 0.99,1.2,1.3,1.8), mean=0.429, stddev=0.289], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-16,0.0008,0.004,0.24 0.39,0.46,0.60,0.72,0.78 0.86,0.90,0.93,1.1), mean=0.58, stddev=0.184]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.0003, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03483, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.79,0.82,0.83,0.84 0.85,0.86,0.89,0.91,0.92 0.94,0.95,0.96,0.99), mean=0.887, stddev=0.0292], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.5 1.6,1.6,1.6,1.6,1.6 1.6,1.6,1.7,1.7), mean=1.59, stddev=0.0269], bias-{mean,stddev}=-0.003435,0.8726, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.0003, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.8317, w_fc-rms=0.8579, w_oc-rms=0.898, count=1.18e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0108558, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.15,0.21 0.26,0.35,0.53,0.70,0.77 0.83,0.89,0.90,0.95), mean=0.522, stddev=0.188], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.10 0.13,0.15,0.19,0.20,0.21 0.22,0.22,0.22,0.23), mean=0.176, stddev=0.0356] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0224595, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.13,0.15,0.21 0.27,0.36,0.54,0.70,0.78 0.83,0.93,0.94,0.96), mean=0.532, stddev=0.193], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.09 0.13,0.15,0.19,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.175, stddev=0.0391] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.105799, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.96,-0.91,-0.85 -0.74,-0.48,0.02,0.47,0.66 0.83,0.91,0.92,0.96), mean=-0.007, stddev=0.505], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.07,0.10,0.14 0.21,0.31,0.47,0.56,0.59 0.62,0.66,0.67,0.77), mean=0.437, stddev=0.146] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0141459, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.10,0.15,0.21 0.27,0.36,0.53,0.71,0.81 0.86,0.89,0.92,0.96), mean=0.533, stddev=0.196], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.07,0.09 0.11,0.14,0.18,0.20,0.21 0.21,0.21,0.22,0.22), mean=0.167, stddev=0.0369] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.036786, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.96,-0.91,-0.81,-0.66 -0.51,-0.34,-0.009,0.32,0.51 0.64,0.78,0.89,0.99), mean=-0.00338, stddev=0.388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.08,0.13,0.27 0.40,0.50,0.68,0.82,0.89 0.93,0.96,0.97,0.98), mean=0.657, stddev=0.195] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221002
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.0003, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0535, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.1,1.2,1.2,1.3,1.3 1.3,1.4,1.4,1.4), mean=1.22, stddev=0.0743], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.60,0.61,0.63 0.67,0.73,0.84,0.97,1.0 1.1,1.1,1.2,1.4), mean=0.852, stddev=0.138], bias-{mean,stddev}=0.08078,0.8199, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.0003, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02644, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.15,0.17,0.22 0.26,0.31,0.39,0.48,0.54 0.61,0.71,0.83,1.8), mean=0.404, stddev=0.137], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.88,0.92,0.94 1.0,1.1,1.2,1.3,1.4 1.5,1.5,1.6,1.6), mean=1.2, stddev=0.16], bias-{mean,stddev}=5.985e-10,0.002642, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.006,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.41), mean=0.0169, stddev=0.0137], oderiv-count=624000
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/0.mdl exp/nnet3/tdnn_lstm1c_sp/1.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:16.853 tdnn2.affine:17.5901 lstm1.W_all:10.527 lstm1.lstm_nonlin:4.96562 lstm1.W_rp:6.15756 tdnn3.affine:17.7043 tdnn4.affine:16.3588 lstm2.W_all:9.92576 lstm2.lstm_nonlin:5.10375 lstm2.W_rp:5.52676 tdnn5.affine:16.9801 tdnn6.affine:16.5191 lstm3.W_all:10.8686 lstm3.lstm_nonlin:4.94713 lstm3.W_rp:9.7199 output.affine:19.5544 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:18.9552 tdnn2.affine:19.6312 lstm1.W_all:56.6998 lstm1.lstm_nonlin:34.862 lstm1.W_rp:20.7291 tdnn3.affine:19.7726 tdnn4.affine:18.373 lstm2.W_all:56.706 lstm2.lstm_nonlin:35.9723 lstm2.W_rp:20.3327 tdnn5.affine:18.9185 tdnn6.affine:18.402 lstm3.W_all:56.7788 lstm3.lstm_nonlin:34.0844 lstm3.W_rp:23.7374 output.affine:19.5544 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.511896 tdnn2.affine:0.52785 lstm1.W_all:0.163658 lstm1.lstm_nonlin:0.124701 lstm1.W_rp:0.267615 tdnn3.affine:0.541824 tdnn4.affine:0.514114 lstm2.W_all:0.153908 lstm2.lstm_nonlin:0.124265 lstm2.W_rp:0.243072 tdnn5.affine:0.524507 tdnn6.affine:0.508112 lstm3.W_all:0.168862 lstm3.lstm_nonlin:0.126882 lstm3.W_rp:0.43927 output.affine:inf ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:01:37 KST 2020, elapsed time 1 seconds
