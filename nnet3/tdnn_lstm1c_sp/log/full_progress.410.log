# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/409.mdl exp/nnet3/tdnn_lstm1c_sp/410.mdl 
# Started at Thu Jul 30 12:43:38 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/409.mdl exp/nnet3/tdnn_lstm1c_sp/410.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=9.71667e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007892, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.002,0.002 0.003,0.007,0.14,0.17,0.18 0.21,0.22,0.24,0.28), mean=0.116, stddev=0.0725], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.06,0.17,0.22,0.26 0.33,0.36,0.38,0.50), mean=0.157, stddev=0.0888], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.01 0.01,0.02,0.09,0.23,0.32 0.39,0.46,0.52,0.56), mean=0.13, stddev=0.125], bias-{mean,stddev}=0.0003369,0.01068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-436.959, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.71667e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003203, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.11 0.11,0.12,0.12,0.14,0.14 0.14,0.15,0.16,0.16), mean=0.126, stddev=0.0108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0007,0.0009,0.001 0.002,0.004,0.08,0.09,0.10 0.11,0.11,0.12,0.14), mean=0.062, stddev=0.0386], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.03,0.07,0.15,0.22 0.27,0.33,0.35,0.41), mean=0.0956, stddev=0.0829], bias-{mean,stddev}=0.0002946,0.005274, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-445.151, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.71667e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001875, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-09,4e-08,1e-07,7e-07 2e-05,0.02,0.04,0.06,0.08 0.08,0.09,0.10,0.18), mean=0.0399, stddev=0.0264], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.09,0.10,0.11 0.12,0.12,0.13,0.15), mean=0.08, stddev=0.0301], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,7e-08,9e-08 1e-07,0.02,0.04,0.09,0.14 0.19,0.25,0.27,0.33), mean=0.0608, stddev=0.0601], bias-{mean,stddev}=1.691e-05,0.0005876, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.71667e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0007791, w_fc-rms=0.0007221, w_oc-rms=0.001592, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000469017, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.1,-1.1,-0.88,-0.56 -0.28,0.02,0.50,0.85,1.1 1.4,1.6,1.8,2.3), mean=0.441, stddev=0.58], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.63,-0.50,-0.31 -0.12,0.06,0.25,0.52,0.67 0.82,0.98,1.1,1.8), mean=0.279, stddev=0.338] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000469017, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-1.1,-0.85,-0.58 -0.37,-0.07,0.44,0.65,0.92 1.2,1.5,1.6,2.0), mean=0.331, stddev=0.521], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.65,-0.37,-0.25,-0.13 0.02,0.13,0.25,0.42,0.55 0.69,0.91,1.0,1.4), mean=0.279, stddev=0.246] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.611961, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-16,-10,-9.3,-6.6 -5.1,-2.4,-0.001,2.8,5.0 6.6,8.8,10,16), mean=0.0531, stddev=3.98], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-12,-8.3,-5.8,-4.6 -3.3,-1.5,1.0,3.1,4.4 5.6,7.5,8.4,15), mean=0.853, stddev=3.21] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000469017, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.1,-1.6,-1.2,-0.85 -0.57,-0.14,0.50,0.85,1.2 1.5,2.0,2.2,2.5), mean=0.38, stddev=0.706], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-1.1,-0.75,-0.53 -0.29,-0.04,0.25,0.52,0.71 0.87,1.1,1.3,2.2), mean=0.23, stddev=0.429] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.000469017, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.6,-6.5,-6.1,-4.4 -3.2,-1.8,0.002,2.0,3.3 4.3,6.0,7.1,11), mean=0.0457, stddev=2.63], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.7,-2.3,-2.0,-1.6 -1.2,-0.36,0.96,1.6,2.3 2.8,3.2,3.9,5.6), mean=0.678, stddev=1.33] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-4.48e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-672
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.12562
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.71667e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002604, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.05,0.07,0.08 0.08,0.09,0.09,0.10), mean=0.0566, stddev=0.0181], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,5e-05,7e-05,0.0001 0.0006,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0376, stddev=0.0188], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 8e-08,1e-07,3e-07,0.07,0.12 0.15,0.17,0.20,0.23), mean=0.027, stddev=0.0529], bias-{mean,stddev}=-0.0002335,0.00318, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=9.71667e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003132, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.06,0.06,0.07 0.07,0.07,0.08,0.10,0.10 0.11,0.12,0.12,0.14), mean=0.0864, stddev=0.0139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.07,0.09,0.10 0.10,0.11,0.11,0.12), mean=0.0677, stddev=0.0229], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-09,3e-08,3e-08,4e-08 5e-08,8e-08,1e-05,0.10,0.17 0.22,0.26,0.28,0.32), mean=0.0449, stddev=0.0751], bias-{mean,stddev}=2.208e-05,0.001968, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.45e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.06,-0.02,-0.007,0.005 0.02,0.04,0.08,0.13,0.16 0.18,0.20,0.22,0.27), mean=0.0871, stddev=0.0541], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.25,-0.12,-0.04,0.06 0.15,0.25,0.44,0.63,0.73 0.80,0.88,0.90,1.0), mean=0.438, stddev=0.224]
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-469.727, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.71667e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002274, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.08,0.08,0.09,0.10,0.10 0.10,0.10,0.10,0.11), mean=0.0896, stddev=0.00675], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.04,0.04,0.04 0.04,0.05,0.05,0.06,0.06 0.06,0.07,0.07,0.08), mean=0.0514, stddev=0.00703], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.06,0.11,0.15 0.18,0.22,0.24,0.27), mean=0.0741, stddev=0.0507], bias-{mean,stddev}=-0.0001433,0.0023, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=64, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-155,-141,-121,-101 -69,-41,19,70,102 134,162,186,224), mean=16.8, stddev=67.8], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-322,-233,-215,-170 -123,-78,-0.34,77,123 152,170,195,315), mean=-1.65, stddev=95.6], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.04,0.06 0.07,0.08,0.09,0.11), mean=0.0151, stddev=0.0264], oderiv-count=16576
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-494.303, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.71667e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001258, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,2e-07,4e-07,1e-06 4e-06,8e-05,0.02,0.04,0.06 0.06,0.07,0.07,0.08), mean=0.0239, stddev=0.0213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.03,0.06,0.07,0.07 0.08,0.08,0.08,0.08), mean=0.054, stddev=0.0193], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,5e-08,6e-08,8e-08 1e-05,0.01,0.03,0.06,0.09 0.13,0.17,0.19,0.23), mean=0.0395, stddev=0.0416], bias-{mean,stddev}=2.799e-05,0.0005798, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.71667e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0004093, w_fc-rms=0.0004332, w_oc-rms=0.0007461, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000350061, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.46,-0.21,-0.09,0.03 0.16,0.32,0.50,0.65,0.86 0.99,1.1,1.2,1.5), mean=0.495, stddev=0.272], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.39,-0.25,-0.17,-0.08 0.03,0.16,0.25,0.37,0.47 0.55,0.60,0.66,1.1), mean=0.254, stddev=0.177] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000350061, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.33,-0.25,-0.09 0.04,0.21,0.50,0.54,0.69 0.81,0.96,1.0,1.2), mean=0.414, stddev=0.27], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.48,-0.21,-0.13,-0.02 0.07,0.18,0.25,0.32,0.41 0.46,0.55,0.60,1.1), mean=0.246, stddev=0.15] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.000350061, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.2,-4.5,-4.2,-3.1 -2.5,-1.1,-0.008,0.87,1.8 2.6,4.0,4.6,7.7), mean=-0.107, stddev=1.74], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.7,-3.3,-3.0,-2.3 -1.2,-0.24,1.0,1.8,2.8 3.6,4.4,4.8,7.0), mean=0.871, stddev=1.62] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000350061, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.35,-0.25,-0.06 0.06,0.30,0.50,0.68,0.90 1.1,1.3,1.4,1.8), mean=0.492, stddev=0.337], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.54,-0.30,-0.25,-0.10 -0.008,0.14,0.25,0.35,0.47 0.54,0.66,0.71,1.3), mean=0.243, stddev=0.195] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.000350061, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.0,-3.9,-3.0,-2.4 -1.8,-0.87,-0.003,0.80,1.5 2.3,2.9,3.2,5.0), mean=-0.054, stddev=1.33], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.3,-1.1,-0.81 -0.23,0.27,1.0,1.1,1.6 2.0,2.3,2.5,3.2), mean=0.795, stddev=0.753] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-4.48e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-672
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.12562
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.71667e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001743, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.06), mean=0.0383, stddev=0.0105], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,9e-05,0.0001,0.0002 0.0003,0.0009,0.03,0.04,0.04 0.04,0.04,0.04,0.06), mean=0.0228, stddev=0.0164], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,1e-06,0.05,0.08 0.10,0.11,0.12,0.13), mean=0.0202, stddev=0.0342], bias-{mean,stddev}=0.0002026,0.002312, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=9.71667e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002569, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.06,0.07,0.08,0.09 0.10,0.10,0.11,0.12), mean=0.0708, stddev=0.0119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.04,0.05,0.07,0.08 0.08,0.08,0.09,0.09), mean=0.0563, stddev=0.0163], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,3e-08,4e-08 6e-08,1e-07,0.001,0.08,0.13 0.18,0.22,0.23,0.26), mean=0.0392, stddev=0.0601], bias-{mean,stddev}=-8.072e-05,0.001476, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.10,0.23,0.29 0.37,0.42,0.48,0.64), mean=0.122, stddev=0.129], oderiv-count=25728
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-518.879, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.71667e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.001969, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.07,0.08,0.08,0.09 0.09,0.09,0.10,0.10), mean=0.0773, stddev=0.00864], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0445, stddev=0.00606], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.03,0.05,0.09,0.13 0.16,0.19,0.21,0.24), mean=0.0627, stddev=0.046], bias-{mean,stddev}=0.0001312,0.002166, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.04,0.05 0.06,0.07,0.07,0.11), mean=0.0188, stddev=0.0219], oderiv-count=21920
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-543.455, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.71667e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001626, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.008,0.01 0.01,0.02,0.03,0.06,0.07 0.08,0.09,0.10,0.11), mean=0.0342, stddev=0.0235], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.05,0.06,0.09,0.11 0.12,0.13,0.13,0.13), mean=0.0699, stddev=0.0247], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,8e-06 0.008,0.01,0.03,0.07,0.13 0.18,0.23,0.25,0.29), mean=0.0478, stddev=0.0567], bias-{mean,stddev}=-4.298e-05,0.0004498, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.71667e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0006228, w_fc-rms=0.0007924, w_oc-rms=0.001755, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00026828, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-0.67,-0.42,0.03 0.28,0.57,0.96,1.4,1.6 1.8,2.1,2.3,3.6), mean=0.951, stddev=0.591], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.65,-0.37,-0.31,-0.25 -0.19,-0.08,0.09,0.25,0.33 0.42,0.52,0.59,1.4), mean=0.0891, stddev=0.214] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00026828, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.2,-0.85,-0.57 -0.27,0.09,0.55,1.1,1.4 1.7,2.0,2.1,2.7), mean=0.566, stddev=0.667], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.62,-0.34,-0.30,-0.15 -0.08,0.01,0.16,0.33,0.43 0.50,0.57,0.65,0.81), mean=0.168, stddev=0.202] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0160981, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-21,-12,-11,-7.9 -6.2,-3.6,-0.05,3.2,5.2 7.7,9.8,11,16), mean=-0.178, stddev=4.73], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.2,-5.6,-4.6,-3.2 -2.6,-1.8,-0.001,1.8,2.6 3.6,4.6,4.9,6.5), mean=0.0154, stddev=2.13] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00026828, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.6,-1.3,-0.91,-0.54 -0.23,0.25,0.93,1.7,2.1 2.5,2.8,3.0,4.8), mean=0.944, stddev=0.913], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.61,-0.47,-0.31 -0.25,-0.15,0.07,0.28,0.42 0.50,0.61,0.66,1.1), mean=0.0702, stddev=0.268] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.21965, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-20,-9.2,-8.4,-6.5 -5.0,-3.1,0.006,2.7,3.9 6.0,7.7,8.4,11), mean=-0.184, stddev=3.73], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.8,-3.5,-3.1,-2.2 -1.8,-1.2,-0.22,0.81,1.4 1.9,2.5,2.8,3.7), mean=-0.226, stddev=1.3] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-4.48e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-672
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.12562
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.71667e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001855, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.06,0.06 0.06,0.06,0.06,0.07), mean=0.0382, stddev=0.0181], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.03,0.04,0.04 0.04,0.04,0.04,0.06), mean=0.0291, stddev=0.0068], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,2e-07 3e-07,6e-07,0.004,0.05,0.08 0.10,0.12,0.13,0.14), mean=0.0245, stddev=0.0345], bias-{mean,stddev}=0.0001496,0.007935, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=9.71667e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002277, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.02,0.02,0.03,0.04,0.05 0.06,0.07,0.07,0.17), mean=0.0341, stddev=0.0136], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.06,0.08,0.13,0.14 0.14,0.15,0.15,0.16), mean=0.0979, stddev=0.0366], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 3e-07,6e-07,0.002,0.15,0.20 0.24,0.26,0.27,0.31), mean=0.0585, stddev=0.0866], bias-{mean,stddev}=8.941e-11,0.0005122, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.05,0.06 0.07,0.08,0.09,0.73), mean=0.0218, stddev=0.0345], oderiv-count=9280

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.12667 tdnn2.affine:2.8877 lstm1.W_all:2.17982 lstm1.lstm_nonlin:0.0436388 lstm1.W_rp:0.958925 tdnn3.affine:1.99525 tdnn4.affine:2.04923 lstm2.W_all:1.4633 lstm2.lstm_nonlin:0.0217759 lstm2.W_rp:0.641834 tdnn5.affine:1.63667 tdnn6.affine:1.77373 lstm3.W_all:1.8907 lstm3.lstm_nonlin:0.0461565 lstm3.W_rp:0.693922 output.affine:1.68459 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8799 tdnn2.affine:10.4897 lstm1.W_all:20.3908 lstm1.lstm_nonlin:1.89462 lstm1.W_rp:15.0015 tdnn3.affine:7.93119 tdnn4.affine:7.38061 lstm2.W_all:16.6687 lstm2.lstm_nonlin:1.33937 lstm2.W_rp:14.0439 tdnn5.affine:7.42433 tdnn6.affine:7.40561 lstm3.W_all:24.039 lstm3.lstm_nonlin:3.02763 lstm3.W_rp:33.6136 output.affine:30.9502 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.243059 tdnn2.affine:0.275711 lstm1.W_all:0.106893 lstm1.lstm_nonlin:0.0229264 lstm1.W_rp:0.0639059 tdnn3.affine:0.251387 tdnn4.affine:0.277352 lstm2.W_all:0.0877617 lstm2.lstm_nonlin:0.0161893 lstm2.W_rp:0.0457011 tdnn5.affine:0.220479 tdnn6.affine:0.239715 lstm3.W_all:0.0786546 lstm3.lstm_nonlin:0.0152066 lstm3.W_rp:0.0206425 output.affine:0.0544191 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:43:38 KST 2020, elapsed time 0 seconds
