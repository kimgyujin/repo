# nnet3-info exp/nnet3/tdnn_lstm1c_sp/77.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/76.mdl exp/nnet3/tdnn_lstm1c_sp/77.mdl 
# Started at Thu Jul 30 10:31:34 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/77.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000235743, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03101, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.008,0.01,0.02 0.06,0.44,0.54,0.63,0.68 0.75,0.81,0.88,1.1), mean=0.495, stddev=0.209], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.16 0.18,0.22,0.60,0.82,1.2 1.4,1.5,1.6,1.7), mean=0.6, stddev=0.374], bias-{mean,stddev}=0.000276,0.0603, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0.106284, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,5e-06,2e-05,4e-05 0.0003,0.03,0.07,0.09,0.10 0.11,0.13,0.13,0.20), mean=0.0601, stddev=0.0346], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.003,0.007,0.02 0.06,0.26,0.48,0.61,0.71 0.78,0.84,0.89,0.97), mean=0.447, stddev=0.222], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.02,0.03 0.09,0.28,0.36,0.45,0.50 0.58,0.69,0.77,1.2), mean=0.356, stddev=0.156], oderiv-count=1.1767e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39653.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,1e-06,3e-06,1e-05 0.0001,0.02,0.06,0.08,0.11 0.13,0.14,0.15,0.23), mean=0.0585, stddev=0.0375], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,5e-05,7e-05,0.0001 0.001,0.06,0.10,0.11,0.12 0.12,0.13,0.14,0.16), mean=0.0839, stddev=0.04]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000235743, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01292, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.39,0.41 0.44,0.46,0.50,0.55,0.58 0.61,0.64,0.66,0.79), mean=0.507, stddev=0.0589], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.006,0.01 0.04,0.25,0.30,0.34,0.36 0.38,0.40,0.44,0.71), mean=0.273, stddev=0.11], bias-{mean,stddev}=-0.001971,0.02912, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.55e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.29,0.30 0.31,0.33,0.35,0.39,0.41 0.43,0.46,0.48,0.58), mean=0.358, stddev=0.0411], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.41 0.43,0.44,0.46,0.48,0.50 0.51,0.52,0.52,0.55), mean=0.46, stddev=0.0287], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.07,0.07), mean=0.0421, stddev=0.00818], oderiv-count=1.10522e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38813.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.28,0.29 0.31,0.32,0.35,0.39,0.41 0.44,0.46,0.47,0.58), mean=0.356, stddev=0.0452], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.49,0.51,0.53 0.55,0.58,0.63,0.69,0.72 0.75,0.79,0.83,0.96), mean=0.636, stddev=0.0701]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000235743, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01757, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.002,0.007,0.03 0.12,0.23,0.39,0.57,0.67 0.74,0.83,0.91,1.1), mean=0.397, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.37,0.41,0.45 0.52,0.69,0.82,0.90,0.95 0.99,1.0,1.1,1.3), mean=0.786, stddev=0.157], bias-{mean,stddev}=-0.00193,0.02112, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000235743, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0251, w_fc-rms=0.04032, w_oc-rms=0.055, count=1.44e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625116, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.45,0.46,0.49,0.52,0.56 0.61,0.67,0.69,0.71), mean=0.498, stddev=0.0535], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0146] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625116, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.36,0.38,0.40 0.42,0.43,0.48,0.53,0.60 0.70,0.76,0.80,0.86), mean=0.496, stddev=0.0871], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.17,0.19 0.21,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0208] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00815018, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.82,-0.78,-0.60 -0.36,-0.21,-0.006,0.21,0.37 0.54,0.74,0.77,0.85), mean=-0.00292, stddev=0.313], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.27,0.30,0.34 0.39,0.46,0.59,0.70,0.85 0.99,1.0,1.0,1.0), mean=0.598, stddev=0.171] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00625116, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.41,0.41 0.42,0.44,0.47,0.50,0.53 0.56,0.58,0.61,0.69), mean=0.476, stddev=0.0448], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.017] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0224273, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.86,-0.81,-0.55 -0.32,-0.18,-0.005,0.18,0.33 0.52,0.71,0.82,0.91), mean=-0.00564, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.17,0.24,0.38 0.57,0.71,0.83,0.89,0.93 0.99,1.0,1.0,1.0), mean=0.783, stddev=0.168] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=293223
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000235743, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03189, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.22,0.25 0.27,0.31,0.46,0.99,1.1 1.1,1.2,1.2,1.3), mean=0.644, stddev=0.338], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.04,0.08 0.21,0.35,0.48,0.60,0.70 0.82,0.92,1.0,1.2), mean=0.475, stddev=0.197], bias-{mean,stddev}=-0.002413,0.04301, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000235743, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01331, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.23,0.25,0.26 0.28,0.30,0.35,0.42,0.46 0.50,0.53,0.56,0.68), mean=0.365, stddev=0.0728], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.12,0.22,0.42,0.46 0.50,0.52,0.54,0.58), mean=0.266, stddev=0.146], bias-{mean,stddev}=-0.007202,0.02638, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.11e+06, self-repaired-proportion=0.00192308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.04,0.05,0.07 0.08,0.10,0.14,0.17,0.19 0.21,0.24,0.25,0.29), mean=0.138, stddev=0.0454], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.15,0.20,0.25 0.29,0.37,0.50,0.60,0.64 0.66,0.69,0.70,0.75), mean=0.482, stddev=0.129], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.06,0.07,0.07,0.09,0.10 0.11,0.12,0.12,0.18), mean=0.0781, stddev=0.0155], oderiv-count=996096
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36294.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.03,0.04,0.06 0.08,0.10,0.14,0.17,0.19 0.22,0.24,0.26,0.30), mean=0.136, stddev=0.047], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.11,0.14,0.17 0.18,0.20,0.23,0.26,0.28 0.30,0.32,0.33,0.37), mean=0.229, stddev=0.0415]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000235743, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009732, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.30,0.31,0.33 0.34,0.35,0.38,0.41,0.43 0.45,0.47,0.48,0.63), mean=0.382, stddev=0.0389], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.16,0.16,0.17 0.18,0.19,0.21,0.25,0.27 0.28,0.30,0.31,0.36), mean=0.219, stddev=0.0345], bias-{mean,stddev}=-0.0121,0.01837, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.49e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.23,0.24 0.25,0.27,0.30,0.33,0.35 0.37,0.39,0.40,0.48), mean=0.3, stddev=0.0393], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.50,0.51,0.52,0.54), mean=0.443, stddev=0.0321], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0316, stddev=0.00284], oderiv-count=1.00666e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33775.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.23,0.24 0.25,0.26,0.30,0.33,0.36 0.37,0.40,0.40,0.50), mean=0.301, stddev=0.042], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.47,0.49 0.51,0.53,0.58,0.64,0.68 0.71,0.76,0.79,0.97), mean=0.59, stddev=0.0694]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000235743, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01375, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0003,0.0004,0.0007 0.002,0.02,0.29,0.48,0.57 0.63,0.67,0.70,1.3), mean=0.276, stddev=0.216], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.33 0.38,0.55,0.65,0.71,0.74 0.78,0.82,0.86,0.98), mean=0.613, stddev=0.132], bias-{mean,stddev}=-0.00297,0.02216, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000235743, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0147, w_fc-rms=0.01912, w_oc-rms=0.02351, count=1.31e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630691, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.45 0.46,0.47,0.50,0.51,0.53 0.56,0.59,0.60,0.65), mean=0.494, stddev=0.0334], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0157] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630691, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.43,0.45,0.50,0.50,0.52 0.56,0.60,0.62,0.73), mean=0.485, stddev=0.0436], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0124] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0101288, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.63,-0.60,-0.37 -0.22,-0.11,0.002,0.14,0.27 0.37,0.54,0.62,0.77), mean=0.0109, stddev=0.221], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.45,0.47,0.51 0.54,0.57,0.66,0.99,1.0 1.0,1.0,1.0,1.0), mean=0.729, stddev=0.185] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630691, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.42,0.43 0.44,0.46,0.49,0.50,0.52 0.54,0.57,0.59,0.66), mean=0.487, stddev=0.0344], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0162] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00630691, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.63,-0.57,-0.36 -0.22,-0.11,0.002,0.13,0.25 0.38,0.51,0.60,0.85), mean=0.0104, stddev=0.215], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.48,0.57,0.67 0.75,0.82,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.879, stddev=0.11] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.71e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=258567
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000235743, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02883, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.38,0.40 0.41,0.44,0.61,0.83,0.89 0.91,0.95,0.96,1.1), mean=0.63, stddev=0.188], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.01 0.02,0.04,0.45,0.61,0.68 0.74,0.84,0.90,1.1), mean=0.384, stddev=0.262], bias-{mean,stddev}=-0.005194,0.1013, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000235743, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01238, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.22,0.23 0.25,0.27,0.32,0.39,0.45 0.51,0.57,0.58,0.67), mean=0.335, stddev=0.085], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.17,0.19,0.26,0.35,0.39 0.41,0.44,0.45,0.50), mean=0.27, stddev=0.0831], bias-{mean,stddev}=0.0004667,0.01965, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.97e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.04 0.05,0.06,0.09,0.11,0.13 0.14,0.16,0.17,0.21), mean=0.0876, stddev=0.0324], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.19 0.24,0.30,0.43,0.53,0.59 0.62,0.66,0.67,0.72), mean=0.421, stddev=0.129], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.07,0.08,0.09,0.10,0.12 0.13,0.14,0.15,0.19), mean=0.0908, stddev=0.0195], oderiv-count=1.05126e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31256.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.05,0.06,0.09,0.12,0.14 0.16,0.18,0.19,0.21), mean=0.0942, stddev=0.0371], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.09,0.11 0.13,0.14,0.17,0.19,0.21 0.22,0.24,0.24,0.28), mean=0.167, stddev=0.0343]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000235743, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009321, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.28,0.29 0.30,0.32,0.36,0.41,0.44 0.45,0.47,0.48,0.57), mean=0.365, stddev=0.0497], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.15 0.15,0.17,0.20,0.24,0.26 0.29,0.33,0.36,0.45), mean=0.207, stddev=0.0474], bias-{mean,stddev}=-0.01192,0.0158, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.94e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.23 0.25,0.27,0.30,0.33,0.35 0.37,0.39,0.40,0.46), mean=0.3, stddev=0.0415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.35,0.36 0.37,0.39,0.42,0.45,0.46 0.48,0.49,0.50,0.52), mean=0.418, stddev=0.034], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0266, stddev=0.0026], oderiv-count=869440
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28737.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.22,0.24 0.26,0.28,0.31,0.35,0.37 0.39,0.41,0.44,0.52), mean=0.315, stddev=0.047], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.47,0.49 0.51,0.55,0.62,0.69,0.74 0.77,0.84,0.87,0.95), mean=0.623, stddev=0.0878]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000235743, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01978, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.17,0.25 0.32,0.36,0.43,0.63,0.76 0.80,0.85,0.87,1.4), mean=0.476, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.60,0.62 0.64,0.66,0.75,1.1,1.4 1.4,1.5,1.5,1.7), mean=0.86, stddev=0.271], bias-{mean,stddev}=0.007574,0.02441, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000235743, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0304, w_fc-rms=0.04192, w_oc-rms=0.05933, count=1.19e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637425, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.47 0.49,0.51,0.57,0.64,0.66 0.68,0.70,0.71,0.80), mean=0.576, stddev=0.0647], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.19,0.20,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.205, stddev=0.00993] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637425, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.48 0.50,0.54,0.59,0.63,0.67 0.70,0.74,0.75,0.88), mean=0.589, stddev=0.0642], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.17,0.18,0.18 0.19,0.19,0.21,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.204, stddev=0.0135] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00901498, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.78,-0.52 -0.34,-0.20,-0.01,0.20,0.33 0.49,0.65,0.81,0.87), mean=-0.00281, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.25,0.27,0.31 0.36,0.39,0.45,0.48,0.50 0.52,0.53,0.55,0.62), mean=0.436, stddev=0.0601] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00806235, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.54,0.55,0.56 0.58,0.61,0.65,0.69,0.71 0.73,0.75,0.77,0.95), mean=0.651, stddev=0.0505], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.15,0.16,0.16 0.17,0.18,0.19,0.20,0.20 0.20,0.20,0.21,0.21), mean=0.186, stddev=0.0135] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0262421, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.88,-0.82,-0.54 -0.32,-0.19,-0.002,0.20,0.31 0.49,0.72,0.88,0.95), mean=-0.00145, stddev=0.299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.19,0.21,0.37 0.47,0.56,0.64,0.69,0.71 0.72,0.73,0.73,0.75), mean=0.609, stddev=0.114] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.47e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=219842
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000235743, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06933, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.2,1.6,1.8,1.9 2.0,2.0,2.0,2.2), mean=1.55, stddev=0.288], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.66,0.76,0.88 0.92,0.99,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.11, stddev=0.152], bias-{mean,stddev}=-3.311e-05,0.08645, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000235743, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04054, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.51,0.53,0.54 0.56,0.59,0.64,0.69,0.73 0.78,0.83,0.86,2.1), mean=0.647, stddev=0.0947], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.4 1.5,1.5,1.8,2.1,2.2 2.3,2.3,2.4,2.7), mean=1.83, stddev=0.303], bias-{mean,stddev}=4.426e-09,0.02625, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0138], oderiv-count=622080
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/76.mdl exp/nnet3/tdnn_lstm1c_sp/77.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.66496 tdnn2.affine:8.90039 lstm1.W_all:7.61848 lstm1.lstm_nonlin:0.157621 lstm1.W_rp:3.1465 tdnn3.affine:5.61011 tdnn4.affine:6.44767 lstm2.W_all:5.13157 lstm2.lstm_nonlin:0.0976935 lstm2.W_rp:2.20074 tdnn5.affine:4.58421 tdnn6.affine:5.39341 lstm3.W_all:6.83917 lstm3.lstm_nonlin:0.245071 lstm3.W_rp:2.79145 output.affine:5.78706 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.3253 tdnn2.affine:11.6581 lstm1.W_all:20.4483 lstm1.lstm_nonlin:1.65722 lstm1.W_rp:11.7475 tdnn3.affine:8.49987 tdnn4.affine:8.77937 lstm2.W_all:16.0213 lstm2.lstm_nonlin:0.767976 lstm2.W_rp:10.7265 tdnn5.affine:7.89535 tdnn6.affine:8.40735 lstm3.W_all:23.0265 lstm3.lstm_nonlin:1.79565 lstm3.W_rp:25.5292 output.affine:30.0049 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.706759 tdnn2.affine:0.772979 lstm1.W_all:0.373864 lstm1.lstm_nonlin:0.0955744 lstm1.W_rp:0.269429 tdnn3.affine:0.685058 tdnn4.affine:0.755848 lstm2.W_all:0.323431 lstm2.lstm_nonlin:0.132827 lstm2.W_rp:0.207484 tdnn5.affine:0.609037 tdnn6.affine:0.666073 lstm3.W_all:0.298921 lstm3.lstm_nonlin:0.141108 lstm3.W_rp:0.109804 output.affine:0.192868 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:31:35 KST 2020, elapsed time 1 seconds
