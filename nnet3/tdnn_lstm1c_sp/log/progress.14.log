# nnet3-info exp/nnet3/tdnn_lstm1c_sp/14.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/13.mdl exp/nnet3/tdnn_lstm1c_sp/14.mdl 
# Started at Thu Jul 30 10:06:40 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/14.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000287882, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03094, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.009,0.01 0.02,0.05,0.56,0.67,0.74 0.80,0.86,0.92,1.1), mean=0.46, stddev=0.275], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.15 0.17,0.21,0.59,0.83,1.1 1.4,1.6,1.6,1.8), mean=0.595, stddev=0.379], bias-{mean,stddev}=-0.004399,0.06392, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.29e+05, self-repaired-proportion=0.206301, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,2e-06,5e-06,3e-05 5e-05,0.0002,0.06,0.09,0.11 0.12,0.14,0.15,0.18), mean=0.0547, stddev=0.0435], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0008,0.002,0.007 0.02,0.05,0.43,0.61,0.70 0.75,0.80,0.83,0.92), mean=0.373, stddev=0.255], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.04,0.13,0.35,0.44,0.50 0.58,0.70,0.74,1.1), mean=0.32, stddev=0.178], oderiv-count=1.11718e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32442, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,4e-07,7e-07,2e-06 1e-05,0.0001,0.05,0.08,0.10 0.12,0.15,0.16,0.19), mean=0.0504, stddev=0.0425], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,4e-05,5e-05,8e-05 0.0002,0.0009,0.10,0.12,0.13 0.13,0.14,0.14,0.16), mean=0.0737, stddev=0.0507]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000287882, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0129, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.41,0.42 0.44,0.46,0.50,0.55,0.57 0.59,0.62,0.63,0.64), mean=0.507, stddev=0.0512], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.006,0.008 0.01,0.04,0.32,0.37,0.40 0.42,0.44,0.45,0.56), mean=0.255, stddev=0.146], bias-{mean,stddev}=-0.0002242,0.0311, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.30,0.31,0.34,0.37,0.39 0.40,0.42,0.42,0.48), mean=0.34, stddev=0.0356], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.41 0.42,0.44,0.47,0.49,0.50 0.52,0.53,0.54,0.54), mean=0.464, stddev=0.0315], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.06,0.08), mean=0.0415, stddev=0.00754], oderiv-count=1.24826e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31720.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.27 0.29,0.30,0.33,0.36,0.38 0.40,0.42,0.45,0.47), mean=0.333, stddev=0.0384], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.47,0.48,0.49 0.51,0.54,0.59,0.63,0.66 0.69,0.72,0.74,0.89), mean=0.589, stddev=0.0608]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000287882, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01796, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.23,0.27,0.39,0.57,0.67 0.75,0.82,0.87,1.1), mean=0.426, stddev=0.167], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.46,0.49 0.53,0.72,0.85,0.91,0.94 0.98,1.0,1.0,1.1), mean=0.806, stddev=0.149], bias-{mean,stddev}=-0.000408,0.1892, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000287882, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1966, w_fc-rms=0.1954, w_oc-rms=0.1887, count=1.44e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00608961, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.38,0.40 0.42,0.45,0.50,0.56,0.58 0.61,0.66,0.68,0.77), mean=0.503, stddev=0.0642], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.24 0.24,0.25,0.25,0.25), mean=0.228, stddev=0.0134] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00608961, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.33,0.35 0.37,0.41,0.47,0.55,0.61 0.67,0.73,0.78,0.84), mean=0.485, stddev=0.0964], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.17,0.19 0.20,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0196] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00725579, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.76,-0.72,-0.61 -0.47,-0.28,0.008,0.34,0.47 0.57,0.69,0.72,0.83), mean=0.0067, stddev=0.352], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.30,0.32,0.37 0.41,0.46,0.58,0.69,0.75 0.83,0.88,0.90,0.94), mean=0.582, stddev=0.134] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00608961, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.40 0.41,0.43,0.48,0.52,0.55 0.58,0.62,0.66,0.71), mean=0.482, stddev=0.0583], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.24,0.24,0.25,0.25), mean=0.222, stddev=0.0149] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00894362, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.71,-0.55 -0.38,-0.22,0.006,0.25,0.39 0.50,0.65,0.73,0.88), mean=0.00377, stddev=0.309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.31,0.47 0.60,0.70,0.81,0.88,0.91 0.93,0.96,0.97,0.98), mean=0.777, stddev=0.141] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=297291
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000287882, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03121, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.49,0.49,0.51 0.54,0.58,0.70,0.82,0.88 0.91,0.95,0.96,0.99), mean=0.7, stddev=0.128], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.23 0.29,0.35,0.47,0.59,0.68 0.75,0.85,0.86,1.1), mean=0.48, stddev=0.151], bias-{mean,stddev}=0.0196,0.1912, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000287882, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01359, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.20,0.22,0.24 0.26,0.30,0.36,0.43,0.49 0.54,0.59,0.60,0.66), mean=0.369, stddev=0.0886], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.22,0.24,0.30,0.36,0.39 0.41,0.44,0.45,0.50), mean=0.303, stddev=0.0648], bias-{mean,stddev}=-0.0002776,0.01142, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.34e+05, self-repaired-proportion=0.00158974, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.07,0.08 0.10,0.12,0.16,0.20,0.23 0.24,0.26,0.27,0.34), mean=0.161, stddev=0.05], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.18,0.21,0.26 0.31,0.38,0.49,0.60,0.65 0.69,0.74,0.75,0.80), mean=0.481, stddev=0.129], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.05,0.06,0.07,0.08 0.09,0.11,0.11,0.15), mean=0.0626, stddev=0.0154], oderiv-count=1.12243e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29555.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.08 0.09,0.11,0.15,0.20,0.22 0.24,0.26,0.27,0.33), mean=0.155, stddev=0.0504], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.16,0.18 0.20,0.21,0.24,0.28,0.30 0.32,0.34,0.34,0.38), mean=0.246, stddev=0.041]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000287882, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00988, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.26,0.30 0.33,0.35,0.39,0.42,0.44 0.46,0.48,0.49,0.51), mean=0.387, stddev=0.0487], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.13,0.14 0.16,0.18,0.22,0.26,0.28 0.30,0.32,0.33,0.37), mean=0.221, stddev=0.0457], bias-{mean,stddev}=-0.009137,0.017, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.17e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.26 0.27,0.29,0.31,0.35,0.37 0.39,0.42,0.44,0.46), mean=0.318, stddev=0.0393], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.39,0.40 0.41,0.42,0.44,0.46,0.47 0.48,0.49,0.50,0.51), mean=0.441, stddev=0.0251], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0274, stddev=0.0035], oderiv-count=1.08877e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27390, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.25 0.26,0.28,0.31,0.34,0.37 0.38,0.40,0.43,0.47), mean=0.312, stddev=0.0407], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.46,0.48 0.50,0.53,0.58,0.64,0.67 0.70,0.72,0.75,0.78), mean=0.585, stddev=0.0652]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000287882, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01483, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.19 0.20,0.22,0.31,0.48,0.56 0.63,0.67,0.71,1.0), mean=0.351, stddev=0.14], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.42,0.43 0.46,0.54,0.70,0.76,0.79 0.82,0.86,0.87,0.94), mean=0.665, stddev=0.12], bias-{mean,stddev}=0.004868,0.1884, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000287882, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.2032, w_fc-rms=0.1971, w_oc-rms=0.1965, count=1.32e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614112, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.39,0.41 0.42,0.45,0.50,0.55,0.58 0.61,0.63,0.65,0.68), mean=0.502, stddev=0.0604], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.24 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0144] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614112, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.37,0.38 0.40,0.43,0.48,0.55,0.59 0.65,0.70,0.75,0.81), mean=0.491, stddev=0.0802], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0166] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00614112, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.71,-0.66,-0.48 -0.40,-0.25,-0.008,0.26,0.42 0.53,0.63,0.67,0.80), mean=0.0032, stddev=0.308], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.39,0.42,0.46 0.51,0.54,0.64,0.77,0.85 0.89,0.92,0.93,0.95), mean=0.654, stddev=0.131] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614112, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.40 0.41,0.44,0.48,0.54,0.57 0.61,0.64,0.65,0.67), mean=0.49, stddev=0.0616], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.24 0.24,0.25,0.25,0.25), mean=0.229, stddev=0.0133] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00818279, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.76,-0.67,-0.43 -0.31,-0.18,-0.006,0.22,0.33 0.50,0.65,0.72,0.90), mean=0.00611, stddev=0.276], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.27,0.38,0.55 0.70,0.77,0.84,0.91,0.94 0.96,0.97,0.98,0.99), mean=0.82, stddev=0.129] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=262200
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000287882, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02888, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.48,0.50,0.51 0.53,0.56,0.64,0.74,0.77 0.83,0.87,0.89,0.90), mean=0.652, stddev=0.0944], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.19 0.22,0.27,0.42,0.58,0.66 0.75,0.84,0.90,1.1), mean=0.432, stddev=0.174], bias-{mean,stddev}=-0.004803,0.1855, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000287882, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01274, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.15,0.17,0.20 0.23,0.26,0.33,0.42,0.47 0.52,0.59,0.64,0.74), mean=0.34, stddev=0.104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.21 0.22,0.24,0.28,0.33,0.36 0.38,0.40,0.41,0.45), mean=0.286, stddev=0.0536], bias-{mean,stddev}=-0.0002873,0.01118, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.11e+05, self-repaired-proportion=0.0131529, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.004,0.04,0.05 0.07,0.09,0.13,0.18,0.20 0.22,0.24,0.24,0.28), mean=0.134, stddev=0.0518], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.03,0.14,0.20 0.25,0.32,0.43,0.54,0.60 0.63,0.67,0.69,0.77), mean=0.425, stddev=0.134], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.04 0.04,0.05,0.06,0.07,0.08 0.10,0.12,0.14,0.25), mean=0.0632, stddev=0.0209], oderiv-count=972032
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25224.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.009,0.04,0.05 0.06,0.08,0.12,0.17,0.19 0.21,0.23,0.24,0.26), mean=0.126, stddev=0.049], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.04,0.11,0.14 0.16,0.18,0.22,0.26,0.28 0.29,0.31,0.33,0.36), mean=0.219, stddev=0.0518]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000287882, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009817, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.27,0.28,0.31 0.33,0.35,0.38,0.42,0.44 0.46,0.50,0.53,0.62), mean=0.385, stddev=0.0488], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.09,0.11,0.12 0.14,0.16,0.21,0.26,0.29 0.32,0.35,0.39,0.55), mean=0.215, stddev=0.0627], bias-{mean,stddev}=-0.01074,0.02021, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=5.82e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.26,0.27 0.28,0.29,0.33,0.36,0.38 0.40,0.41,0.43,0.73), mean=0.33, stddev=0.0453], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.36,0.38 0.39,0.40,0.42,0.45,0.46 0.47,0.48,0.49,0.51), mean=0.423, stddev=0.0287], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0241, stddev=0.00309], oderiv-count=926720
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23059.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.27,0.28,0.32,0.35,0.37 0.39,0.41,0.43,0.75), mean=0.321, stddev=0.0473], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.49,0.50,0.52 0.54,0.56,0.61,0.67,0.71 0.74,0.78,0.85,1.0), mean=0.619, stddev=0.072]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000287882, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01908, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.22,0.24 0.27,0.33,0.43,0.58,0.71 0.78,0.83,0.86,1.1), mean=0.46, stddev=0.158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.62,0.63,0.67 0.71,0.73,0.79,0.99,1.1 1.2,1.3,1.4,1.5), mean=0.853, stddev=0.171], bias-{mean,stddev}=0.00596,0.1906, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000287882, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1829, w_fc-rms=0.1942, w_oc-rms=0.2007, count=1.19e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620328, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.42,0.43,0.46 0.48,0.51,0.56,0.62,0.65 0.67,0.69,0.69,0.71), mean=0.564, stddev=0.0622], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.17,0.18 0.19,0.19,0.21,0.22,0.23 0.23,0.24,0.24,0.25), mean=0.207, stddev=0.0166] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620328, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.41,0.43 0.46,0.49,0.57,0.64,0.67 0.70,0.75,0.76,0.84), mean=0.569, stddev=0.0828], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.17 0.18,0.19,0.21,0.23,0.23 0.24,0.24,0.24,0.25), mean=0.208, stddev=0.0213] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00809048, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.70,-0.67,-0.50 -0.38,-0.22,0.004,0.21,0.35 0.47,0.57,0.62,0.71), mean=-0.00446, stddev=0.282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.29,0.32,0.34 0.39,0.43,0.48,0.55,0.61 0.66,0.74,0.78,0.82), mean=0.493, stddev=0.0927] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620328, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.45,0.48 0.50,0.54,0.62,0.68,0.71 0.73,0.74,0.75,0.79), mean=0.612, stddev=0.0766], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.16 0.17,0.17,0.19,0.21,0.22 0.22,0.23,0.23,0.24), mean=0.191, stddev=0.0182] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00620328, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.71,-0.66,-0.48 -0.33,-0.21,-0.004,0.20,0.32 0.46,0.55,0.65,0.76), mean=-0.00438, stddev=0.271], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.34,0.36,0.47 0.53,0.59,0.67,0.74,0.77 0.81,0.86,0.88,0.91), mean=0.66, stddev=0.103] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222973
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000287882, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06272, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.2,1.3,1.4,1.5,1.6 1.7,1.7,1.7,1.8), mean=1.42, stddev=0.14], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.44,0.57 0.66,0.81,1.0,1.2,1.3 1.3,1.4,1.4,1.8), mean=0.985, stddev=0.23], bias-{mean,stddev}=0.01707,0.201, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000287882, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04132, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.50,0.52,0.54 0.56,0.59,0.64,0.71,0.76 0.80,0.87,0.92,2.5), mean=0.657, stddev=0.112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.5,1.6 1.7,1.7,1.9,2.0,2.1 2.2,2.3,2.3,2.3), mean=1.89, stddev=0.172], bias-{mean,stddev}=4.186e-09,0.01938, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=552960
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/13.mdl exp/nnet3/tdnn_lstm1c_sp/14.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.3044 tdnn2.affine:9.54957 lstm1.W_all:8.42788 lstm1.lstm_nonlin:0.930187 lstm1.W_rp:3.63758 tdnn3.affine:5.92252 tdnn4.affine:6.95458 lstm2.W_all:5.73452 lstm2.lstm_nonlin:0.948186 lstm2.W_rp:2.45993 tdnn5.affine:4.88604 tdnn6.affine:6.17956 lstm3.W_all:7.01858 lstm3.lstm_nonlin:0.903467 lstm3.W_rp:2.91605 output.affine:6.57077 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.3069 tdnn2.affine:11.6411 lstm1.W_all:22.6012 lstm1.lstm_nonlin:7.64705 lstm1.W_rp:11.8863 tdnn3.affine:8.66127 tdnn4.affine:8.90917 lstm2.W_all:19.2646 lstm2.lstm_nonlin:7.85858 lstm2.W_rp:11.033 tdnn5.affine:8.12051 tdnn6.affine:8.85689 lstm3.W_all:23.8299 lstm3.lstm_nonlin:7.61155 lstm3.W_rp:23.291 output.affine:30.5743 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.765367 tdnn2.affine:0.82725 lstm1.W_all:0.36334 lstm1.lstm_nonlin:0.108786 lstm1.W_rp:0.303 tdnn3.affine:0.686651 tdnn4.affine:0.782373 lstm2.W_all:0.285245 lstm2.lstm_nonlin:0.107781 lstm2.W_rp:0.219546 tdnn5.affine:0.60282 tdnn6.affine:0.693418 lstm3.W_all:0.287886 lstm3.lstm_nonlin:0.106519 lstm3.W_rp:0.125704 output.affine:0.214889 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:06:40 KST 2020, elapsed time 0 seconds
