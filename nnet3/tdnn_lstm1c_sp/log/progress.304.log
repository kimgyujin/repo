# nnet3-info exp/nnet3/tdnn_lstm1c_sp/304.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/303.mdl exp/nnet3/tdnn_lstm1c_sp/304.mdl 
# Started at Thu Jul 30 12:01:25 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/304.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000189136, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03149, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.008,0.01 0.01,0.03,0.55,0.68,0.78 0.84,0.94,0.99,1.1), mean=0.462, stddev=0.289], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.17,0.21,0.62,0.88,1.2 1.3,1.5,1.5,1.5), mean=0.616, stddev=0.37], bias-{mean,stddev}=-0.001205,0.06001, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0.202133, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-05,2e-05,4e-05 7e-05,0.0002,0.05,0.09,0.11 0.12,0.15,0.16,0.19), mean=0.0507, stddev=0.0439], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.007,0.008,0.02 0.04,0.06,0.42,0.59,0.72 0.80,0.87,0.93,0.99), mean=0.373, stddev=0.263], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.009,0.01,0.02 0.02,0.05,0.28,0.37,0.42 0.53,0.66,0.72,1.5), mean=0.262, stddev=0.173], oderiv-count=1.22477e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36532.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-07,5e-06,8e-06,3e-05 6e-05,0.0002,0.05,0.09,0.11 0.12,0.15,0.16,0.20), mean=0.0496, stddev=0.0437], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0001,0.0002 0.0004,0.001,0.09,0.11,0.13 0.13,0.15,0.15,0.16), mean=0.0696, stddev=0.0495]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000189136, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01178, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.37 0.39,0.41,0.45,0.51,0.54 0.59,0.62,0.64,0.71), mean=0.461, stddev=0.065], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.005,0.006 0.008,0.02,0.28,0.33,0.36 0.39,0.44,0.51,0.73), mean=0.229, stddev=0.141], bias-{mean,stddev}=-0.02823,0.04043, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.23 0.24,0.25,0.28,0.32,0.33 0.36,0.38,0.42,0.45), mean=0.285, stddev=0.0413], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.37,0.39 0.41,0.42,0.44,0.47,0.49 0.51,0.52,0.53,0.55), mean=0.446, stddev=0.036], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.05 0.06,0.06,0.07,0.07), mean=0.044, stddev=0.00717], oderiv-count=1.15987e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35752.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.23 0.24,0.25,0.28,0.32,0.35 0.37,0.40,0.43,0.50), mean=0.29, stddev=0.0452], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.46,0.47,0.52,0.57,0.61 0.64,0.67,0.68,0.71), mean=0.526, stddev=0.0593]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000189136, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01776, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,2e-06,4e-06,2e-05 0.0007,0.16,0.42,0.59,0.68 0.73,0.79,0.84,1.0), mean=0.389, stddev=0.232], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.39,0.45 0.52,0.71,0.82,0.90,0.97 1.0,1.1,1.1,1.3), mean=0.794, stddev=0.163], bias-{mean,stddev}=0.003755,0.02902, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000189136, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.07852, w_fc-rms=0.03315, w_oc-rms=0.04637, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638381, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.72,0.79,0.82,0.86), mean=0.497, stddev=0.0799], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.0232] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638381, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.45,0.47,0.48 0.49,0.50,0.51,0.55,0.60 0.68,0.78,0.81,0.87), mean=0.531, stddev=0.0669], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.17 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0245] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0347443, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.89,-0.87,-0.50 -0.28,-0.12,0.0003,0.16,0.32 0.56,0.87,0.89,0.92), mean=0.0182, stddev=0.306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.20,0.23 0.37,0.45,0.58,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.609, stddev=0.22] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638381, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.40,0.41 0.42,0.43,0.46,0.50,0.50 0.51,0.55,0.58,0.73), mean=0.463, stddev=0.0397], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0204] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00638381, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.66,-0.61,-0.31 -0.15,-0.07,0.0004,0.09,0.20 0.33,0.61,0.67,0.73), mean=0.0114, stddev=0.203], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.50,0.60 0.79,0.84,0.91,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.886, stddev=0.11] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.3707e-05, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000279418, count-zeroing-boundaries=295257
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.299174
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000189136, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04025, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.37,0.42 0.45,0.53,0.88,1.2,1.3 1.3,1.4,1.4,1.4), mean=0.859, stddev=0.324], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0009,0.001,0.003 0.01,0.33,0.53,0.73,0.92 1.2,1.5,1.7,1.9), mean=0.545, stddev=0.353], bias-{mean,stddev}=0.01281,0.2676, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000189136, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01358, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.22,0.24,0.26 0.28,0.30,0.37,0.43,0.47 0.50,0.53,0.55,0.61), mean=0.371, stddev=0.0787], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.15,0.17,0.30,0.40,0.43 0.45,0.47,0.48,0.51), mean=0.288, stddev=0.113], bias-{mean,stddev}=0.002204,0.0102, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.82e+05, self-repaired-proportion=0.00199956, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.01,0.02,0.03 0.04,0.06,0.08,0.10,0.12 0.13,0.14,0.14,0.17), mean=0.08, stddev=0.0299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.12,0.15,0.22 0.27,0.38,0.52,0.62,0.66 0.69,0.72,0.75,0.85), mean=0.498, stddev=0.145], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.09,0.10,0.10 0.11,0.11,0.13,0.16,0.18 0.23,0.27,0.29,0.36), mean=0.14, stddev=0.0422], oderiv-count=1.09421e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33410.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.01,0.02,0.03 0.04,0.05,0.08,0.10,0.12 0.13,0.14,0.15,0.18), mean=0.0789, stddev=0.0298], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.06,0.07,0.08 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.18,0.20), mean=0.12, stddev=0.0244]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000189136, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008821, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.29 0.30,0.31,0.34,0.38,0.41 0.43,0.46,0.47,0.54), mean=0.346, stddev=0.0448], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.12,0.13,0.14 0.15,0.16,0.19,0.23,0.26 0.28,0.31,0.32,0.39), mean=0.196, stddev=0.0455], bias-{mean,stddev}=-0.02342,0.02057, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.22 0.22,0.24,0.26,0.29,0.31 0.32,0.34,0.35,0.40), mean=0.265, stddev=0.0327], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.38,0.39 0.40,0.41,0.44,0.46,0.47 0.48,0.49,0.50,0.52), mean=0.437, stddev=0.0276], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0359, stddev=0.00319], oderiv-count=1.09648e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31068, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.23,0.24,0.27,0.30,0.31 0.33,0.35,0.36,0.40), mean=0.27, stddev=0.0347], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.39,0.41,0.42 0.44,0.46,0.50,0.56,0.60 0.64,0.69,0.71,0.85), mean=0.515, stddev=0.069]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000189136, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01483, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-06,3e-06,9e-06 4e-05,0.0007,0.34,0.53,0.60 0.64,0.69,0.71,0.90), mean=0.292, stddev=0.241], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.31,0.33,0.39 0.48,0.61,0.67,0.74,0.78 0.85,0.97,1.0,1.4), mean=0.663, stddev=0.134], bias-{mean,stddev}=0.006481,0.03602, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000189136, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05024, w_fc-rms=0.01819, w_oc-rms=0.03777, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643897, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.45,0.45 0.46,0.47,0.50,0.52,0.57 0.60,0.69,0.73,0.81), mean=0.508, stddev=0.0536], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0183] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643897, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.46,0.48 0.49,0.50,0.50,0.55,0.59 0.64,0.68,0.70,0.77), mean=0.525, stddev=0.0487], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0212] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0090868, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.84,-0.77,-0.48 -0.28,-0.12,0.001,0.15,0.34 0.56,0.75,0.77,0.86), mean=0.0129, stddev=0.282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.26,0.27,0.38 0.45,0.53,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.713, stddev=0.228] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643897, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.45 0.46,0.47,0.50,0.50,0.52 0.54,0.57,0.58,0.63), mean=0.494, stddev=0.0277], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.21,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.019] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00643897, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.67,-0.57,-0.43,-0.29 -0.16,-0.06,0.0003,0.08,0.20 0.37,0.46,0.52,0.59), mean=0.00854, stddev=0.175], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.61,0.63,0.74 0.79,0.86,0.93,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.914, stddev=0.0906] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=5.79519e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000136337, count-zeroing-boundaries=260383
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.299174
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000189136, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03917, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.50,0.53 0.57,0.61,0.86,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.859, stddev=0.246], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.004,0.01,0.56,0.81,0.96 1.1,1.3,1.5,1.7), mean=0.489, stddev=0.4], bias-{mean,stddev}=0.002802,0.2161, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000189136, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01301, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.27 0.28,0.30,0.35,0.41,0.45 0.49,0.52,0.53,0.61), mean=0.357, stddev=0.0658], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.16 0.18,0.19,0.27,0.38,0.41 0.43,0.45,0.46,0.50), mean=0.282, stddev=0.091], bias-{mean,stddev}=0.0003995,0.005816, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.29e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.06,0.09,0.10 0.11,0.12,0.12,0.15), mean=0.0652, stddev=0.0266], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.16,0.20 0.24,0.34,0.50,0.61,0.66 0.68,0.70,0.72,0.75), mean=0.48, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.14,0.17,0.20 0.22,0.24,0.25,0.28), mean=0.15, stddev=0.0323], oderiv-count=955584
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28725.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.0682, stddev=0.0269], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.08,0.09,0.11,0.12,0.13 0.14,0.14,0.15,0.16), mean=0.106, stddev=0.0202]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000189136, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008633, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.17,0.22 0.27,0.30,0.33,0.39,0.41 0.42,0.45,0.46,0.50), mean=0.335, stddev=0.0611], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.15,0.18,0.23,0.26 0.29,0.31,0.33,0.41), mean=0.191, stddev=0.0461], bias-{mean,stddev}=-0.01644,0.02592, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.14e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.20 0.23,0.24,0.28,0.31,0.32 0.33,0.34,0.35,0.41), mean=0.275, stddev=0.0418], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.38 0.39,0.40,0.43,0.46,0.47 0.48,0.49,0.50,0.54), mean=0.431, stddev=0.0331], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0297, stddev=0.0027], oderiv-count=927680
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26383.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.15,0.17,0.20 0.23,0.25,0.29,0.32,0.33 0.35,0.37,0.38,0.51), mean=0.283, stddev=0.0464], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.26,0.29,0.37 0.43,0.47,0.54,0.61,0.66 0.69,0.74,0.78,1.0), mean=0.539, stddev=0.1]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000189136, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02103, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.28,0.29,0.31 0.32,0.37,0.50,0.65,0.72 0.76,0.84,0.90,1.0), mean=0.515, stddev=0.148], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.67,0.69,0.75 0.78,0.82,0.89,1.1,1.2 1.3,1.4,1.5,1.9), mean=0.943, stddev=0.173], bias-{mean,stddev}=0.01437,0.01906, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000189136, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1005, w_fc-rms=0.04763, w_oc-rms=0.07354, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650557, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.58,0.61,0.63 0.65,0.68,0.73,0.78,0.81 0.83,0.85,0.87,0.89), mean=0.73, stddev=0.0612], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.22), mean=0.165, stddev=0.025] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650557, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.50,0.58,0.60 0.62,0.65,0.71,0.75,0.80 0.83,0.86,0.88,0.89), mean=0.705, stddev=0.07], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.23), mean=0.167, stddev=0.025] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0345463, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.87,-0.78,-0.63 -0.45,-0.34,0.004,0.32,0.47 0.61,0.81,0.85,0.92), mean=-0.00718, stddev=0.373], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.18,0.23 0.29,0.36,0.46,0.52,0.55 0.57,0.59,0.60,0.65), mean=0.443, stddev=0.101] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650557, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.51,0.54 0.56,0.60,0.65,0.68,0.72 0.74,0.76,0.82,0.89), mean=0.643, stddev=0.0623], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.176, stddev=0.0187] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00650557, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.71,-0.62,-0.51 -0.36,-0.25,0.007,0.24,0.35 0.49,0.65,0.66,0.75), mean=-0.00687, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.44,0.48 0.55,0.64,0.71,0.76,0.78 0.80,0.82,0.83,0.85), mean=0.69, stddev=0.0913] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.37531e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221407
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.299174
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000189136, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09123, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.8,2.6,2.7 2.8,2.9,2.9,3.1), mean=1.98, stddev=0.627], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.93,0.98,1.1 1.1,1.2,1.4,1.6,1.9 2.1,2.2,2.3,2.4), mean=1.44, stddev=0.3], bias-{mean,stddev}=-7.014e-05,0.7042, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000189136, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0444, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.61,0.63 0.64,0.66,0.70,0.75,0.78 0.82,0.87,0.93,2.1), mean=0.711, stddev=0.0846], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.2,1.2 1.3,1.3,1.7,2.6,2.6 2.7,2.8,2.8,2.9), mean=1.95, stddev=0.583], bias-{mean,stddev}=4.575e-09,0.02409, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0168, stddev=0.0137], oderiv-count=630400
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/303.mdl exp/nnet3/tdnn_lstm1c_sp/304.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.18201 tdnn2.affine:4.07402 lstm1.W_all:3.19059 lstm1.lstm_nonlin:0.0756833 lstm1.W_rp:1.29732 tdnn3.affine:3.00157 tdnn4.affine:3.15475 lstm2.W_all:2.30361 lstm2.lstm_nonlin:0.0405244 lstm2.W_rp:0.920547 tdnn5.affine:2.52382 tdnn6.affine:2.61484 lstm3.W_all:2.3185 lstm3.lstm_nonlin:0.0605683 lstm3.W_rp:0.955171 output.affine:2.63594 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.5107 tdnn2.affine:10.6688 lstm1.W_all:20.694 lstm1.lstm_nonlin:2.21254 lstm1.W_rp:15.4172 tdnn3.affine:8.65403 tdnn4.affine:7.97641 lstm2.W_all:17.3284 lstm2.lstm_nonlin:1.49204 lstm2.W_rp:14.8165 tdnn5.affine:8.28784 tdnn6.affine:7.80662 lstm3.W_all:24.4792 lstm3.lstm_nonlin:3.03984 lstm3.W_rp:35.4162 output.affine:32.8603 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.336095 tdnn2.affine:0.382979 lstm1.W_all:0.154043 lstm1.lstm_nonlin:0.0344712 lstm1.W_rp:0.0841441 tdnn3.affine:0.347981 tdnn4.affine:0.395762 lstm2.W_all:0.132837 lstm2.lstm_nonlin:0.0273727 lstm2.W_rp:0.0621299 tdnn5.affine:0.30474 tdnn6.affine:0.333854 lstm3.W_all:0.0945532 lstm3.lstm_nonlin:0.0198898 lstm3.W_rp:0.0270113 output.affine:0.0802233 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:01:25 KST 2020, elapsed time 0 seconds
