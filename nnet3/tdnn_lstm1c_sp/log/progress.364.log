# nnet3-info exp/nnet3/tdnn_lstm1c_sp/364.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/363.mdl exp/nnet3/tdnn_lstm1c_sp/364.mdl 
# Started at Thu Jul 30 12:25:20 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/364.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000129266, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03214, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.005,0.007 0.009,0.02,0.56,0.71,0.79 0.86,0.94,0.96,1.2), mean=0.466, stddev=0.305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.22,0.65,0.91,1.2 1.3,1.5,1.5,1.5), mean=0.634, stddev=0.367], bias-{mean,stddev}=-0.003993,0.06151, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.99e+05, self-repaired-proportion=0.181879, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,2e-05,3e-05,4e-05 5e-05,0.0001,0.05,0.09,0.11 0.12,0.14,0.17,0.18), mean=0.0479, stddev=0.0452], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.02,0.03 0.05,0.07,0.39,0.60,0.72 0.80,0.86,0.89,0.99), mean=0.356, stddev=0.265], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.01 0.02,0.03,0.33,0.45,0.54 0.64,0.82,0.86,1.5), mean=0.306, stddev=0.222], oderiv-count=1.07885e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37955.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,9e-06,1e-05,2e-05 4e-05,0.0002,0.04,0.09,0.10 0.12,0.14,0.16,0.19), mean=0.0455, stddev=0.0438], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,9e-05,0.0001,0.0002 0.0003,0.0008,0.08,0.11,0.13 0.14,0.14,0.15,0.16), mean=0.0639, stddev=0.0499]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000129266, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01166, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.34,0.36 0.38,0.40,0.45,0.50,0.54 0.58,0.63,0.65,0.76), mean=0.455, stddev=0.067], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.005,0.01,0.28,0.33,0.37 0.39,0.43,0.49,0.74), mean=0.222, stddev=0.146], bias-{mean,stddev}=-0.03521,0.0399, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.22,0.23,0.26,0.30,0.32 0.33,0.36,0.38,0.45), mean=0.265, stddev=0.0416], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.37,0.37,0.39 0.40,0.41,0.44,0.47,0.49 0.50,0.52,0.53,0.56), mean=0.442, stddev=0.0365], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.06,0.06 0.07,0.07,0.08,0.09), mean=0.0489, stddev=0.00936], oderiv-count=1.09427e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37148.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.21 0.22,0.23,0.27,0.30,0.33 0.35,0.37,0.40,0.51), mean=0.269, stddev=0.0454], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.40 0.42,0.44,0.48,0.54,0.56 0.60,0.62,0.64,0.74), mean=0.489, stddev=0.0597]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000129266, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01761, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,7e-07,2e-06,1e-05 0.0003,0.17,0.41,0.59,0.66 0.73,0.79,0.85,1.0), mean=0.385, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.36,0.37,0.42 0.50,0.71,0.81,0.90,0.96 1.0,1.1,1.2,1.3), mean=0.785, stddev=0.168], bias-{mean,stddev}=0.00272,0.02765, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000129266, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0855, w_fc-rms=0.02645, w_oc-rms=0.04758, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639735, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.43 0.44,0.45,0.48,0.50,0.54 0.71,0.77,0.79,0.85), mean=0.495, stddev=0.0756], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.19 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0209] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639735, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.45,0.46,0.47 0.48,0.49,0.50,0.53,0.58 0.65,0.73,0.79,0.83), mean=0.519, stddev=0.0602], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0203] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.017504, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.88,-0.86,-0.43 -0.26,-0.13,0.0007,0.15,0.30 0.60,0.84,0.87,0.90), mean=0.0176, stddev=0.298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.22,0.27 0.38,0.45,0.58,0.74,1.0 1.0,1.0,1.0,1.0), mean=0.611, stddev=0.214] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639735, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.56,0.58,0.69), mean=0.462, stddev=0.041], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0198] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00639735, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.73,-0.67,-0.30 -0.17,-0.08,0.0006,0.10,0.21 0.41,0.63,0.72,0.80), mean=0.0118, stddev=0.225], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.42,0.54 0.74,0.81,0.88,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.861, stddev=0.13] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=4.04537e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=8.60259e-05, count-zeroing-boundaries=296422
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.2
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000129266, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03983, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.42,0.45 0.50,0.55,0.86,1.2,1.2 1.3,1.3,1.4,1.4), mean=0.86, stddev=0.291], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0007,0.0009,0.002 0.008,0.34,0.55,0.72,0.92 1.2,1.4,1.5,1.8), mean=0.544, stddev=0.341], bias-{mean,stddev}=0.01374,0.2599, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000129266, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01284, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.22,0.25,0.26 0.28,0.30,0.35,0.40,0.43 0.47,0.50,0.53,0.57), mean=0.353, stddev=0.0652], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.17,0.28,0.38,0.40 0.43,0.44,0.45,0.48), mean=0.276, stddev=0.098], bias-{mean,stddev}=0.001662,0.008551, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0.0019354, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.01,0.02,0.02 0.03,0.05,0.08,0.11,0.12 0.13,0.15,0.15,0.17), mean=0.0775, stddev=0.0327], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.11,0.13,0.17 0.23,0.34,0.47,0.59,0.63 0.67,0.71,0.73,0.82), mean=0.457, stddev=0.149], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.09,0.09,0.10 0.10,0.11,0.12,0.16,0.19 0.23,0.27,0.27,0.37), mean=0.137, stddev=0.0439], oderiv-count=1.1591e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34727.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.01,0.01,0.02 0.03,0.05,0.08,0.10,0.12 0.13,0.14,0.15,0.17), mean=0.0766, stddev=0.032], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.05,0.06,0.07 0.09,0.10,0.12,0.14,0.16 0.16,0.17,0.18,0.19), mean=0.122, stddev=0.0274]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000129266, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008394, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.26,0.27 0.29,0.30,0.32,0.36,0.38 0.40,0.42,0.43,0.47), mean=0.329, stddev=0.0392], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.12,0.13,0.14 0.15,0.16,0.18,0.22,0.24 0.26,0.29,0.30,0.38), mean=0.187, stddev=0.0401], bias-{mean,stddev}=-0.02667,0.01906, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.22,0.25,0.28,0.29 0.30,0.32,0.32,0.36), mean=0.252, stddev=0.0307], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.35,0.36,0.38 0.39,0.40,0.43,0.45,0.46 0.47,0.48,0.49,0.50), mean=0.426, stddev=0.0286], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0364, stddev=0.00282], oderiv-count=982112
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32306.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.21,0.23,0.25,0.28,0.30 0.31,0.33,0.34,0.39), mean=0.255, stddev=0.0328], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.35,0.38,0.41 0.42,0.44,0.48,0.53,0.56 0.61,0.64,0.65,0.88), mean=0.49, stddev=0.0621]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000129266, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01445, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,6e-06,2e-05 6e-05,0.001,0.33,0.52,0.58 0.62,0.67,0.71,0.90), mean=0.285, stddev=0.233], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.29,0.35 0.44,0.60,0.66,0.73,0.77 0.81,0.88,0.94,1.3), mean=0.646, stddev=0.131], bias-{mean,stddev}=0.005726,0.03236, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000129266, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0535, w_fc-rms=0.01572, w_oc-rms=0.04093, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645396, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.46 0.46,0.48,0.50,0.51,0.56 0.60,0.66,0.69,0.78), mean=0.505, stddev=0.0471], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0163] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645396, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.46,0.48 0.49,0.50,0.50,0.53,0.56 0.60,0.65,0.66,0.73), mean=0.517, stddev=0.0405], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0174] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00645396, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.80,-0.75,-0.43 -0.23,-0.09,0.0009,0.12,0.32 0.53,0.67,0.71,0.78), mean=0.00956, stddev=0.256], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.36,0.41 0.47,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.719, stddev=0.219] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645396, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.46,0.47,0.50,0.50,0.51 0.52,0.55,0.57,0.69), mean=0.49, stddev=0.0282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0186] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00645396, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.71,-0.60,-0.52,-0.31 -0.16,-0.07,0.0004,0.09,0.20 0.38,0.48,0.54,0.61), mean=0.00728, stddev=0.186], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.57,0.59,0.69 0.76,0.83,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.898, stddev=0.104] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=8.65955e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.53032e-05, count-zeroing-boundaries=261384
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.2
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000129266, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03815, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.50,0.54 0.56,0.61,0.84,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.839, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.002 0.004,0.01,0.56,0.81,0.93 1.1,1.3,1.4,1.5), mean=0.482, stddev=0.383], bias-{mean,stddev}=-0.000495,0.2073, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000129266, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01218, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.24,0.26 0.27,0.29,0.32,0.38,0.42 0.46,0.48,0.50,0.56), mean=0.335, stddev=0.0593], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.17,0.19,0.25,0.35,0.38 0.40,0.42,0.43,0.47), mean=0.265, stddev=0.0832], bias-{mean,stddev}=0.0009812,0.006107, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.21e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.13,0.13,0.15), mean=0.0641, stddev=0.0288], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.18 0.21,0.29,0.46,0.57,0.62 0.65,0.67,0.68,0.71), mean=0.437, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.11,0.13,0.16,0.19 0.21,0.22,0.23,0.27), mean=0.139, stddev=0.0326], oderiv-count=953152
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29886, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.11 0.12,0.13,0.13,0.15), mean=0.0673, stddev=0.0291], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.07,0.09,0.11,0.13,0.14 0.15,0.16,0.17,0.20), mean=0.111, stddev=0.0259]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000129266, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0084, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.15,0.21 0.26,0.29,0.33,0.38,0.40 0.41,0.43,0.44,0.46), mean=0.326, stddev=0.061], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.13 0.14,0.15,0.17,0.22,0.25 0.28,0.31,0.33,0.40), mean=0.186, stddev=0.0451], bias-{mean,stddev}=-0.0199,0.0235, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.51e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.15,0.19 0.21,0.24,0.27,0.30,0.31 0.32,0.34,0.35,0.39), mean=0.265, stddev=0.0425], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.37,0.39,0.42,0.45,0.46 0.47,0.48,0.49,0.53), mean=0.419, stddev=0.0338], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.0302, stddev=0.00306], oderiv-count=978400
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27465.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.16,0.19 0.22,0.24,0.28,0.31,0.32 0.33,0.34,0.38,0.51), mean=0.274, stddev=0.0455], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.25,0.33 0.41,0.46,0.53,0.60,0.64 0.67,0.71,0.72,1.2), mean=0.529, stddev=0.104]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000129266, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02074, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.28,0.29 0.31,0.35,0.49,0.66,0.72 0.76,0.85,0.90,0.98), mean=0.506, stddev=0.155], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.61,0.62,0.72 0.77,0.81,0.88,1.0,1.1 1.3,1.4,1.5,1.9), mean=0.929, stddev=0.174], bias-{mean,stddev}=0.01259,0.01635, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000129266, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1086, w_fc-rms=0.04443, w_oc-rms=0.07478, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652234, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.59,0.60,0.63 0.65,0.68,0.72,0.76,0.79 0.82,0.84,0.85,0.89), mean=0.721, stddev=0.0555], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.14,0.15,0.17,0.18,0.19 0.20,0.20,0.21,0.22), mean=0.167, stddev=0.022] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652234, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.53,0.56,0.58 0.60,0.63,0.68,0.72,0.77 0.80,0.84,0.86,0.88), mean=0.679, stddev=0.0649], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.13 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.177, stddev=0.0234] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0287632, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.80,-0.74,-0.59 -0.45,-0.31,-0.008,0.29,0.43 0.59,0.79,0.84,0.92), mean=-0.00407, stddev=0.355], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.20,0.23 0.30,0.36,0.44,0.49,0.52 0.54,0.56,0.57,0.60), mean=0.425, stddev=0.087] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652234, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.50,0.53 0.55,0.59,0.64,0.67,0.70 0.71,0.77,0.80,0.87), mean=0.633, stddev=0.0599], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.176, stddev=0.0177] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00652234, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.71,-0.64,-0.52 -0.38,-0.27,-0.007,0.24,0.36 0.54,0.70,0.76,0.83), mean=-0.00512, stddev=0.311], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.32,0.35,0.39 0.47,0.55,0.64,0.69,0.72 0.74,0.75,0.76,0.81), mean=0.618, stddev=0.099] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.49992e-06, count-zeroing-boundaries=222226
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.2
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000129266, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09003, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.1,1.1 1.2,1.3,1.7,2.6,2.7 2.8,2.8,2.9,3.1), mean=1.95, stddev=0.639], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.89,1.0,1.1 1.1,1.2,1.4,1.6,1.8 2.0,2.1,2.2,2.3), mean=1.43, stddev=0.276], bias-{mean,stddev}=-0.02268,0.6424, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000129266, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.043, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.59,0.61 0.62,0.64,0.68,0.72,0.76 0.79,0.84,0.90,2.1), mean=0.689, stddev=0.0816], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.1,1.1 1.2,1.2,1.7,2.5,2.6 2.7,2.7,2.8,2.9), mean=1.88, stddev=0.595], bias-{mean,stddev}=5.043e-09,0.02139, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0136], oderiv-count=592640
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/363.mdl exp/nnet3/tdnn_lstm1c_sp/364.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.4961 tdnn2.affine:3.29708 lstm1.W_all:2.54501 lstm1.lstm_nonlin:0.0493127 lstm1.W_rp:1.099 tdnn3.affine:2.33867 tdnn4.affine:2.41085 lstm2.W_all:1.75459 lstm2.lstm_nonlin:0.0304388 lstm2.W_rp:0.74436 tdnn5.affine:1.95433 tdnn6.affine:2.07431 lstm3.W_all:2.04311 lstm3.lstm_nonlin:0.0508756 lstm3.W_rp:0.786394 output.affine:2.07447 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.7723 tdnn2.affine:10.5674 lstm1.W_all:20.5197 lstm1.lstm_nonlin:2.31128 lstm1.W_rp:15.2347 tdnn3.affine:8.18094 tdnn4.affine:7.5972 lstm2.W_all:16.8677 lstm2.lstm_nonlin:1.57728 lstm2.W_rp:14.4209 tdnn5.affine:7.75874 tdnn6.affine:7.59799 lstm3.W_all:24.1293 lstm3.lstm_nonlin:3.17309 lstm3.W_rp:34.6884 output.affine:31.8186 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.273643 tdnn2.affine:0.311815 lstm1.W_all:0.124005 lstm1.lstm_nonlin:0.0212812 lstm1.W_rp:0.0720891 tdnn3.affine:0.285314 tdnn4.affine:0.316178 lstm2.W_all:0.103946 lstm2.lstm_nonlin:0.01919 lstm2.W_rp:0.0515885 tdnn5.affine:0.251212 tdnn6.affine:0.272368 lstm3.W_all:0.0846732 lstm3.lstm_nonlin:0.0160557 lstm3.W_rp:0.0226585 output.affine:0.0651632 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:25:20 KST 2020, elapsed time 0 seconds
