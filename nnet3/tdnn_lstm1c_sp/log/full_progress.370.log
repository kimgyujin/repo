# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/369.mdl exp/nnet3/tdnn_lstm1c_sp/370.mdl 
# Started at Thu Jul 30 12:27:41 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/369.mdl exp/nnet3/tdnn_lstm1c_sp/370.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000125231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008801, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.004,0.009,0.16,0.19,0.21 0.23,0.25,0.26,0.30), mean=0.129, stddev=0.0807], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.07,0.18,0.24,0.28 0.35,0.41,0.43,0.54), mean=0.175, stddev=0.0978], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.009,0.01 0.02,0.03,0.10,0.26,0.35 0.43,0.50,0.55,0.66), mean=0.146, stddev=0.138], bias-{mean,stddev}=0.001038,0.01089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1033.12, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.54,-0.44,-0.27 -0.12,-0.01,0.02,0.27,0.44 0.54,0.65,0.75,0.88), mean=0.0972, stddev=0.239], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.06,0.15 0.19,0.24,0.27,0.39), mean=0.0343, stddev=0.069]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000125231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003626, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.12 0.13,0.13,0.14,0.15,0.16 0.16,0.17,0.17,0.19), mean=0.143, stddev=0.0116], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.001 0.002,0.005,0.09,0.10,0.11 0.12,0.13,0.14,0.16), mean=0.0701, stddev=0.0438], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.03,0.08,0.17,0.25 0.31,0.37,0.40,0.44), mean=0.109, stddev=0.0928], bias-{mean,stddev}=0.0003035,0.006149, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1033.12, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.57,-0.45,-0.25 -0.08,0.10,0.42,0.74,0.89 1.0,1.3,1.4,1.8), mean=0.416, stddev=0.404], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.54,0.88,1.0 1.2,1.3,1.3,1.6), mean=0.502, stddev=0.412]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000125231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002157, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-09,6e-08,1e-07,8e-07 3e-05,0.02,0.05,0.07,0.09 0.10,0.11,0.12,0.15), mean=0.0457, stddev=0.0305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.04,0.10,0.12,0.12 0.13,0.14,0.14,0.17), mean=0.092, stddev=0.0348], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,8e-08,1e-07 2e-07,0.02,0.05,0.11,0.16 0.22,0.28,0.31,0.36), mean=0.0705, stddev=0.0686], bias-{mean,stddev}=1.065e-05,0.0006807, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000125231, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0008699, w_fc-rms=0.0008378, w_oc-rms=0.001886, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-5.93262e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.07,0.14,0.17,0.29 0.35,0.40,0.50,0.60,0.67 0.71,0.80,0.81,0.91), mean=0.499, stddev=0.132], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.07,0.03,0.06,0.10 0.14,0.19,0.25,0.28,0.32 0.36,0.43,0.44,0.57), mean=0.239, stddev=0.0778] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-5.93262e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.19,0.25,0.29 0.35,0.42,0.50,0.56,0.61 0.68,0.74,0.83,1.1), mean=0.493, stddev=0.115], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.03,0.11,0.13,0.15 0.18,0.21,0.25,0.27,0.30 0.33,0.36,0.37,0.55), mean=0.242, stddev=0.0535] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.404165, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-1.8,-1.5,-1.2 -0.96,-0.52,0.005,0.60,0.96 1.2,1.5,1.7,3.5), mean=0.036, stddev=0.748], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-0.91,-0.80,-0.45 -0.13,0.20,0.86,1.2,1.5 1.7,2.0,2.3,2.7), mean=0.736, stddev=0.648] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-5.93262e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.04,0.07,0.12,0.18 0.29,0.36,0.50,0.58,0.65 0.74,0.81,0.84,1.2), mean=0.477, stddev=0.156], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.07,0.0008,0.03,0.08 0.12,0.17,0.25,0.28,0.32 0.38,0.42,0.47,0.59), mean=0.231, stddev=0.0871] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-5.93262e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-1.2,-1.0,-0.86 -0.63,-0.31,0.003,0.40,0.66 0.82,1.0,1.3,2.2), mean=0.0292, stddev=0.5], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.32,0.11,0.20,0.31 0.47,0.64,0.90,1.0,1.1 1.2,1.3,1.4,1.6), mean=0.847, stddev=0.273] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.65e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2478
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.191736
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000125231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002903, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.06,0.08,0.09 0.09,0.10,0.10,0.10), mean=0.0628, stddev=0.021], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,6e-05,8e-05,0.0002 0.0006,0.03,0.05,0.06,0.06 0.07,0.07,0.08,0.08), mean=0.042, stddev=0.0207], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.07,0.13 0.17,0.20,0.21,0.25), mean=0.03, stddev=0.059], bias-{mean,stddev}=1.981e-05,0.002583, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000125231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003588, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.07,0.07,0.08 0.08,0.09,0.10,0.11,0.12 0.13,0.13,0.14,0.15), mean=0.0989, stddev=0.0161], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.05,0.08,0.10,0.11 0.12,0.12,0.13,0.14), mean=0.0771, stddev=0.0274], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-09,3e-08,3e-08,4e-08 5e-08,9e-08,1e-05,0.11,0.19 0.25,0.30,0.32,0.36), mean=0.0516, stddev=0.0859], bias-{mean,stddev}=2.886e-06,0.002131, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.15,0.32,0.42 0.51,0.67,0.77,1.6), mean=0.175, stddev=0.196], oderiv-count=17280
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1033.12, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.71,-0.32,-0.29,-0.21 -0.13,-0.05,0.11,0.27,0.36 0.44,0.49,0.53,0.78), mean=0.113, stddev=0.196], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.09,0.19,0.24 0.27,0.31,0.32,0.44), mean=0.0993, stddev=0.0994]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000125231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002632, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.09,0.10,0.10,0.11,0.11 0.12,0.12,0.12,0.13), mean=0.104, stddev=0.00762], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.04,0.04,0.05 0.05,0.05,0.06,0.07,0.07 0.07,0.08,0.08,0.09), mean=0.0594, stddev=0.00845], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.04,0.07,0.13,0.17 0.21,0.25,0.26,0.29), mean=0.0869, stddev=0.0571], bias-{mean,stddev}=-7.466e-05,0.002659, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.03,0.05,0.06,0.07 0.07,0.08,0.08,0.10), mean=0.0422, stddev=0.0215], oderiv-count=38304
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1033.12, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.29,-0.21,-0.11 -0.01,0.12,0.33,0.54,0.63 0.71,0.82,0.87,1.1), mean=0.325, stddev=0.256], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.58,0.82,0.94 1.1,1.2,1.3,1.8), mean=0.518, stddev=0.365]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000125231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001478, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-07,5e-07,2e-06 6e-06,0.0001,0.03,0.05,0.06 0.07,0.08,0.09,0.10), mean=0.0281, stddev=0.0251], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.04,0.07,0.08,0.08 0.09,0.09,0.10,0.10), mean=0.0634, stddev=0.0228], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,5e-08,6e-08,8e-08 2e-05,0.01,0.03,0.07,0.11 0.15,0.20,0.22,0.26), mean=0.0468, stddev=0.0485], bias-{mean,stddev}=3.967e-05,0.0007172, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000125231, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0005955, w_fc-rms=0.0005587, w_oc-rms=0.0008223, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-6.18502e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.26,0.30,0.35 0.39,0.45,0.50,0.54,0.60 0.63,0.66,0.73,0.93), mean=0.497, stddev=0.0838], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.12,0.14 0.17,0.21,0.25,0.27,0.30 0.32,0.36,0.40,0.43), mean=0.241, stddev=0.0528] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-6.18502e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.26,0.28,0.34 0.39,0.43,0.50,0.52,0.58 0.61,0.64,0.69,0.76), mean=0.485, stddev=0.081], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.15,0.18 0.20,0.23,0.25,0.26,0.29 0.33,0.35,0.36,0.40), mean=0.247, stddev=0.0412] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0217306, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-1.4,-1.1,-0.92 -0.65,-0.31,-0.0003,0.35,0.67 0.87,1.1,1.4,1.6), mean=-0.0025, stddev=0.517], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.57,-0.34,-0.008 0.20,0.42,0.98,1.0,1.2 1.5,1.8,1.9,2.5), mean=0.805, stddev=0.468] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-6.18502e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.17,0.27,0.32 0.37,0.44,0.50,0.54,0.61 0.66,0.74,0.78,0.90), mean=0.493, stddev=0.101], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.09,0.06,0.09,0.12 0.16,0.21,0.25,0.27,0.31 0.35,0.37,0.38,0.42), mean=0.24, stddev=0.061] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-6.18502e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-1.0,-0.87,-0.66 -0.44,-0.21,-0.0005,0.21,0.42 0.56,0.71,0.83,1.1), mean=-0.00738, stddev=0.344], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.36,0.39,0.54 0.64,0.77,0.99,1.0,1.1 1.2,1.2,1.4,1.8), mean=0.912, stddev=0.198] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.42e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2148
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.191736
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000125231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001975, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.06,0.06 0.06,0.06,0.06,0.07), mean=0.0434, stddev=0.012], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0001,0.0002 0.0003,0.001,0.03,0.04,0.04 0.05,0.05,0.05,0.06), mean=0.0259, stddev=0.0186], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,1e-06,0.06,0.09 0.11,0.13,0.13,0.14), mean=0.0228, stddev=0.0388], bias-{mean,stddev}=7.69e-05,0.002044, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000125231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002994, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.07,0.07,0.08,0.09,0.10 0.11,0.11,0.12,0.13), mean=0.0826, stddev=0.0127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.05,0.06,0.08,0.09 0.09,0.10,0.10,0.11), mean=0.0655, stddev=0.0191], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 6e-08,1e-07,0.001,0.10,0.15 0.20,0.24,0.27,0.30), mean=0.0464, stddev=0.0696], bias-{mean,stddev}=0.0001581,0.001379, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.05 0.07,0.09,0.13,0.18,0.21 0.23,0.26,0.30,0.35), mean=0.134, stddev=0.0569], oderiv-count=129408
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1033.12, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.40,-0.24,-0.23,-0.16 -0.12,-0.05,0.05,0.18,0.25 0.31,0.40,0.42,0.54), mean=0.0645, stddev=0.145], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.16,0.19 0.23,0.26,0.28,0.34), mean=0.0779, stddev=0.0843]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000125231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002256, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.08,0.09,0.10,0.10 0.10,0.11,0.11,0.12), mean=0.0885, stddev=0.0106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.05,0.05,0.06,0.06 0.06,0.07,0.07,0.08), mean=0.051, stddev=0.00659], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.06,0.11,0.15 0.18,0.22,0.23,0.26), mean=0.073, stddev=0.0512], bias-{mean,stddev}=2.427e-05,0.002256, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.01,0.03,0.04,0.04 0.04,0.05,0.05,0.06), mean=0.0245, stddev=0.0144], oderiv-count=56320
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1033.12, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.51,-0.41,-0.25 -0.13,0.007,0.26,0.51,0.64 0.74,0.85,0.90,1.4), mean=0.259, stddev=0.308], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.51,0.87,1.0 1.2,1.3,1.4,1.8), mean=0.478, stddev=0.423]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000125231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001732, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.009,0.009,0.01 0.01,0.02,0.03,0.06,0.08 0.09,0.10,0.10,0.11), mean=0.0364, stddev=0.025], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.06,0.07,0.10,0.11 0.12,0.13,0.13,0.14), mean=0.0758, stddev=0.0221], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,9e-06 0.009,0.01,0.03,0.08,0.14 0.19,0.24,0.26,0.30), mean=0.0523, stddev=0.0592], bias-{mean,stddev}=-3.104e-05,0.0004966, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000125231, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0007623, w_fc-rms=0.0008831, w_oc-rms=0.002069, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-6.50314e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.67,-0.09,0.02,0.14 0.27,0.41,0.59,0.76,0.82 0.91,1.0,1.1,2.3), mean=0.575, stddev=0.247], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.53,0.003,0.03,0.08 0.11,0.15,0.21,0.27,0.30 0.34,0.38,0.41,0.67), mean=0.208, stddev=0.0866] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-6.50314e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.10,-0.02,0.12,0.22 0.29,0.40,0.60,0.79,0.87 0.99,1.1,1.1,1.4), mean=0.596, stddev=0.236], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,0.03,0.04,0.08 0.12,0.15,0.21,0.27,0.30 0.32,0.35,0.37,0.48), mean=0.205, stddev=0.0753] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.279015, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.6,-4.1,-3.7,-2.8 -1.9,-1.3,0.14,1.4,2.5 3.2,3.7,4.4,6.1), mean=0.142, stddev=1.76], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-1.2,-1.1,-0.85 -0.53,-0.15,0.47,1.1,1.5 1.7,1.9,2.0,3.5), mean=0.484, stddev=0.777] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-6.50314e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.72,-0.31,-0.22,-0.01 0.13,0.32,0.59,0.87,1.0 1.2,1.3,1.4,2.4), mean=0.586, stddev=0.358], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.63,-0.07,-0.03,0.02 0.07,0.11,0.19,0.27,0.32 0.34,0.38,0.41,0.68), mean=0.19, stddev=0.105] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-6.50314e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.2,-3.1,-2.7,-2.0 -1.5,-0.97,0.09,1.0,1.7 2.4,3.0,3.3,4.5), mean=0.0962, stddev=1.31], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-0.62,-0.40,-0.12 0.02,0.22,0.54,0.90,1.1 1.3,1.4,1.6,2.9), mean=0.551, stddev=0.463] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.19e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1774
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.191736
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000125231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002045, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.06,0.06 0.07,0.07,0.07,0.07), mean=0.0427, stddev=0.0187], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.04,0.04 0.04,0.05,0.05,0.06), mean=0.0323, stddev=0.00683], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,2e-07 3e-07,6e-07,0.005,0.06,0.09 0.11,0.13,0.14,0.16), mean=0.027, stddev=0.038], bias-{mean,stddev}=0.000686,0.01003, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000125231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00274, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.02,0.02 0.02,0.03,0.04,0.05,0.06 0.07,0.08,0.09,0.17), mean=0.0413, stddev=0.0157], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.07,0.07,0.10,0.16,0.17 0.18,0.18,0.18,0.19), mean=0.118, stddev=0.0431], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,3e-07 3e-07,6e-07,0.002,0.18,0.24 0.29,0.31,0.33,0.35), mean=0.0702, stddev=0.104], bias-{mean,stddev}=8.012e-11,0.0006509, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.04,0.05 0.06,0.07,0.08,0.22), mean=0.0213, stddev=0.0233], oderiv-count=14720

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.48517 tdnn2.affine:3.26876 lstm1.W_all:2.50847 lstm1.lstm_nonlin:0.0510732 lstm1.W_rp:1.06825 tdnn3.affine:2.28552 tdnn4.affine:2.37142 lstm2.W_all:1.71843 lstm2.lstm_nonlin:0.0264264 lstm2.W_rp:0.727029 tdnn5.affine:1.90688 tdnn6.affine:2.03274 lstm3.W_all:2.01417 lstm3.lstm_nonlin:0.0541548 lstm3.W_rp:0.76926 output.affine:2.02675 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.7771 tdnn2.affine:10.554 lstm1.W_all:20.5004 lstm1.lstm_nonlin:2.26694 lstm1.W_rp:15.202 tdnn3.affine:8.1471 tdnn4.affine:7.55515 lstm2.W_all:16.8255 lstm2.lstm_nonlin:1.55037 lstm2.W_rp:14.3433 tdnn5.affine:7.68802 tdnn6.affine:7.52914 lstm3.W_all:24.1054 lstm3.lstm_nonlin:3.17984 lstm3.W_rp:34.5554 output.affine:31.7289 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.271716 tdnn2.affine:0.308582 lstm1.W_all:0.122215 lstm1.lstm_nonlin:0.02245 lstm1.W_rp:0.0701871 tdnn3.affine:0.279049 tdnn4.affine:0.312723 lstm2.W_all:0.10205 lstm2.lstm_nonlin:0.0169943 lstm2.W_rp:0.0506137 tdnn5.affine:0.24717 tdnn6.affine:0.269317 lstm3.W_all:0.0835296 lstm3.lstm_nonlin:0.0170432 lstm3.W_rp:0.0222529 output.affine:0.0638529 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:27:42 KST 2020, elapsed time 1 seconds
