# nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/440.mdl 
# Started at Thu Jul 30 12:55:33 KST 2020
#
nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/440.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=7.98212e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03258, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.006 0.009,0.02,0.57,0.73,0.80 0.87,0.94,0.98,1.3), mean=0.472, stddev=0.31], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.19,0.23,0.68,0.94,1.1 1.3,1.4,1.4,1.5), mean=0.65, stddev=0.361], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.06,0.29,0.99,1.4 1.6,1.9,2.0,2.3), mean=0.508, stddev=0.542], bias-{mean,stddev}=-0.006944,0.06076, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.96e+05, self-repaired-proportion=0.167179, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,2e-05,2e-05,4e-05 5e-05,0.0001,0.04,0.09,0.11 0.12,0.14,0.16,0.17), mean=0.0435, stddev=0.0438], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.02,0.02,0.04 0.05,0.06,0.36,0.60,0.70 0.78,0.86,0.91,0.98), mean=0.342, stddev=0.266], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.01 0.02,0.04,0.41,0.61,0.74 0.82,0.95,1.1,1.9), mean=0.399, stddev=0.282], oderiv-count=1.17926e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40696, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,1e-05,2e-05,3e-05 6e-05,0.0002,0.04,0.08,0.10 0.12,0.14,0.16,0.17), mean=0.0419, stddev=0.0428], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,9e-05,0.0001,0.0002 0.0003,0.0009,0.07,0.11,0.12 0.13,0.13,0.14,0.16), mean=0.0584, stddev=0.0481]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.98212e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01148, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.34,0.35 0.37,0.39,0.44,0.50,0.54 0.58,0.62,0.64,0.75), mean=0.448, stddev=0.0688], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.005,0.01,0.28,0.33,0.37 0.39,0.42,0.48,0.77), mean=0.218, stddev=0.145], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.07,0.18,0.53,0.84 1.0,1.2,1.3,2.0), mean=0.316, stddev=0.325], bias-{mean,stddev}=-0.03544,0.03934, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.19 0.20,0.21,0.25,0.28,0.30 0.32,0.34,0.35,0.44), mean=0.249, stddev=0.0429], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.35,0.36,0.38 0.40,0.41,0.44,0.47,0.49 0.51,0.52,0.53,0.57), mean=0.442, stddev=0.0389], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.05,0.06,0.07 0.08,0.09,0.10,0.12), mean=0.0571, stddev=0.012], oderiv-count=1.20045e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39815.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.17,0.19 0.20,0.21,0.25,0.29,0.31 0.33,0.35,0.36,0.45), mean=0.253, stddev=0.0464], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.32,0.34,0.36 0.38,0.40,0.45,0.51,0.54 0.57,0.61,0.63,0.67), mean=0.456, stddev=0.0627]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.98212e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01743, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,5e-07,1e-06,8e-06 0.0002,0.18,0.40,0.58,0.66 0.72,0.80,0.87,1.1), mean=0.381, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.38,0.41 0.48,0.69,0.80,0.89,0.96 1.0,1.1,1.2,1.3), mean=0.776, stddev=0.171], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,4e-07,4e-07,5e-07 8e-07,0.14,0.33,0.83,1.4 1.8,2.3,2.5,3.9), mean=0.539, stddev=0.584], bias-{mean,stddev}=0.0009489,0.02358, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.98212e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05403, w_fc-rms=0.02176, w_oc-rms=0.0404, count=1.52e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639209, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.42,0.43 0.44,0.45,0.48,0.50,0.54 0.66,0.74,0.75,0.79), mean=0.491, stddev=0.0661], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.227, stddev=0.0166] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639209, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.43,0.45 0.46,0.47,0.50,0.52,0.55 0.62,0.68,0.71,0.78), mean=0.503, stddev=0.0522], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0143] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00667222, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.83,-0.80,-0.46 -0.28,-0.12,0.0006,0.15,0.26 0.60,0.76,0.83,0.87), mean=0.015, stddev=0.285], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.28,0.33 0.40,0.45,0.57,0.72,1.0 1.0,1.0,1.0,1.0), mean=0.614, stddev=0.205] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639209, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.40 0.41,0.42,0.46,0.50,0.50 0.52,0.56,0.58,0.64), mean=0.461, stddev=0.0415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0187] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00784178, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.78,-0.75,-0.37 -0.21,-0.10,0.0004,0.12,0.21 0.44,0.65,0.79,0.88), mean=0.0109, stddev=0.246], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.29,0.34,0.48 0.68,0.76,0.85,0.91,1.0 1.0,1.0,1.0,1.0), mean=0.827, stddev=0.148] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=7.5443e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.68437e-05, count-zeroing-boundaries=298021
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0743802
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.98212e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03864, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.44,0.46 0.51,0.56,0.84,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.84, stddev=0.266], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0005,0.0008,0.002 0.006,0.39,0.55,0.72,0.88 1.1,1.3,1.4,1.6), mean=0.538, stddev=0.314], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,3e-07,3e-07 4e-07,6e-07,1e-06,1.1,1.8 2.1,2.3,2.6,3.3), mean=0.41, stddev=0.78], bias-{mean,stddev}=0.01202,0.2617, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=7.98212e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01227, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.23,0.24,0.26 0.27,0.29,0.33,0.38,0.41 0.44,0.47,0.48,0.55), mean=0.338, stddev=0.0555], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.16,0.18,0.26,0.35,0.38 0.40,0.42,0.43,0.46), mean=0.266, stddev=0.0868], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,8e-08,1e-07 1e-07,2e-07,4e-05,0.35,0.67 0.89,1.0,1.1,1.2), mean=0.172, stddev=0.296], bias-{mean,stddev}=0.0008673,0.009631, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0.00153388, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.13 0.14,0.15,0.16,0.18), mean=0.0805, stddev=0.0366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.12,0.16 0.21,0.29,0.44,0.55,0.61 0.65,0.69,0.70,0.82), mean=0.425, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.09 0.10,0.10,0.12,0.15,0.19 0.22,0.26,0.27,0.35), mean=0.131, stddev=0.0405], oderiv-count=1.08147e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37173.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.13 0.14,0.15,0.16,0.18), mean=0.0794, stddev=0.0356], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.05,0.06,0.07 0.09,0.11,0.13,0.16,0.17 0.18,0.20,0.20,0.22), mean=0.132, stddev=0.0326]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.98212e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008071, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.26,0.27 0.27,0.29,0.31,0.35,0.36 0.38,0.40,0.41,0.43), mean=0.317, stddev=0.0356], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.12,0.13,0.14 0.15,0.15,0.17,0.20,0.23 0.24,0.27,0.29,0.37), mean=0.181, stddev=0.0342], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.07,0.09,0.15,0.39,0.59 0.72,0.81,0.85,0.96), mean=0.242, stddev=0.208], bias-{mean,stddev}=-0.02831,0.0171, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.21,0.24,0.27,0.28 0.30,0.31,0.32,0.35), mean=0.24, stddev=0.0326], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.35,0.37,0.38 0.38,0.40,0.42,0.44,0.46 0.47,0.48,0.48,0.50), mean=0.421, stddev=0.0288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.04,0.04,0.05,0.05), mean=0.0382, stddev=0.00273], oderiv-count=1.01402e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34531.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.24,0.27,0.29 0.30,0.32,0.32,0.38), mean=0.242, stddev=0.0342], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.37,0.39 0.41,0.42,0.47,0.52,0.54 0.57,0.60,0.64,0.77), mean=0.472, stddev=0.0581]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.98212e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01419, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,5e-06,2e-05 6e-05,0.001,0.32,0.51,0.58 0.63,0.68,0.70,0.87), mean=0.28, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.29,0.33 0.40,0.59,0.65,0.72,0.76 0.79,0.86,0.89,1.3), mean=0.634, stddev=0.131], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,4e-07 0.0002,0.10,0.25,0.66,1.2 1.5,1.8,2.0,3.5), mean=0.426, stddev=0.487], bias-{mean,stddev}=0.00327,0.02782, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.98212e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03342, w_fc-rms=0.01414, w_oc-rms=0.03797, count=1.39e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644967, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.48,0.50,0.51,0.54 0.58,0.62,0.65,0.73), mean=0.501, stddev=0.0388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0137] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644967, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.45,0.46 0.47,0.48,0.50,0.51,0.54 0.57,0.60,0.62,0.68), mean=0.502, stddev=0.0318], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.238, stddev=0.0124] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644967, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.73,-0.67,-0.37 -0.22,-0.08,0.0002,0.10,0.27 0.43,0.57,0.64,0.72), mean=0.00602, stddev=0.229], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.38,0.41,0.45 0.48,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.723, stddev=0.212] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644967, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.45,0.46,0.50,0.50,0.51 0.52,0.56,0.56,0.71), mean=0.487, stddev=0.0304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0177] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644967, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.60,-0.57,-0.28 -0.17,-0.07,8e-05,0.10,0.21 0.36,0.46,0.53,0.66), mean=0.00564, stddev=0.193], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.52,0.58,0.65 0.73,0.80,0.88,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.878, stddev=0.117] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=5.70854e-06, count-zeroing-boundaries=262764
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0743802
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.98212e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03653, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.46,0.53 0.55,0.59,0.80,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.806, stddev=0.212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.002 0.004,0.01,0.57,0.78,0.87 0.98,1.1,1.2,1.3), mean=0.467, stddev=0.358], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 3e-07,5e-07,2e-05,1.2,1.6 1.9,2.1,2.2,2.6), mean=0.436, stddev=0.71], bias-{mean,stddev}=-0.003077,0.2053, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=7.98212e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01148, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.21,0.23 0.25,0.27,0.31,0.36,0.40 0.43,0.45,0.47,0.52), mean=0.315, stddev=0.0583], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.16,0.18,0.24,0.33,0.36 0.38,0.40,0.41,0.44), mean=0.25, stddev=0.0761], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,8e-08,9e-08,1e-07 2e-07,3e-07,0.005,0.33,0.66 0.81,0.91,0.97,1.1), mean=0.17, stddev=0.271], bias-{mean,stddev}=0.0007321,0.007298, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.81e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.02,0.04,0.06,0.09,0.11 0.12,0.13,0.14,0.16), mean=0.0645, stddev=0.0294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.13,0.15 0.20,0.28,0.41,0.51,0.57 0.60,0.63,0.64,0.68), mean=0.399, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.09 0.10,0.10,0.12,0.15,0.18 0.21,0.23,0.24,0.27), mean=0.13, stddev=0.0334], oderiv-count=1.06637e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31889.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.02,0.02 0.03,0.04,0.06,0.09,0.11 0.12,0.13,0.14,0.16), mean=0.067, stddev=0.0298], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.06,0.06 0.08,0.09,0.12,0.14,0.15 0.16,0.17,0.18,0.19), mean=0.117, stddev=0.0289]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.98212e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00815, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.17,0.22 0.26,0.28,0.32,0.37,0.38 0.40,0.41,0.41,0.46), mean=0.317, stddev=0.0551], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.12,0.13 0.14,0.15,0.17,0.21,0.24 0.26,0.31,0.33,0.39), mean=0.181, stddev=0.0432], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.08,0.14,0.39,0.61 0.74,0.82,0.86,0.94), mean=0.237, stddev=0.218], bias-{mean,stddev}=-0.02391,0.02151, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.64e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.18 0.20,0.22,0.25,0.28,0.30 0.31,0.33,0.34,0.38), mean=0.251, stddev=0.0405], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.36 0.37,0.39,0.41,0.44,0.45 0.46,0.47,0.48,0.50), mean=0.411, stddev=0.0302], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0319, stddev=0.00337], oderiv-count=957440
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29247.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.18 0.20,0.23,0.26,0.29,0.30 0.32,0.34,0.36,0.43), mean=0.256, stddev=0.0428], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.26,0.34 0.39,0.44,0.51,0.58,0.61 0.63,0.66,0.71,0.95), mean=0.505, stddev=0.0937]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.98212e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02051, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.27 0.29,0.33,0.48,0.67,0.73 0.78,0.83,0.87,0.94), mean=0.496, stddev=0.164], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.53,0.57,0.67 0.74,0.77,0.84,1.1,1.2 1.3,1.4,1.5,1.8), mean=0.912, stddev=0.206], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,2e-06,2e-06,0.0001 0.08,0.13,0.30,0.96,1.8 2.2,2.5,2.6,6.4), mean=0.603, stddev=0.715], bias-{mean,stddev}=0.01461,0.01735, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.98212e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.09084, w_fc-rms=0.04163, w_oc-rms=0.0646, count=1.26e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651923, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.56,0.58,0.60 0.62,0.65,0.69,0.74,0.76 0.78,0.81,0.82,0.84), mean=0.694, stddev=0.0538], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.17,0.18,0.19,0.19 0.20,0.20,0.20,0.23), mean=0.177, stddev=0.0168] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651923, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.51,0.53,0.55 0.57,0.59,0.63,0.67,0.72 0.77,0.80,0.83,0.87), mean=0.637, stddev=0.063], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.16,0.18,0.20,0.21,0.21 0.21,0.22,0.22,0.22), mean=0.191, stddev=0.0192] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0146371, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.83,-0.75,-0.54 -0.42,-0.29,-0.002,0.27,0.41 0.54,0.70,0.77,0.88), mean=-0.00803, stddev=0.332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.26 0.31,0.35,0.41,0.45,0.47 0.49,0.51,0.52,0.65), mean=0.4, stddev=0.0657] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651923, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.50,0.51,0.54 0.56,0.59,0.64,0.67,0.69 0.71,0.76,0.79,0.89), mean=0.633, stddev=0.0556], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.19,0.19,0.20,0.20), mean=0.174, stddev=0.0158] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.017364, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.83,-0.74,-0.57 -0.41,-0.27,0.0009,0.24,0.38 0.55,0.72,0.77,0.89), mean=-0.0107, stddev=0.324], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.23,0.31 0.38,0.46,0.56,0.62,0.64 0.66,0.67,0.68,0.77), mean=0.536, stddev=0.104] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.23844e-06, count-zeroing-boundaries=223369
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0743802
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.98212e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08702, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.1,1.1 1.1,1.2,1.7,2.5,2.6 2.7,2.8,2.8,3.0), mean=1.89, stddev=0.619], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,1.0,1.1,1.1 1.2,1.2,1.3,1.5,1.7 1.8,1.9,2.0,2.1), mean=1.39, stddev=0.222], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,1e-06,1e-06 2e-06,1e-05,0.09,3.1,3.6 4.0,4.6,5.3,5.8), mean=1.17, stddev=1.61], bias-{mean,stddev}=-0.04227,0.4673, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=7.98212e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04112, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.56,0.56,0.58 0.60,0.61,0.65,0.69,0.72 0.75,0.80,0.85,2.2), mean=0.658, stddev=0.0824], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.99,1.0,1.1 1.1,1.2,1.6,2.4,2.5 2.6,2.6,2.6,2.7), mean=1.79, stddev=0.584], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,1e-06,1e-06 2e-06,5e-06,0.04,2.9,3.7 4.0,4.3,4.5,6.1), mean=1.08, stddev=1.55], bias-{mean,stddev}=3.669e-09,0.02494, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0168, stddev=0.0138], oderiv-count=562240
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:55:33 KST 2020, elapsed time 0 seconds
