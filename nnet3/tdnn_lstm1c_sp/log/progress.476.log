# nnet3-info exp/nnet3/tdnn_lstm1c_sp/476.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/475.mdl exp/nnet3/tdnn_lstm1c_sp/476.mdl 
# Started at Thu Jul 30 13:09:55 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/476.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=6.3525e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0322, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.005,0.007 0.009,0.03,0.57,0.73,0.79 0.85,0.92,0.98,1.3), mean=0.468, stddev=0.304], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.17 0.19,0.23,0.69,0.94,1.1 1.3,1.3,1.4,1.4), mean=0.646, stddev=0.35], bias-{mean,stddev}=-0.007162,0.05943, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0.170557, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,2e-05,2e-05,4e-05 6e-05,0.0002,0.04,0.09,0.10 0.12,0.14,0.15,0.19), mean=0.0426, stddev=0.0438], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.02,0.03 0.05,0.07,0.36,0.60,0.71 0.78,0.87,0.91,0.98), mean=0.343, stddev=0.265], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.01 0.02,0.06,0.46,0.67,0.79 0.91,1.0,1.1,1.8), mean=0.437, stddev=0.295], oderiv-count=1.08294e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34363.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,9e-06,2e-05,4e-05 7e-05,0.0002,0.04,0.08,0.10 0.12,0.14,0.15,0.19), mean=0.0409, stddev=0.0427], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,0.0001,0.0001,0.0002 0.0004,0.001,0.07,0.10,0.12 0.13,0.14,0.14,0.16), mean=0.057, stddev=0.0474]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.3525e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.33,0.33,0.34 0.36,0.39,0.43,0.49,0.54 0.57,0.61,0.63,0.72), mean=0.442, stddev=0.0689], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.005,0.01,0.27,0.33,0.36 0.39,0.42,0.49,0.76), mean=0.216, stddev=0.142], bias-{mean,stddev}=-0.03507,0.03681, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.14e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.17,0.18 0.19,0.20,0.24,0.27,0.30 0.31,0.32,0.34,0.41), mean=0.241, stddev=0.042], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.35,0.37,0.39 0.40,0.42,0.44,0.47,0.49 0.51,0.52,0.53,0.56), mean=0.443, stddev=0.0376], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.05,0.06,0.07,0.08 0.09,0.10,0.10,0.12), mean=0.0602, stddev=0.0129], oderiv-count=1.13578e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33615.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.18 0.19,0.21,0.24,0.28,0.30 0.32,0.34,0.34,0.43), mean=0.243, stddev=0.044], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.31,0.32,0.34 0.36,0.39,0.44,0.49,0.52 0.56,0.59,0.59,0.64), mean=0.439, stddev=0.0629]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.3525e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01724, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,5e-07,1e-06,8e-06 0.0002,0.18,0.39,0.58,0.65 0.71,0.79,0.89,1.1), mean=0.377, stddev=0.227], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.38,0.41 0.46,0.67,0.80,0.88,0.95 1.0,1.1,1.2,1.3), mean=0.767, stddev=0.172], bias-{mean,stddev}=9.381e-05,0.02106, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.3525e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04143, w_fc-rms=0.02156, w_oc-rms=0.03784, count=1.52e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638591, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.43 0.44,0.45,0.48,0.50,0.55 0.64,0.71,0.72,0.76), mean=0.489, stddev=0.0602], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0144] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638591, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.43,0.44 0.45,0.47,0.50,0.51,0.55 0.61,0.66,0.70,0.76), mean=0.499, stddev=0.0507], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0125] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00638591, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.81,-0.77,-0.44 -0.27,-0.12,0.0005,0.16,0.27 0.57,0.73,0.79,0.86), mean=0.0129, stddev=0.277], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.30,0.31,0.36 0.42,0.46,0.58,0.71,1.0 1.0,1.0,1.0,1.0), mean=0.618, stddev=0.199] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638591, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.55,0.59,0.65), mean=0.462, stddev=0.0419], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0181] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0102075, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.82,-0.76,-0.39 -0.21,-0.11,0.0003,0.13,0.23 0.46,0.67,0.81,0.91), mean=0.0109, stddev=0.256], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.25,0.30,0.45 0.65,0.74,0.83,0.90,1.0 1.0,1.0,1.0,1.0), mean=0.81, stddev=0.155] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.50952e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.84163e-05, count-zeroing-boundaries=298648
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.014876
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.3525e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03782, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.44,0.45 0.50,0.55,0.82,1.1,1.1 1.2,1.2,1.3,1.3), mean=0.823, stddev=0.258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0005,0.0008,0.002 0.006,0.40,0.56,0.71,0.86 1.0,1.2,1.3,1.5), mean=0.532, stddev=0.299], bias-{mean,stddev}=0.01045,0.2246, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=6.3525e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01219, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.26 0.27,0.29,0.33,0.38,0.41 0.44,0.46,0.48,0.56), mean=0.336, stddev=0.0543], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.16,0.18,0.26,0.35,0.38 0.40,0.43,0.44,0.47), mean=0.264, stddev=0.0858], bias-{mean,stddev}=0.001166,0.01068, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0.000206044, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.02 0.03,0.04,0.08,0.12,0.13 0.15,0.16,0.17,0.19), mean=0.0819, stddev=0.0384], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.11,0.15 0.20,0.27,0.42,0.53,0.59 0.63,0.67,0.69,0.84), mean=0.407, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.10,0.11,0.15,0.18 0.21,0.24,0.27,0.29), mean=0.125, stddev=0.0387], oderiv-count=1.1952e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31371.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.13 0.15,0.17,0.17,0.19), mean=0.0818, stddev=0.0377], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.07 0.09,0.11,0.14,0.17,0.18 0.19,0.20,0.21,0.23), mean=0.138, stddev=0.035]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.3525e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.26,0.27 0.28,0.29,0.31,0.34,0.36 0.38,0.40,0.40,0.43), mean=0.316, stddev=0.0345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.14,0.15,0.18,0.20,0.22 0.24,0.27,0.29,0.37), mean=0.18, stddev=0.0333], bias-{mean,stddev}=-0.02831,0.01642, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.74e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.19 0.20,0.21,0.24,0.26,0.28 0.30,0.32,0.32,0.35), mean=0.237, stddev=0.0339], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.35,0.36,0.37 0.38,0.39,0.42,0.44,0.46 0.47,0.49,0.49,0.52), mean=0.419, stddev=0.0309], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.04 0.04,0.04,0.05,0.05), mean=0.0381, stddev=0.00278], oderiv-count=1.10832e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29127.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.21,0.24,0.27,0.28 0.30,0.32,0.33,0.38), mean=0.241, stddev=0.0349], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.37,0.39 0.41,0.43,0.47,0.52,0.54 0.57,0.61,0.63,0.80), mean=0.473, stddev=0.0573]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.3525e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01408, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-06,4e-06,1e-05 5e-05,0.0008,0.31,0.50,0.58 0.63,0.68,0.71,0.82), mean=0.277, stddev=0.228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.29,0.33 0.39,0.58,0.65,0.72,0.76 0.79,0.85,0.89,1.3), mean=0.628, stddev=0.134], bias-{mean,stddev}=0.002114,0.02515, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.3525e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02655, w_fc-rms=0.01396, w_oc-rms=0.03482, count=1.39e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644035, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.45,0.46 0.46,0.48,0.50,0.51,0.54 0.57,0.61,0.63,0.70), mean=0.5, stddev=0.0352], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0129] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644035, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.45,0.46 0.46,0.47,0.50,0.51,0.53 0.55,0.59,0.61,0.67), mean=0.497, stddev=0.0309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0109] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644035, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.71,-0.63,-0.35 -0.21,-0.09,5e-05,0.10,0.26 0.40,0.54,0.60,0.73), mean=0.00522, stddev=0.22], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.40,0.42,0.46 0.49,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.724, stddev=0.211] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644035, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.45,0.46,0.50,0.50,0.51 0.52,0.55,0.56,0.74), mean=0.486, stddev=0.0304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0172] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644035, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.61,-0.58,-0.31 -0.18,-0.09,1e-05,0.11,0.23 0.37,0.48,0.54,0.74), mean=0.00514, stddev=0.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.50,0.56,0.65 0.71,0.77,0.86,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.867, stddev=0.125] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.75e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=263392
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.014876
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.3525e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03568, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.45,0.51 0.54,0.59,0.78,0.99,1.0 1.1,1.1,1.1,1.3), mean=0.787, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.004,0.01,0.58,0.76,0.84 0.95,1.0,1.1,1.3), mean=0.459, stddev=0.347], bias-{mean,stddev}=-0.003607,0.1809, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=6.3525e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01136, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.21,0.23 0.25,0.26,0.30,0.36,0.39 0.42,0.45,0.46,0.51), mean=0.312, stddev=0.0586], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.16,0.18,0.23,0.32,0.35 0.38,0.41,0.42,0.44), mean=0.248, stddev=0.0752], bias-{mean,stddev}=0.002016,0.007497, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.36e+05, self-repaired-proportion=3.25945e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.02 0.02,0.04,0.06,0.09,0.11 0.12,0.13,0.14,0.16), mean=0.0643, stddev=0.0296], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.13,0.14 0.19,0.27,0.38,0.49,0.54 0.57,0.61,0.62,0.65), mean=0.377, stddev=0.126], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.08,0.09 0.09,0.10,0.11,0.14,0.17 0.19,0.21,0.22,0.27), mean=0.122, stddev=0.0317], oderiv-count=1.0416e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26883.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.11 0.12,0.14,0.14,0.16), mean=0.0673, stddev=0.0298], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.09,0.12,0.15,0.16 0.17,0.18,0.19,0.20), mean=0.122, stddev=0.0303]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.3525e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008075, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.17,0.23 0.25,0.28,0.31,0.36,0.38 0.40,0.40,0.41,0.44), mean=0.315, stddev=0.0524], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.14,0.15,0.17,0.20,0.23 0.26,0.31,0.33,0.38), mean=0.179, stddev=0.0417], bias-{mean,stddev}=-0.02423,0.02051, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.38e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.18 0.20,0.22,0.25,0.28,0.29 0.30,0.32,0.33,0.34), mean=0.246, stddev=0.0387], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.35,0.36 0.37,0.39,0.41,0.44,0.45 0.46,0.48,0.49,0.50), mean=0.412, stddev=0.0299], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0316, stddev=0.00364], oderiv-count=987360
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24640.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.16,0.18 0.20,0.22,0.25,0.28,0.29 0.31,0.33,0.34,0.37), mean=0.25, stddev=0.0395], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.26,0.34 0.39,0.43,0.50,0.56,0.60 0.62,0.67,0.68,0.79), mean=0.493, stddev=0.0874]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.3525e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02008, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.24 0.27,0.32,0.45,0.66,0.73 0.78,0.82,0.84,0.92), mean=0.483, stddev=0.17], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.54,0.64 0.71,0.74,0.82,1.1,1.2 1.3,1.4,1.5,1.7), mean=0.89, stddev=0.216], bias-{mean,stddev}=0.01374,0.01655, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.3525e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.07004, w_fc-rms=0.03851, w_oc-rms=0.05338, count=1.26e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650606, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.54,0.55,0.57 0.60,0.62,0.67,0.71,0.73 0.75,0.77,0.78,0.81), mean=0.668, stddev=0.0524], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.16 0.17,0.18,0.19,0.20,0.20 0.20,0.21,0.21,0.21), mean=0.186, stddev=0.0129] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650606, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.50,0.52,0.53 0.55,0.57,0.60,0.64,0.71 0.74,0.77,0.78,0.83), mean=0.611, stddev=0.0606], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.16 0.17,0.19,0.20,0.21,0.21 0.22,0.22,0.22,0.22), mean=0.199, stddev=0.0157] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00803896, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.78,-0.68,-0.54 -0.40,-0.28,-0.007,0.25,0.38 0.53,0.65,0.73,0.85), mean=-0.0103, stddev=0.314], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.26,0.29 0.32,0.35,0.40,0.44,0.46 0.48,0.50,0.51,0.53), mean=0.394, stddev=0.0557] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650606, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.50,0.52,0.55 0.56,0.59,0.63,0.67,0.69 0.71,0.75,0.78,0.91), mean=0.633, stddev=0.0534], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.13,0.14,0.15 0.15,0.16,0.18,0.18,0.19 0.19,0.19,0.19,0.20), mean=0.173, stddev=0.0141] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0245212, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.83,-0.71,-0.60 -0.41,-0.27,-0.02,0.23,0.35 0.54,0.69,0.76,0.89), mean=-0.013, stddev=0.321], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.21,0.28 0.36,0.44,0.54,0.59,0.61 0.63,0.64,0.65,0.70), mean=0.509, stddev=0.103] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.23231e-06, count-zeroing-boundaries=223983
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.014876
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.3525e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08477, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.0,1.0,1.1 1.1,1.2,1.7,2.5,2.5 2.6,2.7,2.7,2.9), mean=1.84, stddev=0.597], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.99,1.1,1.1 1.2,1.2,1.3,1.5,1.6 1.7,1.8,1.9,2.0), mean=1.35, stddev=0.197], bias-{mean,stddev}=-0.03639,0.371, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=6.3525e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04024, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.54,0.55,0.57 0.58,0.60,0.63,0.68,0.70 0.73,0.77,0.82,2.2), mean=0.644, stddev=0.0828], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.90,0.96,1.0,1.0 1.1,1.1,1.6,2.3,2.4 2.5,2.5,2.6,2.6), mean=1.76, stddev=0.571], bias-{mean,stddev}=2.613e-09,0.02575, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=587200
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/475.mdl exp/nnet3/tdnn_lstm1c_sp/476.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.59724 tdnn2.affine:2.35315 lstm1.W_all:1.75336 lstm1.lstm_nonlin:0.0312227 lstm1.W_rp:0.7996 tdnn3.affine:1.63026 tdnn4.affine:1.66438 lstm2.W_all:1.17693 lstm2.lstm_nonlin:0.0175603 lstm2.W_rp:0.544762 tdnn5.affine:1.3552 tdnn6.affine:1.48483 lstm3.W_all:1.73534 lstm3.lstm_nonlin:0.0393181 lstm3.W_rp:0.592205 output.affine:1.25261 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.7925 tdnn2.affine:10.2751 lstm1.W_all:20.0675 lstm1.lstm_nonlin:1.37067 lstm1.W_rp:14.3711 tdnn3.affine:7.76562 tdnn4.affine:7.2856 lstm2.W_all:16.4066 lstm2.lstm_nonlin:1.04795 lstm2.W_rp:13.4399 tdnn5.affine:7.23868 tdnn6.affine:7.30875 lstm3.W_all:23.3721 lstm3.lstm_nonlin:2.19175 lstm3.W_rp:31.7446 output.affine:29.7857 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.203344 tdnn2.affine:0.229208 lstm1.W_all:0.0873305 lstm1.lstm_nonlin:0.0227014 lstm1.W_rp:0.0555843 tdnn3.affine:0.21004 tdnn4.affine:0.228663 lstm2.W_all:0.0717245 lstm2.lstm_nonlin:0.0167142 lstm2.W_rp:0.0404987 tdnn5.affine:0.187405 tdnn6.affine:0.203426 lstm3.W_all:0.0742086 lstm3.lstm_nonlin:0.0177992 lstm3.W_rp:0.0186378 output.affine:0.0420393 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 13:09:55 KST 2020, elapsed time 0 seconds
