# nnet3-info exp/nnet3/tdnn_lstm1c_sp/69.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/68.mdl exp/nnet3/tdnn_lstm1c_sp/69.mdl 
# Started at Thu Jul 30 10:28:26 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/69.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000241801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03034, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.009,0.01,0.03 0.06,0.42,0.53,0.63,0.67 0.73,0.79,0.81,1.1), mean=0.485, stddev=0.203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.15 0.17,0.21,0.58,0.81,1.2 1.4,1.5,1.5,1.7), mean=0.586, stddev=0.367], bias-{mean,stddev}=0.003552,0.05682, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.6e+05, self-repaired-proportion=0.111338, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,2e-06,1e-05,5e-05 0.0003,0.03,0.06,0.09,0.10 0.11,0.13,0.14,0.19), mean=0.0596, stddev=0.0355], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.002,0.003,0.02 0.04,0.24,0.48,0.62,0.71 0.78,0.84,0.86,0.94), mean=0.443, stddev=0.226], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.02,0.06 0.14,0.27,0.35,0.43,0.48 0.52,0.70,0.73,0.88), mean=0.342, stddev=0.138], oderiv-count=1.18182e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32981.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-06,2e-06,2e-05 0.0001,0.03,0.06,0.08,0.10 0.12,0.13,0.14,0.20), mean=0.0576, stddev=0.0361], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,4e-05,0.0001,0.0003 0.0009,0.07,0.09,0.11,0.12 0.12,0.13,0.13,0.15), mean=0.0813, stddev=0.0393]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000241801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01269, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.38,0.39,0.41 0.43,0.45,0.50,0.54,0.56 0.59,0.62,0.64,0.81), mean=0.498, stddev=0.0558], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.02 0.04,0.25,0.30,0.34,0.36 0.37,0.39,0.43,0.68), mean=0.269, stddev=0.107], bias-{mean,stddev}=0.0004599,0.02786, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.31 0.32,0.33,0.36,0.39,0.41 0.44,0.48,0.49,0.66), mean=0.365, stddev=0.0427], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.40,0.41 0.42,0.43,0.46,0.48,0.50 0.51,0.51,0.52,0.56), mean=0.458, stddev=0.0287], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0402, stddev=0.00782], oderiv-count=1.15418e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32260.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.28,0.29 0.30,0.32,0.35,0.39,0.41 0.44,0.48,0.51,0.64), mean=0.358, stddev=0.0471], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.49,0.50,0.53 0.55,0.57,0.62,0.68,0.71 0.74,0.80,0.85,0.99), mean=0.628, stddev=0.071]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000241801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01765, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.003,0.008,0.04 0.13,0.23,0.39,0.58,0.68 0.75,0.84,0.90,1.1), mean=0.399, stddev=0.207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.41,0.45 0.52,0.70,0.83,0.90,0.94 0.99,1.0,1.1,1.3), mean=0.789, stddev=0.157], bias-{mean,stddev}=-0.001795,0.02021, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000241801, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02518, w_fc-rms=0.04035, w_oc-rms=0.05599, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.006185, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.43,0.44 0.45,0.46,0.49,0.53,0.57 0.62,0.66,0.69,0.71), mean=0.499, stddev=0.0534], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.015] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.006185, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.38,0.40 0.42,0.43,0.48,0.53,0.60 0.70,0.77,0.80,0.83), mean=0.496, stddev=0.0867], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.17,0.19 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0206] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00809618, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.83,-0.77,-0.57 -0.39,-0.21,0.002,0.22,0.38 0.58,0.73,0.78,0.83), mean=0.000969, stddev=0.314], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.28,0.29,0.34 0.39,0.46,0.58,0.70,0.84 0.98,1.0,1.0,1.0), mean=0.594, stddev=0.169] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.006185, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.41,0.42 0.43,0.44,0.47,0.51,0.53 0.56,0.59,0.59,0.67), mean=0.476, stddev=0.0436], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0171] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0196953, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.87,-0.81,-0.54 -0.34,-0.20,-0.001,0.18,0.35 0.54,0.72,0.81,0.90), mean=-0.00243, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.19,0.23,0.38 0.56,0.71,0.82,0.89,0.93 0.99,1.0,1.0,1.0), mean=0.781, stddev=0.166] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=295545
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000241801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0321, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.26 0.28,0.32,0.51,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.654, stddev=0.329], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.09 0.23,0.35,0.48,0.61,0.69 0.80,0.95,1.0,1.2), mean=0.479, stddev=0.196], bias-{mean,stddev}=-0.003672,0.042, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000241801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0128, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.21,0.22,0.25 0.27,0.29,0.34,0.41,0.45 0.49,0.51,0.54,0.71), mean=0.35, stddev=0.0729], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.10 0.10,0.12,0.21,0.40,0.44 0.48,0.51,0.52,0.54), mean=0.257, stddev=0.137], bias-{mean,stddev}=-0.003825,0.02617, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.76e+05, self-repaired-proportion=0.00119543, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.05,0.06,0.07 0.08,0.11,0.14,0.18,0.19 0.21,0.23,0.25,0.28), mean=0.143, stddev=0.0419], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.19,0.21,0.27 0.32,0.38,0.51,0.59,0.63 0.66,0.68,0.69,0.75), mean=0.487, stddev=0.121], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.06,0.07,0.08,0.09 0.10,0.11,0.11,0.27), mean=0.0726, stddev=0.0157], oderiv-count=1.11066e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30095, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.04,0.05,0.07 0.08,0.10,0.14,0.17,0.19 0.21,0.23,0.23,0.26), mean=0.137, stddev=0.0409], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.14,0.15,0.17 0.18,0.20,0.22,0.25,0.27 0.28,0.30,0.33,0.39), mean=0.224, stddev=0.0367]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000241801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009415, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.29,0.32 0.33,0.34,0.37,0.40,0.42 0.43,0.44,0.46,0.62), mean=0.37, stddev=0.0379], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.17 0.17,0.18,0.21,0.24,0.26 0.27,0.29,0.30,0.38), mean=0.212, stddev=0.0338], bias-{mean,stddev}=-0.009406,0.01692, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.64e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.23,0.24 0.25,0.27,0.30,0.33,0.35 0.37,0.39,0.40,0.45), mean=0.303, stddev=0.0398], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.50,0.51,0.52,0.53), mean=0.441, stddev=0.0329], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0298, stddev=0.00271], oderiv-count=1.01318e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27929.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.24 0.25,0.26,0.29,0.33,0.35 0.37,0.39,0.41,0.45), mean=0.296, stddev=0.0392], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.48 0.50,0.53,0.57,0.62,0.65 0.69,0.73,0.77,0.92), mean=0.576, stddev=0.0621]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000241801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01368, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0007,0.001 0.004,0.03,0.28,0.48,0.57 0.62,0.67,0.70,1.1), mean=0.277, stddev=0.212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.28,0.32 0.38,0.54,0.64,0.70,0.73 0.76,0.81,0.85,0.98), mean=0.61, stddev=0.132], bias-{mean,stddev}=-0.002683,0.02092, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000241801, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01399, w_fc-rms=0.01904, w_oc-rms=0.02346, count=1.32e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623717, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.44,0.45 0.45,0.47,0.50,0.51,0.53 0.56,0.59,0.60,0.66), mean=0.495, stddev=0.0336], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0156] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623717, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.41,0.42 0.43,0.45,0.49,0.50,0.52 0.56,0.60,0.63,0.74), mean=0.484, stddev=0.0445], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0128] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00965202, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.66,-0.61,-0.39 -0.24,-0.12,0.005,0.15,0.29 0.39,0.57,0.64,0.75), mean=0.0116, stddev=0.225], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.46,0.48,0.52 0.54,0.58,0.66,0.98,1.0 1.0,1.0,1.0,1.0), mean=0.726, stddev=0.181] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623717, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.42,0.42,0.43 0.44,0.46,0.50,0.50,0.52 0.55,0.57,0.59,0.65), mean=0.487, stddev=0.0346], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0164] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00623717, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.72,-0.64,-0.57,-0.35 -0.23,-0.11,0.007,0.15,0.26 0.38,0.54,0.63,0.85), mean=0.0121, stddev=0.219], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.50,0.55,0.67 0.75,0.81,0.89,0.99,1.0 1.0,1.0,1.0,1.0), mean=0.877, stddev=0.109] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=260673
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000241801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02868, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.39,0.40 0.42,0.45,0.61,0.83,0.87 0.90,0.93,0.95,1.1), mean=0.629, stddev=0.181], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.01,0.01 0.02,0.06,0.44,0.61,0.69 0.75,0.83,0.88,1.1), mean=0.385, stddev=0.256], bias-{mean,stddev}=-0.002428,0.09837, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000241801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01181, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.21 0.23,0.25,0.30,0.37,0.43 0.49,0.55,0.60,0.65), mean=0.319, stddev=0.0852], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.17,0.18,0.24,0.33,0.37 0.39,0.41,0.43,0.50), mean=0.258, stddev=0.0777], bias-{mean,stddev}=0.002042,0.0177, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.1e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.05,0.06,0.09,0.12,0.13 0.15,0.16,0.17,0.22), mean=0.0928, stddev=0.034], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.19 0.25,0.31,0.43,0.56,0.59 0.63,0.66,0.68,0.72), mean=0.429, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.06 0.07,0.07,0.08,0.10,0.11 0.12,0.14,0.15,0.18), mean=0.084, stddev=0.0186], oderiv-count=933760
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25764.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.04 0.05,0.06,0.09,0.12,0.13 0.14,0.16,0.16,0.21), mean=0.0885, stddev=0.0322], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.11 0.12,0.14,0.16,0.18,0.20 0.21,0.22,0.23,0.28), mean=0.158, stddev=0.0318]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000241801, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009058, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.27,0.28 0.30,0.31,0.35,0.40,0.43 0.44,0.46,0.47,0.50), mean=0.354, stddev=0.0499], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.12,0.14 0.15,0.16,0.20,0.23,0.26 0.29,0.32,0.36,0.45), mean=0.201, stddev=0.0467], bias-{mean,stddev}=-0.01063,0.01515, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.72e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.22,0.23 0.25,0.27,0.30,0.34,0.36 0.38,0.40,0.41,0.44), mean=0.306, stddev=0.0428], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.35,0.37 0.38,0.39,0.42,0.45,0.47 0.48,0.49,0.49,0.52), mean=0.42, stddev=0.0341], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0251, stddev=0.00268], oderiv-count=943680
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23599.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.24,0.27,0.30,0.34,0.35 0.37,0.40,0.41,0.44), mean=0.302, stddev=0.0433], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.44,0.47 0.50,0.53,0.59,0.66,0.70 0.74,0.77,0.80,0.84), mean=0.593, stddev=0.0803]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000241801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0197, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.17,0.24 0.31,0.36,0.43,0.62,0.75 0.80,0.84,0.88,1.4), mean=0.474, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.62 0.63,0.66,0.74,1.1,1.4 1.4,1.5,1.5,1.7), mean=0.857, stddev=0.269], bias-{mean,stddev}=0.007746,0.02414, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000241801, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0303, w_fc-rms=0.04094, w_oc-rms=0.05709, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.45,0.47 0.48,0.51,0.57,0.64,0.66 0.68,0.70,0.72,0.79), mean=0.573, stddev=0.068], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.19,0.20,0.21,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.205, stddev=0.0101] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.48 0.50,0.54,0.59,0.64,0.67 0.69,0.73,0.74,0.88), mean=0.59, stddev=0.0647], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.17,0.18,0.18 0.19,0.19,0.21,0.22,0.22 0.22,0.22,0.23,0.23), mean=0.204, stddev=0.014] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00860729, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.82,-0.77,-0.54 -0.33,-0.20,0.005,0.21,0.35 0.51,0.71,0.82,0.86), mean=-0.00237, stddev=0.304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.26,0.28,0.31 0.34,0.38,0.44,0.48,0.50 0.51,0.53,0.54,0.63), mean=0.431, stddev=0.0637] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.53,0.55,0.56 0.59,0.61,0.65,0.69,0.71 0.74,0.75,0.77,0.94), mean=0.652, stddev=0.0524], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.15,0.15,0.16 0.17,0.18,0.19,0.20,0.20 0.20,0.21,0.21,0.21), mean=0.186, stddev=0.0136] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0223493, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.98,-0.87,-0.82,-0.54 -0.32,-0.18,-0.004,0.20,0.31 0.54,0.72,0.87,0.93), mean=-0.000385, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.19,0.21,0.35 0.47,0.55,0.64,0.69,0.71 0.72,0.73,0.74,0.76), mean=0.609, stddev=0.114] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221692
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000241801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06866, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.2,1.6,1.8,1.9 1.9,2.0,2.0,2.1), mean=1.54, stddev=0.274], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.66,0.76,0.86 0.91,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.1, stddev=0.152], bias-{mean,stddev}=0.000833,0.08489, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000241801, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04058, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.51,0.53,0.55 0.57,0.59,0.64,0.70,0.73 0.77,0.81,0.84,2.1), mean=0.648, stddev=0.091], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.4 1.5,1.5,1.8,2.1,2.2 2.3,2.4,2.4,2.6), mean=1.84, stddev=0.289], bias-{mean,stddev}=4.122e-09,0.02615, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0136], oderiv-count=584320
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/68.mdl exp/nnet3/tdnn_lstm1c_sp/69.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.49799 tdnn2.affine:8.74735 lstm1.W_all:7.49031 lstm1.lstm_nonlin:0.147023 lstm1.W_rp:3.0624 tdnn3.affine:5.36737 tdnn4.affine:6.19078 lstm2.W_all:4.92967 lstm2.lstm_nonlin:0.061192 lstm2.W_rp:2.01737 tdnn5.affine:4.28527 tdnn6.affine:5.18387 lstm3.W_all:6.61764 lstm3.lstm_nonlin:0.142236 lstm3.W_rp:2.65373 output.affine:5.83796 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.0517 tdnn2.affine:11.4465 lstm1.W_all:20.5401 lstm1.lstm_nonlin:1.67534 lstm1.W_rp:11.8229 tdnn3.affine:8.17265 tdnn4.affine:8.49137 lstm2.W_all:15.9338 lstm2.lstm_nonlin:0.759195 lstm2.W_rp:10.6633 tdnn5.affine:7.53414 tdnn6.affine:8.16884 lstm3.W_all:22.9378 lstm3.lstm_nonlin:1.74461 lstm3.W_rp:25.2834 output.affine:30.0381 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.69301 tdnn2.affine:0.753293 lstm1.W_all:0.363832 lstm1.lstm_nonlin:0.0879155 lstm1.W_rp:0.257941 tdnn3.affine:0.646965 tdnn4.affine:0.719871 lstm2.W_all:0.308476 lstm2.lstm_nonlin:0.0792168 lstm2.W_rp:0.188335 tdnn5.affine:0.559676 tdnn6.affine:0.62869 lstm3.W_all:0.287499 lstm3.lstm_nonlin:0.0815644 lstm3.W_rp:0.104777 output.affine:0.194308 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:28:26 KST 2020, elapsed time 0 seconds
