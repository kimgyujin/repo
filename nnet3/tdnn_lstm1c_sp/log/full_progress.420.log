# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/419.mdl exp/nnet3/tdnn_lstm1c_sp/420.mdl 
# Started at Thu Jul 30 12:47:35 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/419.mdl exp/nnet3/tdnn_lstm1c_sp/420.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=9.11947e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007756, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.002 0.003,0.007,0.14,0.17,0.18 0.20,0.22,0.23,0.26), mean=0.114, stddev=0.0713], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.16,0.21,0.25 0.33,0.38,0.40,0.49), mean=0.153, stddev=0.0884], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.006,0.007,0.009 0.01,0.02,0.09,0.22,0.31 0.38,0.46,0.50,0.58), mean=0.127, stddev=0.123], bias-{mean,stddev}=-5.559e-05,0.01019, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=3.64e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.39,-0.31,-0.27,-0.17 -0.08,-0.02,0.003,0.13,0.22 0.29,0.38,0.46,0.64), mean=0.0409, stddev=0.134], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-2.5,-1.9,-1.4 -0.93,-0.42,0.34,1.2,1.6 2.1,2.5,2.9,5.6), mean=0.363, stddev=1.09]
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2533.44, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.29,-0.11,-0.10,-0.05 -0.02,-0.002,0.02,0.13,0.19 0.23,0.28,0.32,0.39), mean=0.0539, stddev=0.0913], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.002,0.11,0.14 0.17,0.19,0.20,0.23), mean=0.0461, stddev=0.0614]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.11947e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003119, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.11 0.11,0.11,0.12,0.13,0.14 0.14,0.15,0.15,0.17), mean=0.123, stddev=0.0108], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0007,0.0009,0.001 0.002,0.004,0.08,0.09,0.10 0.10,0.11,0.12,0.14), mean=0.0602, stddev=0.0378], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.03,0.06,0.15,0.21 0.27,0.32,0.35,0.40), mean=0.0928, stddev=0.081], bias-{mean,stddev}=-0.0001472,0.005003, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.09,0.10,0.13 0.16,0.18,0.25,0.31,0.34 0.38,0.42,0.44,0.56), mean=0.249, stddev=0.0765], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.22,0.26,0.30 0.34,0.37,0.43,0.51,0.56 0.59,0.61,0.62,0.72), mean=0.439, stddev=0.0851]
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2507.23, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.40,-0.14,-0.07,0.009 0.06,0.14,0.27,0.40,0.49 0.54,0.60,0.68,0.81), mean=0.271, stddev=0.166], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.09,0.48,0.67,0.77 0.85,0.88,0.90,1.0), mean=0.428, stddev=0.272]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001823, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-09,4e-08,9e-08,6e-07 2e-05,0.02,0.04,0.06,0.07 0.08,0.09,0.10,0.13), mean=0.0388, stddev=0.0256], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.09,0.10,0.11 0.11,0.12,0.12,0.15), mean=0.0778, stddev=0.0293], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,7e-08,9e-08 1e-07,0.02,0.04,0.09,0.14 0.19,0.24,0.26,0.31), mean=0.059, stddev=0.0586], bias-{mean,stddev}=3.276e-05,0.0005887, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0007623, w_fc-rms=0.000721, w_oc-rms=0.001493, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.47458e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.10,0.10,0.17,0.24 0.30,0.38,0.50,0.58,0.66 0.76,0.83,0.89,1.0), mean=0.48, stddev=0.151], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.20,0.004,0.02,0.06 0.11,0.16,0.24,0.26,0.30 0.33,0.38,0.39,0.51), mean=0.216, stddev=0.0825] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.47458e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.22,0.30 0.34,0.39,0.50,0.56,0.64 0.69,0.77,0.83,1.0), mean=0.486, stddev=0.12], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.03,0.08,0.11,0.14 0.16,0.20,0.25,0.26,0.29 0.31,0.34,0.36,0.41), mean=0.235, stddev=0.0523] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0259208, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.8,-1.6,-1.2 -0.95,-0.51,0.002,0.70,1.2 1.5,1.9,2.1,3.7), mean=0.089, stddev=0.812], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.3,-1.0,-0.79 -0.49,-0.06,0.64,1.0,1.3 1.6,1.8,2.0,2.5), mean=0.528, stddev=0.714] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.47458e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.29,-0.03,0.11,0.19 0.24,0.33,0.46,0.52,0.60 0.66,0.77,0.84,1.1), mean=0.439, stddev=0.155], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.11,-0.04,-0.002,0.04 0.08,0.13,0.23,0.27,0.32 0.36,0.41,0.42,0.55), mean=0.209, stddev=0.0958] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-2.47458e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.4,-1.3,-1.0 -0.81,-0.47,0.001,0.60,0.89 1.2,1.5,1.6,2.1), mean=0.0566, stddev=0.645], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.37,-0.14,0.007 0.27,0.47,0.81,1.0,1.1 1.2,1.4,1.4,1.5), mean=0.743, stddev=0.367] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.62e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2427
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.109091
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002562, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.05,0.07,0.08 0.08,0.09,0.09,0.10), mean=0.0557, stddev=0.0177], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,5e-05,7e-05,0.0001 0.0005,0.03,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0369, stddev=0.0185], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.06,0.11 0.14,0.17,0.19,0.22), mean=0.0266, stddev=0.052], bias-{mean,stddev}=-5.276e-05,0.002883, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=9.11947e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003045, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.06,0.06,0.06 0.07,0.07,0.08,0.10,0.10 0.11,0.12,0.12,0.13), mean=0.084, stddev=0.0131], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.07,0.09,0.09 0.10,0.10,0.11,0.11), mean=0.0658, stddev=0.0222], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,3e-08,3e-08,4e-08 5e-08,8e-08,1e-05,0.09,0.16 0.21,0.26,0.28,0.32), mean=0.0435, stddev=0.0731], bias-{mean,stddev}=-7.122e-05,0.002052, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.18,0.30,0.41 0.51,0.65,0.77,1.0), mean=0.192, stddev=0.175], oderiv-count=20864
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2428.58, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,-0.10,-0.08,-0.04 -0.02,0.005,0.07,0.14,0.17 0.21,0.23,0.27,0.37), mean=0.0754, stddev=0.0789], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.12,0.16,0.18 0.21,0.22,0.24,0.27), mean=0.102, stddev=0.0715]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.11947e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002206, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.09,0.09,0.10 0.10,0.10,0.10,0.10), mean=0.0869, stddev=0.00654], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.04,0.04,0.04 0.04,0.04,0.05,0.06,0.06 0.06,0.06,0.07,0.07), mean=0.0499, stddev=0.00672], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.06,0.11,0.14 0.18,0.22,0.23,0.26), mean=0.0717, stddev=0.0495], bias-{mean,stddev}=-9.31e-05,0.002444, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.03,0.06,0.08,0.09 0.10,0.10,0.11,0.12), mean=0.0547, stddev=0.0295], oderiv-count=20800
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2349.94, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.15,-0.05,-0.01,0.02 0.08,0.12,0.21,0.30,0.34 0.39,0.44,0.48,0.63), mean=0.209, stddev=0.111], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.19,0.47,0.62,0.69 0.73,0.77,0.85,1.1), mean=0.41, stddev=0.244]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001233, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,2e-07,4e-07,1e-06 4e-06,8e-05,0.02,0.04,0.05 0.06,0.07,0.07,0.09), mean=0.0235, stddev=0.0209], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.03,0.06,0.07,0.07 0.07,0.08,0.08,0.08), mean=0.053, stddev=0.0189], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,6e-08,8e-08 1e-05,0.01,0.03,0.06,0.09 0.13,0.17,0.19,0.22), mean=0.0386, stddev=0.0409], bias-{mean,stddev}=1.892e-05,0.0006195, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0004514, w_fc-rms=0.0004978, w_oc-rms=0.000787, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.49463e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.27,0.29,0.35 0.41,0.44,0.50,0.53,0.59 0.67,0.70,0.73,0.88), mean=0.497, stddev=0.0854], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,0.07,0.10,0.12 0.15,0.19,0.25,0.25,0.28 0.30,0.32,0.34,0.40), mean=0.229, stddev=0.0527] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.49463e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.26,0.31,0.35 0.39,0.44,0.50,0.53,0.57 0.61,0.66,0.70,0.95), mean=0.49, stddev=0.0809], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.08,0.11,0.15 0.18,0.21,0.25,0.25,0.26 0.28,0.30,0.32,0.41), mean=0.232, stddev=0.0432] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-2.49463e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.3,-1.2,-0.97 -0.68,-0.30,-8e-05,0.35,0.74 0.94,1.2,1.3,2.3), mean=0.0185, stddev=0.534], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.97,-0.64,-0.43 -0.17,0.11,0.85,1.0,1.0 1.1,1.3,1.6,2.0), mean=0.602, stddev=0.542] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.49463e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.20,0.26,0.31 0.36,0.42,0.50,0.51,0.59 0.65,0.71,0.77,0.81), mean=0.48, stddev=0.0968], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.04,0.06,0.07,0.11 0.15,0.18,0.25,0.25,0.27 0.30,0.33,0.34,0.47), mean=0.223, stddev=0.0596] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-2.49463e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-1.1,-0.91,-0.77 -0.57,-0.28,-0.0002,0.26,0.57 0.78,0.96,1.1,1.6), mean=0.00607, stddev=0.435], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.32,-0.04,0.14,0.34 0.43,0.57,0.91,1.0,1.0 1.1,1.2,1.3,1.4), mean=0.812, stddev=0.263] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.42e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2148
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.109091
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001744, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.06), mean=0.0383, stddev=0.0106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,9e-05,0.0001,0.0002 0.0003,0.001,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0229, stddev=0.0164], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 6e-08,1e-07,1e-06,0.05,0.08 0.10,0.11,0.12,0.13), mean=0.0201, stddev=0.0343], bias-{mean,stddev}=2.042e-05,0.002716, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=9.11947e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002518, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.06,0.07,0.08,0.08 0.09,0.10,0.11,0.11), mean=0.0694, stddev=0.0115], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.04,0.05,0.07,0.08 0.08,0.08,0.09,0.09), mean=0.0551, stddev=0.0162], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,3e-08,4e-08 6e-08,1e-07,0.001,0.08,0.13 0.17,0.22,0.23,0.27), mean=0.0381, stddev=0.0591], bias-{mean,stddev}=-0.0001974,0.001428, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2271.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.18,-0.13,-0.09,-0.07 -0.04,-0.01,0.04,0.10,0.14 0.17,0.23,0.25,0.35), mean=0.0449, stddev=0.0752], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.09,0.14,0.17 0.19,0.21,0.23,0.28), mean=0.0796, stddev=0.0684]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=9.11947e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.001929, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.07,0.08,0.08,0.09 0.09,0.09,0.09,0.10), mean=0.0757, stddev=0.00868], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0436, stddev=0.00604], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.03,0.05,0.09,0.13 0.16,0.19,0.20,0.24), mean=0.0611, stddev=0.0455], bias-{mean,stddev}=-8.685e-05,0.002242, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2192.65, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.24,-0.16,-0.14,-0.04 0.03,0.09,0.20,0.31,0.36 0.41,0.47,0.49,0.76), mean=0.194, stddev=0.137], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.47,0.69,0.78 0.84,0.93,0.99,1.1), mean=0.425, stddev=0.29]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00162, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.009,0.01 0.01,0.02,0.03,0.06,0.08 0.08,0.09,0.09,0.11), mean=0.0341, stddev=0.0233], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.06,0.09,0.11 0.12,0.13,0.13,0.14), mean=0.0695, stddev=0.0251], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,8e-06 0.008,0.01,0.03,0.07,0.13 0.18,0.23,0.25,0.29), mean=0.0475, stddev=0.0566], bias-{mean,stddev}=-1.692e-05,0.0004212, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0007316, w_fc-rms=0.0008217, w_oc-rms=0.001717, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.49135e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.14,0.26,0.34 0.46,0.58,0.74,0.91,1.0 1.1,1.2,1.4,1.9), mean=0.742, stddev=0.238], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.22,-0.05,0.0001,0.03 0.07,0.11,0.18,0.25,0.28 0.31,0.35,0.36,0.50), mean=0.179, stddev=0.0861] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.49135e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.38,-0.16,-0.11,0.05 0.17,0.34,0.54,0.76,0.87 0.96,1.0,1.1,1.2), mean=0.538, stddev=0.268], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.10,0.02,0.03,0.06 0.11,0.14,0.20,0.26,0.30 0.32,0.37,0.42,0.66), mean=0.199, stddev=0.0837] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0890587, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.7,-4.1,-3.8,-3.1 -2.2,-1.3,-0.004,1.2,2.0 2.6,3.3,3.6,6.2), mean=-0.0311, stddev=1.68], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.6,-1.4,-1.2 -0.84,-0.58,0.18,0.87,1.3 1.5,1.8,2.0,3.3), mean=0.172, stddev=0.812] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-2.49135e-05, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.43,-0.23,-0.11,0.02 0.14,0.32,0.60,0.87,1.0 1.1,1.3,1.3,1.8), mean=0.59, stddev=0.339], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.43,-0.13,-0.07,-0.003 0.04,0.08,0.16,0.23,0.27 0.29,0.33,0.36,0.41), mean=0.151, stddev=0.0975] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.127578, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.1,-3.4,-3.2,-2.4 -1.8,-1.1,0.03,1.0,1.6 2.1,2.6,3.0,4.8), mean=-0.0317, stddev=1.39], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.85,-0.71,-0.50 -0.32,-0.17,0.24,0.69,0.94 1.2,1.4,1.5,1.9), mean=0.267, stddev=0.507] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.23e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1838
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.109091
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001846, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.03,0.06,0.06 0.06,0.06,0.06,0.07), mean=0.0378, stddev=0.0184], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.029, stddev=0.00655], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-07,2e-07,2e-07 3e-07,6e-07,0.005,0.05,0.08 0.10,0.12,0.13,0.15), mean=0.0243, stddev=0.0344], bias-{mean,stddev}=-1.289e-05,0.006029, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=9.11947e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002187, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.02 0.02,0.02,0.03,0.04,0.05 0.06,0.07,0.07,0.16), mean=0.0328, stddev=0.013], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.05,0.06,0.08,0.13,0.13 0.14,0.14,0.15,0.15), mean=0.0942, stddev=0.0345], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 3e-07,6e-07,0.002,0.15,0.19 0.23,0.25,0.27,0.28), mean=0.0563, stddev=0.083], bias-{mean,stddev}=1.627e-10,0.00047, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.03,0.04 0.04,0.05,0.06,0.32), mean=0.0177, stddev=0.0195], oderiv-count=28480

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.07228 tdnn2.affine:2.81128 lstm1.W_all:2.12017 lstm1.lstm_nonlin:0.0416172 lstm1.W_rp:0.943009 tdnn3.affine:1.94011 tdnn4.affine:1.98788 lstm2.W_all:1.43402 lstm2.lstm_nonlin:0.0235976 lstm2.W_rp:0.642808 tdnn5.affine:1.60426 tdnn6.affine:1.73796 lstm3.W_all:1.88367 lstm3.lstm_nonlin:0.0465069 lstm3.W_rp:0.685528 output.affine:1.618 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8931 tdnn2.affine:10.4649 lstm1.W_all:20.3618 lstm1.lstm_nonlin:1.79123 lstm1.W_rp:14.9665 tdnn3.affine:7.91122 tdnn4.affine:7.38085 lstm2.W_all:16.622 lstm2.lstm_nonlin:1.29117 lstm2.W_rp:13.9662 tdnn5.affine:7.39489 tdnn6.affine:7.40961 lstm3.W_all:23.9688 lstm3.lstm_nonlin:2.93788 lstm3.W_rp:33.3994 output.affine:30.7994 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.238139 tdnn2.affine:0.26847 lstm1.W_all:0.104136 lstm1.lstm_nonlin:0.0230883 lstm1.W_rp:0.062986 tdnn3.affine:0.245356 tdnn4.affine:0.269506 lstm2.W_all:0.0862871 lstm2.lstm_nonlin:0.0182283 lstm2.W_rp:0.0460291 tdnn5.affine:0.217029 tdnn6.affine:0.235045 lstm3.W_all:0.0786014 lstm3.lstm_nonlin:0.0157799 lstm3.W_rp:0.0205163 output.affine:0.052519 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:47:36 KST 2020, elapsed time 1 seconds
