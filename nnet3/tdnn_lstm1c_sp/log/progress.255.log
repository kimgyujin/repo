# nnet3-info exp/nnet3/tdnn_lstm1c_sp/255.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/254.mdl exp/nnet3/tdnn_lstm1c_sp/255.mdl 
# Started at Thu Jul 30 11:41:53 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/255.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000258083, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03504, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.01,0.02 0.03,0.12,0.61,0.75,0.83 0.95,1.0,1.1,1.3), mean=0.528, stddev=0.299], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.17 0.19,0.23,0.65,0.94,1.3 1.6,1.7,1.7,1.9), mean=0.675, stddev=0.428], bias-{mean,stddev}=0.0008484,0.06601, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.14e+06, self-repaired-proportion=0.217308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,4e-06,9e-06,2e-05 7e-05,0.0004,0.07,0.11,0.12 0.14,0.16,0.18,0.21), mean=0.0632, stddev=0.0482], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.003,0.003,0.008 0.02,0.05,0.45,0.62,0.69 0.81,0.88,0.90,0.99), mean=0.395, stddev=0.259], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.16,0.26,0.34,0.40 0.45,0.56,0.64,1.3), mean=0.256, stddev=0.145], oderiv-count=1.12858e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33894.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,2e-06,3e-06,1e-05 5e-05,0.0005,0.07,0.10,0.12 0.14,0.17,0.18,0.22), mean=0.0613, stddev=0.0479], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,7e-05,9e-05,0.0002 0.0005,0.003,0.10,0.13,0.15 0.15,0.16,0.17,0.18), mean=0.0865, stddev=0.0547]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000258083, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01314, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.40,0.42 0.44,0.46,0.51,0.56,0.61 0.65,0.69,0.71,0.79), mean=0.514, stddev=0.0693], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.01 0.02,0.07,0.31,0.37,0.40 0.44,0.46,0.49,0.83), mean=0.263, stddev=0.144], bias-{mean,stddev}=-0.02021,0.04041, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.42e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.26,0.28,0.29 0.31,0.32,0.35,0.40,0.42 0.45,0.48,0.49,0.56), mean=0.36, stddev=0.049], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.38,0.38,0.40 0.41,0.43,0.45,0.48,0.49 0.51,0.52,0.52,0.54), mean=0.451, stddev=0.0324], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.05,0.07), mean=0.0373, stddev=0.00695], oderiv-count=1.23274e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33146.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.30 0.31,0.32,0.35,0.40,0.43 0.46,0.50,0.52,0.58), mean=0.364, stddev=0.0519], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.52,0.53,0.54 0.56,0.59,0.64,0.71,0.75 0.79,0.82,0.84,0.92), mean=0.652, stddev=0.0739]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000258083, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01853, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,5e-06,2e-05,0.0001 0.002,0.16,0.42,0.63,0.73 0.79,0.86,0.91,1.2), mean=0.401, stddev=0.249], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.39,0.46 0.53,0.74,0.85,0.95,1.0 1.1,1.2,1.2,1.3), mean=0.827, stddev=0.177], bias-{mean,stddev}=0.0003295,0.02733, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000258083, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04641, w_fc-rms=0.02771, w_oc-rms=0.04082, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629923, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.66,0.79,0.81,0.84), mean=0.49, stddev=0.0745], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0231] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629923, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.41,0.42,0.44 0.45,0.47,0.50,0.52,0.56 0.63,0.74,0.77,0.82), mean=0.503, stddev=0.0634], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.19 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0205] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0356881, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.90,-0.86,-0.50 -0.29,-0.16,0.002,0.18,0.33 0.52,0.84,0.87,0.90), mean=0.014, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.18,0.25 0.35,0.41,0.54,0.78,1.0 1.0,1.0,1.0,1.0), mean=0.586, stddev=0.226] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629923, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.38,0.39 0.40,0.42,0.45,0.50,0.50 0.51,0.53,0.55,0.62), mean=0.451, stddev=0.04], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.217, stddev=0.0222] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00629923, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.78,-0.65,-0.36 -0.20,-0.09,0.002,0.12,0.23 0.34,0.64,0.75,0.81), mean=0.0102, stddev=0.231], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.32,0.35,0.54 0.72,0.80,0.87,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.849, stddev=0.137] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=7.5716e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.03082e-05, count-zeroing-boundaries=296949
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.166391
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000258083, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04009, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.30,0.34 0.37,0.42,0.83,1.2,1.3 1.4,1.4,1.5,1.5), mean=0.828, stddev=0.387], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.002,0.004 0.01,0.29,0.54,0.73,0.87 1.2,1.6,1.8,2.0), mean=0.541, stddev=0.353], bias-{mean,stddev}=0.01311,0.28, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000258083, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01364, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.21,0.21,0.23 0.26,0.29,0.36,0.44,0.49 0.53,0.56,0.58,0.73), mean=0.37, stddev=0.0891], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.14,0.28,0.42,0.44 0.47,0.49,0.50,0.55), mean=0.281, stddev=0.133], bias-{mean,stddev}=0.004031,0.01467, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.75e+05, self-repaired-proportion=0.00356764, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.03,0.04,0.06 0.08,0.09,0.12,0.15,0.16 0.18,0.20,0.22,0.25), mean=0.121, stddev=0.0368], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.16,0.18,0.26 0.31,0.38,0.50,0.59,0.63 0.66,0.69,0.70,0.77), mean=0.483, stddev=0.124], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.07,0.07,0.08,0.10,0.11 0.13,0.15,0.15,0.24), mean=0.0889, stddev=0.0218], oderiv-count=1.12845e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30903.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.03,0.04,0.06 0.07,0.09,0.12,0.15,0.16 0.18,0.19,0.22,0.25), mean=0.119, stddev=0.037], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.11,0.12,0.14 0.16,0.17,0.19,0.22,0.23 0.24,0.27,0.27,0.30), mean=0.19, stddev=0.0333]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000258083, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009719, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.30,0.31,0.32 0.33,0.34,0.37,0.41,0.44 0.47,0.49,0.52,0.61), mean=0.381, stddev=0.0469], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.13,0.14,0.15 0.16,0.18,0.21,0.25,0.28 0.30,0.33,0.35,0.43), mean=0.217, stddev=0.0464], bias-{mean,stddev}=-0.02121,0.01887, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.87e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.27,0.29,0.32,0.35,0.37 0.39,0.40,0.42,0.50), mean=0.321, stddev=0.0388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.37,0.38 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.50,0.52), mean=0.433, stddev=0.0304], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0305, stddev=0.00243], oderiv-count=1.17424e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28659.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.28,0.29,0.32,0.36,0.38 0.40,0.41,0.43,0.53), mean=0.326, stddev=0.0411], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.50,0.52,0.53 0.55,0.57,0.61,0.68,0.73 0.76,0.80,0.84,1.1), mean=0.626, stddev=0.0743]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000258083, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01538, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,7e-07,1e-06,3e-06 1e-05,0.0003,0.34,0.55,0.63 0.68,0.73,0.77,1.1), mean=0.299, stddev=0.254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.32,0.34,0.39 0.49,0.63,0.70,0.77,0.82 0.87,0.95,1.0,1.5), mean=0.688, stddev=0.138], bias-{mean,stddev}=6.771e-05,0.04944, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000258083, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0219, w_fc-rms=0.01165, w_oc-rms=0.0277, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635243, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.43 0.44,0.45,0.50,0.51,0.57 0.61,0.68,0.70,0.80), mean=0.499, stddev=0.0587], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.19,0.20 0.21,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0188] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635243, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.40,0.42 0.44,0.46,0.50,0.50,0.53 0.57,0.62,0.64,0.75), mean=0.492, stddev=0.0459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0169] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00936587, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.81,-0.69,-0.46 -0.30,-0.15,0.0001,0.16,0.34 0.53,0.75,0.79,0.88), mean=0.00811, stddev=0.28], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.23,0.27,0.38 0.44,0.50,0.59,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.698, stddev=0.24] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635243, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.39,0.40 0.42,0.44,0.50,0.50,0.51 0.55,0.56,0.58,0.75), mean=0.478, stddev=0.0424], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0201] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00635243, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.53,-0.47,-0.30 -0.19,-0.10,0.0002,0.10,0.23 0.37,0.54,0.60,0.71), mean=0.00774, stddev=0.197], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.48,0.55,0.68 0.75,0.82,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.894, stddev=0.112] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=5.76132e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.90901e-05, count-zeroing-boundaries=261916
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.166391
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000258083, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03869, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.43,0.46,0.52 0.55,0.57,0.82,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.844, stddev=0.258], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0008,0.001 0.002,0.006,0.57,0.82,0.94 1.1,1.2,1.4,1.6), mean=0.483, stddev=0.395], bias-{mean,stddev}=-0.0006138,0.2104, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000258083, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.013, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.24,0.25 0.28,0.29,0.34,0.41,0.47 0.51,0.55,0.56,0.60), mean=0.355, stddev=0.0761], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.38,0.41 0.44,0.45,0.46,0.51), mean=0.281, stddev=0.0955], bias-{mean,stddev}=0.001301,0.00801, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.38e+05, self-repaired-proportion=0.00144231, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.03,0.03,0.04 0.05,0.07,0.09,0.12,0.13 0.14,0.16,0.17,0.19), mean=0.0926, stddev=0.0316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.16,0.19,0.22 0.27,0.34,0.47,0.57,0.60 0.63,0.64,0.66,0.70), mean=0.454, stddev=0.123], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.09,0.11,0.12 0.14,0.15,0.16,0.20), mean=0.0975, stddev=0.0191], oderiv-count=1.02112e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26415.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.07,0.10,0.12,0.14 0.15,0.16,0.18,0.19), mean=0.0954, stddev=0.0323], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.14,0.16,0.18,0.19 0.20,0.21,0.22,0.25), mean=0.158, stddev=0.0275]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000258083, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009634, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.23,0.27 0.30,0.33,0.38,0.43,0.46 0.48,0.49,0.51,0.61), mean=0.375, stddev=0.0631], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.15 0.16,0.17,0.20,0.25,0.28 0.32,0.35,0.38,0.46), mean=0.214, stddev=0.0517], bias-{mean,stddev}=-0.02246,0.02478, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.92e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.23,0.25 0.27,0.29,0.33,0.36,0.38 0.39,0.41,0.42,0.51), mean=0.326, stddev=0.0451], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.37 0.38,0.39,0.42,0.44,0.45 0.46,0.47,0.49,0.51), mean=0.415, stddev=0.0283], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0254, stddev=0.00196], oderiv-count=914560
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24171.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.23,0.25 0.27,0.29,0.34,0.37,0.39 0.40,0.42,0.44,0.61), mean=0.333, stddev=0.0491], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.36,0.40,0.49 0.54,0.59,0.66,0.74,0.79 0.83,0.88,0.90,1.1), mean=0.661, stddev=0.106]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000258083, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02204, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.28,0.30,0.31 0.34,0.38,0.51,0.71,0.80 0.84,0.88,0.91,1.4), mean=0.537, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.63,0.67,0.73 0.76,0.79,0.87,1.2,1.4 1.5,1.7,1.8,2.1), mean=0.972, stddev=0.258], bias-{mean,stddev}=0.02119,0.0246, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000258083, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.07647, w_fc-rms=0.05033, w_oc-rms=0.05406, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.57,0.59 0.61,0.64,0.69,0.73,0.76 0.79,0.81,0.82,0.86), mean=0.687, stddev=0.0568], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.17,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.179, stddev=0.0192] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.48,0.51,0.53 0.55,0.59,0.64,0.69,0.74 0.77,0.82,0.84,0.87), mean=0.644, stddev=0.0709], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.14 0.16,0.17,0.19,0.20,0.20 0.21,0.21,0.21,0.22), mean=0.184, stddev=0.0206] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0226573, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.80,-0.73,-0.56 -0.41,-0.27,-0.01,0.27,0.39 0.54,0.74,0.78,0.90), mean=-0.00522, stddev=0.326], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.21,0.24 0.30,0.36,0.42,0.46,0.48 0.50,0.51,0.53,0.54), mean=0.404, stddev=0.0725] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.50,0.52,0.54 0.56,0.59,0.62,0.65,0.68 0.70,0.74,0.76,0.84), mean=0.62, stddev=0.0491], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.16,0.17,0.19,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.182, stddev=0.0162] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00641663, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.73,-0.66,-0.52 -0.34,-0.23,-0.009,0.22,0.32 0.49,0.68,0.69,0.85), mean=-0.00557, stddev=0.287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.31,0.35,0.40 0.48,0.56,0.64,0.69,0.71 0.73,0.74,0.75,0.77), mean=0.62, stddev=0.0951] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.35495e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.73404e-06, count-zeroing-boundaries=222749
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.166391
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000258083, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08237, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.1,1.1 1.2,1.2,1.6,2.4,2.4 2.5,2.6,2.6,2.8), mean=1.8, stddev=0.542], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.96,0.99,1.0 1.1,1.1,1.3,1.5,1.6 1.8,1.9,1.9,2.1), mean=1.31, stddev=0.226], bias-{mean,stddev}=-0.03918,0.4631, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000258083, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0438, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.59,0.60,0.61 0.63,0.65,0.69,0.74,0.77 0.81,0.87,0.92,2.4), mean=0.7, stddev=0.0908], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.6,2.7,2.7,2.8), mean=1.94, stddev=0.53], bias-{mean,stddev}=6.183e-09,0.02944, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0137], oderiv-count=558400
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/254.mdl exp/nnet3/tdnn_lstm1c_sp/255.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.46882 tdnn2.affine:5.36223 lstm1.W_all:4.37558 lstm1.lstm_nonlin:0.103297 lstm1.W_rp:1.70347 tdnn3.affine:3.52387 tdnn4.affine:3.9959 lstm2.W_all:3.10471 lstm2.lstm_nonlin:0.049793 lstm2.W_rp:1.24955 tdnn5.affine:2.90401 tdnn6.affine:3.34242 lstm3.W_all:3.81072 lstm3.lstm_nonlin:0.105985 lstm3.W_rp:1.64254 output.affine:3.75485 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.9223 tdnn2.affine:11.8797 lstm1.W_all:21.587 lstm1.lstm_nonlin:1.54468 lstm1.W_rp:15.4167 tdnn3.affine:8.69259 tdnn4.affine:8.77709 lstm2.W_all:18.0277 lstm2.lstm_nonlin:0.847892 lstm2.W_rp:14.6266 tdnn5.affine:8.27888 tdnn6.affine:8.7104 lstm3.W_all:25.67 lstm3.lstm_nonlin:2.42437 lstm3.W_rp:31.2 output.affine:32.4226 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.390705 tdnn2.affine:0.445818 lstm1.W_all:0.20273 lstm1.lstm_nonlin:0.0673572 lstm1.W_rp:0.110599 tdnn3.affine:0.401698 tdnn4.affine:0.451708 lstm2.W_all:0.172007 lstm2.lstm_nonlin:0.0596338 lstm2.W_rp:0.0856638 tdnn5.affine:0.348825 tdnn6.affine:0.380451 lstm3.W_all:0.148728 lstm3.lstm_nonlin:0.0443378 lstm3.W_rp:0.05281 output.affine:0.116023 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:41:53 KST 2020, elapsed time 0 seconds
