# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/479.mdl exp/nnet3/tdnn_lstm1c_sp/480.mdl 
# Started at Thu Jul 30 13:11:30 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/479.mdl exp/nnet3/tdnn_lstm1c_sp/480.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=6.23276e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006413, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.001,0.002 0.003,0.007,0.12,0.14,0.15 0.17,0.18,0.19,0.21), mean=0.0948, stddev=0.0578], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.04,0.13,0.17,0.21 0.27,0.32,0.34,0.41), mean=0.126, stddev=0.075], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.007 0.01,0.02,0.07,0.18,0.25 0.31,0.37,0.42,0.49), mean=0.104, stddev=0.103], bias-{mean,stddev}=0.000238,0.008362, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.94e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.03,-0.02,-0.01,-0.003 -0.0004,2e-05,0.02,0.08,0.11 0.14,0.16,0.18,0.29), mean=0.041, stddev=0.0485], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.59,-0.30,-0.23,-0.14 -0.06,0.04,0.34,0.63,0.76 0.87,0.91,0.97,1.0), mean=0.336, stddev=0.311], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.58,1.5,2.2 2.6,3.0,3.6,5.3), mean=0.825, stddev=0.928], oderiv-count=14016
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2750.06, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.25,-0.10,-0.07,-0.04 -0.02,-0.002,0.01,0.10,0.15 0.18,0.24,0.27,0.45), mean=0.0419, stddev=0.0758], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.004,0.09,0.12 0.14,0.16,0.17,0.19), mean=0.0417, stddev=0.0517]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.23276e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002537, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.09,0.10,0.11,0.11 0.11,0.12,0.12,0.14), mean=0.0998, stddev=0.00878], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0006,0.0006,0.0009 0.001,0.004,0.06,0.07,0.08 0.09,0.09,0.09,0.12), mean=0.0494, stddev=0.0302], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.01,0.01 0.01,0.02,0.05,0.12,0.17 0.23,0.27,0.29,0.33), mean=0.0742, stddev=0.0674], bias-{mean,stddev}=-0.0002699,0.00448, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=4.93e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,-0.03,-0.003,0.06 0.09,0.14,0.23,0.34,0.41 0.48,0.56,0.60,0.73), mean=0.242, stddev=0.133], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.11,0.06,0.10,0.20 0.27,0.34,0.45,0.55,0.62 0.67,0.72,0.74,0.99), mean=0.444, stddev=0.143]
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2717.29, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,-0.03,0.02,0.06 0.11,0.15,0.26,0.39,0.49 0.54,0.62,0.65,0.87), mean=0.275, stddev=0.146], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.17,0.44,0.61,0.70 0.77,0.85,0.93,1.2), mean=0.409, stddev=0.244]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.23276e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001464, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-09,3e-08,7e-08,4e-07 1e-05,0.02,0.03,0.05,0.06 0.07,0.07,0.08,0.10), mean=0.0312, stddev=0.0204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.03,0.07,0.08,0.09 0.09,0.10,0.10,0.12), mean=0.0627, stddev=0.023], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,7e-08,9e-08 1e-07,0.01,0.03,0.07,0.11 0.15,0.19,0.22,0.26), mean=0.0469, stddev=0.0475], bias-{mean,stddev}=2.756e-05,0.000443, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.23276e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0005562, w_fc-rms=0.0005361, w_oc-rms=0.001345, count=4.47e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000295829, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.51,-0.19,-0.05,0.08 0.17,0.34,0.50,0.78,0.92 1.0,1.1,1.2,2.5), mean=0.545, stddev=0.298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.33,-0.21,-0.17,-0.07 0.006,0.11,0.25,0.37,0.47 0.58,0.67,0.72,0.95), mean=0.248, stddev=0.187] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000295829, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.64,-0.23,-0.10,0.04 0.21,0.31,0.50,0.69,0.80 0.93,1.0,1.2,2.3), mean=0.502, stddev=0.273], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.52,-0.13,-0.08,-0.009 0.07,0.16,0.25,0.31,0.40 0.46,0.56,0.62,0.92), mean=0.239, stddev=0.141] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00598652, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.9,-5.0,-4.4,-3.1 -2.4,-1.4,-0.0006,1.1,2.0 3.0,3.6,4.4,8.8), mean=-0.0715, stddev=1.84], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.5,-4.0,-2.8,-2.0 -1.2,-0.12,1.0,2.4,3.2 3.7,4.4,4.9,7.4), mean=1.07, stddev=1.72] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000295829, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.39,-0.32,-0.07 0.09,0.25,0.50,0.79,0.97 1.1,1.3,1.4,1.9), mean=0.52, stddev=0.362], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.55,-0.31,-0.24,-0.12 -0.05,0.08,0.25,0.40,0.51 0.68,0.79,0.89,1.3), mean=0.25, stddev=0.232] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0503213, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.7,-3.6,-3.3,-2.6 -1.8,-1.1,-0.007,1.2,2.1 2.9,3.6,4.0,5.7), mean=0.00682, stddev=1.6], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-1.6,-1.0,-0.30 0.13,0.61,1.1,2.0,2.5 2.9,3.4,3.7,4.4), mean=1.25, stddev=0.977] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=5.86e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=-0.000572738, count-zeroing-boundaries=873
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00991736
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.23276e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002139, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.05,0.06,0.06 0.07,0.07,0.07,0.08), mean=0.0468, stddev=0.0138], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,5e-05,6e-05,0.0001 0.0004,0.02,0.03,0.04,0.05 0.05,0.05,0.06,0.06), mean=0.0309, stddev=0.0154], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.05,0.09 0.12,0.15,0.16,0.18), mean=0.0222, stddev=0.0434], bias-{mean,stddev}=0.0003277,0.002488, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=6.23276e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002495, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.06,0.07,0.08,0.08 0.09,0.09,0.10,0.11), mean=0.0688, stddev=0.0109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.05,0.07,0.08 0.08,0.08,0.09,0.10), mean=0.0542, stddev=0.0173], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-08,3e-08,3e-08 5e-08,7e-08,1e-05,0.07,0.13 0.18,0.22,0.24,0.28), mean=0.0347, stddev=0.0604], bias-{mean,stddev}=7.997e-06,0.002012, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=256, self-repaired-proportion=-0.00602564, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-45,-23,-22,-18 -13,-7.5,-0.03,11,15 20,25,29,36), mean=0.818, stddev=11.4], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-129,-103,-91,-76 -61,-42,-3.3,37,62 100,111,132,165), mean=1, stddev=49.6]
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2618.98, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.20,-0.09,-0.06,-0.03 -0.01,0.02,0.08,0.16,0.20 0.23,0.29,0.30,0.42), mean=0.0891, stddev=0.0841], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.02,0.12,0.18,0.21 0.23,0.25,0.25,0.27), mean=0.112, stddev=0.0751]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.23276e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.001813, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.06,0.07,0.07,0.08,0.08 0.08,0.08,0.09,0.09), mean=0.0714, stddev=0.00601], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.05,0.06,0.07), mean=0.0409, stddev=0.00579], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.02,0.04,0.08,0.12 0.15,0.19,0.20,0.22), mean=0.0576, stddev=0.0426], bias-{mean,stddev}=-1.197e-05,0.001962, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=4.68e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.06,0.05,0.06,0.10 0.12,0.15,0.22,0.31,0.35 0.41,0.46,0.48,0.60), mean=0.234, stddev=0.096], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.06,0.11,0.13,0.20 0.26,0.33,0.46,0.57,0.66 0.70,0.75,0.77,0.97), mean=0.454, stddev=0.152], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.02,0.04,0.05,0.06 0.06,0.07,0.08,0.08), mean=0.0356, stddev=0.0202], oderiv-count=51040
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2520.68, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.12,0.04,0.05,0.08 0.12,0.15,0.23,0.34,0.38 0.44,0.50,0.53,1.0), mean=0.247, stddev=0.116], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.09,0.25,0.45,0.60,0.67 0.75,0.81,0.85,1.3), mean=0.429, stddev=0.215]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.23276e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001006, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,1e-07,2e-07,6e-07 2e-06,4e-05,0.02,0.03,0.04 0.05,0.06,0.06,0.07), mean=0.0191, stddev=0.0171], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.05,0.05,0.06 0.06,0.06,0.07,0.07), mean=0.0433, stddev=0.0151], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,7e-08 1e-05,0.007,0.02,0.05,0.07 0.11,0.14,0.16,0.19), mean=0.031, stddev=0.0339], bias-{mean,stddev}=4.351e-05,0.0004265, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.23276e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0003406, w_fc-rms=0.0003666, w_oc-rms=0.0006325, count=3.48e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000350462, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.38,-0.07,-0.003,0.11 0.23,0.37,0.50,0.69,0.87 0.95,1.1,1.1,1.8), mean=0.525, stddev=0.245], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.40,-0.17,-0.07,-0.01 0.07,0.16,0.25,0.30,0.40 0.49,0.56,0.60,0.80), mean=0.239, stddev=0.141] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000350462, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.69,-0.05,-0.03,0.08 0.20,0.37,0.50,0.63,0.75 0.85,0.96,1.0,1.3), mean=0.493, stddev=0.22], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.14,-0.04,-0.02,0.07 0.13,0.19,0.25,0.29,0.35 0.41,0.49,0.52,0.87), mean=0.245, stddev=0.106] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000350462, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.9,-3.8,-3.4,-2.5 -1.7,-0.88,-0.002,0.85,1.8 2.6,3.2,3.7,6.1), mean=0.00559, stddev=1.44], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.6,-3.2,-2.5,-1.6 -0.89,-0.0001,1.0,1.6,2.4 3.3,3.9,4.4,5.2), mean=0.842, stddev=1.39] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000350462, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.49,-0.26,-0.09,0.02 0.12,0.30,0.50,0.65,0.79 0.96,1.1,1.3,1.6), mean=0.488, stddev=0.275], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.70,-0.26,-0.18,-0.09 0.007,0.14,0.25,0.36,0.46 0.55,0.64,0.65,0.82), mean=0.245, stddev=0.182] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000350462, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.7,-3.5,-3.1,-2.2 -1.6,-0.74,0.008,0.85,1.6 2.3,3.1,3.5,5.3), mean=0.0416, stddev=1.31], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-1.0,-0.55,-0.22 0.11,0.56,1.0,1.5,2.1 2.4,3.1,3.3,4.3), mean=1.06, stddev=0.784] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=4.7e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00140056, count-zeroing-boundaries=714
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00991736
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.23276e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001477, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.04,0.04 0.05,0.05,0.05,0.05), mean=0.0325, stddev=0.00893], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,7e-05,9e-05,0.0001 0.0002,0.0008,0.03,0.03,0.03 0.04,0.04,0.04,0.05), mean=0.0193, stddev=0.0139], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 6e-08,1e-07,1e-06,0.04,0.07 0.08,0.10,0.10,0.12), mean=0.017, stddev=0.0291], bias-{mean,stddev}=-6.158e-05,0.001872, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=6.23276e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002105, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.06,0.06,0.07 0.08,0.08,0.09,0.10), mean=0.0579, stddev=0.0101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.05,0.06,0.06 0.07,0.07,0.07,0.08), mean=0.0462, stddev=0.0131], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-08,3e-08,4e-08 5e-08,9e-08,0.001,0.06,0.10 0.15,0.19,0.20,0.24), mean=0.0306, stddev=0.0502], bias-{mean,stddev}=0.000169,0.001626, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2422.38, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.10,-0.05,-0.04,-0.02 -0.01,0.01,0.06,0.12,0.16 0.20,0.25,0.27,0.33), mean=0.0673, stddev=0.0696], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.11,0.16,0.19 0.22,0.24,0.25,0.30), mean=0.0992, stddev=0.0725]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.23276e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.001644, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.06,0.06,0.07,0.07 0.08,0.08,0.08,0.09), mean=0.0645, stddev=0.00706], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.05,0.05,0.05,0.06), mean=0.037, stddev=0.00575], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.04,0.08,0.11 0.14,0.17,0.18,0.21), mean=0.0509, stddev=0.0403], bias-{mean,stddev}=0.0002178,0.001735, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.18e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.18,0.20,0.24,0.29,0.31 0.33,0.35,0.38,0.44), mean=0.242, stddev=0.0536], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.23,0.26,0.29 0.32,0.35,0.41,0.47,0.50 0.53,0.56,0.57,0.63), mean=0.41, stddev=0.0719]
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=2324.07, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,0.008,0.02,0.06 0.10,0.15,0.24,0.33,0.39 0.43,0.50,0.58,0.74), mean=0.245, stddev=0.115], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.17,0.44,0.62,0.73 0.80,0.89,0.92,0.98), mean=0.41, stddev=0.251]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.23276e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001496, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.01 0.01,0.02,0.03,0.05,0.07 0.08,0.08,0.09,0.11), mean=0.0321, stddev=0.0207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.07,0.11 0.12,0.13,0.13,0.13), mean=0.0626, stddev=0.0271], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,8e-06 0.007,0.01,0.02,0.06,0.12 0.17,0.22,0.24,0.27), mean=0.0428, stddev=0.0531], bias-{mean,stddev}=7.737e-05,0.0003429, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.23276e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0007087, w_fc-rms=0.0008537, w_oc-rms=0.001424, count=2.5e+03, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000447626, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.9,-2.2,-2.0,-1.7 -1.1,-0.63,0.16,1.0,1.6 2.2,3.0,3.5,4.8), mean=0.224, stddev=1.13], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.97,-0.67,-0.51,-0.39 -0.25,-0.10,0.22,0.47,0.60 0.74,0.92,0.96,1.4), mean=0.196, stddev=0.347] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000447626, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-2.2,-2.0,-1.3 -0.81,-0.26,0.80,1.9,2.7 3.1,3.9,4.5,5.9), mean=0.847, stddev=1.38], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.53,-0.42,-0.30 -0.16,-9e-05,0.25,0.55,0.72 0.88,1.1,1.2,1.4), mean=0.266, stddev=0.347] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0556563, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-26,-19,-17,-12 -8.8,-5.6,0.51,6.5,9.8 13,16,19,23), mean=0.528, stddev=7.62], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-12,-6.8,-6.6,-5.1 -3.7,-2.1,0.86,3.5,5.1 6.4,8.2,8.8,12), mean=0.762, stddev=3.51] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000447626, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.4,-3.7,-3.3,-2.7 -2.1,-1.2,0.002,1.3,2.2 2.8,3.7,4.3,5.3), mean=0.0506, stddev=1.64], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.61,-0.50,-0.35 -0.19,0.0002,0.37,0.68,0.87 1.0,1.2,1.3,2.1), mean=0.351, stddev=0.421] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.408042, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-19,-16,-13,-10 -7.9,-5.0,0.55,5.8,7.9 10,13,16,20), mean=0.357, stddev=6.45], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.7,-4.6,-4.0,-2.4 -1.5,-0.59,1.6,3.7,5.0 5.8,6.7,7.2,9.8), mean=1.63, stddev=2.56] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=3.55e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=532
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.00991736
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.23276e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001601, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.05,0.05 0.05,0.06,0.06,0.06), mean=0.0324, stddev=0.0169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0252, stddev=0.00567], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-07,2e-07,2e-07 3e-07,5e-07,0.004,0.04,0.07 0.09,0.10,0.11,0.13), mean=0.0212, stddev=0.0297], bias-{mean,stddev}=-0.0003263,0.003378, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=6.23276e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001649, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.009,0.01 0.01,0.02,0.02,0.03,0.04 0.04,0.05,0.05,0.11), mean=0.0246, stddev=0.0102], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.06,0.10,0.10 0.10,0.11,0.11,0.11), mean=0.0712, stddev=0.0254], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 3e-07,5e-07,0.002,0.11,0.15 0.17,0.18,0.20,0.21), mean=0.0427, stddev=0.0624], bias-{mean,stddev}=1.459e-10,0.0002547, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.05,0.07 0.08,0.09,0.10,0.74), mean=0.0239, stddev=0.0366], oderiv-count=7680

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.54018 tdnn2.affine:2.28773 lstm1.W_all:1.70191 lstm1.lstm_nonlin:0.0353653 lstm1.W_rp:0.787495 tdnn3.affine:1.58963 tdnn4.affine:1.63388 lstm2.W_all:1.17022 lstm2.lstm_nonlin:0.0183914 lstm2.W_rp:0.543796 tdnn5.affine:1.34116 tdnn6.affine:1.48116 lstm3.W_all:1.73991 lstm3.lstm_nonlin:0.0411698 lstm3.W_rp:0.591244 output.affine:1.21939 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8013 tdnn2.affine:10.2615 lstm1.W_all:20.0366 lstm1.lstm_nonlin:1.34727 lstm1.W_rp:14.2998 tdnn3.affine:7.77002 tdnn4.affine:7.30125 lstm2.W_all:16.3951 lstm2.lstm_nonlin:1.03398 lstm2.W_rp:13.374 tdnn5.affine:7.25661 tdnn6.affine:7.31277 lstm3.W_all:23.2898 lstm3.lstm_nonlin:2.12491 lstm3.W_rp:31.587 output.affine:29.7152 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.19803 tdnn2.affine:0.222494 lstm1.W_all:0.0849088 lstm1.lstm_nonlin:0.0260886 lstm1.W_rp:0.0550237 tdnn3.affine:0.204888 tdnn4.affine:0.224108 lstm2.W_all:0.0713978 lstm2.lstm_nonlin:0.0177381 lstm2.W_rp:0.0406267 tdnn5.affine:0.185224 tdnn6.affine:0.202958 lstm3.W_all:0.0746753 lstm3.lstm_nonlin:0.0192124 lstm3.W_rp:0.0187063 output.affine:0.0410331 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 13:11:31 KST 2020, elapsed time 1 seconds
