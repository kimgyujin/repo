# nnet3-info exp/nnet3/tdnn_lstm1c_sp/70.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/69.mdl exp/nnet3/tdnn_lstm1c_sp/70.mdl 
# Started at Thu Jul 30 10:28:49 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/70.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000241035, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03089, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.02,0.03 0.06,0.44,0.54,0.64,0.69 0.74,0.80,0.88,1.0), mean=0.494, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.17,0.21,0.60,0.82,1.2 1.5,1.5,1.5,1.7), mean=0.597, stddev=0.374], bias-{mean,stddev}=0.002938,0.05554, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.09e+06, self-repaired-proportion=0.11481, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,3e-06,9e-06,6e-05 0.0002,0.03,0.06,0.08,0.10 0.11,0.12,0.14,0.18), mean=0.059, stddev=0.0347], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0007,0.003,0.01 0.04,0.26,0.48,0.63,0.70 0.78,0.84,0.87,0.94), mean=0.445, stddev=0.226], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.06 0.12,0.27,0.36,0.44,0.49 0.55,0.65,0.78,1.0), mean=0.35, stddev=0.146], oderiv-count=1.18054e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32633.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,6e-07,2e-06,1e-05 0.0001,0.02,0.06,0.08,0.10 0.12,0.13,0.14,0.20), mean=0.0566, stddev=0.0354], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,4e-05,8e-05,0.0003 0.001,0.06,0.09,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.0812, stddev=0.0385]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000241035, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01282, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.41,0.42 0.43,0.45,0.50,0.55,0.58 0.60,0.63,0.63,0.78), mean=0.503, stddev=0.056], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.01,0.02 0.04,0.25,0.30,0.34,0.36 0.38,0.40,0.44,0.64), mean=0.272, stddev=0.108], bias-{mean,stddev}=5.372e-05,0.0282, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.30 0.31,0.33,0.35,0.38,0.41 0.44,0.47,0.48,0.63), mean=0.359, stddev=0.0418], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.40,0.41 0.42,0.43,0.46,0.49,0.50 0.51,0.52,0.52,0.54), mean=0.46, stddev=0.029], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.07,0.07), mean=0.042, stddev=0.00827], oderiv-count=1.21702e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31911.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.29,0.30 0.31,0.32,0.35,0.39,0.42 0.45,0.49,0.50,0.71), mean=0.361, stddev=0.0502], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.49,0.50,0.53 0.55,0.57,0.63,0.69,0.72 0.76,0.85,0.87,1.1), mean=0.635, stddev=0.0783]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000241035, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01762, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.003,0.007,0.04 0.13,0.23,0.39,0.58,0.68 0.75,0.83,0.90,1.1), mean=0.399, stddev=0.207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.41,0.45 0.52,0.70,0.82,0.90,0.94 0.99,1.0,1.1,1.3), mean=0.788, stddev=0.156], bias-{mean,stddev}=-0.001701,0.02034, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000241035, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02529, w_fc-rms=0.0405, w_oc-rms=0.05546, count=1.46e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614611, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.45,0.46,0.49,0.53,0.57 0.61,0.66,0.69,0.71), mean=0.5, stddev=0.0532], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0148] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614611, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.38,0.40 0.42,0.44,0.48,0.53,0.61 0.70,0.77,0.80,0.84), mean=0.496, stddev=0.0867], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.17,0.19 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0204] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00833983, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.83,-0.78,-0.57 -0.40,-0.21,-0.001,0.22,0.38 0.58,0.73,0.78,0.84), mean=0.000897, stddev=0.315], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.27,0.29,0.35 0.39,0.46,0.59,0.70,0.86 0.98,1.0,1.0,1.0), mean=0.595, stddev=0.169] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00614611, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.42 0.43,0.44,0.47,0.51,0.53 0.56,0.59,0.60,0.68), mean=0.476, stddev=0.0437], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0171] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0223073, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.94,-0.87,-0.81,-0.53 -0.34,-0.19,0.0004,0.18,0.35 0.54,0.72,0.81,0.91), mean=-0.00215, stddev=0.304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.18,0.23,0.39 0.57,0.71,0.82,0.89,0.92 0.99,1.0,1.0,1.0), mean=0.781, stddev=0.167] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=297384
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000241035, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03202, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.26 0.28,0.32,0.49,0.99,1.1 1.1,1.2,1.2,1.4), mean=0.652, stddev=0.33], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.03,0.04,0.08 0.22,0.34,0.49,0.61,0.69 0.80,0.94,0.99,1.1), mean=0.478, stddev=0.195], bias-{mean,stddev}=-0.003892,0.04209, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000241035, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0129, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.23,0.24,0.25 0.27,0.29,0.34,0.41,0.45 0.50,0.53,0.54,0.67), mean=0.353, stddev=0.0736], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.10 0.11,0.12,0.21,0.40,0.45 0.48,0.51,0.53,0.54), mean=0.26, stddev=0.139], bias-{mean,stddev}=-0.004087,0.02708, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0.00192308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.06,0.07 0.09,0.11,0.14,0.17,0.19 0.21,0.23,0.24,0.26), mean=0.141, stddev=0.0413], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.18,0.20,0.27 0.31,0.38,0.50,0.60,0.64 0.66,0.69,0.70,0.77), mean=0.489, stddev=0.123], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.06,0.06,0.07,0.08,0.09 0.10,0.11,0.12,0.19), mean=0.0752, stddev=0.0143], oderiv-count=1.02656e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29746.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.04,0.05,0.07 0.08,0.10,0.14,0.17,0.19 0.21,0.22,0.23,0.27), mean=0.136, stddev=0.0419], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.13,0.15,0.17 0.18,0.19,0.22,0.25,0.26 0.28,0.30,0.32,0.37), mean=0.22, stddev=0.0363]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000241035, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009493, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.30,0.32 0.33,0.34,0.37,0.40,0.42 0.43,0.45,0.46,0.63), mean=0.373, stddev=0.0373], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.15,0.16,0.17 0.18,0.19,0.21,0.24,0.26 0.28,0.30,0.31,0.36), mean=0.214, stddev=0.0344], bias-{mean,stddev}=-0.01004,0.01708, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.73e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.22,0.23,0.24 0.25,0.27,0.30,0.33,0.35 0.37,0.38,0.40,0.44), mean=0.301, stddev=0.0392], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.49,0.51,0.52,0.53), mean=0.441, stddev=0.0317], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0307, stddev=0.00279], oderiv-count=1.06086e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27581.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.25,0.26,0.30,0.33,0.35 0.37,0.40,0.42,0.44), mean=0.299, stddev=0.0415], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.45,0.47,0.48 0.50,0.52,0.57,0.62,0.66 0.69,0.72,0.76,0.84), mean=0.573, stddev=0.0653]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000241035, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01369, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0007,0.001 0.004,0.02,0.28,0.48,0.57 0.62,0.66,0.70,1.1), mean=0.277, stddev=0.212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.32 0.38,0.53,0.64,0.71,0.74 0.77,0.81,0.84,0.97), mean=0.61, stddev=0.132], bias-{mean,stddev}=-0.002756,0.02132, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000241035, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01409, w_fc-rms=0.01912, w_oc-rms=0.02343, count=1.33e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0061978, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.43,0.44,0.45 0.45,0.47,0.50,0.51,0.53 0.56,0.59,0.60,0.66), mean=0.495, stddev=0.0333], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0156] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0061978, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.41,0.42 0.43,0.45,0.49,0.50,0.52 0.56,0.60,0.63,0.73), mean=0.485, stddev=0.044], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0126] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0100201, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.66,-0.60,-0.38 -0.23,-0.12,0.004,0.16,0.29 0.38,0.57,0.64,0.75), mean=0.0112, stddev=0.225], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.45,0.48,0.52 0.54,0.57,0.65,0.98,1.0 1.0,1.0,1.0,1.0), mean=0.727, stddev=0.181] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0061978, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.42,0.43 0.44,0.46,0.49,0.50,0.52 0.55,0.57,0.59,0.65), mean=0.487, stddev=0.0344], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0163] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0061978, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.72,-0.65,-0.57,-0.35 -0.22,-0.11,0.005,0.15,0.26 0.39,0.53,0.63,0.85), mean=0.0121, stddev=0.218], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.50,0.55,0.67 0.75,0.82,0.88,0.99,1.0 1.0,1.0,1.0,1.0), mean=0.877, stddev=0.109] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=262302
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000241035, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02868, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.39,0.40 0.41,0.45,0.62,0.82,0.87 0.90,0.94,0.94,1.1), mean=0.628, stddev=0.181], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.009,0.01 0.02,0.06,0.44,0.61,0.69 0.75,0.84,0.90,1.1), mean=0.385, stddev=0.256], bias-{mean,stddev}=-0.002907,0.1009, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000241035, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01199, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.21 0.23,0.26,0.31,0.38,0.45 0.49,0.56,0.58,0.64), mean=0.324, stddev=0.0857], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.17,0.18,0.25,0.34,0.37 0.39,0.42,0.43,0.49), mean=0.262, stddev=0.0783], bias-{mean,stddev}=0.001334,0.01893, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.32e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.05,0.06,0.09,0.12,0.13 0.14,0.15,0.17,0.22), mean=0.0898, stddev=0.0323], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.14,0.15,0.19 0.25,0.30,0.43,0.55,0.59 0.62,0.65,0.65,0.69), mean=0.424, stddev=0.13], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.07,0.07,0.08,0.10,0.11 0.12,0.14,0.15,0.19), mean=0.0868, stddev=0.0187], oderiv-count=997632
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25416, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.05,0.06,0.09,0.12,0.13 0.15,0.16,0.16,0.22), mean=0.0878, stddev=0.0339], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.11 0.12,0.13,0.16,0.18,0.19 0.21,0.23,0.23,0.25), mean=0.157, stddev=0.0326]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000241035, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009145, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.29 0.30,0.31,0.35,0.40,0.43 0.45,0.47,0.48,0.51), mean=0.358, stddev=0.0498], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.12,0.14 0.15,0.17,0.20,0.23,0.26 0.29,0.33,0.36,0.46), mean=0.203, stddev=0.0467], bias-{mean,stddev}=-0.011,0.015, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.37e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.23 0.25,0.27,0.31,0.34,0.35 0.37,0.38,0.40,0.41), mean=0.304, stddev=0.0405], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.36 0.38,0.39,0.42,0.45,0.46 0.47,0.49,0.50,0.51), mean=0.421, stddev=0.0326], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0261, stddev=0.00281], oderiv-count=908480
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23250.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.21,0.22 0.24,0.27,0.30,0.34,0.35 0.37,0.38,0.39,0.44), mean=0.301, stddev=0.0433], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.45,0.47 0.49,0.52,0.59,0.66,0.70 0.74,0.78,0.79,0.88), mean=0.594, stddev=0.081]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000241035, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01975, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.17,0.24 0.31,0.36,0.43,0.62,0.76 0.80,0.85,0.88,1.4), mean=0.475, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.62 0.64,0.66,0.74,1.1,1.4 1.4,1.5,1.5,1.7), mean=0.859, stddev=0.27], bias-{mean,stddev}=0.007723,0.02407, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000241035, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0301, w_fc-rms=0.04078, w_oc-rms=0.05717, count=1.21e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626018, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.45,0.47 0.48,0.51,0.57,0.64,0.66 0.68,0.71,0.71,0.79), mean=0.576, stddev=0.0665], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.19,0.20,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.205, stddev=0.00994] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626018, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.46,0.47,0.48 0.50,0.54,0.59,0.64,0.67 0.69,0.73,0.75,0.88), mean=0.59, stddev=0.0641], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.17,0.18,0.18 0.19,0.19,0.21,0.22,0.22 0.22,0.22,0.23,0.23), mean=0.204, stddev=0.0137] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00817122, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.81,-0.77,-0.54 -0.33,-0.20,0.004,0.20,0.35 0.51,0.72,0.82,0.85), mean=-0.00391, stddev=0.299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.26,0.29,0.32 0.34,0.39,0.44,0.48,0.50 0.52,0.53,0.54,0.63), mean=0.434, stddev=0.0614] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0066636, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.55,0.56 0.59,0.61,0.65,0.69,0.71 0.73,0.75,0.78,0.94), mean=0.652, stddev=0.0515], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.15,0.15,0.16 0.17,0.18,0.19,0.20,0.20 0.20,0.21,0.21,0.21), mean=0.186, stddev=0.0135] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0218444, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.98,-0.87,-0.83,-0.53 -0.31,-0.18,0.0006,0.19,0.31 0.53,0.71,0.87,0.94), mean=-0.00127, stddev=0.301], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.19,0.21,0.36 0.47,0.55,0.64,0.69,0.71 0.72,0.73,0.73,0.76), mean=0.608, stddev=0.114] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223066
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000241035, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06897, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.2,1.6,1.8,1.9 1.9,2.0,2.0,2.1), mean=1.55, stddev=0.277], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.65,0.76,0.87 0.91,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.1, stddev=0.153], bias-{mean,stddev}=0.0008316,0.08408, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000241035, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04061, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.52,0.53,0.55 0.57,0.59,0.64,0.70,0.74 0.78,0.82,0.86,2.1), mean=0.648, stddev=0.0931], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.3,1.4,1.4 1.5,1.5,1.8,2.1,2.2 2.3,2.4,2.4,2.7), mean=1.84, stddev=0.292], bias-{mean,stddev}=4.207e-09,0.02633, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0167, stddev=0.0139], oderiv-count=537600
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/69.mdl exp/nnet3/tdnn_lstm1c_sp/70.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.70102 tdnn2.affine:8.91764 lstm1.W_all:7.60331 lstm1.lstm_nonlin:0.143111 lstm1.W_rp:3.09433 tdnn3.affine:5.39916 tdnn4.affine:6.30455 lstm2.W_all:5.0051 lstm2.lstm_nonlin:0.0647589 lstm2.W_rp:2.06171 tdnn5.affine:4.40596 tdnn6.affine:5.28513 lstm3.W_all:6.74236 lstm3.lstm_nonlin:0.16179 lstm3.W_rp:2.67994 output.affine:5.85764 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.2672 tdnn2.affine:11.5636 lstm1.W_all:20.5034 lstm1.lstm_nonlin:1.66868 lstm1.W_rp:11.7938 tdnn3.affine:8.24119 tdnn4.affine:8.56162 lstm2.W_all:15.9478 lstm2.lstm_nonlin:0.760701 lstm2.W_rp:10.6689 tdnn5.affine:7.64932 tdnn6.affine:8.24731 lstm3.W_all:22.9891 lstm3.lstm_nonlin:1.74222 lstm3.W_rp:25.3979 output.affine:30.0605 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.721974 tdnn2.affine:0.779068 lstm1.W_all:0.370169 lstm1.lstm_nonlin:0.0854223 lstm1.W_rp:0.261723 tdnn3.affine:0.660638 tdnn4.affine:0.742465 lstm2.W_all:0.314118 lstm2.lstm_nonlin:0.0852995 lstm2.W_rp:0.193346 tdnn5.affine:0.584798 tdnn6.affine:0.646986 lstm3.W_all:0.293942 lstm3.lstm_nonlin:0.0927369 lstm3.W_rp:0.105996 output.affine:0.195007 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:28:50 KST 2020, elapsed time 1 seconds
