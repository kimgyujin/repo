# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/169.mdl exp/nnet3/tdnn_lstm1c_sp/170.mdl 
# Started at Thu Jul 30 11:08:17 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/169.mdl exp/nnet3/tdnn_lstm1c_sp/170.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000176083, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01749, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.007,0.01 0.03,0.21,0.31,0.36,0.39 0.42,0.46,0.48,0.63), mean=0.275, stddev=0.128], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.11,0.13,0.37,0.48,0.57 0.74,0.84,0.86,0.98), mean=0.348, stddev=0.195], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.06,0.21,0.50,0.69 0.84,0.99,1.1,1.3), mean=0.295, stddev=0.269], bias-{mean,stddev}=-0.0003545,0.02468, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-1628.98, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000176083, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007786, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.26 0.27,0.28,0.31,0.33,0.34 0.35,0.37,0.37,0.41), mean=0.306, stddev=0.0282], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.006 0.02,0.12,0.18,0.21,0.23 0.24,0.25,0.26,0.34), mean=0.162, stddev=0.0737], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.06,0.08,0.17,0.37,0.52 0.66,0.80,0.84,0.99), mean=0.239, stddev=0.194], bias-{mean,stddev}=-0.0004866,0.01254, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.06,0.08 0.10,0.11,0.12,0.19), mean=0.031, stddev=0.036], oderiv-count=45440
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-1576.55, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000176083, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004819, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,7e-05,0.0002,0.001 0.008,0.05,0.10,0.16,0.19 0.23,0.26,0.28,0.40), mean=0.103, stddev=0.0669], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.08 0.08,0.12,0.23,0.25,0.27 0.28,0.29,0.29,0.37), mean=0.209, stddev=0.0669], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-07,1e-07,2e-07 3e-07,0.05,0.11,0.25,0.36 0.48,0.63,0.70,0.82), mean=0.158, stddev=0.152], bias-{mean,stddev}=-0.0001158,0.001812, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000176083, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001462, w_fc-rms=0.001788, w_oc-rms=0.003781, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000346065, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.11,0.14,0.20 0.29,0.38,0.50,0.62,0.73 0.83,0.94,0.99,1.3), mean=0.506, stddev=0.179], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.09,0.009,0.04,0.11 0.15,0.19,0.25,0.28,0.32 0.34,0.37,0.41,0.52), mean=0.236, stddev=0.074] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000346065, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.02,0.11,0.17,0.26 0.33,0.40,0.50,0.61,0.70 0.80,0.91,1.0,1.3), mean=0.515, stddev=0.163], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.08,0.10,0.15 0.18,0.21,0.25,0.28,0.30 0.33,0.37,0.38,0.44), mean=0.245, stddev=0.054] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0291141, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-2.5,-2.3,-1.9 -1.4,-0.93,0.03,0.76,1.4 1.9,2.5,2.8,3.7), mean=-0.00773, stddev=1.1], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-1.1,-0.89,-0.67 -0.26,0.05,0.76,1.2,1.5 1.7,2.1,2.5,3.3), mean=0.659, stddev=0.728] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000346065, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.52,-0.09,-0.05,0.11 0.22,0.33,0.49,0.61,0.69 0.81,0.93,0.97,1.4), mean=0.47, stddev=0.208], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.11,-0.04,-0.01,0.04 0.10,0.16,0.24,0.29,0.33 0.37,0.40,0.42,0.60), mean=0.226, stddev=0.0948] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00412685, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-2.0,-1.8,-1.5 -1.1,-0.70,0.01,0.55,1.0 1.4,1.9,2.1,2.9), mean=-0.0224, stddev=0.838], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.37,-0.09,0.14 0.40,0.60,0.92,1.2,1.3 1.5,1.8,1.9,2.6), mean=0.88, stddev=0.41] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-3.23e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-4845
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.031405
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000176083, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.006107, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.12,0.19,0.20 0.21,0.22,0.23,0.24), mean=0.124, stddev=0.0632], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.002,0.003,0.007 0.02,0.07,0.10,0.12,0.13 0.15,0.16,0.16,0.19), mean=0.0903, stddev=0.0394], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,5e-08,5e-08,6e-08 8e-08,1e-07,7e-07,0.01,0.28 0.38,0.46,0.50,0.55), mean=0.055, stddev=0.128], bias-{mean,stddev}=-3.452e-05,0.009449, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000176083, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006949, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.16,0.19,0.22,0.24 0.26,0.27,0.29,0.31), mean=0.191, stddev=0.0351], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.05,0.11,0.22,0.23 0.25,0.26,0.27,0.32), mean=0.137, stddev=0.0802], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,6e-08,6e-08,9e-08 1e-07,2e-07,4e-05,0.14,0.37 0.51,0.63,0.70,0.81), mean=0.0851, stddev=0.174], bias-{mean,stddev}=5.09e-05,0.0103, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.17,0.23 0.27,0.31,0.36,0.41), mean=0.0769, stddev=0.101], oderiv-count=32384
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-1419.27, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000176083, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005577, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.26,0.28), mean=0.22, stddev=0.0161], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.14,0.15 0.16,0.17,0.17,0.21), mean=0.126, stddev=0.0192], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.07,0.08,0.14,0.27,0.36 0.45,0.52,0.57,0.66), mean=0.183, stddev=0.123], bias-{mean,stddev}=0.0001677,0.006823, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=4.8e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.32,-0.16,-0.14,-0.08 -0.005,0.07,0.21,0.39,0.47 0.53,0.62,0.73,0.86), mean=0.223, stddev=0.186], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.32,-0.24,-0.09 0.06,0.20,0.45,0.70,0.82 0.95,1.1,1.1,1.5), mean=0.442, stddev=0.31]
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-1261.98, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000176083, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003275, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,2e-07,3e-07,8e-07 3e-06,7e-05,0.06,0.11,0.15 0.17,0.18,0.19,0.28), mean=0.061, stddev=0.057], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.12,0.16,0.17,0.18 0.19,0.20,0.20,0.26), mean=0.143, stddev=0.0443], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-08,9e-08,1e-07,1e-07 5e-06,0.03,0.07,0.16,0.24 0.33,0.45,0.50,0.59), mean=0.104, stddev=0.107], bias-{mean,stddev}=-3.739e-05,0.004205, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000176083, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0008888, w_fc-rms=0.0008567, w_oc-rms=0.001567, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000342688, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.29,-0.03,0.05,0.18 0.28,0.40,0.50,0.59,0.75 0.88,1.0,1.1,1.4), mean=0.504, stddev=0.199], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.09,0.11,0.14 0.17,0.20,0.25,0.25,0.29 0.31,0.33,0.35,0.40), mean=0.236, stddev=0.0483] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000342688, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.18,-0.10,0.006,0.13 0.23,0.34,0.50,0.52,0.62 0.77,0.89,0.96,1.2), mean=0.459, stddev=0.186], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.15 0.18,0.21,0.25,0.25,0.26 0.29,0.31,0.32,0.34), mean=0.234, stddev=0.0394] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0618997, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.3,-2.8,-2.4,-2.0 -1.4,-0.84,-0.003,0.57,1.2 1.8,2.3,2.5,4.5), mean=-0.0793, stddev=1.08], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.90,-0.84,-0.45 -0.12,0.23,1.0,1.0,1.2 1.4,1.6,1.8,2.4), mean=0.699, stddev=0.574] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000342688, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.56,-0.08,0.02,0.13 0.21,0.32,0.50,0.58,0.71 0.86,1.1,1.3,1.6), mean=0.483, stddev=0.235], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.003,0.04,0.07,0.12 0.15,0.19,0.25,0.25,0.28 0.31,0.35,0.37,0.42), mean=0.229, stddev=0.0584] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000342688, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-2.0,-1.9,-1.4 -1.0,-0.57,-0.003,0.28,0.83 1.2,1.6,1.8,3.0), mean=-0.0891, stddev=0.754], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.52,-0.14,0.10,0.27 0.42,0.71,1.0,1.0,1.2 1.4,1.6,1.6,1.9), mean=0.898, stddev=0.329] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-2.85e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-4296
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.031405
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000176083, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004241, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.06,0.08,0.12,0.13 0.14,0.14,0.15,0.17), mean=0.0916, stddev=0.031], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.0001,0.0001,0.0002 0.0003,0.001,0.07,0.09,0.10 0.11,0.11,0.12,0.15), mean=0.0542, stddev=0.0417], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,4e-08,5e-08 7e-08,1e-07,5e-06,0.10,0.20 0.25,0.29,0.30,0.35), mean=0.0441, stddev=0.0861], bias-{mean,stddev}=0.0003136,0.006141, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000176083, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005446, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.10,0.11 0.12,0.13,0.15,0.17,0.19 0.20,0.22,0.23,0.28), mean=0.149, stddev=0.0281], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.07,0.11,0.16,0.17 0.18,0.19,0.19,0.22), mean=0.117, stddev=0.0417], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,5e-08,6e-08,8e-08 1e-07,3e-07,0.001,0.15,0.27 0.39,0.50,0.53,0.60), mean=0.0746, stddev=0.133], bias-{mean,stddev}=0.0002391,0.006123, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-1104.69, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000176083, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004477, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.15,0.16,0.18,0.19,0.20 0.21,0.22,0.22,0.23), mean=0.176, stddev=0.019], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.09,0.10,0.11,0.12 0.13,0.14,0.15,0.17), mean=0.101, stddev=0.0163], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.06,0.11,0.21,0.29 0.37,0.45,0.48,0.53), mean=0.142, stddev=0.105], bias-{mean,stddev}=2.307e-06,0.005394, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.11,0.12,0.14 0.17,0.20,0.27,0.34,0.38 0.41,0.43,0.45,0.79), mean=0.274, stddev=0.0857], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.19,0.21,0.25 0.29,0.33,0.42,0.50,0.56 0.60,0.65,0.67,0.74), mean=0.42, stddev=0.105], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.02,0.03,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0298, stddev=0.0154], oderiv-count=72000
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-947.407, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000176083, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004339, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.05,0.06,0.08,0.16,0.19 0.21,0.23,0.24,0.28), mean=0.0963, stddev=0.0544], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.12 0.12,0.14,0.17,0.24,0.30 0.32,0.33,0.34,0.35), mean=0.187, stddev=0.064], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,7e-06,1e-05,0.0003 0.02,0.03,0.07,0.20,0.35 0.48,0.61,0.65,0.76), mean=0.131, stddev=0.148], bias-{mean,stddev}=-0.0004601,0.001577, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000176083, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0016, w_fc-rms=0.002766, w_oc-rms=0.003381, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000338703, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.40,-0.15,-0.01,0.20 0.37,0.55,0.88,1.2,1.3 1.5,1.6,1.7,2.0), mean=0.855, stddev=0.38], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.12,-0.07,-0.04,-0.01 0.05,0.08,0.16,0.24,0.28 0.32,0.36,0.39,0.50), mean=0.163, stddev=0.0977] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000338703, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.39,-0.25,-0.11 0.04,0.23,0.61,1.0,1.2 1.4,1.6,1.6,1.8), mean=0.617, stddev=0.447], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.11,-0.07,-0.04,0.02 0.06,0.11,0.20,0.27,0.31 0.36,0.43,0.45,0.70), mean=0.197, stddev=0.105] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00158495, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.3,-5.2,-4.8,-3.4 -2.6,-1.8,0.08,1.9,2.9 4.0,4.9,5.8,7.9), mean=0.152, stddev=2.27], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.6,-1.4,-1.0 -0.81,-0.43,0.24,0.93,1.4 1.6,1.9,2.4,3.3), mean=0.262, stddev=0.836] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000338703, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.71,-0.12,-0.07,0.06 0.23,0.41,0.72,1.1,1.3 1.4,1.6,1.7,2.4), mean=0.745, stddev=0.413], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,-0.08,-0.07,-0.03 0.02,0.07,0.17,0.28,0.34 0.38,0.42,0.45,0.65), mean=0.175, stddev=0.124] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0442759, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.3,-3.8,-3.5,-2.7 -2.0,-1.3,0.09,1.5,2.3 3.2,4.0,4.1,6.0), mean=0.128, stddev=1.76], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.9,-1.1,-0.97,-0.58 -0.38,-0.15,0.42,0.93,1.2 1.6,1.9,2.1,2.5), mean=0.422, stddev=0.655] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-2.46e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-3686
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.031405
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000176083, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005366, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.06 0.06,0.07,0.09,0.16,0.17 0.17,0.18,0.18,0.19), mean=0.114, stddev=0.0438], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.07,0.09,0.10,0.11 0.11,0.12,0.13,0.17), mean=0.0846, stddev=0.0181], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,2e-06,3e-06 7e-06,3e-05,0.02,0.16,0.23 0.29,0.32,0.35,0.39), mean=0.0741, stddev=0.0974], bias-{mean,stddev}=0.0002012,0.009101, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000176083, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005991, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.05 0.05,0.06,0.09,0.12,0.13 0.15,0.18,0.19,0.28), mean=0.0906, stddev=0.0336], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.19,0.20,0.26,0.34,0.35 0.36,0.37,0.37,0.40), mean=0.267, stddev=0.0668], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,2e-06,3e-06 6e-06,3e-05,0.01,0.40,0.54 0.63,0.68,0.72,0.77), mean=0.154, stddev=0.227], bias-{mean,stddev}=1.806e-10,0.001584, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.05,0.06 0.07,0.09,0.10,0.68), mean=0.0234, stddev=0.031], oderiv-count=14080

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.93088 tdnn2.affine:7.01865 lstm1.W_all:5.60449 lstm1.lstm_nonlin:0.101031 lstm1.W_rp:2.25086 tdnn3.affine:4.43211 tdnn4.affine:5.02567 lstm2.W_all:3.81322 lstm2.lstm_nonlin:0.045498 lstm2.W_rp:1.56244 tdnn5.affine:3.47139 tdnn6.affine:4.03445 lstm3.W_all:5.04559 lstm3.lstm_nonlin:0.106082 lstm3.W_rp:1.97861 output.affine:4.43148 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.6663 tdnn2.affine:10.7115 lstm1.W_all:18.81 lstm1.lstm_nonlin:1.20219 lstm1.W_rp:11.9453 tdnn3.affine:7.7676 tdnn4.affine:7.92367 lstm2.W_all:15.341 lstm2.lstm_nonlin:0.479827 lstm2.W_rp:10.6979 tdnn5.affine:6.90421 tdnn6.affine:7.385 lstm3.W_all:22.1387 lstm3.lstm_nonlin:1.87333 lstm3.W_rp:27.0622 output.affine:28.7678 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.593585 tdnn2.affine:0.660187 lstm1.W_all:0.298494 lstm1.lstm_nonlin:0.0833953 lstm1.W_rp:0.189254 tdnn3.affine:0.574508 tdnn4.affine:0.638069 lstm2.W_all:0.249144 lstm2.lstm_nonlin:0.0934429 lstm2.W_rp:0.14665 tdnn5.affine:0.50567 tdnn6.affine:0.549118 lstm3.W_all:0.228281 lstm3.lstm_nonlin:0.0568073 lstm3.W_rp:0.0732385 output.affine:0.154065 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:08:18 KST 2020, elapsed time 1 seconds
