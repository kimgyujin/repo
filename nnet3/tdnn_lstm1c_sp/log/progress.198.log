# nnet3-info exp/nnet3/tdnn_lstm1c_sp/198.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/197.mdl exp/nnet3/tdnn_lstm1c_sp/198.mdl 
# Started at Thu Jul 30 11:19:19 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/198.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00016061, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02842, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.008,0.01 0.03,0.13,0.50,0.59,0.65 0.72,0.79,0.85,1.1), mean=0.436, stddev=0.227], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.16,0.19,0.55,0.75,1.1 1.3,1.4,1.4,1.5), mean=0.552, stddev=0.34], bias-{mean,stddev}=0.001657,0.05207, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0.132115, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,6e-06,2e-05,4e-05 0.0001,0.0009,0.06,0.08,0.09 0.11,0.12,0.13,0.15), mean=0.0517, stddev=0.0365], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.003,0.008,0.02 0.04,0.10,0.47,0.62,0.70 0.78,0.84,0.88,0.98), mean=0.415, stddev=0.244], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.02 0.05,0.24,0.35,0.45,0.51 0.60,0.73,0.83,1.7), mean=0.338, stddev=0.186], oderiv-count=1.16442e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39748.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,3e-06,5e-06,2e-05 6e-05,0.0005,0.05,0.08,0.10 0.11,0.12,0.13,0.17), mean=0.0502, stddev=0.0368], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,7e-05,9e-05,0.0002 0.0005,0.003,0.09,0.10,0.11 0.12,0.13,0.13,0.14), mean=0.0705, stddev=0.0424]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00016061, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01124, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.38,0.40,0.43,0.48,0.51 0.53,0.56,0.58,0.71), mean=0.441, stddev=0.0522], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.006 0.02,0.07,0.27,0.31,0.33 0.35,0.37,0.40,0.65), mean=0.229, stddev=0.116], bias-{mean,stddev}=-0.003708,0.0293, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.98e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.25 0.26,0.27,0.29,0.33,0.35 0.37,0.38,0.39,0.58), mean=0.299, stddev=0.0375], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.41 0.42,0.44,0.46,0.48,0.49 0.50,0.52,0.53,0.56), mean=0.459, stddev=0.0293], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0465, stddev=0.00877], oderiv-count=1.11533e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38909, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.24 0.25,0.26,0.29,0.32,0.34 0.36,0.38,0.41,0.56), mean=0.295, stddev=0.0389], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.43,0.43 0.45,0.47,0.51,0.57,0.60 0.62,0.66,0.70,0.80), mean=0.52, stddev=0.0589]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00016061, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01572, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,9e-05,0.0003,0.002 0.01,0.16,0.35,0.52,0.62 0.68,0.75,0.79,1.0), mean=0.344, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.32,0.33,0.38 0.43,0.62,0.73,0.81,0.86 0.90,0.95,0.98,1.3), mean=0.7, stddev=0.156], bias-{mean,stddev}=-0.0002078,0.02151, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00016061, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0269, w_fc-rms=0.02789, w_oc-rms=0.03347, count=1.46e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.45,0.45 0.46,0.47,0.49,0.51,0.54 0.61,0.70,0.73,0.76), mean=0.499, stddev=0.0516], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0153] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.41,0.43 0.44,0.46,0.49,0.51,0.55 0.63,0.70,0.72,0.76), mean=0.496, stddev=0.0592], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0149] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00633862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.85,-0.81,-0.47 -0.30,-0.17,-3e-05,0.17,0.32 0.43,0.68,0.76,0.87), mean=-0.00163, stddev=0.278], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.27,0.35 0.42,0.48,0.61,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.635, stddev=0.192] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.41,0.43 0.44,0.45,0.46,0.50,0.50 0.52,0.55,0.57,0.61), mean=0.47, stddev=0.0315], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.20 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0166] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00633862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.78,-0.75,-0.38 -0.24,-0.13,-0.0009,0.12,0.24 0.35,0.55,0.71,0.86), mean=-0.00339, stddev=0.238], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.30,0.34,0.53 0.71,0.77,0.85,0.92,1.0 1.0,1.0,1.0,1.0), mean=0.834, stddev=0.138] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.82075e-06, count-zeroing-boundaries=293223
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0713499
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00016061, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03159, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.20 0.22,0.28,0.48,1.0,1.1 1.1,1.1,1.1,1.2), mean=0.629, stddev=0.351], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.002,0.005,0.009 0.03,0.28,0.44,0.59,0.70 0.87,1.1,1.3,1.5), mean=0.44, stddev=0.257], bias-{mean,stddev}=0.007628,0.2397, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00016061, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01161, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.21 0.23,0.25,0.31,0.38,0.41 0.44,0.47,0.49,0.61), mean=0.316, stddev=0.0717], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.08,0.10,0.21,0.37,0.40 0.42,0.45,0.47,0.51), mean=0.23, stddev=0.13], bias-{mean,stddev}=0.003449,0.02013, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.89e+05, self-repaired-proportion=0.00107809, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.04,0.04,0.05 0.06,0.07,0.10,0.12,0.13 0.15,0.16,0.16,0.20), mean=0.0964, stddev=0.0295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.19,0.23,0.26 0.32,0.38,0.50,0.61,0.65 0.69,0.73,0.74,0.80), mean=0.495, stddev=0.128], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.09,0.10,0.11,0.13,0.15 0.16,0.18,0.20,0.34), mean=0.116, stddev=0.0251], oderiv-count=1.0839e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36389.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.03,0.04,0.05 0.06,0.07,0.09,0.12,0.14 0.14,0.16,0.16,0.20), mean=0.0955, stddev=0.0299], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.10,0.11,0.12 0.12,0.13,0.15,0.17,0.18 0.19,0.21,0.21,0.24), mean=0.151, stddev=0.0244]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00016061, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008418, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.28 0.29,0.30,0.33,0.35,0.37 0.39,0.41,0.42,0.56), mean=0.331, stddev=0.0349], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.13,0.14 0.15,0.16,0.19,0.22,0.23 0.25,0.27,0.29,0.35), mean=0.189, stddev=0.0345], bias-{mean,stddev}=-0.01179,0.01556, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.49e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.22,0.23,0.26,0.28,0.30 0.31,0.33,0.34,0.40), mean=0.259, stddev=0.0315], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.38,0.39 0.40,0.41,0.44,0.46,0.48 0.49,0.50,0.51,0.53), mean=0.438, stddev=0.0312], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05), mean=0.0372, stddev=0.00309], oderiv-count=975488
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33870.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.22,0.23,0.26,0.29,0.30 0.32,0.33,0.34,0.40), mean=0.259, stddev=0.0327], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.42 0.44,0.46,0.50,0.54,0.57 0.60,0.63,0.68,0.77), mean=0.504, stddev=0.0557]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00016061, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01309, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,8e-07,1e-06,3e-06 1e-05,0.0003,0.28,0.47,0.55 0.59,0.63,0.65,1.2), mean=0.253, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.24,0.26,0.32 0.41,0.53,0.60,0.65,0.68 0.74,0.78,0.88,1.5), mean=0.585, stddev=0.122], bias-{mean,stddev}=-0.00468,0.04469, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00016061, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01005, w_fc-rms=0.009689, w_oc-rms=0.01653, count=1.33e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639499, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.43,0.43,0.44 0.45,0.46,0.50,0.51,0.54 0.59,0.63,0.66,0.73), mean=0.498, stddev=0.0452], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.22,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0142] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639499, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.40 0.42,0.44,0.49,0.50,0.50 0.53,0.57,0.59,0.77), mean=0.476, stddev=0.046], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0121] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0102165, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.78,-0.59,-0.38 -0.27,-0.13,0.0007,0.12,0.24 0.37,0.56,0.72,0.84), mean=-0.00159, stddev=0.228], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.29,0.38,0.48 0.54,0.58,0.67,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.747, stddev=0.204] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639499, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.42 0.43,0.45,0.49,0.50,0.52 0.54,0.56,0.58,0.67), mean=0.483, stddev=0.037], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0151] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00639499, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.59,-0.41,-0.29 -0.20,-0.08,0.0006,0.08,0.19 0.27,0.42,0.57,0.72), mean=-0.000575, stddev=0.179], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.54,0.58,0.72 0.79,0.83,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.901, stddev=0.105] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.71e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.86747e-06, count-zeroing-boundaries=258567
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0713499
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00016061, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02962, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.33,0.36 0.38,0.41,0.56,0.87,0.92 0.95,0.97,0.99,1.1), mean=0.638, stddev=0.222], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0005,0.0006,0.0008 0.001,0.004,0.47,0.62,0.73 0.81,0.92,0.99,1.1), mean=0.372, stddev=0.3], bias-{mean,stddev}=0.002772,0.1516, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00016061, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.20 0.22,0.23,0.27,0.33,0.37 0.41,0.46,0.47,0.52), mean=0.285, stddev=0.0649], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.14,0.21,0.31,0.33 0.35,0.37,0.38,0.42), mean=0.224, stddev=0.0814], bias-{mean,stddev}=0.003141,0.009388, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.72e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.04,0.06,0.08,0.09 0.10,0.11,0.11,0.14), mean=0.0638, stddev=0.0218], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.19,0.23 0.28,0.33,0.47,0.57,0.60 0.64,0.67,0.69,0.75), mean=0.459, stddev=0.123], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.10 0.11,0.12,0.13,0.15,0.18 0.21,0.22,0.23,0.28), mean=0.138, stddev=0.0296], oderiv-count=1.00762e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31351.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.05,0.06,0.08,0.10 0.11,0.11,0.12,0.14), mean=0.065, stddev=0.0228], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.09,0.09,0.11,0.12,0.13 0.14,0.14,0.14,0.16), mean=0.107, stddev=0.0173]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00016061, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007896, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.23,0.24 0.25,0.27,0.30,0.35,0.37 0.39,0.40,0.41,0.51), mean=0.308, stddev=0.0464], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.13,0.14,0.17,0.20,0.23 0.25,0.28,0.31,0.37), mean=0.176, stddev=0.0385], bias-{mean,stddev}=-0.01029,0.0206, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.06e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.23,0.26,0.28,0.30 0.31,0.32,0.33,0.45), mean=0.259, stddev=0.033], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.37,0.37 0.38,0.39,0.42,0.45,0.46 0.47,0.48,0.49,0.50), mean=0.421, stddev=0.0301], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0304, stddev=0.0027], oderiv-count=964800
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28832.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.22,0.23,0.26,0.29,0.30 0.32,0.33,0.35,0.50), mean=0.263, stddev=0.0361], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.31,0.34,0.40 0.43,0.46,0.52,0.57,0.61 0.63,0.69,0.72,0.86), mean=0.518, stddev=0.0758]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00016061, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01881, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.21,0.22,0.26 0.29,0.33,0.42,0.61,0.69 0.73,0.77,0.80,1.2), mean=0.456, stddev=0.147], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.58,0.60,0.62 0.63,0.66,0.72,0.98,1.3 1.3,1.5,1.5,1.9), mean=0.822, stddev=0.246], bias-{mean,stddev}=0.02476,0.02522, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00016061, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04797, w_fc-rms=0.04601, w_oc-rms=0.04476, count=1.21e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.55,0.56,0.57 0.60,0.62,0.67,0.72,0.74 0.75,0.77,0.78,0.81), mean=0.669, stddev=0.0542], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.15,0.16 0.17,0.18,0.19,0.20,0.21 0.21,0.21,0.22,0.24), mean=0.19, stddev=0.0144] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.47,0.49,0.51 0.53,0.56,0.60,0.65,0.70 0.76,0.79,0.80,0.87), mean=0.609, stddev=0.0695], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.14,0.15,0.16 0.18,0.19,0.20,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.199, stddev=0.0172] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0103092, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.79,-0.73,-0.52 -0.37,-0.22,-0.01,0.23,0.33 0.49,0.64,0.71,0.83), mean=-0.00553, stddev=0.294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.25,0.27,0.29 0.34,0.39,0.45,0.49,0.50 0.51,0.53,0.55,0.65), mean=0.435, stddev=0.066] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.56,0.58 0.60,0.62,0.66,0.70,0.72 0.74,0.75,0.76,0.86), mean=0.661, stddev=0.0479], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.15 0.16,0.17,0.18,0.19,0.19 0.20,0.20,0.20,0.22), mean=0.179, stddev=0.0142] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00668731, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.80,-0.72,-0.50 -0.33,-0.20,-0.01,0.20,0.31 0.46,0.65,0.71,0.86), mean=-0.00654, stddev=0.283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.30,0.34 0.43,0.52,0.62,0.66,0.68 0.70,0.71,0.71,0.77), mean=0.588, stddev=0.102] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.47e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=9.09744e-06, count-zeroing-boundaries=219842
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0713499
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00016061, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07459, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.0,1.1 1.1,1.2,1.6,2.1,2.1 2.2,2.3,2.3,2.4), mean=1.65, stddev=0.426], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.81,0.91,0.96 1.0,1.1,1.2,1.3,1.4 1.5,1.5,1.6,1.6), mean=1.19, stddev=0.16], bias-{mean,stddev}=0.003317,0.3636, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00016061, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03813, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.50,0.51,0.53 0.54,0.56,0.60,0.65,0.68 0.71,0.75,0.82,2.2), mean=0.609, stddev=0.0874], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.6,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.7, stddev=0.413], bias-{mean,stddev}=5.269e-09,0.03072, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0167, stddev=0.0139], oderiv-count=570880
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/197.mdl exp/nnet3/tdnn_lstm1c_sp/198.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.36882 tdnn2.affine:6.24294 lstm1.W_all:4.94273 lstm1.lstm_nonlin:0.0981495 lstm1.W_rp:2.03764 tdnn3.affine:4.03429 tdnn4.affine:4.57794 lstm2.W_all:3.42883 lstm2.lstm_nonlin:0.0408702 lstm2.W_rp:1.42021 tdnn5.affine:3.21154 tdnn6.affine:3.73336 lstm3.W_all:4.45478 lstm3.lstm_nonlin:0.0945541 lstm3.W_rp:1.75893 output.affine:3.95806 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.2859 tdnn2.affine:10.1443 lstm1.W_all:18.3025 lstm1.lstm_nonlin:1.1676 lstm1.W_rp:12.2413 tdnn3.affine:7.40634 tdnn4.affine:7.59487 lstm2.W_all:15.3633 lstm2.lstm_nonlin:0.493372 lstm2.W_rp:11.1635 tdnn5.affine:6.67159 tdnn6.affine:7.13141 lstm3.W_all:21.9282 lstm3.lstm_nonlin:1.82742 lstm3.W_rp:28.0478 output.affine:28.234 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.56466 tdnn2.affine:0.615813 lstm1.W_all:0.269679 lstm1.lstm_nonlin:0.0840191 lstm1.W_rp:0.166541 tdnn3.affine:0.545538 tdnn4.affine:0.604925 lstm2.W_all:0.223386 lstm2.lstm_nonlin:0.0836533 lstm2.W_rp:0.127538 tdnn5.affine:0.487396 tdnn6.affine:0.529635 lstm3.W_all:0.203184 lstm3.lstm_nonlin:0.0518215 lstm3.W_rp:0.062834 output.affine:0.140203 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:19:20 KST 2020, elapsed time 1 seconds
