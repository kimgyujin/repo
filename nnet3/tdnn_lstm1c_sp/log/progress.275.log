# nnet3-info exp/nnet3/tdnn_lstm1c_sp/275.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/274.mdl exp/nnet3/tdnn_lstm1c_sp/275.mdl 
# Started at Thu Jul 30 11:49:51 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/275.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000227334, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03394, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.02,0.05,0.59,0.74,0.83 0.91,1.0,1.1,1.2), mean=0.503, stddev=0.305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.16 0.18,0.22,0.66,0.93,1.3 1.5,1.6,1.6,1.7), mean=0.659, stddev=0.406], bias-{mean,stddev}=0.0001313,0.06234, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.1e+06, self-repaired-proportion=0.207362, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,7e-06,2e-05,4e-05 0.0001,0.0003,0.06,0.10,0.11 0.13,0.15,0.16,0.23), mean=0.0574, stddev=0.0465], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.002,0.005,0.01 0.03,0.06,0.43,0.61,0.71 0.79,0.86,0.91,0.99), mean=0.383, stddev=0.259], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.02,0.02 0.04,0.09,0.27,0.36,0.41 0.51,0.63,0.69,1.3), mean=0.261, stddev=0.158], oderiv-count=1.2016e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36767, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,8e-06,1e-05,3e-05 7e-05,0.0004,0.06,0.10,0.12 0.14,0.16,0.18,0.25), mean=0.0574, stddev=0.0473], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0002,0.0003 0.0006,0.002,0.10,0.13,0.14 0.15,0.16,0.17,0.18), mean=0.0812, stddev=0.0544]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000227334, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01278, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.40 0.42,0.44,0.49,0.55,0.59 0.63,0.66,0.71,0.76), mean=0.5, stddev=0.0709], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.008,0.009 0.01,0.03,0.30,0.36,0.39 0.42,0.47,0.51,0.75), mean=0.251, stddev=0.147], bias-{mean,stddev}=-0.02338,0.04116, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.09e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.25,0.26 0.27,0.29,0.32,0.36,0.39 0.42,0.45,0.48,0.54), mean=0.327, stddev=0.0483], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.37,0.37,0.39 0.41,0.42,0.45,0.48,0.49 0.51,0.52,0.53,0.57), mean=0.449, stddev=0.0352], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0407, stddev=0.0072], oderiv-count=1.21107e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35966.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.27 0.28,0.30,0.33,0.38,0.41 0.45,0.51,0.53,0.63), mean=0.342, stddev=0.0585], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.49,0.50 0.52,0.55,0.60,0.67,0.71 0.77,0.82,0.90,1.1), mean=0.615, stddev=0.0872]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000227334, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01855, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,8e-06,5e-05 0.001,0.17,0.42,0.62,0.72 0.77,0.83,0.89,1.1), mean=0.404, stddev=0.245], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.39,0.42,0.47 0.56,0.73,0.85,0.94,1.0 1.1,1.1,1.2,1.3), mean=0.829, stddev=0.169], bias-{mean,stddev}=0.001998,0.02783, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000227334, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05866, w_fc-rms=0.03017, w_oc-rms=0.04362, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629705, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.69,0.79,0.81,0.85), mean=0.493, stddev=0.0787], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0235] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629705, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.43,0.44,0.46 0.47,0.48,0.50,0.53,0.58 0.64,0.76,0.79,0.85), mean=0.515, stddev=0.064], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.15,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0219] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.038185, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.89,-0.85,-0.53 -0.28,-0.13,0.0006,0.16,0.32 0.55,0.85,0.89,0.92), mean=0.0149, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.19,0.24 0.36,0.42,0.55,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.593, stddev=0.223] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629705, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.38,0.40 0.41,0.42,0.45,0.50,0.50 0.50,0.54,0.56,0.69), mean=0.455, stddev=0.0415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.218, stddev=0.0216] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00629705, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.73,-0.66,-0.35 -0.17,-0.08,0.0003,0.11,0.21 0.35,0.67,0.72,0.78), mean=0.0109, stddev=0.22], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.41,0.55 0.75,0.82,0.89,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.864, stddev=0.127] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=4.2738e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.71516e-05, count-zeroing-boundaries=298114
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.221488
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000227334, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04094, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.33,0.37 0.40,0.47,0.88,1.2,1.3 1.4,1.4,1.4,1.5), mean=0.858, stddev=0.368], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.002,0.003 0.01,0.32,0.55,0.75,0.91 1.2,1.5,1.7,2.0), mean=0.555, stddev=0.358], bias-{mean,stddev}=0.01296,0.2782, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000227334, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01367, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.21,0.22,0.25 0.27,0.30,0.37,0.44,0.49 0.51,0.55,0.57,0.68), mean=0.372, stddev=0.0856], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.13,0.15,0.29,0.41,0.44 0.46,0.48,0.50,0.53), mean=0.285, stddev=0.126], bias-{mean,stddev}=0.003226,0.01355, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.1e+05, self-repaired-proportion=0.00569318, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.03,0.04 0.06,0.08,0.10,0.13,0.15 0.16,0.18,0.18,0.24), mean=0.104, stddev=0.0344], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.12,0.18,0.23 0.30,0.38,0.51,0.60,0.65 0.68,0.70,0.73,0.81), mean=0.491, stddev=0.134], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.07,0.08,0.08 0.08,0.09,0.10,0.12,0.14 0.16,0.19,0.20,0.26), mean=0.106, stddev=0.0274], oderiv-count=1.12576e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33564.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.03,0.04 0.06,0.08,0.11,0.13,0.15 0.17,0.18,0.19,0.24), mean=0.108, stddev=0.0351], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.09,0.11,0.12 0.13,0.14,0.17,0.19,0.22 0.23,0.26,0.29,0.38), mean=0.17, stddev=0.0382]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000227334, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009425, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.31 0.32,0.33,0.36,0.40,0.43 0.46,0.48,0.50,0.57), mean=0.369, stddev=0.0469], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.13,0.14,0.15 0.16,0.17,0.20,0.25,0.27 0.29,0.32,0.34,0.40), mean=0.21, stddev=0.0463], bias-{mean,stddev}=-0.02367,0.02029, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.01e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.24 0.25,0.27,0.29,0.33,0.35 0.36,0.38,0.38,0.49), mean=0.298, stddev=0.0373], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.50,0.51), mean=0.432, stddev=0.0289], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0333, stddev=0.00269], oderiv-count=1.1041e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31162.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.24,0.25 0.26,0.27,0.31,0.35,0.37 0.39,0.41,0.43,0.53), mean=0.312, stddev=0.045], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.48,0.48,0.49 0.51,0.53,0.58,0.65,0.72 0.80,0.89,0.94,1.2), mean=0.602, stddev=0.0995]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000227334, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01532, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,1e-06,2e-06,4e-06 2e-05,0.0004,0.35,0.55,0.62 0.67,0.72,0.75,0.92), mean=0.3, stddev=0.251], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.33,0.35,0.40 0.50,0.62,0.70,0.77,0.81 0.88,0.96,1.0,1.4), mean=0.686, stddev=0.134], bias-{mean,stddev}=0.003882,0.03858, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000227334, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0327, w_fc-rms=0.01463, w_oc-rms=0.03443, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635158, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.44 0.45,0.47,0.50,0.52,0.57 0.61,0.68,0.72,0.80), mean=0.503, stddev=0.0537], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0185] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635158, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.44,0.45 0.47,0.49,0.50,0.52,0.56 0.59,0.64,0.66,0.74), mean=0.508, stddev=0.0423], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0182] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00661031, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.71,-0.46 -0.28,-0.13,0.0003,0.16,0.32 0.55,0.73,0.77,0.86), mean=0.0113, stddev=0.276], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.29,0.39 0.44,0.51,0.61,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.705, stddev=0.233] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635158, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.44,0.46,0.50,0.50,0.52 0.54,0.56,0.58,0.68), mean=0.487, stddev=0.0333], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0198] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00635158, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.71,-0.57,-0.43,-0.31 -0.18,-0.08,0.0002,0.10,0.21 0.38,0.49,0.55,0.64), mean=0.00937, stddev=0.186], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.56,0.60,0.72 0.76,0.84,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.902, stddev=0.102] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=5.73942e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.99366e-05, count-zeroing-boundaries=262917
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.221488
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000227334, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03974, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.45,0.49,0.54 0.57,0.60,0.87,1.1,1.2 1.2,1.3,1.3,1.4), mean=0.868, stddev=0.259], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0008,0.001,0.001 0.003,0.008,0.59,0.83,0.97 1.1,1.3,1.5,1.6), mean=0.496, stddev=0.405], bias-{mean,stddev}=0.00157,0.2192, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000227334, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01319, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.27 0.28,0.30,0.35,0.42,0.46 0.50,0.55,0.57,0.63), mean=0.361, stddev=0.0718], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.16 0.17,0.19,0.27,0.39,0.42 0.44,0.46,0.46,0.52), mean=0.285, stddev=0.0956], bias-{mean,stddev}=0.0005211,0.006657, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.04e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.06,0.08,0.11,0.12 0.13,0.14,0.15,0.19), mean=0.0841, stddev=0.0302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.18,0.22 0.28,0.34,0.48,0.58,0.62 0.65,0.68,0.69,0.72), mean=0.468, stddev=0.13], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.14 0.16,0.18,0.18,0.20), mean=0.112, stddev=0.0215], oderiv-count=962496
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28760.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.05,0.06,0.09,0.12,0.13 0.14,0.15,0.15,0.19), mean=0.0894, stddev=0.0309], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.10 0.11,0.12,0.14,0.16,0.17 0.18,0.19,0.21,0.21), mean=0.143, stddev=0.0253]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000227334, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009342, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.22,0.26 0.29,0.32,0.36,0.42,0.44 0.46,0.48,0.50,0.54), mean=0.364, stddev=0.0605], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.15,0.17,0.20,0.24,0.28 0.31,0.34,0.36,0.46), mean=0.207, stddev=0.05], bias-{mean,stddev}=-0.01975,0.02461, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.88e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.21,0.23 0.26,0.28,0.31,0.34,0.35 0.37,0.39,0.39,0.48), mean=0.306, stddev=0.0418], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.36,0.37 0.39,0.40,0.42,0.45,0.46 0.47,0.48,0.49,0.54), mean=0.423, stddev=0.029], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0275, stddev=0.00216], oderiv-count=1.00624e+06
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26358.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.22,0.25 0.27,0.29,0.33,0.37,0.39 0.41,0.44,0.46,0.65), mean=0.331, stddev=0.052], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.34,0.38,0.44 0.51,0.55,0.63,0.71,0.77 0.83,0.91,0.94,1.4), mean=0.634, stddev=0.116]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000227334, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02199, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.30,0.32 0.34,0.39,0.52,0.69,0.77 0.82,0.86,0.89,1.3), mean=0.539, stddev=0.154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.69,0.75 0.78,0.82,0.89,1.1,1.3 1.4,1.6,1.8,2.2), mean=0.976, stddev=0.231], bias-{mean,stddev}=0.01861,0.02395, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000227334, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.09884, w_fc-rms=0.04988, w_oc-rms=0.06684, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641742, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.57,0.60 0.62,0.65,0.71,0.76,0.78 0.81,0.83,0.84,0.87), mean=0.704, stddev=0.0623], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.173, stddev=0.022] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641742, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.53,0.57 0.59,0.62,0.68,0.73,0.77 0.81,0.84,0.85,0.88), mean=0.679, stddev=0.0707], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.13 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.175, stddev=0.0225] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0298984, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.84,-0.81,-0.61 -0.44,-0.31,-0.01,0.30,0.42 0.57,0.70,0.82,0.90), mean=-0.00835, stddev=0.355], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.23 0.28,0.36,0.44,0.49,0.51 0.53,0.54,0.56,0.61), mean=0.418, stddev=0.0849] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00641742, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.49,0.50,0.54 0.56,0.59,0.63,0.67,0.69 0.72,0.75,0.78,0.82), mean=0.629, stddev=0.0543], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.15,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.179, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00641742, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.73,-0.66,-0.52 -0.38,-0.25,-0.01,0.24,0.33 0.49,0.62,0.69,0.80), mean=-0.00865, stddev=0.296], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.38,0.43 0.51,0.59,0.67,0.72,0.74 0.76,0.78,0.79,0.80), mean=0.646, stddev=0.0942] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223567
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.221488
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000227334, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08719, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.5,2.6 2.6,2.7,2.8,2.9), mean=1.9, stddev=0.585], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.97,1.0,1.1 1.1,1.2,1.3,1.5,1.8 1.9,2.1,2.1,2.2), mean=1.38, stddev=0.261], bias-{mean,stddev}=-0.02373,0.5498, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000227334, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04418, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.61,0.62 0.64,0.66,0.70,0.75,0.77 0.81,0.86,0.92,2.3), mean=0.707, stddev=0.0867], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.7,2.7,2.8,2.9), mean=1.95, stddev=0.558], bias-{mean,stddev}=7.72e-09,0.02896, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0135], oderiv-count=568000
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/274.mdl exp/nnet3/tdnn_lstm1c_sp/275.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.05742 tdnn2.affine:4.94666 lstm1.W_all:3.94368 lstm1.lstm_nonlin:0.0848859 lstm1.W_rp:1.59326 tdnn3.affine:3.36964 tdnn4.affine:3.70617 lstm2.W_all:2.8181 lstm2.lstm_nonlin:0.0491539 lstm2.W_rp:1.12793 tdnn5.affine:2.82101 tdnn6.affine:3.14492 lstm3.W_all:3.14991 lstm3.lstm_nonlin:0.0938995 lstm3.W_rp:1.33505 output.affine:3.22937 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.4808 tdnn2.affine:11.5567 lstm1.W_all:21.6062 lstm1.lstm_nonlin:1.80332 lstm1.W_rp:15.7106 tdnn3.affine:8.71442 tdnn4.affine:8.51834 lstm2.W_all:17.901 lstm2.lstm_nonlin:1.13297 lstm2.W_rp:15.034 tdnn5.affine:8.40222 tdnn6.affine:8.44444 lstm3.W_all:25.6089 lstm3.lstm_nonlin:2.94901 lstm3.W_rp:33.265 output.affine:32.7059 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.376917 tdnn2.affine:0.432422 lstm1.W_all:0.182811 lstm1.lstm_nonlin:0.0475224 lstm1.W_rp:0.101677 tdnn3.affine:0.391174 tdnn4.affine:0.437584 lstm2.W_all:0.157663 lstm2.lstm_nonlin:0.0439256 lstm2.W_rp:0.0753561 tdnn5.affine:0.340209 tdnn6.affine:0.376837 lstm3.W_all:0.123033 lstm3.lstm_nonlin:0.0319859 lstm3.W_rp:0.040272 output.affine:0.098757 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:49:51 KST 2020, elapsed time 0 seconds
