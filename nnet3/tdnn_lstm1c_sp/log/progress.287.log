# nnet3-info exp/nnet3/tdnn_lstm1c_sp/287.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/286.mdl exp/nnet3/tdnn_lstm1c_sp/287.mdl 
# Started at Thu Jul 30 11:54:40 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/287.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000210672, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03264, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.009,0.01,0.01 0.02,0.04,0.57,0.71,0.79 0.89,0.93,0.98,1.1), mean=0.481, stddev=0.297], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.18,0.21,0.64,0.88,1.2 1.4,1.5,1.6,1.6), mean=0.635, stddev=0.389], bias-{mean,stddev}=-0.0004488,0.06178, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.97e+05, self-repaired-proportion=0.196912, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,7e-06,2e-05,4e-05 8e-05,0.0003,0.06,0.10,0.11 0.13,0.15,0.16,0.20), mean=0.0549, stddev=0.0461], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.004,0.01,0.02 0.03,0.06,0.41,0.59,0.70 0.81,0.86,0.91,0.99), mean=0.375, stddev=0.26], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.06,0.27,0.36,0.41 0.49,0.61,0.69,1.4), mean=0.257, stddev=0.164], oderiv-count=1.2631e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40310.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,3e-06,6e-06,2e-05 7e-05,0.0003,0.05,0.09,0.12 0.13,0.15,0.17,0.22), mean=0.0527, stddev=0.046], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,9e-05,0.0001,0.0002 0.0005,0.002,0.09,0.12,0.13 0.14,0.15,0.16,0.18), mean=0.0744, stddev=0.0518]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000210672, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01226, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.37,0.39 0.40,0.42,0.47,0.53,0.57 0.61,0.64,0.66,0.73), mean=0.48, stddev=0.0659], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.006,0.008 0.01,0.02,0.29,0.35,0.38 0.41,0.45,0.53,0.73), mean=0.239, stddev=0.145], bias-{mean,stddev}=-0.02496,0.0407, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.23,0.25 0.26,0.27,0.30,0.34,0.37 0.38,0.42,0.44,0.53), mean=0.309, stddev=0.0463], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.37,0.38,0.39 0.40,0.42,0.45,0.48,0.50 0.51,0.53,0.53,0.55), mean=0.448, stddev=0.0366], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0413, stddev=0.00745], oderiv-count=1.11811e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39429.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.25 0.26,0.28,0.30,0.35,0.37 0.39,0.42,0.46,0.53), mean=0.312, stddev=0.048], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.46,0.47 0.48,0.51,0.56,0.62,0.65 0.68,0.71,0.75,0.79), mean=0.564, stddev=0.0664]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000210672, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01823, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-06,6e-06,3e-05 0.001,0.16,0.43,0.61,0.70 0.75,0.82,0.86,1.1), mean=0.398, stddev=0.24], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.41,0.45 0.54,0.73,0.84,0.93,1.0 1.1,1.1,1.2,1.3), mean=0.815, stddev=0.166], bias-{mean,stddev}=0.002819,0.02822, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000210672, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06581, w_fc-rms=0.03211, w_oc-rms=0.04548, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632665, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.70,0.79,0.81,0.85), mean=0.494, stddev=0.0797], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0235] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632665, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.44,0.45,0.47 0.48,0.49,0.50,0.54,0.58 0.66,0.78,0.79,0.86), mean=0.523, stddev=0.0652], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.18 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.023] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0404142, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.89,-0.86,-0.54 -0.28,-0.13,0.001,0.16,0.33 0.56,0.88,0.89,0.91), mean=0.0161, stddev=0.305], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.19,0.23 0.36,0.43,0.56,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.599, stddev=0.222] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632665, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.42,0.45,0.50,0.50 0.51,0.54,0.57,0.72), mean=0.458, stddev=0.0412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.219, stddev=0.0211] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00632665, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.70,-0.64,-0.34 -0.16,-0.07,0.0005,0.10,0.21 0.33,0.64,0.71,0.75), mean=0.0112, stddev=0.214], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.42,0.45,0.56 0.77,0.83,0.90,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.873, stddev=0.12] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=6.30335e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00012784, count-zeroing-boundaries=297246
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.254545
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000210672, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04062, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.36,0.38 0.42,0.49,0.88,1.2,1.3 1.4,1.4,1.4,1.5), mean=0.858, stddev=0.35], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.001,0.003 0.01,0.33,0.55,0.75,0.91 1.2,1.6,1.7,2.0), mean=0.55, stddev=0.356], bias-{mean,stddev}=0.01307,0.2756, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000210672, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01354, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.21,0.23,0.25 0.27,0.30,0.36,0.44,0.48 0.51,0.55,0.58,0.63), mean=0.369, stddev=0.0833], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.13 0.14,0.16,0.29,0.41,0.43 0.45,0.47,0.49,0.52), mean=0.285, stddev=0.12], bias-{mean,stddev}=0.002417,0.01185, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.68e+05, self-repaired-proportion=0.00240978, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.02,0.04 0.05,0.07,0.09,0.12,0.13 0.15,0.16,0.17,0.19), mean=0.0933, stddev=0.033], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.11,0.17,0.22 0.29,0.38,0.52,0.61,0.66 0.68,0.72,0.73,0.85), mean=0.493, stddev=0.14], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.08,0.08,0.08 0.09,0.09,0.11,0.13,0.15 0.18,0.23,0.25,0.29), mean=0.117, stddev=0.0334], oderiv-count=1.02669e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36787.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.02,0.03,0.04 0.05,0.07,0.09,0.12,0.13 0.15,0.17,0.17,0.19), mean=0.0924, stddev=0.0328], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.08,0.09,0.10 0.11,0.13,0.14,0.16,0.18 0.18,0.20,0.21,0.24), mean=0.143, stddev=0.0276]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000210672, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009119, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.30 0.31,0.32,0.35,0.39,0.42 0.45,0.47,0.48,0.56), mean=0.357, stddev=0.0451], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.13,0.13,0.14 0.15,0.17,0.20,0.24,0.26 0.28,0.31,0.34,0.39), mean=0.203, stddev=0.046], bias-{mean,stddev}=-0.02324,0.01942, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.23e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.23 0.24,0.25,0.28,0.31,0.33 0.34,0.36,0.37,0.45), mean=0.285, stddev=0.035], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.38,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.50,0.52), mean=0.433, stddev=0.0278], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.04), mean=0.0344, stddev=0.00289], oderiv-count=990336
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34145.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.22,0.24 0.24,0.26,0.28,0.32,0.34 0.35,0.37,0.38,0.49), mean=0.288, stddev=0.0367], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.45,0.46 0.47,0.49,0.53,0.60,0.64 0.68,0.70,0.73,1.0), mean=0.55, stddev=0.0707]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000210672, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01514, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,1e-06,2e-06,6e-06 3e-05,0.0005,0.35,0.55,0.61 0.66,0.70,0.73,0.91), mean=0.297, stddev=0.246], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.31,0.35,0.39 0.49,0.62,0.68,0.76,0.80 0.87,0.94,1.0,1.4), mean=0.677, stddev=0.133], bias-{mean,stddev}=0.005133,0.03638, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000210672, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03945, w_fc-rms=0.01616, w_oc-rms=0.03671, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638316, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.45 0.46,0.47,0.50,0.52,0.57 0.60,0.67,0.72,0.80), mean=0.506, stddev=0.0531], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0183] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638316, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.45,0.47 0.48,0.50,0.50,0.53,0.57 0.61,0.66,0.67,0.75), mean=0.516, stddev=0.0441], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0195] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00651695, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.71,-0.49 -0.27,-0.13,0.0005,0.15,0.33 0.55,0.72,0.76,0.86), mean=0.0116, stddev=0.277], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.28,0.39 0.45,0.51,0.62,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.709, stddev=0.231] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638316, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.43,0.44 0.45,0.46,0.50,0.50,0.52 0.54,0.57,0.59,0.64), mean=0.491, stddev=0.0303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0194] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00638316, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.69,-0.58,-0.43,-0.32 -0.17,-0.08,0.0002,0.09,0.21 0.37,0.47,0.54,0.61), mean=0.00865, stddev=0.181], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.57,0.61,0.72 0.78,0.84,0.92,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.907, stddev=0.0966] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.87865e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=5.34145e-05, count-zeroing-boundaries=262101
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.254545
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000210672, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0395, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.45,0.49,0.54 0.56,0.60,0.88,1.1,1.2 1.2,1.3,1.3,1.4), mean=0.864, stddev=0.254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0009,0.001,0.002 0.003,0.009,0.58,0.83,0.96 1.1,1.3,1.5,1.7), mean=0.494, stddev=0.402], bias-{mean,stddev}=0.002315,0.2202, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000210672, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01301, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.25,0.26 0.28,0.30,0.34,0.41,0.46 0.49,0.53,0.56,0.61), mean=0.357, stddev=0.0698], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.38,0.41 0.43,0.45,0.46,0.52), mean=0.282, stddev=0.0932], bias-{mean,stddev}=0.0006846,0.006561, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.76e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.08,0.10,0.11 0.12,0.13,0.14,0.18), mean=0.0763, stddev=0.0291], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.20 0.26,0.35,0.50,0.59,0.64 0.67,0.69,0.71,0.75), mean=0.475, stddev=0.139], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.14,0.16 0.18,0.20,0.21,0.24), mean=0.125, stddev=0.0257], oderiv-count=1.01267e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31503.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.08,0.10,0.12 0.13,0.14,0.14,0.20), mean=0.0786, stddev=0.0295], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.08 0.10,0.11,0.12,0.14,0.16 0.16,0.17,0.18,0.21), mean=0.124, stddev=0.0236]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000210672, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008975, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.20,0.25 0.28,0.30,0.35,0.40,0.42 0.44,0.47,0.48,0.52), mean=0.349, stddev=0.0611], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.16,0.19,0.23,0.27 0.30,0.33,0.35,0.43), mean=0.199, stddev=0.0483], bias-{mean,stddev}=-0.01854,0.02514, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.62e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.19,0.22 0.25,0.27,0.30,0.33,0.34 0.35,0.37,0.39,0.45), mean=0.296, stddev=0.0417], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.35,0.37,0.37 0.39,0.40,0.43,0.45,0.46 0.47,0.49,0.50,0.53), mean=0.427, stddev=0.0305], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.028, stddev=0.00244], oderiv-count=1.00048e+06
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28861.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.19,0.22 0.25,0.27,0.31,0.34,0.35 0.37,0.39,0.41,0.56), mean=0.303, stddev=0.0458], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.30,0.33,0.42 0.47,0.51,0.58,0.66,0.70 0.74,0.80,0.82,1.1), mean=0.585, stddev=0.101]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000210672, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02157, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.29,0.30,0.32 0.33,0.38,0.52,0.67,0.75 0.79,0.85,0.88,1.2), mean=0.529, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.67,0.69,0.75 0.78,0.82,0.89,1.1,1.3 1.4,1.5,1.7,2.0), mean=0.962, stddev=0.207], bias-{mean,stddev}=0.01664,0.022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000210672, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1033, w_fc-rms=0.04887, w_oc-rms=0.07123, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645143, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.56,0.58,0.61 0.64,0.66,0.72,0.77,0.79 0.82,0.85,0.86,0.89), mean=0.718, stddev=0.0627], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.12 0.14,0.15,0.17,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.168, stddev=0.0236] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645143, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.49,0.55,0.59 0.60,0.64,0.69,0.74,0.79 0.82,0.85,0.87,0.88), mean=0.694, stddev=0.0711], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.12 0.14,0.16,0.18,0.19,0.20 0.20,0.20,0.21,0.22), mean=0.171, stddev=0.0238] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0416418, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.88,-0.82,-0.61 -0.45,-0.34,-0.01,0.32,0.45 0.58,0.74,0.84,0.92), mean=-0.00848, stddev=0.366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.19,0.23 0.28,0.37,0.45,0.50,0.53 0.55,0.57,0.59,0.61), mean=0.428, stddev=0.0939] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00645143, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.49,0.54 0.56,0.60,0.64,0.68,0.70 0.73,0.75,0.78,0.88), mean=0.638, stddev=0.0594], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.17,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0178] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00645143, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.72,-0.68,-0.50 -0.37,-0.27,-0.004,0.24,0.35 0.48,0.62,0.71,0.78), mean=-0.0081, stddev=0.297], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.40,0.45 0.52,0.61,0.68,0.73,0.76 0.78,0.80,0.80,0.83), mean=0.662, stddev=0.0945] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222820
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.254545
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000210672, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.089, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.6,2.7 2.7,2.8,2.9,3.0), mean=1.94, stddev=0.603], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.97,1.0,1.1 1.1,1.2,1.3,1.6,1.9 2.0,2.1,2.2,2.3), mean=1.41, stddev=0.277], bias-{mean,stddev}=-0.01269,0.6179, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000210672, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04419, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.60,0.62 0.64,0.66,0.70,0.75,0.78 0.81,0.87,0.94,2.2), mean=0.707, stddev=0.0858], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.3,1.3,1.8,2.5,2.6 2.7,2.8,2.8,2.8), mean=1.95, stddev=0.569], bias-{mean,stddev}=6.487e-09,0.02712, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=559040
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/286.mdl exp/nnet3/tdnn_lstm1c_sp/287.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.57038 tdnn2.affine:4.47774 lstm1.W_all:3.54601 lstm1.lstm_nonlin:0.0804691 lstm1.W_rp:1.41276 tdnn3.affine:3.15822 tdnn4.affine:3.42586 lstm2.W_all:2.56958 lstm2.lstm_nonlin:0.0421918 lstm2.W_rp:1.01177 tdnn5.affine:2.66627 tdnn6.affine:2.85382 lstm3.W_all:2.76849 lstm3.lstm_nonlin:0.0699172 lstm3.W_rp:1.14655 output.affine:2.98191 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.9669 tdnn2.affine:11.0974 lstm1.W_all:21.2392 lstm1.lstm_nonlin:1.96576 lstm1.W_rp:15.5828 tdnn3.affine:8.62481 tdnn4.affine:8.24226 lstm2.W_all:17.6788 lstm2.lstm_nonlin:1.28293 lstm2.W_rp:14.9533 tdnn5.affine:8.2901 tdnn6.affine:8.11513 lstm3.W_all:25.1167 lstm3.lstm_nonlin:3.06982 lstm3.W_rp:34.2074 output.affine:32.7046 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.350395 tdnn2.affine:0.400039 lstm1.W_all:0.166606 lstm1.lstm_nonlin:0.0412572 lstm1.W_rp:0.0906279 tdnn3.affine:0.364232 tdnn4.affine:0.413604 lstm2.W_all:0.145188 lstm2.lstm_nonlin:0.0332108 lstm2.W_rp:0.0675886 tdnn5.affine:0.320745 tdnn6.affine:0.349629 lstm3.W_all:0.110042 lstm3.lstm_nonlin:0.0227521 lstm3.W_rp:0.0336002 output.affine:0.0912549 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:54:40 KST 2020, elapsed time 0 seconds
