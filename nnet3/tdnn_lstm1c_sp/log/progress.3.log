# nnet3-info exp/nnet3/tdnn_lstm1c_sp/3.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/2.mdl exp/nnet3/tdnn_lstm1c_sp/3.mdl 
# Started at Thu Jul 30 10:02:23 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/3.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000298103, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02821, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.15,0.15 0.16,0.16,0.48,0.61,0.70 0.78,0.85,0.90,1.2), mean=0.437, stddev=0.219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.23,0.23,0.24 0.25,0.27,0.54,0.75,0.90 1.3,1.5,1.5,1.6), mean=0.564, stddev=0.309], bias-{mean,stddev}=0.002331,0.1771, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0.524138, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,2e-07,0.09,0.20,0.30 0.39,0.48,0.53,0.72), mean=0.119, stddev=0.133], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,2e-05,0.52,0.92,0.97 0.99,1.0,1.0,1.0), mean=0.477, stddev=0.401], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.17 0.18,0.19,0.22,0.34,0.45 0.52,0.64,0.73,1.4), mean=0.275, stddev=0.133], oderiv-count=1.14202e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32379.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,1e-07,0.07,0.17,0.22 0.28,0.35,0.40,0.53), mean=0.0955, stddev=0.101], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,4e-05,0.11,0.13,0.14 0.14,0.15,0.16,0.18), mean=0.0778, stddev=0.0586]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000298103, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01279, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.44 0.45,0.47,0.50,0.54,0.56 0.58,0.60,0.61,0.66), mean=0.503, stddev=0.0433], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.09,0.09,0.29,0.38,0.42 0.45,0.48,0.50,0.56), mean=0.261, stddev=0.13], bias-{mean,stddev}=0.003498,0.187, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0.00044955, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.13,0.18 0.21,0.27,0.35,0.45,0.52 0.57,0.63,0.65,0.76), mean=0.363, stddev=0.119], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.22,0.27 0.31,0.38,0.49,0.60,0.66 0.70,0.73,0.74,0.80), mean=0.485, stddev=0.127], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.24), mean=0.0381, stddev=0.0112], oderiv-count=1.16557e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31657.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.14,0.17,0.19 0.23,0.28,0.35,0.43,0.48 0.52,0.55,0.56,0.65), mean=0.353, stddev=0.0932], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.41,0.45 0.48,0.52,0.57,0.62,0.65 0.67,0.70,0.72,0.86), mean=0.568, stddev=0.0698]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000298103, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02887, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.65,0.66,0.67 0.68,0.69,0.72,0.77,0.81 0.85,0.90,0.92,1.1), mean=0.734, stddev=0.0571], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.2,1.3,1.3,1.4,1.4 1.4,1.4,1.4,1.4), mean=1.32, stddev=0.0437], bias-{mean,stddev}=0.002975,0.6844, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000298103, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.7129, w_fc-rms=0.6883, w_oc-rms=0.6766, count=1.42e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0101009, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.18,0.21,0.23 0.29,0.36,0.51,0.66,0.75 0.79,0.85,0.87,0.97), mean=0.512, stddev=0.168], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.11,0.13 0.16,0.17,0.20,0.22,0.22 0.23,0.23,0.23,0.23), mean=0.194, stddev=0.0311] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0107815, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.14,0.22 0.27,0.35,0.48,0.63,0.73 0.80,0.86,0.89,0.93), mean=0.492, stddev=0.173], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.08,0.09,0.11 0.14,0.17,0.21,0.22,0.23 0.23,0.23,0.23,0.23), mean=0.195, stddev=0.0354] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0344514, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.87,-0.86,-0.73 -0.63,-0.44,0.03,0.51,0.68 0.77,0.84,0.84,0.94), mean=0.022, stddev=0.472], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.16,0.19,0.25 0.31,0.39,0.50,0.61,0.67 0.71,0.74,0.75,0.78), mean=0.496, stddev=0.135] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616205, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.16,0.20,0.22 0.29,0.36,0.49,0.63,0.71 0.78,0.83,0.84,0.91), mean=0.497, stddev=0.161], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.11,0.13 0.15,0.18,0.20,0.22,0.22 0.22,0.23,0.23,0.23), mean=0.194, stddev=0.029] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0248694, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.87,-0.81,-0.64 -0.47,-0.30,0.02,0.35,0.51 0.64,0.77,0.82,0.91), mean=0.0155, stddev=0.38], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.16,0.22,0.30 0.47,0.60,0.77,0.88,0.92 0.95,0.97,0.97,0.98), mean=0.725, stddev=0.182] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=293415
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000298103, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03798, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.77,0.77,0.79 0.80,0.82,0.86,0.90,0.93 0.95,0.97,0.98,1.0), mean=0.865, stddev=0.0487], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.48,0.51 0.52,0.54,0.60,0.66,0.71 0.75,0.80,0.82,0.92), mean=0.608, stddev=0.0753], bias-{mean,stddev}=0.06753,0.7009, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000298103, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01713, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.16 0.19,0.39,0.47,0.56,0.62 0.66,0.70,0.74,0.88), mean=0.458, stddev=0.139], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.31,0.32 0.34,0.35,0.38,0.42,0.45 0.47,0.49,0.50,0.53), mean=0.388, stddev=0.044], bias-{mean,stddev}=0.0005335,0.1654, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0.196218, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,1e-06 7e-05,0.04,0.30,0.50,0.58 0.64,0.68,0.69,0.75), mean=0.293, stddev=0.213], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.002,0.11,0.46,0.76,0.83 0.87,0.90,0.91,0.94), mean=0.445, stddev=0.295], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.04,0.12,0.14 0.16,0.20,0.24,0.35), mean=0.0664, stddev=0.0528], oderiv-count=1.14061e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29492.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,6e-07 1e-05,0.09,0.27,0.45,0.51 0.55,0.61,0.64,0.69), mean=0.27, stddev=0.182], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.0001 0.0007,0.25,0.40,0.47,0.52 0.56,0.58,0.60,0.67), mean=0.352, stddev=0.168]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000298103, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01104, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.30,0.33,0.36 0.38,0.40,0.43,0.47,0.49 0.50,0.52,0.53,0.56), mean=0.434, stddev=0.0451], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.09 0.11,0.19,0.25,0.29,0.33 0.36,0.38,0.40,0.48), mean=0.241, stddev=0.0739], bias-{mean,stddev}=-0.01382,0.1667, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0.00387486, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.10,0.14,0.17 0.20,0.24,0.34,0.44,0.49 0.55,0.61,0.65,0.72), mean=0.345, stddev=0.115], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.15,0.19,0.25 0.30,0.35,0.44,0.54,0.59 0.64,0.69,0.70,0.76), mean=0.444, stddev=0.119], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.04,0.04,0.05,0.36), mean=0.0287, stddev=0.0202], oderiv-count=992384
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27327.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.13,0.15,0.19 0.22,0.26,0.33,0.40,0.45 0.49,0.53,0.56,0.62), mean=0.335, stddev=0.0917], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.38,0.40,0.45 0.49,0.52,0.58,0.63,0.66 0.68,0.70,0.73,0.91), mean=0.573, stddev=0.0762]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000298103, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0282, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.65,0.66,0.67 0.68,0.69,0.71,0.74,0.77 0.80,0.83,0.85,0.88), mean=0.718, stddev=0.0398], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.2,1.3,1.3,1.3,1.3 1.3,1.3,1.4,1.4), mean=1.29, stddev=0.0321], bias-{mean,stddev}=0.02232,0.6876, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000298103, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.7343, w_fc-rms=0.7039, w_oc-rms=0.7072, count=1.3e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0100371, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.21,0.26 0.29,0.37,0.52,0.68,0.74 0.80,0.86,0.89,0.96), mean=0.523, stddev=0.169], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.08,0.09,0.12 0.15,0.17,0.20,0.22,0.22 0.23,0.23,0.23,0.23), mean=0.193, stddev=0.0326] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.020166, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.18,0.20,0.26 0.31,0.36,0.49,0.65,0.74 0.82,0.91,0.93,0.98), mean=0.508, stddev=0.169], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.05,0.06,0.11 0.14,0.18,0.21,0.22,0.23 0.23,0.23,0.23,0.23), mean=0.195, stddev=0.0376] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0350431, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.96,-0.89,-0.84,-0.76 -0.63,-0.46,0.02,0.47,0.66 0.79,0.84,0.88,0.94), mean=0.00978, stddev=0.474], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.18,0.26 0.31,0.37,0.50,0.61,0.66 0.70,0.73,0.75,0.78), mean=0.493, stddev=0.136] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00917051, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.14,0.18,0.21 0.26,0.35,0.51,0.67,0.75 0.80,0.88,0.89,0.97), mean=0.509, stddev=0.178], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.07,0.08,0.12 0.14,0.16,0.20,0.22,0.22 0.22,0.23,0.23,0.24), mean=0.19, stddev=0.0346] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0395603, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.96,-0.88,-0.85,-0.64 -0.50,-0.32,0.01,0.35,0.51 0.69,0.78,0.86,0.98), mean=0.00741, stddev=0.392], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.15,0.26 0.45,0.57,0.74,0.86,0.91 0.94,0.95,0.96,0.99), mean=0.706, stddev=0.193] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.71e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=258762
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000298103, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03665, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.74,0.74,0.75,0.76 0.78,0.80,0.83,0.87,0.89 0.91,0.94,0.95,0.97), mean=0.834, stddev=0.0447], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.47,0.48,0.49 0.51,0.53,0.57,0.64,0.69 0.74,0.77,0.78,0.92), mean=0.586, stddev=0.0738], bias-{mean,stddev}=-0.02564,0.6848, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000298103, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01545, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.16,0.16 0.17,0.31,0.43,0.52,0.57 0.60,0.65,0.71,0.77), mean=0.409, stddev=0.136], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.28,0.28 0.29,0.31,0.35,0.38,0.41 0.43,0.46,0.49,0.57), mean=0.349, stddev=0.045], bias-{mean,stddev}=0.004725,0.1615, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.55e+05, self-repaired-proportion=0.232692, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-07 4e-06,0.01,0.32,0.55,0.65 0.70,0.75,0.77,0.89), mean=0.319, stddev=0.243], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,2e-05 0.0003,0.04,0.45,0.71,0.78 0.83,0.86,0.87,0.93), mean=0.42, stddev=0.289], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.04,0.12,0.14 0.16,0.20,0.24,0.31), mean=0.0623, stddev=0.053], oderiv-count=966144
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25162.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,4e-08 3e-06,0.05,0.30,0.48,0.55 0.60,0.65,0.66,0.80), mean=0.288, stddev=0.203], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,3e-05 0.0002,0.15,0.46,0.53,0.57 0.59,0.63,0.65,0.71), mean=0.378, stddev=0.204]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000298103, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01082, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.30,0.31,0.34 0.37,0.40,0.43,0.45,0.47 0.49,0.51,0.53,0.59), mean=0.425, stddev=0.0458], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.09 0.10,0.17,0.24,0.30,0.33 0.36,0.40,0.42,0.64), mean=0.233, stddev=0.0817], bias-{mean,stddev}=0.007383,0.1733, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.09e+05, self-repaired-proportion=0.00498885, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,0.08,0.10,0.16 0.21,0.27,0.36,0.47,0.52 0.57,0.65,0.66,0.83), mean=0.366, stddev=0.126], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.15,0.17,0.21 0.26,0.33,0.44,0.54,0.60 0.64,0.69,0.72,0.77), mean=0.436, stddev=0.128], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.04,0.05,0.32), mean=0.027, stddev=0.0202], oderiv-count=1.0064e+06
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=22996.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,0.10,0.14,0.18 0.22,0.26,0.35,0.43,0.47 0.51,0.55,0.60,0.70), mean=0.35, stddev=0.103], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,0.31,0.33,0.47 0.52,0.55,0.60,0.66,0.68 0.70,0.74,0.74,0.79), mean=0.597, stddev=0.0842]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000298103, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02911, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.63,0.66,0.66,0.67 0.68,0.70,0.73,0.78,0.82 0.85,0.89,0.91,1.0), mean=0.74, stddev=0.0549], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.3 1.3,1.3,1.3,1.4,1.4 1.4,1.4,1.4,1.5), mean=1.33, stddev=0.0378], bias-{mean,stddev}=-0.001742,0.6857, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000298103, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.6525, w_fc-rms=0.6733, w_oc-rms=0.7036, count=1.18e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627856, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.20,0.24,0.30 0.36,0.43,0.56,0.69,0.75 0.78,0.83,0.86,0.89), mean=0.555, stddev=0.149], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.13 0.14,0.16,0.18,0.20,0.21 0.21,0.22,0.23,0.23), mean=0.181, stddev=0.0265] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00787114, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.19,0.21,0.27 0.32,0.40,0.55,0.68,0.76 0.81,0.89,0.90,0.93), mean=0.546, stddev=0.164], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.11 0.14,0.16,0.19,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.184, stddev=0.0323] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0344075, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.98,-0.91,-0.83,-0.77 -0.62,-0.39,0.01,0.36,0.57 0.72,0.83,0.86,0.91), mean=-0.003, stddev=0.432], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.15,0.20,0.24 0.28,0.35,0.46,0.54,0.58 0.62,0.64,0.66,0.74), mean=0.445, stddev=0.113] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00764603, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.18,0.21,0.30 0.36,0.44,0.59,0.71,0.78 0.84,0.87,0.89,0.94), mean=0.577, stddev=0.162], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.08,0.10,0.12 0.13,0.15,0.17,0.19,0.20 0.21,0.21,0.21,0.22), mean=0.168, stddev=0.0278] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.026417, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.86,-0.81,-0.66 -0.46,-0.29,-0.003,0.27,0.44 0.59,0.76,0.82,0.96), mean=-0.00287, stddev=0.357], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.19,0.20,0.30 0.42,0.52,0.67,0.78,0.85 0.89,0.93,0.94,0.97), mean=0.645, stddev=0.169] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.47e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=220027
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000298103, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.05965, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.2,1.3,1.3,1.4,1.5 1.5,1.6,1.6,1.7), mean=1.36, stddev=0.0974], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.47,0.50,0.52,0.57 0.65,0.76,0.93,1.1,1.2 1.3,1.3,1.4,1.8), mean=0.938, stddev=0.211], bias-{mean,stddev}=0.06361,0.6428, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000298103, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03728, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.41,0.43,0.45 0.47,0.50,0.57,0.66,0.71 0.77,0.88,0.94,2.0), mean=0.589, stddev=0.121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.4 1.5,1.5,1.7,1.8,1.9 2.0,2.1,2.1,2.2), mean=1.7, stddev=0.171], bias-{mean,stddev}=1.059e-09,0.00484, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0168, stddev=0.0138], oderiv-count=617600
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/2.mdl exp/nnet3/tdnn_lstm1c_sp/3.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.56032 tdnn2.affine:10.4336 lstm1.W_all:9.9768 lstm1.lstm_nonlin:3.51129 lstm1.W_rp:5.31753 tdnn3.affine:8.91207 tdnn4.affine:8.82595 lstm2.W_all:8.30649 lstm2.lstm_nonlin:3.61591 lstm2.W_rp:4.21725 tdnn5.affine:7.55725 tdnn6.affine:8.31929 lstm3.W_all:9.02173 lstm3.lstm_nonlin:3.44679 lstm3.W_rp:4.13243 output.affine:8.60825 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.8502 tdnn2.affine:12.2828 lstm1.W_all:45.8401 lstm1.lstm_nonlin:27.3617 lstm1.W_rp:17.9982 tdnn3.affine:11.5452 tdnn4.affine:10.647 lstm2.W_all:45.381 lstm2.lstm_nonlin:28.2499 lstm2.W_rp:17.4256 tdnn5.affine:10.5058 tdnn6.affine:10.5216 lstm3.W_all:46.0797 lstm3.lstm_nonlin:26.7319 lstm3.W_rp:24.2809 output.affine:27.575 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.707479 tdnn2.affine:0.735465 lstm1.W_all:0.19617 lstm1.lstm_nonlin:0.113757 lstm1.W_rp:0.275833 tdnn3.affine:0.635675 tdnn4.affine:0.688659 lstm2.W_all:0.163937 lstm2.lstm_nonlin:0.113489 lstm2.W_rp:0.224213 tdnn5.affine:0.579901 tdnn6.affine:0.657048 lstm3.W_all:0.17679 lstm3.lstm_nonlin:0.114277 lstm3.W_rp:0.16898 output.affine:0.343482 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:02:23 KST 2020, elapsed time 0 seconds
