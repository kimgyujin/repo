# nnet3-info exp/nnet3/tdnn_lstm1c_sp/271.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/270.mdl exp/nnet3/tdnn_lstm1c_sp/271.mdl 
# Started at Thu Jul 30 11:48:16 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/271.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000233176, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03389, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.01 0.02,0.06,0.59,0.74,0.82 0.93,0.99,1.0,1.2), mean=0.504, stddev=0.301], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.16 0.18,0.23,0.65,0.93,1.3 1.5,1.6,1.6,1.7), mean=0.658, stddev=0.405], bias-{mean,stddev}=-0.0005087,0.06328, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.09e+06, self-repaired-proportion=0.220692, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,4e-06,5e-06,2e-05 7e-05,0.0003,0.06,0.10,0.12 0.13,0.15,0.16,0.24), mean=0.0584, stddev=0.0467], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.003,0.009 0.03,0.05,0.44,0.60,0.71 0.79,0.88,0.90,1.0), mean=0.385, stddev=0.261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.02,0.02,0.02 0.03,0.09,0.27,0.35,0.42 0.50,0.63,0.71,1.4), mean=0.262, stddev=0.16], oderiv-count=1.22874e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37672.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,2e-06,3e-06,3e-05 7e-05,0.0005,0.06,0.10,0.12 0.13,0.15,0.17,0.24), mean=0.0574, stddev=0.0465], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,6e-05,9e-05,0.0003 0.0007,0.002,0.10,0.13,0.14 0.15,0.16,0.16,0.17), mean=0.081, stddev=0.0538]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000233176, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01272, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.38,0.40 0.42,0.44,0.49,0.55,0.59 0.62,0.67,0.70,0.75), mean=0.498, stddev=0.0683], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.007,0.009 0.01,0.03,0.30,0.36,0.39 0.42,0.46,0.49,0.77), mean=0.251, stddev=0.146], bias-{mean,stddev}=-0.02266,0.03956, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.36e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.27 0.28,0.29,0.33,0.36,0.39 0.41,0.44,0.47,0.52), mean=0.332, stddev=0.0459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.38,0.40 0.41,0.42,0.45,0.47,0.49 0.51,0.52,0.52,0.54), mean=0.448, stddev=0.0339], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0399, stddev=0.00725], oderiv-count=1.05546e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36865.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.28,0.30,0.33,0.37,0.41 0.43,0.48,0.51,0.58), mean=0.34, stddev=0.0511], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.49,0.51 0.52,0.55,0.60,0.66,0.71 0.75,0.78,0.82,1.0), mean=0.61, stddev=0.0732]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000233176, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01858, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,1e-05,5e-05 0.001,0.17,0.43,0.62,0.72 0.78,0.84,0.89,1.1), mean=0.405, stddev=0.246], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.39,0.42,0.47 0.56,0.74,0.85,0.94,1.0 1.1,1.1,1.2,1.3), mean=0.83, stddev=0.17], bias-{mean,stddev}=0.001663,0.02772, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000233176, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.056, w_fc-rms=0.02923, w_oc-rms=0.0428, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639726, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.41,0.42 0.44,0.45,0.47,0.50,0.54 0.68,0.79,0.81,0.85), mean=0.492, stddev=0.0782], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0235] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639726, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.43,0.44,0.45 0.46,0.48,0.50,0.53,0.57 0.64,0.77,0.78,0.84), mean=0.513, stddev=0.0639], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.15,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0216] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0405844, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.89,-0.85,-0.54 -0.29,-0.14,0.001,0.17,0.32 0.56,0.86,0.89,0.91), mean=0.0144, stddev=0.304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.19,0.24 0.35,0.42,0.55,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.591, stddev=0.224] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639726, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.38,0.39 0.41,0.42,0.45,0.50,0.50 0.50,0.54,0.56,0.67), mean=0.453, stddev=0.0412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.217, stddev=0.0219] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00639726, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.74,-0.66,-0.36 -0.17,-0.08,0.0009,0.11,0.21 0.35,0.67,0.73,0.78), mean=0.0107, stddev=0.223], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.36,0.40,0.55 0.75,0.81,0.89,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.861, stddev=0.129] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.29813e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=5.96239e-05, count-zeroing-boundaries=293506
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.210468
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000233176, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04082, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.33,0.36 0.40,0.47,0.87,1.2,1.3 1.4,1.4,1.5,1.5), mean=0.854, stddev=0.371], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.002,0.003 0.01,0.30,0.55,0.75,0.90 1.2,1.6,1.7,2.0), mean=0.552, stddev=0.358], bias-{mean,stddev}=0.01247,0.2805, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000233176, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01356, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.20,0.22,0.24 0.26,0.29,0.36,0.44,0.49 0.52,0.54,0.58,0.70), mean=0.369, stddev=0.0866], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.13,0.15,0.29,0.41,0.44 0.46,0.48,0.49,0.54), mean=0.283, stddev=0.125], bias-{mean,stddev}=0.002736,0.01247, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.51e+05, self-repaired-proportion=0.00555015, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.02,0.04,0.05 0.06,0.08,0.11,0.13,0.15 0.17,0.19,0.20,0.24), mean=0.108, stddev=0.036], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.13,0.19,0.23 0.31,0.38,0.50,0.60,0.64 0.68,0.71,0.73,0.81), mean=0.491, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.08,0.08,0.10,0.12,0.13 0.15,0.18,0.19,0.30), mean=0.102, stddev=0.0266], oderiv-count=1.07245e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34444.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.03,0.04,0.04 0.06,0.08,0.11,0.14,0.15 0.17,0.19,0.19,0.24), mean=0.108, stddev=0.0357], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.10,0.12,0.13 0.14,0.15,0.17,0.19,0.21 0.22,0.24,0.24,0.27), mean=0.17, stddev=0.03]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000233176, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009439, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.29,0.30,0.31 0.32,0.33,0.36,0.40,0.43 0.46,0.49,0.49,0.58), mean=0.37, stddev=0.0471], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.13,0.14,0.15 0.16,0.17,0.20,0.25,0.27 0.29,0.32,0.34,0.39), mean=0.21, stddev=0.0462], bias-{mean,stddev}=-0.02341,0.02009, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.5e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.25,0.27,0.30,0.33,0.35 0.36,0.38,0.39,0.51), mean=0.302, stddev=0.0373], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.37,0.38,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.49,0.51), mean=0.434, stddev=0.0289], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0327, stddev=0.00274], oderiv-count=994528
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32024.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.25 0.26,0.27,0.30,0.34,0.35 0.37,0.39,0.39,0.49), mean=0.305, stddev=0.0376], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.49,0.51 0.51,0.53,0.58,0.63,0.67 0.71,0.75,0.78,1.0), mean=0.586, stddev=0.0672]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000233176, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01533, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,9e-07,2e-06,4e-06 2e-05,0.0004,0.35,0.55,0.62 0.67,0.71,0.75,0.93), mean=0.3, stddev=0.251], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.33,0.35,0.40 0.50,0.63,0.70,0.77,0.81 0.87,0.96,1.0,1.4), mean=0.686, stddev=0.134], bias-{mean,stddev}=0.003256,0.03982, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000233176, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03046, w_fc-rms=0.01416, w_oc-rms=0.03341, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644987, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.43,0.44 0.45,0.46,0.50,0.52,0.57 0.61,0.66,0.71,0.80), mean=0.502, stddev=0.0542], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0184] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644987, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.43,0.45 0.46,0.48,0.50,0.52,0.55 0.59,0.63,0.65,0.74), mean=0.505, stddev=0.0422], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.018] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644987, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.81,-0.69,-0.47 -0.29,-0.12,9e-05,0.16,0.32 0.54,0.73,0.78,0.87), mean=0.0112, stddev=0.277], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.30,0.38 0.45,0.51,0.61,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.704, stddev=0.235] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644987, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.50,0.50,0.52 0.54,0.56,0.58,0.69), mean=0.485, stddev=0.035], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.02] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644987, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.72,-0.57,-0.43,-0.32 -0.18,-0.08,6e-05,0.10,0.22 0.39,0.51,0.55,0.66), mean=0.00941, stddev=0.189], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.55,0.59,0.70 0.76,0.83,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.9, stddev=0.104] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=5.82816e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.12432e-05, count-zeroing-boundaries=258906
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.210468
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000233176, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03957, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.45,0.48,0.53 0.56,0.59,0.87,1.1,1.2 1.2,1.3,1.3,1.4), mean=0.864, stddev=0.259], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0007,0.0009,0.001 0.002,0.008,0.58,0.83,0.97 1.1,1.3,1.5,1.6), mean=0.494, stddev=0.403], bias-{mean,stddev}=0.0009947,0.2194, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000233176, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01312, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.25,0.26 0.28,0.30,0.35,0.41,0.46 0.50,0.55,0.56,0.61), mean=0.359, stddev=0.073], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.39,0.42 0.44,0.46,0.47,0.54), mean=0.283, stddev=0.0959], bias-{mean,stddev}=0.0008477,0.006919, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.9e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.05,0.06,0.09,0.11,0.12 0.14,0.15,0.17,0.19), mean=0.086, stddev=0.0314], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.17,0.22 0.27,0.34,0.48,0.58,0.62 0.65,0.68,0.69,0.72), mean=0.463, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.09,0.10,0.12,0.13 0.15,0.17,0.17,0.20), mean=0.108, stddev=0.0209], oderiv-count=1.02963e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29603.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.05,0.06,0.09,0.12,0.13 0.14,0.15,0.17,0.19), mean=0.0879, stddev=0.0315], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.10 0.11,0.12,0.14,0.16,0.17 0.18,0.19,0.20,0.22), mean=0.143, stddev=0.0239]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000233176, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009332, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.21,0.26 0.29,0.32,0.36,0.42,0.44 0.46,0.48,0.50,0.53), mean=0.363, stddev=0.0617], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.16,0.16,0.19,0.24,0.28 0.31,0.34,0.36,0.45), mean=0.207, stddev=0.0503], bias-{mean,stddev}=-0.02051,0.02448, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.94e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.22,0.23 0.26,0.28,0.31,0.34,0.36 0.37,0.39,0.41,0.53), mean=0.311, stddev=0.0435], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.36,0.37 0.38,0.40,0.42,0.44,0.46 0.47,0.47,0.49,0.53), mean=0.421, stddev=0.0288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0269, stddev=0.0021], oderiv-count=958880
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27182.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.20,0.21,0.24 0.26,0.28,0.32,0.35,0.36 0.38,0.40,0.42,0.52), mean=0.315, stddev=0.0444], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.35,0.36,0.47 0.51,0.55,0.62,0.69,0.73 0.76,0.81,0.82,1.0), mean=0.618, stddev=0.0936]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000233176, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02206, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.30,0.32 0.34,0.39,0.52,0.69,0.78 0.83,0.86,0.89,1.3), mean=0.54, stddev=0.156], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.65,0.68,0.74 0.78,0.82,0.89,1.1,1.3 1.4,1.7,1.8,2.2), mean=0.978, stddev=0.238], bias-{mean,stddev}=0.01914,0.02431, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000233176, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.09645, w_fc-rms=0.05037, w_oc-rms=0.0645, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651332, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.56,0.57,0.60 0.62,0.65,0.70,0.75,0.78 0.80,0.82,0.83,0.87), mean=0.702, stddev=0.0617], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.15,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.21), mean=0.173, stddev=0.0217] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651332, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.51,0.53,0.57 0.59,0.62,0.67,0.72,0.76 0.80,0.84,0.85,0.89), mean=0.673, stddev=0.071], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.13 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.22), mean=0.177, stddev=0.0224] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0299544, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.85,-0.78,-0.63 -0.43,-0.30,-0.009,0.29,0.41 0.55,0.71,0.83,0.89), mean=-0.00859, stddev=0.348], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.24 0.29,0.36,0.43,0.48,0.50 0.52,0.53,0.54,0.59), mean=0.414, stddev=0.0814] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651332, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.49,0.51,0.54 0.57,0.59,0.63,0.67,0.69 0.71,0.74,0.77,0.83), mean=0.627, stddev=0.0528], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.15,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.18, stddev=0.0166] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00651332, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.73,-0.68,-0.52 -0.36,-0.25,-0.008,0.23,0.34 0.48,0.62,0.72,0.82), mean=-0.00873, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.37,0.42 0.50,0.58,0.66,0.71,0.73 0.75,0.77,0.78,0.80), mean=0.639, stddev=0.0945] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.47e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.27025e-06, count-zeroing-boundaries=220240
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.210468
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000233176, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08626, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.5,2.6 2.6,2.7,2.8,2.9), mean=1.88, stddev=0.577], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.97,1.0,1.1 1.1,1.2,1.3,1.5,1.8 1.9,2.0,2.1,2.2), mean=1.37, stddev=0.253], bias-{mean,stddev}=-0.02733,0.5311, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000233176, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04415, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.60,0.61,0.62 0.64,0.66,0.70,0.74,0.78 0.81,0.86,0.91,2.3), mean=0.706, stddev=0.0873], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.7,2.7,2.8,2.9), mean=1.95, stddev=0.554], bias-{mean,stddev}=7.975e-09,0.02941, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0137], oderiv-count=592640
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/270.mdl exp/nnet3/tdnn_lstm1c_sp/271.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.08458 tdnn2.affine:4.96246 lstm1.W_all:3.96579 lstm1.lstm_nonlin:0.0851684 lstm1.W_rp:1.57547 tdnn3.affine:3.37141 tdnn4.affine:3.72548 lstm2.W_all:2.83147 lstm2.lstm_nonlin:0.0505202 lstm2.W_rp:1.14489 tdnn5.affine:2.81592 tdnn6.affine:3.14151 lstm3.W_all:3.2735 lstm3.lstm_nonlin:0.1021 lstm3.W_rp:1.38367 output.affine:3.29785 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.4647 tdnn2.affine:11.504 lstm1.W_all:21.6357 lstm1.lstm_nonlin:1.73999 lstm1.W_rp:15.6781 tdnn3.affine:8.64262 tdnn4.affine:8.53073 lstm2.W_all:17.9203 lstm2.lstm_nonlin:1.08021 lstm2.W_rp:14.9722 tdnn5.affine:8.35811 tdnn6.affine:8.43617 lstm3.W_all:25.6899 lstm3.lstm_nonlin:2.88434 lstm3.W_rp:32.8545 output.affine:32.6802 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.376178 tdnn2.affine:0.429169 lstm1.W_all:0.182977 lstm1.lstm_nonlin:0.0491858 lstm1.W_rp:0.100364 tdnn3.affine:0.388862 tdnn4.affine:0.434497 lstm2.W_all:0.157864 lstm2.lstm_nonlin:0.0470404 lstm2.W_rp:0.0766057 tdnn5.affine:0.33691 tdnn6.affine:0.371329 lstm3.W_all:0.127262 lstm3.lstm_nonlin:0.0357131 lstm3.W_rp:0.0422054 output.affine:0.100847 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:48:16 KST 2020, elapsed time 0 seconds
