# nnet3-info exp/nnet3/tdnn_lstm1c_sp/63.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/62.mdl exp/nnet3/tdnn_lstm1c_sp/63.mdl 
# Started at Thu Jul 30 10:26:04 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/63.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000246446, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03083, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.07,0.42,0.54,0.63,0.68 0.72,0.83,0.93,1.1), mean=0.493, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.15 0.18,0.21,0.58,0.82,1.2 1.4,1.5,1.6,1.7), mean=0.595, stddev=0.374], bias-{mean,stddev}=0.001293,0.05854, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0.110855, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,3e-06,1e-05,5e-05 0.0003,0.03,0.06,0.09,0.10 0.11,0.13,0.13,0.18), mean=0.0591, stddev=0.0355], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.002,0.003,0.02 0.05,0.26,0.47,0.62,0.70 0.76,0.84,0.87,0.95), mean=0.441, stddev=0.227], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.05 0.11,0.28,0.35,0.44,0.49 0.55,0.64,0.70,0.95), mean=0.348, stddev=0.142], oderiv-count=1.28397e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33131.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-06,3e-06,2e-05 0.0001,0.02,0.06,0.08,0.10 0.11,0.13,0.15,0.20), mean=0.055, stddev=0.0358], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,7e-05,9e-05,0.0003 0.0009,0.06,0.09,0.11,0.11 0.12,0.13,0.13,0.16), mean=0.0786, stddev=0.0386]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000246446, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01276, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.42 0.43,0.45,0.50,0.54,0.57 0.59,0.61,0.62,0.79), mean=0.501, stddev=0.0546], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.009,0.02 0.04,0.25,0.30,0.34,0.36 0.38,0.40,0.43,0.67), mean=0.27, stddev=0.108], bias-{mean,stddev}=1.66e-05,0.02765, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.29,0.30 0.32,0.33,0.36,0.39,0.42 0.43,0.46,0.47,0.63), mean=0.363, stddev=0.041], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.40,0.40,0.42 0.42,0.44,0.46,0.49,0.50 0.51,0.51,0.52,0.56), mean=0.46, stddev=0.0288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.07,0.07), mean=0.0408, stddev=0.00791], oderiv-count=1.1753e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32410.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.29 0.30,0.32,0.35,0.39,0.41 0.43,0.46,0.47,0.67), mean=0.356, stddev=0.0467], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.50,0.51,0.52 0.54,0.57,0.62,0.68,0.72 0.74,0.81,0.82,1.0), mean=0.625, stddev=0.0716]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000246446, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0176, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.004,0.009,0.04 0.13,0.23,0.39,0.57,0.68 0.76,0.84,0.90,1.2), mean=0.398, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.39,0.45 0.52,0.69,0.82,0.91,0.95 0.98,1.0,1.1,1.3), mean=0.787, stddev=0.158], bias-{mean,stddev}=-0.001671,0.01987, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000246446, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02452, w_fc-rms=0.03941, w_oc-rms=0.05538, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615358, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.42,0.43,0.44 0.45,0.46,0.49,0.53,0.57 0.62,0.67,0.68,0.72), mean=0.5, stddev=0.0532], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0148] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615358, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.38,0.40 0.41,0.43,0.48,0.53,0.61 0.70,0.76,0.80,0.86), mean=0.495, stddev=0.0876], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.17,0.19 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0205] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00719782, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.83,-0.77,-0.60 -0.37,-0.20,0.0003,0.22,0.37 0.56,0.73,0.78,0.82), mean=0.00135, stddev=0.315], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.28,0.29,0.34 0.39,0.45,0.58,0.69,0.82 0.97,0.99,1.0,1.0), mean=0.59, stddev=0.168] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615358, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.39,0.40,0.41 0.42,0.44,0.47,0.51,0.53 0.56,0.59,0.60,0.68), mean=0.477, stddev=0.0439], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.19,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0169] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0172582, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.94,-0.86,-0.81,-0.55 -0.34,-0.19,-0.005,0.17,0.34 0.51,0.73,0.81,0.88), mean=-0.00378, stddev=0.305], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.21,0.23,0.35 0.58,0.70,0.82,0.88,0.92 0.99,1.0,1.0,1.0), mean=0.779, stddev=0.167] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=296715
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000246446, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03232, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.25,0.27 0.29,0.34,0.54,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.663, stddev=0.323], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.09 0.23,0.35,0.49,0.62,0.71 0.83,0.96,1.0,1.2), mean=0.483, stddev=0.197], bias-{mean,stddev}=-0.003224,0.04381, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000246446, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01287, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.25 0.27,0.29,0.34,0.41,0.45 0.48,0.53,0.56,0.65), mean=0.352, stddev=0.0732], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.10 0.11,0.13,0.22,0.40,0.44 0.48,0.50,0.52,0.56), mean=0.26, stddev=0.135], bias-{mean,stddev}=-0.005977,0.02259, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.09e+06, self-repaired-proportion=0.000492495, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.05,0.06,0.07 0.09,0.11,0.15,0.18,0.19 0.21,0.23,0.24,0.26), mean=0.145, stddev=0.0428], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.16,0.22,0.26 0.32,0.39,0.50,0.59,0.63 0.65,0.68,0.70,0.74), mean=0.485, stddev=0.121], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.06,0.07,0.08,0.09 0.10,0.11,0.12,0.23), mean=0.0717, stddev=0.0156], oderiv-count=1.10426e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30245, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.04,0.05,0.06 0.08,0.10,0.14,0.17,0.19 0.21,0.23,0.23,0.27), mean=0.135, stddev=0.0436], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.13,0.14,0.16 0.18,0.19,0.22,0.25,0.26 0.28,0.30,0.31,0.38), mean=0.22, stddev=0.0374]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000246446, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00947, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.31,0.32 0.33,0.34,0.37,0.40,0.42 0.44,0.44,0.46,0.62), mean=0.372, stddev=0.0372], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.17,0.18,0.21,0.24,0.26 0.27,0.29,0.30,0.35), mean=0.213, stddev=0.0333], bias-{mean,stddev}=-0.01019,0.0163, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.03e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.25 0.26,0.27,0.30,0.34,0.36 0.37,0.39,0.41,0.45), mean=0.306, stddev=0.0394], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.39 0.40,0.42,0.44,0.46,0.48 0.50,0.51,0.52,0.54), mean=0.441, stddev=0.0314], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0301, stddev=0.00267], oderiv-count=1.19872e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28079.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.22,0.23 0.24,0.26,0.29,0.32,0.35 0.36,0.39,0.40,0.44), mean=0.295, stddev=0.0398], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.48 0.50,0.52,0.56,0.62,0.65 0.68,0.73,0.76,0.90), mean=0.573, stddev=0.0662]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000246446, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01373, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.001,0.001,0.002 0.006,0.03,0.28,0.48,0.57 0.62,0.67,0.69,1.1), mean=0.28, stddev=0.211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.27,0.28,0.33 0.38,0.54,0.64,0.71,0.74 0.77,0.81,0.84,0.95), mean=0.612, stddev=0.132], bias-{mean,stddev}=-0.00288,0.02093, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000246446, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01359, w_fc-rms=0.01906, w_oc-rms=0.02332, count=1.33e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620888, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.45 0.46,0.47,0.50,0.51,0.53 0.56,0.59,0.60,0.66), mean=0.494, stddev=0.0339], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0157] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620888, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.41,0.42 0.43,0.45,0.49,0.50,0.52 0.56,0.62,0.64,0.73), mean=0.484, stddev=0.0467], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0131] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00988728, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.66,-0.60,-0.37 -0.23,-0.13,0.006,0.16,0.29 0.41,0.58,0.64,0.77), mean=0.0121, stddev=0.232], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.44,0.48,0.50 0.53,0.57,0.65,0.97,1.0 1.0,1.0,1.0,1.0), mean=0.719, stddev=0.179] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00620888, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.49,0.50,0.52 0.54,0.56,0.59,0.66), mean=0.486, stddev=0.0346], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0163] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00620888, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.67,-0.55,-0.35 -0.24,-0.13,0.004,0.16,0.28 0.39,0.58,0.61,0.85), mean=0.0119, stddev=0.224], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.51,0.54,0.65 0.75,0.81,0.88,0.98,1.0 1.0,1.0,1.0,1.0), mean=0.873, stddev=0.109] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=261624
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000246446, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02883, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.39,0.41 0.43,0.46,0.60,0.82,0.88 0.91,0.93,0.94,1.1), mean=0.633, stddev=0.176], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.009,0.01,0.02 0.03,0.07,0.44,0.61,0.69 0.74,0.85,0.89,1.1), mean=0.389, stddev=0.254], bias-{mean,stddev}=-0.0008727,0.09937, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000246446, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01199, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.22 0.23,0.26,0.30,0.37,0.43 0.50,0.57,0.59,0.65), mean=0.324, stddev=0.0852], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.17,0.19,0.25,0.34,0.37 0.40,0.42,0.44,0.48), mean=0.262, stddev=0.0775], bias-{mean,stddev}=0.00206,0.01818, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.39e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.05,0.06,0.09,0.12,0.14 0.15,0.17,0.18,0.19), mean=0.0933, stddev=0.0347], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.19 0.24,0.30,0.42,0.54,0.59 0.62,0.64,0.65,0.69), mean=0.417, stddev=0.129], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.06 0.06,0.07,0.08,0.09,0.11 0.12,0.13,0.14,0.16), mean=0.0822, stddev=0.0183], oderiv-count=1.03629e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25914.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.05,0.06,0.09,0.12,0.14 0.16,0.17,0.18,0.20), mean=0.0908, stddev=0.0353], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.11 0.12,0.14,0.16,0.19,0.20 0.21,0.23,0.24,0.29), mean=0.162, stddev=0.034]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000246446, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009112, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.29 0.30,0.31,0.35,0.40,0.43 0.45,0.46,0.48,0.52), mean=0.357, stddev=0.0493], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.12,0.14 0.15,0.17,0.20,0.23,0.26 0.29,0.32,0.36,0.48), mean=0.203, stddev=0.0465], bias-{mean,stddev}=-0.01154,0.01478, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.11e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.23 0.25,0.27,0.31,0.34,0.36 0.37,0.40,0.41,0.48), mean=0.307, stddev=0.0416], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.35,0.36 0.37,0.39,0.42,0.45,0.47 0.48,0.49,0.50,0.51), mean=0.42, stddev=0.035], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0254, stddev=0.00259], oderiv-count=962560
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23749.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.23 0.24,0.27,0.30,0.34,0.36 0.38,0.41,0.44,0.51), mean=0.303, stddev=0.0467], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.45,0.47 0.49,0.52,0.58,0.66,0.70 0.73,0.78,0.80,0.88), mean=0.592, stddev=0.0802]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000246446, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01974, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.17,0.25 0.31,0.36,0.43,0.62,0.75 0.80,0.84,0.87,1.5), mean=0.475, stddev=0.167], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.61,0.62 0.64,0.67,0.75,1.1,1.4 1.4,1.5,1.5,1.7), mean=0.86, stddev=0.265], bias-{mean,stddev}=0.007724,0.02513, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000246446, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02982, w_fc-rms=0.04084, w_oc-rms=0.05741, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627569, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.47 0.49,0.51,0.57,0.63,0.65 0.68,0.69,0.70,0.77), mean=0.572, stddev=0.0642], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.19,0.20,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.205, stddev=0.0101] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627569, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.48 0.50,0.53,0.59,0.63,0.66 0.69,0.72,0.73,0.87), mean=0.586, stddev=0.0625], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.17,0.17,0.18 0.19,0.19,0.21,0.22,0.22 0.22,0.23,0.23,0.23), mean=0.204, stddev=0.0137] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0100493, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.80,-0.75,-0.52 -0.32,-0.18,-0.0007,0.19,0.31 0.49,0.67,0.79,0.87), mean=-0.000328, stddev=0.288], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.26,0.27,0.32 0.35,0.40,0.45,0.49,0.51 0.52,0.54,0.54,0.66), mean=0.439, stddev=0.0626] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627569, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.54,0.55,0.56 0.58,0.60,0.65,0.68,0.71 0.72,0.74,0.76,0.93), mean=0.646, stddev=0.0498], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.15,0.16,0.16 0.17,0.18,0.19,0.20,0.20 0.20,0.21,0.21,0.21), mean=0.186, stddev=0.0127] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0177417, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.98,-0.85,-0.79,-0.52 -0.31,-0.17,-0.001,0.19,0.31 0.51,0.68,0.83,0.92), mean=0.00205, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.20,0.24,0.39 0.48,0.57,0.65,0.70,0.71 0.72,0.73,0.74,0.76), mean=0.616, stddev=0.108] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222397
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000246446, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06852, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.5,1.8,1.9 1.9,2.0,2.0,2.1), mean=1.54, stddev=0.263], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.67,0.75,0.85 0.91,0.97,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.09, stddev=0.154], bias-{mean,stddev}=0.001003,0.087, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000246446, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04067, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.51,0.53,0.55 0.57,0.59,0.64,0.70,0.74 0.78,0.83,0.87,2.1), mean=0.649, stddev=0.0935], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.5 1.5,1.6,1.8,2.1,2.2 2.2,2.4,2.4,2.6), mean=1.84, stddev=0.277], bias-{mean,stddev}=4.249e-09,0.02663, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.42), mean=0.0165, stddev=0.0141], oderiv-count=534400
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/62.mdl exp/nnet3/tdnn_lstm1c_sp/63.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.71404 tdnn2.affine:8.83448 lstm1.W_all:7.56026 lstm1.lstm_nonlin:0.158855 lstm1.W_rp:3.07582 tdnn3.affine:5.29815 tdnn4.affine:6.25396 lstm2.W_all:4.97503 lstm2.lstm_nonlin:0.0698283 lstm2.W_rp:2.00876 tdnn5.affine:4.41788 tdnn6.affine:5.32285 lstm3.W_all:6.72934 lstm3.lstm_nonlin:0.137494 lstm3.W_rp:2.70253 output.affine:5.94081 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.2515 tdnn2.affine:11.5088 lstm1.W_all:20.4871 lstm1.lstm_nonlin:1.6477 lstm1.W_rp:11.9052 tdnn3.affine:8.21284 tdnn4.affine:8.54084 lstm2.W_all:15.9986 lstm2.lstm_nonlin:0.753346 lstm2.W_rp:10.7215 tdnn5.affine:7.64973 tdnn6.affine:8.21832 lstm3.W_all:22.9789 lstm3.lstm_nonlin:1.74461 lstm3.W_rp:25.2328 output.affine:30.1077 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.713163 tdnn2.affine:0.764997 lstm1.W_all:0.36854 lstm1.lstm_nonlin:0.0984331 lstm1.W_rp:0.25688 tdnn3.affine:0.633277 tdnn4.affine:0.725808 lstm2.W_all:0.309424 lstm2.lstm_nonlin:0.0915028 lstm2.W_rp:0.186296 tdnn5.affine:0.566904 tdnn6.affine:0.638379 lstm3.W_all:0.291673 lstm3.lstm_nonlin:0.0795174 lstm3.W_rp:0.107054 output.affine:0.19736 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:26:04 KST 2020, elapsed time 0 seconds
