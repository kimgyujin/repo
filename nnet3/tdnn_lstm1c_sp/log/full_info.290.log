# nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/290.mdl 
# Started at Thu Jul 30 11:55:50 KST 2020
#
nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/290.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.0002067, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03238, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.01,0.01 0.02,0.03,0.57,0.71,0.80 0.87,0.94,0.98,1.2), mean=0.476, stddev=0.296], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.18,0.21,0.62,0.89,1.2 1.4,1.6,1.6,1.6), mean=0.628, stddev=0.388], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.07,0.26,0.88,1.5 1.7,2.0,2.1,2.4), mean=0.491, stddev=0.551], bias-{mean,stddev}=0.0004341,0.06136, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.13e+06, self-repaired-proportion=0.191563, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,9e-06,2e-05,5e-05 9e-05,0.0003,0.06,0.10,0.11 0.13,0.15,0.17,0.23), mean=0.055, stddev=0.0462], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.006,0.009,0.02 0.04,0.07,0.43,0.60,0.72 0.81,0.87,0.93,1.0), mean=0.381, stddev=0.26], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.06,0.26,0.36,0.41 0.49,0.64,0.67,1.4), mean=0.255, stddev=0.165], oderiv-count=1.12448e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32516.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,1e-05,1e-05,3e-05 6e-05,0.0002,0.05,0.09,0.11 0.13,0.16,0.17,0.23), mean=0.052, stddev=0.0454], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.0002,0.0002,0.0002 0.0005,0.002,0.09,0.12,0.13 0.14,0.15,0.16,0.16), mean=0.073, stddev=0.0509]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.0002067, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01214, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.38 0.40,0.42,0.46,0.53,0.56 0.59,0.64,0.66,0.71), mean=0.475, stddev=0.0662], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.007 0.01,0.02,0.29,0.34,0.38 0.41,0.45,0.52,0.72), mean=0.236, stddev=0.144], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.09,0.19,0.53,0.86 1.1,1.3,1.4,2.1), mean=0.334, stddev=0.344], bias-{mean,stddev}=-0.02506,0.04022, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.26,0.27,0.30,0.34,0.36 0.38,0.40,0.44,0.50), mean=0.306, stddev=0.0441], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.36,0.37,0.39 0.41,0.42,0.45,0.47,0.49 0.51,0.53,0.53,0.55), mean=0.448, stddev=0.0346], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0417, stddev=0.0073], oderiv-count=1.04947e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31794.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.26,0.27,0.30,0.34,0.37 0.39,0.42,0.45,0.54), mean=0.309, stddev=0.048], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.45,0.47 0.48,0.50,0.56,0.61,0.64 0.67,0.71,0.72,0.79), mean=0.56, stddev=0.0621]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.0002067, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01815, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-06,5e-06,3e-05 0.001,0.16,0.43,0.61,0.69 0.75,0.81,0.85,1.1), mean=0.397, stddev=0.238], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.38,0.41,0.45 0.54,0.72,0.83,0.92,0.99 1.1,1.1,1.1,1.3), mean=0.811, stddev=0.165], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,4e-07 6e-07,0.15,0.33,0.79,1.4 1.9,2.4,2.7,4.6), mean=0.547, stddev=0.621], bias-{mean,stddev}=0.002986,0.02824, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.0002067, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06764, w_fc-rms=0.03203, w_oc-rms=0.04595, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630363, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.71,0.79,0.81,0.85), mean=0.495, stddev=0.0794], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.17 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0234] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630363, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.44,0.46,0.47 0.48,0.49,0.50,0.54,0.59 0.67,0.77,0.79,0.86), mean=0.524, stddev=0.065], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.17 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0232] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.034533, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.88,-0.87,-0.52 -0.27,-0.13,0.001,0.16,0.32 0.56,0.87,0.89,0.91), mean=0.0163, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.20,0.23 0.37,0.43,0.56,0.75,1.0 1.0,1.0,1.0,1.0), mean=0.6, stddev=0.221] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00630363, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.43,0.45,0.50,0.50 0.51,0.54,0.57,0.73), mean=0.459, stddev=0.0409], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.219, stddev=0.0211] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00630363, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.68,-0.63,-0.32 -0.15,-0.07,0.0006,0.09,0.22 0.33,0.63,0.70,0.75), mean=0.0112, stddev=0.211], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.43,0.46,0.56 0.78,0.83,0.90,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.875, stddev=0.118] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=7.28708e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000152551, count-zeroing-boundaries=298260
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.26281
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.0002067, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04056, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.32,0.36,0.39 0.43,0.50,0.87,1.2,1.3 1.4,1.4,1.4,1.5), mean=0.858, stddev=0.345], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.001,0.001,0.003 0.01,0.32,0.54,0.74,0.92 1.2,1.6,1.7,2.0), mean=0.549, stddev=0.355], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-07,2e-07,2e-07 3e-07,4e-07,1e-06,0.47,2.0 2.3,2.6,2.9,3.7), mean=0.4, stddev=0.834], bias-{mean,stddev}=0.01295,0.2734, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.0002067, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01347, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.21,0.23,0.25 0.27,0.30,0.36,0.43,0.48 0.50,0.54,0.57,0.63), mean=0.367, stddev=0.0821], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.10,0.11,0.13 0.14,0.16,0.29,0.40,0.43 0.45,0.47,0.49,0.53), mean=0.284, stddev=0.118], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,6e-08,6e-08,8e-08 1e-07,2e-07,2e-05,0.36,0.74 0.98,1.2,1.3,1.4), mean=0.18, stddev=0.33], bias-{mean,stddev}=0.002121,0.01087, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.91e+05, self-repaired-proportion=0.00350803, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.02,0.03,0.03 0.05,0.07,0.09,0.12,0.13 0.14,0.16,0.17,0.18), mean=0.0904, stddev=0.0316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.12,0.18,0.22 0.28,0.40,0.52,0.61,0.65 0.68,0.70,0.73,0.83), mean=0.497, stddev=0.138], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.08,0.09,0.09 0.09,0.10,0.11,0.14,0.16 0.19,0.23,0.24,0.29), mean=0.121, stddev=0.0337], oderiv-count=1.10656e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29629.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.03,0.03 0.05,0.06,0.09,0.11,0.13 0.14,0.16,0.16,0.18), mean=0.0881, stddev=0.031], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0009,0.08,0.09,0.10 0.11,0.12,0.14,0.15,0.17 0.18,0.19,0.21,0.24), mean=0.138, stddev=0.0266]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.0002067, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009032, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.29 0.31,0.32,0.35,0.39,0.41 0.44,0.46,0.48,0.55), mean=0.354, stddev=0.0452], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.12,0.13,0.14 0.15,0.16,0.19,0.24,0.26 0.28,0.31,0.33,0.38), mean=0.201, stddev=0.0462], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.08,0.10,0.17,0.40,0.66 0.82,0.92,0.98,1.1), mean=0.269, stddev=0.234], bias-{mean,stddev}=-0.02364,0.01953, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.72e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.22,0.23 0.24,0.25,0.28,0.31,0.33 0.34,0.36,0.37,0.46), mean=0.281, stddev=0.0356], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.38,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.48,0.49,0.51), mean=0.435, stddev=0.0259], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0343, stddev=0.0029], oderiv-count=1.01702e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27464.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.22,0.23 0.24,0.25,0.28,0.31,0.33 0.35,0.36,0.38,0.51), mean=0.282, stddev=0.0374], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.44,0.45 0.47,0.49,0.53,0.59,0.63 0.67,0.71,0.74,1.1), mean=0.544, stddev=0.0708]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.0002067, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01506, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-06,2e-06,6e-06 3e-05,0.0006,0.34,0.54,0.61 0.66,0.70,0.73,0.89), mean=0.296, stddev=0.245], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.31,0.34,0.39 0.48,0.61,0.68,0.76,0.80 0.86,0.95,1.0,1.4), mean=0.674, stddev=0.133], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,3e-07,4e-07 7e-05,0.10,0.25,0.63,1.2 1.6,2.0,2.2,4.7), mean=0.437, stddev=0.53], bias-{mean,stddev}=0.005384,0.03607, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.0002067, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04098, w_fc-rms=0.01634, w_oc-rms=0.03679, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635651, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.50,0.52,0.57 0.60,0.68,0.73,0.80), mean=0.506, stddev=0.053], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0182] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635651, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.45,0.47 0.48,0.50,0.50,0.54,0.57 0.61,0.66,0.67,0.76), mean=0.517, stddev=0.0444], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0196] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00808749, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.83,-0.72,-0.50 -0.26,-0.13,0.001,0.15,0.32 0.55,0.74,0.76,0.86), mean=0.0123, stddev=0.278], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.29,0.39 0.45,0.52,0.62,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.709, stddev=0.23] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635651, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.45,0.47,0.50,0.50,0.52 0.54,0.57,0.59,0.62), mean=0.491, stddev=0.0297], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0193] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00635651, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.68,-0.58,-0.43,-0.31 -0.17,-0.07,0.0002,0.09,0.21 0.36,0.48,0.53,0.61), mean=0.00892, stddev=0.18], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.58,0.63,0.74 0.78,0.85,0.92,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.908, stddev=0.0953] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=8.60439e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.46242e-05, count-zeroing-boundaries=263059
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.26281
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.0002067, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03946, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.45,0.49,0.53 0.56,0.60,0.88,1.1,1.2 1.2,1.3,1.3,1.4), mean=0.863, stddev=0.253], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0009,0.001,0.002 0.003,0.01,0.57,0.83,0.96 1.1,1.3,1.5,1.7), mean=0.493, stddev=0.402], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-07,1e-07,2e-07 2e-07,4e-07,1e-05,1.4,1.8 2.1,2.3,2.5,3.0), mean=0.448, stddev=0.78], bias-{mean,stddev}=0.002034,0.2193, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.0002067, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01304, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.27 0.28,0.30,0.35,0.41,0.46 0.50,0.53,0.55,0.61), mean=0.358, stddev=0.0688], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.38,0.41 0.43,0.45,0.46,0.53), mean=0.282, stddev=0.0935], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,8e-08,1e-07 1e-07,3e-07,0.002,0.39,0.75 0.93,1.1,1.1,1.3), mean=0.191, stddev=0.31], bias-{mean,stddev}=0.0006687,0.006408, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.9e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.05,0.07,0.10,0.11 0.12,0.13,0.14,0.18), mean=0.0735, stddev=0.0289], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.14,0.16,0.21 0.26,0.34,0.49,0.60,0.64 0.67,0.69,0.70,0.77), mean=0.472, stddev=0.141], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.15,0.16 0.19,0.21,0.22,0.25), mean=0.13, stddev=0.0278], oderiv-count=1.00179e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25298.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.08,0.10,0.11 0.12,0.13,0.14,0.19), mean=0.0765, stddev=0.0294], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.18,0.19), mean=0.121, stddev=0.0236]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.0002067, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00893, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.19,0.24 0.27,0.30,0.35,0.40,0.42 0.44,0.47,0.48,0.51), mean=0.347, stddev=0.0619], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.16,0.19,0.23,0.27 0.29,0.32,0.35,0.42), mean=0.198, stddev=0.0482], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.08,0.15,0.40,0.69 0.83,0.93,0.97,1.1), mean=0.254, stddev=0.244], bias-{mean,stddev}=-0.01846,0.02519, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.29e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.19,0.21 0.24,0.26,0.29,0.32,0.34 0.35,0.37,0.37,0.48), mean=0.291, stddev=0.0431], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.36,0.37 0.39,0.40,0.43,0.45,0.47 0.48,0.49,0.50,0.54), mean=0.427, stddev=0.0312], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.0283, stddev=0.00242], oderiv-count=945120
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23133.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.19,0.22 0.24,0.26,0.30,0.33,0.35 0.36,0.39,0.42,0.57), mean=0.299, stddev=0.0456], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.30,0.32,0.40 0.45,0.51,0.58,0.65,0.69 0.73,0.77,0.83,1.2), mean=0.58, stddev=0.103]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.0002067, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02148, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.29,0.30,0.31 0.33,0.38,0.51,0.66,0.74 0.79,0.86,0.88,1.1), mean=0.527, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.68,0.69,0.75 0.78,0.82,0.89,1.1,1.2 1.3,1.5,1.7,2.0), mean=0.959, stddev=0.201], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,2e-06,4e-06,0.0002 0.08,0.12,0.29,0.93,1.9 2.3,2.7,2.8,7.4), mean=0.609, stddev=0.767], bias-{mean,stddev}=0.01618,0.02145, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.0002067, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1037, w_fc-rms=0.04868, w_oc-rms=0.07231, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642032, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.57,0.58,0.61 0.64,0.67,0.72,0.77,0.80 0.82,0.85,0.86,0.89), mean=0.72, stddev=0.0628], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.14,0.15,0.17,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.168, stddev=0.0239] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642032, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.49,0.56,0.59 0.61,0.64,0.70,0.75,0.79 0.82,0.86,0.87,0.88), mean=0.697, stddev=0.0714], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.12 0.13,0.15,0.18,0.19,0.20 0.20,0.20,0.21,0.22), mean=0.17, stddev=0.0242] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0396359, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.87,-0.83,-0.63 -0.45,-0.33,0.004,0.32,0.45 0.58,0.76,0.87,0.92), mean=-0.00731, stddev=0.365], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.19,0.23 0.28,0.36,0.45,0.51,0.53 0.55,0.58,0.59,0.64), mean=0.43, stddev=0.0957] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642032, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.50,0.54 0.56,0.59,0.64,0.68,0.71 0.73,0.77,0.81,0.87), mean=0.639, stddev=0.0598], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.15,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0181] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00642032, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.72,-0.68,-0.50 -0.37,-0.26,-0.0005,0.24,0.35 0.48,0.65,0.70,0.78), mean=-0.00716, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.41,0.45 0.52,0.61,0.69,0.74,0.77 0.78,0.80,0.81,0.86), mean=0.667, stddev=0.0948] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223709
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.26281
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.0002067, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08943, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.6,2.7 2.7,2.8,2.9,3.0), mean=1.95, stddev=0.608], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.98,1.0,1.1 1.1,1.2,1.4,1.6,1.9 2.0,2.1,2.2,2.3), mean=1.41, stddev=0.281], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-07,1e-06,1e-06,2e-06 3e-06,2e-05,0.10,3.1,3.7 4.2,4.8,5.6,6.1), mean=1.19, stddev=1.66], bias-{mean,stddev}=-0.008326,0.6318, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.0002067, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04423, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.61,0.62 0.64,0.66,0.70,0.75,0.78 0.81,0.87,0.93,2.2), mean=0.708, stddev=0.0853], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.3,1.3,1.8,2.5,2.6 2.7,2.8,2.8,2.9), mean=1.95, stddev=0.571], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,1e-06,1e-06 2e-06,1e-05,0.05,3.0,4.0 4.4,4.8,5.0,6.2), mean=1.14, stddev=1.68], bias-{mean,stddev}=6.728e-09,0.02649, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0138], oderiv-count=607040
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:55:51 KST 2020, elapsed time 1 seconds
