# nnet3-info exp/nnet3/tdnn_lstm1c_sp/449.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/448.mdl exp/nnet3/tdnn_lstm1c_sp/449.mdl 
# Started at Thu Jul 30 12:59:10 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/449.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=7.53919e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03259, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.007 0.009,0.02,0.58,0.73,0.80 0.87,0.94,0.98,1.3), mean=0.472, stddev=0.31], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.19,0.23,0.69,0.94,1.1 1.3,1.4,1.4,1.5), mean=0.65, stddev=0.36], bias-{mean,stddev}=-0.007858,0.06099, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0.158268, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,2e-05,3e-05,3e-05 6e-05,0.0002,0.04,0.09,0.11 0.12,0.13,0.15,0.18), mean=0.0434, stddev=0.0439], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.009,0.02,0.03 0.05,0.07,0.35,0.60,0.70 0.78,0.87,0.91,0.96), mean=0.342, stddev=0.264], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.009,0.01 0.02,0.05,0.42,0.60,0.74 0.84,0.95,1.1,1.8), mean=0.402, stddev=0.284], oderiv-count=1.08742e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=43239.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,9e-06,2e-05,4e-05 6e-05,0.0002,0.04,0.08,0.11 0.12,0.13,0.15,0.19), mean=0.0432, stddev=0.0441], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,9e-05,0.0001,0.0002 0.0003,0.0008,0.07,0.11,0.12 0.13,0.14,0.15,0.16), mean=0.0604, stddev=0.0502]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.53919e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01147, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.34,0.35 0.37,0.39,0.44,0.50,0.54 0.58,0.62,0.64,0.73), mean=0.448, stddev=0.0683], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.005,0.01,0.28,0.33,0.37 0.39,0.42,0.50,0.75), mean=0.218, stddev=0.145], bias-{mean,stddev}=-0.03524,0.03829, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.18 0.20,0.21,0.25,0.28,0.30 0.32,0.33,0.35,0.43), mean=0.248, stddev=0.0419], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.34,0.37,0.38 0.40,0.42,0.44,0.47,0.49 0.51,0.53,0.53,0.57), mean=0.443, stddev=0.0378], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.05,0.05,0.06,0.07,0.07 0.08,0.09,0.10,0.12), mean=0.0584, stddev=0.0122], oderiv-count=1.1929e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=42358.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.19 0.20,0.21,0.25,0.28,0.31 0.32,0.34,0.36,0.45), mean=0.25, stddev=0.0423], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.33,0.34,0.37 0.39,0.40,0.45,0.50,0.53 0.55,0.58,0.60,0.64), mean=0.454, stddev=0.0577]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0174, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,5e-07,1e-06,8e-06 0.0002,0.18,0.40,0.58,0.66 0.72,0.80,0.88,1.1), mean=0.38, stddev=0.228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.38,0.41 0.48,0.69,0.80,0.89,0.95 1.0,1.1,1.2,1.3), mean=0.775, stddev=0.171], bias-{mean,stddev}=0.0007545,0.02296, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05059, w_fc-rms=0.02157, w_oc-rms=0.03996, count=1.51e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642506, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.42,0.43 0.44,0.45,0.48,0.50,0.54 0.65,0.73,0.74,0.79), mean=0.491, stddev=0.0644], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.227, stddev=0.016] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642506, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.45 0.46,0.47,0.50,0.51,0.55 0.61,0.67,0.70,0.77), mean=0.502, stddev=0.0516], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0138] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00643124, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.82,-0.78,-0.44 -0.28,-0.13,0.0006,0.15,0.28 0.60,0.76,0.82,0.87), mean=0.0144, stddev=0.283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.30,0.34 0.40,0.45,0.57,0.71,1.0 1.0,1.0,1.0,1.0), mean=0.614, stddev=0.203] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00642506, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.56,0.58,0.64), mean=0.461, stddev=0.0414], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0186] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00789946, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.79,-0.75,-0.37 -0.21,-0.11,0.0002,0.12,0.23 0.45,0.66,0.79,0.89), mean=0.0109, stddev=0.249], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.28,0.34,0.48 0.68,0.76,0.85,0.91,1.0 1.0,1.0,1.0,1.0), mean=0.823, stddev=0.149] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.51432e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.36758e-05, count-zeroing-boundaries=296949
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0595041
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03848, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.44,0.46 0.51,0.56,0.84,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.837, stddev=0.264], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0006,0.0008,0.002 0.006,0.40,0.56,0.72,0.87 1.1,1.3,1.4,1.6), mean=0.537, stddev=0.311], bias-{mean,stddev}=0.01159,0.2568, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=7.53919e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01226, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.23,0.24,0.26 0.27,0.29,0.33,0.38,0.41 0.44,0.47,0.48,0.53), mean=0.338, stddev=0.0545], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.26,0.35,0.38 0.40,0.43,0.43,0.47), mean=0.266, stddev=0.0867], bias-{mean,stddev}=0.0009497,0.01004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.54e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.13 0.14,0.16,0.16,0.18), mean=0.0811, stddev=0.0369], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.12,0.15 0.20,0.29,0.44,0.55,0.59 0.64,0.68,0.70,0.82), mean=0.421, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.12,0.15,0.19 0.23,0.25,0.26,0.32), mean=0.132, stddev=0.0413], oderiv-count=1.0951e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39716.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.01,0.02 0.03,0.05,0.08,0.11,0.13 0.14,0.16,0.16,0.17), mean=0.0814, stddev=0.0366], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.07 0.09,0.11,0.14,0.17,0.18 0.19,0.19,0.20,0.22), mean=0.135, stddev=0.0334]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.53919e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008078, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.26,0.27 0.28,0.29,0.31,0.34,0.36 0.38,0.40,0.41,0.44), mean=0.317, stddev=0.035], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.13,0.14 0.15,0.15,0.17,0.21,0.23 0.24,0.27,0.29,0.38), mean=0.181, stddev=0.0339], bias-{mean,stddev}=-0.02849,0.01713, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.18e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.21,0.24,0.27,0.28 0.30,0.32,0.33,0.35), mean=0.24, stddev=0.0331], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.35,0.36,0.37 0.38,0.40,0.42,0.44,0.46 0.47,0.47,0.47,0.51), mean=0.419, stddev=0.0286], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.0383, stddev=0.00275], oderiv-count=1.01901e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37074.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.20,0.21,0.24,0.27,0.29 0.30,0.32,0.34,0.36), mean=0.243, stddev=0.0333], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.38,0.40 0.42,0.43,0.47,0.52,0.55 0.57,0.61,0.63,0.73), mean=0.477, stddev=0.0545]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01416, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-06,5e-06,1e-05 5e-05,0.001,0.32,0.50,0.58 0.63,0.67,0.70,0.85), mean=0.279, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.33 0.40,0.59,0.65,0.72,0.76 0.79,0.85,0.88,1.3), mean=0.633, stddev=0.131], bias-{mean,stddev}=0.002999,0.02712, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03157, w_fc-rms=0.01409, w_oc-rms=0.03709, count=1.38e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647976, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.45 0.47,0.48,0.50,0.51,0.54 0.58,0.62,0.65,0.72), mean=0.5, stddev=0.0379], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0134] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647976, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.45,0.46 0.47,0.48,0.50,0.51,0.53 0.56,0.60,0.61,0.67), mean=0.501, stddev=0.0314], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.21,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0119] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00647976, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.72,-0.66,-0.37 -0.21,-0.09,0.0002,0.10,0.26 0.44,0.56,0.64,0.73), mean=0.00571, stddev=0.226], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.38,0.42,0.46 0.49,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.724, stddev=0.212] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647976, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.45,0.46,0.50,0.50,0.51 0.52,0.56,0.56,0.72), mean=0.486, stddev=0.0304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0175] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00647976, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.61,-0.57,-0.28 -0.18,-0.07,9e-05,0.10,0.21 0.37,0.47,0.54,0.69), mean=0.00551, stddev=0.195], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.52,0.58,0.65 0.73,0.79,0.88,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.875, stddev=0.118] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.63611e-06, count-zeroing-boundaries=261913
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0595041
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03638, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.46,0.52 0.55,0.59,0.79,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.802, stddev=0.211], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.004,0.01,0.57,0.77,0.86 0.97,1.1,1.1,1.3), mean=0.466, stddev=0.356], bias-{mean,stddev}=-0.003189,0.203, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=7.53919e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01148, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.21,0.23 0.25,0.27,0.31,0.36,0.39 0.43,0.46,0.47,0.52), mean=0.315, stddev=0.0587], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.18,0.23,0.33,0.36 0.38,0.40,0.41,0.44), mean=0.25, stddev=0.0759], bias-{mean,stddev}=0.001182,0.007525, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.96e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.03,0.04,0.06,0.09,0.11 0.11,0.13,0.14,0.16), mean=0.0646, stddev=0.0292], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.16 0.20,0.28,0.41,0.51,0.56 0.59,0.62,0.64,0.66), mean=0.394, stddev=0.13], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.09,0.09 0.10,0.10,0.12,0.15,0.17 0.21,0.22,0.23,0.26), mean=0.128, stddev=0.0323], oderiv-count=1.06042e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34432.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.03,0.04,0.06,0.09,0.11 0.12,0.13,0.14,0.16), mean=0.066, stddev=0.0294], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.09,0.12,0.14,0.15 0.16,0.17,0.17,0.19), mean=0.117, stddev=0.0278]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.53919e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008161, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.17,0.23 0.26,0.28,0.32,0.36,0.38 0.40,0.41,0.41,0.44), mean=0.318, stddev=0.0543], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.12,0.13 0.14,0.15,0.17,0.21,0.24 0.26,0.30,0.33,0.39), mean=0.181, stddev=0.043], bias-{mean,stddev}=-0.0243,0.02126, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.42e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.15,0.18 0.20,0.22,0.25,0.28,0.30 0.30,0.33,0.34,0.36), mean=0.251, stddev=0.0396], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.37,0.38,0.41,0.44,0.45 0.46,0.47,0.48,0.51), mean=0.411, stddev=0.0313], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0318, stddev=0.00338], oderiv-count=993120
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31790.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.16,0.18 0.21,0.22,0.26,0.29,0.30 0.31,0.33,0.35,0.36), mean=0.254, stddev=0.0393], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.26,0.36 0.41,0.45,0.51,0.56,0.59 0.62,0.66,0.67,0.73), mean=0.502, stddev=0.0847]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02043, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.26 0.28,0.33,0.47,0.67,0.73 0.78,0.82,0.86,0.94), mean=0.494, stddev=0.165], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.51,0.57,0.67 0.73,0.76,0.83,1.1,1.2 1.3,1.4,1.5,1.8), mean=0.908, stddev=0.209], bias-{mean,stddev}=0.01461,0.0173, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.08611, w_fc-rms=0.04105, w_oc-rms=0.06233, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00654578, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.56,0.57,0.59 0.61,0.64,0.69,0.73,0.75 0.77,0.80,0.81,0.82), mean=0.686, stddev=0.0533], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.22), mean=0.179, stddev=0.0158] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00654578, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.53,0.54 0.56,0.58,0.62,0.66,0.72 0.76,0.79,0.81,0.85), mean=0.628, stddev=0.0622], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.17,0.18,0.20,0.21,0.21 0.21,0.22,0.22,0.22), mean=0.193, stddev=0.0183] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0130415, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.81,-0.73,-0.53 -0.42,-0.29,-0.01,0.25,0.39 0.53,0.68,0.73,0.86), mean=-0.00959, stddev=0.324], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.24,0.28 0.31,0.36,0.41,0.45,0.47 0.48,0.51,0.52,0.55), mean=0.399, stddev=0.0619] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00654578, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.50,0.52,0.54 0.56,0.59,0.63,0.66,0.69 0.71,0.74,0.78,0.89), mean=0.631, stddev=0.0539], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.13,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.19,0.19,0.20,0.20), mean=0.174, stddev=0.0154] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0143547, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.84,-0.73,-0.56 -0.40,-0.28,-0.002,0.24,0.37 0.55,0.71,0.75,0.88), mean=-0.0124, stddev=0.321], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.31 0.38,0.46,0.56,0.61,0.64 0.65,0.67,0.67,0.71), mean=0.531, stddev=0.104] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.48922e-06, count-zeroing-boundaries=222756
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0595041
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08658, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.94,1.0,1.1,1.1 1.1,1.2,1.7,2.5,2.6 2.6,2.7,2.8,3.0), mean=1.88, stddev=0.614], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.98,1.1,1.1 1.2,1.2,1.3,1.5,1.7 1.8,1.9,2.0,2.1), mean=1.38, stddev=0.216], bias-{mean,stddev}=-0.04141,0.4445, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04091, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.56,0.58 0.59,0.61,0.64,0.69,0.72 0.75,0.78,0.85,2.2), mean=0.654, stddev=0.0826], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.92,0.98,1.0,1.1 1.1,1.2,1.6,2.4,2.5 2.5,2.6,2.6,2.6), mean=1.78, stddev=0.581], bias-{mean,stddev}=3.364e-09,0.0253, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=570240
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/448.mdl exp/nnet3/tdnn_lstm1c_sp/449.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.80196 tdnn2.affine:2.5498 lstm1.W_all:1.92128 lstm1.lstm_nonlin:0.0417843 lstm1.W_rp:0.87672 tdnn3.affine:1.76339 tdnn4.affine:1.79439 lstm2.W_all:1.29446 lstm2.lstm_nonlin:0.0207702 lstm2.W_rp:0.58793 tdnn5.affine:1.45828 tdnn6.affine:1.59176 lstm3.W_all:1.78844 lstm3.lstm_nonlin:0.0418173 lstm3.W_rp:0.640351 output.affine:1.42622 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.9468 tdnn2.affine:10.3976 lstm1.W_all:20.2538 lstm1.lstm_nonlin:1.55019 lstm1.W_rp:14.7452 tdnn3.affine:7.8107 tdnn4.affine:7.31492 lstm2.W_all:16.5164 lstm2.lstm_nonlin:1.15632 lstm2.W_rp:13.7706 tdnn5.affine:7.31081 tdnn6.affine:7.38756 lstm3.W_all:23.7747 lstm3.lstm_nonlin:2.59851 lstm3.W_rp:32.6398 output.affine:30.2765 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.216634 tdnn2.affine:0.245521 lstm1.W_all:0.0948766 lstm1.lstm_nonlin:0.0268192 lstm1.W_rp:0.0594613 tdnn3.affine:0.226216 tdnn4.affine:0.245627 lstm2.W_all:0.078412 lstm2.lstm_nonlin:0.0178761 lstm2.W_rp:0.0427053 tdnn5.affine:0.199975 tdnn6.affine:0.216214 lstm3.W_all:0.0752104 lstm3.lstm_nonlin:0.0160157 lstm3.W_rp:0.0196052 output.affine:0.0470856 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:59:10 KST 2020, elapsed time 0 seconds
