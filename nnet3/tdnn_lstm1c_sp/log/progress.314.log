# nnet3-info exp/nnet3/tdnn_lstm1c_sp/314.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/313.mdl exp/nnet3/tdnn_lstm1c_sp/314.mdl 
# Started at Thu Jul 30 12:05:22 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/314.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000177511, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03145, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.007,0.01 0.01,0.03,0.56,0.69,0.78 0.84,0.92,0.96,1.1), mean=0.461, stddev=0.29], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.15 0.17,0.21,0.62,0.87,1.1 1.3,1.4,1.5,1.5), mean=0.616, stddev=0.368], bias-{mean,stddev}=-0.001809,0.06031, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.1e+06, self-repaired-proportion=0.180354, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,2e-05,3e-05,5e-05 9e-05,0.0002,0.05,0.09,0.11 0.12,0.14,0.17,0.19), mean=0.0511, stddev=0.0445], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.009,0.02,0.02 0.04,0.07,0.42,0.61,0.71 0.80,0.87,0.90,0.99), mean=0.374, stddev=0.261], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.02 0.02,0.06,0.28,0.37,0.45 0.57,0.65,0.69,1.5), mean=0.268, stddev=0.179], oderiv-count=1.07443e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33024.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,5e-06,1e-05,3e-05 6e-05,0.0002,0.05,0.09,0.11 0.12,0.15,0.17,0.20), mean=0.0482, stddev=0.0439], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0002,0.0003 0.0005,0.001,0.08,0.11,0.12 0.13,0.14,0.15,0.16), mean=0.0678, stddev=0.0492]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000177511, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01172, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.35,0.37 0.38,0.40,0.45,0.51,0.54 0.59,0.62,0.64,0.71), mean=0.458, stddev=0.0653], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.006 0.008,0.02,0.28,0.33,0.36 0.40,0.44,0.49,0.70), mean=0.227, stddev=0.141], bias-{mean,stddev}=-0.03009,0.04045, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.49e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.22 0.23,0.25,0.28,0.31,0.33 0.35,0.38,0.41,0.45), mean=0.28, stddev=0.042], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.37,0.39 0.40,0.42,0.44,0.47,0.49 0.51,0.52,0.53,0.55), mean=0.444, stddev=0.0365], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0448, stddev=0.00788], oderiv-count=1.04282e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32276.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.22 0.23,0.24,0.27,0.31,0.34 0.35,0.38,0.42,0.48), mean=0.28, stddev=0.0442], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.40,0.42 0.44,0.46,0.51,0.56,0.59 0.62,0.64,0.66,0.73), mean=0.512, stddev=0.0574]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000177511, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01765, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,1e-06,3e-06,2e-05 0.0006,0.16,0.42,0.59,0.67 0.72,0.79,0.84,1.0), mean=0.386, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.39,0.43 0.52,0.70,0.81,0.90,0.96 1.0,1.1,1.1,1.3), mean=0.788, stddev=0.164], bias-{mean,stddev}=0.003787,0.02908, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000177511, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.08561, w_fc-rms=0.03287, w_oc-rms=0.04752, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637657, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.43 0.44,0.45,0.48,0.50,0.55 0.72,0.79,0.82,0.86), mean=0.497, stddev=0.0797], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0232] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637657, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.45,0.47,0.48 0.49,0.50,0.51,0.55,0.59 0.68,0.79,0.82,0.87), mean=0.531, stddev=0.0672], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.17 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0246] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0331054, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.89,-0.86,-0.52 -0.27,-0.13,0.0009,0.16,0.30 0.57,0.88,0.89,0.92), mean=0.0175, stddev=0.306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.17,0.20,0.24 0.38,0.45,0.58,0.76,1.0 1.0,1.0,1.0,1.0), mean=0.612, stddev=0.219] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637657, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.39,0.39,0.41 0.42,0.43,0.46,0.50,0.50 0.51,0.55,0.58,0.74), mean=0.463, stddev=0.0402], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0202] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00637657, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.75,-0.68,-0.62,-0.31 -0.15,-0.07,0.0008,0.08,0.21 0.33,0.62,0.69,0.75), mean=0.0116, stddev=0.208], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.49,0.58 0.79,0.84,0.90,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.881, stddev=0.115] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=9.37799e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000216441, count-zeroing-boundaries=295692
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.282645
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000177511, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04023, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.39,0.43 0.46,0.54,0.88,1.2,1.3 1.3,1.4,1.4,1.4), mean=0.861, stddev=0.316], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0009,0.001,0.002 0.01,0.33,0.54,0.74,0.92 1.2,1.5,1.6,1.9), mean=0.544, stddev=0.353], bias-{mean,stddev}=0.01259,0.2643, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000177511, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01339, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.21,0.24,0.26 0.28,0.31,0.36,0.43,0.46 0.49,0.52,0.54,0.58), mean=0.366, stddev=0.0755], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.14 0.15,0.17,0.29,0.40,0.42 0.44,0.47,0.48,0.50), mean=0.285, stddev=0.11], bias-{mean,stddev}=0.002273,0.009147, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.08e+05, self-repaired-proportion=0.0025223, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.01,0.02,0.03 0.04,0.06,0.08,0.10,0.12 0.13,0.14,0.15,0.18), mean=0.0788, stddev=0.0304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.15,0.20 0.25,0.38,0.51,0.62,0.66 0.70,0.73,0.75,0.84), mean=0.49, stddev=0.148], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.09,0.09,0.10 0.10,0.11,0.13,0.16,0.19 0.22,0.27,0.29,0.37), mean=0.14, stddev=0.0418], oderiv-count=1.04026e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30032.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.01,0.02,0.03 0.04,0.05,0.08,0.10,0.12 0.13,0.14,0.15,0.19), mean=0.0782, stddev=0.0303], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.06,0.07,0.08 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.17,0.18), mean=0.119, stddev=0.024]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000177511, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008709, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.28,0.29 0.30,0.31,0.33,0.37,0.40 0.42,0.45,0.46,0.53), mean=0.341, stddev=0.0431], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.12,0.13,0.14 0.15,0.16,0.19,0.23,0.25 0.27,0.30,0.32,0.37), mean=0.193, stddev=0.0448], bias-{mean,stddev}=-0.02408,0.02026, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.57e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.21,0.22 0.22,0.23,0.26,0.29,0.30 0.32,0.33,0.34,0.40), mean=0.262, stddev=0.0309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.38,0.39 0.40,0.41,0.44,0.46,0.47 0.48,0.49,0.49,0.51), mean=0.435, stddev=0.0274], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0363, stddev=0.00304], oderiv-count=1.03965e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27788.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.21 0.22,0.24,0.26,0.29,0.31 0.32,0.34,0.35,0.40), mean=0.265, stddev=0.0331], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.40,0.42 0.44,0.46,0.50,0.56,0.59 0.62,0.66,0.67,0.89), mean=0.507, stddev=0.0662]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000177511, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01471, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-06,4e-06,1e-05 4e-05,0.0008,0.33,0.53,0.59 0.64,0.68,0.70,0.92), mean=0.29, stddev=0.238], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.31,0.32,0.38 0.47,0.60,0.66,0.74,0.78 0.83,0.96,1.0,1.4), mean=0.657, stddev=0.134], bias-{mean,stddev}=0.006675,0.03565, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000177511, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05537, w_fc-rms=0.01834, w_oc-rms=0.0393, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643199, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.45,0.46 0.46,0.47,0.50,0.51,0.57 0.61,0.69,0.73,0.81), mean=0.507, stddev=0.0531], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0182] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643199, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.45,0.46,0.48 0.49,0.50,0.50,0.55,0.59 0.63,0.68,0.70,0.77), mean=0.525, stddev=0.049], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0212] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00993627, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.84,-0.77,-0.47 -0.27,-0.11,0.0006,0.14,0.33 0.59,0.73,0.77,0.84), mean=0.0126, stddev=0.279], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.25,0.28,0.39 0.45,0.53,0.65,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.714, stddev=0.227] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00643199, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.45 0.46,0.47,0.50,0.50,0.52 0.54,0.56,0.58,0.65), mean=0.492, stddev=0.0274], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.019] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00643199, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.68,-0.59,-0.46,-0.29 -0.16,-0.07,0.0002,0.09,0.19 0.37,0.46,0.53,0.61), mean=0.00832, stddev=0.179], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.59,0.62,0.73 0.78,0.85,0.92,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.911, stddev=0.0946] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=5.20804e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=9.20355e-05, count-zeroing-boundaries=260769
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.282645
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000177511, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0391, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.50,0.53 0.57,0.61,0.87,1.1,1.2 1.2,1.2,1.3,1.3), mean=0.858, stddev=0.242], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.004,0.01,0.56,0.81,0.97 1.1,1.3,1.5,1.7), mean=0.488, stddev=0.399], bias-{mean,stddev}=0.002163,0.215, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000177511, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01288, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.27 0.28,0.30,0.34,0.40,0.44 0.49,0.52,0.53,0.58), mean=0.354, stddev=0.0641], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.16 0.17,0.19,0.27,0.38,0.41 0.43,0.44,0.45,0.49), mean=0.28, stddev=0.0892], bias-{mean,stddev}=0.0003444,0.005991, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.22e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.12,0.16), mean=0.0648, stddev=0.0268], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.15,0.19 0.24,0.32,0.50,0.60,0.64 0.66,0.70,0.70,0.77), mean=0.469, stddev=0.149], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.14,0.17,0.20 0.22,0.25,0.25,0.29), mean=0.149, stddev=0.0343], oderiv-count=963392
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25545.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.17), mean=0.0683, stddev=0.0272], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.08,0.09,0.11,0.12,0.14 0.15,0.15,0.16,0.17), mean=0.108, stddev=0.0222]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000177511, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008599, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.16,0.21 0.27,0.29,0.33,0.39,0.41 0.43,0.44,0.47,0.50), mean=0.334, stddev=0.0621], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.14,0.15,0.18,0.23,0.25 0.28,0.31,0.33,0.40), mean=0.191, stddev=0.0458], bias-{mean,stddev}=-0.01652,0.02553, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.74e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.20 0.23,0.25,0.28,0.31,0.32 0.33,0.34,0.35,0.43), mean=0.275, stddev=0.0422], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.36,0.37 0.39,0.40,0.43,0.46,0.47 0.48,0.50,0.50,0.53), mean=0.43, stddev=0.0332], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0297, stddev=0.00284], oderiv-count=943040
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23301.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.16,0.20 0.23,0.25,0.29,0.32,0.34 0.35,0.36,0.38,0.53), mean=0.284, stddev=0.0462], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.26,0.36 0.43,0.48,0.55,0.61,0.66 0.70,0.75,0.77,1.1), mean=0.545, stddev=0.104]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000177511, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02082, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.28,0.30 0.32,0.36,0.50,0.65,0.71 0.75,0.85,0.89,1.0), mean=0.509, stddev=0.149], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.61,0.66,0.68,0.75 0.78,0.82,0.89,1.1,1.1 1.2,1.4,1.4,1.8), mean=0.935, stddev=0.162], bias-{mean,stddev}=0.01323,0.01777, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000177511, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1001, w_fc-rms=0.0465, w_oc-rms=0.07524, count=1.24e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064989, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.61,0.63 0.65,0.68,0.73,0.78,0.81 0.83,0.85,0.87,0.89), mean=0.73, stddev=0.0597], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.12 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.22), mean=0.164, stddev=0.0246] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064989, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.51,0.57,0.60 0.62,0.65,0.70,0.75,0.79 0.82,0.85,0.88,0.89), mean=0.7, stddev=0.068], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.13,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.23), mean=0.168, stddev=0.025] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0333621, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.88,-0.81,-0.62 -0.46,-0.33,-0.005,0.31,0.47 0.62,0.82,0.86,0.90), mean=-0.00509, stddev=0.372], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.20,0.23 0.28,0.36,0.47,0.52,0.55 0.57,0.59,0.60,0.66), mean=0.441, stddev=0.101] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064989, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.50,0.53 0.56,0.59,0.64,0.68,0.71 0.74,0.77,0.81,0.88), mean=0.638, stddev=0.0618], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0186] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0064989, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.71,-0.64,-0.50 -0.37,-0.26,-0.005,0.24,0.36 0.52,0.66,0.69,0.75), mean=-0.00597, stddev=0.296], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.43,0.46 0.53,0.62,0.70,0.75,0.77 0.79,0.81,0.82,0.86), mean=0.678, stddev=0.0936] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221724
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.282645
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000177511, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09135, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.8,2.6,2.7 2.8,2.9,3.0,3.1), mean=1.98, stddev=0.633], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.89,0.99,1.1 1.1,1.2,1.4,1.6,1.9 2.1,2.2,2.3,2.3), mean=1.44, stddev=0.304], bias-{mean,stddev}=0.001349,0.7204, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000177511, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04426, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.61,0.62 0.64,0.66,0.70,0.75,0.78 0.82,0.87,0.94,2.1), mean=0.709, stddev=0.0844], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.5,2.6 2.7,2.8,2.8,2.9), mean=1.94, stddev=0.587], bias-{mean,stddev}=4.958e-09,0.02262, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0135], oderiv-count=615680
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/313.mdl exp/nnet3/tdnn_lstm1c_sp/314.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.99247 tdnn2.affine:3.91678 lstm1.W_all:3.07962 lstm1.lstm_nonlin:0.0639124 lstm1.W_rp:1.26722 tdnn3.affine:2.84919 tdnn4.affine:3.00436 lstm2.W_all:2.18793 lstm2.lstm_nonlin:0.0379581 lstm2.W_rp:0.892893 tdnn5.affine:2.42106 tdnn6.affine:2.51082 lstm3.W_all:2.28098 lstm3.lstm_nonlin:0.0578211 lstm3.W_rp:0.924265 output.affine:2.54703 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.4971 tdnn2.affine:10.622 lstm1.W_all:20.5678 lstm1.lstm_nonlin:2.35524 lstm1.W_rp:15.3959 tdnn3.affine:8.52898 tdnn4.affine:7.87635 lstm2.W_all:17.1835 lstm2.lstm_nonlin:1.60389 lstm2.W_rp:14.7898 tdnn5.affine:8.20252 tdnn6.affine:7.77611 lstm3.W_all:24.2265 lstm3.lstm_nonlin:3.04657 lstm3.W_rp:35.541 output.affine:32.7533 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.320071 tdnn2.affine:0.369758 lstm1.W_all:0.149674 lstm1.lstm_nonlin:0.0272922 lstm1.W_rp:0.0823125 tdnn3.affine:0.334111 tdnn4.affine:0.381713 lstm2.W_all:0.127216 lstm2.lstm_nonlin:0.0237824 lstm2.W_rp:0.0604204 tdnn5.affine:0.296159 tdnn6.affine:0.323645 lstm3.W_all:0.0941288 lstm3.lstm_nonlin:0.0190308 lstm3.W_rp:0.02601 output.affine:0.0777493 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:05:22 KST 2020, elapsed time 0 seconds
