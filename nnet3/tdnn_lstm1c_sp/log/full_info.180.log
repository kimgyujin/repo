# nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/180.mdl 
# Started at Thu Jul 30 11:12:12 KST 2020
#
nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/180.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000170045, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02882, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.01,0.02 0.03,0.27,0.50,0.60,0.66 0.71,0.79,0.84,1.0), mean=0.447, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.14 0.16,0.20,0.56,0.79,1.0 1.3,1.4,1.4,1.6), mean=0.561, stddev=0.343], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.08,0.28,0.74,1.2 1.5,1.7,1.9,2.3), mean=0.455, stddev=0.474], bias-{mean,stddev}=0.004708,0.05131, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.97e+05, self-repaired-proportion=0.143681, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,3e-06,1e-05,5e-05 0.0001,0.001,0.06,0.08,0.10 0.11,0.13,0.14,0.17), mean=0.0545, stddev=0.037], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.002,0.006,0.02 0.04,0.12,0.48,0.63,0.73 0.80,0.87,0.91,0.96), mean=0.43, stddev=0.245], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.06,0.24,0.35,0.44,0.50 0.58,0.65,0.76,1.4), mean=0.336, stddev=0.168], oderiv-count=1.16365e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=42304.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-06,3e-06,2e-05 7e-05,0.002,0.06,0.08,0.10 0.11,0.13,0.14,0.17), mean=0.0526, stddev=0.0362], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,4e-05,8e-05,0.0003 0.0006,0.008,0.09,0.10,0.11 0.12,0.13,0.13,0.14), mean=0.0732, stddev=0.0406]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000170045, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01151, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.38 0.39,0.41,0.45,0.49,0.51 0.54,0.57,0.59,0.72), mean=0.452, stddev=0.0508], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.01 0.02,0.13,0.27,0.31,0.33 0.35,0.38,0.40,0.68), mean=0.237, stddev=0.113], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.08,0.10,0.22,0.50,0.79 1.0,1.2,1.4,2.0), mean=0.333, stddev=0.309], bias-{mean,stddev}=-0.003083,0.02764, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.21e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.26 0.27,0.28,0.31,0.33,0.35 0.37,0.39,0.40,0.55), mean=0.309, stddev=0.035], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.40,0.41 0.42,0.44,0.46,0.49,0.50 0.51,0.52,0.52,0.54), mean=0.461, stddev=0.029], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.07), mean=0.0452, stddev=0.00875], oderiv-count=1.1783e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=41382.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.25 0.26,0.27,0.30,0.33,0.35 0.37,0.40,0.42,0.57), mean=0.307, stddev=0.039], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.48,0.53,0.58,0.61 0.64,0.66,0.71,0.85), mean=0.535, stddev=0.0601]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000170045, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01587, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.0002,0.0009,0.005 0.03,0.17,0.35,0.52,0.62 0.69,0.76,0.81,1.0), mean=0.35, stddev=0.203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.32,0.34,0.39 0.44,0.63,0.74,0.82,0.86 0.90,0.95,0.99,1.4), mean=0.708, stddev=0.152], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,4e-07,4e-07,5e-07 1e-06,0.16,0.35,0.72,1.2 1.7,2.1,2.4,3.3), mean=0.504, stddev=0.52], bias-{mean,stddev}=0.0001513,0.02285, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000170045, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02446, w_fc-rms=0.03063, w_oc-rms=0.03281, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627025, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.45 0.46,0.47,0.49,0.52,0.54 0.61,0.70,0.71,0.75), mean=0.501, stddev=0.05], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0149] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627025, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.39,0.40,0.42 0.43,0.46,0.49,0.51,0.56 0.65,0.72,0.74,0.79), mean=0.497, stddev=0.0663], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0159] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00627025, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.83,-0.78,-0.55 -0.37,-0.20,0.004,0.21,0.34 0.46,0.65,0.77,0.85), mean=-0.00439, stddev=0.297], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.28,0.37 0.42,0.48,0.60,0.75,0.99 1.0,1.0,1.0,1.0), mean=0.628, stddev=0.188] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627025, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.43 0.43,0.45,0.47,0.50,0.51 0.53,0.56,0.57,0.62), mean=0.474, stddev=0.0332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0165] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00818127, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.83,-0.73,-0.45 -0.30,-0.16,0.004,0.16,0.26 0.40,0.58,0.74,0.87), mean=-0.00488, stddev=0.262], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.27,0.31,0.49 0.66,0.75,0.84,0.91,0.99 1.0,1.0,1.0,1.0), mean=0.818, stddev=0.145] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.37365e-06, count-zeroing-boundaries=296415
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0465565
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000170045, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03148, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.19 0.22,0.25,0.44,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.62, stddev=0.362], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.005,0.01,0.02 0.05,0.29,0.45,0.59,0.71 0.84,1.0,1.2,1.4), mean=0.447, stddev=0.24], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-07,2e-07,2e-07 2e-07,4e-07,2e-06,0.05,1.5 1.9,2.3,2.5,3.3), mean=0.278, stddev=0.662], bias-{mean,stddev}=-0.0004505,0.216, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000170045, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01186, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.20,0.22 0.23,0.26,0.32,0.38,0.42 0.45,0.48,0.49,0.65), mean=0.323, stddev=0.0728], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.09,0.19,0.38,0.42 0.44,0.47,0.49,0.53), mean=0.232, stddev=0.139], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,8e-08,1e-07 1e-07,3e-07,4e-05,0.23,0.60 0.89,1.1,1.2,1.4), mean=0.143, stddev=0.299], bias-{mean,stddev}=0.005663,0.02173, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.91e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.05 0.07,0.08,0.11,0.13,0.15 0.16,0.17,0.18,0.19), mean=0.107, stddev=0.0322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.19,0.22,0.27 0.31,0.38,0.50,0.61,0.67 0.70,0.73,0.75,0.80), mean=0.498, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.08,0.09,0.10,0.12,0.13 0.14,0.16,0.17,0.31), mean=0.103, stddev=0.0221], oderiv-count=1.03539e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38617.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.05 0.06,0.07,0.11,0.13,0.14 0.16,0.17,0.18,0.19), mean=0.105, stddev=0.0328], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.09,0.10,0.12 0.13,0.14,0.16,0.18,0.19 0.21,0.22,0.23,0.25), mean=0.164, stddev=0.0259]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000170045, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008556, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.28 0.30,0.31,0.33,0.36,0.37 0.40,0.42,0.43,0.54), mean=0.336, stddev=0.0352], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.14 0.15,0.16,0.19,0.22,0.23 0.25,0.27,0.28,0.33), mean=0.192, stddev=0.0332], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.11,0.18,0.38,0.58 0.75,0.89,0.99,1.1), mean=0.262, stddev=0.213], bias-{mean,stddev}=-0.01111,0.01535, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.87e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.23,0.24,0.26,0.29,0.30 0.32,0.33,0.34,0.40), mean=0.265, stddev=0.0328], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.38,0.39,0.39 0.40,0.41,0.44,0.46,0.49 0.50,0.51,0.52,0.54), mean=0.44, stddev=0.0319], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0358, stddev=0.00291], oderiv-count=1.01382e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35853.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.24,0.26,0.29,0.31 0.32,0.34,0.35,0.40), mean=0.265, stddev=0.0343], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.41,0.42,0.43 0.45,0.46,0.50,0.54,0.58 0.61,0.65,0.69,0.83), mean=0.508, stddev=0.0568]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000170045, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01309, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,9e-07,2e-06,4e-06 2e-05,0.0003,0.27,0.47,0.55 0.59,0.64,0.66,1.1), mean=0.253, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.24,0.26,0.32 0.39,0.53,0.61,0.65,0.69 0.72,0.79,0.83,1.4), mean=0.584, stddev=0.124], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,4e-07 2e-05,0.09,0.23,0.54,0.99 1.4,1.8,2.0,4.1), mean=0.384, stddev=0.457], bias-{mean,stddev}=-0.003835,0.0393, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000170045, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.009279, w_fc-rms=0.01039, w_oc-rms=0.01497, count=1.34e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632437, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.44,0.45 0.45,0.47,0.50,0.51,0.54 0.58,0.61,0.63,0.70), mean=0.498, stddev=0.0392], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0143] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632437, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.38,0.40 0.42,0.44,0.49,0.50,0.50 0.53,0.56,0.57,0.77), mean=0.476, stddev=0.043], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.23,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0116] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00810115, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.67,-0.57,-0.37 -0.22,-0.12,0.0005,0.10,0.23 0.35,0.56,0.67,0.84), mean=-0.00157, stddev=0.214], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.37,0.41,0.50 0.54,0.58,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.751, stddev=0.2] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632437, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.43 0.44,0.45,0.50,0.50,0.51 0.55,0.57,0.58,0.63), mean=0.485, stddev=0.035], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0153] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00632437, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.59,-0.43,-0.28 -0.18,-0.09,0.0002,0.08,0.18 0.27,0.43,0.56,0.69), mean=-0.000142, stddev=0.176], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.51,0.61,0.72 0.78,0.83,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.901, stddev=0.103] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.825e-06, count-zeroing-boundaries=261438
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0465565
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000170045, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02871, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.31,0.32,0.35 0.37,0.39,0.53,0.85,0.89 0.94,0.95,0.97,1.0), mean=0.616, stddev=0.22], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0006,0.0007,0.001 0.002,0.005,0.46,0.61,0.70 0.77,0.86,0.92,0.99), mean=0.363, stddev=0.288], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-07,1e-07,2e-07 2e-07,3e-07,2e-05,0.74,1.4 1.7,1.9,2.1,2.4), mean=0.299, stddev=0.582], bias-{mean,stddev}=0.003961,0.1383, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000170045, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01053, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.21,0.23,0.27,0.33,0.39 0.43,0.46,0.48,0.50), mean=0.286, stddev=0.0684], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.11,0.12 0.13,0.14,0.21,0.31,0.34 0.36,0.37,0.39,0.44), mean=0.225, stddev=0.0834], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,8e-08,1e-07 1e-07,3e-07,0.001,0.26,0.58 0.78,0.91,0.96,1.1), mean=0.143, stddev=0.257], bias-{mean,stddev}=0.00435,0.01153, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.36e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.07,0.09,0.10 0.10,0.11,0.12,0.13), mean=0.0658, stddev=0.0221], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.17,0.19,0.22 0.26,0.34,0.46,0.57,0.60 0.63,0.67,0.68,0.75), mean=0.449, stddev=0.126], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.14,0.16 0.19,0.21,0.22,0.24), mean=0.128, stddev=0.0277], oderiv-count=1.02477e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33088.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.07,0.08,0.10 0.10,0.11,0.12,0.12), mean=0.0662, stddev=0.0222], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.09,0.10,0.11,0.12,0.13 0.14,0.14,0.15,0.17), mean=0.11, stddev=0.017]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000170045, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007978, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.23,0.24 0.26,0.27,0.31,0.35,0.38 0.39,0.40,0.41,0.48), mean=0.312, stddev=0.0464], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.14,0.15,0.17,0.20,0.23 0.25,0.28,0.31,0.35), mean=0.178, stddev=0.0389], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.08,0.14,0.35,0.59 0.75,0.85,0.90,1.0), mean=0.231, stddev=0.215], bias-{mean,stddev}=-0.01075,0.02005, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.68e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.22,0.23,0.26,0.29,0.30 0.32,0.33,0.34,0.43), mean=0.262, stddev=0.0342], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.35,0.36,0.37 0.39,0.40,0.42,0.45,0.46 0.47,0.48,0.49,0.52), mean=0.422, stddev=0.0292], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0293, stddev=0.00265], oderiv-count=953920
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30323.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.23,0.26,0.29,0.30 0.31,0.33,0.35,0.44), mean=0.261, stddev=0.0353], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.33,0.37,0.41 0.43,0.45,0.51,0.56,0.59 0.62,0.66,0.68,0.80), mean=0.508, stddev=0.0682]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000170045, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01886, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.19,0.21,0.26 0.29,0.34,0.42,0.61,0.70 0.75,0.79,0.81,1.3), mean=0.457, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.58,0.59,0.61 0.63,0.64,0.71,0.98,1.3 1.4,1.5,1.5,1.6), mean=0.821, stddev=0.258], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,3e-05,6e-05,0.001 0.09,0.12,0.26,0.85,1.7 2.0,2.3,2.5,5.1), mean=0.546, stddev=0.665], bias-{mean,stddev}=0.02447,0.02607, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000170045, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04455, w_fc-rms=0.04802, w_oc-rms=0.04961, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638971, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.55,0.56 0.57,0.60,0.65,0.70,0.71 0.73,0.75,0.76,0.79), mean=0.647, stddev=0.0527], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.16,0.17 0.18,0.19,0.20,0.20,0.21 0.21,0.21,0.22,0.24), mean=0.195, stddev=0.0124] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638971, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.47,0.48,0.49 0.51,0.54,0.58,0.63,0.69 0.73,0.77,0.78,0.85), mean=0.593, stddev=0.0686], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.15,0.16,0.17 0.18,0.19,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.202, stddev=0.0154] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0083191, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.72,-0.68,-0.52 -0.35,-0.22,-0.01,0.21,0.32 0.49,0.67,0.72,0.83), mean=-0.00733, stddev=0.289], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.26,0.29,0.32 0.35,0.39,0.44,0.48,0.49 0.51,0.53,0.54,0.63), mean=0.433, stddev=0.058] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638971, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.57,0.58 0.59,0.62,0.66,0.70,0.71 0.73,0.76,0.77,0.86), mean=0.656, stddev=0.0478], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.16 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.22), mean=0.181, stddev=0.0133] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00670872, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.77,-0.70,-0.49 -0.31,-0.21,-0.007,0.18,0.32 0.47,0.70,0.76,0.86), mean=-0.0077, stddev=0.283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.29,0.31,0.34 0.43,0.54,0.62,0.66,0.69 0.70,0.71,0.72,0.73), mean=0.588, stddev=0.103] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=222340
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0465565
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000170045, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07328, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.0,1.0,1.1 1.1,1.2,1.6,2.0,2.1 2.2,2.2,2.3,2.3), mean=1.62, stddev=0.403], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.66,0.80,0.96 1.0,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.17, stddev=0.153], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,9e-06,1e-05,2e-05 5e-05,0.0002,0.13,2.7,3.1 3.4,3.8,4.2,5.0), mean=0.992, stddev=1.34], bias-{mean,stddev}=0.01338,0.3148, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000170045, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03853, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.50,0.51,0.53 0.54,0.56,0.60,0.65,0.69 0.72,0.77,0.82,2.3), mean=0.615, stddev=0.0912], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.7,2.1,2.2 2.3,2.3,2.4,2.4), mean=1.72, stddev=0.396], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,7e-06,9e-06,1e-05 3e-05,0.0001,0.05,2.8,3.5 3.7,4.1,4.2,5.3), mean=1, stddev=1.45], bias-{mean,stddev}=5.142e-09,0.03318, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0167, stddev=0.0139], oderiv-count=582400
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:12:12 KST 2020, elapsed time 0 seconds
