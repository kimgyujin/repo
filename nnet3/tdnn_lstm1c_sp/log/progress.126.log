# nnet3-info exp/nnet3/tdnn_lstm1c_sp/126.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/125.mdl exp/nnet3/tdnn_lstm1c_sp/126.mdl 
# Started at Thu Jul 30 10:50:54 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/126.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000201811, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02999, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.009,0.01,0.02 0.03,0.40,0.52,0.62,0.66 0.72,0.79,0.83,1.1), mean=0.473, stddev=0.215], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.17,0.21,0.58,0.80,1.2 1.4,1.5,1.5,1.6), mean=0.582, stddev=0.359], bias-{mean,stddev}=0.005954,0.05742, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.11e+06, self-repaired-proportion=0.132181, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-07,4e-06,7e-06,4e-05 0.0001,0.01,0.06,0.09,0.10 0.12,0.14,0.14,0.19), mean=0.0598, stddev=0.0378], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.002,0.003,0.01 0.04,0.17,0.48,0.64,0.73 0.81,0.88,0.90,0.97), mean=0.446, stddev=0.24], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.08,0.28,0.37,0.46,0.52 0.58,0.69,0.81,1.6), mean=0.36, stddev=0.169], oderiv-count=1.12768e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40152.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,9e-07,2e-06,1e-05 0.0001,0.02,0.06,0.09,0.10 0.12,0.13,0.15,0.24), mean=0.0589, stddev=0.0382], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,4e-05,7e-05,0.0002 0.001,0.05,0.10,0.11,0.12 0.13,0.13,0.13,0.16), mean=0.0808, stddev=0.0413]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000201811, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01221, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.40 0.41,0.44,0.48,0.52,0.54 0.57,0.60,0.61,0.69), mean=0.479, stddev=0.0531], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.007,0.01 0.02,0.23,0.29,0.32,0.35 0.37,0.39,0.41,0.79), mean=0.255, stddev=0.112], bias-{mean,stddev}=-0.0006663,0.02772, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.29,0.31,0.34,0.37,0.39 0.41,0.45,0.47,0.54), mean=0.341, stddev=0.0408], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.41 0.42,0.44,0.46,0.48,0.49 0.51,0.52,0.53,0.56), mean=0.461, stddev=0.0276], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0434, stddev=0.00873], oderiv-count=1.12134e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39313.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.26,0.28 0.29,0.31,0.34,0.37,0.40 0.42,0.46,0.47,0.57), mean=0.343, stddev=0.0447], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.47,0.48,0.50 0.51,0.54,0.59,0.65,0.69 0.73,0.77,0.79,0.87), mean=0.597, stddev=0.0705]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000201811, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01695, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.001,0.003,0.02 0.08,0.21,0.37,0.55,0.66 0.72,0.82,0.88,1.1), mean=0.379, stddev=0.207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.37,0.41,0.45 0.50,0.66,0.79,0.86,0.91 0.95,1.0,1.0,1.2), mean=0.758, stddev=0.15], bias-{mean,stddev}=-0.001996,0.02212, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000201811, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02143, w_fc-rms=0.03331, w_oc-rms=0.04787, count=1.44e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633517, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.43,0.44 0.45,0.46,0.49,0.52,0.56 0.59,0.66,0.67,0.71), mean=0.497, stddev=0.0486], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0146] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633517, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.38,0.40 0.42,0.44,0.48,0.53,0.58 0.66,0.74,0.80,0.85), mean=0.496, stddev=0.0795], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.17,0.19 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0195] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00831771, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.78,-0.69,-0.50 -0.37,-0.19,-0.01,0.19,0.33 0.58,0.74,0.79,0.83), mean=-0.00363, stddev=0.294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.29,0.30,0.37 0.42,0.48,0.59,0.73,0.92 0.99,1.0,1.0,1.0), mean=0.616, stddev=0.176] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633517, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.42 0.43,0.44,0.47,0.50,0.52 0.55,0.58,0.59,0.63), mean=0.476, stddev=0.0403], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0169] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0178005, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.82,-0.68,-0.47 -0.33,-0.17,-0.01,0.16,0.29 0.53,0.75,0.84,0.90), mean=-0.00199, stddev=0.282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.19,0.27,0.46 0.62,0.72,0.83,0.89,0.96 1.0,1.0,1.0,1.0), mean=0.795, stddev=0.157] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.94e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=291186
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000201811, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03071, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.19 0.20,0.24,0.44,0.98,1.1 1.1,1.1,1.2,1.2), mean=0.602, stddev=0.357], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.03,0.06 0.15,0.32,0.46,0.59,0.67 0.80,0.91,1.0,1.1), mean=0.452, stddev=0.202], bias-{mean,stddev}=-0.002414,0.04527, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000201811, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01242, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.21,0.22,0.23 0.25,0.28,0.33,0.40,0.44 0.48,0.50,0.52,0.68), mean=0.339, stddev=0.075], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.09,0.18,0.39,0.44 0.47,0.51,0.53,0.60), mean=0.24, stddev=0.15], bias-{mean,stddev}=-0.003418,0.0301, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.12e+05, self-repaired-proportion=0.00211004, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.03,0.05,0.06 0.07,0.09,0.12,0.15,0.17 0.19,0.20,0.20,0.24), mean=0.122, stddev=0.0384], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.16,0.21,0.26 0.30,0.37,0.51,0.61,0.65 0.67,0.70,0.71,0.75), mean=0.488, stddev=0.131], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.07,0.07,0.08,0.10,0.11 0.12,0.13,0.14,0.30), mean=0.0868, stddev=0.0196], oderiv-count=1.06342e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36794.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.03,0.04,0.06 0.07,0.09,0.12,0.15,0.17 0.19,0.21,0.21,0.25), mean=0.122, stddev=0.0393], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.10,0.12,0.15 0.16,0.17,0.19,0.22,0.24 0.25,0.27,0.29,0.34), mean=0.195, stddev=0.0365]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000201811, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009126, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.28,0.30 0.31,0.33,0.36,0.38,0.41 0.42,0.44,0.45,0.58), mean=0.358, stddev=0.04], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.14,0.15,0.16 0.16,0.18,0.20,0.23,0.25 0.27,0.28,0.29,0.36), mean=0.205, stddev=0.0349], bias-{mean,stddev}=-0.009543,0.01732, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.04e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.24,0.25,0.28,0.32,0.34 0.35,0.37,0.39,0.46), mean=0.288, stddev=0.038], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.49,0.51,0.51,0.53), mean=0.441, stddev=0.0318], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0324, stddev=0.0028], oderiv-count=1.02304e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34275, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.21,0.23 0.24,0.25,0.28,0.32,0.34 0.36,0.38,0.39,0.49), mean=0.288, stddev=0.0411], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.43,0.43,0.46 0.48,0.50,0.55,0.60,0.63 0.66,0.72,0.76,0.86), mean=0.552, stddev=0.0681]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000201811, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01336, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,8e-06,1e-05,3e-05 0.0001,0.002,0.28,0.47,0.55 0.61,0.65,0.67,1.1), mean=0.261, stddev=0.218], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.27,0.31 0.37,0.51,0.62,0.69,0.71 0.75,0.79,0.82,1.2), mean=0.595, stddev=0.13], bias-{mean,stddev}=-0.003392,0.02437, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000201811, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01325, w_fc-rms=0.01717, w_oc-rms=0.02171, count=1.31e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639246, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.45 0.46,0.47,0.50,0.50,0.53 0.56,0.59,0.61,0.64), mean=0.495, stddev=0.0321], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0156] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639246, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.42 0.44,0.45,0.50,0.50,0.51 0.54,0.59,0.64,0.70), mean=0.486, stddev=0.0401], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0122] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00812095, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.64,-0.52,-0.32 -0.21,-0.10,9e-05,0.11,0.23 0.35,0.50,0.57,0.69), mean=0.00528, stddev=0.198], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.45,0.47,0.51 0.55,0.58,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.747, stddev=0.193] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639246, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.42,0.44 0.45,0.46,0.50,0.50,0.52 0.54,0.57,0.59,0.62), mean=0.488, stddev=0.0325], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0163] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00639246, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.65,-0.50,-0.32 -0.21,-0.09,0.0002,0.11,0.23 0.31,0.47,0.56,0.74), mean=0.00574, stddev=0.196], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.45,0.57,0.71 0.77,0.82,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.889, stddev=0.108] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.7e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=256758
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000201811, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02818, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.34,0.35 0.37,0.39,0.54,0.84,0.87 0.93,0.95,0.96,0.99), mean=0.607, stddev=0.212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.001,0.002,0.002 0.004,0.01,0.45,0.60,0.67 0.75,0.82,0.87,0.95), mean=0.363, stddev=0.273], bias-{mean,stddev}=-0.008087,0.101, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000201811, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01151, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.21 0.23,0.25,0.29,0.36,0.43 0.48,0.52,0.53,0.63), mean=0.311, stddev=0.0814], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.13 0.14,0.16,0.23,0.34,0.37 0.39,0.41,0.44,0.51), mean=0.247, stddev=0.0882], bias-{mean,stddev}=0.001921,0.01662, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.62e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.03 0.04,0.05,0.08,0.10,0.11 0.12,0.14,0.15,0.16), mean=0.0772, stddev=0.0287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.16 0.23,0.30,0.43,0.53,0.58 0.61,0.64,0.65,0.69), mean=0.415, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.09,0.12,0.13 0.14,0.16,0.18,0.21), mean=0.1, stddev=0.0223], oderiv-count=944768
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31756, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.03 0.04,0.05,0.08,0.10,0.11 0.12,0.14,0.15,0.17), mean=0.0769, stddev=0.0289], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.09 0.11,0.12,0.14,0.16,0.17 0.18,0.19,0.20,0.23), mean=0.137, stddev=0.029]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000201811, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008685, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.28,0.30,0.33,0.38,0.41 0.42,0.43,0.45,0.49), mean=0.34, stddev=0.0473], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.13 0.15,0.16,0.19,0.22,0.25 0.27,0.31,0.33,0.40), mean=0.193, stddev=0.044], bias-{mean,stddev}=-0.01126,0.01479, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.68e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.24,0.26,0.29,0.31,0.33 0.34,0.36,0.37,0.45), mean=0.285, stddev=0.0368], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.35,0.37 0.38,0.39,0.42,0.45,0.47 0.48,0.49,0.50,0.53), mean=0.42, stddev=0.0346], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.027, stddev=0.00271], oderiv-count=1.0032e+06
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29236.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.22 0.24,0.26,0.29,0.32,0.34 0.35,0.37,0.39,0.42), mean=0.289, stddev=0.04], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.43,0.45 0.47,0.50,0.56,0.63,0.66 0.70,0.75,0.77,0.81), mean=0.566, stddev=0.077]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000201811, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01957, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.24 0.31,0.36,0.43,0.63,0.75 0.79,0.84,0.87,1.3), mean=0.47, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.59,0.60 0.62,0.65,0.73,1.1,1.4 1.5,1.5,1.5,1.7), mean=0.846, stddev=0.283], bias-{mean,stddev}=0.00727,0.02249, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000201811, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03173, w_fc-rms=0.04448, w_oc-rms=0.0624, count=1.19e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646169, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.45,0.46,0.48 0.50,0.52,0.58,0.64,0.67 0.69,0.71,0.72,0.81), mean=0.584, stddev=0.0662], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.20,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.204, stddev=0.0101] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00646169, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.49 0.50,0.53,0.59,0.64,0.68 0.72,0.74,0.76,0.88), mean=0.594, stddev=0.0681], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.17,0.17,0.18 0.19,0.19,0.20,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.202, stddev=0.014] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0115119, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.83,-0.74,-0.52 -0.34,-0.23,-0.02,0.21,0.35 0.47,0.76,0.81,0.89), mean=-0.00991, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.27,0.28,0.31 0.35,0.39,0.43,0.47,0.49 0.50,0.52,0.53,0.55), mean=0.425, stddev=0.0569] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00776516, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.55,0.57 0.60,0.62,0.67,0.70,0.73 0.75,0.77,0.78,0.95), mean=0.665, stddev=0.0543], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.14,0.15,0.16 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.181, stddev=0.0156] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0273626, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.89,-0.79,-0.53 -0.34,-0.21,-0.02,0.20,0.33 0.49,0.78,0.87,0.98), mean=-0.00883, stddev=0.309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.15,0.20,0.33 0.45,0.54,0.63,0.68,0.69 0.71,0.72,0.72,0.75), mean=0.594, stddev=0.118] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.46e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=218270
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000201811, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07038, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.6,1.9,2.0 2.0,2.1,2.1,2.2), mean=1.57, stddev=0.339], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.54,0.78,0.89 0.95,1.0,1.1,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.12, stddev=0.156], bias-{mean,stddev}=0.004718,0.08463, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000201811, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03986, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.50,0.52,0.54 0.56,0.58,0.63,0.69,0.72 0.76,0.80,0.84,2.0), mean=0.637, stddev=0.0866], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.3 1.4,1.4,1.8,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.8, stddev=0.346], bias-{mean,stddev}=5.397e-09,0.0229, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0171, stddev=0.0134], oderiv-count=569600
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/125.mdl exp/nnet3/tdnn_lstm1c_sp/126.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.72871 tdnn2.affine:7.75283 lstm1.W_all:6.42775 lstm1.lstm_nonlin:0.134476 lstm1.W_rp:2.65944 tdnn3.affine:4.85984 tdnn4.affine:5.57061 lstm2.W_all:4.34573 lstm2.lstm_nonlin:0.055625 lstm2.W_rp:1.78415 tdnn5.affine:3.94277 tdnn6.affine:4.61537 lstm3.W_all:5.9275 lstm3.lstm_nonlin:0.133688 lstm3.W_rp:2.34111 output.affine:5.16081 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.9185 tdnn2.affine:11.0159 lstm1.W_all:19.7357 lstm1.lstm_nonlin:1.41678 lstm1.W_rp:11.3155 tdnn3.affine:7.94272 tdnn4.affine:8.23205 lstm2.W_all:15.5708 lstm2.lstm_nonlin:0.69984 lstm2.W_rp:10.4908 tdnn5.affine:7.34258 tdnn6.affine:7.83392 lstm3.W_all:22.7753 lstm3.lstm_nonlin:1.89129 lstm3.W_rp:25.9154 output.affine:29.4973 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.648882 tdnn2.affine:0.702877 lstm1.W_all:0.325091 lstm1.lstm_nonlin:0.0954766 lstm1.W_rp:0.235295 tdnn3.affine:0.615639 tdnn4.affine:0.681153 lstm2.W_all:0.279177 lstm2.lstm_nonlin:0.0797406 lstm2.W_rp:0.169956 tdnn5.affine:0.540209 tdnn6.affine:0.59009 lstm3.W_all:0.25982 lstm3.lstm_nonlin:0.0703398 lstm3.W_rp:0.0903581 output.affine:0.174893 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:50:55 KST 2020, elapsed time 1 seconds
