# nnet3-info exp/nnet3/tdnn_lstm1c_sp/181.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/180.mdl exp/nnet3/tdnn_lstm1c_sp/181.mdl 
# Started at Thu Jul 30 11:12:39 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/181.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000169507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02886, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.009,0.01,0.02 0.04,0.27,0.50,0.60,0.67 0.72,0.77,0.83,1.0), mean=0.448, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.17,0.20,0.56,0.79,1.1 1.3,1.4,1.5,1.5), mean=0.561, stddev=0.345], bias-{mean,stddev}=0.005246,0.05192, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.12e+06, self-repaired-proportion=0.12279, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,7e-06,1e-05,4e-05 0.0001,0.003,0.06,0.08,0.10 0.11,0.13,0.14,0.17), mean=0.0542, stddev=0.0368], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.003,0.006,0.02 0.04,0.13,0.47,0.62,0.71 0.80,0.86,0.91,0.95), mean=0.426, stddev=0.242], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.06,0.25,0.37,0.47,0.53 0.58,0.71,0.78,1.2), mean=0.356, stddev=0.173], oderiv-count=1.16966e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36736.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,1e-06,5e-06,2e-05 6e-05,0.002,0.06,0.08,0.10 0.12,0.14,0.15,0.19), mean=0.0527, stddev=0.0375], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,5e-05,0.0001,0.0002 0.0006,0.01,0.09,0.11,0.11 0.12,0.13,0.13,0.15), mean=0.0735, stddev=0.0407]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000169507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01164, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.37,0.39 0.40,0.42,0.45,0.49,0.52 0.54,0.57,0.60,0.75), mean=0.457, stddev=0.0507], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.01 0.02,0.14,0.28,0.31,0.34 0.36,0.38,0.41,0.70), mean=0.239, stddev=0.114], bias-{mean,stddev}=-0.002643,0.02841, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.59e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.26 0.27,0.28,0.31,0.34,0.36 0.38,0.40,0.41,0.57), mean=0.313, stddev=0.0371], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.41,0.41 0.43,0.44,0.46,0.48,0.50 0.51,0.52,0.53,0.55), mean=0.461, stddev=0.029], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.05,0.05,0.06 0.07,0.07,0.08,0.08), mean=0.0469, stddev=0.00933], oderiv-count=1.20205e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35962.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.26 0.27,0.28,0.31,0.34,0.36 0.38,0.40,0.41,0.55), mean=0.311, stddev=0.0391], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.47,0.49,0.54,0.61,0.63 0.65,0.69,0.70,0.86), mean=0.55, stddev=0.064]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000169507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01593, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,0.0002,0.0008,0.004 0.03,0.17,0.35,0.52,0.62 0.69,0.77,0.81,1.0), mean=0.351, stddev=0.204], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.32,0.35,0.39 0.45,0.63,0.74,0.82,0.86 0.90,0.95,1.0,1.4), mean=0.71, stddev=0.153], bias-{mean,stddev}=0.0001116,0.02252, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000169507, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02463, w_fc-rms=0.03042, w_oc-rms=0.03328, count=1.48e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621747, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.44,0.44,0.45 0.46,0.47,0.49,0.52,0.55 0.60,0.70,0.72,0.75), mean=0.501, stddev=0.0503], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0149] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621747, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.39,0.40,0.42 0.43,0.46,0.49,0.52,0.56 0.65,0.72,0.74,0.79), mean=0.496, stddev=0.0659], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0158] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00621747, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.83,-0.79,-0.55 -0.35,-0.20,0.005,0.21,0.34 0.45,0.66,0.75,0.85), mean=-0.00289, stddev=0.295], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.27,0.37 0.43,0.48,0.60,0.75,0.99 1.0,1.0,1.0,1.0), mean=0.63, stddev=0.188] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00621747, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.43 0.43,0.45,0.47,0.50,0.51 0.53,0.56,0.57,0.62), mean=0.474, stddev=0.0332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0164] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00815252, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.84,-0.74,-0.45 -0.30,-0.16,0.002,0.16,0.27 0.39,0.58,0.72,0.87), mean=-0.00395, stddev=0.26], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.27,0.30,0.51 0.67,0.76,0.84,0.91,0.99 1.0,1.0,1.0,1.0), mean=0.82, stddev=0.144] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.00454e-05, count-zeroing-boundaries=298644
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0479339
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000169507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0316, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.19 0.22,0.26,0.44,1.0,1.1 1.1,1.2,1.2,1.2), mean=0.623, stddev=0.362], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.005,0.01,0.02 0.05,0.30,0.45,0.60,0.71 0.86,1.0,1.2,1.4), mean=0.449, stddev=0.242], bias-{mean,stddev}=-0.0003118,0.2157, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000169507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01195, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.23,0.26,0.32,0.39,0.42 0.45,0.48,0.50,0.66), mean=0.326, stddev=0.0732], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.08,0.09,0.19,0.38,0.42 0.45,0.47,0.48,0.53), mean=0.234, stddev=0.14], bias-{mean,stddev}=0.005203,0.02238, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.13e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.04,0.06 0.07,0.08,0.11,0.14,0.15 0.16,0.17,0.18,0.19), mean=0.109, stddev=0.0324], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.19,0.21,0.27 0.32,0.39,0.51,0.62,0.67 0.70,0.71,0.76,0.82), mean=0.502, stddev=0.131], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.08,0.09,0.10,0.12,0.13 0.14,0.15,0.16,0.35), mean=0.103, stddev=0.0231], oderiv-count=1.0377e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33639.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.05 0.06,0.08,0.11,0.14,0.15 0.16,0.17,0.18,0.20), mean=0.105, stddev=0.0336], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.11,0.13 0.14,0.15,0.17,0.19,0.20 0.21,0.23,0.24,0.29), mean=0.167, stddev=0.0269]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000169507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008641, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.27,0.29 0.30,0.31,0.34,0.36,0.38 0.40,0.42,0.44,0.53), mean=0.339, stddev=0.0353], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.14 0.15,0.16,0.19,0.22,0.24 0.25,0.27,0.29,0.34), mean=0.194, stddev=0.0335], bias-{mean,stddev}=-0.01159,0.0158, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.15e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.21 0.23,0.24,0.27,0.30,0.31 0.33,0.34,0.35,0.40), mean=0.27, stddev=0.0341], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.49,0.51,0.52,0.55), mean=0.439, stddev=0.0327], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05), mean=0.037, stddev=0.00323], oderiv-count=1.06528e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31317.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.21 0.23,0.24,0.27,0.30,0.32 0.33,0.34,0.36,0.43), mean=0.269, stddev=0.0355], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.41,0.42,0.44 0.46,0.48,0.52,0.56,0.59 0.63,0.67,0.70,0.81), mean=0.522, stddev=0.0601]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000169507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01316, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,1e-06,2e-06,4e-06 2e-05,0.0003,0.27,0.47,0.55 0.60,0.64,0.67,1.1), mean=0.254, stddev=0.219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.24,0.26,0.32 0.39,0.54,0.61,0.66,0.69 0.73,0.79,0.85,1.4), mean=0.587, stddev=0.124], bias-{mean,stddev}=-0.003982,0.03977, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000169507, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.009288, w_fc-rms=0.01024, w_oc-rms=0.01478, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.43,0.44,0.45 0.45,0.46,0.50,0.51,0.54 0.58,0.61,0.64,0.71), mean=0.497, stddev=0.0399], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0144] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.40 0.42,0.44,0.49,0.50,0.50 0.53,0.56,0.57,0.78), mean=0.476, stddev=0.0437], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0118] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00818244, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.68,-0.57,-0.37 -0.23,-0.13,0.0002,0.10,0.23 0.35,0.57,0.67,0.84), mean=-0.00176, stddev=0.216], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.35,0.40,0.50 0.54,0.58,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.75, stddev=0.202] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.43 0.44,0.45,0.50,0.50,0.51 0.54,0.57,0.58,0.63), mean=0.484, stddev=0.0354], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0154] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00626862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.58,-0.43,-0.28 -0.18,-0.09,-2e-05,0.08,0.19 0.27,0.44,0.55,0.69), mean=-0.000344, stddev=0.177], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.51,0.62,0.72 0.78,0.83,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.9, stddev=0.104] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.75e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=263442
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0479339
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000169507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02909, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.31,0.32,0.35 0.37,0.40,0.53,0.86,0.90 0.94,0.97,0.99,1.0), mean=0.625, stddev=0.223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0006,0.0007,0.001 0.002,0.005,0.47,0.61,0.71 0.78,0.90,0.93,1.0), mean=0.367, stddev=0.292], bias-{mean,stddev}=0.003731,0.1404, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000169507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01078, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.22,0.24,0.28,0.34,0.39 0.44,0.47,0.50,0.52), mean=0.293, stddev=0.068], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.12 0.13,0.15,0.21,0.32,0.35 0.36,0.39,0.39,0.44), mean=0.231, stddev=0.0854], bias-{mean,stddev}=0.00489,0.01165, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.09e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.05,0.07,0.09,0.10 0.11,0.11,0.12,0.14), mean=0.0697, stddev=0.0229], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.17,0.19,0.23 0.28,0.35,0.47,0.57,0.61 0.63,0.66,0.68,0.74), mean=0.457, stddev=0.123], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.15,0.17 0.19,0.21,0.22,0.28), mean=0.13, stddev=0.0284], oderiv-count=938496
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28994.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.04,0.05,0.07,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.071, stddev=0.0244], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.08,0.09 0.09,0.10,0.12,0.13,0.14 0.15,0.16,0.16,0.20), mean=0.118, stddev=0.0197]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000169507, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008167, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.24,0.25 0.27,0.28,0.31,0.37,0.39 0.40,0.41,0.42,0.52), mean=0.319, stddev=0.0457], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.13 0.14,0.15,0.18,0.21,0.23 0.25,0.29,0.32,0.36), mean=0.182, stddev=0.0401], bias-{mean,stddev}=-0.01075,0.01991, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.35e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.20,0.21 0.22,0.24,0.27,0.30,0.31 0.32,0.34,0.34,0.45), mean=0.27, stddev=0.0336], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.37 0.39,0.40,0.42,0.44,0.46 0.47,0.49,0.50,0.52), mean=0.423, stddev=0.029], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0296, stddev=0.00282], oderiv-count=912640
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26672.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.19,0.21 0.22,0.24,0.27,0.30,0.32 0.33,0.36,0.37,0.60), mean=0.275, stddev=0.041], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.32,0.38,0.42 0.45,0.47,0.54,0.59,0.62 0.65,0.71,0.73,1.1), mean=0.535, stddev=0.0796]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000169507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01898, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.19,0.21,0.26 0.29,0.34,0.42,0.61,0.70 0.75,0.80,0.82,1.3), mean=0.459, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.60,0.61 0.63,0.65,0.71,0.99,1.3 1.4,1.5,1.5,1.7), mean=0.826, stddev=0.259], bias-{mean,stddev}=0.02456,0.02635, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000169507, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04478, w_fc-rms=0.04798, w_oc-rms=0.04938, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633032, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.55,0.55,0.56 0.57,0.60,0.65,0.69,0.71 0.73,0.75,0.75,0.78), mean=0.648, stddev=0.0512], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.16,0.17 0.18,0.19,0.20,0.20,0.21 0.21,0.21,0.22,0.24), mean=0.195, stddev=0.0127] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633032, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.46,0.47,0.50 0.51,0.54,0.58,0.63,0.69 0.73,0.77,0.78,0.83), mean=0.592, stddev=0.0683], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.17 0.18,0.19,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.202, stddev=0.0155] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0101521, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.71,-0.69,-0.52 -0.36,-0.21,-0.01,0.21,0.34 0.47,0.66,0.70,0.83), mean=-0.00575, stddev=0.287], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.25,0.27,0.32 0.35,0.39,0.44,0.48,0.49 0.51,0.52,0.54,0.63), mean=0.431, stddev=0.0598] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00633032, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.56,0.58 0.59,0.62,0.66,0.69,0.71 0.73,0.76,0.77,0.86), mean=0.656, stddev=0.0471], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.16 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.22), mean=0.181, stddev=0.0134] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00719831, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.77,-0.69,-0.49 -0.33,-0.20,-0.01,0.19,0.31 0.45,0.68,0.75,0.86), mean=-0.00661, stddev=0.28], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.29,0.32,0.34 0.43,0.54,0.62,0.66,0.69 0.70,0.71,0.72,0.74), mean=0.589, stddev=0.102] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=224097
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0479339
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000169507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07343, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.97,1.0,1.0,1.1 1.1,1.2,1.6,2.0,2.1 2.2,2.2,2.3,2.3), mean=1.62, stddev=0.406], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.65,0.81,0.96 1.0,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.17, stddev=0.152], bias-{mean,stddev}=0.0133,0.3155, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000169507, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03844, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.49,0.51,0.53 0.54,0.56,0.60,0.65,0.68 0.71,0.77,0.82,2.3), mean=0.613, stddev=0.0906], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.7,2.1,2.2 2.3,2.3,2.4,2.4), mean=1.72, stddev=0.396], bias-{mean,stddev}=5e-09,0.03306, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0167, stddev=0.0139], oderiv-count=588160
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/180.mdl exp/nnet3/tdnn_lstm1c_sp/181.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.70589 tdnn2.affine:6.74788 lstm1.W_all:5.40248 lstm1.lstm_nonlin:0.0984814 lstm1.W_rp:2.20298 tdnn3.affine:4.26122 tdnn4.affine:4.8872 lstm2.W_all:3.74838 lstm2.lstm_nonlin:0.0468277 lstm2.W_rp:1.54871 tdnn5.affine:3.41439 tdnn6.affine:3.98559 lstm3.W_all:4.94588 lstm3.lstm_nonlin:0.114429 lstm3.W_rp:1.94544 output.affine:4.25178 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.4591 tdnn2.affine:10.5023 lstm1.W_all:18.5502 lstm1.lstm_nonlin:1.17157 lstm1.W_rp:12.1278 tdnn3.affine:7.62861 tdnn4.affine:7.79548 lstm2.W_all:15.4065 lstm2.lstm_nonlin:0.461535 lstm2.W_rp:10.9342 tdnn5.affine:6.87385 tdnn6.affine:7.37354 lstm3.W_all:22.1273 lstm3.lstm_nonlin:1.87295 lstm3.W_rp:27.4752 output.affine:28.4736 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.586 tdnn2.affine:0.649827 lstm1.W_all:0.292223 lstm1.lstm_nonlin:0.0844785 lstm1.W_rp:0.182266 tdnn3.affine:0.562926 tdnn4.affine:0.633179 lstm2.W_all:0.244504 lstm2.lstm_nonlin:0.100424 lstm2.W_rp:0.143548 tdnn5.affine:0.508808 tdnn6.affine:0.553222 lstm3.W_all:0.224898 lstm3.lstm_nonlin:0.0610745 lstm3.W_rp:0.0709511 output.affine:0.148996 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:12:39 KST 2020, elapsed time 0 seconds
