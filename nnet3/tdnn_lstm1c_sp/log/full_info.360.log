# nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/360.mdl 
# Started at Thu Jul 30 12:23:41 KST 2020
#
nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/360.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000132588, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03225, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.005,0.007 0.01,0.02,0.57,0.72,0.80 0.87,0.95,0.99,1.2), mean=0.468, stddev=0.305], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.22,0.67,0.91,1.2 1.4,1.4,1.5,1.5), mean=0.637, stddev=0.368], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.06,0.28,0.94,1.4 1.7,1.9,2.0,2.3), mean=0.497, stddev=0.542], bias-{mean,stddev}=-0.003796,0.06136, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.15e+05, self-repaired-proportion=0.205642, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-06,2e-05,3e-05,5e-05 7e-05,0.0002,0.05,0.09,0.11 0.13,0.14,0.16,0.20), mean=0.0485, stddev=0.0453], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.01,0.02,0.03 0.04,0.07,0.38,0.60,0.70 0.80,0.88,0.90,0.99), mean=0.358, stddev=0.263], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.009,0.01 0.02,0.03,0.33,0.46,0.54 0.66,0.75,0.80,1.6), mean=0.308, stddev=0.22], oderiv-count=1.12557e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35217.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,7e-06,1e-05,3e-05 6e-05,0.0002,0.04,0.09,0.11 0.13,0.14,0.16,0.20), mean=0.0464, stddev=0.0443], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,8e-05,0.0002,0.0002 0.0004,0.001,0.08,0.11,0.12 0.14,0.15,0.15,0.16), mean=0.0649, stddev=0.0498]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000132588, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01169, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.35,0.36 0.38,0.40,0.45,0.50,0.54 0.58,0.62,0.64,0.74), mean=0.457, stddev=0.0667], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.005,0.01,0.28,0.33,0.37 0.40,0.43,0.48,0.74), mean=0.223, stddev=0.146], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.08,0.18,0.53,0.86 1.0,1.2,1.3,2.1), mean=0.322, stddev=0.331], bias-{mean,stddev}=-0.0347,0.03983, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.6e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.21 0.22,0.23,0.27,0.30,0.32 0.34,0.37,0.38,0.47), mean=0.269, stddev=0.0428], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.35,0.37,0.38 0.40,0.41,0.44,0.47,0.49 0.50,0.52,0.53,0.56), mean=0.442, stddev=0.0364], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.06,0.06 0.07,0.07,0.08,0.09), mean=0.049, stddev=0.00917], oderiv-count=1.14899e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34437.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.23,0.27,0.30,0.33 0.34,0.37,0.39,0.50), mean=0.27, stddev=0.0449], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.40 0.42,0.44,0.49,0.54,0.57 0.60,0.63,0.64,0.72), mean=0.492, stddev=0.0579]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000132588, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01763, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,7e-07,2e-06,1e-05 0.0004,0.17,0.41,0.59,0.66 0.73,0.79,0.85,1.0), mean=0.386, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.36,0.37,0.42 0.50,0.71,0.81,0.90,0.96 1.0,1.1,1.2,1.3), mean=0.786, stddev=0.168], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,4e-07 7e-07,0.14,0.32,0.80,1.4 1.9,2.3,2.5,4.6), mean=0.535, stddev=0.6], bias-{mean,stddev}=0.002795,0.02779, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000132588, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.08686, w_fc-rms=0.02681, w_oc-rms=0.04738, count=1.5e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.48,0.50,0.55 0.71,0.77,0.80,0.85), mean=0.496, stddev=0.0763], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.19 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0212] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.45,0.46,0.47 0.48,0.49,0.50,0.53,0.57 0.65,0.74,0.79,0.84), mean=0.52, stddev=0.0606], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0206] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0169281, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.88,-0.85,-0.46 -0.25,-0.13,0.0007,0.15,0.30 0.59,0.84,0.88,0.90), mean=0.0171, stddev=0.299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.22,0.26 0.38,0.45,0.58,0.74,1.0 1.0,1.0,1.0,1.0), mean=0.611, stddev=0.215] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.56,0.58,0.69), mean=0.462, stddev=0.0409], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0198] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00638876, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.72,-0.67,-0.31 -0.16,-0.09,0.0005,0.10,0.22 0.39,0.62,0.72,0.80), mean=0.0117, stddev=0.224], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.42,0.55 0.74,0.81,0.89,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.862, stddev=0.129] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.52717e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=8.26126e-05, count-zeroing-boundaries=296565
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.206612
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000132588, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03986, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.42,0.45 0.50,0.55,0.87,1.1,1.2 1.3,1.3,1.4,1.4), mean=0.861, stddev=0.292], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0007,0.001,0.002 0.008,0.34,0.55,0.72,0.92 1.2,1.4,1.5,1.8), mean=0.544, stddev=0.342], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,2e-07 3e-07,5e-07,1e-06,1.0,1.9 2.2,2.5,2.7,3.2), mean=0.413, stddev=0.81], bias-{mean,stddev}=0.01349,0.2602, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000132588, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01292, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.22,0.25,0.26 0.28,0.30,0.35,0.40,0.44 0.48,0.51,0.52,0.58), mean=0.354, stddev=0.0668], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.15,0.17,0.28,0.38,0.41 0.43,0.44,0.46,0.49), mean=0.277, stddev=0.0991], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-09,6e-08,7e-08,9e-08 1e-07,2e-07,3e-05,0.39,0.72 0.93,1.1,1.1,1.3), mean=0.18, stddev=0.312], bias-{mean,stddev}=0.001396,0.008936, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.9e+05, self-repaired-proportion=0.00307431, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.01,0.02,0.02 0.03,0.05,0.08,0.10,0.12 0.13,0.15,0.16,0.18), mean=0.078, stddev=0.0321], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.11,0.15,0.17 0.23,0.35,0.48,0.59,0.64 0.67,0.71,0.73,0.82), mean=0.461, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.09,0.09,0.10 0.10,0.11,0.13,0.16,0.19 0.23,0.25,0.29,0.35), mean=0.138, stddev=0.0421], oderiv-count=988096
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32095.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.01,0.02,0.02 0.03,0.05,0.08,0.10,0.12 0.13,0.15,0.16,0.19), mean=0.0771, stddev=0.0315], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.05,0.06,0.07 0.09,0.10,0.12,0.14,0.15 0.16,0.17,0.18,0.20), mean=0.122, stddev=0.0263]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000132588, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008438, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.27,0.28 0.28,0.30,0.33,0.36,0.38 0.41,0.42,0.44,0.47), mean=0.331, stddev=0.0397], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.12,0.13,0.14 0.15,0.16,0.18,0.22,0.24 0.26,0.29,0.31,0.38), mean=0.188, stddev=0.0406], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.09,0.16,0.39,0.62 0.76,0.85,0.89,1.0), mean=0.252, stddev=0.218], bias-{mean,stddev}=-0.02685,0.01938, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.29e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.21,0.23,0.25,0.28,0.29 0.31,0.32,0.32,0.36), mean=0.254, stddev=0.0304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.37,0.38 0.39,0.40,0.43,0.45,0.46 0.47,0.48,0.49,0.50), mean=0.426, stddev=0.0279], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0364, stddev=0.00266], oderiv-count=1.01392e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29753, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.21 0.22,0.23,0.25,0.28,0.29 0.31,0.32,0.33,0.40), mean=0.255, stddev=0.0318], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.38,0.39,0.41 0.42,0.45,0.48,0.54,0.57 0.60,0.64,0.67,0.88), mean=0.493, stddev=0.0611]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000132588, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01445, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,6e-06,2e-05 5e-05,0.001,0.33,0.52,0.58 0.62,0.67,0.71,0.91), mean=0.285, stddev=0.233], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.30,0.35 0.44,0.60,0.66,0.73,0.78 0.81,0.89,0.95,1.3), mean=0.646, stddev=0.131], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,4e-07 0.0002,0.10,0.24,0.63,1.2 1.6,1.9,2.0,4.5), mean=0.423, stddev=0.506], bias-{mean,stddev}=0.005835,0.03265, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000132588, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05452, w_fc-rms=0.01599, w_oc-rms=0.04098, count=1.37e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644214, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.46 0.46,0.48,0.50,0.51,0.56 0.60,0.66,0.69,0.78), mean=0.505, stddev=0.0475], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0164] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644214, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.46,0.46,0.48 0.49,0.50,0.50,0.53,0.56 0.60,0.66,0.67,0.73), mean=0.518, stddev=0.0412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0177] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644214, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.80,-0.75,-0.44 -0.24,-0.09,0.001,0.12,0.32 0.55,0.67,0.71,0.80), mean=0.00955, stddev=0.257], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.27,0.36,0.41 0.47,0.54,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.719, stddev=0.219] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644214, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.46,0.47,0.50,0.50,0.51 0.53,0.56,0.58,0.69), mean=0.49, stddev=0.0281], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0186] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644214, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.72,-0.60,-0.51,-0.31 -0.16,-0.07,0.0005,0.09,0.20 0.38,0.48,0.54,0.61), mean=0.00717, stddev=0.185], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.57,0.59,0.69 0.76,0.83,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.899, stddev=0.103] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=1.15373e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.05833e-05, count-zeroing-boundaries=261580
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.206612
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000132588, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0382, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.50,0.53 0.56,0.61,0.84,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.84, stddev=0.23], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.002 0.004,0.01,0.56,0.81,0.93 1.1,1.3,1.4,1.5), mean=0.482, stddev=0.384], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-07,2e-07,2e-07 3e-07,4e-07,9e-06,1.3,1.7 2.0,2.1,2.3,2.8), mean=0.449, stddev=0.746], bias-{mean,stddev}=-0.0004775,0.2084, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000132588, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01224, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.24,0.26 0.27,0.29,0.33,0.38,0.43 0.46,0.49,0.50,0.57), mean=0.336, stddev=0.0606], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.17,0.19,0.25,0.36,0.39 0.40,0.42,0.43,0.47), mean=0.266, stddev=0.0841], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,8e-08,9e-08,1e-07 1e-07,3e-07,0.003,0.37,0.71 0.86,0.95,1.0,1.1), mean=0.183, stddev=0.289], bias-{mean,stddev}=0.0009196,0.006245, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.45e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.12,0.13,0.14), mean=0.0637, stddev=0.0282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.18 0.22,0.30,0.46,0.58,0.62 0.65,0.67,0.69,0.71), mean=0.441, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.10 0.11,0.12,0.13,0.16,0.19 0.21,0.22,0.23,0.26), mean=0.141, stddev=0.032], oderiv-count=988672
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27410.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.04,0.07,0.09,0.10 0.11,0.12,0.13,0.15), mean=0.0659, stddev=0.0285], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.07,0.09,0.11,0.13,0.14 0.15,0.16,0.16,0.17), mean=0.108, stddev=0.024]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000132588, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008406, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.16,0.22 0.26,0.29,0.33,0.38,0.40 0.41,0.43,0.44,0.48), mean=0.326, stddev=0.0609], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.13 0.14,0.15,0.18,0.22,0.25 0.28,0.31,0.33,0.40), mean=0.186, stddev=0.0455], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.06,0.08,0.14,0.39,0.64 0.77,0.86,0.90,0.99), mean=0.241, stddev=0.228], bias-{mean,stddev}=-0.01949,0.02421, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.71e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.19 0.21,0.23,0.27,0.30,0.31 0.32,0.34,0.36,0.41), mean=0.266, stddev=0.0425], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.37 0.38,0.39,0.42,0.45,0.46 0.47,0.48,0.50,0.52), mean=0.421, stddev=0.0321], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0303, stddev=0.00294], oderiv-count=952160
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25068.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.19 0.21,0.24,0.27,0.30,0.32 0.33,0.34,0.37,0.45), mean=0.269, stddev=0.0435], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.23,0.26,0.34 0.41,0.46,0.53,0.59,0.62 0.65,0.68,0.71,1.0), mean=0.521, stddev=0.0954]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000132588, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02071, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.28,0.29 0.31,0.35,0.49,0.65,0.71 0.77,0.86,0.90,0.98), mean=0.505, stddev=0.154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.61,0.63,0.72 0.77,0.81,0.88,1.0,1.1 1.3,1.4,1.5,1.8), mean=0.929, stddev=0.173], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,2e-06,0.0001 0.07,0.12,0.28,0.90,1.8 2.2,2.6,2.8,6.9), mean=0.589, stddev=0.738], bias-{mean,stddev}=0.01258,0.01638, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000132588, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.108, w_fc-rms=0.04442, w_oc-rms=0.07465, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650655, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.59,0.60,0.63 0.65,0.68,0.72,0.76,0.79 0.81,0.84,0.85,0.89), mean=0.721, stddev=0.0557], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.14,0.15,0.17,0.19,0.19 0.20,0.20,0.21,0.22), mean=0.168, stddev=0.0222] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650655, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.54,0.56,0.58 0.60,0.63,0.68,0.72,0.77 0.80,0.84,0.86,0.88), mean=0.681, stddev=0.0648], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.13 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.176, stddev=0.0234] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0256392, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.81,-0.75,-0.59 -0.44,-0.31,-0.009,0.30,0.42 0.59,0.78,0.85,0.92), mean=-0.00392, stddev=0.356], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.18,0.20,0.23 0.30,0.36,0.45,0.49,0.52 0.54,0.57,0.58,0.61), mean=0.428, stddev=0.088] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00650655, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.50,0.53 0.55,0.59,0.64,0.68,0.70 0.71,0.78,0.80,0.88), mean=0.634, stddev=0.0602], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.21,0.21), mean=0.176, stddev=0.018] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00650655, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.72,-0.66,-0.53 -0.39,-0.27,-0.01,0.25,0.36 0.54,0.70,0.75,0.82), mean=-0.00483, stddev=0.31], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.32,0.35,0.40 0.47,0.55,0.65,0.69,0.72 0.74,0.76,0.77,0.82), mean=0.623, stddev=0.0987] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=3.35906e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.74227e-06, count-zeroing-boundaries=222477
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.206612
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000132588, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.09018, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.1,1.1 1.2,1.3,1.7,2.6,2.7 2.8,2.8,2.9,3.1), mean=1.95, stddev=0.639], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.89,1.0,1.1 1.1,1.2,1.4,1.6,1.9 2.0,2.1,2.2,2.3), mean=1.43, stddev=0.28], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-07,9e-07,1e-06,1e-06 2e-06,1e-05,0.08,3.2,3.8 4.3,4.8,5.6,6.1), mean=1.19, stddev=1.68], bias-{mean,stddev}=-0.02115,0.6515, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000132588, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04311, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.61 0.62,0.64,0.68,0.72,0.75 0.79,0.84,0.92,2.1), mean=0.69, stddev=0.0819], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.1,1.1 1.2,1.3,1.7,2.5,2.6 2.7,2.7,2.8,2.9), mean=1.89, stddev=0.595], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,1e-06,1e-06 2e-06,6e-06,0.03,3.0,4.0 4.3,4.7,4.8,6.2), mean=1.11, stddev=1.64], bias-{mean,stddev}=5.411e-09,0.02134, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0168, stddev=0.0138], oderiv-count=613440
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:23:42 KST 2020, elapsed time 1 seconds
