# nnet3-info exp/nnet3/tdnn_lstm1c_sp/251.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/250.mdl exp/nnet3/tdnn_lstm1c_sp/251.mdl 
# Started at Thu Jul 30 11:40:17 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/251.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000264715, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03515, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.02,0.02 0.03,0.12,0.61,0.76,0.84 0.94,1.0,1.1,1.3), mean=0.532, stddev=0.295], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.17 0.19,0.23,0.66,0.94,1.3 1.6,1.7,1.8,1.9), mean=0.677, stddev=0.428], bias-{mean,stddev}=-0.0006345,0.06661, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.19e+05, self-repaired-proportion=0.195462, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,4e-06,1e-05,5e-05 0.0001,0.0006,0.07,0.10,0.12 0.14,0.16,0.18,0.23), mean=0.0624, stddev=0.0473], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.003,0.01 0.02,0.07,0.45,0.61,0.70 0.80,0.87,0.89,0.99), mean=0.396, stddev=0.255], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.05,0.16,0.27,0.35,0.41 0.47,0.59,0.63,1.5), mean=0.266, stddev=0.147], oderiv-count=1.19469e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=42284.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,6e-06,1e-05,3e-05 8e-05,0.0005,0.07,0.10,0.12 0.14,0.17,0.18,0.22), mean=0.0626, stddev=0.0473], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0002,0.0004 0.0009,0.004,0.11,0.13,0.15 0.15,0.16,0.17,0.19), mean=0.0892, stddev=0.055]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000264715, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01324, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.42 0.44,0.46,0.51,0.57,0.61 0.65,0.70,0.72,0.80), mean=0.518, stddev=0.0697], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.009,0.01 0.02,0.07,0.31,0.37,0.40 0.43,0.47,0.50,0.86), mean=0.266, stddev=0.142], bias-{mean,stddev}=-0.01905,0.0413, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.29 0.31,0.33,0.36,0.40,0.43 0.45,0.49,0.51,0.58), mean=0.364, stddev=0.0488], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.39,0.40 0.41,0.43,0.45,0.48,0.50 0.51,0.52,0.52,0.55), mean=0.452, stddev=0.0324], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.06), mean=0.0377, stddev=0.00716], oderiv-count=1.15389e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=41403.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.30 0.32,0.33,0.37,0.41,0.44 0.46,0.50,0.53,0.60), mean=0.372, stddev=0.0508], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.54,0.56 0.58,0.60,0.66,0.73,0.76 0.80,0.84,0.87,0.95), mean=0.667, stddev=0.074]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000264715, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0183, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,6e-06,2e-05,0.0001 0.002,0.16,0.41,0.62,0.72 0.79,0.85,0.90,1.2), mean=0.396, stddev=0.247], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.38,0.44 0.51,0.73,0.84,0.94,1.0 1.1,1.1,1.2,1.2), mean=0.815, stddev=0.179], bias-{mean,stddev}=-6.374e-05,0.02706, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000264715, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04401, w_fc-rms=0.02756, w_oc-rms=0.03997, count=1.49e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628545, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.65,0.78,0.80,0.84), mean=0.49, stddev=0.0725], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.0224] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628545, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.40,0.42,0.43 0.45,0.46,0.49,0.51,0.56 0.63,0.73,0.77,0.81), mean=0.501, stddev=0.0628], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.17,0.19 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.02] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0349503, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.90,-0.86,-0.53 -0.30,-0.16,0.002,0.19,0.32 0.51,0.84,0.88,0.90), mean=0.0129, stddev=0.299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.26 0.35,0.42,0.55,0.79,1.0 1.0,1.0,1.0,1.0), mean=0.591, stddev=0.223] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628545, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.38,0.40 0.41,0.42,0.45,0.50,0.50 0.50,0.53,0.56,0.61), mean=0.452, stddev=0.039], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.218, stddev=0.0217] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00628545, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.77,-0.64,-0.36 -0.20,-0.09,0.001,0.12,0.22 0.34,0.64,0.77,0.82), mean=0.00969, stddev=0.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.32,0.36,0.54 0.72,0.80,0.87,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.849, stddev=0.137] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=5.0378e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.69706e-05, count-zeroing-boundaries=297534
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.155372
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000264715, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03932, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.28,0.32 0.35,0.41,0.81,1.2,1.3 1.4,1.4,1.4,1.5), mean=0.809, stddev=0.386], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.002,0.003 0.01,0.29,0.52,0.72,0.85 1.2,1.5,1.7,2.0), mean=0.531, stddev=0.347], bias-{mean,stddev}=0.01317,0.276, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000264715, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01373, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.21,0.22,0.23 0.26,0.30,0.36,0.45,0.49 0.54,0.56,0.57,0.78), mean=0.373, stddev=0.0896], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.14,0.28,0.42,0.45 0.47,0.50,0.52,0.57), mean=0.282, stddev=0.135], bias-{mean,stddev}=0.004687,0.01555, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0.00302013, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.04,0.04,0.06 0.08,0.09,0.12,0.15,0.17 0.18,0.20,0.21,0.27), mean=0.121, stddev=0.0371], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.17,0.18,0.25 0.33,0.39,0.49,0.59,0.63 0.67,0.70,0.71,0.78), mean=0.483, stddev=0.123], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.07,0.08,0.09,0.10,0.11 0.13,0.14,0.17,0.26), mean=0.0911, stddev=0.0219], oderiv-count=1.0263e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38761.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.04,0.04,0.06 0.08,0.09,0.12,0.15,0.17 0.19,0.20,0.22,0.27), mean=0.123, stddev=0.0374], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.12,0.14,0.15 0.17,0.17,0.20,0.22,0.24 0.26,0.27,0.28,0.30), mean=0.198, stddev=0.0335]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000264715, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009827, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.31,0.32 0.33,0.35,0.38,0.42,0.45 0.47,0.50,0.52,0.63), mean=0.385, stddev=0.0472], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.13,0.14,0.15 0.17,0.18,0.21,0.26,0.28 0.31,0.33,0.35,0.43), mean=0.219, stddev=0.0467], bias-{mean,stddev}=-0.02122,0.01893, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.9e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.28,0.29,0.32,0.36,0.37 0.39,0.40,0.41,0.50), mean=0.323, stddev=0.0391], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.38,0.39 0.40,0.41,0.43,0.46,0.47 0.49,0.49,0.49,0.51), mean=0.434, stddev=0.0286], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.031, stddev=0.00235], oderiv-count=1.09597e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36119.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.27 0.28,0.30,0.33,0.37,0.38 0.40,0.41,0.42,0.50), mean=0.33, stddev=0.0403], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.51,0.52,0.54 0.56,0.57,0.62,0.69,0.73 0.76,0.80,0.86,1.0), mean=0.635, stddev=0.0718]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000264715, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0153, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,7e-07,1e-06,3e-06 1e-05,0.0003,0.34,0.56,0.63 0.67,0.74,0.76,1.1), mean=0.297, stddev=0.253], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.31,0.34,0.40 0.49,0.63,0.69,0.77,0.81 0.87,0.94,1.0,1.6), mean=0.684, stddev=0.139], bias-{mean,stddev}=-0.001234,0.05393, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000264715, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01956, w_fc-rms=0.01107, w_oc-rms=0.02602, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634096, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.43,0.45,0.50,0.51,0.57 0.62,0.67,0.71,0.81), mean=0.497, stddev=0.0603], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0187] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634096, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.41 0.43,0.45,0.50,0.50,0.53 0.56,0.61,0.65,0.76), mean=0.489, stddev=0.0481], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0166] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0100661, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.82,-0.71,-0.47 -0.32,-0.16,0.0002,0.15,0.35 0.53,0.77,0.79,0.88), mean=0.00668, stddev=0.283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.21,0.25,0.37 0.43,0.50,0.60,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.699, stddev=0.241] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00634096, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.40 0.42,0.43,0.49,0.50,0.51 0.54,0.57,0.59,0.75), mean=0.476, stddev=0.0451], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0199] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00634096, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.56,-0.49,-0.31 -0.20,-0.10,0.0003,0.10,0.24 0.37,0.55,0.63,0.73), mean=0.007, stddev=0.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.46,0.55,0.68 0.75,0.82,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.893, stddev=0.115] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=1.14334e-05, count-zeroing-boundaries=262389
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.155372
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000264715, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0379, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.42,0.45,0.50 0.53,0.56,0.81,1.1,1.1 1.2,1.2,1.3,1.3), mean=0.826, stddev=0.256], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0007,0.001 0.002,0.006,0.56,0.80,0.92 1.0,1.2,1.4,1.5), mean=0.473, stddev=0.387], bias-{mean,stddev}=-0.0009373,0.2051, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000264715, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01299, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.22,0.24,0.25 0.27,0.29,0.34,0.41,0.47 0.51,0.56,0.58,0.63), mean=0.354, stddev=0.0782], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.15 0.17,0.19,0.27,0.38,0.42 0.43,0.46,0.47,0.50), mean=0.28, stddev=0.0959], bias-{mean,stddev}=0.001575,0.008777, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.58e+05, self-repaired-proportion=0.00192308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.03,0.03,0.04 0.05,0.06,0.09,0.12,0.13 0.14,0.15,0.16,0.20), mean=0.0917, stddev=0.0307], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.17,0.20,0.23 0.28,0.34,0.46,0.55,0.60 0.62,0.65,0.67,0.71), mean=0.451, stddev=0.121], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.09,0.09,0.11,0.12 0.14,0.16,0.17,0.19), mean=0.0989, stddev=0.0194], oderiv-count=992896
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33477.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.03,0.03,0.04 0.05,0.07,0.09,0.12,0.14 0.15,0.16,0.16,0.21), mean=0.0944, stddev=0.0315], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.10,0.11 0.12,0.14,0.16,0.18,0.19 0.20,0.22,0.22,0.25), mean=0.159, stddev=0.0269]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000264715, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009709, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.24,0.28 0.30,0.33,0.38,0.43,0.46 0.48,0.50,0.51,0.59), mean=0.378, stddev=0.0629], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.14,0.15 0.16,0.17,0.20,0.25,0.29 0.32,0.35,0.38,0.47), mean=0.215, stddev=0.0523], bias-{mean,stddev}=-0.02278,0.02424, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.94e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.21,0.23,0.25 0.27,0.29,0.33,0.36,0.38 0.39,0.41,0.44,0.52), mean=0.326, stddev=0.044], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.37 0.38,0.39,0.41,0.44,0.45 0.46,0.47,0.48,0.51), mean=0.416, stddev=0.0273], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0256, stddev=0.00196], oderiv-count=998560
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30835.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.22,0.24,0.26 0.28,0.30,0.34,0.37,0.39 0.40,0.41,0.44,0.56), mean=0.335, stddev=0.0451], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.40,0.41,0.51 0.55,0.60,0.67,0.75,0.79 0.83,0.89,0.92,1.1), mean=0.669, stddev=0.104]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000264715, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02174, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.29,0.30 0.33,0.37,0.50,0.71,0.79 0.84,0.88,0.90,1.4), mean=0.528, stddev=0.168], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.62,0.66,0.72 0.75,0.78,0.86,1.1,1.4 1.5,1.6,1.7,2.1), mean=0.958, stddev=0.256], bias-{mean,stddev}=0.02153,0.0244, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000264715, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06973, w_fc-rms=0.04898, w_oc-rms=0.0505, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.006408, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.56,0.58,0.59 0.61,0.64,0.68,0.72,0.76 0.78,0.81,0.82,0.85), mean=0.685, stddev=0.0541], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.16,0.17,0.18,0.20,0.20 0.21,0.21,0.21,0.21), mean=0.181, stddev=0.0183] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.006408, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.48,0.51,0.53 0.55,0.58,0.63,0.68,0.73 0.76,0.82,0.84,0.86), mean=0.635, stddev=0.0692], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.15 0.16,0.18,0.19,0.20,0.21 0.21,0.21,0.21,0.22), mean=0.187, stddev=0.0198] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0201571, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.78,-0.75,-0.56 -0.38,-0.25,-0.02,0.26,0.39 0.53,0.75,0.78,0.90), mean=-0.00413, stddev=0.318], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.21,0.25 0.30,0.36,0.42,0.46,0.48 0.50,0.51,0.52,0.55), mean=0.406, stddev=0.0721] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.006408, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.51,0.52,0.54 0.56,0.59,0.62,0.65,0.68 0.70,0.74,0.74,0.85), mean=0.621, stddev=0.0474], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.16,0.17,0.19,0.20,0.20 0.20,0.20,0.20,0.21), mean=0.183, stddev=0.0158] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.006408, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.72,-0.65,-0.51 -0.33,-0.21,-0.006,0.21,0.30 0.48,0.65,0.70,0.85), mean=-0.00462, stddev=0.282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.31,0.34,0.40 0.48,0.56,0.65,0.69,0.71 0.72,0.74,0.75,0.76), mean=0.619, stddev=0.0954] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223108
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.155372
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000264715, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08122, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.1,1.1 1.2,1.2,1.6,2.3,2.4 2.5,2.6,2.6,2.7), mean=1.77, stddev=0.53], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.87,0.99,1.0 1.1,1.1,1.2,1.5,1.6 1.8,1.9,1.9,2.0), mean=1.29, stddev=0.22], bias-{mean,stddev}=-0.03974,0.4517, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000264715, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04322, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.58,0.59,0.61 0.62,0.64,0.68,0.73,0.77 0.80,0.85,0.91,2.4), mean=0.691, stddev=0.0909], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.5 2.6,2.6,2.7,2.8), mean=1.91, stddev=0.519], bias-{mean,stddev}=7.061e-09,0.029, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=593600
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/250.mdl exp/nnet3/tdnn_lstm1c_sp/251.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:5.66227 tdnn2.affine:5.58656 lstm1.W_all:4.66073 lstm1.lstm_nonlin:0.112924 lstm1.W_rp:1.83577 tdnn3.affine:3.63356 tdnn4.affine:4.16107 lstm2.W_all:3.24938 lstm2.lstm_nonlin:0.0590575 lstm2.W_rp:1.31034 tdnn5.affine:2.95734 tdnn6.affine:3.47365 lstm3.W_all:4.07203 lstm3.lstm_nonlin:0.104034 lstm3.W_rp:1.73037 output.affine:3.91413 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.9644 tdnn2.affine:11.9705 lstm1.W_all:21.3091 lstm1.lstm_nonlin:1.49434 lstm1.W_rp:15.1298 tdnn3.affine:8.75257 tdnn4.affine:8.87493 lstm2.W_all:17.962 lstm2.lstm_nonlin:0.784073 lstm2.W_rp:14.3234 tdnn5.affine:8.27507 tdnn6.affine:8.77713 lstm3.W_all:25.3268 lstm3.lstm_nonlin:2.25882 lstm3.W_rp:30.745 output.affine:31.9955 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.40562 tdnn2.affine:0.466335 lstm1.W_all:0.220119 lstm1.lstm_nonlin:0.0762207 lstm1.W_rp:0.121921 tdnn3.affine:0.416125 tdnn4.affine:0.46887 lstm2.W_all:0.18149 lstm2.lstm_nonlin:0.0774056 lstm2.W_rp:0.0921621 tdnn5.affine:0.358254 tdnn6.affine:0.395515 lstm3.W_all:0.161533 lstm3.lstm_nonlin:0.046863 lstm3.W_rp:0.0563769 output.affine:0.122875 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:40:18 KST 2020, elapsed time 1 seconds
