# nnet3-info exp/nnet3/tdnn_lstm1c_sp/127.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/126.mdl exp/nnet3/tdnn_lstm1c_sp/127.mdl 
# Started at Thu Jul 30 10:51:17 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/127.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000201172, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03006, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.01,0.02 0.03,0.41,0.53,0.61,0.66 0.73,0.79,0.85,1.1), mean=0.474, stddev=0.214], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.18,0.21,0.58,0.79,1.1 1.4,1.5,1.5,1.7), mean=0.583, stddev=0.36], bias-{mean,stddev}=0.002968,0.05921, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0.125721, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,9e-06,2e-05,5e-05 0.0002,0.01,0.06,0.09,0.10 0.11,0.13,0.16,0.25), mean=0.0585, stddev=0.0382], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.003,0.005,0.02 0.04,0.18,0.47,0.63,0.73 0.79,0.88,0.89,0.98), mean=0.44, stddev=0.238], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.07,0.28,0.37,0.47,0.52 0.56,0.67,0.77,1.5), mean=0.359, stddev=0.166], oderiv-count=1.18477e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=45709.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,1e-06,3e-06,2e-05 0.0001,0.02,0.06,0.09,0.10 0.11,0.14,0.16,0.26), mean=0.0589, stddev=0.0391], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,6e-05,7e-05,0.0002 0.0008,0.04,0.10,0.11,0.12 0.13,0.13,0.14,0.15), mean=0.0815, stddev=0.0418]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000201172, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01228, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.40 0.42,0.44,0.48,0.52,0.55 0.57,0.61,0.63,0.74), mean=0.482, stddev=0.0535], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.008,0.01 0.02,0.23,0.29,0.33,0.35 0.36,0.38,0.41,0.77), mean=0.256, stddev=0.113], bias-{mean,stddev}=-0.002232,0.02773, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.04e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.29,0.31,0.33,0.37,0.39 0.40,0.44,0.48,0.54), mean=0.341, stddev=0.0406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.40,0.40,0.41 0.42,0.44,0.46,0.48,0.50 0.51,0.53,0.53,0.58), mean=0.461, stddev=0.0288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0445, stddev=0.00874], oderiv-count=1.08141e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=44788, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.27,0.28 0.30,0.31,0.34,0.37,0.40 0.42,0.45,0.48,0.57), mean=0.344, stddev=0.0441], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.47,0.48,0.50 0.52,0.54,0.60,0.65,0.69 0.72,0.76,0.78,0.82), mean=0.6, stddev=0.0666]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000201172, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01695, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.001,0.003,0.02 0.08,0.20,0.37,0.55,0.65 0.72,0.81,0.88,1.1), mean=0.379, stddev=0.207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.37,0.41,0.45 0.51,0.66,0.79,0.86,0.91 0.95,1.0,1.0,1.2), mean=0.758, stddev=0.15], bias-{mean,stddev}=-0.001926,0.02202, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000201172, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02131, w_fc-rms=0.03324, w_oc-rms=0.04783, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627466, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.42,0.43,0.44 0.45,0.46,0.49,0.52,0.56 0.59,0.66,0.67,0.71), mean=0.497, stddev=0.0483], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0145] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627466, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.38,0.41 0.42,0.44,0.48,0.53,0.58 0.66,0.74,0.81,0.85), mean=0.496, stddev=0.0793], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.17,0.20 0.21,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0194] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00813735, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.78,-0.71,-0.51 -0.37,-0.18,-0.01,0.18,0.33 0.56,0.74,0.78,0.83), mean=-0.00289, stddev=0.293], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.29,0.30,0.36 0.42,0.47,0.60,0.73,0.92 0.99,1.0,1.0,1.0), mean=0.618, stddev=0.176] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627466, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.43,0.44,0.47,0.51,0.52 0.55,0.58,0.58,0.63), mean=0.476, stddev=0.0399], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0171] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0176846, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.82,-0.69,-0.46 -0.33,-0.16,-0.009,0.16,0.28 0.52,0.74,0.84,0.90), mean=-0.00197, stddev=0.282], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.20,0.27,0.45 0.63,0.72,0.83,0.89,0.96 1.0,1.0,1.0,1.0), mean=0.796, stddev=0.156] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=294477
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000201172, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03074, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.17,0.19 0.21,0.24,0.43,0.98,1.0 1.1,1.1,1.2,1.2), mean=0.603, stddev=0.358], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.03,0.06 0.15,0.31,0.46,0.59,0.68 0.79,0.91,0.96,1.1), mean=0.453, stddev=0.202], bias-{mean,stddev}=-0.002037,0.0431, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000201172, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01249, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.19,0.21,0.23 0.25,0.28,0.33,0.40,0.43 0.48,0.51,0.53,0.71), mean=0.34, stddev=0.0765], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.07 0.08,0.09,0.19,0.40,0.44 0.48,0.52,0.54,0.62), mean=0.241, stddev=0.152], bias-{mean,stddev}=-0.003539,0.03024, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.71e+05, self-repaired-proportion=0.00524038, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.03,0.05,0.06 0.07,0.09,0.12,0.16,0.17 0.18,0.19,0.21,0.26), mean=0.123, stddev=0.0383], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.16,0.21,0.27 0.30,0.37,0.50,0.61,0.65 0.68,0.70,0.71,0.76), mean=0.49, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.07,0.07,0.08,0.10,0.11 0.12,0.13,0.16,0.29), mean=0.0874, stddev=0.0202], oderiv-count=1.16954e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=42023.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.02,0.04,0.06 0.07,0.09,0.13,0.16,0.17 0.18,0.20,0.21,0.23), mean=0.124, stddev=0.0395], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.09,0.12,0.15 0.16,0.17,0.20,0.22,0.24 0.25,0.28,0.30,0.35), mean=0.199, stddev=0.0368]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000201172, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009156, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.28,0.29,0.30 0.31,0.33,0.36,0.39,0.40 0.42,0.44,0.45,0.59), mean=0.359, stddev=0.0397], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.14,0.15,0.16 0.16,0.18,0.20,0.24,0.25 0.27,0.28,0.29,0.37), mean=0.206, stddev=0.0353], bias-{mean,stddev}=-0.01084,0.01745, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.96e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.24,0.26,0.29,0.32,0.34 0.35,0.37,0.39,0.47), mean=0.289, stddev=0.0397], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.37,0.39 0.40,0.42,0.44,0.47,0.48 0.50,0.51,0.52,0.53), mean=0.442, stddev=0.0318], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0321, stddev=0.00285], oderiv-count=1.00755e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39258.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.22,0.23 0.24,0.26,0.29,0.32,0.34 0.37,0.38,0.40,0.46), mean=0.292, stddev=0.0407], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.45,0.47 0.49,0.50,0.55,0.61,0.64 0.66,0.71,0.79,0.90), mean=0.561, stddev=0.0679]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000201172, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01338, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,8e-06,1e-05,3e-05 0.0001,0.002,0.28,0.47,0.56 0.61,0.65,0.68,1.1), mean=0.262, stddev=0.219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.27,0.31 0.37,0.52,0.63,0.69,0.72 0.75,0.78,0.82,1.2), mean=0.596, stddev=0.129], bias-{mean,stddev}=-0.003473,0.02472, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000201172, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01321, w_fc-rms=0.01711, w_oc-rms=0.02167, count=1.33e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632974, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.45 0.46,0.47,0.50,0.50,0.53 0.56,0.59,0.61,0.64), mean=0.495, stddev=0.0321], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0155] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632974, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.42 0.43,0.45,0.50,0.50,0.51 0.54,0.60,0.64,0.70), mean=0.485, stddev=0.0405], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.012] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00632974, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.65,-0.52,-0.33 -0.21,-0.10,0.0007,0.11,0.24 0.35,0.48,0.58,0.70), mean=0.00505, stddev=0.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.44,0.47,0.51 0.54,0.58,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.747, stddev=0.193] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632974, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.44 0.45,0.46,0.50,0.50,0.52 0.54,0.57,0.59,0.62), mean=0.488, stddev=0.0323], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0162] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00632974, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.66,-0.51,-0.33 -0.21,-0.09,0.0003,0.11,0.24 0.31,0.47,0.57,0.75), mean=0.00571, stddev=0.197], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.58,0.71 0.77,0.82,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.889, stddev=0.11] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=259719
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000201172, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02819, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.33,0.35 0.37,0.39,0.54,0.83,0.88 0.93,0.95,0.96,0.98), mean=0.606, stddev=0.213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.001,0.002,0.002 0.004,0.01,0.45,0.60,0.67 0.75,0.82,0.88,0.99), mean=0.363, stddev=0.273], bias-{mean,stddev}=-0.007078,0.1015, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000201172, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01157, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.21 0.23,0.25,0.30,0.37,0.43 0.48,0.53,0.55,0.62), mean=0.312, stddev=0.0826], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.14,0.16,0.23,0.34,0.37 0.39,0.41,0.43,0.50), mean=0.248, stddev=0.0893], bias-{mean,stddev}=0.0002261,0.01699, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.9e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.03 0.04,0.05,0.08,0.10,0.11 0.12,0.14,0.14,0.16), mean=0.0767, stddev=0.0284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.18 0.23,0.30,0.43,0.53,0.58 0.61,0.64,0.65,0.72), mean=0.417, stddev=0.131], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.09,0.11,0.13 0.14,0.16,0.16,0.22), mean=0.1, stddev=0.0214], oderiv-count=928768
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36493.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.009,0.03 0.04,0.05,0.08,0.10,0.12 0.13,0.15,0.15,0.18), mean=0.0777, stddev=0.0308], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.09 0.11,0.12,0.14,0.16,0.17 0.18,0.20,0.20,0.22), mean=0.138, stddev=0.0305]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000201172, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008718, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.28,0.30,0.34,0.39,0.41 0.42,0.44,0.44,0.50), mean=0.341, stddev=0.0476], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.10,0.14 0.15,0.16,0.19,0.22,0.25 0.28,0.31,0.34,0.40), mean=0.194, stddev=0.0441], bias-{mean,stddev}=-0.01165,0.01536, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.98e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.22 0.24,0.26,0.29,0.32,0.33 0.34,0.36,0.37,0.42), mean=0.286, stddev=0.0366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.35,0.36 0.37,0.39,0.42,0.45,0.47 0.48,0.49,0.51,0.54), mean=0.417, stddev=0.0364], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0269, stddev=0.00261], oderiv-count=934400
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33728.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.21,0.23 0.24,0.26,0.29,0.32,0.34 0.35,0.37,0.38,0.50), mean=0.289, stddev=0.0389], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.46 0.48,0.51,0.57,0.63,0.67 0.70,0.72,0.74,1.0), mean=0.572, stddev=0.0753]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000201172, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01958, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.24 0.31,0.36,0.43,0.63,0.75 0.79,0.84,0.87,1.3), mean=0.471, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.57,0.58,0.60 0.61,0.65,0.73,1.0,1.4 1.5,1.5,1.5,1.7), mean=0.847, stddev=0.283], bias-{mean,stddev}=0.007199,0.02235, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000201172, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03199, w_fc-rms=0.04478, w_oc-rms=0.06278, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639626, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.46,0.49 0.50,0.52,0.58,0.65,0.67 0.69,0.71,0.72,0.80), mean=0.585, stddev=0.0658], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.19,0.20,0.21,0.21,0.21 0.22,0.22,0.22,0.23), mean=0.204, stddev=0.0101] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00639626, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.47,0.49 0.50,0.54,0.59,0.64,0.68 0.72,0.74,0.76,0.88), mean=0.594, stddev=0.0683], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.17,0.17,0.18 0.19,0.19,0.20,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.202, stddev=0.0142] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00952117, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.83,-0.74,-0.51 -0.35,-0.24,-0.02,0.23,0.35 0.48,0.76,0.80,0.89), mean=-0.0093, stddev=0.306], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.26,0.27,0.32 0.35,0.39,0.43,0.47,0.48 0.50,0.52,0.53,0.55), mean=0.424, stddev=0.0556] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00744828, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.56,0.58 0.60,0.63,0.67,0.70,0.73 0.75,0.77,0.79,0.95), mean=0.666, stddev=0.0544], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.15,0.16 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.21), mean=0.181, stddev=0.0158] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0310256, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.90,-0.78,-0.54 -0.36,-0.22,-0.02,0.22,0.33 0.49,0.79,0.87,0.98), mean=-0.00859, stddev=0.312], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.15,0.19,0.32 0.45,0.53,0.62,0.67,0.69 0.70,0.71,0.72,0.75), mean=0.592, stddev=0.118] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=220867
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000201172, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07045, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.6,1.9,2.0 2.0,2.1,2.1,2.2), mean=1.57, stddev=0.34], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.54,0.79,0.89 0.95,1.0,1.1,1.2,1.3 1.4,1.4,1.4,1.5), mean=1.13, stddev=0.156], bias-{mean,stddev}=0.00426,0.08458, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000201172, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03983, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.50,0.52,0.54 0.56,0.58,0.63,0.69,0.72 0.75,0.81,0.84,2.0), mean=0.636, stddev=0.0872], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.3 1.4,1.4,1.8,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.79, stddev=0.347], bias-{mean,stddev}=5.864e-09,0.02291, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0167, stddev=0.0138], oderiv-count=563200
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/126.mdl exp/nnet3/tdnn_lstm1c_sp/127.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.76947 tdnn2.affine:7.79567 lstm1.W_all:6.51292 lstm1.lstm_nonlin:0.129312 lstm1.W_rp:2.67762 tdnn3.affine:4.83876 tdnn4.affine:5.55906 lstm2.W_all:4.37048 lstm2.lstm_nonlin:0.0538941 lstm2.W_rp:1.81651 tdnn5.affine:3.94401 tdnn6.affine:4.60535 lstm3.W_all:5.98321 lstm3.lstm_nonlin:0.154956 lstm3.W_rp:2.38427 output.affine:5.06734 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.9477 tdnn2.affine:11.0796 lstm1.W_all:19.7301 lstm1.lstm_nonlin:1.4144 lstm1.W_rp:11.3259 tdnn3.affine:7.98402 tdnn4.affine:8.25994 lstm2.W_all:15.6009 lstm2.lstm_nonlin:0.69802 lstm2.W_rp:10.4935 tdnn5.affine:7.37915 tdnn6.affine:7.86441 lstm3.W_all:22.7873 lstm3.lstm_nonlin:1.90379 lstm3.W_rp:25.9386 output.affine:29.4814 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.651886 tdnn2.affine:0.707673 lstm1.W_all:0.330007 lstm1.lstm_nonlin:0.0912711 lstm1.W_rp:0.236633 tdnn3.affine:0.609207 tdnn4.affine:0.675295 lstm2.W_all:0.280684 lstm2.lstm_nonlin:0.0770093 lstm2.W_rp:0.173152 tdnn5.affine:0.537142 tdnn6.affine:0.587873 lstm3.W_all:0.262706 lstm3.lstm_nonlin:0.0819314 lstm3.W_rp:0.0920022 output.affine:0.17179 ]
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 10:51:18 KST 2020, elapsed time 1 seconds
