# nnet3-info exp/nnet3/tdnn_lstm1c_sp/41.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/40.mdl exp/nnet3/tdnn_lstm1c_sp/41.mdl 
# Started at Thu Jul 30 10:17:24 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/41.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000264256, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03123, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.02,0.02 0.05,0.40,0.54,0.63,0.70 0.76,0.86,0.92,1.2), mean=0.494, stddev=0.22], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.17,0.21,0.60,0.83,1.2 1.4,1.6,1.6,1.8), mean=0.602, stddev=0.38], bias-{mean,stddev}=-3.345e-05,0.06034, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.96e+05, self-repaired-proportion=0.11988, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,2e-06,1e-05,5e-05 0.0002,0.02,0.07,0.09,0.10 0.11,0.13,0.14,0.17), mean=0.0593, stddev=0.0362], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.004,0.01 0.04,0.20,0.47,0.61,0.70 0.79,0.85,0.88,0.96), mean=0.429, stddev=0.23], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.05 0.10,0.26,0.34,0.43,0.48 0.52,0.61,0.66,1.1), mean=0.333, stddev=0.14], oderiv-count=1.09619e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32724, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,5e-07,2e-06,1e-05 9e-05,0.02,0.06,0.09,0.10 0.12,0.13,0.14,0.17), mean=0.0571, stddev=0.0367], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,3e-05,7e-05,0.0003 0.0008,0.04,0.10,0.11,0.12 0.13,0.13,0.14,0.15), mean=0.0821, stddev=0.0414]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000264256, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01291, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.40,0.42 0.43,0.46,0.50,0.55,0.58 0.59,0.62,0.64,0.81), mean=0.507, stddev=0.0569], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.009,0.01 0.03,0.24,0.31,0.34,0.36 0.39,0.42,0.46,0.72), mean=0.271, stddev=0.115], bias-{mean,stddev}=0.0011,0.0284, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.29,0.29,0.31 0.32,0.33,0.36,0.39,0.42 0.44,0.46,0.48,0.64), mean=0.366, stddev=0.0405], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.41 0.42,0.44,0.46,0.48,0.50 0.51,0.53,0.53,0.55), mean=0.461, stddev=0.0302], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0397, stddev=0.00788], oderiv-count=1.25146e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32002.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.28,0.29 0.31,0.32,0.35,0.39,0.42 0.44,0.47,0.48,0.65), mean=0.36, stddev=0.0458], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.51,0.52,0.54 0.56,0.58,0.63,0.69,0.71 0.76,0.79,0.83,0.97), mean=0.634, stddev=0.0675]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000264256, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01766, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.03,0.08 0.14,0.23,0.39,0.58,0.68 0.75,0.84,0.91,1.1), mean=0.402, stddev=0.203], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.39,0.44 0.51,0.69,0.82,0.91,0.95 0.99,1.0,1.1,1.5), mean=0.789, stddev=0.163], bias-{mean,stddev}=-0.001734,0.02248, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000264256, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02724, w_fc-rms=0.04237, w_oc-rms=0.05171, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00611679, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.42,0.44 0.45,0.46,0.49,0.53,0.57 0.64,0.67,0.68,0.74), mean=0.501, stddev=0.0558], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0145] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00611679, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.36,0.37,0.40 0.41,0.43,0.47,0.53,0.64 0.70,0.75,0.79,0.86), mean=0.494, stddev=0.0921], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.16,0.19 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0214] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00802811, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.82,-0.79,-0.61 -0.40,-0.23,0.007,0.25,0.37 0.64,0.74,0.77,0.84), mean=0.00104, stddev=0.333], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.24,0.28,0.33 0.38,0.44,0.57,0.69,0.79 0.93,0.98,0.99,1.0), mean=0.58, stddev=0.161] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00611679, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.41 0.42,0.44,0.47,0.51,0.53 0.55,0.57,0.59,0.70), mean=0.475, stddev=0.0441], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0168] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0131932, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.96,-0.86,-0.82,-0.61 -0.34,-0.21,0.009,0.20,0.32 0.61,0.75,0.80,0.88), mean=-0.00269, stddev=0.316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.20,0.23,0.37 0.51,0.72,0.82,0.88,0.91 0.95,0.99,0.99,1.0), mean=0.773, stddev=0.168] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=297384
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000264256, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03224, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.31,0.32,0.34 0.37,0.40,0.64,0.97,1.0 1.1,1.1,1.1,1.2), mean=0.683, stddev=0.273], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.13 0.26,0.35,0.49,0.61,0.74 0.78,0.90,0.99,1.1), mean=0.485, stddev=0.188], bias-{mean,stddev}=-0.001685,0.04294, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000264256, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01319, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.26 0.27,0.30,0.35,0.42,0.46 0.50,0.54,0.55,0.58), mean=0.361, stddev=0.0732], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.14,0.16,0.25,0.40,0.43 0.46,0.50,0.51,0.54), mean=0.277, stddev=0.118], bias-{mean,stddev}=-0.00351,0.01857, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.16e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.09,0.11,0.15,0.19,0.21 0.22,0.25,0.26,0.29), mean=0.151, stddev=0.0448], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.21,0.27 0.31,0.38,0.49,0.58,0.62 0.65,0.68,0.70,0.76), mean=0.478, stddev=0.118], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.05,0.06,0.06,0.08,0.08 0.09,0.10,0.11,0.13), mean=0.0676, stddev=0.0124], oderiv-count=1.08762e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29837.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.07 0.08,0.11,0.14,0.18,0.20 0.23,0.24,0.25,0.27), mean=0.145, stddev=0.0451], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.18 0.19,0.21,0.24,0.27,0.29 0.30,0.32,0.33,0.36), mean=0.238, stddev=0.0367]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000264256, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009569, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.30,0.32 0.33,0.34,0.38,0.40,0.42 0.43,0.46,0.48,0.58), mean=0.376, stddev=0.0375], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.17 0.18,0.19,0.21,0.24,0.26 0.28,0.30,0.31,0.34), mean=0.216, stddev=0.0331], bias-{mean,stddev}=-0.009286,0.01703, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.52e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.25 0.26,0.28,0.31,0.34,0.37 0.38,0.40,0.43,0.48), mean=0.312, stddev=0.0412], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.38,0.39 0.41,0.42,0.45,0.47,0.49 0.49,0.51,0.51,0.54), mean=0.446, stddev=0.0306], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0287, stddev=0.00244], oderiv-count=1.0928e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27672, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.23,0.25 0.26,0.27,0.31,0.34,0.36 0.38,0.40,0.42,0.46), mean=0.309, stddev=0.0416], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.49 0.51,0.54,0.58,0.63,0.68 0.70,0.74,0.80,0.93), mean=0.588, stddev=0.0668]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000264256, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01372, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.03,0.07,0.27,0.48,0.57 0.62,0.68,0.72,1.1), mean=0.287, stddev=0.2], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.26,0.28,0.31 0.37,0.54,0.64,0.71,0.74 0.78,0.84,0.87,0.91), mean=0.611, stddev=0.136], bias-{mean,stddev}=-0.00266,0.02279, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000264256, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01913, w_fc-rms=0.02371, w_oc-rms=0.02591, count=1.32e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616825, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.43,0.45 0.45,0.47,0.49,0.51,0.54 0.57,0.60,0.62,0.64), mean=0.494, stddev=0.0369], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0157] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616825, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.40,0.40,0.41 0.42,0.44,0.49,0.51,0.53 0.57,0.65,0.67,0.76), mean=0.484, stddev=0.0529], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.238, stddev=0.0136] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00999068, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.68,-0.58,-0.45 -0.31,-0.18,0.002,0.18,0.33 0.47,0.59,0.67,0.75), mean=0.00374, stddev=0.259], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.42,0.45,0.50 0.53,0.57,0.65,0.88,0.97 0.99,1.0,1.0,1.0), mean=0.701, stddev=0.162] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616825, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.46,0.49,0.51,0.53 0.55,0.57,0.59,0.64), mean=0.485, stddev=0.0356], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.016] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00616825, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.69,-0.54,-0.40 -0.29,-0.15,0.008,0.16,0.31 0.45,0.55,0.68,0.82), mean=0.0064, stddev=0.244], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.42,0.49,0.67 0.75,0.80,0.88,0.94,0.99 0.99,1.0,1.0,1.0), mean=0.86, stddev=0.109] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=262302
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000264256, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0289, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.42,0.43,0.44 0.46,0.49,0.60,0.79,0.85 0.89,0.94,0.96,1.0), mean=0.641, stddev=0.152], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.06,0.14,0.43,0.61,0.70 0.77,0.85,0.92,1.0), mean=0.402, stddev=0.236], bias-{mean,stddev}=0.003035,0.09077, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000264256, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01241, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.24,0.27,0.32,0.39,0.45 0.52,0.58,0.61,0.67), mean=0.335, stddev=0.0873], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.15,0.17,0.18 0.19,0.21,0.26,0.34,0.38 0.40,0.43,0.44,0.49), mean=0.274, stddev=0.0711], bias-{mean,stddev}=0.0003109,0.01847, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.33e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.06,0.07,0.10,0.14,0.15 0.17,0.18,0.19,0.25), mean=0.104, stddev=0.0385], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.19 0.25,0.30,0.42,0.53,0.58 0.61,0.64,0.68,0.72), mean=0.416, stddev=0.129], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.06,0.07,0.09,0.10 0.11,0.13,0.14,0.17), mean=0.0761, stddev=0.0186], oderiv-count=940160
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25506.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.02,0.03,0.04 0.05,0.07,0.10,0.13,0.15 0.16,0.18,0.19,0.22), mean=0.102, stddev=0.0374], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.08,0.13 0.14,0.16,0.18,0.21,0.23 0.25,0.26,0.28,0.32), mean=0.183, stddev=0.0389]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000264256, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00944, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.29,0.30 0.31,0.33,0.36,0.41,0.44 0.46,0.49,0.52,0.59), mean=0.369, stddev=0.0501], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.13,0.15 0.16,0.17,0.20,0.24,0.27 0.30,0.33,0.37,0.47), mean=0.21, stddev=0.0488], bias-{mean,stddev}=-0.01165,0.01512, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.1e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.24 0.26,0.28,0.31,0.35,0.37 0.38,0.40,0.41,0.56), mean=0.316, stddev=0.0426], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.37 0.38,0.39,0.42,0.45,0.46 0.48,0.49,0.50,0.53), mean=0.42, stddev=0.0325], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0247, stddev=0.00245], oderiv-count=944000
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23341.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.22,0.24 0.26,0.28,0.32,0.35,0.38 0.39,0.41,0.42,0.64), mean=0.317, stddev=0.0476], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.50 0.53,0.55,0.61,0.69,0.73 0.78,0.80,0.83,1.0), mean=0.623, stddev=0.084]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000264256, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01949, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.23 0.29,0.34,0.43,0.61,0.75 0.80,0.85,0.87,1.6), mean=0.467, stddev=0.168], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.60,0.61,0.63 0.65,0.68,0.74,1.1,1.3 1.4,1.5,1.5,1.7), mean=0.854, stddev=0.246], bias-{mean,stddev}=0.008484,0.0299, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000264256, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03198, w_fc-rms=0.04246, w_oc-rms=0.05499, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623033, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.47 0.49,0.51,0.58,0.63,0.65 0.67,0.69,0.70,0.76), mean=0.573, stddev=0.0623], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.19 0.19,0.20,0.21,0.22,0.22 0.22,0.23,0.23,0.23), mean=0.206, stddev=0.012] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623033, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.48 0.49,0.52,0.58,0.63,0.66 0.67,0.71,0.73,0.85), mean=0.582, stddev=0.063], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.17,0.17,0.18 0.19,0.19,0.21,0.22,0.22 0.23,0.23,0.23,0.24), mean=0.206, stddev=0.0151] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00815342, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.81,-0.74,-0.53 -0.31,-0.20,-0.003,0.20,0.33 0.51,0.69,0.75,0.85), mean=0.00256, stddev=0.29], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.26,0.26,0.32 0.36,0.41,0.46,0.50,0.52 0.54,0.56,0.58,0.63), mean=0.448, stddev=0.066] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623033, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.53,0.54,0.56 0.58,0.60,0.64,0.68,0.70 0.72,0.74,0.76,0.87), mean=0.641, stddev=0.0501], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.16,0.17 0.17,0.18,0.19,0.20,0.20 0.21,0.21,0.21,0.22), mean=0.188, stddev=0.0132] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0157858, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.97,-0.84,-0.75,-0.53 -0.29,-0.19,-0.0006,0.18,0.31 0.51,0.68,0.77,0.91), mean=0.00448, stddev=0.288], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.22,0.29,0.41 0.50,0.58,0.65,0.69,0.71 0.73,0.74,0.75,0.80), mean=0.625, stddev=0.102] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=223066
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000264256, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06693, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.2,1.3,1.5,1.7,1.8 1.9,1.9,1.9,2.1), mean=1.51, stddev=0.22], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.65,0.72,0.80 0.85,0.93,1.1,1.2,1.3 1.3,1.4,1.4,1.6), mean=1.07, stddev=0.166], bias-{mean,stddev}=0.003559,0.09712, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000264256, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04105, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.51,0.53,0.55 0.57,0.59,0.64,0.71,0.75 0.78,0.84,0.89,2.3), mean=0.654, stddev=0.1], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.4,1.4,1.5 1.6,1.6,1.9,2.1,2.2 2.3,2.3,2.4,2.6), mean=1.87, stddev=0.237], bias-{mean,stddev}=4.221e-09,0.03069, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0135], oderiv-count=572160
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/40.mdl exp/nnet3/tdnn_lstm1c_sp/41.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.01896 tdnn2.affine:9.23167 lstm1.W_all:7.93249 lstm1.lstm_nonlin:0.155109 lstm1.W_rp:3.32018 tdnn3.affine:5.54758 tdnn4.affine:6.52424 lstm2.W_all:5.26479 lstm2.lstm_nonlin:0.08934 lstm2.W_rp:2.20054 tdnn5.affine:4.60244 tdnn6.affine:5.56632 lstm3.W_all:6.94975 lstm3.lstm_nonlin:0.1807 lstm3.W_rp:2.8154 output.affine:6.30222 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.4108 tdnn2.affine:11.6431 lstm1.W_all:20.5631 lstm1.lstm_nonlin:1.64606 lstm1.W_rp:11.8742 tdnn3.affine:8.4097 tdnn4.affine:8.62948 lstm2.W_all:15.9872 lstm2.lstm_nonlin:0.911868 lstm2.W_rp:10.7254 tdnn5.affine:7.91165 tdnn6.affine:8.51334 lstm3.W_all:22.7043 lstm3.lstm_nonlin:1.74403 lstm3.W_rp:24.659 output.affine:30.3954 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.724643 tdnn2.affine:0.788482 lstm1.W_all:0.385065 lstm1.lstm_nonlin:0.0945707 lstm1.W_rp:0.280947 tdnn3.affine:0.656822 tdnn4.affine:0.746882 lstm2.W_all:0.329051 lstm2.lstm_nonlin:0.0943326 lstm2.W_rp:0.205345 tdnn5.affine:0.580517 tdnn6.affine:0.652556 lstm3.W_all:0.307298 lstm3.lstm_nonlin:0.10105 lstm3.W_rp:0.114703 output.affine:0.207899 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:17:24 KST 2020, elapsed time 0 seconds
