# nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/260.mdl 
# Started at Thu Jul 30 11:43:52 KST 2020
#
nnet3-info --verbose=2 exp/nnet3/tdnn_lstm1c_sp/260.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000250026, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03454, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.01,0.01 0.02,0.10,0.60,0.74,0.82 0.93,1.0,1.0,1.3), mean=0.519, stddev=0.298], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.16 0.18,0.23,0.66,0.93,1.3 1.6,1.7,1.7,1.8), mean=0.667, stddev=0.419], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.07,0.28,0.89,1.5 1.9,2.1,2.2,2.6), mean=0.521, stddev=0.59], bias-{mean,stddev}=0.0004968,0.06371, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0.221533, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,3e-06,6e-06,2e-05 5e-05,0.0003,0.07,0.10,0.12 0.14,0.15,0.17,0.25), mean=0.0617, stddev=0.0473], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.001,0.002,0.006 0.02,0.05,0.45,0.60,0.71 0.79,0.86,0.89,0.99), mean=0.393, stddev=0.259], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.04,0.13,0.26,0.35,0.41 0.48,0.57,0.62,1.3), mean=0.256, stddev=0.147], oderiv-count=1.2167e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33466.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,5e-06,2e-05 5e-05,0.0003,0.06,0.10,0.12 0.14,0.16,0.17,0.24), mean=0.0593, stddev=0.0466], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,8e-05,0.0001,0.0002 0.0005,0.002,0.10,0.13,0.14 0.15,0.16,0.17,0.17), mean=0.0847, stddev=0.0544]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000250026, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01303, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.41 0.43,0.45,0.50,0.56,0.60 0.63,0.69,0.70,0.78), mean=0.51, stddev=0.0686], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.006,0.007,0.009 0.01,0.05,0.31,0.37,0.40 0.43,0.47,0.49,0.79), mean=0.26, stddev=0.144], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.10,0.21,0.54,0.92 1.2,1.4,1.6,2.4), mean=0.357, stddev=0.371], bias-{mean,stddev}=-0.02024,0.04006, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.30,0.31,0.34,0.39,0.41 0.44,0.47,0.49,0.58), mean=0.351, stddev=0.0485], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.39,0.40 0.41,0.43,0.45,0.48,0.50 0.51,0.52,0.53,0.55), mean=0.451, stddev=0.0335], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0384, stddev=0.00706], oderiv-count=1.11437e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32718.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.29 0.30,0.32,0.35,0.39,0.42 0.45,0.49,0.51,0.60), mean=0.356, stddev=0.0518], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.48,0.51,0.52,0.54 0.56,0.57,0.64,0.69,0.74 0.77,0.80,0.83,0.91), mean=0.641, stddev=0.0703]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000250026, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0187, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,4e-06,1e-05,8e-05 0.002,0.17,0.42,0.63,0.73 0.79,0.86,0.93,1.1), mean=0.406, stddev=0.25], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.40,0.47 0.55,0.74,0.86,0.95,1.0 1.1,1.2,1.2,1.3), mean=0.835, stddev=0.176], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,4e-07 6e-07,0.16,0.35,0.81,1.5 2.0,2.5,2.8,4.3), mean=0.566, stddev=0.638], bias-{mean,stddev}=0.0007248,0.02732, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000250026, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04947, w_fc-rms=0.02818, w_oc-rms=0.04215, count=1.48e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632779, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.42 0.44,0.45,0.47,0.50,0.54 0.67,0.79,0.81,0.84), mean=0.491, stddev=0.0759], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.15,0.18 0.19,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0233] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632779, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.41,0.42,0.44 0.45,0.47,0.50,0.52,0.57 0.64,0.74,0.77,0.83), mean=0.506, stddev=0.064], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.18 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0209] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0383167, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.90,-0.85,-0.51 -0.28,-0.15,0.001,0.18,0.33 0.53,0.84,0.88,0.91), mean=0.0134, stddev=0.303], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.18,0.25 0.34,0.41,0.54,0.78,1.0 1.0,1.0,1.0,1.0), mean=0.586, stddev=0.226] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00632779, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.38,0.39 0.40,0.42,0.45,0.50,0.50 0.50,0.54,0.55,0.63), mean=0.451, stddev=0.0407], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.217, stddev=0.0221] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00632779, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.77,-0.66,-0.38 -0.19,-0.09,0.001,0.12,0.22 0.35,0.65,0.75,0.81), mean=0.0102, stddev=0.228], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.34,0.37,0.54 0.72,0.80,0.88,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.852, stddev=0.135] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.02734e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.38133e-05, count-zeroing-boundaries=295741
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.180165
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000250026, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04075, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.31,0.35 0.38,0.44,0.86,1.2,1.3 1.4,1.4,1.5,1.5), mean=0.845, stddev=0.387], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.002,0.004 0.01,0.30,0.54,0.75,0.89 1.2,1.6,1.8,2.0), mean=0.551, stddev=0.358], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-07,1e-07,2e-07 2e-07,3e-07,1e-06,0.18,2.0 2.4,2.7,3.1,4.0), mean=0.387, stddev=0.845], bias-{mean,stddev}=0.01277,0.2795, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000250026, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01361, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.20,0.21,0.24 0.27,0.30,0.37,0.44,0.48 0.52,0.56,0.57,0.71), mean=0.37, stddev=0.0873], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.11 0.12,0.14,0.28,0.42,0.44 0.46,0.48,0.49,0.54), mean=0.282, stddev=0.131], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,6e-08,6e-08,8e-08 1e-07,2e-07,2e-05,0.34,0.74 1.0,1.2,1.3,1.5), mean=0.176, stddev=0.337], bias-{mean,stddev}=0.004322,0.01381, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.84e+05, self-repaired-proportion=0.000583791, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.03,0.04,0.06 0.07,0.09,0.12,0.14,0.16 0.18,0.20,0.22,0.25), mean=0.118, stddev=0.0375], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.17,0.18,0.26 0.31,0.38,0.50,0.60,0.64 0.66,0.69,0.71,0.75), mean=0.488, stddev=0.126], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.07,0.07 0.07,0.08,0.09,0.10,0.12 0.13,0.15,0.16,0.25), mean=0.0919, stddev=0.0225], oderiv-count=1.09344e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30474.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.03,0.04,0.06 0.07,0.09,0.12,0.14,0.16 0.18,0.20,0.22,0.26), mean=0.116, stddev=0.0377], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.11,0.12,0.14 0.15,0.16,0.18,0.21,0.23 0.24,0.26,0.27,0.30), mean=0.186, stddev=0.0327]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000250026, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009621, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.30,0.32 0.33,0.34,0.37,0.41,0.44 0.46,0.49,0.51,0.62), mean=0.377, stddev=0.0474], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.13,0.14,0.15 0.16,0.18,0.21,0.25,0.28 0.30,0.33,0.34,0.40), mean=0.215, stddev=0.0459], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.09,0.11,0.18,0.42,0.70 0.88,1.0,1.1,1.2), mean=0.285, stddev=0.251], bias-{mean,stddev}=-0.02122,0.01934, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.64e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.25,0.26 0.27,0.28,0.31,0.35,0.37 0.38,0.40,0.41,0.51), mean=0.317, stddev=0.0393], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.37,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.50,0.52), mean=0.435, stddev=0.0288], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0309, stddev=0.00246], oderiv-count=1.07053e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28231.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.24,0.25,0.26 0.27,0.28,0.32,0.36,0.37 0.39,0.41,0.42,0.56), mean=0.321, stddev=0.0419], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.49,0.50,0.52 0.54,0.56,0.60,0.67,0.71 0.74,0.78,0.83,1.2), mean=0.617, stddev=0.0733]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000250026, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01542, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,8e-07,1e-06,3e-06 2e-05,0.0003,0.34,0.55,0.63 0.68,0.73,0.76,0.97), mean=0.3, stddev=0.254], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.33,0.35,0.39 0.49,0.63,0.70,0.77,0.82 0.87,0.96,1.1,1.4), mean=0.69, stddev=0.136], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,4e-07 4e-05,0.10,0.25,0.63,1.2 1.7,2.1,2.3,4.5), mean=0.445, stddev=0.545], bias-{mean,stddev}=0.001368,0.0453, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000250026, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02463, w_fc-rms=0.01244, w_oc-rms=0.03043, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638208, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.46,0.50,0.51,0.57 0.62,0.67,0.70,0.81), mean=0.5, stddev=0.0567], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0187] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638208, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.42,0.43 0.45,0.47,0.50,0.51,0.54 0.58,0.63,0.64,0.74), mean=0.496, stddev=0.0439], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0173] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00840123, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.82,-0.69,-0.47 -0.29,-0.14,0.0002,0.14,0.33 0.54,0.74,0.79,0.88), mean=0.00981, stddev=0.278], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.28,0.38 0.44,0.50,0.60,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.699, stddev=0.239] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638208, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.40,0.42 0.43,0.44,0.50,0.50,0.51 0.54,0.56,0.58,0.73), mean=0.481, stddev=0.0396], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0202] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00638208, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.53,-0.44,-0.31 -0.18,-0.09,0.0001,0.09,0.23 0.37,0.54,0.57,0.69), mean=0.00842, stddev=0.194], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.51,0.57,0.69 0.75,0.82,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.895, stddev=0.109] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=9.58538e-06, count-zeroing-boundaries=260814
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.180165
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000250026, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03935, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.43,0.48,0.53 0.56,0.58,0.86,1.1,1.2 1.2,1.3,1.3,1.3), mean=0.859, stddev=0.261], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0007,0.0009,0.001 0.002,0.007,0.58,0.84,0.95 1.1,1.3,1.4,1.6), mean=0.492, stddev=0.401], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-07,1e-07,2e-07 2e-07,4e-07,1e-05,1.3,1.8 2.1,2.3,2.5,3.1), mean=0.435, stddev=0.785], bias-{mean,stddev}=8.699e-05,0.2156, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000250026, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01302, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.26 0.27,0.29,0.34,0.41,0.46 0.50,0.55,0.56,0.61), mean=0.356, stddev=0.0742], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.16 0.17,0.19,0.26,0.39,0.42 0.44,0.45,0.46,0.51), mean=0.281, stddev=0.0954], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,8e-08,1e-07 1e-07,3e-07,0.002,0.35,0.75 0.95,1.1,1.1,1.3), mean=0.185, stddev=0.313], bias-{mean,stddev}=0.001318,0.007645, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.46e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.06,0.09,0.12,0.13 0.14,0.16,0.17,0.20), mean=0.0917, stddev=0.0322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.18,0.23 0.28,0.35,0.48,0.57,0.61 0.64,0.66,0.68,0.70), mean=0.458, stddev=0.125], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.07,0.08 0.08,0.08,0.09,0.11,0.12 0.14,0.16,0.16,0.19), mean=0.0989, stddev=0.0194], oderiv-count=1.04902e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25987.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.04 0.05,0.06,0.09,0.12,0.14 0.15,0.16,0.17,0.20), mean=0.0932, stddev=0.0335], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.09,0.10,0.11 0.12,0.13,0.15,0.18,0.19 0.20,0.21,0.22,0.24), mean=0.154, stddev=0.0274]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000250026, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009521, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.22,0.27 0.29,0.32,0.37,0.42,0.45 0.47,0.48,0.51,0.56), mean=0.371, stddev=0.0623], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.16,0.17,0.20,0.25,0.28 0.31,0.35,0.38,0.46), mean=0.211, stddev=0.0514], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.09,0.15,0.42,0.73 0.89,1.0,1.0,1.2), mean=0.269, stddev=0.263], bias-{mean,stddev}=-0.02163,0.02402, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.53e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.21,0.22,0.25 0.27,0.29,0.32,0.35,0.37 0.39,0.41,0.42,0.54), mean=0.323, stddev=0.0448], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.36,0.37 0.38,0.39,0.42,0.44,0.45 0.46,0.48,0.49,0.51), mean=0.417, stddev=0.0277], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0256, stddev=0.00205], oderiv-count=965760
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23743.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.23,0.25 0.27,0.30,0.33,0.36,0.38 0.40,0.42,0.45,0.63), mean=0.33, stddev=0.0484], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.38,0.40,0.47 0.53,0.59,0.65,0.72,0.77 0.81,0.85,0.95,1.2), mean=0.654, stddev=0.105]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000250026, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02222, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.29,0.30,0.32 0.34,0.39,0.52,0.71,0.80 0.84,0.88,0.91,1.4), mean=0.542, stddev=0.164], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.64,0.67,0.74 0.77,0.81,0.88,1.1,1.4 1.5,1.6,1.8,2.1), mean=0.981, stddev=0.255], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,3e-06,7e-06,0.0003 0.09,0.13,0.29,0.98,2.0 2.4,2.7,2.9,7.7), mean=0.63, stddev=0.793], bias-{mean,stddev}=0.02066,0.02491, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000250026, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.08379, w_fc-rms=0.05089, w_oc-rms=0.05801, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644761, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.55,0.56,0.59 0.61,0.64,0.69,0.73,0.76 0.79,0.81,0.82,0.87), mean=0.689, stddev=0.0589], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.14 0.15,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.24), mean=0.178, stddev=0.0201] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644761, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.49,0.52,0.54 0.56,0.60,0.65,0.70,0.74 0.78,0.83,0.84,0.88), mean=0.654, stddev=0.0706], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.14 0.15,0.17,0.19,0.20,0.20 0.21,0.21,0.21,0.22), mean=0.181, stddev=0.0211] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0242691, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.82,-0.74,-0.56 -0.41,-0.28,-0.003,0.27,0.39 0.53,0.72,0.78,0.90), mean=-0.0045, stddev=0.328], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.23 0.29,0.36,0.42,0.47,0.49 0.50,0.53,0.54,0.68), mean=0.406, stddev=0.0779] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644761, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.49,0.52,0.54 0.56,0.59,0.62,0.66,0.68 0.71,0.73,0.76,0.82), mean=0.619, stddev=0.0499], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.17,0.19,0.19,0.20 0.20,0.20,0.21,0.21), mean=0.181, stddev=0.0165] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644761, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.74,-0.68,-0.52 -0.35,-0.23,-0.007,0.22,0.31 0.47,0.65,0.69,0.84), mean=-0.00563, stddev=0.286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.33,0.35,0.41 0.48,0.56,0.65,0.70,0.72 0.74,0.76,0.76,0.84), mean=0.628, stddev=0.0956] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=221774
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.180165
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000250026, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08372, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.1,1.1 1.2,1.2,1.6,2.4,2.5 2.6,2.6,2.7,2.8), mean=1.83, stddev=0.556], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.99,1.0,1.0 1.1,1.1,1.3,1.5,1.7 1.8,2.0,2.0,2.1), mean=1.33, stddev=0.234], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,1e-06,2e-06 5e-06,4e-05,0.11,3.0,3.5 3.9,4.4,5.2,5.7), mean=1.12, stddev=1.55], bias-{mean,stddev}=-0.03558,0.4766, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000250026, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04404, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.62 0.63,0.65,0.69,0.74,0.77 0.81,0.87,0.94,2.4), mean=0.704, stddev=0.0914], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.3,1.4,1.8,2.5,2.6 2.7,2.7,2.7,2.8), mean=1.95, stddev=0.54], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,1e-06,1e-06,2e-06 3e-06,2e-05,0.05,3.1,4.0 4.3,4.7,5.0,6.4), mean=1.14, stddev=1.67], bias-{mean,stddev}=7.068e-09,0.02997, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=614720
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:43:52 KST 2020, elapsed time 0 seconds
