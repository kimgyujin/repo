# nnet3-info exp/nnet3/tdnn_lstm1c_sp/366.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/365.mdl exp/nnet3/tdnn_lstm1c_sp/366.mdl 
# Started at Thu Jul 30 12:26:07 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/366.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000127637, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03228, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.005,0.005,0.007 0.009,0.02,0.57,0.72,0.80 0.88,0.94,0.99,1.2), mean=0.468, stddev=0.306], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.23,0.66,0.91,1.2 1.4,1.4,1.5,1.5), mean=0.638, stddev=0.368], bias-{mean,stddev}=-0.004458,0.06267, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.94e+05, self-repaired-proportion=0.185854, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-06,2e-05,3e-05,4e-05 6e-05,0.0001,0.04,0.09,0.11 0.12,0.14,0.16,0.18), mean=0.0481, stddev=0.0455], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.02,0.02,0.03 0.05,0.07,0.37,0.61,0.71 0.80,0.87,0.89,0.98), mean=0.357, stddev=0.264], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.01,0.01 0.02,0.03,0.33,0.46,0.57 0.65,0.79,0.88,1.5), mean=0.315, stddev=0.226], oderiv-count=1.20467e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=42602.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,6e-06,9e-06,3e-05 7e-05,0.0002,0.05,0.09,0.11 0.13,0.14,0.16,0.19), mean=0.0472, stddev=0.0452], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,9e-05,0.0001,0.0002 0.0004,0.0009,0.08,0.11,0.13 0.14,0.15,0.16,0.17), mean=0.0661, stddev=0.0517]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000127637, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01171, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.38,0.40,0.45,0.51,0.55 0.59,0.63,0.64,0.76), mean=0.458, stddev=0.0671], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.003,0.004 0.005,0.01,0.28,0.33,0.37 0.40,0.43,0.50,0.72), mean=0.223, stddev=0.146], bias-{mean,stddev}=-0.03533,0.03996, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.09e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.20,0.21 0.22,0.23,0.26,0.30,0.32 0.33,0.36,0.38,0.46), mean=0.266, stddev=0.0419], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.36,0.37,0.39 0.40,0.41,0.44,0.47,0.49 0.50,0.52,0.54,0.57), mean=0.441, stddev=0.0377], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.06,0.06 0.07,0.08,0.08,0.10), mean=0.0504, stddev=0.00989], oderiv-count=1.1079e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=41721.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.20,0.21 0.22,0.23,0.27,0.30,0.33 0.34,0.36,0.39,0.49), mean=0.269, stddev=0.044], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.40 0.42,0.44,0.48,0.54,0.57 0.60,0.63,0.64,0.67), mean=0.49, stddev=0.0587]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000127637, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01762, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,7e-07,2e-06,1e-05 0.0003,0.17,0.41,0.59,0.66 0.73,0.79,0.85,1.0), mean=0.385, stddev=0.231], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.37,0.42 0.50,0.71,0.81,0.90,0.96 1.0,1.1,1.2,1.3), mean=0.786, stddev=0.168], bias-{mean,stddev}=0.002642,0.02762, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000127637, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.085, w_fc-rms=0.02633, w_oc-rms=0.04716, count=1.48e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00648111, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.43 0.44,0.45,0.48,0.50,0.55 0.71,0.78,0.79,0.85), mean=0.495, stddev=0.0756], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.19 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.225, stddev=0.0208] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00648111, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.45,0.46,0.47 0.48,0.49,0.50,0.53,0.57 0.65,0.73,0.78,0.83), mean=0.519, stddev=0.06], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.17,0.19 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0201] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0157531, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.88,-0.86,-0.44 -0.26,-0.13,0.0007,0.16,0.30 0.61,0.83,0.87,0.90), mean=0.0174, stddev=0.298], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.20,0.22,0.27 0.39,0.45,0.58,0.73,1.0 1.0,1.0,1.0,1.0), mean=0.611, stddev=0.214] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00648111, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.56,0.58,0.69), mean=0.462, stddev=0.0411], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0198] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00648111, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.73,-0.68,-0.31 -0.16,-0.08,0.0006,0.10,0.21 0.41,0.63,0.72,0.80), mean=0.0118, stddev=0.226], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.36,0.41,0.54 0.73,0.81,0.88,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.86, stddev=0.13] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.95e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=4.6068e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=7.6836e-05, count-zeroing-boundaries=292831
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.196694
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000127637, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03981, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.42,0.45 0.50,0.56,0.86,1.2,1.2 1.3,1.3,1.4,1.4), mean=0.86, stddev=0.29], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0007,0.001,0.002 0.008,0.35,0.55,0.73,0.92 1.2,1.4,1.5,1.8), mean=0.544, stddev=0.34], bias-{mean,stddev}=0.01334,0.2606, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000127637, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01286, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.22,0.24,0.26 0.28,0.30,0.35,0.40,0.43 0.47,0.51,0.52,0.56), mean=0.353, stddev=0.065], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.16,0.18,0.28,0.38,0.40 0.42,0.44,0.46,0.48), mean=0.276, stddev=0.0982], bias-{mean,stddev}=0.001387,0.008636, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.99e+05, self-repaired-proportion=0.00231011, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-05,0.01,0.02,0.02 0.03,0.05,0.08,0.11,0.12 0.13,0.15,0.16,0.17), mean=0.0778, stddev=0.033], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.11,0.13,0.17 0.22,0.33,0.47,0.59,0.64 0.67,0.72,0.73,0.83), mean=0.458, stddev=0.15], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.09,0.09,0.10 0.10,0.11,0.13,0.16,0.20 0.23,0.26,0.29,0.37), mean=0.139, stddev=0.0442], oderiv-count=1.05325e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=39079.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.01,0.02,0.02 0.03,0.05,0.08,0.11,0.12 0.13,0.15,0.16,0.17), mean=0.0783, stddev=0.0331], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.04,0.06,0.07 0.09,0.11,0.13,0.14,0.16 0.17,0.17,0.18,0.20), mean=0.124, stddev=0.0278]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000127637, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00838, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.26,0.27 0.28,0.30,0.32,0.36,0.38 0.40,0.42,0.43,0.48), mean=0.329, stddev=0.039], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.12,0.13,0.14 0.14,0.16,0.18,0.22,0.24 0.26,0.29,0.31,0.37), mean=0.187, stddev=0.0399], bias-{mean,stddev}=-0.02682,0.01916, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.1e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.22,0.25,0.28,0.29 0.30,0.32,0.32,0.36), mean=0.251, stddev=0.0307], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.36,0.37,0.38 0.39,0.40,0.43,0.45,0.46 0.47,0.48,0.49,0.51), mean=0.426, stddev=0.0285], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.037, stddev=0.00272], oderiv-count=1.09363e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36437.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.21,0.23,0.25,0.28,0.29 0.31,0.32,0.33,0.36), mean=0.253, stddev=0.0308], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.39,0.41 0.43,0.45,0.49,0.53,0.56 0.59,0.62,0.63,0.79), mean=0.49, stddev=0.0572]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000127637, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01444, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-06,6e-06,2e-05 6e-05,0.001,0.33,0.52,0.58 0.62,0.67,0.70,0.89), mean=0.285, stddev=0.233], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.28,0.29,0.35 0.44,0.60,0.66,0.73,0.78 0.81,0.87,0.94,1.3), mean=0.645, stddev=0.131], bias-{mean,stddev}=0.005662,0.03232, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000127637, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05301, w_fc-rms=0.0157, w_oc-rms=0.0409, count=1.36e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00653856, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.45 0.46,0.48,0.50,0.51,0.55 0.60,0.66,0.69,0.78), mean=0.505, stddev=0.0469], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0162] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00653856, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.46,0.47 0.49,0.50,0.50,0.53,0.56 0.60,0.65,0.67,0.73), mean=0.516, stddev=0.0402], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.18,0.19,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0172] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00653856, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.79,-0.75,-0.44 -0.23,-0.09,0.0006,0.12,0.32 0.51,0.66,0.71,0.78), mean=0.00913, stddev=0.255], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.36,0.41 0.47,0.53,0.64,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.719, stddev=0.218] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00653856, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.44 0.46,0.47,0.50,0.50,0.51 0.52,0.55,0.57,0.69), mean=0.49, stddev=0.0283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.20 0.20,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0186] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00653856, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.72,-0.61,-0.52,-0.31 -0.15,-0.07,0.0004,0.09,0.20 0.37,0.48,0.55,0.62), mean=0.00689, stddev=0.186], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.56,0.58,0.69 0.76,0.83,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.897, stddev=0.104] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.71e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=8.76512e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.32343e-05, count-zeroing-boundaries=258238
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.196694
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000127637, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03808, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.50,0.53 0.56,0.61,0.83,1.1,1.1 1.2,1.2,1.2,1.3), mean=0.838, stddev=0.228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.001,0.002,0.002 0.004,0.01,0.56,0.81,0.93 1.1,1.3,1.4,1.5), mean=0.481, stddev=0.382], bias-{mean,stddev}=-0.000621,0.2073, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000127637, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01213, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.24,0.25 0.27,0.29,0.32,0.37,0.42 0.46,0.48,0.50,0.57), mean=0.334, stddev=0.0596], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.17,0.18,0.25,0.35,0.38 0.40,0.41,0.42,0.47), mean=0.264, stddev=0.0827], bias-{mean,stddev}=0.0008901,0.00631, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.76e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.12,0.14,0.14), mean=0.0634, stddev=0.0283], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.14,0.17 0.21,0.30,0.46,0.57,0.61 0.64,0.67,0.68,0.71), mean=0.436, stddev=0.147], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.12,0.13,0.16,0.19 0.22,0.23,0.24,0.26), mean=0.141, stddev=0.0331], oderiv-count=1.04198e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33795.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.02 0.02,0.04,0.06,0.09,0.10 0.11,0.12,0.13,0.14), mean=0.0643, stddev=0.0284], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.07,0.09,0.11,0.13,0.13 0.15,0.15,0.16,0.17), mean=0.106, stddev=0.0232]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000127637, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008363, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.21 0.26,0.28,0.33,0.38,0.40 0.41,0.42,0.43,0.47), mean=0.325, stddev=0.0602], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.13 0.14,0.15,0.17,0.22,0.25 0.28,0.31,0.33,0.40), mean=0.185, stddev=0.0451], bias-{mean,stddev}=-0.02032,0.02341, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.83e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.19 0.21,0.23,0.27,0.30,0.31 0.32,0.34,0.35,0.39), mean=0.262, stddev=0.0418], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.36 0.38,0.39,0.42,0.45,0.46 0.47,0.49,0.49,0.53), mean=0.418, stddev=0.0331], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0305, stddev=0.00295], oderiv-count=964000
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31153.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.16,0.19 0.21,0.24,0.27,0.30,0.31 0.32,0.33,0.35,0.43), mean=0.266, stddev=0.0418], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.26,0.34 0.42,0.46,0.52,0.58,0.61 0.63,0.67,0.71,0.90), mean=0.515, stddev=0.0894]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000127637, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02072, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.28,0.29 0.31,0.35,0.49,0.66,0.72 0.76,0.85,0.90,0.98), mean=0.505, stddev=0.155], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.60,0.63,0.72 0.78,0.81,0.88,1.0,1.1 1.3,1.4,1.5,1.9), mean=0.929, stddev=0.176], bias-{mean,stddev}=0.01266,0.01637, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000127637, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1088, w_fc-rms=0.04441, w_oc-rms=0.07486, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00660794, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.59,0.60,0.63 0.65,0.68,0.72,0.76,0.79 0.82,0.84,0.85,0.89), mean=0.72, stddev=0.0553], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.14,0.15,0.17,0.18,0.19 0.20,0.20,0.21,0.21), mean=0.167, stddev=0.0219] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00660794, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.53,0.56,0.58 0.60,0.63,0.67,0.72,0.77 0.80,0.84,0.86,0.88), mean=0.678, stddev=0.0649], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.13 0.14,0.16,0.18,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.177, stddev=0.0234] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0276402, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.80,-0.73,-0.59 -0.45,-0.31,-0.02,0.30,0.42 0.59,0.81,0.83,0.92), mean=-0.00352, stddev=0.354], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.19,0.20,0.23 0.30,0.37,0.44,0.49,0.52 0.54,0.56,0.57,0.60), mean=0.425, stddev=0.0865] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00660794, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.50,0.53 0.55,0.59,0.64,0.67,0.70 0.71,0.77,0.79,0.87), mean=0.633, stddev=0.0598], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.12,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.176, stddev=0.0177] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00660794, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.72,-0.64,-0.53 -0.39,-0.28,-0.006,0.24,0.36 0.54,0.70,0.76,0.84), mean=-0.00476, stddev=0.311], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.35,0.39 0.47,0.55,0.64,0.69,0.72 0.73,0.75,0.75,0.81), mean=0.616, stddev=0.0993] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.47e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.55439e-06, count-zeroing-boundaries=219568
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.196694
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000127637, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08993, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.99,1.1,1.1,1.1 1.2,1.3,1.7,2.6,2.7 2.8,2.8,2.9,3.1), mean=1.95, stddev=0.638], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.89,1.0,1.1 1.1,1.2,1.4,1.6,1.8 2.0,2.1,2.2,2.3), mean=1.42, stddev=0.275], bias-{mean,stddev}=-0.02374,0.638, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000127637, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04295, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.59,0.61 0.62,0.64,0.68,0.72,0.75 0.79,0.83,0.90,2.1), mean=0.688, stddev=0.0818], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.98,1.1,1.1,1.1 1.2,1.2,1.7,2.5,2.6 2.7,2.7,2.7,2.9), mean=1.88, stddev=0.595], bias-{mean,stddev}=4.989e-09,0.02147, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.03,0.42), mean=0.0168, stddev=0.0137], oderiv-count=540160
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/365.mdl exp/nnet3/tdnn_lstm1c_sp/366.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.58032 tdnn2.affine:3.38152 lstm1.W_all:2.59407 lstm1.lstm_nonlin:0.0571084 lstm1.W_rp:1.11244 tdnn3.affine:2.36562 tdnn4.affine:2.42489 lstm2.W_all:1.74351 lstm2.lstm_nonlin:0.0304249 lstm2.W_rp:0.731818 tdnn5.affine:1.93633 tdnn6.affine:2.0671 lstm3.W_all:2.02228 lstm3.lstm_nonlin:0.0489817 lstm3.W_rp:0.794818 output.affine:2.06647 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8306 tdnn2.affine:10.6179 lstm1.W_all:20.5256 lstm1.lstm_nonlin:2.29653 lstm1.W_rp:15.2324 tdnn3.affine:8.19529 tdnn4.affine:7.58488 lstm2.W_all:16.8516 lstm2.lstm_nonlin:1.56821 lstm2.W_rp:14.3958 tdnn5.affine:7.72757 tdnn6.affine:7.56554 lstm3.W_all:24.1131 lstm3.lstm_nonlin:3.17676 lstm3.W_rp:34.634 output.affine:31.7843 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.279024 tdnn2.affine:0.318785 lstm1.W_all:0.126399 lstm1.lstm_nonlin:0.0248208 lstm1.W_rp:0.0730562 tdnn3.affine:0.289194 tdnn4.affine:0.319308 lstm2.W_all:0.103398 lstm2.lstm_nonlin:0.0193538 lstm2.W_rp:0.0507844 tdnn5.affine:0.250156 tdnn6.affine:0.272412 lstm3.W_all:0.0838077 lstm3.lstm_nonlin:0.0154289 lstm3.W_rp:0.0229264 output.affine:0.0649521 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:26:07 KST 2020, elapsed time 0 seconds
