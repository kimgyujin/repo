# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/179.mdl exp/nnet3/tdnn_lstm1c_sp/180.mdl 
# Started at Thu Jul 30 11:12:12 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/179.mdl exp/nnet3/tdnn_lstm1c_sp/180.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000170586, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01706, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.01 0.03,0.17,0.30,0.35,0.38 0.41,0.45,0.50,0.64), mean=0.267, stddev=0.127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.11,0.13,0.36,0.48,0.58 0.72,0.81,0.83,0.92), mean=0.34, stddev=0.19], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.06,0.20,0.49,0.68 0.84,0.98,1.1,1.2), mean=0.287, stddev=0.262], bias-{mean,stddev}=0.0002145,0.02171, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.97e+04, self-repaired-proportion=0.294231, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.26,-0.14,-0.12,-0.07 -0.04,-0.005,0.04,0.14,0.20 0.25,0.33,0.36,0.79), mean=0.0639, stddev=0.107], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-1.2,-0.87,-0.68 -0.36,-0.08,0.46,0.91,1.1 1.3,1.5,1.7,2.4), mean=0.418, stddev=0.611], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.35,0.88,1.2 1.4,1.7,2.0,3.4), mean=0.467, stddev=0.516], oderiv-count=45696
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-2839.65, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000170586, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.007407, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.25 0.26,0.27,0.29,0.31,0.33 0.33,0.34,0.35,0.37), mean=0.291, stddev=0.0264], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.003,0.004,0.006 0.01,0.09,0.18,0.20,0.22 0.23,0.25,0.26,0.32), mean=0.153, stddev=0.0716], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.06,0.08,0.16,0.35,0.50 0.63,0.74,0.81,0.91), mean=0.227, stddev=0.185], bias-{mean,stddev}=0.0005499,0.01181, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-2757.73, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000170586, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004523, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,3e-05,0.0001,0.0006 0.005,0.04,0.09,0.15,0.18 0.22,0.24,0.26,0.33), mean=0.0963, stddev=0.0633], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.07,0.10,0.22,0.24,0.25 0.26,0.27,0.28,0.34), mean=0.196, stddev=0.0645], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,1e-07,1e-07,2e-07 2e-07,0.05,0.11,0.23,0.33 0.45,0.59,0.66,0.82), mean=0.148, stddev=0.144], bias-{mean,stddev}=-3.799e-05,0.001549, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000170586, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001444, w_fc-rms=0.001589, w_oc-rms=0.003157, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000329924, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.61,-0.41,-0.19 0.02,0.21,0.50,0.76,0.98 1.3,1.4,1.5,2.3), mean=0.497, stddev=0.405], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.62,-0.30,-0.19,-0.06 0.03,0.12,0.25,0.33,0.43 0.49,0.56,0.62,0.99), mean=0.233, stddev=0.173] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000329924, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.69,-0.33,-0.20,-0.04 0.15,0.33,0.51,0.73,0.90 1.1,1.3,1.4,2.1), mean=0.528, stddev=0.329], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.43,-0.19,-0.11,0.01 0.10,0.18,0.25,0.32,0.38 0.43,0.51,0.54,0.71), mean=0.245, stddev=0.128] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000329924, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.8,-6.0,-5.1,-3.9 -3.0,-1.9,-0.07,1.6,2.5 3.5,4.4,4.6,7.2), mean=-0.138, stddev=2.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.9,-3.4,-2.8,-2.2 -1.6,-0.57,1.0,2.1,2.8 3.4,4.2,4.3,5.9), mean=0.826, stddev=1.66] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000329924, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.5,-0.99,-0.69,-0.34 -0.11,0.14,0.49,0.75,0.94 1.2,1.4,1.6,2.1), mean=0.443, stddev=0.455], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.35,-0.23,-0.14,-0.03 0.03,0.13,0.25,0.38,0.50 0.60,0.68,0.75,1.0), mean=0.266, stddev=0.188] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00159383, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.4,-4.4,-4.0,-2.9 -2.3,-1.3,-0.009,1.2,1.8 2.6,3.4,3.6,6.2), mean=-0.0724, stddev=1.65], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.4,-1.5,-1.2,-0.75 -0.33,0.16,1.0,1.6,1.9 2.3,2.9,3.2,3.9), mean=0.908, stddev=0.945] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.62e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2424
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0451791
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000170586, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005836, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.06,0.12,0.18,0.19 0.20,0.21,0.22,0.23), mean=0.119, stddev=0.0596], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.003,0.005 0.01,0.06,0.09,0.12,0.13 0.14,0.16,0.17,0.20), mean=0.0857, stddev=0.039], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 7e-08,1e-07,5e-07,0.01,0.26 0.36,0.44,0.48,0.53), mean=0.0527, stddev=0.122], bias-{mean,stddev}=0.0002772,0.007403, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000170586, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006759, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.13,0.14 0.15,0.16,0.18,0.21,0.23 0.25,0.26,0.26,0.29), mean=0.186, stddev=0.0321], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.06,0.11,0.21,0.23 0.24,0.25,0.26,0.27), mean=0.134, stddev=0.0764], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,6e-08,7e-08 1e-07,2e-07,3e-05,0.15,0.37 0.50,0.62,0.65,0.76), mean=0.084, stddev=0.169], bias-{mean,stddev}=0.0005273,0.009127, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.13,0.18 0.20,0.30,0.35,0.51), mean=0.0628, stddev=0.0854], oderiv-count=47360
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-2511.97, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000170586, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005387, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.19,0.20,0.21,0.23,0.23 0.24,0.25,0.25,0.28), mean=0.212, stddev=0.0158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.10,0.10,0.12,0.14,0.15 0.15,0.16,0.17,0.19), mean=0.121, stddev=0.0188], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.07,0.08,0.14,0.26,0.35 0.43,0.52,0.55,0.62), mean=0.177, stddev=0.119], bias-{mean,stddev}=0.0004838,0.006505, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.03,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0244, stddev=0.0192], oderiv-count=86272
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-2266.21, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000170586, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003111, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,2e-07,3e-07,7e-07 3e-06,5e-05,0.06,0.11,0.14 0.16,0.17,0.18,0.27), mean=0.058, stddev=0.0541], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.12,0.15,0.16,0.17 0.18,0.19,0.20,0.23), mean=0.135, stddev=0.043], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,8e-08,9e-08,1e-07 4e-06,0.03,0.07,0.15,0.23 0.31,0.43,0.47,0.56), mean=0.0989, stddev=0.102], bias-{mean,stddev}=0.0001646,0.003864, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000170586, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0008224, w_fc-rms=0.0008968, w_oc-rms=0.001451, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00035225, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.63,-0.54,-0.30 -0.09,0.19,0.50,0.72,1.0 1.2,1.4,1.6,1.9), mean=0.475, stddev=0.429], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,-0.01,0.02,0.08 0.12,0.20,0.25,0.33,0.38 0.44,0.49,0.52,0.60), mean=0.257, stddev=0.101] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00035225, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.69,-0.52,-0.23 -0.03,0.22,0.50,0.65,0.92 1.2,1.4,1.6,2.2), mean=0.469, stddev=0.403], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.32,0.02,0.05,0.12 0.16,0.22,0.25,0.29,0.34 0.40,0.44,0.48,0.59), mean=0.251, stddev=0.0828] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.232952, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-6.6,-5.5,-4.5 -2.8,-1.6,-0.004,1.3,2.8 4.0,5.3,5.9,7.8), mean=-0.0956, stddev=2.38], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.5,-2.4,-2.2,-1.0 -0.42,0.34,1.0,1.7,2.3 2.7,3.3,3.7,4.7), mean=0.973, stddev=1.11] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.00035225, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-0.84,-0.74,-0.47 -0.22,0.17,0.50,0.65,0.95 1.2,1.6,1.7,2.8), mean=0.429, stddev=0.486], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.18,-0.04,-0.004,0.07 0.14,0.21,0.25,0.35,0.42 0.49,0.55,0.61,0.73), mean=0.269, stddev=0.12] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.00035225, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.2,-4.6,-4.0,-2.9 -2.1,-1.1,-0.002,0.93,2.2 2.9,3.7,4.4,6.0), mean=-0.0441, stddev=1.67], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-1.6,-1.2,-0.18 0.21,0.63,1.0,1.3,1.7 2.0,2.5,2.7,4.0), mean=0.949, stddev=0.694] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.39e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2103
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0451791
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000170586, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004058, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.06,0.08,0.12,0.12 0.13,0.14,0.14,0.14), mean=0.0881, stddev=0.0284], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-05,0.0001,0.0001,0.0002 0.0004,0.001,0.07,0.09,0.10 0.10,0.11,0.11,0.16), mean=0.0519, stddev=0.0399], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,4e-08,5e-08 7e-08,1e-07,4e-06,0.10,0.19 0.24,0.27,0.29,0.33), mean=0.0425, stddev=0.0822], bias-{mean,stddev}=-0.0005823,0.005975, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000170586, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00534, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.11 0.12,0.12,0.14,0.17,0.19 0.20,0.21,0.22,0.25), mean=0.147, stddev=0.0265], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.06 0.07,0.07,0.11,0.16,0.17 0.18,0.18,0.19,0.20), mean=0.115, stddev=0.0412], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,6e-08,7e-08 1e-07,2e-07,0.001,0.15,0.28 0.38,0.47,0.50,0.57), mean=0.074, stddev=0.13], bias-{mean,stddev}=0.0002508,0.005685, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-2020.45, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000170586, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004389, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.14,0.15 0.15,0.16,0.17,0.19,0.20 0.20,0.21,0.21,0.24), mean=0.172, stddev=0.0179], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.08 0.08,0.09,0.10,0.11,0.12 0.13,0.14,0.15,0.18), mean=0.0988, stddev=0.0161], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.11,0.21,0.29 0.37,0.44,0.46,0.53), mean=0.14, stddev=0.102], bias-{mean,stddev}=-8.13e-05,0.005598, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.96e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.2,-1.8,-1.2,-0.58 -0.22,0.20,1.0,1.8,2.1 2.5,2.9,3.0,4.2), mean=0.984, stddev=0.976], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.0,-3.0,-2.4,-1.8 -1.2,-0.54,0.36,1.5,2.0 2.6,3.0,3.2,4.8), mean=0.4, stddev=1.29]
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-1774.69, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000170586, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004083, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.05,0.07,0.15,0.18 0.20,0.21,0.22,0.30), mean=0.0902, stddev=0.052], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.10,0.11 0.12,0.13,0.16,0.23,0.28 0.30,0.31,0.32,0.34), mean=0.176, stddev=0.0594], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,4e-06,9e-06,0.0002 0.02,0.03,0.07,0.18,0.33 0.46,0.57,0.61,0.70), mean=0.123, stddev=0.14], bias-{mean,stddev}=-0.000273,0.001446, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000170586, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.00166, w_fc-rms=0.002448, w_oc-rms=0.003216, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000382583, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.1,-1.2,-0.96,-0.46 -0.07,0.28,0.83,1.4,1.6 1.9,2.2,2.3,2.8), mean=0.8, stddev=0.716], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.48,-0.35,-0.25,-0.16 -0.07,0.03,0.19,0.35,0.43 0.49,0.58,0.64,0.77), mean=0.183, stddev=0.2] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000382583, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-0.92,-0.75,-0.37 -0.08,0.33,1.0,1.6,2.1 2.4,2.8,3.0,3.6), mean=0.996, stddev=0.846], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.47,-0.40,-0.31,-0.17 -0.08,0.02,0.20,0.36,0.45 0.52,0.57,0.60,0.96), mean=0.194, stddev=0.209] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00252417, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-17,-12,-9.7,-7.0 -5.3,-3.0,0.30,3.6,6.1 7.6,8.7,10,17), mean=0.303, stddev=4.45], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.2,-3.8,-3.1,-2.3 -1.7,-0.88,0.76,2.2,2.9 3.5,4.1,5.0,6.8), mean=0.695, stddev=1.83] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000382583, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-1.9,-1.2,-0.71 -0.37,0.03,0.77,1.4,1.7 2.1,2.4,2.6,3.2), mean=0.715, stddev=0.872], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.63,-0.42,-0.30,-0.21 -0.10,0.003,0.19,0.39,0.50 0.59,0.68,0.77,0.86), mean=0.195, stddev=0.241] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.268862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-13,-9.0,-7.2,-5.8 -4.1,-2.4,0.24,3.0,4.8 6.1,7.1,7.9,14), mean=0.254, stddev=3.55], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.0,-2.9,-2.2,-1.6 -1.1,-0.61,0.52,1.5,2.2 2.6,3.5,4.1,5.3), mean=0.52, stddev=1.37] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.16e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1730
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0451791
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000170586, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005101, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.06,0.06,0.09,0.15,0.16 0.16,0.17,0.18,0.18), mean=0.109, stddev=0.0419], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.05 0.06,0.07,0.08,0.09,0.10 0.11,0.11,0.12,0.13), mean=0.0803, stddev=0.0176], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,8e-07,1e-06,2e-06 4e-06,2e-05,0.02,0.15,0.22 0.27,0.31,0.33,0.38), mean=0.0702, stddev=0.0927], bias-{mean,stddev}=-7.333e-05,0.01233, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000170586, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005687, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.04 0.05,0.06,0.08,0.11,0.13 0.14,0.17,0.18,0.39), mean=0.0859, stddev=0.0321], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.17 0.17,0.18,0.24,0.32,0.33 0.34,0.35,0.35,0.38), mean=0.253, stddev=0.0651], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-07,9e-07,1e-06,2e-06 4e-06,2e-05,0.01,0.37,0.51 0.60,0.66,0.70,0.75), mean=0.146, stddev=0.216], bias-{mean,stddev}=1.135e-10,0.001355, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.75733 tdnn2.affine:6.67708 lstm1.W_all:5.25924 lstm1.lstm_nonlin:0.0870708 lstm1.W_rp:2.14937 tdnn3.affine:4.30936 tdnn4.affine:4.85455 lstm2.W_all:3.6212 lstm2.lstm_nonlin:0.0431794 lstm2.W_rp:1.49509 tdnn5.affine:3.40359 tdnn6.affine:3.95473 lstm3.W_all:4.74746 lstm3.lstm_nonlin:0.0996329 lstm3.W_rp:1.88596 output.affine:4.20694 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.4435 tdnn2.affine:10.3841 lstm1.W_all:18.4875 lstm1.lstm_nonlin:1.16576 lstm1.W_rp:12.0866 tdnn3.affine:7.56978 tdnn4.affine:7.71851 lstm2.W_all:15.3305 lstm2.lstm_nonlin:0.4663 lstm2.W_rp:10.7888 tdnn5.affine:6.71057 tdnn6.affine:7.20432 lstm3.W_all:21.9917 lstm3.lstm_nonlin:1.8736 lstm3.W_rp:27.4195 output.affine:28.5362 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.584863 tdnn2.affine:0.636957 lstm1.W_all:0.283121 lstm1.lstm_nonlin:0.0745688 lstm1.W_rp:0.177203 tdnn3.affine:0.565292 tdnn4.affine:0.625381 lstm2.W_all:0.23529 lstm2.lstm_nonlin:0.0926829 lstm2.W_rp:0.138081 tdnn5.affine:0.501774 tdnn6.affine:0.544734 lstm3.W_all:0.215035 lstm3.lstm_nonlin:0.0536534 lstm3.W_rp:0.0689251 output.affine:0.14737 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:12:13 KST 2020, elapsed time 1 seconds
