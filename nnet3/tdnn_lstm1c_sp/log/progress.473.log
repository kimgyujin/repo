# nnet3-info exp/nnet3/tdnn_lstm1c_sp/473.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/472.mdl exp/nnet3/tdnn_lstm1c_sp/473.mdl 
# Started at Thu Jul 30 13:08:44 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/473.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=6.47454e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03218, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.003,0.005,0.007 0.009,0.03,0.57,0.72,0.78 0.85,0.92,0.95,1.4), mean=0.467, stddev=0.304], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.19,0.23,0.70,0.92,1.1 1.3,1.3,1.4,1.4), mean=0.644, stddev=0.351], bias-{mean,stddev}=-0.007644,0.06011, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.23e+06, self-repaired-proportion=0.157068, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,3e-05,3e-05,4e-05 7e-05,0.0002,0.03,0.08,0.11 0.12,0.13,0.15,0.20), mean=0.0423, stddev=0.0437], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.02,0.02,0.04 0.05,0.07,0.35,0.60,0.71 0.78,0.88,0.91,0.98), mean=0.343, stddev=0.264], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.01,0.01 0.02,0.06,0.46,0.65,0.80 0.88,1.0,1.1,1.9), mean=0.436, stddev=0.294], oderiv-count=1.22656e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=41319.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,1e-05,2e-05,4e-05 6e-05,0.0002,0.03,0.08,0.10 0.12,0.14,0.15,0.20), mean=0.0412, stddev=0.0429], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.0001,0.0001,0.0002 0.0003,0.001,0.07,0.10,0.12 0.13,0.14,0.14,0.16), mean=0.0575, stddev=0.0476]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.47454e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01133, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.33,0.34 0.36,0.39,0.43,0.49,0.54 0.57,0.61,0.63,0.70), mean=0.442, stddev=0.0678], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.005,0.01,0.27,0.33,0.36 0.38,0.42,0.49,0.76), mean=0.216, stddev=0.142], bias-{mean,stddev}=-0.03554,0.03731, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.92e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.17,0.18 0.19,0.21,0.24,0.27,0.30 0.31,0.33,0.34,0.41), mean=0.243, stddev=0.0414], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.34,0.37,0.39 0.40,0.42,0.44,0.47,0.49 0.51,0.52,0.53,0.56), mean=0.443, stddev=0.0378], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.05,0.06,0.07,0.08 0.09,0.10,0.10,0.12), mean=0.0602, stddev=0.0128], oderiv-count=1.13888e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40439, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.18 0.19,0.21,0.24,0.28,0.30 0.32,0.33,0.35,0.43), mean=0.245, stddev=0.0429], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.31,0.33,0.35 0.37,0.39,0.44,0.49,0.52 0.55,0.57,0.60,0.65), mean=0.443, stddev=0.0598]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.47454e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01726, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,5e-07,1e-06,8e-06 0.0002,0.18,0.39,0.58,0.65 0.72,0.79,0.88,1.1), mean=0.377, stddev=0.227], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.34,0.38,0.41 0.46,0.68,0.80,0.89,0.95 1.0,1.1,1.1,1.3), mean=0.768, stddev=0.172], bias-{mean,stddev}=0.0001828,0.02133, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.47454e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04237, w_fc-rms=0.02155, w_oc-rms=0.03817, count=1.51e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064619, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.40,0.41,0.43 0.44,0.45,0.48,0.50,0.55 0.64,0.71,0.72,0.76), mean=0.49, stddev=0.0607], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0145] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064619, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.43,0.44 0.45,0.47,0.50,0.51,0.55 0.61,0.66,0.70,0.76), mean=0.499, stddev=0.0506], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.236, stddev=0.0126] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00648676, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.81,-0.76,-0.43 -0.28,-0.12,0.0004,0.15,0.27 0.57,0.73,0.79,0.85), mean=0.0131, stddev=0.278], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.30,0.31,0.36 0.41,0.46,0.57,0.71,1.0 1.0,1.0,1.0,1.0), mean=0.617, stddev=0.199] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0064619, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.40 0.41,0.43,0.46,0.50,0.50 0.52,0.55,0.59,0.65), mean=0.462, stddev=0.0419], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0182] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0102017, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.82,-0.75,-0.38 -0.22,-0.11,0.0004,0.13,0.23 0.46,0.67,0.80,0.90), mean=0.0107, stddev=0.255], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.26,0.31,0.45 0.65,0.74,0.83,0.90,1.0 1.0,1.0,1.0,1.0), mean=0.812, stddev=0.154] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=5.07577e-07, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=5.07944e-06, count-zeroing-boundaries=295308
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0198347
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.47454e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03791, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.44,0.45 0.50,0.55,0.82,1.1,1.1 1.2,1.2,1.3,1.3), mean=0.825, stddev=0.26], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.0005,0.0008,0.002 0.006,0.40,0.56,0.71,0.86 1.0,1.2,1.3,1.5), mean=0.533, stddev=0.3], bias-{mean,stddev}=0.01058,0.2294, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=6.47454e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01217, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.26 0.27,0.29,0.33,0.38,0.41 0.44,0.46,0.48,0.55), mean=0.336, stddev=0.0543], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.16,0.18,0.26,0.35,0.38 0.40,0.43,0.44,0.47), mean=0.264, stddev=0.0858], bias-{mean,stddev}=0.00133,0.01063, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0.000194742, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.009,0.02,0.02 0.03,0.05,0.08,0.12,0.13 0.15,0.16,0.16,0.19), mean=0.0823, stddev=0.0379], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.16 0.20,0.27,0.42,0.54,0.60 0.63,0.66,0.69,0.83), mean=0.411, stddev=0.146], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.09,0.10,0.11,0.15,0.18 0.20,0.24,0.25,0.32), mean=0.125, stddev=0.0383], oderiv-count=1.07872e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37797.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.02,0.02 0.03,0.05,0.08,0.11,0.13 0.15,0.16,0.17,0.18), mean=0.0819, stddev=0.0375], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.07,0.08 0.09,0.11,0.14,0.17,0.18 0.19,0.20,0.21,0.23), mean=0.138, stddev=0.0347]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.47454e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008043, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.26,0.27 0.27,0.29,0.31,0.35,0.36 0.38,0.40,0.40,0.42), mean=0.316, stddev=0.0343], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.12,0.13,0.14 0.14,0.15,0.17,0.20,0.22 0.24,0.27,0.29,0.37), mean=0.18, stddev=0.0333], bias-{mean,stddev}=-0.02844,0.01644, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.83e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.23,0.27,0.28 0.30,0.31,0.32,0.35), mean=0.238, stddev=0.0332], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.35,0.36,0.37 0.38,0.40,0.42,0.44,0.45 0.47,0.48,0.49,0.51), mean=0.419, stddev=0.0304], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.04,0.04,0.04 0.04,0.05,0.05,0.05), mean=0.0383, stddev=0.00285], oderiv-count=1.04704e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35155.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.18,0.19 0.20,0.21,0.24,0.27,0.28 0.30,0.32,0.32,0.36), mean=0.241, stddev=0.0334], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.36,0.38,0.39 0.41,0.43,0.47,0.52,0.54 0.57,0.60,0.62,0.71), mean=0.473, stddev=0.0552]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.47454e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01409, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-06,5e-06,1e-05 5e-05,0.0009,0.31,0.50,0.58 0.63,0.68,0.71,0.83), mean=0.277, stddev=0.228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.29,0.33 0.39,0.58,0.65,0.72,0.76 0.79,0.85,0.88,1.3), mean=0.628, stddev=0.134], bias-{mean,stddev}=0.002207,0.02537, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.47454e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02708, w_fc-rms=0.01398, w_oc-rms=0.03511, count=1.38e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652054, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.45,0.46 0.46,0.48,0.50,0.51,0.54 0.57,0.61,0.63,0.70), mean=0.5, stddev=0.0355], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0129] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652054, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.45,0.46 0.46,0.47,0.50,0.51,0.53 0.55,0.59,0.61,0.67), mean=0.497, stddev=0.0309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.011] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00652054, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.72,-0.63,-0.34 -0.21,-0.09,6e-05,0.10,0.25 0.40,0.54,0.60,0.72), mean=0.00466, stddev=0.22], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.39,0.42,0.45 0.49,0.54,0.63,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.724, stddev=0.211] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00652054, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.45,0.46,0.50,0.50,0.51 0.52,0.55,0.56,0.73), mean=0.486, stddev=0.0305], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0172] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00652054, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.60,-0.58,-0.31 -0.18,-0.08,7e-05,0.10,0.23 0.37,0.48,0.54,0.73), mean=0.00491, stddev=0.199], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.50,0.56,0.65 0.71,0.77,0.87,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.868, stddev=0.124] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=260382
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0198347
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.47454e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03577, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.45,0.51 0.54,0.59,0.78,1.0,1.1 1.1,1.1,1.1,1.3), mean=0.789, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.002 0.004,0.01,0.58,0.76,0.85 0.95,1.0,1.1,1.3), mean=0.46, stddev=0.348], bias-{mean,stddev}=-0.003569,0.1843, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=6.47454e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01134, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.21,0.23 0.25,0.26,0.30,0.36,0.39 0.42,0.46,0.47,0.50), mean=0.311, stddev=0.0588], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.16,0.18,0.23,0.32,0.35 0.38,0.40,0.41,0.45), mean=0.247, stddev=0.0753], bias-{mean,stddev}=0.00211,0.007348, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.01e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.01,0.02,0.02 0.03,0.04,0.06,0.09,0.11 0.12,0.13,0.14,0.16), mean=0.0646, stddev=0.0296], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.15 0.20,0.27,0.40,0.49,0.54 0.57,0.61,0.63,0.66), mean=0.381, stddev=0.126], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.08,0.09,0.09 0.09,0.10,0.12,0.14,0.17 0.20,0.22,0.22,0.26), mean=0.123, stddev=0.0315], oderiv-count=1.04474e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32513.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.02 0.03,0.04,0.06,0.09,0.11 0.12,0.13,0.14,0.16), mean=0.0662, stddev=0.0294], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.10,0.12,0.14,0.16 0.17,0.18,0.18,0.20), mean=0.119, stddev=0.0289]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.47454e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008066, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.17,0.23 0.25,0.28,0.31,0.36,0.38 0.39,0.41,0.41,0.43), mean=0.314, stddev=0.0523], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.13 0.14,0.15,0.17,0.20,0.23 0.26,0.31,0.33,0.39), mean=0.179, stddev=0.0419], bias-{mean,stddev}=-0.02436,0.02049, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.72e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.18 0.20,0.22,0.25,0.28,0.29 0.31,0.32,0.33,0.36), mean=0.246, stddev=0.0388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.37 0.37,0.39,0.41,0.44,0.45 0.46,0.48,0.49,0.50), mean=0.413, stddev=0.0296], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0313, stddev=0.00359], oderiv-count=967520
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29871.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.18 0.20,0.22,0.25,0.28,0.29 0.31,0.32,0.34,0.36), mean=0.25, stddev=0.0392], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.27,0.34 0.39,0.43,0.50,0.56,0.59 0.61,0.65,0.67,0.80), mean=0.491, stddev=0.085]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.47454e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02013, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.21,0.22,0.25 0.27,0.32,0.46,0.67,0.73 0.78,0.82,0.85,0.92), mean=0.484, stddev=0.169], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.49,0.54,0.65 0.71,0.74,0.82,1.1,1.2 1.3,1.4,1.5,1.8), mean=0.892, stddev=0.216], bias-{mean,stddev}=0.01392,0.01673, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.47454e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.07195, w_fc-rms=0.03885, w_oc-rms=0.05447, count=1.25e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0065914, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.54,0.56,0.57 0.60,0.63,0.67,0.71,0.74 0.76,0.77,0.78,0.82), mean=0.67, stddev=0.053], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.17,0.18,0.19,0.20,0.20 0.20,0.21,0.21,0.21), mean=0.185, stddev=0.0133] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0065914, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.50,0.52,0.53 0.55,0.57,0.60,0.64,0.71 0.75,0.78,0.78,0.84), mean=0.612, stddev=0.0611], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.16,0.16 0.17,0.19,0.20,0.21,0.21 0.22,0.22,0.22,0.22), mean=0.198, stddev=0.0162] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0101385, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.78,-0.70,-0.53 -0.41,-0.28,-0.01,0.25,0.40 0.53,0.64,0.73,0.85), mean=-0.0088, stddev=0.318], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.26,0.28 0.32,0.35,0.40,0.44,0.46 0.47,0.50,0.51,0.54), mean=0.393, stddev=0.0563] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0065914, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.50,0.52,0.54 0.56,0.59,0.63,0.67,0.69 0.71,0.75,0.78,0.91), mean=0.631, stddev=0.0536], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.13,0.14,0.15 0.15,0.16,0.18,0.18,0.19 0.19,0.19,0.19,0.20), mean=0.174, stddev=0.0144] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0254705, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.91,-0.83,-0.72,-0.58 -0.41,-0.27,-0.02,0.24,0.37 0.55,0.69,0.76,0.89), mean=-0.0117, stddev=0.323], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.21,0.28 0.35,0.44,0.54,0.59,0.61 0.63,0.65,0.65,0.70), mean=0.51, stddev=0.104] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.25889e-06, count-zeroing-boundaries=221347
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0198347
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.47454e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08498, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.93,1.0,1.0,1.1 1.1,1.2,1.7,2.5,2.5 2.6,2.7,2.8,2.9), mean=1.84, stddev=0.6], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,1.0,1.1,1.1 1.2,1.2,1.3,1.5,1.6 1.7,1.8,1.9,2.0), mean=1.36, stddev=0.199], bias-{mean,stddev}=-0.03722,0.3801, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=6.47454e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0403, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.54,0.55,0.57 0.58,0.60,0.64,0.68,0.70 0.73,0.77,0.83,2.2), mean=0.645, stddev=0.0829], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.96,1.0,1.0 1.1,1.2,1.6,2.3,2.4 2.5,2.5,2.6,2.6), mean=1.76, stddev=0.572], bias-{mean,stddev}=3.137e-09,0.02575, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=573760
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/472.mdl exp/nnet3/tdnn_lstm1c_sp/473.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.59994 tdnn2.affine:2.34718 lstm1.W_all:1.75322 lstm1.lstm_nonlin:0.0349756 lstm1.W_rp:0.810734 tdnn3.affine:1.64024 tdnn4.affine:1.66817 lstm2.W_all:1.19069 lstm2.lstm_nonlin:0.0181927 lstm2.W_rp:0.553895 tdnn5.affine:1.35935 tdnn6.affine:1.4777 lstm3.W_all:1.72535 lstm3.lstm_nonlin:0.0407223 lstm3.W_rp:0.592256 output.affine:1.27551 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.7845 tdnn2.affine:10.2691 lstm1.W_all:20.0899 lstm1.lstm_nonlin:1.39017 lstm1.W_rp:14.4236 tdnn3.affine:7.75638 tdnn4.affine:7.28299 lstm2.W_all:16.422 lstm2.lstm_nonlin:1.06016 lstm2.W_rp:13.4836 tdnn5.affine:7.22329 tdnn6.affine:7.30133 lstm3.W_all:23.4228 lstm3.lstm_nonlin:2.24044 lstm3.W_rp:31.8491 output.affine:29.8314 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.202719 tdnn2.affine:0.227794 lstm1.W_all:0.0872174 lstm1.lstm_nonlin:0.0250563 lstm1.W_rp:0.0561267 tdnn3.affine:0.211203 tdnn4.affine:0.228833 lstm2.W_all:0.0724554 lstm2.lstm_nonlin:0.0171018 lstm2.W_rp:0.041011 tdnn5.affine:0.187696 tdnn6.affine:0.201994 lstm3.W_all:0.0736048 lstm3.lstm_nonlin:0.0180249 lstm3.W_rp:0.0185808 output.affine:0.0427421 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 13:08:44 KST 2020, elapsed time 0 seconds
