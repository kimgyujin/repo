# nnet3-info exp/nnet3/tdnn_lstm1c_sp/244.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/243.mdl exp/nnet3/tdnn_lstm1c_sp/244.mdl 
# Started at Thu Jul 30 11:37:32 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/244.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000276734, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03407, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.008,0.01,0.02 0.04,0.14,0.60,0.72,0.80 0.87,0.95,1.0,1.2), mean=0.522, stddev=0.275], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.18,0.22,0.63,0.89,1.3 1.6,1.7,1.8,1.9), mean=0.651, stddev=0.424], bias-{mean,stddev}=-0.0008862,0.07012, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.11e+06, self-repaired-proportion=0.187128, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,3e-06,5e-06,3e-05 9e-05,0.001,0.07,0.10,0.12 0.14,0.16,0.17,0.23), mean=0.0645, stddev=0.0476], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0007,0.001,0.008 0.03,0.06,0.45,0.61,0.70 0.79,0.86,0.89,0.99), mean=0.401, stddev=0.253], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.01,0.01,0.03 0.06,0.18,0.27,0.36,0.42 0.50,0.56,0.61,1.2), mean=0.272, stddev=0.144], oderiv-count=1.20115e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34930.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,2e-06,5e-06,1e-05 8e-05,0.001,0.07,0.10,0.12 0.15,0.17,0.19,0.25), mean=0.0644, stddev=0.0486], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,9e-05,0.0001,0.0003 0.0009,0.008,0.11,0.13,0.15 0.15,0.17,0.17,0.22), mean=0.0919, stddev=0.0547]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000276734, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01323, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.41,0.43 0.44,0.46,0.51,0.57,0.60 0.65,0.66,0.70,0.80), mean=0.518, stddev=0.0667], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.006,0.01 0.03,0.09,0.31,0.36,0.40 0.42,0.46,0.49,0.79), mean=0.269, stddev=0.137], bias-{mean,stddev}=-0.01378,0.03995, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.30 0.31,0.33,0.36,0.40,0.42 0.44,0.48,0.50,0.60), mean=0.367, stddev=0.0461], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.38,0.38,0.40 0.41,0.43,0.45,0.48,0.50 0.51,0.52,0.53,0.56), mean=0.454, stddev=0.0334], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.06), mean=0.0374, stddev=0.00711], oderiv-count=1.11277e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34182.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.30,0.31 0.32,0.34,0.38,0.42,0.45 0.48,0.52,0.55,0.62), mean=0.383, stddev=0.0527], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.56,0.57,0.58 0.60,0.62,0.68,0.75,0.79 0.81,0.87,0.90,0.97), mean=0.687, stddev=0.0737]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000276734, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01684, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,8e-06,3e-05,0.0002 0.002,0.14,0.37,0.57,0.67 0.72,0.80,0.84,1.1), mean=0.363, stddev=0.229], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.31,0.32,0.38 0.45,0.67,0.78,0.86,0.92 0.98,1.0,1.1,1.2), mean=0.749, stddev=0.17], bias-{mean,stddev}=-0.0005342,0.02605, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000276734, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03749, w_fc-rms=0.02679, w_oc-rms=0.03553, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635436, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.43,0.44 0.45,0.46,0.48,0.50,0.53 0.63,0.77,0.78,0.82), mean=0.493, stddev=0.0652], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.19 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0199] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635436, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.41,0.42,0.44 0.45,0.47,0.49,0.51,0.55 0.61,0.71,0.75,0.79), mean=0.499, stddev=0.058], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.234, stddev=0.0178] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0363385, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.90,-0.85,-0.51 -0.26,-0.15,0.001,0.18,0.31 0.48,0.80,0.85,0.92), mean=0.0123, stddev=0.289], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.28 0.39,0.46,0.59,0.81,1.0 1.0,1.0,1.0,1.0), mean=0.618, stddev=0.215] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00635436, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.41 0.42,0.43,0.45,0.50,0.50 0.51,0.53,0.55,0.59), mean=0.458, stddev=0.0345], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.19 0.20,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0196] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00635436, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.77,-0.66,-0.34 -0.19,-0.10,0.001,0.13,0.22 0.33,0.63,0.75,0.83), mean=0.00895, stddev=0.226], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.31,0.36,0.55 0.73,0.80,0.87,0.94,1.0 1.0,1.0,1.0,1.0), mean=0.852, stddev=0.136] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=2.21057e-05, count-zeroing-boundaries=294042
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.136088
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000276734, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03582, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.28 0.30,0.37,0.72,1.1,1.2 1.2,1.3,1.3,1.4), mean=0.733, stddev=0.36], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.002,0.003 0.01,0.25,0.47,0.66,0.79 1.1,1.4,1.6,1.8), mean=0.482, stddev=0.319], bias-{mean,stddev}=0.01241,0.2642, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000276734, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0141, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.23,0.23,0.25 0.28,0.31,0.38,0.46,0.50 0.55,0.58,0.59,0.78), mean=0.384, stddev=0.0885], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.12,0.14,0.29,0.43,0.47 0.50,0.52,0.54,0.56), mean=0.288, stddev=0.144], bias-{mean,stddev}=0.003726,0.01991, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.76e+05, self-repaired-proportion=0.00384615, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.04,0.04,0.06 0.07,0.09,0.12,0.14,0.16 0.18,0.20,0.21,0.23), mean=0.117, stddev=0.0354], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.17,0.20,0.27 0.32,0.38,0.50,0.59,0.64 0.67,0.70,0.71,0.81), mean=0.486, stddev=0.123], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.07,0.08,0.09,0.11,0.12 0.13,0.15,0.18,0.25), mean=0.0941, stddev=0.0228], oderiv-count=1.00275e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31938.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.04,0.05,0.06 0.08,0.09,0.12,0.15,0.17 0.18,0.20,0.21,0.23), mean=0.122, stddev=0.037], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.12,0.13,0.15 0.16,0.18,0.20,0.22,0.24 0.25,0.27,0.28,0.31), mean=0.198, stddev=0.0328]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000276734, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009994, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.30,0.32,0.33 0.34,0.36,0.39,0.43,0.45 0.48,0.50,0.52,0.63), mean=0.392, stddev=0.0461], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.14,0.15,0.16 0.17,0.19,0.22,0.26,0.28 0.30,0.33,0.36,0.42), mean=0.223, stddev=0.045], bias-{mean,stddev}=-0.02006,0.01954, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.89e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.28,0.30,0.33,0.36,0.38 0.40,0.41,0.42,0.51), mean=0.329, stddev=0.0389], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.39 0.40,0.41,0.44,0.46,0.47 0.49,0.50,0.50,0.51), mean=0.436, stddev=0.0296], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.03, stddev=0.0022], oderiv-count=998624
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29694.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.26,0.26,0.28 0.29,0.31,0.34,0.38,0.39 0.41,0.43,0.45,0.56), mean=0.343, stddev=0.0415], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.55,0.57 0.59,0.61,0.65,0.72,0.76 0.79,0.85,0.86,1.2), mean=0.662, stddev=0.0729]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000276734, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01435, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,6e-07,1e-06,2e-06 1e-05,0.0002,0.30,0.52,0.60 0.64,0.69,0.72,1.2), mean=0.277, stddev=0.239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.28,0.29,0.37 0.48,0.59,0.65,0.72,0.76 0.81,0.87,1.0,1.7), mean=0.641, stddev=0.134], bias-{mean,stddev}=-0.002737,0.05644, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000276734, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01561, w_fc-rms=0.01016, w_oc-rms=0.02051, count=1.34e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640901, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.41,0.42,0.43 0.44,0.46,0.50,0.51,0.56 0.62,0.66,0.68,0.79), mean=0.498, stddev=0.0562], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.017] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640901, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.38,0.39,0.41 0.43,0.45,0.50,0.50,0.52 0.55,0.59,0.64,0.77), mean=0.486, stddev=0.0463], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.21 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.237, stddev=0.0148] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.016895, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.83,-0.62,-0.43 -0.32,-0.16,0.0003,0.14,0.33 0.49,0.73,0.79,0.91), mean=0.00486, stddev=0.27], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.28,0.41 0.47,0.53,0.62,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.715, stddev=0.231] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00640901, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.41 0.43,0.44,0.49,0.50,0.51 0.54,0.57,0.60,0.70), mean=0.479, stddev=0.0418], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.19,0.19,0.20 0.21,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0177] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00640901, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.52,-0.44,-0.29 -0.21,-0.10,-0.0001,0.10,0.23 0.34,0.53,0.59,0.73), mean=0.00519, stddev=0.193], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.47,0.58,0.69 0.77,0.83,0.90,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.897, stddev=0.111] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=259338
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.136088
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000276734, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03456, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.37,0.41,0.45 0.48,0.50,0.71,0.99,1.0 1.1,1.1,1.2,1.2), mean=0.751, stddev=0.239], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0005,0.0007,0.0009 0.002,0.005,0.51,0.73,0.85 0.97,1.1,1.2,1.4), mean=0.43, stddev=0.354], bias-{mean,stddev}=-0.0009958,0.1912, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000276734, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01324, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.26 0.28,0.30,0.35,0.42,0.47 0.53,0.57,0.59,0.62), mean=0.361, stddev=0.0781], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.15,0.16 0.17,0.19,0.27,0.39,0.42 0.44,0.46,0.48,0.51), mean=0.285, stddev=0.0982], bias-{mean,stddev}=0.001454,0.01054, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.73e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.04 0.05,0.06,0.09,0.11,0.12 0.12,0.13,0.14,0.16), mean=0.0849, stddev=0.0263], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.20,0.23 0.28,0.35,0.46,0.56,0.60 0.62,0.64,0.65,0.66), mean=0.45, stddev=0.117], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.08 0.09,0.09,0.10,0.12,0.13 0.15,0.17,0.17,0.20), mean=0.104, stddev=0.0199], oderiv-count=993984
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27451, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.04 0.05,0.07,0.09,0.12,0.13 0.14,0.15,0.16,0.18), mean=0.0938, stddev=0.0293], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.12 0.13,0.14,0.16,0.18,0.19 0.19,0.21,0.21,0.23), mean=0.157, stddev=0.0236]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000276734, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009862, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.24,0.28 0.31,0.34,0.38,0.44,0.47 0.48,0.50,0.51,0.59), mean=0.385, stddev=0.0622], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.15,0.15,0.16 0.17,0.18,0.21,0.26,0.29 0.32,0.36,0.39,0.45), mean=0.219, stddev=0.0511], bias-{mean,stddev}=-0.01881,0.02523, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=6.43e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.24,0.26 0.28,0.30,0.34,0.37,0.38 0.40,0.41,0.43,0.50), mean=0.335, stddev=0.0425], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.37 0.38,0.39,0.42,0.44,0.46 0.46,0.48,0.48,0.53), mean=0.419, stddev=0.0302], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0247, stddev=0.00189], oderiv-count=999520
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25207.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.25,0.28 0.29,0.32,0.36,0.39,0.41 0.43,0.45,0.47,0.54), mean=0.357, stddev=0.0478], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.40,0.43,0.52 0.59,0.63,0.71,0.78,0.83 0.88,0.93,0.94,1.0), mean=0.707, stddev=0.104]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000276734, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02011, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.25,0.26,0.28 0.30,0.34,0.46,0.66,0.74 0.78,0.82,0.84,1.4), mean=0.487, stddev=0.159], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.53,0.58,0.61,0.68 0.70,0.73,0.80,1.0,1.3 1.3,1.5,1.7,2.0), mean=0.886, stddev=0.235], bias-{mean,stddev}=0.02261,0.02353, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000276734, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.05706, w_fc-rms=0.04432, w_oc-rms=0.04311, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647498, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.59,0.60,0.62 0.63,0.65,0.70,0.73,0.76 0.78,0.80,0.82,0.83), mean=0.695, stddev=0.0489], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.13,0.15 0.16,0.17,0.18,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.182, stddev=0.0168] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647498, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.48,0.51,0.53 0.55,0.58,0.62,0.67,0.72 0.76,0.82,0.82,0.85), mean=0.629, stddev=0.0681], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.13,0.15 0.17,0.18,0.20,0.21,0.21 0.21,0.22,0.22,0.22), mean=0.191, stddev=0.019] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0202485, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.78,-0.68,-0.53 -0.38,-0.22,-0.007,0.23,0.34 0.55,0.71,0.76,0.88), mean=-0.000495, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.23,0.26 0.32,0.38,0.44,0.48,0.50 0.52,0.53,0.54,0.56), mean=0.427, stddev=0.074] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00647498, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.52,0.54,0.56 0.59,0.61,0.65,0.68,0.70 0.72,0.76,0.77,0.84), mean=0.65, stddev=0.048], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.13,0.14,0.15 0.16,0.17,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.18, stddev=0.0151] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00647498, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.83,-0.74,-0.66,-0.50 -0.32,-0.19,-0.006,0.20,0.30 0.48,0.68,0.70,0.85), mean=-0.00175, stddev=0.274], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.29,0.33,0.40 0.47,0.55,0.64,0.68,0.70 0.72,0.73,0.73,0.75), mean=0.612, stddev=0.0959] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=220539
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.136088
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000276734, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07918, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.0,1.1 1.1,1.2,1.6,2.3,2.3 2.4,2.5,2.5,2.6), mean=1.73, stddev=0.503], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.67,0.96,1.0 1.1,1.1,1.2,1.4,1.6 1.7,1.8,1.8,1.9), mean=1.26, stddev=0.208], bias-{mean,stddev}=-0.03941,0.4539, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000276734, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04014, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.53,0.54,0.56 0.58,0.59,0.63,0.68,0.71 0.74,0.80,0.85,2.2), mean=0.641, stddev=0.0866], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.3,2.3 2.4,2.5,2.5,2.6), mean=1.78, stddev=0.476], bias-{mean,stddev}=5.56e-09,0.02715, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0136], oderiv-count=597440
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/243.mdl exp/nnet3/tdnn_lstm1c_sp/244.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.04238 tdnn2.affine:5.96294 lstm1.W_all:5.27565 lstm1.lstm_nonlin:0.123354 lstm1.W_rp:2.18871 tdnn3.affine:3.79967 tdnn4.affine:4.38675 lstm2.W_all:3.72792 lstm2.lstm_nonlin:0.0608657 lstm2.W_rp:1.6684 tdnn5.affine:3.13261 tdnn6.affine:3.74981 lstm3.W_all:4.93415 lstm3.lstm_nonlin:0.136302 lstm3.W_rp:2.00287 output.affine:4.40333 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:13.5502 tdnn2.affine:11.9575 lstm1.W_all:19.6143 lstm1.lstm_nonlin:1.32687 lstm1.W_rp:13.8432 tdnn3.affine:8.99068 tdnn4.affine:9.02395 lstm2.W_all:16.8857 lstm2.lstm_nonlin:0.631749 lstm2.W_rp:13.0768 tdnn5.affine:8.43332 tdnn6.affine:8.91166 lstm3.W_all:23.4251 lstm3.lstm_nonlin:1.91857 lstm3.W_rp:30.0256 output.affine:29.7182 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.468574 tdnn2.affine:0.519 lstm1.W_all:0.278646 lstm1.lstm_nonlin:0.0965618 lstm1.W_rp:0.164689 tdnn3.affine:0.435964 tdnn4.affine:0.502274 lstm2.W_all:0.228363 lstm2.lstm_nonlin:0.100246 lstm2.W_rp:0.133271 tdnn5.affine:0.388314 tdnn6.affine:0.441775 lstm3.W_all:0.218564 lstm3.lstm_nonlin:0.0739125 lstm3.W_rp:0.0673003 output.affine:0.152145 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:37:32 KST 2020, elapsed time 0 seconds
