# nnet3-info exp/nnet3/tdnn_lstm1c_sp/121.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/120.mdl exp/nnet3/tdnn_lstm1c_sp/121.mdl 
# Started at Thu Jul 30 10:48:58 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/121.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000205037, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0299, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.01,0.02 0.05,0.41,0.52,0.61,0.67 0.71,0.78,0.90,1.0), mean=0.474, stddev=0.208], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.13,0.14,0.15 0.17,0.21,0.58,0.79,1.1 1.4,1.4,1.6,1.6), mean=0.58, stddev=0.358], bias-{mean,stddev}=0.002129,0.05991, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.01e+06, self-repaired-proportion=0.124487, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,2e-06,6e-06,3e-05 0.0001,0.02,0.06,0.09,0.10 0.11,0.14,0.15,0.18), mean=0.058, stddev=0.0367], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.001,0.003,0.008 0.04,0.18,0.48,0.62,0.71 0.79,0.87,0.91,0.95), mean=0.437, stddev=0.238], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.11,0.28,0.37,0.47,0.53 0.61,0.72,0.79,1.5), mean=0.367, stddev=0.164], oderiv-count=1.17197e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35372, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-06,3e-06,1e-05 0.0001,0.02,0.06,0.08,0.10 0.11,0.13,0.14,0.20), mean=0.0555, stddev=0.0364], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,5e-05,8e-05,0.0002 0.0007,0.05,0.09,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.0778, stddev=0.0393]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000205037, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01227, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.38,0.39,0.41 0.42,0.44,0.48,0.52,0.55 0.57,0.61,0.62,0.73), mean=0.482, stddev=0.053], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.007,0.01 0.03,0.23,0.29,0.33,0.35 0.37,0.39,0.41,0.79), mean=0.258, stddev=0.109], bias-{mean,stddev}=0.0002596,0.02744, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.17e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.28,0.29 0.30,0.31,0.34,0.37,0.39 0.41,0.45,0.47,0.52), mean=0.346, stddev=0.0399], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.40,0.41 0.42,0.43,0.46,0.48,0.50 0.51,0.52,0.53,0.56), mean=0.459, stddev=0.0292], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.07,0.07,0.08), mean=0.0439, stddev=0.00858], oderiv-count=1.2016e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34597.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.25,0.28 0.29,0.31,0.33,0.37,0.39 0.41,0.44,0.45,0.52), mean=0.339, stddev=0.0423], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.49 0.52,0.54,0.59,0.65,0.69 0.72,0.74,0.75,0.91), mean=0.598, stddev=0.0678]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000205037, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01709, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,0.001,0.003,0.02 0.09,0.21,0.38,0.56,0.66 0.73,0.82,0.88,1.2), mean=0.383, stddev=0.208], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.37,0.40,0.45 0.51,0.67,0.80,0.87,0.92 0.96,1.0,1.0,1.2), mean=0.764, stddev=0.153], bias-{mean,stddev}=-0.00224,0.02171, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000205037, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02164, w_fc-rms=0.0335, w_oc-rms=0.04785, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00617637, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.43,0.44 0.45,0.46,0.49,0.52,0.56 0.60,0.65,0.68,0.71), mean=0.497, stddev=0.0498], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.229, stddev=0.0148] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00617637, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.36,0.38,0.40 0.42,0.44,0.48,0.53,0.59 0.67,0.74,0.80,0.85), mean=0.496, stddev=0.0796], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.17,0.20 0.21,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0194] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00892134, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.79,-0.70,-0.53 -0.36,-0.18,-0.008,0.18,0.35 0.57,0.74,0.78,0.83), mean=-0.00235, stddev=0.294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.29,0.32,0.36 0.42,0.47,0.59,0.72,0.92 0.99,1.0,1.0,1.0), mean=0.615, stddev=0.173] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00617637, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.41,0.42 0.43,0.44,0.47,0.50,0.53 0.55,0.58,0.59,0.64), mean=0.476, stddev=0.0414], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.19 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.222, stddev=0.0171] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0170057, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.95,-0.83,-0.66,-0.49 -0.33,-0.18,-0.003,0.15,0.31 0.53,0.75,0.84,0.91), mean=-0.00169, stddev=0.284], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.21,0.27,0.46 0.62,0.73,0.83,0.89,0.96 1.0,1.0,1.0,1.0), mean=0.795, stddev=0.156] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.99e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=298353
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000205037, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03088, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.18,0.19 0.21,0.25,0.44,0.98,1.0 1.1,1.1,1.2,1.2), mean=0.607, stddev=0.357], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.02,0.03,0.07 0.16,0.31,0.47,0.59,0.67 0.79,0.94,1.0,1.1), mean=0.455, stddev=0.202], bias-{mean,stddev}=-0.001552,0.04539, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000205037, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01246, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.20,0.21,0.24 0.25,0.27,0.33,0.40,0.43 0.46,0.50,0.52,0.70), mean=0.34, stddev=0.0739], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.09,0.19,0.40,0.44 0.48,0.51,0.52,0.58), mean=0.241, stddev=0.15], bias-{mean,stddev}=-0.003416,0.03041, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.91e+05, self-repaired-proportion=0.00210197, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.04,0.05,0.06 0.07,0.09,0.12,0.16,0.17 0.19,0.20,0.22,0.24), mean=0.124, stddev=0.0394], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.17,0.20,0.25 0.30,0.36,0.49,0.60,0.65 0.67,0.69,0.72,0.75), mean=0.483, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.07,0.07,0.08,0.10,0.11 0.12,0.13,0.14,0.22), mean=0.0852, stddev=0.0174], oderiv-count=1.11475e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32275.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.04,0.05,0.06 0.07,0.08,0.12,0.15,0.17 0.18,0.20,0.20,0.25), mean=0.12, stddev=0.0391], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.12,0.13,0.15 0.16,0.17,0.20,0.22,0.24 0.25,0.28,0.30,0.36), mean=0.198, stddev=0.0361]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000205037, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009156, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.28,0.29,0.30 0.32,0.33,0.35,0.39,0.41 0.42,0.44,0.46,0.57), mean=0.36, stddev=0.0386], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.14,0.15,0.16 0.17,0.18,0.20,0.23,0.25 0.26,0.28,0.29,0.41), mean=0.206, stddev=0.0346], bias-{mean,stddev}=-0.009796,0.01676, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.21,0.22,0.23 0.25,0.26,0.29,0.32,0.34 0.36,0.37,0.39,0.42), mean=0.292, stddev=0.0384], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.50,0.51,0.51,0.52), mean=0.443, stddev=0.0325], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.04), mean=0.0324, stddev=0.00283], oderiv-count=1.10022e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29953, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.22,0.23 0.24,0.25,0.28,0.32,0.34 0.36,0.38,0.38,0.44), mean=0.287, stddev=0.0408], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.47 0.49,0.50,0.55,0.60,0.64 0.67,0.73,0.76,0.87), mean=0.559, stddev=0.0663]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000205037, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01345, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,1e-05,2e-05,4e-05 0.0002,0.003,0.28,0.48,0.56 0.61,0.66,0.68,1.1), mean=0.264, stddev=0.219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.27,0.32 0.37,0.53,0.63,0.69,0.72 0.75,0.80,0.83,1.2), mean=0.6, stddev=0.13], bias-{mean,stddev}=-0.003491,0.02424, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000205037, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01351, w_fc-rms=0.01731, w_oc-rms=0.02214, count=1.34e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622819, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.43,0.44,0.44 0.46,0.47,0.50,0.50,0.53 0.56,0.60,0.61,0.64), mean=0.495, stddev=0.0334], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0159] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622819, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.41,0.42 0.43,0.45,0.50,0.50,0.52 0.55,0.60,0.64,0.71), mean=0.485, stddev=0.0423], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0123] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00813929, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.76,-0.67,-0.52,-0.34 -0.22,-0.10,-8e-05,0.11,0.24 0.39,0.54,0.59,0.76), mean=0.00597, stddev=0.21], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.43,0.44,0.50 0.54,0.58,0.65,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.741, stddev=0.196] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622819, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.46,0.50,0.50,0.52 0.54,0.57,0.60,0.62), mean=0.488, stddev=0.0345], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0166] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00622819, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.79,-0.69,-0.50,-0.34 -0.19,-0.10,5e-05,0.11,0.23 0.35,0.54,0.58,0.80), mean=0.00689, stddev=0.205], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.44,0.54,0.67 0.76,0.82,0.89,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.885, stddev=0.114] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.74e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=263160
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000205037, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02838, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.32,0.34,0.36 0.37,0.39,0.54,0.85,0.87 0.92,0.95,0.97,0.99), mean=0.612, stddev=0.212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.002,0.002,0.003 0.005,0.01,0.45,0.60,0.68 0.77,0.83,0.88,0.96), mean=0.366, stddev=0.274], bias-{mean,stddev}=-0.007904,0.1004, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000205037, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01162, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.18,0.21 0.23,0.25,0.30,0.37,0.43 0.48,0.53,0.54,0.63), mean=0.314, stddev=0.0803], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.15,0.16,0.23,0.34,0.37 0.39,0.42,0.43,0.50), mean=0.25, stddev=0.0883], bias-{mean,stddev}=0.001283,0.01629, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.84e+05, self-repaired-proportion=0.000105374, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.03 0.04,0.05,0.08,0.11,0.12 0.13,0.14,0.15,0.18), mean=0.081, stddev=0.0297], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.13,0.17 0.22,0.30,0.43,0.53,0.58 0.62,0.66,0.67,0.76), mean=0.419, stddev=0.132], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.07,0.07,0.07 0.08,0.08,0.09,0.11,0.12 0.14,0.15,0.17,0.27), mean=0.0953, stddev=0.0214], oderiv-count=922368
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27630.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.05,0.08,0.10,0.12 0.13,0.14,0.15,0.17), mean=0.0793, stddev=0.03], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.10 0.11,0.12,0.14,0.17,0.18 0.19,0.21,0.22,0.23), mean=0.143, stddev=0.0304]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000205037, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008758, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.26,0.27 0.29,0.30,0.34,0.38,0.41 0.42,0.44,0.45,0.49), mean=0.343, stddev=0.0471], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.14 0.15,0.16,0.19,0.22,0.25 0.27,0.32,0.34,0.43), mean=0.195, stddev=0.0441], bias-{mean,stddev}=-0.01128,0.01434, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.51e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.21,0.23 0.25,0.26,0.29,0.32,0.34 0.35,0.37,0.40,0.51), mean=0.294, stddev=0.0388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.34,0.34,0.36 0.37,0.39,0.42,0.45,0.47 0.48,0.50,0.50,0.54), mean=0.419, stddev=0.0364], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0273, stddev=0.00288], oderiv-count=873280
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25308.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.22 0.24,0.26,0.29,0.32,0.34 0.36,0.38,0.40,0.49), mean=0.293, stddev=0.0414], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.42,0.43,0.45 0.47,0.51,0.57,0.64,0.70 0.73,0.77,0.80,0.97), mean=0.58, stddev=0.0854]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000205037, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01961, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.24 0.31,0.36,0.43,0.63,0.75 0.80,0.84,0.86,1.3), mean=0.472, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.58,0.59,0.60 0.62,0.65,0.73,1.1,1.4 1.4,1.5,1.5,1.7), mean=0.85, stddev=0.278], bias-{mean,stddev}=0.007323,0.02295, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000205037, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.03216, w_fc-rms=0.0452, w_oc-rms=0.06393, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629072, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.48 0.50,0.52,0.58,0.65,0.67 0.69,0.71,0.71,0.80), mean=0.585, stddev=0.0665], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.20,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.203, stddev=0.0103] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00629072, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.49 0.50,0.54,0.59,0.64,0.68 0.71,0.74,0.76,0.88), mean=0.594, stddev=0.0671], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.16,0.17,0.18 0.19,0.19,0.20,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.202, stddev=0.0139] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0083952, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.83,-0.74,-0.52 -0.34,-0.21,-0.03,0.21,0.34 0.45,0.73,0.81,0.88), mean=-0.00999, stddev=0.302], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.25,0.27,0.31 0.35,0.39,0.44,0.47,0.49 0.51,0.52,0.53,0.56), mean=0.426, stddev=0.0584] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00774875, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.55,0.56,0.57 0.60,0.62,0.66,0.70,0.73 0.75,0.77,0.78,0.95), mean=0.664, stddev=0.0543], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.14,0.15,0.16 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.21,0.21), mean=0.181, stddev=0.0159] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.028263, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.99,-0.90,-0.78,-0.53 -0.34,-0.19,-0.02,0.19,0.34 0.49,0.78,0.87,0.98), mean=-0.00935, stddev=0.309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.16,0.20,0.32 0.45,0.54,0.63,0.68,0.70 0.71,0.72,0.72,0.74), mean=0.594, stddev=0.117] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=8.93631e-06, count-zeroing-boundaries=223806
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000205037, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07023, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.1 1.2,1.2,1.6,1.9,2.0 2.0,2.1,2.1,2.1), mean=1.57, stddev=0.334], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.58,0.78,0.89 0.95,1.0,1.1,1.2,1.3 1.4,1.4,1.4,1.6), mean=1.12, stddev=0.156], bias-{mean,stddev}=0.004242,0.08746, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000205037, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.0399, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.51,0.52,0.54 0.56,0.58,0.63,0.68,0.72 0.75,0.80,0.83,1.9), mean=0.638, stddev=0.0843], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.3,1.3 1.4,1.4,1.8,2.1,2.2 2.3,2.3,2.4,2.5), mean=1.8, stddev=0.343], bias-{mean,stddev}=6.126e-09,0.0229, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0137], oderiv-count=591360
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/120.mdl exp/nnet3/tdnn_lstm1c_sp/121.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:7.80042 tdnn2.affine:7.89921 lstm1.W_all:6.70364 lstm1.lstm_nonlin:0.144399 lstm1.W_rp:2.75945 tdnn3.affine:4.91409 tdnn4.affine:5.65384 lstm2.W_all:4.5146 lstm2.lstm_nonlin:0.062885 lstm2.W_rp:1.89217 tdnn5.affine:3.96983 tdnn6.affine:4.70568 lstm3.W_all:6.21238 lstm3.lstm_nonlin:0.167849 lstm3.W_rp:2.47685 output.affine:5.30286 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.8868 tdnn2.affine:11.0649 lstm1.W_all:19.8941 lstm1.lstm_nonlin:1.42052 lstm1.W_rp:11.3792 tdnn3.affine:7.9681 tdnn4.affine:8.25854 lstm2.W_all:15.6784 lstm2.lstm_nonlin:0.711049 lstm2.W_rp:10.5626 tdnn5.affine:7.40846 tdnn6.affine:7.89872 lstm3.W_all:22.8251 lstm3.lstm_nonlin:1.93007 lstm3.W_rp:25.8619 output.affine:29.5283 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.650382 tdnn2.affine:0.713106 lstm1.W_all:0.336803 lstm1.lstm_nonlin:0.1004 lstm1.W_rp:0.242977 tdnn3.affine:0.619866 tdnn4.affine:0.691829 lstm2.W_all:0.288742 lstm2.lstm_nonlin:0.0886322 lstm2.W_rp:0.179841 tdnn5.affine:0.542134 tdnn6.affine:0.600495 lstm3.W_all:0.272893 lstm3.lstm_nonlin:0.0868792 lstm3.W_rp:0.0956249 output.affine:0.179304 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:48:58 KST 2020, elapsed time 0 seconds
