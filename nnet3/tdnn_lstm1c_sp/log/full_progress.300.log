# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/299.mdl exp/nnet3/tdnn_lstm1c_sp/300.mdl 
# Started at Thu Jul 30 11:59:47 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/299.mdl exp/nnet3/tdnn_lstm1c_sp/300.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000195231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01079, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.004,0.005 0.008,0.02,0.20,0.23,0.26 0.27,0.31,0.33,0.39), mean=0.162, stddev=0.0939], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.07 0.07,0.09,0.23,0.30,0.35 0.45,0.49,0.51,0.60), mean=0.217, stddev=0.116], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.04,0.13,0.31,0.43 0.53,0.62,0.68,0.75), mean=0.182, stddev=0.166], bias-{mean,stddev}=-8.224e-05,0.01355, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.11e+05, self-repaired-proportion=0.251923, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,-0.04,-0.02,-0.01 -0.002,-7e-05,0.05,0.12,0.16 0.19,0.21,0.24,0.44), mean=0.0632, stddev=0.0697], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.64,-0.53,-0.36 -0.19,0.005,0.42,0.72,0.88 0.98,1.1,1.1,1.3), mean=0.377, stddev=0.41], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.05,0.39,0.55 0.66,0.93,1.1,1.9), mean=0.198, stddev=0.277], oderiv-count=57984
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1918.55, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.68,-0.38,-0.25,-0.16 -0.09,-0.02,0.007,0.18,0.25 0.32,0.41,0.48,0.87), mean=0.058, stddev=0.157], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.11,0.15 0.18,0.21,0.22,0.30), mean=0.0412, stddev=0.0654]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000195231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004677, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.15,0.16 0.16,0.17,0.18,0.20,0.21 0.21,0.22,0.22,0.24), mean=0.184, stddev=0.0162], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.002,0.003 0.004,0.01,0.11,0.13,0.14 0.15,0.16,0.17,0.20), mean=0.0924, stddev=0.0533], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.04,0.05,0.11,0.23,0.32 0.40,0.46,0.50,0.56), mean=0.144, stddev=0.116], bias-{mean,stddev}=-0.0001051,0.007519, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.01,0.03,0.05,0.06 0.06,0.07,0.07,0.09), mean=0.0315, stddev=0.0195], oderiv-count=120672
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1885.78, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.36,-0.22,-0.14 -0.03,0.10,0.29,0.49,0.61 0.65,0.75,0.81,1.2), mean=0.282, stddev=0.261], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.51,0.77,0.92 1.0,1.1,1.2,1.4), mean=0.447, stddev=0.368]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000195231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002841, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-09,1e-07,3e-07,2e-06 8e-05,0.02,0.06,0.10,0.11 0.13,0.15,0.15,0.26), mean=0.0599, stddev=0.0408], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.05,0.14,0.15,0.16 0.16,0.18,0.18,0.20), mean=0.121, stddev=0.0454], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,8e-08,8e-08,1e-07 2e-07,0.03,0.07,0.15,0.22 0.29,0.36,0.40,0.48), mean=0.0938, stddev=0.0894], bias-{mean,stddev}=-5.682e-05,0.0009023, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000195231, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001516, w_fc-rms=0.001075, w_oc-rms=0.002467, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000953178, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.0,-2.6,-2.0,-1.4 -0.91,-0.28,0.52,1.4,2.1 2.7,3.5,3.8,4.9), mean=0.609, stddev=1.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.6,-0.99,-0.80,-0.56 -0.27,0.06,0.31,0.85,1.1 1.6,1.8,2.0,2.6), mean=0.424, stddev=0.589] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000953178, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.1,-1.9,-1.5,-0.77 -0.27,0.21,0.61,1.5,2.1 2.7,3.5,3.7,6.0), mean=0.817, stddev=1.06], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-0.95,-0.68,-0.46 -0.16,0.06,0.25,0.62,0.87 1.1,1.3,1.4,3.1), mean=0.302, stddev=0.46] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.390964, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-23,-20,-17,-12 -8.4,-4.5,-0.009,5.4,8.4 12,16,18,23), mean=0.102, stddev=7.03], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-19,-11,-9.5,-6.4 -4.4,-1.4,1.6,6.7,9.7 13,14,15,18), mean=2.46, stddev=5.49] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000953178, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-2.8,-2.5,-1.8 -0.78,-0.18,0.52,1.6,2.4 3.2,3.9,4.6,5.4), mean=0.711, stddev=1.36], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-1.2,-0.97,-0.53 -0.26,0.08,0.35,1.0,1.4 1.7,2.2,2.5,3.1), mean=0.514, stddev=0.705] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.000953178, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-13,-8.7,-8.2,-6.0 -4.2,-2.6,-0.01,2.6,4.6 6.4,8.4,9.1,13), mean=0.0874, stddev=3.58], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.2,-1.8,-1.3,-0.67 0.08,0.83,1.6,3.2,4.0 4.8,5.6,6.2,8.2), mean=1.87, stddev=1.65] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-2.27e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-339
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.287603
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000195231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003656, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.05,0.08,0.11,0.11 0.12,0.12,0.12,0.15), mean=0.078, stddev=0.0293], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0002,0.0004 0.002,0.04,0.06,0.07,0.08 0.08,0.09,0.09,0.10), mean=0.0531, stddev=0.0257], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.08,0.17 0.21,0.24,0.28,0.31), mean=0.0366, stddev=0.0749], bias-{mean,stddev}=2.49e-05,0.003641, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000195231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004836, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.09,0.10,0.10 0.11,0.12,0.13,0.15,0.16 0.17,0.18,0.18,0.20), mean=0.133, stddev=0.0223], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.06,0.10,0.14,0.15 0.16,0.17,0.17,0.18), mean=0.102, stddev=0.041], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-09,3e-08,4e-08,5e-08 7e-08,1e-07,1e-05,0.16,0.27 0.33,0.40,0.43,0.47), mean=0.0682, stddev=0.117], bias-{mean,stddev}=0.0001773,0.002515, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.12e+05, self-repaired-proportion=-0.0150962, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.02,-0.003,0.001,0.02 0.03,0.05,0.09,0.14,0.17 0.19,0.21,0.23,0.30), mean=0.0963, stddev=0.0531], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.14,-0.06,-0.004,0.12 0.21,0.29,0.51,0.66,0.75 0.80,0.87,0.91,0.98), mean=0.487, stddev=0.21]
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1787.48, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.34,-0.17,-0.15,-0.10 -0.05,0.002,0.10,0.21,0.27 0.32,0.37,0.42,0.63), mean=0.108, stddev=0.129], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.12,0.18,0.21 0.23,0.25,0.26,0.32), mean=0.102, stddev=0.0825]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000195231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003612, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.12,0.12,0.13 0.13,0.13,0.14,0.15,0.16 0.16,0.17,0.17,0.18), mean=0.142, stddev=0.0104], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.06,0.06,0.06 0.07,0.07,0.08,0.09,0.10 0.10,0.11,0.11,0.13), mean=0.0813, stddev=0.0129], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.10,0.18,0.23 0.28,0.32,0.35,0.38), mean=0.121, stddev=0.0753], bias-{mean,stddev}=0.0002242,0.004087, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.47e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.53,-0.38,-0.27,-0.06 0.07,0.18,0.51,0.86,1.0 1.1,1.3,1.3,1.7), mean=0.526, stddev=0.378], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.91,-0.65,-0.50 -0.25,-0.02,0.38,0.81,1.0 1.3,1.5,1.6,1.9), mean=0.39, stddev=0.52], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.05,0.06 0.07,0.08,0.08,0.10), mean=0.0213, stddev=0.0264], oderiv-count=21088
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1689.18, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.33,-0.20,-0.13,-0.06 0.03,0.14,0.29,0.44,0.54 0.60,0.71,0.74,1.0), mean=0.29, stddev=0.199], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.51,0.73,0.83 0.91,1.0,1.1,1.5), mean=0.458, stddev=0.32]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000195231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002054, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,2e-07,4e-07,1e-06 4e-06,9e-05,0.04,0.07,0.09 0.10,0.11,0.12,0.14), mean=0.0388, stddev=0.0352], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.05,0.10,0.11,0.11 0.12,0.13,0.13,0.15), mean=0.0882, stddev=0.0317], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,6e-08,7e-08,9e-08 1e-05,0.02,0.05,0.10,0.15 0.21,0.28,0.30,0.35), mean=0.0664, stddev=0.0661], bias-{mean,stddev}=-6.855e-05,0.0008705, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000195231, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001092, w_fc-rms=0.0007052, w_oc-rms=0.001265, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000997184, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.3,-2.2,-1.4,-0.89 -0.47,0.06,0.50,1.1,1.7 2.2,2.9,3.3,4.7), mean=0.567, stddev=0.94], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.82,-0.67,-0.48 -0.21,0.14,0.25,0.64,0.93 1.1,1.3,1.6,2.2), mean=0.333, stddev=0.451] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000997184, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-0.77,-0.60,-0.17 0.09,0.50,0.52,1.5,2.2 3.0,4.0,4.3,6.2), mean=0.959, stddev=1], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-0.98,-0.71,-0.41 -0.14,0.14,0.25,0.40,0.69 0.91,1.2,1.4,2.2), mean=0.254, stddev=0.405] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.276074, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-16,-11,-10,-8.0 -5.9,-3.1,-0.004,2.7,6.1 8.8,11,12,15), mean=0.0332, stddev=4.6], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-10,-8.7,-7.5,-5.2 -2.5,-0.34,1.0,4.1,6.6 8.9,11,13,17), mean=1.64, stddev=3.91] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.000997184, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-2.5,-2.1,-1.2 -0.59,0.03,0.50,1.2,1.8 2.5,3.0,3.3,5.4), mean=0.564, stddev=1.06], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.0,-0.99,-0.79,-0.40 -0.05,0.24,0.25,0.72,1.0 1.3,1.5,1.8,2.4), mean=0.39, stddev=0.505] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.000997184, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.3,-6.6,-6.0,-4.6 -3.1,-1.5,-0.002,1.5,2.9 3.9,5.0,5.1,11), mean=-0.069, stddev=2.37], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.6,-1.8,-0.81,-0.31 0.28,0.89,1.0,2.2,3.2 3.9,4.6,5.2,8.5), mean=1.45, stddev=1.26] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.89e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-289
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.287603
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000195231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002578, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.06,0.07,0.08 0.08,0.08,0.09,0.09), mean=0.0565, stddev=0.0163], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0001,0.0002 0.0003,0.001,0.05,0.05,0.06 0.06,0.07,0.07,0.08), mean=0.0336, stddev=0.0245], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,9e-07,0.08,0.12 0.14,0.16,0.17,0.19), mean=0.0293, stddev=0.051], bias-{mean,stddev}=-5.753e-05,0.00246, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000195231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00404, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.12,0.13 0.14,0.15,0.16,0.16), mean=0.112, stddev=0.0158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.06,0.09,0.12,0.12 0.13,0.13,0.14,0.15), mean=0.0881, stddev=0.0269], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,6e-08 8e-08,1e-07,0.001,0.14,0.21 0.27,0.32,0.34,0.38), mean=0.063, stddev=0.0936], bias-{mean,stddev}=5.916e-05,0.001477, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0,0.18,0.35 0.45,0.60,0.75,1.1), mean=0.0835, stddev=0.173], oderiv-count=9792
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1590.87, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.35,-0.17,-0.15,-0.12 -0.07,-0.03,0.05,0.14,0.19 0.23,0.28,0.31,0.41), mean=0.0559, stddev=0.105], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.06,0.14,0.17 0.19,0.22,0.24,0.27), mean=0.0696, stddev=0.0722]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000195231, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002986, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.10,0.11,0.12,0.13,0.13 0.14,0.14,0.15,0.15), mean=0.117, stddev=0.013], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.07,0.08 0.08,0.09,0.09,0.10), mean=0.0676, stddev=0.00862], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.05,0.08,0.15,0.19 0.24,0.27,0.29,0.32), mean=0.0993, stddev=0.0636], bias-{mean,stddev}=-0.0002595,0.00328, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.01,0.03,0.04 0.04,0.05,0.05,0.06), mean=0.0148, stddev=0.0158], oderiv-count=40000
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=1492.57, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.41,-0.21,-0.16,-0.08 -0.01,0.08,0.26,0.43,0.52 0.62,0.69,0.72,1.1), mean=0.261, stddev=0.212], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.49,0.78,0.93 1.1,1.2,1.3,2.0), mean=0.461, stddev=0.381]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000195231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002102, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.03,0.08,0.10 0.11,0.11,0.12,0.13), mean=0.0447, stddev=0.0296], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.07,0.08,0.09,0.11,0.12 0.13,0.14,0.14,0.15), mean=0.0936, stddev=0.0206], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,4e-07,1e-05 0.01,0.02,0.04,0.10,0.17 0.23,0.29,0.30,0.35), mean=0.0661, stddev=0.0694], bias-{mean,stddev}=8.594e-05,0.000614, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000195231, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001261, w_fc-rms=0.001058, w_oc-rms=0.002599, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0010525, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-12,-3.8,-2.5,-2.0 -1.5,-0.83,0.31,1.4,2.1 2.8,3.6,4.2,17), mean=0.322, stddev=1.77], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.4,-1.2,-0.95,-0.58 -0.28,-0.03,0.47,0.89,1.1 1.3,1.6,1.6,4.4), mean=0.426, stddev=0.703] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0010525, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.1,-2.5,-1.9,-1.3 -0.70,-0.12,1.1,2.3,2.9 3.6,4.2,4.5,6.4), mean=1.12, stddev=1.48], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.2,-1.3,-1.1,-0.68 -0.50,-0.21,0.27,0.71,0.98 1.2,1.5,1.7,2.6), mean=0.257, stddev=0.622] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-1.48878, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-44,-27,-25,-21 -16,-9.2,0.21,9.3,14 18,25,29,45), mean=-0.0909, stddev=12.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-18,-12,-11,-6.8 -4.7,-2.0,3.1,7.2,9.9 13,16,19,44), mean=2.93, stddev=6.27] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0010525, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-10,-5.5,-4.6,-3.2 -2.2,-1.2,0.57,2.6,3.7 4.7,6.2,7.8,17), mean=0.712, stddev=2.63], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.5,-1.6,-1.3,-0.85 -0.50,-0.17,0.41,0.92,1.3 1.5,1.7,2.0,5.5), mean=0.376, stddev=0.844] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0010525, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-29,-21,-17,-13 -10,-6.7,0.17,6.2,10 13,16,19,32), mean=-0.13, stddev=8.22], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-16,-3.5,-2.8,-1.7 -0.24,0.99,3.3,5.6,6.7 7.9,9.5,10,28), mean=3.3, stddev=3.19] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.5e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-221
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.287603
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000195231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002616, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.05,0.08,0.08 0.08,0.09,0.09,0.09), mean=0.0555, stddev=0.0219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.06,0.10), mean=0.0414, stddev=0.00808], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,2e-07 3e-07,1e-06,0.006,0.08,0.11 0.13,0.16,0.18,0.21), mean=0.0349, stddev=0.0484], bias-{mean,stddev}=0.0001334,0.01851, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000195231, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003638, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.03 0.03,0.04,0.05,0.07,0.08 0.09,0.10,0.11,0.21), mean=0.0554, stddev=0.0192], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.09,0.10,0.13,0.21,0.22 0.23,0.23,0.24,0.25), mean=0.158, stddev=0.0544], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,3e-07,3e-07,3e-07 4e-07,1e-06,0.004,0.24,0.32 0.38,0.42,0.44,0.48), mean=0.0933, stddev=0.138], bias-{mean,stddev}=1.514e-10,0.0008559, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.003,0.02,0.02,0.03 0.03,0.04,0.04,0.40), mean=0.0158, stddev=0.0159], oderiv-count=80640

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.27215 tdnn2.affine:4.21583 lstm1.W_all:3.30397 lstm1.lstm_nonlin:0.0704415 lstm1.W_rp:1.34552 tdnn3.affine:3.08051 tdnn4.affine:3.25435 lstm2.W_all:2.38905 lstm2.lstm_nonlin:0.0413567 lstm2.W_rp:0.948813 tdnn5.affine:2.57347 tdnn6.affine:2.69081 lstm3.W_all:2.4439 lstm3.lstm_nonlin:0.0701512 lstm3.W_rp:1.0071 output.affine:2.69105 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.6177 tdnn2.affine:10.7545 lstm1.W_all:20.8381 lstm1.lstm_nonlin:2.13991 lstm1.W_rp:15.4653 tdnn3.affine:8.64516 tdnn4.affine:8.02509 lstm2.W_all:17.3947 lstm2.lstm_nonlin:1.44206 lstm2.W_rp:14.8589 tdnn5.affine:8.27167 tdnn6.affine:7.87257 lstm3.W_all:24.6365 lstm3.lstm_nonlin:3.06764 lstm3.W_rp:35.1275 output.affine:32.8077 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.338772 tdnn2.affine:0.391987 lstm1.W_all:0.158321 lstm1.lstm_nonlin:0.0332184 lstm1.W_rp:0.0869416 tdnn3.affine:0.356712 tdnn4.affine:0.404934 lstm2.W_all:0.137056 lstm2.lstm_nonlin:0.0289159 lstm2.W_rp:0.0637915 tdnn5.affine:0.311942 tdnn6.affine:0.341137 lstm3.W_all:0.0989933 lstm3.lstm_nonlin:0.0228281 lstm3.W_rp:0.0287015 output.affine:0.0819617 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 11:59:48 KST 2020, elapsed time 1 seconds
