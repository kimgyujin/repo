# nnet3-info exp/nnet3/tdnn_lstm1c_sp/12.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/11.mdl exp/nnet3/tdnn_lstm1c_sp/12.mdl 
# Started at Thu Jul 30 10:05:53 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/12.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000289714, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03077, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.009 0.02,0.05,0.56,0.68,0.75 0.79,0.85,0.95,1.0), mean=0.451, stddev=0.284], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.14,0.15 0.17,0.20,0.57,0.81,1.1 1.4,1.6,1.6,1.8), mean=0.589, stddev=0.382], bias-{mean,stddev}=-0.0007474,0.06451, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0.187123, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,4e-06,9e-06,2e-05 6e-05,0.0002,0.07,0.10,0.11 0.13,0.13,0.15,0.18), mean=0.0564, stddev=0.0453], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.001,0.002,0.01 0.03,0.06,0.44,0.61,0.69 0.76,0.82,0.83,0.93), mean=0.377, stddev=0.257], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.009,0.02 0.03,0.07,0.32,0.43,0.47 0.54,0.65,0.72,1.1), mean=0.291, stddev=0.174], oderiv-count=1.17453e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33731.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-09,2e-07,5e-07,2e-06 9e-06,0.0001,0.06,0.09,0.11 0.13,0.14,0.16,0.19), mean=0.0533, stddev=0.0444], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-07,2e-05,2e-05,5e-05 0.0001,0.001,0.10,0.12,0.13 0.14,0.15,0.15,0.16), mean=0.0768, stddev=0.0542]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000289714, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01281, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.41,0.43 0.44,0.47,0.50,0.54,0.56 0.59,0.61,0.62,0.67), mean=0.504, stddev=0.0467], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.002,0.003,0.006 0.01,0.03,0.32,0.37,0.40 0.42,0.45,0.47,0.57), mean=0.25, stddev=0.152], bias-{mean,stddev}=-0.002364,0.03269, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.39e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.27,0.28 0.29,0.31,0.33,0.36,0.38 0.39,0.41,0.42,0.45), mean=0.336, stddev=0.0333], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.40,0.40,0.41 0.43,0.44,0.46,0.49,0.50 0.52,0.53,0.54,0.55), mean=0.464, stddev=0.0306], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0413, stddev=0.007], oderiv-count=1.02963e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33009.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.26,0.28 0.29,0.30,0.33,0.36,0.38 0.40,0.42,0.43,0.47), mean=0.335, stddev=0.0362], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.46,0.46,0.49 0.51,0.54,0.59,0.64,0.67 0.70,0.73,0.74,0.84), mean=0.59, stddev=0.0628]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000289714, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01847, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.25 0.27,0.31,0.41,0.58,0.67 0.74,0.81,0.84,1.1), mean=0.445, stddev=0.153], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.51,0.52,0.55 0.58,0.74,0.87,0.93,0.96 0.98,1.0,1.0,1.1), mean=0.831, stddev=0.137], bias-{mean,stddev}=9.003e-07,0.2377, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000289714, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.2472, w_fc-rms=0.2433, w_oc-rms=0.2358, count=1.42e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616867, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.35,0.36,0.38 0.41,0.44,0.50,0.57,0.60 0.62,0.67,0.70,0.80), mean=0.503, stddev=0.0733], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.24 0.24,0.24,0.24,0.25), mean=0.226, stddev=0.0136] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616867, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.30,0.31,0.34 0.37,0.40,0.47,0.56,0.63 0.69,0.75,0.76,0.83), mean=0.484, stddev=0.102], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.17,0.19 0.20,0.21,0.23,0.24,0.24 0.25,0.25,0.25,0.25), mean=0.226, stddev=0.0197] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00719101, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.75,-0.70,-0.62 -0.51,-0.30,0.01,0.35,0.50 0.61,0.69,0.72,0.79), mean=0.00813, stddev=0.362], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.31,0.32,0.37 0.41,0.46,0.57,0.68,0.75 0.82,0.87,0.88,0.93), mean=0.575, stddev=0.131] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616867, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.35,0.36,0.38 0.40,0.42,0.48,0.53,0.57 0.60,0.65,0.68,0.72), mean=0.482, stddev=0.0669], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.24,0.24,0.24,0.25), mean=0.221, stddev=0.0145] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00747207, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.80,-0.69,-0.55 -0.43,-0.22,0.006,0.27,0.40 0.52,0.67,0.73,0.85), mean=0.00505, stddev=0.314], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.32,0.46 0.60,0.69,0.81,0.88,0.91 0.93,0.96,0.97,0.98), mean=0.774, stddev=0.142] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=293799
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000289714, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03172, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.51,0.52,0.54 0.55,0.60,0.71,0.82,0.88 0.91,0.93,0.96,0.97), mean=0.714, stddev=0.117], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.22,0.25 0.31,0.37,0.48,0.60,0.67 0.77,0.82,0.86,1.1), mean=0.49, stddev=0.145], bias-{mean,stddev}=0.02495,0.242, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000289714, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01381, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.20,0.23 0.26,0.30,0.37,0.44,0.50 0.56,0.61,0.62,0.69), mean=0.374, stddev=0.0936], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.20,0.20,0.22 0.23,0.25,0.31,0.36,0.39 0.41,0.44,0.45,0.47), mean=0.309, stddev=0.0605], bias-{mean,stddev}=-0.0007707,0.01033, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.75e+05, self-repaired-proportion=0.00192308, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.06,0.07,0.09 0.10,0.12,0.17,0.22,0.24 0.26,0.28,0.29,0.32), mean=0.169, stddev=0.0546], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.20,0.21,0.27 0.31,0.37,0.49,0.61,0.67 0.71,0.74,0.75,0.79), mean=0.486, stddev=0.136], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.05,0.06,0.07,0.08 0.09,0.10,0.10,0.23), mean=0.0587, stddev=0.0165], oderiv-count=1.14406e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30844.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.05,0.07,0.08 0.10,0.11,0.16,0.20,0.23 0.26,0.28,0.28,0.31), mean=0.163, stddev=0.0526], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.16,0.17,0.18 0.20,0.22,0.25,0.30,0.32 0.34,0.36,0.38,0.41), mean=0.258, stddev=0.0477]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000289714, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009936, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.26,0.30 0.33,0.36,0.39,0.43,0.45 0.46,0.48,0.48,0.52), mean=0.389, stddev=0.0479], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.12,0.13 0.15,0.18,0.22,0.26,0.29 0.31,0.33,0.34,0.38), mean=0.221, stddev=0.0489], bias-{mean,stddev}=-0.009355,0.0179, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.43e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.27 0.28,0.29,0.32,0.36,0.37 0.39,0.41,0.43,0.46), mean=0.325, stddev=0.0365], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.39,0.39,0.40 0.41,0.42,0.44,0.46,0.48 0.48,0.50,0.50,0.52), mean=0.443, stddev=0.026], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0266, stddev=0.00351], oderiv-count=1.01645e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28679.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.24,0.24,0.26 0.27,0.29,0.32,0.36,0.37 0.39,0.41,0.43,0.45), mean=0.321, stddev=0.04], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.45,0.49 0.51,0.54,0.59,0.65,0.68 0.71,0.73,0.76,0.81), mean=0.594, stddev=0.0679]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000289714, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01568, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.24 0.25,0.27,0.34,0.49,0.57 0.64,0.69,0.71,0.95), mean=0.379, stddev=0.127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.48,0.49,0.50 0.52,0.58,0.73,0.79,0.83 0.86,0.89,0.90,0.98), mean=0.706, stddev=0.11], bias-{mean,stddev}=0.006644,0.2373, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000289714, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.2556, w_fc-rms=0.2469, w_oc-rms=0.2464, count=1.3e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622001, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.37,0.39 0.41,0.44,0.50,0.57,0.60 0.63,0.65,0.67,0.71), mean=0.504, stddev=0.0715], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.24 0.24,0.25,0.25,0.25), mean=0.228, stddev=0.0146] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622001, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.34,0.35,0.37 0.40,0.42,0.48,0.56,0.61 0.66,0.72,0.77,0.84), mean=0.492, stddev=0.0891], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.18,0.20 0.21,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0176] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00622001, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.81,-0.71,-0.66,-0.52 -0.43,-0.28,-0.006,0.30,0.46 0.54,0.65,0.67,0.80), mean=0.00343, stddev=0.326], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.37,0.41,0.46 0.49,0.53,0.63,0.75,0.83 0.86,0.90,0.92,0.93), mean=0.639, stddev=0.126] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00622001, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.35,0.36,0.38 0.40,0.43,0.48,0.55,0.58 0.63,0.66,0.68,0.73), mean=0.491, stddev=0.073], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.24 0.24,0.24,0.24,0.25), mean=0.227, stddev=0.0133] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0109064, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.76,-0.72,-0.46 -0.35,-0.20,-0.009,0.23,0.36 0.51,0.66,0.71,0.90), mean=0.00536, stddev=0.291], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.25,0.35,0.52 0.67,0.75,0.84,0.90,0.93 0.96,0.97,0.97,0.98), mean=0.808, stddev=0.135] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=259146
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000289714, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02961, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.50,0.51,0.52,0.53 0.56,0.58,0.66,0.75,0.78 0.83,0.87,0.88,0.91), mean=0.669, stddev=0.0893], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.22 0.25,0.30,0.42,0.59,0.67 0.75,0.86,0.89,1.1), mean=0.448, stddev=0.166], bias-{mean,stddev}=-0.007126,0.2347, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000289714, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01289, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.12,0.14,0.18 0.21,0.25,0.33,0.43,0.49 0.53,0.58,0.64,0.73), mean=0.343, stddev=0.11], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.19,0.21 0.23,0.24,0.29,0.33,0.36 0.38,0.40,0.42,0.45), mean=0.289, stddev=0.0519], bias-{mean,stddev}=-0.000797,0.008089, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.67e+05, self-repaired-proportion=0.010015, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-06,0.009,0.02,0.05 0.07,0.09,0.14,0.20,0.23 0.25,0.27,0.29,0.32), mean=0.146, stddev=0.0639], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.06,0.11,0.19 0.23,0.29,0.42,0.55,0.60 0.64,0.69,0.70,0.81), mean=0.416, stddev=0.144], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.05,0.05,0.07,0.08 0.10,0.12,0.14,0.23), mean=0.0585, stddev=0.0212], oderiv-count=985088
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26514.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-07,0.01,0.03,0.05 0.06,0.08,0.13,0.19,0.22 0.24,0.26,0.28,0.34), mean=0.138, stddev=0.0613], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.06,0.10,0.13 0.15,0.18,0.24,0.29,0.31 0.34,0.35,0.37,0.43), mean=0.236, stddev=0.0651]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000289714, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009913, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.28,0.30 0.33,0.35,0.39,0.42,0.45 0.47,0.52,0.53,0.59), mean=0.388, stddev=0.0492], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.09,0.10,0.12 0.13,0.16,0.21,0.27,0.30 0.33,0.36,0.39,0.56), mean=0.216, stddev=0.0671], bias-{mean,stddev}=-0.008399,0.0216, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.3e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.27 0.28,0.30,0.33,0.36,0.38 0.40,0.41,0.42,0.64), mean=0.332, stddev=0.0413], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.38 0.39,0.40,0.42,0.44,0.46 0.47,0.48,0.49,0.50), mean=0.421, stddev=0.027], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.0237, stddev=0.00301], oderiv-count=921600
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24349.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.25,0.25,0.26 0.27,0.29,0.33,0.36,0.38 0.40,0.42,0.43,0.70), mean=0.329, stddev=0.0451], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.48,0.49,0.52 0.54,0.57,0.62,0.69,0.72 0.76,0.79,0.81,1.0), mean=0.629, stddev=0.0733]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000289714, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01953, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.25,0.26,0.27 0.30,0.35,0.45,0.58,0.71 0.78,0.83,0.85,1.2), mean=0.475, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.65,0.67,0.70 0.74,0.77,0.82,1.0,1.1 1.2,1.3,1.3,1.5), mean=0.877, stddev=0.155], bias-{mean,stddev}=0.005001,0.2388, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000289714, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.2286, w_fc-rms=0.2404, w_oc-rms=0.2489, count=1.18e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628195, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.41,0.43,0.45 0.48,0.50,0.56,0.62,0.65 0.67,0.69,0.69,0.72), mean=0.56, stddev=0.0667], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.17,0.18 0.18,0.19,0.21,0.22,0.23 0.23,0.24,0.24,0.24), mean=0.206, stddev=0.0167] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628195, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.39,0.42 0.45,0.49,0.57,0.63,0.67 0.70,0.75,0.77,0.86), mean=0.564, stddev=0.0876], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.15,0.16,0.17 0.18,0.19,0.21,0.23,0.23 0.24,0.24,0.24,0.24), mean=0.207, stddev=0.0217] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00795202, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.80,-0.69,-0.66,-0.50 -0.37,-0.23,0.002,0.22,0.35 0.50,0.56,0.61,0.70), mean=-0.0057, stddev=0.285], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.29,0.31,0.34 0.39,0.43,0.48,0.56,0.62 0.67,0.74,0.77,0.83), mean=0.496, stddev=0.0952] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628195, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.41,0.42,0.46 0.49,0.53,0.61,0.67,0.71 0.73,0.75,0.75,0.81), mean=0.604, stddev=0.0828], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.15,0.16,0.16 0.17,0.18,0.19,0.21,0.22 0.22,0.23,0.23,0.24), mean=0.191, stddev=0.018] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.006509, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.71,-0.66,-0.51 -0.34,-0.20,-0.0002,0.20,0.32 0.46,0.58,0.64,0.76), mean=-0.0059, stddev=0.27], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.35,0.38,0.47 0.52,0.60,0.67,0.75,0.79 0.82,0.86,0.89,0.93), mean=0.665, stddev=0.107] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.47e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=220411
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000289714, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06217, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.2,1.3,1.4,1.5,1.6 1.6,1.7,1.7,1.8), mean=1.41, stddev=0.133], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.33,0.41,0.53 0.64,0.79,0.98,1.2,1.2 1.3,1.4,1.4,1.7), mean=0.974, stddev=0.235], bias-{mean,stddev}=0.02172,0.2395, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000289714, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04136, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.50,0.52,0.54 0.56,0.59,0.65,0.71,0.76 0.80,0.89,0.95,2.4), mean=0.658, stddev=0.109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.5,1.5,1.6,1.6 1.7,1.7,1.9,2.0,2.1 2.2,2.3,2.3,2.3), mean=1.89, stddev=0.169], bias-{mean,stddev}=4.051e-09,0.01588, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=608640
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/11.mdl exp/nnet3/tdnn_lstm1c_sp/12.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.05461 tdnn2.affine:9.42703 lstm1.W_all:8.2948 lstm1.lstm_nonlin:1.16024 lstm1.W_rp:3.64059 tdnn3.affine:5.85122 tdnn4.affine:6.87294 lstm2.W_all:5.76028 lstm2.lstm_nonlin:1.19186 lstm2.W_rp:2.50122 tdnn5.affine:4.80067 tdnn6.affine:6.11638 lstm3.W_all:6.97404 lstm3.lstm_nonlin:1.12365 lstm3.W_rp:2.8799 output.affine:6.56877 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.2435 tdnn2.affine:11.5651 lstm1.W_all:24.0526 lstm1.lstm_nonlin:9.56358 lstm1.W_rp:12.3053 tdnn3.affine:8.80077 tdnn4.affine:8.96058 lstm2.W_all:21.2004 lstm2.lstm_nonlin:9.86123 lstm2.W_rp:11.5253 tdnn5.affine:8.20989 tdnn6.affine:8.94368 lstm3.W_all:25.1906 lstm3.lstm_nonlin:9.45693 lstm3.W_rp:23.1864 output.affine:30.5979 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.747519 tdnn2.affine:0.817886 lstm1.W_all:0.330814 lstm1.lstm_nonlin:0.108385 lstm1.W_rp:0.29167 tdnn3.affine:0.660356 tdnn4.affine:0.757751 lstm2.W_all:0.256619 lstm2.lstm_nonlin:0.107904 lstm2.W_rp:0.211846 tdnn5.affine:0.576217 tdnn6.affine:0.673002 lstm3.W_all:0.267856 lstm3.lstm_nonlin:0.106515 lstm3.W_rp:0.124592 output.affine:0.214535 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:05:53 KST 2020, elapsed time 0 seconds
