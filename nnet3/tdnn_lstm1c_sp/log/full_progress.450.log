# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/449.mdl exp/nnet3/tdnn_lstm1c_sp/450.mdl 
# Started at Thu Jul 30 12:59:33 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/449.mdl exp/nnet3/tdnn_lstm1c_sp/450.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=7.53919e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006963, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.001,0.002,0.002 0.003,0.007,0.13,0.15,0.16 0.18,0.21,0.21,0.23), mean=0.102, stddev=0.0642], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.05,0.14,0.20,0.23 0.30,0.33,0.35,0.42), mean=0.137, stddev=0.0803], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.005,0.006,0.008 0.01,0.02,0.07,0.20,0.28 0.35,0.41,0.45,0.51), mean=0.114, stddev=0.111], bias-{mean,stddev}=-0.0003136,0.008893, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.17,0.57,0.78 1.0,1.2,1.5,2.4), mean=0.301, stddev=0.37], oderiv-count=80384
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7839.71, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.07,-0.02,-0.01,-0.003 -0.0005,6e-05,0.03,0.10,0.13 0.15,0.17,0.20,0.23), mean=0.0483, stddev=0.0552], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,5e-05,0.06,0.12,0.14 0.15,0.17,0.18,0.20), mean=0.0612, stddev=0.0569]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.53919e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002796, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.09,0.09,0.10 0.10,0.10,0.11,0.12,0.12 0.13,0.13,0.14,0.15), mean=0.11, stddev=0.0101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.0006,0.0008,0.0009 0.002,0.004,0.07,0.08,0.09 0.09,0.10,0.10,0.13), mean=0.054, stddev=0.0339], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.06,0.13,0.19 0.25,0.29,0.32,0.36), mean=0.0821, stddev=0.0738], bias-{mean,stddev}=-0.0002347,0.004651, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.12,0.14 0.16,0.19,0.24,0.30,0.33 0.36,0.40,0.42,0.64), mean=0.248, stddev=0.0684], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.24,0.29,0.33 0.35,0.38,0.45,0.51,0.54 0.57,0.60,0.61,0.69), mean=0.447, stddev=0.0765], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.03,0.04,0.07,0.09,0.10 0.11,0.13,0.15,0.18), mean=0.0668, stddev=0.0304], oderiv-count=69440
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7733.21, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.10,0.11,0.15 0.18,0.20,0.25,0.31,0.33 0.38,0.41,0.43,0.48), mean=0.253, stddev=0.0668], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0.16,0.23 0.29,0.36,0.45,0.54,0.59 0.64,0.67,0.71,0.80), mean=0.446, stddev=0.123]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001627, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-09,3e-08,7e-08,5e-07 1e-05,0.02,0.03,0.05,0.07 0.07,0.08,0.09,0.11), mean=0.0346, stddev=0.0228], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.08,0.09,0.10 0.10,0.11,0.11,0.13), mean=0.0696, stddev=0.0258], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,7e-08,9e-08 1e-07,0.02,0.04,0.08,0.12 0.17,0.22,0.24,0.28), mean=0.0523, stddev=0.0526], bias-{mean,stddev}=2.254e-05,0.0005194, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0006368, w_fc-rms=0.000606, w_oc-rms=0.001383, count=1.6e+04, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000152355, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.23,0.26,0.30 0.37,0.41,0.50,0.55,0.63 0.74,0.82,0.87,0.96), mean=0.495, stddev=0.12], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.0005,0.07,0.08,0.11 0.14,0.18,0.24,0.26,0.28 0.31,0.33,0.36,0.50), mean=0.225, stddev=0.0603] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000152355, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.31,0.35,0.38 0.41,0.44,0.50,0.57,0.62 0.70,0.80,0.82,0.95), mean=0.513, stddev=0.097], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.13,0.15 0.18,0.21,0.25,0.26,0.27 0.28,0.31,0.32,0.39), mean=0.234, stddev=0.0401] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.000429735, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.1,-1.5,-1.3,-1.1 -0.76,-0.42,0.001,0.51,0.81 1.1,1.4,1.5,2.7), mean=0.037, stddev=0.625], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.73,-0.63,-0.40 -0.08,0.18,0.66,1.0,1.2 1.4,1.6,1.8,2.3), mean=0.626, stddev=0.536] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000152355, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.17,0.18,0.25 0.31,0.37,0.48,0.53,0.58 0.63,0.69,0.71,0.92), mean=0.458, stddev=0.114], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.13,0.01,0.05,0.09 0.13,0.17,0.24,0.26,0.29 0.32,0.35,0.36,0.59), mean=0.223, stddev=0.0695] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0393341, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-1.2,-1.1,-0.79 -0.62,-0.32,3e-05,0.41,0.66 0.85,1.0,1.1,1.8), mean=0.0232, stddev=0.49], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.49,0.02,0.14,0.39 0.53,0.67,0.94,1.1,1.2 1.3,1.4,1.4,1.6), mean=0.877, stddev=0.274] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2.39e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.0917e-05, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000976699, count-zeroing-boundaries=3583
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0595041
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002352, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.05,0.07,0.07 0.07,0.08,0.08,0.09), mean=0.0514, stddev=0.0153], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,4e-05,6e-05,0.0001 0.0005,0.03,0.04,0.05,0.05 0.05,0.06,0.06,0.06), mean=0.0339, stddev=0.017], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,6e-08 8e-08,1e-07,3e-07,0.06,0.10 0.14,0.16,0.18,0.21), mean=0.0245, stddev=0.0477], bias-{mean,stddev}=0.0001523,0.002236, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=7.53919e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002736, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.06,0.06 0.06,0.06,0.07,0.09,0.09 0.10,0.11,0.11,0.12), mean=0.0755, stddev=0.0121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.04,0.06,0.08,0.08 0.09,0.09,0.09,0.10), mean=0.0594, stddev=0.0191], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-08,3e-08,4e-08 5e-08,7e-08,1e-05,0.08,0.14 0.19,0.24,0.26,0.29), mean=0.0387, stddev=0.0659], bias-{mean,stddev}=-2.786e-05,0.002194, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7413.73, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.02,-0.01,-0.002,0.01 0.02,0.04,0.09,0.13,0.15 0.17,0.19,0.20,0.25), mean=0.0874, stddev=0.049], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.04 0.08,0.10,0.14,0.17,0.19 0.20,0.22,0.22,0.25), mean=0.137, stddev=0.0472]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.53919e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.001983, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.07,0.07,0.08,0.08,0.09 0.09,0.09,0.09,0.11), mean=0.0781, stddev=0.0063], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0448, stddev=0.00595], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.05,0.09,0.13 0.16,0.20,0.21,0.23), mean=0.0636, stddev=0.0457], bias-{mean,stddev}=9.822e-05,0.002071, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2.53e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.28,-0.13,-0.09,-0.05 -0.01,0.05,0.21,0.36,0.45 0.50,0.57,0.60,0.91), mean=0.212, stddev=0.17], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.45,-0.23,-0.14,-0.01 0.06,0.18,0.38,0.58,0.70 0.78,0.90,0.97,1.3), mean=0.381, stddev=0.253]
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=7094.24, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.14,0.16 0.18,0.20,0.24,0.28,0.31 0.33,0.37,0.38,0.42), mean=0.241, stddev=0.0536], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.19,0.26,0.32 0.36,0.40,0.47,0.55,0.59 0.63,0.67,0.69,0.80), mean=0.471, stddev=0.1]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001103, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,2e-07,3e-07,8e-07 3e-06,6e-05,0.02,0.04,0.05 0.06,0.06,0.06,0.08), mean=0.0209, stddev=0.0188], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.03,0.05,0.06,0.06 0.07,0.07,0.07,0.08), mean=0.0475, stddev=0.0167], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,7e-08 1e-05,0.008,0.02,0.05,0.08 0.11,0.16,0.18,0.20), mean=0.0341, stddev=0.037], bias-{mean,stddev}=2.906e-05,0.0004938, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0003904, w_fc-rms=0.0003662, w_oc-rms=0.000693, count=1.49e+04, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000150956, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.33,0.35,0.38 0.41,0.46,0.50,0.54,0.58 0.62,0.67,0.71,0.77), mean=0.499, stddev=0.0687], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.14,0.16,0.18 0.20,0.22,0.25,0.26,0.28 0.29,0.31,0.32,0.36), mean=0.242, stddev=0.034] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000150956, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.36,0.40,0.43 0.46,0.50,0.50,0.55,0.60 0.63,0.66,0.69,0.77), mean=0.519, stddev=0.0583], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.15,0.16,0.18 0.20,0.23,0.25,0.25,0.26 0.28,0.29,0.30,0.33), mean=0.24, stddev=0.0287] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000150956, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.4,-1.1,-0.97,-0.76 -0.59,-0.32,-0.0003,0.20,0.46 0.72,0.95,1.1,1.6), mean=-0.0277, stddev=0.42], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.18,-0.06,0.17 0.30,0.53,0.95,1.0,1.1 1.3,1.4,1.6,2.0), mean=0.807, stddev=0.351] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000150956, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.30,0.32,0.37 0.40,0.44,0.50,0.53,0.57 0.60,0.66,0.68,0.81), mean=0.489, stddev=0.0703], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.14,0.16 0.18,0.21,0.25,0.26,0.28 0.30,0.31,0.33,0.40), mean=0.238, stddev=0.0407] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000150956, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.78,-0.72,-0.58 -0.45,-0.26,-2e-05,0.20,0.44 0.59,0.74,0.81,1.0), mean=-0.0069, stddev=0.322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.37,0.42,0.56 0.67,0.78,1.0,1.0,1.1 1.2,1.3,1.3,1.6), mean=0.922, stddev=0.186] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2.12e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=-2.35671e-05, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=-0.000156348, count-zeroing-boundaries=3198
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0595041
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001582, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.04,0.05 0.05,0.05,0.05,0.05), mean=0.0348, stddev=0.00959], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,8e-05,9e-05,0.0001 0.0003,0.0008,0.03,0.03,0.04 0.04,0.04,0.04,0.05), mean=0.0208, stddev=0.0148], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,1e-06,0.05,0.07 0.09,0.10,0.11,0.13), mean=0.0183, stddev=0.0311], bias-{mean,stddev}=0.0002457,0.002193, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=7.53919e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002258, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.07,0.08 0.08,0.09,0.09,0.10), mean=0.0622, stddev=0.0106], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.05,0.06,0.07 0.07,0.07,0.08,0.08), mean=0.0496, stddev=0.014], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-08,3e-08,4e-08 5e-08,9e-08,0.001,0.06,0.11 0.16,0.20,0.22,0.25), mean=0.0335, stddev=0.0535], bias-{mean,stddev}=-0.0001073,0.00143, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.05,0.14,0.22,0.27 0.32,0.37,0.43,0.57), mean=0.145, stddev=0.103], oderiv-count=37056
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=6774.75, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.02,-0.005,-0.0006,0.009 0.02,0.03,0.06,0.10,0.12 0.13,0.14,0.15,0.23), mean=0.0635, stddev=0.0385], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.06,0.11,0.14,0.16 0.17,0.18,0.19,0.22), mean=0.101, stddev=0.0491]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=7.53919e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.001734, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.06,0.07,0.08,0.08 0.08,0.08,0.08,0.09), mean=0.0681, stddev=0.00763], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.05,0.06), mean=0.0391, stddev=0.00575], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.04,0.08,0.11 0.15,0.18,0.19,0.21), mean=0.0543, stddev=0.0418], bias-{mean,stddev}=-4.074e-05,0.00194, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.009,0.02 0.02,0.03,0.03,0.04,0.04 0.05,0.05,0.05,0.06), mean=0.0317, stddev=0.00896], oderiv-count=99200
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=6455.26, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.13,0.16 0.18,0.21,0.25,0.30,0.32 0.34,0.36,0.36,0.40), mean=0.248, stddev=0.0551], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0.25 0.30,0.40,0.49,0.59,0.63 0.67,0.72,0.76,0.90), mean=0.482, stddev=0.137]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001516, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.01 0.01,0.02,0.02,0.05,0.07 0.08,0.08,0.09,0.09), mean=0.0322, stddev=0.0214], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.06,0.08,0.11 0.12,0.12,0.13,0.14), mean=0.0642, stddev=0.0257], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,7e-06 0.007,0.01,0.02,0.06,0.12 0.17,0.22,0.24,0.27), mean=0.0438, stddev=0.0535], bias-{mean,stddev}=4.637e-06,0.0003795, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0006992, w_fc-rms=0.0007653, w_oc-rms=0.001357, count=1.38e+04, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000149193, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,0.05,0.14,0.23 0.35,0.43,0.57,0.71,0.80 0.86,0.95,1.0,1.2), mean=0.567, stddev=0.185], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.07,0.08,0.11 0.13,0.16,0.21,0.26,0.28 0.31,0.33,0.35,0.40), mean=0.212, stddev=0.0605] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000149193, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.27,0.30,0.36 0.43,0.51,0.68,0.87,1.0 1.1,1.2,1.3,1.4), mean=0.703, stddev=0.228], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.05,0.07,0.09 0.12,0.15,0.20,0.25,0.28 0.29,0.31,0.32,0.37), mean=0.2, stddev=0.0587] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.172142, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.9,-3.1,-2.9,-1.9 -1.6,-1.0,0.008,1.2,1.7 2.3,2.8,3.1,4.9), mean=0.044, stddev=1.35], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.3,-0.87,-0.78,-0.46 -0.29,0.04,0.55,1.0,1.3 1.6,1.8,2.0,2.2), mean=0.546, stddev=0.616] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000149193, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.12,-0.04,0.03,0.10 0.21,0.32,0.55,0.75,0.89 0.97,1.0,1.1,1.2), mean=0.538, stddev=0.254], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.11,0.005,0.04,0.10 0.13,0.16,0.23,0.29,0.32 0.36,0.38,0.39,0.47), mean=0.224, stddev=0.0798] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.081351, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.7,-2.7,-2.2,-1.7 -1.3,-0.79,-0.04,0.88,1.4 1.8,2.2,2.7,4.1), mean=0.0231, stddev=1.09], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.61,-0.19,-0.09,0.06 0.21,0.41,0.77,1.1,1.3 1.4,1.6,1.7,2.1), mean=0.754, stddev=0.416] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.85e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=-2.69862e-05, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.00036036, count-zeroing-boundaries=2775
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0595041
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001697, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.02,0.05,0.05 0.06,0.06,0.06,0.06), mean=0.0347, stddev=0.0172], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.03,0.03,0.03 0.04,0.04,0.04,0.04), mean=0.0267, stddev=0.00585], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-07,2e-07,2e-07 3e-07,5e-07,0.004,0.05,0.07 0.09,0.11,0.12,0.13), mean=0.0225, stddev=0.0315], bias-{mean,stddev}=-0.0001456,0.003639, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=7.53919e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001889, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.01,0.01,0.01 0.02,0.02,0.03,0.04,0.04 0.05,0.06,0.06,0.12), mean=0.0283, stddev=0.0112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.05,0.07,0.11,0.12 0.12,0.12,0.12,0.13), mean=0.0816, stddev=0.0293], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 3e-07,5e-07,0.002,0.13,0.17 0.20,0.21,0.23,0.24), mean=0.0487, stddev=0.0717], bias-{mean,stddev}=-3.298e-11,0.0003591, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.75752 tdnn2.affine:2.52037 lstm1.W_all:1.89212 lstm1.lstm_nonlin:0.0373615 lstm1.W_rp:0.865616 tdnn3.affine:1.74337 tdnn4.affine:1.78673 lstm2.W_all:1.28286 lstm2.lstm_nonlin:0.0199675 lstm2.W_rp:0.582693 tdnn5.affine:1.43861 tdnn6.affine:1.56253 lstm3.W_all:1.76325 lstm3.lstm_nonlin:0.0389373 lstm3.W_rp:0.626602 output.affine:1.39749 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.9223 tdnn2.affine:10.3767 lstm1.W_all:20.24 lstm1.lstm_nonlin:1.54362 lstm1.W_rp:14.7316 tdnn3.affine:7.79738 tdnn4.affine:7.31486 lstm2.W_all:16.5096 lstm2.lstm_nonlin:1.15162 lstm2.W_rp:13.7638 tdnn5.affine:7.3017 tdnn6.affine:7.37661 lstm3.W_all:23.7623 lstm3.lstm_nonlin:2.58448 lstm3.W_rp:32.6156 output.affine:30.267 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.212988 tdnn2.affine:0.2424 lstm1.W_all:0.0934204 lstm1.lstm_nonlin:0.0241013 lstm1.W_rp:0.0587048 tdnn3.affine:0.223203 tdnn4.affine:0.244259 lstm2.W_all:0.0776717 lstm2.lstm_nonlin:0.0172682 lstm2.W_rp:0.0423142 tdnn5.affine:0.196778 tdnn6.affine:0.211508 lstm3.W_all:0.0741651 lstm3.lstm_nonlin:0.0149845 lstm3.W_rp:0.0191975 output.affine:0.0461575 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 12:59:34 KST 2020, elapsed time 1 seconds
