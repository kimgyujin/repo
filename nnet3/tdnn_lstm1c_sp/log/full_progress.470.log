# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/469.mdl exp/nnet3/tdnn_lstm1c_sp/470.mdl 
# Started at Thu Jul 30 13:07:32 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/469.mdl exp/nnet3/tdnn_lstm1c_sp/470.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=6.64092e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006582, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.001,0.001,0.002 0.003,0.009,0.12,0.15,0.16 0.17,0.18,0.19,0.21), mean=0.0972, stddev=0.0595], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.05,0.14,0.18,0.21 0.28,0.31,0.34,0.40), mean=0.13, stddev=0.0757], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.007 0.01,0.02,0.07,0.19,0.27 0.33,0.39,0.42,0.47), mean=0.107, stddev=0.105], bias-{mean,stddev}=-0.0001433,0.009621, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2.11e+03, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.4,-4.7,-4.2,-3.1 -2.1,-1.0,0.0009,1.1,2.0 2.8,3.4,4.0,8.6), mean=0.0193, stddev=1.69], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-75,-43,-34,-25 -17,-10.0,0.51,9.5,19 29,39,45,88), mean=0.699, stddev=16.7]
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=4506.33, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.11,-0.06,-0.04,-0.03 -0.01,-0.0007,0.02,0.11,0.14 0.17,0.20,0.24,0.36), mean=0.0472, stddev=0.0673], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.11,0.13 0.15,0.17,0.18,0.20), mean=0.0488, stddev=0.0557]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.64092e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002639, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.09,0.09 0.09,0.10,0.10,0.11,0.12 0.12,0.12,0.13,0.13), mean=0.104, stddev=0.00912], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0005,0.0007,0.001 0.002,0.005,0.06,0.08,0.08 0.09,0.09,0.10,0.12), mean=0.0513, stddev=0.0315], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.01,0.01 0.02,0.02,0.05,0.12,0.18 0.23,0.27,0.29,0.34), mean=0.0774, stddev=0.0698], bias-{mean,stddev}=0.0004915,0.004581, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2.38e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.61,-0.35,-0.30,-0.19 -0.08,0.03,0.26,0.50,0.67 0.80,1.1,1.3,2.1), mean=0.28, stddev=0.322], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.31,-0.25,-0.06 0.03,0.20,0.46,0.77,0.95 1.1,1.2,1.3,2.1), mean=0.482, stddev=0.357]
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=4391.64, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.13,0.05,0.09,0.12 0.15,0.18,0.24,0.32,0.37 0.41,0.44,0.47,0.58), mean=0.251, stddev=0.0903], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.09,0.28,0.43,0.57,0.62 0.69,0.75,0.80,0.94), mean=0.41, stddev=0.192]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.64092e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001517, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-09,3e-08,6e-08,4e-07 1e-05,0.02,0.03,0.05,0.06 0.07,0.08,0.08,0.13), mean=0.0323, stddev=0.0213], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.07,0.08,0.09 0.09,0.10,0.10,0.13), mean=0.0649, stddev=0.0238], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,7e-08,9e-08 1e-07,0.01,0.03,0.07,0.12 0.16,0.20,0.22,0.26), mean=0.0487, stddev=0.0491], bias-{mean,stddev}=2.545e-05,0.0004548, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.64092e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0005675, w_fc-rms=0.0005409, w_oc-rms=0.001245, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=7.38714e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.24,0.06,0.11,0.22 0.30,0.38,0.50,0.56,0.65 0.72,0.81,0.87,1.2), mean=0.478, stddev=0.156], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.21,-0.06,-0.02,0.02 0.09,0.15,0.24,0.28,0.32 0.35,0.41,0.42,0.63), mean=0.218, stddev=0.0968] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=7.38714e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.16,0.21,0.28 0.33,0.40,0.50,0.59,0.68 0.74,0.82,0.86,1.1), mean=0.499, stddev=0.137], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.11,0.009,0.07,0.11 0.15,0.19,0.25,0.27,0.30 0.33,0.35,0.37,0.47), mean=0.231, stddev=0.0668] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.000972617, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-2.3,-2.2,-1.6 -1.3,-0.71,0.0003,0.79,1.3 1.8,2.1,2.8,3.4), mean=0.0369, stddev=0.989], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-1.7,-1.3,-0.92 -0.66,-0.17,0.57,1.0,1.6 2.0,2.3,2.6,3.4), mean=0.524, stddev=0.868] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=7.38714e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.20,-0.06,0.003,0.16 0.24,0.34,0.50,0.58,0.66 0.74,0.81,0.94,1.2), mean=0.462, stddev=0.18], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.21,-0.09,-0.05,0.01 0.08,0.14,0.25,0.29,0.35 0.39,0.44,0.46,0.77), mean=0.221, stddev=0.113] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0754505, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.7,-2.0,-1.7,-1.4 -1.0,-0.62,0.0003,0.60,1.1 1.5,1.8,1.9,2.4), mean=0.0243, stddev=0.829], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.7,-0.83,-0.51,-0.30 -0.02,0.27,0.73,1.0,1.2 1.4,1.5,1.6,2.1), mean=0.661, stddev=0.504] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.13e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1695
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0264463
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.64092e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002217, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.05,0.06,0.07 0.07,0.07,0.07,0.08), mean=0.0484, stddev=0.0145], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,4e-05,5e-05,0.0001 0.0004,0.03,0.04,0.04,0.05 0.05,0.06,0.06,0.07), mean=0.0319, stddev=0.016], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.06,0.10 0.13,0.15,0.17,0.19), mean=0.0231, stddev=0.045], bias-{mean,stddev}=7.155e-05,0.00242, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=6.64092e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002571, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.06,0.06,0.07,0.08,0.09 0.09,0.10,0.10,0.12), mean=0.0708, stddev=0.0122], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.05,0.07,0.08 0.08,0.09,0.09,0.10), mean=0.0558, stddev=0.018], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-08,3e-08,4e-08 5e-08,7e-08,1e-05,0.07,0.13 0.18,0.23,0.24,0.28), mean=0.036, stddev=0.0621], bias-{mean,stddev}=-2.188e-06,0.001988, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=384, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-30,-25,-19,-16 -13,-8.7,-0.96,6.4,11 14,19,23,30), mean=-1.11, stddev=9.3], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-113,-85,-75,-61 -45,-28,2.5,31,48 59,76,80,104), mean=1.67, stddev=36.2], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.04,0.10,0.15,0.19 0.22,0.32,0.34,0.40), mean=0.103, stddev=0.0745], oderiv-count=82816
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=4047.58, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,-0.02,-0.01,0.006 0.02,0.04,0.08,0.13,0.16 0.18,0.21,0.22,0.28), mean=0.0882, stddev=0.0541], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.08,0.13,0.18,0.19 0.21,0.23,0.24,0.26), mean=0.124, stddev=0.0612]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.64092e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.001874, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.06 0.07,0.07,0.07,0.08,0.08 0.08,0.09,0.09,0.10), mean=0.0738, stddev=0.00593], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0423, stddev=0.00593], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.03,0.04,0.09,0.12 0.16,0.19,0.20,0.23), mean=0.0597, stddev=0.0437], bias-{mean,stddev}=1.549e-05,0.001867, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.06e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.15,0.16,0.17 0.18,0.20,0.24,0.28,0.30 0.32,0.34,0.35,0.37), mean=0.239, stddev=0.0461], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.26,0.27,0.31 0.32,0.36,0.42,0.46,0.49 0.51,0.56,0.57,0.59), mean=0.412, stddev=0.0658]
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3703.51, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.09,0.10,0.13 0.16,0.19,0.25,0.31,0.35 0.38,0.40,0.43,0.59), mean=0.251, stddev=0.0754], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0.21,0.32,0.46,0.58,0.63 0.69,0.75,0.78,1.1), mean=0.441, stddev=0.174]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.64092e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00104, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-08,1e-07,2e-07,6e-07 2e-06,4e-05,0.02,0.03,0.05 0.05,0.06,0.06,0.07), mean=0.0197, stddev=0.0177], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.03,0.05,0.06,0.06 0.06,0.07,0.07,0.07), mean=0.0448, stddev=0.0157], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,7e-08 1e-05,0.008,0.02,0.05,0.08 0.11,0.15,0.16,0.19), mean=0.0321, stddev=0.0349], bias-{mean,stddev}=2.675e-05,0.0004435, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.64092e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0003545, w_fc-rms=0.0003338, w_oc-rms=0.0006705, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=7.33377e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.26,0.30,0.37 0.40,0.45,0.50,0.55,0.62 0.67,0.73,0.74,0.79), mean=0.505, stddev=0.0888], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.06,0.05,0.08,0.13 0.16,0.20,0.25,0.26,0.29 0.32,0.36,0.39,0.46), mean=0.235, stddev=0.0601] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=7.33377e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.24,0.28,0.33 0.37,0.42,0.50,0.52,0.58 0.63,0.67,0.70,0.75), mean=0.482, stddev=0.0862], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.13,0.15,0.16 0.18,0.22,0.25,0.26,0.28 0.31,0.33,0.35,0.42), mean=0.242, stddev=0.0421] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=7.33377e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-1.6,-1.3,-0.97 -0.75,-0.31,-0.0002,0.41,0.80 1.1,1.4,1.5,2.0), mean=0.0295, stddev=0.598], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.5,-0.98,-0.82,-0.43 -0.15,0.25,0.93,1.0,1.2 1.5,1.8,2.2,3.3), mean=0.697, stddev=0.617] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=7.33377e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.21,0.25,0.31 0.36,0.43,0.50,0.55,0.63 0.67,0.72,0.76,0.90), mean=0.495, stddev=0.105], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.09,0.01,0.03,0.10 0.14,0.18,0.25,0.26,0.29 0.32,0.37,0.38,0.45), mean=0.229, stddev=0.0681] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=7.33377e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.3,-1.5,-1.3,-0.96 -0.65,-0.29,-0.0002,0.41,0.75 0.94,1.3,1.5,2.0), mean=0.0272, stddev=0.56], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.94,-0.39,-0.10,0.12 0.32,0.55,0.94,1.0,1.1 1.2,1.5,1.5,1.9), mean=0.807, stddev=0.359] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.01e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1528
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0264463
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.64092e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001511, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.04,0.04 0.05,0.05,0.05,0.05), mean=0.0333, stddev=0.00885], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,7e-05,8e-05,0.0001 0.0002,0.0007,0.03,0.03,0.03 0.04,0.04,0.04,0.06), mean=0.0197, stddev=0.0143], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 6e-08,1e-07,1e-06,0.04,0.07 0.08,0.10,0.11,0.11), mean=0.0175, stddev=0.0297], bias-{mean,stddev}=0.000142,0.002035, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=6.64092e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002161, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.05 0.05,0.05,0.06,0.07,0.07 0.08,0.09,0.09,0.09), mean=0.0595, stddev=0.0101], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.05,0.06,0.07 0.07,0.07,0.07,0.08), mean=0.0474, stddev=0.0136], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,3e-08,4e-08 5e-08,9e-08,0.001,0.06,0.11 0.15,0.19,0.21,0.24), mean=0.0317, stddev=0.0514], bias-{mean,stddev}=2.608e-05,0.001557, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=3.79e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,-0.09,-0.07,-0.04 -0.03,0.0002,0.06,0.13,0.16 0.20,0.23,0.27,0.33), mean=0.0647, stddev=0.0755], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.72,-0.41,-0.29,-0.18 -0.08,0.06,0.41,0.68,0.83 0.93,1.0,1.1,1.7), mean=0.385, stddev=0.352]
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3359.45, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.09,-0.07,-0.04,-0.02 -0.002,0.01,0.06,0.11,0.13 0.15,0.18,0.20,0.26), mean=0.061, stddev=0.0552], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.10,0.15,0.17 0.19,0.21,0.22,0.27), mean=0.092, stddev=0.0652]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=6.64092e-05, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.001677, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.06,0.07,0.07,0.08 0.08,0.08,0.08,0.09), mean=0.0658, stddev=0.00719], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.05 0.05,0.05,0.05,0.06), mean=0.0378, stddev=0.00577], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.04,0.08,0.11 0.14,0.17,0.18,0.21), mean=0.0521, stddev=0.0409], bias-{mean,stddev}=-8.55e-05,0.001737, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2.62e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.45,-0.21,-0.13,-0.04 0.03,0.11,0.24,0.38,0.45 0.54,0.60,0.63,0.79), mean=0.244, stddev=0.172], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.60,-0.35,-0.23,-0.10 0.02,0.15,0.38,0.61,0.74 0.86,0.97,1.0,1.7), mean=0.381, stddev=0.291], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.04,0.04 0.05,0.05,0.06,0.07), mean=0.0208, stddev=0.017], oderiv-count=43680
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=3015.38, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.09,-0.03,0.05,0.08 0.12,0.17,0.25,0.34,0.38 0.42,0.47,0.52,0.61), mean=0.25, stddev=0.106], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.27,0.48,0.65,0.73 0.80,0.86,0.94,1.2), mean=0.452, stddev=0.24]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=6.64092e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001493, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.01 0.01,0.02,0.03,0.05,0.07 0.08,0.08,0.09,0.10), mean=0.0319, stddev=0.0207], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.04,0.05,0.08,0.11 0.12,0.12,0.13,0.13), mean=0.0627, stddev=0.0265], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,8e-06 0.007,0.01,0.02,0.06,0.12 0.17,0.22,0.24,0.27), mean=0.0429, stddev=0.0529], bias-{mean,stddev}=6.498e-05,0.0003612, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=6.64092e-05, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0007534, w_fc-rms=0.0007414, w_oc-rms=0.001381, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=7.06674e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.22,-0.13,0.05 0.24,0.41,0.66,0.89,0.98 1.1,1.3,1.4,2.1), mean=0.642, stddev=0.328], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,-0.003,0.02,0.08 0.12,0.16,0.24,0.32,0.36 0.39,0.45,0.48,0.55), mean=0.239, stddev=0.0973] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=7.06674e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.31,-0.19,-0.03 0.15,0.31,0.60,0.93,1.1 1.3,1.4,1.4,1.9), mean=0.604, stddev=0.38], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,-0.005,0.03,0.06 0.10,0.15,0.22,0.29,0.33 0.37,0.39,0.42,0.52), mean=0.218, stddev=0.0917] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.100655, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.0,-5.9,-5.4,-3.9 -2.7,-1.7,-0.03,1.8,3.1 4.1,5.4,5.5,7.6), mean=0.0352, stddev=2.34], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.1,-2.3,-1.9,-1.4 -1.2,-0.79,0.15,1.0,1.5 2.0,2.4,2.7,3.6), mean=0.156, stddev=1.06] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=7.06674e-06, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.58,-0.38,-0.25,-0.01 0.16,0.35,0.71,1.1,1.3 1.4,1.6,1.7,2.9), mean=0.72, stddev=0.458], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.19,-0.08,-0.05,-0.02 0.03,0.08,0.17,0.28,0.32 0.37,0.42,0.47,0.62), mean=0.179, stddev=0.118] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.127142, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-7.0,-5.0,-4.3,-3.2 -2.2,-1.4,0.03,1.6,2.3 3.3,4.4,4.9,6.3), mean=0.0594, stddev=1.94], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.1,-1.5,-1.3,-1.0 -0.78,-0.39,0.21,0.83,1.1 1.4,1.8,1.9,2.7), mean=0.205, stddev=0.747] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-8.99e+03, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-1341
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0264463
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=6.64092e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001636, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.02,0.02,0.05,0.05 0.06,0.06,0.06,0.06), mean=0.0332, stddev=0.017], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0258, stddev=0.00562], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-07,2e-07,2e-07 3e-07,5e-07,0.004,0.04,0.07 0.09,0.10,0.11,0.12), mean=0.0217, stddev=0.0304], bias-{mean,stddev}=-0.0002723,0.003471, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=6.64092e-05, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.00174, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.008,0.01,0.01 0.01,0.02,0.02,0.03,0.04 0.04,0.05,0.06,0.13), mean=0.0259, stddev=0.0107], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.04 0.04,0.05,0.06,0.10,0.11 0.11,0.11,0.12,0.12), mean=0.0751, stddev=0.027], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,3e-07 3e-07,5e-07,0.002,0.12,0.16 0.18,0.20,0.21,0.22), mean=0.0449, stddev=0.0659], bias-{mean,stddev}=9.207e-11,0.0003024, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.03,0.04 0.04,0.05,0.06,0.42), mean=0.0169, stddev=0.0213], oderiv-count=27200

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:2.60905 tdnn2.affine:2.37934 lstm1.W_all:1.76369 lstm1.lstm_nonlin:0.0335418 lstm1.W_rp:0.81605 tdnn3.affine:1.63797 tdnn4.affine:1.68797 lstm2.W_all:1.20908 lstm2.lstm_nonlin:0.0188959 lstm2.W_rp:0.556454 tdnn5.affine:1.37696 tdnn6.affine:1.51094 lstm3.W_all:1.73646 lstm3.lstm_nonlin:0.0396584 lstm3.W_rp:0.604346 output.affine:1.28666 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8148 tdnn2.affine:10.2825 lstm1.W_all:20.1103 lstm1.lstm_nonlin:1.41084 lstm1.W_rp:14.469 tdnn3.affine:7.75218 tdnn4.affine:7.28738 lstm2.W_all:16.4401 lstm2.lstm_nonlin:1.07063 lstm2.W_rp:13.5295 tdnn5.affine:7.23592 tdnn6.affine:7.30812 lstm3.W_all:23.4689 lstm3.lstm_nonlin:2.29258 lstm3.W_rp:31.941 output.affine:29.8779 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.203544 tdnn2.affine:0.231238 lstm1.W_all:0.0876531 lstm1.lstm_nonlin:0.0236834 lstm1.W_rp:0.0563617 tdnn3.affine:0.211064 tdnn4.affine:0.231714 lstm2.W_all:0.0735291 lstm2.lstm_nonlin:0.0175987 lstm2.W_rp:0.0411001 tdnn5.affine:0.190648 tdnn6.affine:0.206851 lstm3.W_all:0.0739341 lstm3.lstm_nonlin:0.0171914 lstm3.W_rp:0.0188885 output.affine:0.0430112 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=1 threads=1
# Ended (code 0) at Thu Jul 30 13:07:33 KST 2020, elapsed time 1 seconds
