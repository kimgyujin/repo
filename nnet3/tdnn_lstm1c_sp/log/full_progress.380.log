# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/379.mdl exp/nnet3/tdnn_lstm1c_sp/380.mdl 
# Started at Thu Jul 30 12:31:40 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/379.mdl exp/nnet3/tdnn_lstm1c_sp/380.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000117534, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008724, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.002,0.003 0.004,0.007,0.16,0.19,0.21 0.23,0.25,0.26,0.30), mean=0.128, stddev=0.0805], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.05,0.05 0.06,0.07,0.18,0.24,0.29 0.36,0.40,0.43,0.53), mean=0.174, stddev=0.0964], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.007,0.008,0.01 0.02,0.03,0.09,0.26,0.35 0.43,0.50,0.54,0.64), mean=0.144, stddev=0.137], bias-{mean,stddev}=-0.000149,0.01054, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=2.36e+05, self-repaired-proportion=-1.98654, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.04,-0.009,-0.003,-0.0007 -0.0002,0.0001,0.04,0.09,0.12 0.15,0.16,0.17,0.20), mean=0.0498, stddev=0.0499], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.49,-0.34,-0.22,-0.13 -0.03,0.08,0.42,0.63,0.75 0.86,0.92,0.95,1.1), mean=0.371, stddev=0.302]
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-1275.88, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000117534, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00357, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.12,0.12 0.13,0.13,0.14,0.15,0.16 0.16,0.17,0.18,0.20), mean=0.14, stddev=0.0124], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.001,0.001,0.001 0.002,0.004,0.09,0.10,0.11 0.12,0.13,0.14,0.16), mean=0.069, stddev=0.0433], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.02,0.03,0.08,0.17,0.24 0.31,0.37,0.40,0.45), mean=0.107, stddev=0.0919], bias-{mean,stddev}=0.0001687,0.006072, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=4.35e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.23,-0.11,-0.03,0.05 0.11,0.18,0.30,0.42,0.51 0.57,0.68,0.73,0.89), mean=0.304, stddev=0.162], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.16,-0.005,0.07,0.17 0.24,0.31,0.45,0.58,0.65 0.73,0.79,0.86,1.0), mean=0.447, stddev=0.171]
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-1234.92, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000117534, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002117, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-09,4e-08,1e-07,7e-07 2e-05,0.02,0.04,0.07,0.08 0.10,0.11,0.12,0.16), mean=0.0448, stddev=0.0301], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.04,0.10,0.11,0.12 0.13,0.14,0.14,0.17), mean=0.0904, stddev=0.034], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-08,7e-08,7e-08,1e-07 2e-07,0.02,0.05,0.11,0.16 0.22,0.28,0.30,0.36), mean=0.0689, stddev=0.0677], bias-{mean,stddev}=2.818e-05,0.0007285, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000117534, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0008907, w_fc-rms=0.0007986, w_oc-rms=0.001831, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0013589, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.1,-6.0,-5.4,-4.2 -2.6,-1.1,0.50,1.7,2.8 3.7,5.0,5.7,9.0), mean=0.294, stddev=2.25], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.7,-3.0,-2.5,-1.2 -0.66,-0.12,0.34,1.4,2.2 2.9,3.6,3.9,6.7), mean=0.584, stddev=1.26] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0013589, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-10.0,-7.4,-5.6,-3.7 -2.3,-1.3,0.14,0.71,1.4 2.2,3.5,3.7,4.5), mean=-0.276, stddev=1.85], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.8,-1.9,-1.3,-0.93 -0.44,-0.02,0.25,0.92,1.5 2.0,2.6,3.0,5.6), mean=0.427, stddev=0.904] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-10.3206, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-45,-34,-25,-21 -15,-8.1,0.01,8.0,14 19,23,27,46), mean=-0.303, stddev=11.6], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-54,-22,-17,-13 -7.1,-3.3,1.7,12,18 22,28,30,48), mean=3.96, stddev=10.6] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0013589, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-10,-5.1,-4.8,-3.3 -2.0,-0.93,0.50,2.1,3.5 5.2,6.6,7.5,9.4), mean=0.651, stddev=2.38], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.5,-3.3,-2.8,-2.0 -1.3,-0.49,0.25,1.3,2.2 2.9,3.6,4.0,6.3), mean=0.368, stddev=1.45] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0013589, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-30,-19,-17,-12 -9.3,-5.5,-0.008,4.5,7.7 11,15,18,27), mean=-0.35, stddev=7.22], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-11,-9.2,-6.3,-5.0 -3.4,-1.5,1.0,4.2,6.3 8.3,12,13,25), mean=1.35, stddev=4.1] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-992, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-145
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.175207
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000117534, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002887, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.04,0.04,0.06,0.08,0.09 0.09,0.10,0.10,0.11), mean=0.0624, stddev=0.0209], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,6e-05,9e-05,0.0002 0.0008,0.03,0.05,0.06,0.06 0.07,0.07,0.08,0.10), mean=0.0417, stddev=0.0208], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,6e-08 7e-08,1e-07,3e-07,0.07,0.13 0.17,0.20,0.21,0.27), mean=0.0298, stddev=0.0587], bias-{mean,stddev}=4.833e-05,0.002631, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000117534, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.003493, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.07,0.07,0.07 0.08,0.08,0.10,0.11,0.12 0.12,0.13,0.13,0.15), mean=0.0963, stddev=0.0158], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.05,0.08,0.10,0.11 0.11,0.12,0.12,0.14), mean=0.0752, stddev=0.0263], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-09,3e-08,3e-08,4e-08 5e-08,8e-08,1e-05,0.11,0.19 0.24,0.29,0.31,0.36), mean=0.0502, stddev=0.0836], bias-{mean,stddev}=5.821e-05,0.001921, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-1112.04, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000117534, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002547, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.09 0.09,0.09,0.10,0.11,0.11 0.11,0.12,0.12,0.13), mean=0.1, stddev=0.0074], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.04,0.04,0.05 0.05,0.05,0.06,0.06,0.07 0.07,0.07,0.08,0.09), mean=0.0575, stddev=0.00804], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.04,0.07,0.12,0.17 0.20,0.24,0.26,0.28), mean=0.0839, stddev=0.0556], bias-{mean,stddev}=-0.0001226,0.002585, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-989.156, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000117534, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001419, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-07,5e-07,1e-06 5e-06,9e-05,0.03,0.05,0.06 0.07,0.08,0.08,0.09), mean=0.027, stddev=0.0241], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.03,0.07,0.08,0.08 0.08,0.09,0.09,0.10), mean=0.0609, stddev=0.0219], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-08,5e-08,6e-08,8e-08 2e-05,0.01,0.03,0.07,0.11 0.15,0.19,0.22,0.26), mean=0.0449, stddev=0.0467], bias-{mean,stddev}=1.718e-05,0.0006345, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000117534, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0005487, w_fc-rms=0.0005161, w_oc-rms=0.0008702, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00206473, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-10,-5.7,-4.8,-3.1 -2.1,-0.69,0.50,1.6,2.7 3.8,5.0,5.4,7.3), mean=0.398, stddev=2.05], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.2,-2.2,-1.9,-1.2 -0.81,-0.15,0.25,1.2,2.1 2.6,3.2,3.7,6.6), mean=0.488, stddev=1.15] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00206473, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-8.9,-6.9,-5.8,-3.8 -2.7,-1.4,0.49,0.53,1.5 2.4,3.3,4.6,6.9), mean=-0.208, stddev=1.97], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.1,-1.4,-1.0,-0.74 -0.30,0.10,0.25,0.95,1.5 2.3,2.9,3.1,4.7), mean=0.486, stddev=0.883] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0141862, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-62,-34,-27,-22 -16,-7.0,0.02,7.5,16 23,29,34,49), mean=0.034, stddev=13], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-41,-26,-23,-18 -9.9,-3.5,1.0,10,17 24,30,36,58), mean=2.69, stddev=11.9] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00206473, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.1,-7.0,-5.8,-3.5 -2.4,-1.1,0.50,1.4,2.9 4.0,5.7,7.4,11), mean=0.289, stddev=2.36], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-6.0,-3.2,-2.6,-1.7 -1.0,-0.23,0.25,1.2,1.9 2.5,3.7,4.0,5.8), mean=0.375, stddev=1.3] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00206473, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-38,-23,-17,-13 -9.7,-4.5,-0.006,5.2,9.5 13,20,23,30), mean=0.0353, stddev=8.06], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-19,-12,-9.9,-6.9 -4.8,-2.3,1.0,3.2,5.9 8.9,13,15,28), mean=0.776, stddev=4.87] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-608, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-91
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.175207
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000117534, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001962, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.04,0.05,0.06 0.06,0.06,0.06,0.07), mean=0.0433, stddev=0.0115], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0001,0.0002 0.0003,0.001,0.04,0.04,0.05 0.05,0.05,0.05,0.05), mean=0.0257, stddev=0.0184], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,3e-08,4e-08,5e-08 7e-08,1e-07,1e-06,0.06,0.09 0.11,0.12,0.13,0.14), mean=0.0226, stddev=0.0386], bias-{mean,stddev}=6.295e-05,0.002067, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000117534, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002886, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.06 0.07,0.07,0.08,0.09,0.10 0.11,0.11,0.11,0.12), mean=0.0796, stddev=0.0125], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.04,0.04,0.06,0.08,0.09 0.09,0.09,0.10,0.10), mean=0.0632, stddev=0.0183], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 6e-08,1e-07,0.001,0.09,0.15 0.20,0.23,0.26,0.29), mean=0.0446, stddev=0.0672], bias-{mean,stddev}=-6.769e-05,0.001535, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.29e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.005,0.0002,0.005,0.01 0.02,0.04,0.06,0.10,0.13 0.15,0.17,0.17,0.23), mean=0.0709, stddev=0.0406], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.05,-0.02,0.04,0.11 0.18,0.26,0.43,0.61,0.69 0.73,0.78,0.84,0.96), mean=0.43, stddev=0.193], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.05,0.13,0.19,0.22 0.28,0.34,0.38,0.42), mean=0.126, stddev=0.0838], oderiv-count=63168
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-866.276, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000117534, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.002185, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.06,0.07 0.08,0.08,0.09,0.09,0.10 0.10,0.10,0.11,0.11), mean=0.0857, stddev=0.0102], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.04,0.04,0.05,0.05,0.06 0.06,0.06,0.07,0.07), mean=0.0494, stddev=0.00646], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.03,0.05,0.10,0.14 0.18,0.22,0.23,0.27), mean=0.0702, stddev=0.0502], bias-{mean,stddev}=-0.0001194,0.002475, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-743.396, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000117534, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.001715, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.008,0.009,0.01 0.01,0.02,0.03,0.06,0.08 0.09,0.10,0.10,0.16), mean=0.036, stddev=0.0248], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.05 0.05,0.06,0.07,0.09,0.11 0.12,0.13,0.13,0.14), mean=0.0748, stddev=0.023], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,9e-06 0.008,0.01,0.03,0.08,0.14 0.19,0.24,0.26,0.30), mean=0.0514, stddev=0.059], bias-{mean,stddev}=-3.427e-05,0.0004587, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000117534, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0006712, w_fc-rms=0.0008462, w_oc-rms=0.001957, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00539976, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-76,-38,-33,-28 -21,-14,-3.9,3.9,7.9 13,18,23,79), mean=-5.17, stddev=12.9], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-18,-8.8,-7.2,-4.9 -2.1,0.29,4.2,7.1,8.9 10,12,13,18), mean=3.71, stddev=4.66] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00539976, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-47,-38,-33,-27 -20,-14,-4.0,5.5,11 16,21,25,39), mean=-4.35, stddev=12.6], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-16,-6.8,-6.2,-4.2 -2.6,-0.82,2.8,6.2,8.3 9.3,11,13,21), mean=2.79, stddev=4.31] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=1.80849, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-340,-218,-163,-128 -102,-75,-0.52,63,101 139,165,189,257), mean=-3.01, stddev=84.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-169,-91,-84,-65 -46,-23,11,51,68 87,112,131,152), mean=12.8, stddev=46.2] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00539976, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-74,-42,-38,-32 -23,-16,-1.6,13,20 27,37,46,63), mean=-1.27, stddev=18], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-26,-14,-11,-7.7 -6.0,-3.5,0.79,5.1,7.4 9.1,11,13,25), mean=0.665, stddev=5.59] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00539976, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-313,-184,-136,-99 -82,-55,-3.1,45,74 102,121,141,217), mean=-4.18, stddev=64.2], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-92,-64,-52,-33 -26,-16,4.2,22,33 43,52,57,72), mean=3.29, stddev=24.4] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-224, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-37
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.175207
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000117534, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002047, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.06,0.07 0.07,0.07,0.07,0.08), mean=0.0425, stddev=0.0193], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.03,0.03,0.04,0.04 0.04,0.05,0.05,0.09), mean=0.0321, stddev=0.00756], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,2e-07,2e-07,2e-07 3e-07,6e-07,0.005,0.06,0.09 0.11,0.13,0.14,0.16), mean=0.0268, stddev=0.0382], bias-{mean,stddev}=0.0004448,0.009616, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000117534, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002636, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.01,0.02,0.02 0.02,0.03,0.04,0.05,0.06 0.07,0.08,0.08,0.17), mean=0.0397, stddev=0.0151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.06 0.06,0.07,0.09,0.16,0.16 0.17,0.17,0.17,0.18), mean=0.113, stddev=0.0421], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,3e-07,3e-07,3e-07 3e-07,6e-07,0.002,0.17,0.24 0.28,0.30,0.32,0.34), mean=0.0675, stddev=0.1], bias-{mean,stddev}=-6.817e-11,0.0006523, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0,0.02,0.03,0.04 0.04,0.05,0.06,0.41), mean=0.0168, stddev=0.0191], oderiv-count=32320

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:3.45409 tdnn2.affine:3.21805 lstm1.W_all:2.46173 lstm1.lstm_nonlin:0.0498835 lstm1.W_rp:1.06228 tdnn3.affine:2.22486 tdnn4.affine:2.29499 lstm2.W_all:1.65053 lstm2.lstm_nonlin:0.0262456 lstm2.W_rp:0.722226 tdnn5.affine:1.83819 tdnn6.affine:1.96896 lstm3.W_all:1.99469 lstm3.lstm_nonlin:0.0509743 lstm3.W_rp:0.768528 output.affine:1.95008 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.921 tdnn2.affine:10.6228 lstm1.W_all:20.527 lstm1.lstm_nonlin:2.17266 lstm1.W_rp:15.175 tdnn3.affine:8.09906 tdnn4.affine:7.52864 lstm2.W_all:16.8081 lstm2.lstm_nonlin:1.4897 lstm2.W_rp:14.276 tdnn5.affine:7.612 tdnn6.affine:7.53701 lstm3.W_all:24.1509 lstm3.lstm_nonlin:3.1763 lstm3.W_rp:34.2933 output.affine:31.5002 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.267025 tdnn2.affine:0.302071 lstm1.W_all:0.119891 lstm1.lstm_nonlin:0.0228284 lstm1.W_rp:0.0699004 tdnn3.affine:0.273342 tdnn4.affine:0.303612 lstm2.W_all:0.0981026 lstm2.lstm_nonlin:0.0175392 lstm2.W_rp:0.0505247 tdnn5.affine:0.240365 tdnn6.affine:0.260009 lstm3.W_all:0.0825685 lstm3.lstm_nonlin:0.0160506 lstm3.W_rp:0.0224085 output.affine:0.0618903 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 12:31:40 KST 2020, elapsed time 0 seconds
