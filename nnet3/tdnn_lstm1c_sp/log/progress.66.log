# nnet3-info exp/nnet3/tdnn_lstm1c_sp/66.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/65.mdl exp/nnet3/tdnn_lstm1c_sp/66.mdl 
# Started at Thu Jul 30 10:27:15 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/66.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000244112, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0306, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.01,0.01,0.02 0.08,0.42,0.53,0.63,0.67 0.72,0.82,0.90,1.0), mean=0.489, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.15 0.17,0.21,0.59,0.82,1.2 1.4,1.5,1.6,1.6), mean=0.592, stddev=0.369], bias-{mean,stddev}=0.001943,0.05643, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.7e+05, self-repaired-proportion=0.115157, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-06,9e-06,2e-05,5e-05 0.0002,0.03,0.07,0.09,0.10 0.11,0.12,0.13,0.19), mean=0.06, stddev=0.035], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.002,0.005,0.02 0.05,0.26,0.48,0.61,0.70 0.76,0.81,0.85,0.91), mean=0.441, stddev=0.222], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.03,0.04 0.12,0.27,0.35,0.43,0.48 0.53,0.64,0.75,1.1), mean=0.342, stddev=0.14], oderiv-count=1.20013e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30332.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,2e-06,3e-06,4e-05 0.0002,0.02,0.06,0.08,0.10 0.11,0.13,0.14,0.15), mean=0.0558, stddev=0.0345], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,7e-05,0.0001,0.0005 0.002,0.06,0.09,0.11,0.12 0.12,0.13,0.13,0.14), mean=0.0804, stddev=0.039]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000244112, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01271, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.42 0.43,0.46,0.50,0.54,0.56 0.59,0.61,0.63,0.80), mean=0.499, stddev=0.0531], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.007,0.008,0.02 0.05,0.24,0.30,0.34,0.36 0.37,0.40,0.43,0.71), mean=0.269, stddev=0.108], bias-{mean,stddev}=-0.0006014,0.02682, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.08e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.28,0.29,0.29,0.31 0.32,0.33,0.36,0.39,0.41 0.43,0.45,0.46,0.62), mean=0.36, stddev=0.0397], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.40,0.41,0.42 0.42,0.43,0.46,0.48,0.49 0.51,0.52,0.52,0.55), mean=0.459, stddev=0.0277], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.03,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0406, stddev=0.00775], oderiv-count=1.19187e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29652.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.27,0.28,0.29 0.30,0.32,0.35,0.39,0.41 0.43,0.46,0.48,0.64), mean=0.353, stddev=0.0454], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.46,0.49,0.50,0.52 0.54,0.57,0.62,0.68,0.71 0.74,0.77,0.80,1.0), mean=0.625, stddev=0.0699]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000244112, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01762, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0008,0.004,0.008,0.04 0.13,0.23,0.39,0.58,0.68 0.76,0.84,0.89,1.1), mean=0.399, stddev=0.206], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.37,0.40,0.46 0.52,0.69,0.82,0.90,0.94 0.99,1.0,1.1,1.3), mean=0.788, stddev=0.157], bias-{mean,stddev}=-0.001646,0.01964, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000244112, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02497, w_fc-rms=0.04017, w_oc-rms=0.05569, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00608231, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.42,0.43,0.44 0.45,0.46,0.49,0.52,0.57 0.61,0.67,0.69,0.70), mean=0.499, stddev=0.0524], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.18,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.228, stddev=0.0147] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00608231, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.29,0.37,0.38,0.40 0.42,0.44,0.48,0.53,0.60 0.69,0.76,0.80,0.84), mean=0.496, stddev=0.086], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.17,0.19 0.21,0.22,0.24,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0203] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00799369, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.81,-0.76,-0.55 -0.37,-0.19,-0.002,0.21,0.36 0.57,0.72,0.77,0.81), mean=0.00165, stddev=0.309], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.29,0.31,0.36 0.39,0.46,0.58,0.70,0.83 0.98,0.99,1.0,1.0), mean=0.595, stddev=0.166] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00608231, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.40,0.42 0.43,0.44,0.47,0.51,0.53 0.56,0.59,0.60,0.67), mean=0.477, stddev=0.0431], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.19 0.20,0.21,0.22,0.23,0.24 0.25,0.25,0.25,0.25), mean=0.221, stddev=0.0169] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0158731, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.85,-0.80,-0.51 -0.33,-0.18,0.0001,0.18,0.34 0.51,0.72,0.79,0.88), mean=-0.00248, stddev=0.299], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.21,0.24,0.39 0.58,0.71,0.82,0.88,0.93 0.99,1.0,1.0,1.0), mean=0.782, stddev=0.164] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=300198
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000244112, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03227, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.24,0.27 0.29,0.33,0.51,1.0,1.1 1.1,1.2,1.2,1.3), mean=0.659, stddev=0.328], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.04,0.09 0.23,0.36,0.49,0.62,0.71 0.81,0.94,0.99,1.1), mean=0.482, stddev=0.195], bias-{mean,stddev}=-0.00394,0.04146, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000244112, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01285, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.25 0.27,0.29,0.34,0.40,0.44 0.48,0.52,0.54,0.66), mean=0.352, stddev=0.0707], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.09,0.10 0.11,0.12,0.21,0.40,0.45 0.48,0.51,0.52,0.56), mean=0.259, stddev=0.137], bias-{mean,stddev}=-0.005057,0.02329, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.93e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.05,0.06,0.07 0.09,0.11,0.14,0.17,0.19 0.20,0.22,0.22,0.28), mean=0.14, stddev=0.0403], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.19,0.20,0.27 0.31,0.39,0.49,0.58,0.63 0.66,0.69,0.70,0.75), mean=0.482, stddev=0.119], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.06 0.06,0.06,0.07,0.08,0.09 0.10,0.10,0.11,0.13), mean=0.0718, stddev=0.0122], oderiv-count=1.10938e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27613.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.04,0.05,0.07 0.08,0.10,0.14,0.17,0.19 0.20,0.22,0.23,0.30), mean=0.134, stddev=0.0411], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.14,0.15,0.17 0.18,0.19,0.22,0.25,0.26 0.28,0.29,0.32,0.36), mean=0.22, stddev=0.034]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000244112, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009475, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.29,0.30,0.32 0.33,0.34,0.37,0.40,0.42 0.44,0.45,0.45,0.61), mean=0.372, stddev=0.037], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.16,0.17 0.17,0.18,0.21,0.24,0.26 0.27,0.29,0.31,0.38), mean=0.213, stddev=0.0333], bias-{mean,stddev}=-0.009834,0.01606, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.76e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.26,0.27,0.30,0.34,0.36 0.38,0.40,0.41,0.47), mean=0.307, stddev=0.0394], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.39 0.40,0.41,0.44,0.47,0.48 0.49,0.50,0.51,0.53), mean=0.441, stddev=0.0306], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.0296, stddev=0.00271], oderiv-count=1.0487e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25573.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.25,0.26,0.29,0.33,0.35 0.37,0.39,0.40,0.49), mean=0.299, stddev=0.0409], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.46,0.47,0.49 0.51,0.53,0.57,0.62,0.66 0.69,0.74,0.75,0.90), mean=0.576, stddev=0.0634]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000244112, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01373, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0007,0.0008,0.001,0.002 0.005,0.03,0.28,0.48,0.57 0.63,0.67,0.69,1.2), mean=0.279, stddev=0.212], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.28,0.32 0.38,0.54,0.64,0.71,0.73 0.77,0.82,0.85,0.96), mean=0.612, stddev=0.132], bias-{mean,stddev}=-0.002856,0.02096, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000244112, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.01387, w_fc-rms=0.0193, w_oc-rms=0.02397, count=1.34e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613323, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.43,0.44,0.45 0.45,0.47,0.50,0.51,0.53 0.56,0.59,0.60,0.66), mean=0.494, stddev=0.0342], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.232, stddev=0.0158] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613323, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.40,0.41,0.42 0.43,0.45,0.49,0.50,0.52 0.56,0.62,0.63,0.73), mean=0.484, stddev=0.0457], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.19,0.20,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.239, stddev=0.0129] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00995579, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.66,-0.61,-0.37 -0.24,-0.12,0.007,0.16,0.30 0.41,0.58,0.65,0.76), mean=0.0138, stddev=0.23], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.45,0.47,0.51 0.54,0.57,0.65,0.98,1.0 1.0,1.0,1.0,1.0), mean=0.721, stddev=0.182] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00613323, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.41,0.42,0.43 0.44,0.45,0.49,0.50,0.52 0.55,0.57,0.60,0.66), mean=0.486, stddev=0.0356], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.20,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0165] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00613323, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.73,-0.65,-0.57,-0.34 -0.23,-0.11,0.005,0.15,0.27 0.38,0.56,0.63,0.86), mean=0.0133, stddev=0.223], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.49,0.55,0.65 0.76,0.81,0.88,0.99,1.0 1.0,1.0,1.0,1.0), mean=0.874, stddev=0.11] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.75e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.77672e-06, count-zeroing-boundaries=264780
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000244112, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02885, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.39,0.41 0.42,0.45,0.61,0.82,0.88 0.91,0.94,0.96,1.1), mean=0.633, stddev=0.179], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.009,0.01,0.01 0.02,0.06,0.44,0.63,0.69 0.77,0.83,0.89,1.1), mean=0.389, stddev=0.256], bias-{mean,stddev}=-0.001344,0.09806, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000244112, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01201, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.22 0.23,0.26,0.31,0.39,0.44 0.50,0.56,0.59,0.65), mean=0.324, stddev=0.0867], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.14,0.15,0.16 0.17,0.19,0.25,0.34,0.37 0.40,0.42,0.43,0.49), mean=0.263, stddev=0.0784], bias-{mean,stddev}=0.001609,0.01813, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.48e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.04 0.05,0.06,0.09,0.12,0.14 0.15,0.16,0.17,0.23), mean=0.0945, stddev=0.0349], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.12,0.19 0.24,0.30,0.43,0.55,0.59 0.61,0.65,0.66,0.75), mean=0.423, stddev=0.133], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.06,0.06 0.06,0.07,0.08,0.09,0.11 0.12,0.13,0.13,0.18), mean=0.0814, stddev=0.018], oderiv-count=1.0153e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=23534.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.04 0.05,0.06,0.09,0.12,0.14 0.16,0.17,0.17,0.21), mean=0.0919, stddev=0.0357], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.12 0.13,0.14,0.16,0.19,0.20 0.21,0.23,0.25,0.28), mean=0.163, stddev=0.0346]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000244112, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009083, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.25,0.27,0.27,0.28 0.30,0.31,0.35,0.40,0.42 0.45,0.47,0.48,0.53), mean=0.355, stddev=0.0498], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.12,0.14 0.15,0.17,0.20,0.23,0.26 0.29,0.32,0.36,0.47), mean=0.202, stddev=0.0465], bias-{mean,stddev}=-0.01131,0.01516, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.37e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.22,0.24 0.25,0.28,0.31,0.34,0.36 0.37,0.40,0.41,0.46), mean=0.307, stddev=0.0415], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.37 0.38,0.39,0.42,0.45,0.46 0.47,0.48,0.49,0.53), mean=0.421, stddev=0.032], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.02,0.03,0.03 0.03,0.03,0.03,0.04), mean=0.0252, stddev=0.00275], oderiv-count=910400
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=21495.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.23 0.24,0.27,0.30,0.34,0.36 0.37,0.40,0.41,0.48), mean=0.303, stddev=0.0453], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.45,0.47 0.50,0.53,0.59,0.66,0.70 0.74,0.77,0.79,0.85), mean=0.596, stddev=0.0803]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000244112, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01976, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.17,0.25 0.31,0.36,0.43,0.62,0.75 0.80,0.85,0.87,1.5), mean=0.475, stddev=0.166], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.56,0.59,0.60,0.62 0.64,0.67,0.75,1.1,1.4 1.4,1.5,1.5,1.7), mean=0.86, stddev=0.269], bias-{mean,stddev}=0.007544,0.0249, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000244112, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.02994, w_fc-rms=0.04033, w_oc-rms=0.0559, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619467, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.45,0.45,0.47 0.48,0.51,0.57,0.63,0.65 0.67,0.69,0.70,0.78), mean=0.569, stddev=0.0653], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.19,0.20,0.21,0.21,0.22 0.22,0.22,0.23,0.23), mean=0.206, stddev=0.00989] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619467, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.46,0.47,0.48 0.50,0.53,0.59,0.64,0.66 0.68,0.73,0.73,0.87), mean=0.587, stddev=0.0622], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.17,0.18,0.18 0.19,0.19,0.21,0.21,0.22 0.22,0.23,0.23,0.23), mean=0.205, stddev=0.0132] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00850192, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.81,-0.76,-0.52 -0.31,-0.19,0.0004,0.20,0.34 0.49,0.71,0.81,0.86), mean=-0.00198, stddev=0.294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.26,0.27,0.32 0.35,0.39,0.45,0.48,0.50 0.52,0.53,0.55,0.64), mean=0.437, stddev=0.0622] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00619467, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.51,0.54,0.55,0.56 0.58,0.60,0.64,0.68,0.70 0.72,0.75,0.76,0.94), mean=0.644, stddev=0.0504], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.15,0.16,0.17 0.17,0.18,0.19,0.20,0.20 0.20,0.21,0.21,0.21), mean=0.188, stddev=0.0128] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0163871, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.98,-0.84,-0.80,-0.52 -0.29,-0.18,-0.003,0.20,0.29 0.51,0.72,0.84,0.92), mean=0.000278, stddev=0.294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.20,0.23,0.37 0.48,0.57,0.65,0.70,0.71 0.72,0.74,0.74,0.77), mean=0.617, stddev=0.11] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.51e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=225179
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000244112, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06872, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.5,1.8,1.9 2.0,2.0,2.0,2.1), mean=1.54, stddev=0.271], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.55,0.66,0.76,0.86 0.91,0.98,1.1,1.2,1.3 1.3,1.4,1.4,1.5), mean=1.1, stddev=0.154], bias-{mean,stddev}=0.0002884,0.0871, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000244112, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04064, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.51,0.52,0.55 0.57,0.59,0.64,0.70,0.73 0.77,0.82,0.86,2.1), mean=0.649, stddev=0.0935], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.3,1.4,1.4,1.4 1.5,1.5,1.8,2.1,2.2 2.3,2.4,2.4,2.6), mean=1.84, stddev=0.283], bias-{mean,stddev}=4.079e-09,0.02715, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0136], oderiv-count=649600
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/65.mdl exp/nnet3/tdnn_lstm1c_sp/66.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:8.62354 tdnn2.affine:8.81971 lstm1.W_all:7.57035 lstm1.lstm_nonlin:0.154247 lstm1.W_rp:3.0612 tdnn3.affine:5.30743 tdnn4.affine:6.27388 lstm2.W_all:4.95861 lstm2.lstm_nonlin:0.0689632 lstm2.W_rp:2.05567 tdnn5.affine:4.32499 tdnn6.affine:5.23527 lstm3.W_all:6.67572 lstm3.lstm_nonlin:0.157485 lstm3.W_rp:2.65534 output.affine:5.91878 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.155 tdnn2.affine:11.4627 lstm1.W_all:20.5127 lstm1.lstm_nonlin:1.6662 lstm1.W_rp:11.8852 tdnn3.affine:8.20043 tdnn4.affine:8.54466 lstm2.W_all:15.9911 lstm2.lstm_nonlin:0.769789 lstm2.W_rp:10.7248 tdnn5.affine:7.66267 tdnn6.affine:8.19168 lstm3.W_all:23.0036 lstm3.lstm_nonlin:1.71368 lstm3.W_rp:25.3084 output.affine:30.0813 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.708906 tdnn2.affine:0.768256 lstm1.W_all:0.368647 lstm1.lstm_nonlin:0.0930806 lstm1.W_rp:0.256035 tdnn3.affine:0.644354 tdnn4.affine:0.728669 lstm2.W_all:0.308879 lstm2.lstm_nonlin:0.0887506 lstm2.W_rp:0.190784 tdnn5.affine:0.557953 tdnn6.affine:0.631289 lstm3.W_all:0.289462 lstm3.lstm_nonlin:0.0933389 lstm3.W_rp:0.104775 output.affine:0.19637 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:27:15 KST 2020, elapsed time 0 seconds
