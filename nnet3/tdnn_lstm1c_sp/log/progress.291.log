# nnet3-info exp/nnet3/tdnn_lstm1c_sp/291.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/290.mdl exp/nnet3/tdnn_lstm1c_sp/291.mdl 
# Started at Thu Jul 30 11:56:14 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/291.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000205393, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.03244, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.007,0.008,0.009,0.01 0.02,0.04,0.57,0.71,0.79 0.87,0.93,0.99,1.2), mean=0.477, stddev=0.297], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.14,0.14,0.15 0.17,0.21,0.63,0.89,1.2 1.4,1.5,1.6,1.6), mean=0.629, stddev=0.389], bias-{mean,stddev}=0.0006464,0.06173, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0.220702, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-06,1e-05,2e-05,4e-05 7e-05,0.0002,0.06,0.10,0.11 0.13,0.15,0.16,0.23), mean=0.0545, stddev=0.0459], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.002,0.005,0.007,0.02 0.03,0.05,0.44,0.61,0.71 0.81,0.87,0.92,1.0), mean=0.379, stddev=0.264], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.02 0.03,0.06,0.27,0.36,0.42 0.50,0.62,0.71,1.4), mean=0.257, stddev=0.166], oderiv-count=1.2464e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=41081.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,9e-06,1e-05,2e-05 4e-05,0.0003,0.06,0.09,0.11 0.13,0.15,0.16,0.22), mean=0.0532, stddev=0.0454], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-05,0.0001,0.0002,0.0002 0.0004,0.002,0.09,0.12,0.13 0.14,0.15,0.15,0.16), mean=0.0745, stddev=0.0518]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000205393, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01213, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.38 0.40,0.42,0.47,0.52,0.56 0.59,0.63,0.65,0.73), mean=0.474, stddev=0.0658], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.004,0.005,0.006,0.007 0.009,0.02,0.29,0.34,0.37 0.41,0.45,0.52,0.72), mean=0.236, stddev=0.144], bias-{mean,stddev}=-0.0255,0.03928, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.03e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.22,0.23,0.24 0.26,0.27,0.30,0.34,0.36 0.38,0.41,0.44,0.52), mean=0.306, stddev=0.044], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.37,0.37,0.39 0.41,0.42,0.45,0.48,0.49 0.51,0.53,0.53,0.54), mean=0.449, stddev=0.0348], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.06,0.06,0.06,0.07), mean=0.0415, stddev=0.00723], oderiv-count=1.10115e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=40201.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.25 0.26,0.27,0.30,0.34,0.36 0.39,0.42,0.45,0.56), mean=0.31, stddev=0.0461], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.48 0.49,0.51,0.55,0.61,0.63 0.66,0.71,0.73,0.80), mean=0.561, stddev=0.0601]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000205393, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01813, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-06,5e-06,3e-05 0.001,0.16,0.43,0.61,0.69 0.75,0.81,0.85,1.1), mean=0.396, stddev=0.238], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.41,0.46 0.54,0.72,0.83,0.92,0.99 1.1,1.1,1.1,1.3), mean=0.81, stddev=0.165], bias-{mean,stddev}=0.003066,0.02828, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000205393, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.06819, w_fc-rms=0.03203, w_oc-rms=0.0462, count=1.48e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638577, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.44,0.45,0.47,0.50,0.54 0.71,0.79,0.81,0.85), mean=0.495, stddev=0.0795], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.18 0.20,0.21,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.223, stddev=0.0233] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638577, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.44,0.46,0.47 0.48,0.49,0.50,0.54,0.59 0.67,0.77,0.79,0.86), mean=0.525, stddev=0.0651], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.17 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0233] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0296052, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.89,-0.87,-0.52 -0.28,-0.12,0.002,0.16,0.32 0.56,0.87,0.89,0.91), mean=0.017, stddev=0.304], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.20,0.23 0.37,0.43,0.56,0.75,1.0 1.0,1.0,1.0,1.0), mean=0.601, stddev=0.221] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00638577, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.38,0.39,0.40 0.41,0.43,0.45,0.50,0.50 0.51,0.54,0.57,0.73), mean=0.459, stddev=0.0408], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.17,0.18,0.18 0.19,0.20,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.219, stddev=0.021] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00638577, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.68,-0.63,-0.32 -0.15,-0.07,0.0008,0.10,0.22 0.34,0.64,0.70,0.74), mean=0.0114, stddev=0.211], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.44,0.46,0.57 0.78,0.83,0.90,0.95,1.0 1.0,1.0,1.0,1.0), mean=0.876, stddev=0.117] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.97e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=5.85063e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0.000174797, count-zeroing-boundaries=294627
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.265565
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000205393, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04056, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.33,0.36,0.39 0.43,0.50,0.88,1.2,1.3 1.4,1.4,1.4,1.5), mean=0.859, stddev=0.344], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0002,0.001,0.001,0.003 0.01,0.32,0.54,0.74,0.92 1.2,1.6,1.7,2.0), mean=0.549, stddev=0.355], bias-{mean,stddev}=0.01261,0.2733, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000205393, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0135, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.006,0.21,0.23,0.25 0.27,0.30,0.36,0.43,0.47 0.51,0.54,0.57,0.68), mean=0.368, stddev=0.0823], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.11,0.11,0.13 0.14,0.16,0.29,0.40,0.43 0.45,0.47,0.48,0.52), mean=0.285, stddev=0.118], bias-{mean,stddev}=0.00228,0.01111, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.04e+06, self-repaired-proportion=0.0040625, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(8e-05,0.02,0.03,0.03 0.05,0.07,0.09,0.11,0.13 0.14,0.16,0.16,0.19), mean=0.0899, stddev=0.0316], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.13,0.18,0.22 0.30,0.39,0.52,0.61,0.66 0.69,0.72,0.72,0.83), mean=0.497, stddev=0.14], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.08,0.09,0.09 0.09,0.10,0.11,0.14,0.16 0.19,0.23,0.24,0.29), mean=0.122, stddev=0.0335], oderiv-count=1.04819e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=37559.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.02,0.03,0.03 0.05,0.07,0.09,0.11,0.13 0.15,0.16,0.16,0.18), mean=0.0899, stddev=0.032], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0006,0.07,0.09,0.10 0.11,0.12,0.14,0.16,0.17 0.18,0.20,0.20,0.23), mean=0.139, stddev=0.0268]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000205393, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.009017, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.28,0.29,0.30 0.31,0.32,0.34,0.38,0.41 0.44,0.47,0.48,0.56), mean=0.353, stddev=0.0452], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.12,0.13,0.14 0.15,0.16,0.19,0.24,0.26 0.28,0.31,0.33,0.38), mean=0.2, stddev=0.0463], bias-{mean,stddev}=-0.02346,0.01963, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.63e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.22,0.23 0.24,0.25,0.28,0.31,0.33 0.34,0.36,0.37,0.45), mean=0.282, stddev=0.0347], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.37,0.38,0.39 0.40,0.41,0.43,0.46,0.47 0.48,0.49,0.49,0.51), mean=0.435, stddev=0.0273], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.03,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0344, stddev=0.00302], oderiv-count=1.0224e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34917.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.22,0.23 0.24,0.26,0.28,0.31,0.33 0.35,0.36,0.37,0.46), mean=0.285, stddev=0.035], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.44,0.45,0.46 0.47,0.50,0.54,0.59,0.62 0.67,0.70,0.75,0.96), mean=0.547, stddev=0.0675]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000205393, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01506, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-07,2e-06,2e-06,6e-06 3e-05,0.0006,0.34,0.54,0.60 0.66,0.70,0.73,0.90), mean=0.296, stddev=0.245], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.31,0.34,0.39 0.49,0.61,0.68,0.76,0.80 0.86,0.95,1.0,1.4), mean=0.674, stddev=0.133], bias-{mean,stddev}=0.005447,0.03602, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000205393, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04158, w_fc-rms=0.01653, w_oc-rms=0.03703, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644218, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.43,0.44,0.45 0.46,0.47,0.50,0.52,0.57 0.60,0.68,0.73,0.80), mean=0.506, stddev=0.0531], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.0182] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644218, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.44,0.46,0.47 0.48,0.50,0.50,0.54,0.57 0.61,0.66,0.67,0.76), mean=0.518, stddev=0.0448], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.17,0.18,0.19 0.20,0.22,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0198] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00699158, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.89,-0.83,-0.72,-0.48 -0.26,-0.13,0.001,0.16,0.33 0.56,0.74,0.76,0.86), mean=0.0126, stddev=0.278], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.28,0.39 0.45,0.51,0.62,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.709, stddev=0.23] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00644218, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.43,0.44 0.45,0.47,0.50,0.50,0.52 0.54,0.57,0.59,0.62), mean=0.491, stddev=0.0294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.18,0.19 0.20,0.21,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.23, stddev=0.0193] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00644218, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.68,-0.58,-0.44,-0.31 -0.17,-0.07,0.0003,0.09,0.21 0.36,0.48,0.54,0.61), mean=0.00898, stddev=0.179], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.49,0.58,0.62,0.74 0.78,0.85,0.92,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.909, stddev=0.095] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=2.90401e-06, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.35078e-05, count-zeroing-boundaries=259810
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.265565
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000205393, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03948, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.45,0.49,0.53 0.56,0.60,0.88,1.1,1.2 1.2,1.3,1.3,1.4), mean=0.864, stddev=0.253], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0004,0.0009,0.001,0.002 0.003,0.01,0.57,0.83,0.96 1.1,1.3,1.5,1.7), mean=0.493, stddev=0.402], bias-{mean,stddev}=0.002265,0.219, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000205393, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01305, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.25,0.27 0.28,0.30,0.35,0.41,0.45 0.49,0.53,0.55,0.62), mean=0.358, stddev=0.0684], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.15,0.16 0.17,0.19,0.27,0.38,0.41 0.43,0.45,0.46,0.53), mean=0.283, stddev=0.0933], bias-{mean,stddev}=0.0006721,0.00644, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.39e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.02,0.03 0.03,0.05,0.07,0.10,0.11 0.12,0.13,0.13,0.17), mean=0.0738, stddev=0.0288], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.13,0.16,0.21 0.26,0.35,0.50,0.60,0.64 0.66,0.69,0.70,0.76), mean=0.476, stddev=0.141], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.14,0.17 0.18,0.21,0.22,0.26), mean=0.129, stddev=0.028], oderiv-count=909632
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32275.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.03,0.05,0.08,0.10,0.11 0.12,0.13,0.14,0.18), mean=0.0753, stddev=0.029], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.09,0.10,0.12,0.14,0.15 0.15,0.16,0.17,0.20), mean=0.119, stddev=0.0222]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000205393, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008926, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.19,0.24 0.28,0.30,0.35,0.40,0.43 0.44,0.47,0.48,0.52), mean=0.347, stddev=0.0613], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.16,0.19,0.23,0.26 0.30,0.32,0.34,0.43), mean=0.198, stddev=0.0481], bias-{mean,stddev}=-0.01839,0.02503, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.12e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.16,0.19,0.21 0.24,0.26,0.30,0.33,0.34 0.35,0.37,0.38,0.49), mean=0.293, stddev=0.0423], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.36,0.37 0.39,0.40,0.43,0.45,0.47 0.48,0.49,0.50,0.53), mean=0.427, stddev=0.0313], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04), mean=0.0282, stddev=0.00237], oderiv-count=889440
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=29633.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.17,0.19,0.22 0.24,0.27,0.30,0.33,0.35 0.36,0.37,0.39,0.56), mean=0.299, stddev=0.0441], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.30,0.32,0.40 0.46,0.52,0.58,0.65,0.68 0.72,0.76,0.81,1.0), mean=0.579, stddev=0.0955]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000205393, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02146, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.29,0.30,0.31 0.33,0.38,0.51,0.66,0.74 0.79,0.85,0.88,1.1), mean=0.526, stddev=0.15], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.64,0.68,0.69,0.75 0.78,0.82,0.89,1.1,1.2 1.3,1.5,1.7,2.0), mean=0.958, stddev=0.199], bias-{mean,stddev}=0.01596,0.02129, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000205393, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.1036, w_fc-rms=0.04853, w_oc-rms=0.0723, count=1.23e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651031, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.57,0.58,0.62 0.64,0.67,0.72,0.77,0.80 0.83,0.85,0.86,0.89), mean=0.721, stddev=0.0629], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.11,0.12 0.13,0.15,0.17,0.19,0.20 0.20,0.21,0.21,0.23), mean=0.168, stddev=0.0241] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651031, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.49,0.56,0.59 0.61,0.65,0.70,0.75,0.79 0.82,0.86,0.87,0.88), mean=0.698, stddev=0.0713], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.10,0.10,0.12 0.13,0.15,0.17,0.19,0.20 0.20,0.20,0.21,0.22), mean=0.169, stddev=0.0243] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0379571, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.87,-0.83,-0.62 -0.45,-0.33,0.006,0.31,0.44 0.57,0.76,0.86,0.92), mean=-0.00794, stddev=0.366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.16,0.18,0.23 0.29,0.36,0.45,0.51,0.53 0.55,0.58,0.58,0.63), mean=0.431, stddev=0.0955] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00651031, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.48,0.50,0.54 0.56,0.59,0.64,0.68,0.71 0.73,0.76,0.80,0.87), mean=0.64, stddev=0.0601], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.13,0.14 0.15,0.16,0.18,0.19,0.19 0.20,0.20,0.20,0.21), mean=0.177, stddev=0.0182] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00651031, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.78,-0.73,-0.67,-0.51 -0.36,-0.26,0.004,0.24,0.35 0.47,0.65,0.69,0.78), mean=-0.00761, stddev=0.294], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.41,0.46 0.52,0.61,0.69,0.74,0.76 0.78,0.80,0.81,0.85), mean=0.669, stddev=0.0944] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=220899
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.265565
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000205393, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.08955, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.0,1.1,1.1,1.2 1.2,1.3,1.7,2.6,2.7 2.7,2.8,2.9,3.1), mean=1.95, stddev=0.61], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.98,1.0,1.1 1.1,1.2,1.4,1.6,1.9 2.0,2.2,2.2,2.3), mean=1.42, stddev=0.282], bias-{mean,stddev}=-0.00777,0.6376, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000205393, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04425, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.57,0.60,0.61,0.63 0.64,0.66,0.70,0.75,0.78 0.81,0.86,0.93,2.2), mean=0.708, stddev=0.0846], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.2,1.2 1.3,1.3,1.8,2.5,2.6 2.7,2.8,2.8,2.9), mean=1.95, stddev=0.572], bias-{mean,stddev}=7.068e-09,0.02631, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0168, stddev=0.0137], oderiv-count=538240
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/290.mdl exp/nnet3/tdnn_lstm1c_sp/291.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:4.37467 tdnn2.affine:4.35538 lstm1.W_all:3.46888 lstm1.lstm_nonlin:0.0785902 lstm1.W_rp:1.38593 tdnn3.affine:3.08231 tdnn4.affine:3.32216 lstm2.W_all:2.50518 lstm2.lstm_nonlin:0.0430991 lstm2.W_rp:0.992763 tdnn5.affine:2.5804 tdnn6.affine:2.75637 lstm3.W_all:2.63341 lstm3.lstm_nonlin:0.0679489 lstm3.W_rp:1.08666 output.affine:2.88175 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:12.8901 tdnn2.affine:10.9741 lstm1.W_all:21.122 lstm1.lstm_nonlin:2.01535 lstm1.W_rp:15.5517 tdnn3.affine:8.60198 tdnn4.affine:8.15092 lstm2.W_all:17.5872 lstm2.lstm_nonlin:1.32452 lstm2.W_rp:14.9413 tdnn5.affine:8.31333 tdnn6.affine:8.07005 lstm3.W_all:24.9803 lstm3.lstm_nonlin:3.08616 lstm3.W_rp:34.4939 output.affine:32.748 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.340083 tdnn2.affine:0.396412 lstm1.W_all:0.164103 lstm1.lstm_nonlin:0.0392447 lstm1.W_rp:0.0891098 tdnn3.affine:0.359163 tdnn4.affine:0.406873 lstm2.W_all:0.14241 lstm2.lstm_nonlin:0.0328997 lstm2.W_rp:0.0664748 tdnn5.affine:0.310601 tdnn6.affine:0.341387 lstm3.W_all:0.105332 lstm3.lstm_nonlin:0.0220004 lstm3.W_rp:0.0315647 output.affine:0.0880269 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:56:14 KST 2020, elapsed time 0 seconds
