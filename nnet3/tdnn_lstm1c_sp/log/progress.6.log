# nnet3-info exp/nnet3/tdnn_lstm1c_sp/6.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/5.mdl exp/nnet3/tdnn_lstm1c_sp/6.mdl 
# Started at Thu Jul 30 10:03:32 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/6.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00029528, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0294, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.03,0.03 0.03,0.03,0.54,0.65,0.71 0.78,0.88,0.93,1.0), mean=0.421, stddev=0.287], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.12,0.13,0.14 0.16,0.19,0.55,0.78,1.0 1.4,1.5,1.6,1.7), mean=0.563, stddev=0.365], bias-{mean,stddev}=0.007011,0.06952, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.25e+05, self-repaired-proportion=0.333348, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,2e-07,0.07,0.11,0.13 0.15,0.16,0.16,0.19), mean=0.0625, stddev=0.0525], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,0.0001,0.45,0.72,0.80 0.84,0.88,0.89,0.94), mean=0.391, stddev=0.315], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.30,0.39,0.46 0.52,0.59,0.76,1.0), mean=0.263, stddev=0.176], oderiv-count=1.16416e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=45322.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,2e-07,0.07,0.11,0.12 0.13,0.15,0.16,0.17), mean=0.0582, stddev=0.0495], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 0,2e-05,0.10,0.12,0.13 0.14,0.15,0.16,0.18), mean=0.0744, stddev=0.0554]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00029528, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01263, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.45,0.46,0.49,0.53,0.55 0.58,0.59,0.60,0.65), mean=0.497, stddev=0.0419], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.02,0.02,0.32,0.37,0.40 0.42,0.45,0.46,0.51), mean=0.24, stddev=0.159], bias-{mean,stddev}=-0.003631,0.0566, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.21e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.24,0.24,0.26 0.28,0.30,0.34,0.37,0.39 0.40,0.42,0.43,0.47), mean=0.338, stddev=0.0408], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.38,0.39,0.40 0.41,0.43,0.47,0.51,0.52 0.54,0.55,0.56,0.59), mean=0.468, stddev=0.0425], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04,0.05 0.05,0.05,0.06,0.08), mean=0.0405, stddev=0.00617], oderiv-count=1.17613e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=44400.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.26 0.28,0.30,0.33,0.37,0.38 0.40,0.41,0.43,0.51), mean=0.333, stddev=0.0422], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.42,0.44,0.47,0.48 0.49,0.52,0.56,0.61,0.64 0.66,0.69,0.71,0.79), mean=0.565, stddev=0.0558]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00029528, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02316, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.47,0.47,0.48 0.49,0.50,0.55,0.65,0.73 0.79,0.84,0.89,1.0), mean=0.582, stddev=0.0967], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.87,0.88,0.88,0.90 0.91,0.99,1.1,1.1,1.1 1.1,1.2,1.2,1.2), mean=1.05, stddev=0.0785], bias-{mean,stddev}=0.001693,0.479, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00029528, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.4994, w_fc-rms=0.4829, w_oc-rms=0.4724, count=1.42e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00623185, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.25,0.27,0.30 0.34,0.39,0.51,0.62,0.67 0.72,0.76,0.79,0.89), mean=0.508, stddev=0.126], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.13,0.15,0.17 0.19,0.20,0.22,0.23,0.23 0.23,0.24,0.24,0.24), mean=0.212, stddev=0.0209] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00675315, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.22,0.27 0.31,0.37,0.47,0.59,0.68 0.74,0.80,0.82,0.87), mean=0.484, stddev=0.14], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.11,0.13,0.15 0.17,0.20,0.22,0.23,0.23 0.24,0.24,0.24,0.24), mean=0.212, stddev=0.027] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00697809, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.80,-0.79,-0.68 -0.56,-0.40,0.01,0.44,0.60 0.70,0.77,0.78,0.86), mean=0.0162, stddev=0.424], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.26,0.28,0.33 0.38,0.42,0.54,0.64,0.71 0.75,0.80,0.82,0.84), mean=0.534, stddev=0.127] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00616113, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.24,0.27,0.29 0.34,0.39,0.48,0.58,0.64 0.69,0.76,0.77,0.85), mean=0.488, stddev=0.118], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.17 0.19,0.20,0.21,0.22,0.23 0.23,0.23,0.23,0.24), mean=0.209, stddev=0.0187] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0160513, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.90,-0.79,-0.74,-0.60 -0.44,-0.27,0.006,0.32,0.47 0.59,0.70,0.79,0.88), mean=0.0108, stddev=0.351], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.22,0.26,0.39 0.53,0.64,0.79,0.88,0.91 0.94,0.96,0.97,0.98), mean=0.749, stddev=0.162] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.96e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=294477
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00029528, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03488, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.62,0.64,0.65,0.67 0.69,0.73,0.79,0.86,0.90 0.93,0.93,0.97,1.0), mean=0.792, stddev=0.077], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.37,0.39 0.42,0.46,0.54,0.64,0.70 0.76,0.81,0.85,0.98), mean=0.551, stddev=0.111], bias-{mean,stddev}=0.04851,0.4918, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00029528, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01499, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.10,0.16,0.21 0.26,0.31,0.40,0.49,0.55 0.62,0.67,0.72,0.84), mean=0.401, stddev=0.119], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.24,0.24,0.26 0.27,0.30,0.33,0.38,0.41 0.42,0.45,0.45,0.49), mean=0.338, stddev=0.0495], bias-{mean,stddev}=0.0006514,0.02778, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.48e+05, self-repaired-proportion=0.0285882, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1e-05,0.0006,0.01,0.06 0.09,0.13,0.22,0.33,0.37 0.39,0.43,0.44,0.53), mean=0.228, stddev=0.108], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0005,0.02,0.07,0.16 0.23,0.31,0.47,0.66,0.75 0.80,0.83,0.85,0.89), mean=0.479, stddev=0.198], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.03,0.04,0.05,0.06,0.07 0.09,0.12,0.13,0.18), mean=0.0499, stddev=0.021], oderiv-count=1.07878e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=41636, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-06,6e-05,0.03,0.07 0.09,0.12,0.21,0.30,0.34 0.38,0.42,0.43,0.50), mean=0.215, stddev=0.0972], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.001,0.09,0.20 0.23,0.27,0.33,0.38,0.41 0.43,0.47,0.49,0.57), mean=0.321, stddev=0.0805]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00029528, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01039, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.29,0.31 0.34,0.37,0.41,0.45,0.47 0.48,0.49,0.50,0.53), mean=0.408, stddev=0.049], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.06,0.09,0.12 0.13,0.17,0.23,0.28,0.31 0.34,0.37,0.39,0.46), mean=0.228, stddev=0.0662], bias-{mean,stddev}=-0.01117,0.04217, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=9.44e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.22,0.23,0.26 0.28,0.30,0.33,0.37,0.39 0.40,0.43,0.44,0.48), mean=0.334, stddev=0.043], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.35,0.36,0.38 0.40,0.42,0.44,0.47,0.49 0.50,0.52,0.53,0.55), mean=0.445, stddev=0.0365], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0268, stddev=0.00424], oderiv-count=981184
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=38871.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.26 0.28,0.29,0.33,0.36,0.38 0.40,0.41,0.44,0.50), mean=0.328, stddev=0.0422], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.46,0.49 0.51,0.54,0.59,0.64,0.66 0.69,0.72,0.76,0.84), mean=0.59, stddev=0.0618]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00029528, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02168, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.44,0.46,0.47,0.47 0.48,0.49,0.52,0.60,0.66 0.70,0.75,0.78,0.89), mean=0.548, stddev=0.0716], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.86,0.87,0.87,0.88 0.89,0.92,1.0,1.0,1.1 1.1,1.1,1.1,1.1), mean=0.987, stddev=0.0587], bias-{mean,stddev}=0.01522,0.4809, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00029528, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.5148, w_fc-rms=0.4935, w_oc-rms=0.4954, count=1.3e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0062155, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.25,0.28,0.31 0.34,0.40,0.51,0.63,0.68 0.72,0.78,0.81,0.90), mean=0.514, stddev=0.128], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.13,0.15,0.17 0.18,0.20,0.22,0.23,0.23 0.23,0.24,0.24,0.24), mean=0.211, stddev=0.022] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00821049, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.25,0.26,0.31 0.35,0.39,0.48,0.60,0.68 0.76,0.84,0.86,0.95), mean=0.498, stddev=0.136], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.09,0.11,0.15 0.18,0.20,0.22,0.23,0.24 0.24,0.24,0.24,0.24), mean=0.213, stddev=0.0287] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00953599, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.81,-0.77,-0.68 -0.53,-0.40,0.02,0.40,0.59 0.68,0.76,0.82,0.90), mean=0.00827, stddev=0.417], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.24,0.27,0.35 0.41,0.46,0.55,0.67,0.72 0.77,0.80,0.82,0.86), mean=0.558, stddev=0.126] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0062155, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.22,0.25,0.28 0.32,0.38,0.50,0.61,0.67 0.72,0.79,0.84,0.91), mean=0.499, stddev=0.135], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.12,0.14,0.17 0.18,0.20,0.22,0.23,0.23 0.23,0.24,0.24,0.24), mean=0.209, stddev=0.023] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0271509, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.87,-0.80,-0.61 -0.43,-0.28,0.01,0.30,0.47 0.62,0.76,0.81,0.98), mean=0.00745, stddev=0.356], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.14,0.21,0.35 0.55,0.65,0.79,0.89,0.91 0.94,0.95,0.97,0.98), mean=0.75, stddev=0.172] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.72e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=259719
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00029528, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03329, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.64,0.65,0.66 0.67,0.70,0.75,0.81,0.83 0.86,0.89,0.91,0.93), mean=0.757, stddev=0.0625], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.35,0.36,0.37 0.39,0.42,0.50,0.62,0.69 0.75,0.83,0.87,0.96), mean=0.523, stddev=0.119], bias-{mean,stddev}=-0.01764,0.4791, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00029528, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01398, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.07,0.14 0.20,0.26,0.37,0.47,0.53 0.59,0.64,0.67,0.78), mean=0.368, stddev=0.131], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.24 0.25,0.27,0.31,0.36,0.38 0.40,0.42,0.44,0.52), mean=0.315, stddev=0.049], bias-{mean,stddev}=0.0003407,0.02673, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.39e+05, self-repaired-proportion=0.0704268, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(6e-06,1e-05,6e-05,0.002 0.05,0.10,0.23,0.33,0.38 0.41,0.45,0.45,0.50), mean=0.221, stddev=0.12], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0008,0.003,0.02 0.15,0.26,0.43,0.60,0.68 0.71,0.76,0.77,0.82), mean=0.421, stddev=0.197], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.06,0.08 0.11,0.15,0.17,0.26), mean=0.05, stddev=0.0304], oderiv-count=1.0345e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=36106.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,2e-06,5e-06,0.0008 0.07,0.11,0.22,0.30,0.35 0.39,0.43,0.43,0.46), mean=0.209, stddev=0.109], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0002,0.0003,0.008 0.19,0.26,0.35,0.41,0.44 0.47,0.51,0.54,0.58), mean=0.33, stddev=0.115]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00029528, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01044, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.29,0.32 0.35,0.38,0.41,0.44,0.46 0.49,0.52,0.54,0.59), mean=0.409, stddev=0.049], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.09 0.12,0.16,0.22,0.29,0.32 0.35,0.39,0.42,0.67), mean=0.224, stddev=0.0806], bias-{mean,stddev}=-8.852e-05,0.04702, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.76e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.22,0.25 0.27,0.30,0.35,0.39,0.41 0.43,0.46,0.48,0.53), mean=0.346, stddev=0.0536], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.30,0.32,0.34,0.35 0.37,0.39,0.43,0.46,0.48 0.50,0.51,0.52,0.55), mean=0.428, stddev=0.0444], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.025, stddev=0.00308], oderiv-count=968640
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=33341.6, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.22,0.23,0.25 0.27,0.29,0.34,0.38,0.40 0.42,0.44,0.48,0.55), mean=0.336, stddev=0.0524], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.45,0.48,0.52 0.54,0.57,0.61,0.67,0.69 0.73,0.79,0.82,0.94), mean=0.618, stddev=0.0685]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00029528, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02375, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.45,0.47,0.47,0.49 0.50,0.52,0.57,0.67,0.75 0.81,0.86,0.89,1.1), mean=0.597, stddev=0.0987], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.91,0.94,0.95,0.98 1.0,1.0,1.1,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.08, stddev=0.0791], bias-{mean,stddev}=0.0001014,0.4799, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00029528, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.4568, w_fc-rms=0.4733, w_oc-rms=0.4925, count=1.18e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628117, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.30,0.33,0.37 0.41,0.46,0.55,0.65,0.70 0.73,0.76,0.79,0.84), mean=0.555, stddev=0.11], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.13,0.14,0.16 0.17,0.18,0.20,0.21,0.22 0.23,0.23,0.23,0.24), mean=0.194, stddev=0.0206] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628117, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.27,0.29,0.33 0.38,0.44,0.56,0.65,0.71 0.76,0.84,0.86,0.89), mean=0.551, stddev=0.13], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.12,0.14 0.16,0.18,0.20,0.22,0.22 0.23,0.23,0.23,0.24), mean=0.196, stddev=0.026] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.010352, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.94,-0.81,-0.77,-0.66 -0.52,-0.29,0.02,0.29,0.48 0.61,0.74,0.77,0.82), mean=-0.00536, stddev=0.366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.27,0.28,0.31 0.34,0.39,0.47,0.56,0.61 0.65,0.69,0.73,0.77), mean=0.473, stddev=0.102] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00628117, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.27,0.30,0.37 0.41,0.48,0.59,0.70,0.75 0.78,0.82,0.83,0.89), mean=0.587, stddev=0.126], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.13,0.14 0.15,0.17,0.18,0.20,0.21 0.21,0.22,0.22,0.23), mean=0.182, stddev=0.0216] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0171321, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.81,-0.78,-0.63 -0.40,-0.25,-0.004,0.24,0.38 0.53,0.72,0.78,0.89), mean=-0.00582, stddev=0.325], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.22,0.26,0.35 0.48,0.56,0.67,0.76,0.83 0.86,0.90,0.92,0.95), mean=0.656, stddev=0.144] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.48e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=4.52761e-06, count-zeroing-boundaries=220867
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00029528, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06055, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.2,1.2,1.2,1.2 1.2,1.3,1.4,1.5,1.5 1.6,1.6,1.6,1.7), mean=1.38, stddev=0.111], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.37,0.39,0.43,0.51 0.63,0.75,0.96,1.1,1.2 1.3,1.4,1.4,1.8), mean=0.948, stddev=0.233], bias-{mean,stddev}=0.04449,0.451, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00029528, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04056, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.47,0.49,0.52 0.54,0.57,0.63,0.71,0.76 0.81,0.90,0.99,2.1), mean=0.644, stddev=0.112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.5,1.6 1.6,1.7,1.8,2.0,2.1 2.2,2.2,2.2,2.3), mean=1.85, stddev=0.172], bias-{mean,stddev}=1.402e-09,0.007743, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.0169, stddev=0.0137], oderiv-count=610560
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/5.mdl exp/nnet3/tdnn_lstm1c_sp/6.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.04957 tdnn2.affine:9.47158 lstm1.W_all:9.05367 lstm1.lstm_nonlin:2.4178 lstm1.W_rp:4.29506 tdnn3.affine:6.55479 tdnn4.affine:7.35949 lstm2.W_all:6.89701 lstm2.lstm_nonlin:2.48926 lstm2.W_rp:3.24688 tdnn5.affine:5.42428 tdnn6.affine:6.84721 lstm3.W_all:7.88888 lstm3.lstm_nonlin:2.36241 lstm3.W_rp:3.25692 output.affine:6.93305 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.7219 tdnn2.affine:11.4461 lstm1.W_all:34.6765 lstm1.lstm_nonlin:19.1575 lstm1.W_rp:15.1007 tdnn3.affine:9.567 tdnn4.affine:9.41403 lstm2.W_all:33.4231 lstm2.lstm_nonlin:19.8004 lstm2.W_rp:14.4787 tdnn5.affine:8.92266 tdnn6.affine:9.46055 lstm3.W_all:35.2378 lstm3.lstm_nonlin:18.7393 lstm3.W_rp:23.4311 output.affine:30.0023 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.784074 tdnn2.affine:0.82671 lstm1.W_all:0.239378 lstm1.lstm_nonlin:0.112108 lstm1.W_rp:0.269664 tdnn3.affine:0.661018 tdnn4.affine:0.76871 lstm2.W_all:0.187157 lstm2.lstm_nonlin:0.111699 lstm2.W_rp:0.212013 tdnn5.affine:0.591731 tdnn6.affine:0.715236 lstm3.W_all:0.205948 lstm3.lstm_nonlin:0.112058 lstm3.W_rp:0.137708 output.affine:0.234746 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:03:32 KST 2020, elapsed time 0 seconds
