# nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/199.mdl exp/nnet3/tdnn_lstm1c_sp/200.mdl 
# Started at Thu Jul 30 11:20:07 KST 2020
#
nnet3-show-progress --use-gpu=no --verbose=2 exp/nnet3/tdnn_lstm1c_sp/199.mdl exp/nnet3/tdnn_lstm1c_sp/200.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
VLOG[1] (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:136) Printing info for the difference between the neural nets: left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000160101, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01603, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.006,0.008 0.02,0.11,0.29,0.33,0.36 0.39,0.41,0.43,0.57), mean=0.25, stddev=0.121], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.08,0.08,0.09 0.10,0.12,0.34,0.44,0.51 0.68,0.74,0.78,0.91), mean=0.319, stddev=0.178], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.04,0.05,0.19,0.46,0.64 0.78,0.91,0.99,1.1), mean=0.27, stddev=0.246], bias-{mean,stddev}=0.001204,0.02141, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-9885.93, test-mode=false
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000160101, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006939, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.22,0.23 0.24,0.25,0.27,0.29,0.30 0.31,0.32,0.33,0.35), mean=0.273, stddev=0.0256], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.002,0.003,0.005 0.009,0.07,0.17,0.19,0.20 0.22,0.23,0.24,0.29), mean=0.142, stddev=0.0691], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.07,0.15,0.33,0.47 0.59,0.71,0.75,0.87), mean=0.213, stddev=0.173], bias-{mean,stddev}=0.0002858,0.011, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=4.3e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.74,-0.47,-0.40,-0.24 -0.11,0.02,0.26,0.51,0.68 0.74,0.88,1.0,1.2), mean=0.258, stddev=0.313], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.49,-0.22,-0.17,-0.10 0.05,0.19,0.47,0.73,0.91 1.0,1.1,1.2,1.4), mean=0.467, stddev=0.325]
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-9726.03, test-mode=false
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000160101, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004266, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,8e-06,3e-05,0.0002 0.002,0.04,0.09,0.14,0.17 0.20,0.23,0.24,0.28), mean=0.0903, stddev=0.0606], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.06 0.06,0.09,0.21,0.23,0.24 0.25,0.26,0.28,0.33), mean=0.184, stddev=0.0629], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-08,1e-07,1e-07,1e-07 2e-07,0.04,0.10,0.22,0.32 0.43,0.58,0.63,0.72), mean=0.139, stddev=0.136], bias-{mean,stddev}=4.403e-05,0.001502, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000160101, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001399, w_fc-rms=0.001624, w_oc-rms=0.003243, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000234704, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.12,-0.02,0.13 0.24,0.33,0.50,0.63,0.74 0.86,0.94,1.1,1.5), mean=0.486, stddev=0.224], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.36,-0.12,-0.06,0.004 0.08,0.15,0.24,0.28,0.33 0.39,0.44,0.46,0.58), mean=0.219, stddev=0.112] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000234704, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.46,-0.11,0.002,0.15 0.24,0.37,0.50,0.65,0.76 0.84,1.0,1.2,1.6), mean=0.513, stddev=0.225], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.17,-0.03,0.01,0.05 0.13,0.18,0.25,0.28,0.31 0.35,0.40,0.41,0.53), mean=0.231, stddev=0.0829] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00470344, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.4,-4.0,-3.5,-2.7 -2.0,-1.2,-0.004,1.1,1.9 2.6,3.3,3.8,4.8), mean=-0.0477, stddev=1.55], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-4.1,-2.6,-2.3,-1.5 -1.0,-0.38,0.70,1.3,1.9 2.3,2.8,2.9,3.9), mean=0.507, stddev=1.14] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000234704, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.47,-0.17,-0.11,-0.009 0.19,0.31,0.50,0.65,0.79 0.90,0.98,1.1,1.2), mean=0.482, stddev=0.248], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.67,-0.24,-0.15,-0.04 0.03,0.11,0.23,0.30,0.36 0.42,0.53,0.58,0.70), mean=0.207, stddev=0.15] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000234704, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.8,-2.8,-2.5,-1.9 -1.4,-0.78,-0.009,0.77,1.4 1.9,2.3,2.5,3.2), mean=-0.0202, stddev=1.09], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.0,-0.55,-0.38,-0.18 0.14,0.43,0.95,1.2,1.5 1.6,2.0,2.1,3.6), mean=0.858, stddev=0.552] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-2.26e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-3384
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0727273
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000160101, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005504, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.06,0.11,0.17,0.18 0.19,0.20,0.20,0.22), mean=0.113, stddev=0.0545], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.0006,0.001,0.002 0.008,0.06,0.09,0.11,0.12 0.13,0.14,0.15,0.17), mean=0.0804, stddev=0.0375], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,4e-08,5e-08,5e-08 7e-08,1e-07,4e-07,0.01,0.25 0.34,0.40,0.44,0.49), mean=0.0503, stddev=0.115], bias-{mean,stddev}=-0.0007117,0.007772, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000160101, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.006413, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.14,0.15,0.17,0.20,0.22 0.23,0.25,0.26,0.28), mean=0.176, stddev=0.0326], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.04,0.04 0.05,0.06,0.12,0.20,0.21 0.22,0.24,0.25,0.26), mean=0.129, stddev=0.069], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,4e-08,5e-08,6e-08 9e-08,2e-07,2e-05,0.16,0.34 0.47,0.56,0.62,0.71), mean=0.0811, stddev=0.16], bias-{mean,stddev}=0.0007257,0.008588, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-9246.3, test-mode=false
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000160101, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005107, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.17,0.17,0.18 0.18,0.19,0.20,0.21,0.22 0.23,0.24,0.24,0.26), mean=0.201, stddev=0.0154], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.08,0.08,0.09 0.09,0.10,0.11,0.13,0.14 0.15,0.15,0.16,0.17), mean=0.115, stddev=0.0182], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.05,0.05,0.05 0.06,0.08,0.13,0.25,0.33 0.41,0.48,0.53,0.59), mean=0.167, stddev=0.113], bias-{mean,stddev}=0.0002741,0.005841, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=5.47e+04, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.19,-0.13,-0.09,-0.04 0.07,0.13,0.28,0.41,0.48 0.56,0.64,0.68,0.92), mean=0.277, stddev=0.172], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.42,-0.21,-0.16,-0.03 0.08,0.21,0.42,0.63,0.73 0.86,0.92,0.97,1.3), mean=0.416, stddev=0.261]
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-8766.58, test-mode=false
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000160101, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.002916, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,1e-07,2e-07,5e-07 2e-06,3e-05,0.05,0.10,0.13 0.15,0.16,0.17,0.27), mean=0.0542, stddev=0.0509], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.11,0.14,0.15,0.16 0.17,0.18,0.18,0.23), mean=0.127, stddev=0.0407], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-08,8e-08,9e-08,1e-07 4e-06,0.02,0.06,0.14,0.22 0.30,0.39,0.44,0.53), mean=0.0925, stddev=0.0956], bias-{mean,stddev}=-0.0001835,0.00374, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000160101, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0007647, w_fc-rms=0.0009029, w_oc-rms=0.001486, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000227934, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.68,-0.30,-0.13,0.13 0.21,0.38,0.50,0.68,0.80 0.98,1.2,1.4,1.8), mean=0.516, stddev=0.271], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.07,0.006,0.04,0.09 0.13,0.19,0.25,0.27,0.30 0.34,0.38,0.41,0.54), mean=0.233, stddev=0.0739] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000227934, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.40,-0.12,-0.04,0.11 0.25,0.40,0.50,0.63,0.77 0.88,1.0,1.1,1.6), mean=0.509, stddev=0.225], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.08,0.05,0.12,0.15 0.18,0.22,0.25,0.26,0.29 0.31,0.34,0.37,0.55), mean=0.242, stddev=0.0527] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.0513739, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-5.3,-4.2,-3.8,-2.5 -1.8,-0.90,-0.0007,0.89,1.9 2.6,3.4,3.7,4.8), mean=-0.00259, stddev=1.5], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.8,-1.5,-1.3,-0.91 -0.47,0.06,1.0,1.0,1.5 2.0,2.4,2.7,3.5), mean=0.697, stddev=0.817] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000227934, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.77,-0.56,-0.30,-0.12 0.11,0.35,0.50,0.70,0.88 1.0,1.2,1.4,1.7), mean=0.506, stddev=0.329], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.09,-0.03,0.003,0.06 0.12,0.17,0.25,0.27,0.31 0.35,0.40,0.43,0.57), mean=0.231, stddev=0.0825] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=-0.000227934, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.9,-3.0,-2.5,-1.8 -1.3,-0.61,-0.0003,0.61,1.2 1.8,2.4,2.8,3.8), mean=-0.00605, stddev=1.03], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.1,-0.22,-0.08,0.15 0.44,0.67,1.0,1.1,1.3 1.5,1.8,1.9,2.7), mean=0.91, stddev=0.4] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-2.03e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-3060
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0727273
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000160101, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003789, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.04,0.04,0.05 0.05,0.05,0.08,0.11,0.12 0.12,0.13,0.13,0.13), mean=0.082, stddev=0.0273], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-05,8e-05,0.0001,0.0001 0.0003,0.0008,0.06,0.08,0.09 0.10,0.10,0.11,0.13), mean=0.0484, stddev=0.0372], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-08,3e-08,4e-08,5e-08 7e-08,1e-07,2e-06,0.10,0.18 0.22,0.25,0.28,0.29), mean=0.04, stddev=0.0765], bias-{mean,stddev}=0.0003398,0.005269, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000160101, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.005046, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.10,0.10 0.11,0.12,0.14,0.16,0.18 0.18,0.20,0.21,0.21), mean=0.139, stddev=0.025], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.06,0.06,0.06 0.06,0.07,0.10,0.15,0.16 0.16,0.17,0.18,0.20), mean=0.109, stddev=0.0376], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-08,5e-08,5e-08,7e-08 9e-08,2e-07,0.0009,0.15,0.26 0.36,0.44,0.47,0.54), mean=0.0709, stddev=0.122], bias-{mean,stddev}=9.857e-05,0.004451, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-8286.85, test-mode=false
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000160101, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.004113, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.14,0.15,0.16,0.18,0.18 0.19,0.20,0.20,0.23), mean=0.162, stddev=0.0167], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.06,0.07,0.07 0.08,0.08,0.09,0.10,0.11 0.12,0.13,0.14,0.15), mean=0.0927, stddev=0.0144], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.04 0.04,0.06,0.10,0.19,0.27 0.34,0.41,0.44,0.52), mean=0.131, stddev=0.0956], bias-{mean,stddev}=0.0006054,0.004959, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=-7807.13, test-mode=false
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000160101, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.003819, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.06,0.14,0.17 0.19,0.20,0.21,0.35), mean=0.0831, stddev=0.0507], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.11,0.12,0.15,0.22,0.26 0.28,0.29,0.30,0.32), mean=0.165, stddev=0.0562], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(9e-07,2e-06,5e-06,0.0001 0.02,0.03,0.06,0.17,0.30 0.43,0.54,0.58,0.67), mean=0.114, stddev=0.132], bias-{mean,stddev}=8.173e-05,0.001282, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000160101, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.001291, w_fc-rms=0.002167, w_oc-rms=0.002873, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000220442, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.57,-0.29,-0.14,0.16 0.44,0.67,0.98,1.3,1.5 1.6,1.9,1.9,2.5), mean=0.967, stddev=0.44], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.42,-0.18,-0.15,-0.11 -0.04,0.0005,0.11,0.23,0.29 0.34,0.39,0.40,0.51), mean=0.115, stddev=0.133] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000220442, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.88,-0.62,-0.46,-0.21 -0.03,0.26,0.66,1.1,1.3 1.6,1.7,1.8,2.1), mean=0.671, stddev=0.531], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.27,-0.13,-0.11,-0.04 -0.004,0.07,0.18,0.27,0.32 0.39,0.41,0.47,0.75), mean=0.171, stddev=0.129] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.113484, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.7,-8.0,-7.3,-5.9 -4.1,-2.7,-0.07,2.4,3.8 4.6,6.2,7.6,11), mean=-0.143, stddev=3.18], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-3.2,-2.9,-2.5,-1.7 -1.2,-0.62,0.21,1.2,1.9 2.3,2.8,3.1,4.1), mean=0.27, stddev=1.22] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=-0.000220442, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-1.2,-0.52,-0.38,-0.18 0.10,0.40,0.82,1.3,1.5 1.8,2.0,2.2,2.6), mean=0.832, stddev=0.571], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.42,-0.21,-0.17,-0.10 -0.05,0.02,0.13,0.26,0.34 0.40,0.44,0.45,0.62), mean=0.137, stddev=0.152] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00614077, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-9.1,-6.3,-5.6,-4.5 -3.3,-2.2,-0.09,1.9,2.8 3.7,4.8,5.9,8.1), mean=-0.153, stddev=2.51], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-2.8,-1.6,-1.3,-1.0 -0.54,-0.29,0.35,1.1,1.6 1.9,2.2,2.4,3.9), mean=0.429, stddev=0.866] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=-1.8e+04, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=-2697
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0727273
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000160101, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.004646, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.05,0.05,0.05 0.05,0.06,0.08,0.14,0.14 0.15,0.15,0.16,0.16), mean=0.0985, stddev=0.039], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.04,0.04 0.05,0.06,0.07,0.09,0.09 0.10,0.10,0.11,0.15), mean=0.0732, stddev=0.0161], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,4e-07,5e-07,9e-07 2e-06,1e-05,0.02,0.13,0.20 0.25,0.30,0.32,0.34), mean=0.0634, stddev=0.0849], bias-{mean,stddev}=0.0009825,0.01313, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000160101, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.005359, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.03,0.03,0.04 0.05,0.06,0.08,0.10,0.12 0.13,0.16,0.17,0.39), mean=0.0808, stddev=0.0306], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.14,0.15,0.15 0.16,0.17,0.22,0.30,0.32 0.32,0.33,0.33,0.35), mean=0.237, stddev=0.0643], linear-params-singular-values=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(5e-07,5e-07,6e-07,8e-07 2e-06,1e-05,0.008,0.35,0.48 0.57,0.62,0.65,0.69), mean=0.137, stddev=0.204], bias-{mean,stddev}=1.85e-10,0.001361, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104

LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.34959 tdnn2.affine:6.25475 lstm1.W_all:4.96058 lstm1.lstm_nonlin:0.0886433 lstm1.W_rp:2.02762 tdnn3.affine:4.08886 tdnn4.affine:4.60157 lstm2.W_all:3.39437 lstm2.lstm_nonlin:0.0433173 lstm2.W_rp:1.39562 tdnn5.affine:3.21547 tdnn6.affine:3.70615 lstm3.W_all:4.44109 lstm3.lstm_nonlin:0.0871711 lstm3.W_rp:1.72133 output.affine:3.96397 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.2878 tdnn2.affine:10.1778 lstm1.W_all:18.2771 lstm1.lstm_nonlin:1.16001 lstm1.W_rp:12.2567 tdnn3.affine:7.39999 tdnn4.affine:7.56829 lstm2.W_all:15.3308 lstm2.lstm_nonlin:0.494258 lstm2.W_rp:11.1957 tdnn5.affine:6.62846 tdnn6.affine:7.07804 lstm3.W_all:21.9148 lstm3.lstm_nonlin:1.81118 lstm3.W_rp:28.0908 output.affine:28.1927 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.563005 tdnn2.affine:0.615945 lstm1.W_all:0.271312 lstm1.lstm_nonlin:0.0758602 lstm1.W_rp:0.165762 tdnn3.affine:0.554152 tdnn4.affine:0.607453 lstm2.W_all:0.221116 lstm2.lstm_nonlin:0.0879982 lstm2.W_rp:0.124823 tdnn5.affine:0.484578 tdnn6.affine:0.521644 lstm3.W_all:0.202488 lstm3.lstm_nonlin:0.0481909 lstm3.W_rp:0.0612967 output.affine:0.140493 ]
LOG (nnet3-show-progress[5.5.0-]:PrintProfile():cu-device.cc:533) -----
[cudevice profile]
Total GPU time:	0s (may involve some double-counting)
-----
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:20:07 KST 2020, elapsed time 0 seconds
