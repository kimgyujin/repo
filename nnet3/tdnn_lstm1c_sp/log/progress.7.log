# nnet3-info exp/nnet3/tdnn_lstm1c_sp/7.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/6.mdl exp/nnet3/tdnn_lstm1c_sp/7.mdl 
# Started at Thu Jul 30 10:03:56 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/7.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.000294345, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02992, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.01,0.01,0.01 0.01,0.01,0.55,0.66,0.72 0.79,0.84,0.91,1.1), mean=0.427, stddev=0.294], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.13,0.15 0.17,0.20,0.57,0.80,1.1 1.4,1.5,1.6,1.7), mean=0.575, stddev=0.368], bias-{mean,stddev}=0.00726,0.06537, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.18e+06, self-repaired-proportion=0.319161, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 4e-10,7e-07,0.07,0.10,0.12 0.14,0.15,0.15,0.17), mean=0.0588, stddev=0.049], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 8e-07,0.0007,0.45,0.69,0.77 0.82,0.85,0.87,0.91), mean=0.381, stddev=0.302], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.30,0.41,0.46 0.52,0.61,0.77,1.0), mean=0.269, stddev=0.189], oderiv-count=1.25184e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=31502, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 8e-17,7e-07,0.06,0.09,0.12 0.14,0.15,0.16,0.21), mean=0.0539, stddev=0.0478], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0,0,0 1e-10,3e-05,0.10,0.12,0.13 0.13,0.14,0.15,0.17), mean=0.0713, stddev=0.0536]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000294345, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01279, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.45,0.47,0.50,0.54,0.56 0.57,0.60,0.61,0.64), mean=0.503, stddev=0.0434], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.008,0.008,0.008,0.008 0.008,0.009,0.32,0.38,0.40 0.42,0.45,0.47,0.53), mean=0.242, stddev=0.163], bias-{mean,stddev}=-0.003916,0.04577, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.11e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.24,0.26,0.27 0.29,0.31,0.34,0.36,0.38 0.39,0.41,0.42,0.47), mean=0.336, stddev=0.0366], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.39,0.41 0.42,0.44,0.47,0.50,0.52 0.53,0.54,0.55,0.57), mean=0.468, stddev=0.0358], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.05,0.05 0.05,0.06,0.06,0.07), mean=0.0408, stddev=0.00619], oderiv-count=1.23187e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30780.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.25,0.26,0.27 0.29,0.30,0.33,0.36,0.38 0.41,0.42,0.43,0.48), mean=0.332, stddev=0.04], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.44,0.46,0.48 0.50,0.52,0.57,0.62,0.66 0.68,0.71,0.72,0.85), mean=0.572, stddev=0.0617]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000294345, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02189, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.41,0.42,0.43 0.44,0.46,0.51,0.63,0.72 0.77,0.83,0.86,1.0), mean=0.547, stddev=0.109], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.78,0.79,0.80,0.81 0.83,0.92,1.0,1.1,1.1 1.1,1.1,1.1,1.2), mean=0.994, stddev=0.0912], bias-{mean,stddev}=0.001281,0.4248, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000294345, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.4428, w_fc-rms=0.4289, w_oc-rms=0.4191, count=1.45e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0060403, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.27,0.29,0.32 0.36,0.41,0.50,0.60,0.65 0.70,0.73,0.76,0.87), mean=0.507, stddev=0.114], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.14,0.17,0.18 0.19,0.21,0.22,0.23,0.23 0.24,0.24,0.24,0.24), mean=0.216, stddev=0.0184] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0060403, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.21,0.24,0.28 0.32,0.38,0.47,0.59,0.67 0.73,0.80,0.81,0.85), mean=0.484, stddev=0.131], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.12,0.15,0.16 0.18,0.20,0.22,0.23,0.24 0.24,0.24,0.24,0.24), mean=0.216, stddev=0.0248] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0060403, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.80,-0.77,-0.66 -0.55,-0.38,0.004,0.42,0.56 0.69,0.75,0.77,0.84), mean=0.0147, stddev=0.409], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.28,0.30,0.34 0.39,0.44,0.54,0.65,0.71 0.76,0.82,0.84,0.86), mean=0.545, stddev=0.126] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.0060403, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.27,0.29,0.31 0.35,0.40,0.48,0.57,0.63 0.67,0.74,0.75,0.82), mean=0.486, stddev=0.106], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.16,0.17,0.18 0.19,0.20,0.22,0.23,0.23 0.23,0.24,0.24,0.24), mean=0.213, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0102805, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.77,-0.73,-0.59 -0.44,-0.26,-0.002,0.31,0.44 0.58,0.72,0.75,0.88), mean=0.00959, stddev=0.342], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.29,0.41 0.56,0.66,0.79,0.88,0.91 0.93,0.96,0.97,0.98), mean=0.755, stddev=0.156] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=2e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=299229
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000294345, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03389, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.60,0.61,0.61,0.63 0.65,0.69,0.76,0.84,0.88 0.91,0.93,0.94,0.96), mean=0.768, stddev=0.0831], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.34,0.37 0.39,0.44,0.53,0.62,0.68 0.73,0.81,0.85,1.0), mean=0.534, stddev=0.115], bias-{mean,stddev}=0.04326,0.4359, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000294345, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01478, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.16,0.19,0.22 0.26,0.31,0.39,0.48,0.54 0.60,0.68,0.70,0.77), mean=0.397, stddev=0.112], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.24,0.25 0.27,0.29,0.33,0.38,0.40 0.42,0.44,0.46,0.48), mean=0.333, stddev=0.0509], bias-{mean,stddev}=0.0003828,0.01591, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.02e+06, self-repaired-proportion=0.0134066, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.007,0.04,0.07 0.10,0.12,0.21,0.28,0.32 0.35,0.38,0.39,0.46), mean=0.205, stddev=0.0857], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.05,0.13,0.19 0.25,0.32,0.48,0.64,0.73 0.77,0.81,0.83,0.89), mean=0.479, stddev=0.178], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.03,0.03 0.03,0.04,0.05,0.06,0.07 0.09,0.11,0.13,0.17), mean=0.0524, stddev=0.0203], oderiv-count=1.12282e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=28615.1, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-08,0.003,0.04,0.07 0.10,0.13,0.19,0.27,0.30 0.33,0.35,0.38,0.44), mean=0.196, stddev=0.0784], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.02,0.14,0.20 0.23,0.26,0.30,0.34,0.37 0.40,0.41,0.44,0.49), mean=0.297, stddev=0.0651]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000294345, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01038, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.26,0.28,0.31 0.34,0.38,0.41,0.44,0.46 0.47,0.49,0.50,0.52), mean=0.407, stddev=0.0486], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.09,0.11,0.12 0.14,0.18,0.23,0.28,0.31 0.34,0.36,0.38,0.43), mean=0.228, stddev=0.0629], bias-{mean,stddev}=-0.0106,0.03194, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.92e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.23,0.24,0.26 0.28,0.29,0.32,0.36,0.37 0.39,0.41,0.42,0.46), mean=0.325, stddev=0.0388], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.37,0.39 0.40,0.42,0.44,0.47,0.48 0.49,0.51,0.51,0.53), mean=0.442, stddev=0.031], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.04,0.04,0.05), mean=0.0271, stddev=0.00416], oderiv-count=1.06662e+06
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=26450, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.24,0.24,0.26 0.27,0.29,0.32,0.35,0.37 0.39,0.41,0.42,0.46), mean=0.319, stddev=0.0405], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.45,0.46,0.49 0.51,0.54,0.58,0.63,0.66 0.69,0.72,0.73,0.78), mean=0.583, stddev=0.0607]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000294345, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02011, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.41,0.42,0.42 0.43,0.44,0.48,0.57,0.63 0.69,0.73,0.76,0.88), mean=0.506, stddev=0.0821], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.77,0.78,0.78,0.79 0.81,0.84,0.93,0.97,0.99 1.0,1.0,1.0,1.1), mean=0.915, stddev=0.0682], bias-{mean,stddev}=0.01329,0.4263, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000294345, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.4568, w_fc-rms=0.4381, w_oc-rms=0.4394, count=1.32e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00609118, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.29,0.33 0.36,0.41,0.51,0.61,0.66 0.70,0.75,0.78,0.87), mean=0.511, stddev=0.116], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.16,0.18 0.19,0.20,0.22,0.23,0.24 0.24,0.24,0.24,0.24), mean=0.215, stddev=0.0195] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00627492, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.27,0.28,0.33 0.36,0.39,0.47,0.59,0.67 0.74,0.82,0.83,0.93), mean=0.496, stddev=0.127], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.06,0.10,0.13,0.17 0.19,0.21,0.23,0.23,0.24 0.24,0.24,0.24,0.24), mean=0.218, stddev=0.0261] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00609118, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.85,-0.81,-0.77,-0.65 -0.51,-0.39,0.02,0.37,0.58 0.67,0.73,0.82,0.88), mean=0.00823, stddev=0.399], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.28,0.29,0.37 0.42,0.47,0.57,0.68,0.74 0.79,0.83,0.85,0.87), mean=0.577, stddev=0.125] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00609118, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.25,0.27,0.30 0.33,0.40,0.49,0.60,0.66 0.70,0.76,0.81,0.89), mean=0.497, stddev=0.122], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.14,0.15,0.18 0.19,0.20,0.22,0.23,0.23 0.24,0.24,0.24,0.24), mean=0.214, stddev=0.02] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0214883, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.85,-0.79,-0.58 -0.41,-0.27,0.007,0.29,0.45 0.60,0.76,0.80,0.97), mean=0.00779, stddev=0.345], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.04,0.18,0.25,0.38 0.58,0.68,0.80,0.89,0.92 0.94,0.95,0.97,0.98), mean=0.762, stddev=0.166] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.75e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=263919
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000294345, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03233, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.58,0.61,0.62,0.63 0.65,0.67,0.73,0.79,0.82 0.86,0.88,0.90,0.92), mean=0.734, stddev=0.0682], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.32,0.32,0.34 0.36,0.39,0.48,0.61,0.69 0.73,0.83,0.90,0.98), mean=0.505, stddev=0.129], bias-{mean,stddev}=-0.01537,0.4247, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.000294345, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01376, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.05,0.08,0.17 0.21,0.26,0.36,0.46,0.52 0.57,0.61,0.68,0.75), mean=0.363, stddev=0.127], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.22,0.22,0.24 0.25,0.27,0.31,0.35,0.37 0.40,0.42,0.43,0.49), mean=0.31, stddev=0.0491], bias-{mean,stddev}=-0.0002279,0.01482, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.9e+05, self-repaired-proportion=0.0542957, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-06,3e-05,0.0001,0.006 0.07,0.11,0.21,0.29,0.34 0.37,0.40,0.41,0.43), mean=0.201, stddev=0.102], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0001,0.002,0.004,0.04 0.19,0.27,0.42,0.58,0.65 0.72,0.76,0.77,0.81), mean=0.421, stddev=0.181], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.04,0.06,0.07 0.10,0.14,0.17,0.25), mean=0.0502, stddev=0.0264], oderiv-count=1.04038e+06
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=24284.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,7e-06,2e-05,0.01 0.07,0.11,0.19,0.27,0.32 0.35,0.37,0.38,0.44), mean=0.187, stddev=0.0928], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-05,0.0004,0.0007,0.06 0.20,0.25,0.31,0.37,0.41 0.43,0.45,0.46,0.56), mean=0.302, stddev=0.0964]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.000294345, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.0104, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.27,0.29,0.32 0.34,0.38,0.41,0.44,0.46 0.48,0.52,0.53,0.60), mean=0.408, stddev=0.0494], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.04,0.06,0.10 0.12,0.15,0.22,0.29,0.32 0.35,0.39,0.43,0.66), mean=0.223, stddev=0.0796], bias-{mean,stddev}=-0.001835,0.03613, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.08e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.23,0.24,0.26 0.27,0.30,0.33,0.37,0.39 0.42,0.44,0.46,0.53), mean=0.337, stddev=0.0485], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.32,0.34,0.35,0.37 0.38,0.40,0.43,0.46,0.47 0.49,0.50,0.50,0.54), mean=0.426, stddev=0.0361], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.02 0.02,0.02,0.03,0.03,0.03 0.03,0.03,0.03,0.03), mean=0.025, stddev=0.00315], oderiv-count=898880
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=22119.7, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.23,0.25,0.26 0.27,0.30,0.33,0.37,0.39 0.42,0.47,0.49,0.66), mean=0.335, stddev=0.0529], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.48,0.49,0.52 0.54,0.57,0.62,0.68,0.72 0.75,0.80,0.86,0.94), mean=0.624, stddev=0.0734]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.000294345, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02252, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.40,0.42,0.42,0.44 0.45,0.47,0.54,0.64,0.73 0.80,0.85,0.88,1.1), mean=0.564, stddev=0.11], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.84,0.85,0.87,0.91 0.93,0.95,1.0,1.1,1.2 1.2,1.3,1.3,1.4), mean=1.02, stddev=0.0935], bias-{mean,stddev}=0.0008055,0.4255, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.000294345, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.4054, w_fc-rms=0.4209, w_oc-rms=0.437, count=1.2e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615258, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.33,0.35,0.39 0.42,0.47,0.55,0.64,0.68 0.72,0.74,0.76,0.81), mean=0.555, stddev=0.0996], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.14,0.15,0.16 0.17,0.18,0.20,0.21,0.22 0.23,0.23,0.23,0.24), mean=0.197, stddev=0.0196] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615258, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.29,0.31,0.35 0.40,0.45,0.56,0.65,0.70 0.75,0.81,0.84,0.88), mean=0.554, stddev=0.12], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.11,0.13,0.15 0.17,0.18,0.20,0.22,0.23 0.23,0.23,0.23,0.24), mean=0.199, stddev=0.0246] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00978418, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.93,-0.77,-0.74,-0.63 -0.49,-0.27,0.008,0.27,0.45 0.58,0.69,0.74,0.79), mean=-0.00464, stddev=0.346], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.27,0.29,0.31 0.36,0.40,0.47,0.56,0.61 0.66,0.70,0.73,0.79), mean=0.482, stddev=0.1] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00615258, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.31,0.34,0.39 0.43,0.49,0.60,0.69,0.73 0.77,0.80,0.81,0.87), mean=0.589, stddev=0.116], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.13,0.14,0.15 0.16,0.17,0.18,0.20,0.21 0.22,0.22,0.22,0.23), mean=0.184, stddev=0.0206] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00933854, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.92,-0.78,-0.74,-0.59 -0.38,-0.24,-0.003,0.24,0.36 0.51,0.66,0.75,0.85), mean=-0.00566, stddev=0.312], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.24,0.31,0.38 0.49,0.57,0.67,0.76,0.82 0.85,0.90,0.90,0.95), mean=0.66, stddev=0.135] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.5e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=0, count-zeroing-boundaries=224446
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.000294345, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.06096, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.2,1.2,1.2 1.2,1.3,1.4,1.5,1.5 1.6,1.6,1.7,1.7), mean=1.39, stddev=0.114], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.42,0.50 0.63,0.76,0.97,1.2,1.2 1.3,1.4,1.4,1.7), mean=0.954, stddev=0.237], bias-{mean,stddev}=0.03928,0.4012, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.000294345, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.04101, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.26,0.48,0.50,0.53 0.55,0.58,0.64,0.71,0.77 0.82,0.89,0.96,2.1), mean=0.652, stddev=0.11], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.4,1.5,1.6,1.6 1.7,1.7,1.9,2.0,2.1 2.2,2.2,2.2,2.3), mean=1.87, stddev=0.171], bias-{mean,stddev}=1.919e-09,0.008571, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0,0.006,0.007,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.42), mean=0.0168, stddev=0.0137], oderiv-count=606080
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/6.mdl exp/nnet3/tdnn_lstm1c_sp/7.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:9.27609 tdnn2.affine:9.70459 lstm1.W_all:9.07766 lstm1.lstm_nonlin:2.17189 lstm1.W_rp:4.17516 tdnn3.affine:6.53504 tdnn4.affine:7.39507 lstm2.W_all:6.68427 lstm2.lstm_nonlin:2.2351 lstm2.W_rp:3.0438 tdnn5.affine:5.27652 tdnn6.affine:6.79371 lstm3.W_all:7.69717 lstm3.lstm_nonlin:2.11958 lstm3.W_rp:3.20358 output.affine:6.87948 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.9105 tdnn2.affine:11.5633 lstm1.W_all:31.984 lstm1.lstm_nonlin:16.9985 lstm1.W_rp:14.3248 tdnn3.affine:9.42128 tdnn4.affine:9.38245 lstm2.W_all:30.4198 lstm2.lstm_nonlin:17.5706 lstm2.W_rp:13.7227 tdnn5.affine:8.76916 tdnn6.affine:9.4057 lstm3.W_all:32.5952 lstm3.lstm_nonlin:16.6395 lstm3.W_rp:23.337 output.affine:30.3338 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.791345 tdnn2.affine:0.847847 lstm1.W_all:0.261781 lstm1.lstm_nonlin:0.11337 lstm1.W_rp:0.276488 tdnn3.affine:0.683082 tdnn4.affine:0.785537 lstm2.W_all:0.199989 lstm2.lstm_nonlin:0.112882 lstm2.W_rp:0.210226 tdnn5.affine:0.591361 tdnn6.affine:0.71811 lstm3.W_all:0.218435 lstm3.lstm_nonlin:0.113109 lstm3.W_rp:0.136724 output.affine:0.229299 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 10:03:56 KST 2020, elapsed time 0 seconds
