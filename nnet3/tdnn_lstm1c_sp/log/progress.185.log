# nnet3-info exp/nnet3/tdnn_lstm1c_sp/185.mdl && nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/184.mdl exp/nnet3/tdnn_lstm1c_sp/185.mdl 
# Started at Thu Jul 30 11:14:13 KST 2020
#
nnet3-info exp/nnet3/tdnn_lstm1c_sp/185.mdl 
WARNING (nnet3-info[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
left-context: 10
right-context: 20
num-parameters: 8426364
modulus: 1
component-node name=lda.delayed component=lda.delayed input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
input-node name=ivector dim=100
input-node name=input dim=40
component-node name=lda component=lda input=Append(Offset(input, -2), Offset(input, -1), input, Offset(input, 1), Offset(input, 2), ReplaceIndex(ivector, t, 0)) input-dim=300 output-dim=300
component-node name=tdnn1.affine component=tdnn1.affine input=lda input-dim=300 output-dim=520
component-node name=tdnn1.relu component=tdnn1.relu input=tdnn1.affine input-dim=520 output-dim=520
component-node name=tdnn1.batchnorm component=tdnn1.batchnorm input=tdnn1.relu input-dim=520 output-dim=520
component-node name=tdnn2.affine component=tdnn2.affine input=Append(Offset(tdnn1.batchnorm, -1), tdnn1.batchnorm, Offset(tdnn1.batchnorm, 1)) input-dim=1560 output-dim=520
component-node name=tdnn2.relu component=tdnn2.relu input=tdnn2.affine input-dim=520 output-dim=520
component-node name=tdnn2.batchnorm component=tdnn2.batchnorm input=tdnn2.relu input-dim=520 output-dim=520
component-node name=lstm1.W_all component=lstm1.W_all input=Append(tdnn2.batchnorm, IfDefined(Offset(lstm1.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm1.dropout_mask component=lstm1.dropout_mask input=lstm1.dropout_mask input-dim=3 output-dim=3
component-node name=lstm1.lstm_nonlin component=lstm1.lstm_nonlin input=Append(lstm1.W_all, IfDefined(Offset(lstm1.c_trunc, -3)), lstm1.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm1.c input-node=lstm1.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm1.m input-node=lstm1.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm1.rp component=lstm1.W_rp input=lstm1.m input-dim=520 output-dim=260
dim-range-node name=lstm1.r input-node=lstm1.rp dim-offset=0 dim=130
component-node name=lstm1.cr_trunc component=lstm1.cr_trunc input=Append(lstm1.c, lstm1.r) input-dim=650 output-dim=650
dim-range-node name=lstm1.c_trunc input-node=lstm1.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm1.r_trunc input-node=lstm1.cr_trunc dim-offset=520 dim=130
component-node name=tdnn3.affine component=tdnn3.affine input=Append(Offset(lstm1.rp, -3), lstm1.rp, Offset(lstm1.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn3.relu component=tdnn3.relu input=tdnn3.affine input-dim=520 output-dim=520
component-node name=tdnn3.batchnorm component=tdnn3.batchnorm input=tdnn3.relu input-dim=520 output-dim=520
component-node name=tdnn4.affine component=tdnn4.affine input=Append(Offset(tdnn3.batchnorm, -3), tdnn3.batchnorm, Offset(tdnn3.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn4.relu component=tdnn4.relu input=tdnn4.affine input-dim=520 output-dim=520
component-node name=tdnn4.batchnorm component=tdnn4.batchnorm input=tdnn4.relu input-dim=520 output-dim=520
component-node name=lstm2.W_all component=lstm2.W_all input=Append(tdnn4.batchnorm, IfDefined(Offset(lstm2.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm2.dropout_mask component=lstm2.dropout_mask input=lstm2.dropout_mask input-dim=3 output-dim=3
component-node name=lstm2.lstm_nonlin component=lstm2.lstm_nonlin input=Append(lstm2.W_all, IfDefined(Offset(lstm2.c_trunc, -3)), lstm2.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm2.c input-node=lstm2.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm2.m input-node=lstm2.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm2.rp component=lstm2.W_rp input=lstm2.m input-dim=520 output-dim=260
dim-range-node name=lstm2.r input-node=lstm2.rp dim-offset=0 dim=130
component-node name=lstm2.cr_trunc component=lstm2.cr_trunc input=Append(lstm2.c, lstm2.r) input-dim=650 output-dim=650
dim-range-node name=lstm2.c_trunc input-node=lstm2.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm2.r_trunc input-node=lstm2.cr_trunc dim-offset=520 dim=130
component-node name=tdnn5.affine component=tdnn5.affine input=Append(Offset(lstm2.rp, -3), lstm2.rp, Offset(lstm2.rp, 3)) input-dim=780 output-dim=520
component-node name=tdnn5.relu component=tdnn5.relu input=tdnn5.affine input-dim=520 output-dim=520
component-node name=tdnn5.batchnorm component=tdnn5.batchnorm input=tdnn5.relu input-dim=520 output-dim=520
component-node name=tdnn6.affine component=tdnn6.affine input=Append(Offset(tdnn5.batchnorm, -3), tdnn5.batchnorm, Offset(tdnn5.batchnorm, 3)) input-dim=1560 output-dim=520
component-node name=tdnn6.relu component=tdnn6.relu input=tdnn6.affine input-dim=520 output-dim=520
component-node name=tdnn6.batchnorm component=tdnn6.batchnorm input=tdnn6.relu input-dim=520 output-dim=520
component-node name=lstm3.W_all component=lstm3.W_all input=Append(tdnn6.batchnorm, IfDefined(Offset(lstm3.r_trunc, -3))) input-dim=650 output-dim=2080
component-node name=lstm3.dropout_mask component=lstm3.dropout_mask input=lstm3.dropout_mask input-dim=3 output-dim=3
component-node name=lstm3.lstm_nonlin component=lstm3.lstm_nonlin input=Append(lstm3.W_all, IfDefined(Offset(lstm3.c_trunc, -3)), lstm3.dropout_mask) input-dim=2603 output-dim=1040
dim-range-node name=lstm3.c input-node=lstm3.lstm_nonlin dim-offset=0 dim=520
dim-range-node name=lstm3.m input-node=lstm3.lstm_nonlin dim-offset=520 dim=520
component-node name=lstm3.rp component=lstm3.W_rp input=lstm3.m input-dim=520 output-dim=260
dim-range-node name=lstm3.r input-node=lstm3.rp dim-offset=0 dim=130
component-node name=lstm3.cr_trunc component=lstm3.cr_trunc input=Append(lstm3.c, lstm3.r) input-dim=650 output-dim=650
dim-range-node name=lstm3.c_trunc input-node=lstm3.cr_trunc dim-offset=0 dim=520
dim-range-node name=lstm3.r_trunc input-node=lstm3.cr_trunc dim-offset=520 dim=130
component-node name=output.affine component=output.affine input=lstm3.rp input-dim=260 output-dim=2104
component-node name=output.log-softmax component=output.log-softmax input=output.affine input-dim=2104 output-dim=2104
output-node name=output input=Offset(output.log-softmax, 5) dim=2104 objective=linear
component name=lda.delayed type=NoOpComponent, dim=300
component name=lda type=FixedAffineComponent, input-dim=300, output-dim=300, linear-params-rms=0.006709, bias-{mean,stddev}=-0.01975,0.4295
component name=tdnn1.affine type=NaturalGradientAffineComponent, input-dim=300, output-dim=520, learning-rate=0.00016737, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.02895, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.005,0.007,0.008,0.01 0.03,0.23,0.51,0.61,0.67 0.73,0.78,0.86,1.1), mean=0.449, stddev=0.224], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.16,0.19,0.56,0.78,1.0 1.3,1.4,1.4,1.5), mean=0.563, stddev=0.345], bias-{mean,stddev}=0.005045,0.05197, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn1.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.4e+05, self-repaired-proportion=0.131643, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(4e-07,2e-06,5e-06,3e-05 7e-05,0.003,0.06,0.08,0.10 0.11,0.13,0.13,0.18), mean=0.0557, stddev=0.0373], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(7e-05,0.001,0.003,0.01 0.03,0.11,0.48,0.62,0.70 0.77,0.87,0.89,0.98), mean=0.43, stddev=0.245], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.009,0.01,0.02,0.03 0.06,0.25,0.35,0.46,0.52 0.61,0.66,0.78,1.6), mean=0.343, stddev=0.177], oderiv-count=1.18323e+06
component name=tdnn1.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=35460.4, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-07,7e-07,1e-06,5e-06 3e-05,0.002,0.06,0.08,0.09 0.11,0.13,0.13,0.18), mean=0.052, stddev=0.0362], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-05,3e-05,6e-05,0.0001 0.0004,0.008,0.09,0.10,0.11 0.12,0.12,0.13,0.15), mean=0.0724, stddev=0.0406]
component name=tdnn2.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00016737, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01156, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.36,0.37,0.38 0.39,0.41,0.45,0.49,0.52 0.54,0.57,0.59,0.75), mean=0.454, stddev=0.0527], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.004,0.005,0.008 0.02,0.14,0.27,0.31,0.34 0.36,0.38,0.40,0.68), mean=0.237, stddev=0.115], bias-{mean,stddev}=-0.003331,0.02747, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn2.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.07e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.25,0.25,0.26 0.27,0.28,0.31,0.34,0.36 0.37,0.39,0.40,0.58), mean=0.311, stddev=0.0359], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.39,0.40,0.41 0.42,0.43,0.46,0.48,0.50 0.51,0.51,0.52,0.54), mean=0.459, stddev=0.0283], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.04,0.04,0.05,0.05,0.06 0.06,0.07,0.07,0.07), mean=0.0459, stddev=0.00857], oderiv-count=1.12698e+06
component name=tdnn2.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=34686.2, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.23,0.24,0.25 0.26,0.28,0.31,0.34,0.36 0.39,0.40,0.43,0.66), mean=0.311, stddev=0.0423], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.39,0.43,0.43,0.45 0.47,0.49,0.54,0.59,0.62 0.66,0.69,0.71,0.93), mean=0.543, stddev=0.0634]
component name=lstm1.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00016737, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01588, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(3e-06,0.0002,0.0007,0.003 0.02,0.17,0.35,0.53,0.62 0.69,0.76,0.81,1.2), mean=0.349, stddev=0.205], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.32,0.35,0.39 0.44,0.63,0.74,0.82,0.86 0.90,0.96,0.97,1.3), mean=0.708, stddev=0.154], bias-{mean,stddev}=-8.345e-05,0.02213, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm1.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00016737, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.0251, w_fc-rms=0.02994, w_oc-rms=0.03286, count=1.47e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626201, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.43,0.44,0.44,0.45 0.46,0.47,0.49,0.51,0.55 0.60,0.70,0.71,0.74), mean=0.5, stddev=0.0503], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.16,0.19,0.19,0.20 0.21,0.22,0.23,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.231, stddev=0.015] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626201, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.33,0.39,0.40,0.42 0.43,0.45,0.49,0.51,0.55 0.65,0.72,0.73,0.78), mean=0.496, stddev=0.0637], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.18,0.20 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0154] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00626201, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.83,-0.81,-0.52 -0.35,-0.19,0.003,0.20,0.32 0.41,0.64,0.78,0.86), mean=-0.00526, stddev=0.289], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.23,0.26,0.28,0.35 0.43,0.48,0.60,0.76,0.99 1.0,1.0,1.0,1.0), mean=0.631, stddev=0.188] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00626201, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.41,0.43 0.43,0.45,0.47,0.50,0.51 0.53,0.56,0.57,0.61), mean=0.473, stddev=0.0326], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.20 0.20,0.21,0.22,0.24,0.25 0.25,0.25,0.25,0.25), mean=0.224, stddev=0.0167] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00645564, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.81,-0.72,-0.45 -0.28,-0.15,0.002,0.15,0.24 0.37,0.55,0.74,0.85), mean=-0.00608, stddev=0.252], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.22,0.29,0.32,0.51 0.67,0.76,0.85,0.91,1.0 1.0,1.0,1.0,1.0), mean=0.824, stddev=0.142] }
component name=lstm1.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.98e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=6.7473e-06, count-zeroing-boundaries=296415
component name=lstm1.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0534435
component name=lstm1.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00016737, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03171, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.16,0.17,0.19 0.22,0.26,0.44,1.0,1.1 1.1,1.1,1.2,1.2), mean=0.626, stddev=0.362], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.001,0.004,0.008,0.02 0.05,0.29,0.45,0.60,0.71 0.87,1.0,1.3,1.5), mean=0.448, stddev=0.246], bias-{mean,stddev}=0.001456,0.2249, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00016737, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01181, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.23,0.26,0.32,0.38,0.42 0.45,0.48,0.49,0.60), mean=0.322, stddev=0.0726], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.06,0.06,0.07 0.08,0.09,0.20,0.37,0.41 0.44,0.46,0.48,0.52), mean=0.232, stddev=0.137], bias-{mean,stddev}=0.004199,0.02242, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn3.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=1.05e+06, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.05,0.06 0.06,0.08,0.11,0.13,0.15 0.16,0.17,0.18,0.20), mean=0.106, stddev=0.0314], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.19,0.24,0.28 0.33,0.38,0.51,0.61,0.65 0.69,0.73,0.75,0.86), mean=0.498, stddev=0.125], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.07,0.07,0.08,0.08 0.08,0.09,0.10,0.12,0.13 0.15,0.16,0.16,0.34), mean=0.104, stddev=0.0229], oderiv-count=1.16006e+06
component name=tdnn3.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=32363.8, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.03,0.04,0.05 0.06,0.08,0.10,0.13,0.14 0.16,0.17,0.18,0.20), mean=0.102, stddev=0.0319], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.09,0.10,0.11,0.12 0.13,0.14,0.16,0.18,0.20 0.21,0.22,0.23,0.25), mean=0.162, stddev=0.0261]
component name=tdnn4.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00016737, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.008571, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.26,0.27,0.28 0.30,0.31,0.33,0.36,0.38 0.40,0.42,0.43,0.57), mean=0.337, stddev=0.036], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.13,0.13,0.14 0.15,0.16,0.19,0.22,0.24 0.25,0.27,0.29,0.35), mean=0.192, stddev=0.0345], bias-{mean,stddev}=-0.01263,0.01548, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn4.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.27e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.21,0.22 0.23,0.24,0.27,0.30,0.31 0.32,0.33,0.36,0.43), mean=0.268, stddev=0.0335], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.34,0.37,0.38,0.39 0.40,0.41,0.44,0.46,0.48 0.49,0.50,0.51,0.54), mean=0.438, stddev=0.0308], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.03,0.03,0.03,0.03 0.03,0.03,0.04,0.04,0.04 0.04,0.04,0.04,0.05), mean=0.0364, stddev=0.00311], oderiv-count=974848
component name=tdnn4.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=30041.3, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.18,0.19,0.20,0.21 0.22,0.23,0.26,0.29,0.31 0.32,0.34,0.37,0.45), mean=0.265, stddev=0.0366], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.38,0.41,0.42,0.43 0.45,0.47,0.51,0.55,0.59 0.61,0.66,0.72,0.84), mean=0.514, stddev=0.0591]
component name=lstm2.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00016737, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01316, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(2e-07,9e-07,2e-06,4e-06 2e-05,0.0003,0.28,0.47,0.55 0.60,0.63,0.66,1.1), mean=0.254, stddev=0.219], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.24,0.26,0.32 0.39,0.54,0.61,0.66,0.69 0.74,0.79,0.84,1.4), mean=0.587, stddev=0.123], bias-{mean,stddev}=-0.004364,0.04178, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm2.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00016737, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.009269, w_fc-rms=0.01003, w_oc-rms=0.01472, count=1.35e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631477, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.43,0.44,0.45 0.45,0.47,0.50,0.51,0.54 0.58,0.62,0.65,0.71), mean=0.498, stddev=0.0411], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.20,0.21 0.22,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.235, stddev=0.0144] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631477, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.37,0.38,0.41 0.42,0.44,0.49,0.50,0.50 0.52,0.56,0.58,0.78), mean=0.476, stddev=0.0434], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.20,0.21,0.22 0.22,0.23,0.24,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.24, stddev=0.0117] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00631477, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.84,-0.71,-0.58,-0.38 -0.23,-0.12,-3e-05,0.12,0.23 0.34,0.55,0.66,0.85), mean=-0.00175, stddev=0.215], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.20,0.32,0.39,0.50 0.54,0.58,0.66,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.75, stddev=0.201] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00631477, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.36,0.41,0.41,0.43 0.44,0.45,0.50,0.50,0.51 0.54,0.57,0.59,0.63), mean=0.484, stddev=0.0352], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.20,0.20,0.21 0.21,0.22,0.23,0.25,0.25 0.25,0.25,0.25,0.25), mean=0.233, stddev=0.0154] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00631477, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.86,-0.56,-0.40,-0.30 -0.16,-0.09,0.0003,0.08,0.19 0.26,0.42,0.52,0.71), mean=-0.000343, stddev=0.174], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.24,0.52,0.62,0.73 0.79,0.83,0.91,1.0,1.0 1.0,1.0,1.0,1.0), mean=0.901, stddev=0.103] }
component name=lstm2.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.73e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=3.82495e-06, count-zeroing-boundaries=261441
component name=lstm2.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0534435
component name=lstm2.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00016737, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.02923, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.27,0.32,0.33,0.35 0.38,0.40,0.54,0.87,0.91 0.95,0.97,0.98,1.0), mean=0.629, stddev=0.221], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.0003,0.0006,0.0006,0.001 0.002,0.005,0.47,0.62,0.71 0.79,0.88,0.93,1.0), mean=0.369, stddev=0.294], bias-{mean,stddev}=0.004183,0.1432, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.affine type=NaturalGradientAffineComponent, input-dim=780, output-dim=520, learning-rate=0.00016737, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.01058, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.15,0.18,0.19,0.20 0.21,0.23,0.28,0.33,0.39 0.43,0.47,0.48,0.52), mean=0.287, stddev=0.0679], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.11,0.11,0.12 0.13,0.14,0.21,0.32,0.34 0.36,0.37,0.39,0.43), mean=0.226, stddev=0.0833], bias-{mean,stddev}=0.003572,0.01074, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn5.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=8.67e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.07,0.09,0.10 0.11,0.11,0.12,0.14), mean=0.0674, stddev=0.0223], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.18,0.19,0.23 0.28,0.35,0.47,0.57,0.61 0.62,0.66,0.68,0.74), mean=0.457, stddev=0.123], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.08,0.09,0.09,0.10 0.10,0.11,0.12,0.14,0.17 0.19,0.21,0.22,0.26), mean=0.129, stddev=0.0282], oderiv-count=962176
component name=tdnn5.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=27718.9, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.01,0.02,0.02,0.03 0.04,0.05,0.07,0.09,0.10 0.11,0.11,0.12,0.12), mean=0.0672, stddev=0.0225], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.05,0.07,0.07,0.08 0.09,0.10,0.11,0.13,0.13 0.14,0.15,0.16,0.16), mean=0.112, stddev=0.0181]
component name=tdnn6.affine type=NaturalGradientAffineComponent, input-dim=1560, output-dim=520, learning-rate=0.00016737, l2-regularize=0.05, max-change=0.75, linear-params-rms=0.00802, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.19,0.22,0.23,0.25 0.26,0.27,0.31,0.35,0.38 0.39,0.40,0.41,0.51), mean=0.314, stddev=0.045], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.12,0.12,0.13 0.13,0.15,0.17,0.21,0.23 0.25,0.29,0.32,0.36), mean=0.179, stddev=0.0395], bias-{mean,stddev}=-0.01048,0.01902, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=tdnn6.relu type=RectifiedLinearComponent, dim=520, self-repair-scale=1e-05, count=7.94e+05, self-repaired-proportion=0, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.19,0.20,0.21 0.22,0.24,0.27,0.29,0.31 0.32,0.33,0.34,0.50), mean=0.268, stddev=0.0345], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.35,0.36,0.37,0.38 0.39,0.40,0.42,0.44,0.46 0.47,0.48,0.49,0.51), mean=0.421, stddev=0.0278], oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.02,0.02,0.02,0.03 0.03,0.03,0.03,0.03,0.03 0.03,0.04,0.04,0.04), mean=0.0292, stddev=0.00253], oderiv-count=957120
component name=tdnn6.batchnorm type=BatchNormComponent, dim=520, block-dim=520, epsilon=0.001, target-rms=1, count=25396.5, test-mode=false, data-mean=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.17,0.18,0.19,0.21 0.22,0.24,0.27,0.30,0.32 0.33,0.35,0.35,0.53), mean=0.269, stddev=0.0384], data-stddev=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.31,0.37,0.39,0.41 0.44,0.47,0.52,0.58,0.61 0.64,0.67,0.71,0.97), mean=0.526, stddev=0.0717]
component name=lstm3.W_all type=NaturalGradientAffineComponent, input-dim=650, output-dim=2080, learning-rate=0.00016737, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.01892, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.13,0.20,0.21,0.26 0.29,0.34,0.42,0.62,0.70 0.75,0.79,0.81,1.3), mean=0.458, stddev=0.151], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.54,0.59,0.60,0.61 0.63,0.65,0.72,1.0,1.3 1.4,1.4,1.5,1.7), mean=0.824, stddev=0.255], bias-{mean,stddev}=0.02475,0.02606, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=lstm3.lstm_nonlin type=LstmNonlinearityComponent, input-dim=2603, output-dim=1040, learning-rate=0.00016737, l2-regularize=0.01, max-change=0.75, cell-dim=520, use-dropout=true, w_ic-rms=0.04555, w_fc-rms=0.04754, w_oc-rms=0.04765, count=1.22e+06, i_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637843, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.54,0.55,0.57 0.58,0.61,0.66,0.70,0.72 0.74,0.76,0.76,0.78), mean=0.655, stddev=0.0518], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.12,0.15,0.16,0.17 0.18,0.18,0.19,0.20,0.21 0.21,0.21,0.22,0.24), mean=0.193, stddev=0.013] }, f_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637843, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.46,0.47,0.49 0.52,0.54,0.58,0.63,0.69 0.74,0.77,0.79,0.86), mean=0.594, stddev=0.0696], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.10,0.15,0.16,0.17 0.18,0.19,0.21,0.21,0.22 0.22,0.22,0.22,0.23), mean=0.201, stddev=0.0162] }, c_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.0089171, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.82,-0.72,-0.66,-0.53 -0.35,-0.21,-0.01,0.22,0.33 0.47,0.63,0.74,0.83), mean=-0.00523, stddev=0.286], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.14,0.25,0.28,0.31 0.35,0.39,0.44,0.48,0.49 0.51,0.52,0.54,0.64), mean=0.429, stddev=0.0605] }, o_t_sigmoid={ self-repair-lower-threshold=0.05, self-repair-scale=1e-05, self-repaired-proportion=0.00637843, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.52,0.55,0.56,0.58 0.60,0.62,0.66,0.70,0.71 0.74,0.76,0.77,0.86), mean=0.657, stddev=0.0476], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.11,0.14,0.15,0.16 0.16,0.17,0.18,0.19,0.20 0.20,0.20,0.20,0.22), mean=0.18, stddev=0.0135] }, m_t_tanh={ self-repair-lower-threshold=0.2, self-repair-scale=1e-05, self-repaired-proportion=0.00738295, value-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(-0.87,-0.76,-0.69,-0.51 -0.33,-0.20,-0.005,0.19,0.31 0.45,0.66,0.75,0.86), mean=-0.00636, stddev=0.28], deriv-avg=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.21,0.28,0.30,0.35 0.43,0.53,0.61,0.66,0.68 0.70,0.71,0.72,0.73), mean=0.587, stddev=0.101] }
component name=lstm3.cr_trunc type=BackpropTruncationComponent, dim=650, scale=0.85, count=1.49e+06, recurrence-interval=3, clipping-threshold=30, clipped-proportion=0, zeroing-threshold=15, zeroing-interval=20, zeroed-proportion=8.99552e-06, count-zeroing-boundaries=222333
component name=lstm3.dropout_mask type=DropoutMaskComponent, output-dim=3, dropout-proportion=0.0534435
component name=lstm3.W_rp type=NaturalGradientAffineComponent, input-dim=520, output-dim=260, learning-rate=0.00016737, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.07373, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.96,1.0,1.1,1.1 1.1,1.2,1.6,2.0,2.1 2.2,2.2,2.3,2.3), mean=1.63, stddev=0.411], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.59,0.65,0.84,0.96 1.0,1.1,1.2,1.3,1.4 1.4,1.5,1.5,1.6), mean=1.18, stddev=0.155], bias-{mean,stddev}=0.01219,0.3262, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.affine type=NaturalGradientAffineComponent, input-dim=260, output-dim=2104, learning-rate=0.00016737, l2-regularize=0.01, max-change=1.5, linear-params-rms=0.03842, linear-params-row-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.41,0.50,0.51,0.53 0.54,0.56,0.60,0.65,0.69 0.72,0.76,0.81,2.3), mean=0.613, stddev=0.0906], linear-params-col-norms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(1.1,1.1,1.1,1.2 1.2,1.3,1.7,2.1,2.2 2.3,2.4,2.4,2.4), mean=1.72, stddev=0.401], bias-{mean,stddev}=5.68e-09,0.03257, rank-in=20, rank-out=80, num-samples-history=2000, update-period=4, alpha=4
component name=output.log-softmax type=LogSoftmaxComponent, dim=2104, oderiv-rms=[percentiles(0,1,2,5 10,20,50,80,90 95,98,99,100)=(0.003,0.007,0.008,0.009 0.01,0.01,0.02,0.02,0.02 0.03,0.03,0.04,0.41), mean=0.017, stddev=0.0135], oderiv-count=545280
nnet3-show-progress --use-gpu=no exp/nnet3/tdnn_lstm1c_sp/184.mdl exp/nnet3/tdnn_lstm1c_sp/185.mdl 
LOG (nnet3-show-progress[5.5.0-]:SelectGpuId():cu-device.cc:153) Manually selected to compute on CPU.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
WARNING (nnet3-show-progress[5.5.0-]:Check():nnet-nnet.cc:789) Node lda.delayed is never used to compute any output.
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:143) Parameter differences per layer are [ tdnn1.affine:6.72628 tdnn2.affine:6.61347 lstm1.W_all:5.25736 lstm1.lstm_nonlin:0.0911612 lstm1.W_rp:2.11203 tdnn3.affine:4.2145 tdnn4.affine:4.76358 lstm2.W_all:3.59028 lstm2.lstm_nonlin:0.0462798 lstm2.W_rp:1.45637 tdnn5.affine:3.32747 tdnn6.affine:3.87712 lstm3.W_all:4.7353 lstm3.lstm_nonlin:0.103462 lstm3.W_rp:1.88966 output.affine:4.22124 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:153) Norms of parameter matrices from <new-nnet-in> are [ tdnn1.affine:11.4964 tdnn2.affine:10.4311 lstm1.W_all:18.4953 lstm1.lstm_nonlin:1.16412 lstm1.W_rp:12.212 tdnn3.affine:7.53664 tdnn4.affine:7.73296 lstm2.W_all:15.4164 lstm2.lstm_nonlin:0.457935 lstm2.W_rp:10.9931 tdnn5.affine:6.74021 tdnn6.affine:7.24071 lstm3.W_all:22.0638 lstm3.lstm_nonlin:1.85339 lstm3.W_rp:27.6164 output.affine:28.4539 ]
LOG (nnet3-show-progress[5.5.0-]:main():nnet3-show-progress.cc:157) Relative parameter differences per layer are [ tdnn1.affine:0.589423 tdnn2.affine:0.635108 lstm1.W_all:0.284356 lstm1.lstm_nonlin:0.0782495 lstm1.W_rp:0.173439 tdnn3.affine:0.556936 tdnn4.affine:0.615718 lstm2.W_all:0.233359 lstm2.lstm_nonlin:0.100689 lstm2.W_rp:0.133046 tdnn5.affine:0.496476 tdnn6.affine:0.538601 lstm3.W_all:0.214794 lstm3.lstm_nonlin:0.0554547 lstm3.W_rp:0.0685453 output.affine:0.148486 ]
# Accounting: time=0 threads=1
# Ended (code 0) at Thu Jul 30 11:14:13 KST 2020, elapsed time 0 seconds
